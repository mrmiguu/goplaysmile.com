// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Node
#include <Node.h>
#endif


void Node_obj::__construct(::String id,::Array< Int > hwys){
            	HX_STACK_FRAME("Node","new",0xb7119014,"Node.new","Node.hx",10,0xe41f0ddc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(hwys,"hwys")
HXLINE(  11)		this->hwys = hwys;
HXLINE(  12)		this->id = id;
            	}

Dynamic Node_obj::__CreateEmpty() { return new Node_obj; }

hx::ObjectPtr< Node_obj > Node_obj::__new(::String id,::Array< Int > hwys)
{
	hx::ObjectPtr< Node_obj > _hx_result = new Node_obj();
	_hx_result->__construct(id,hwys);
	return _hx_result;
}

Dynamic Node_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Node_obj > _hx_result = new Node_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}


Node_obj::Node_obj()
{
}

void Node_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Node);
	HX_MARK_MEMBER_NAME(list,"list");
	HX_MARK_MEMBER_NAME(hwys,"hwys");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_END_CLASS();
}

void Node_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(list,"list");
	HX_VISIT_MEMBER_NAME(hwys,"hwys");
	HX_VISIT_MEMBER_NAME(id,"id");
}

hx::Val Node_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list); }
		if (HX_FIELD_EQ(inName,"hwys") ) { return hx::Val( hwys); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Node_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { list=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hwys") ) { hwys=inValue.Cast< ::Array< Int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Node_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"));
	outFields->push(HX_HCSTRING("hwys","\xa9","\xe6","\x18","\x45"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Node_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Node_obj,list),HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Node_obj,hwys),HX_HCSTRING("hwys","\xa9","\xe6","\x18","\x45")},
	{hx::fsString,(int)offsetof(Node_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Node_obj_sStaticStorageInfo = 0;
#endif

static ::String Node_obj_sMemberFields[] = {
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("hwys","\xa9","\xe6","\x18","\x45"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	::String(null()) };

static void Node_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Node_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Node_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Node_obj::__mClass,"__mClass");
};

#endif

hx::Class Node_obj::__mClass;

void Node_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Node","\x22","\x36","\xe3","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Node_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Node_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Node_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Node_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Node_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Node_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

