// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_AStar
#include <AStar.h>
#endif
#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_Node
#include <Node.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Terrain
#include <Terrain.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_11_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",11,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_41_onGoal,"Player","onGoal",0x51e6eb1f,"Player.onGoal","Player.hx",41,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_43_addCard,"Player","addCard",0xa7f22aa4,"Player.addCard","Player.hx",43,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_51_equipCard,"Player","equipCard",0xd48eed73,"Player.equipCard","Player.hx",51,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_55_save,"Player","save",0x20a0074a,"Player.save","Player.hx",55,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_60_init,"Player","init",0x1a0db71d,"Player.init","Player.hx",60,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_73_reset,"Player","reset",0xdaa25922,"Player.reset","Player.hx",73,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_92_on,"Player","on",0xa27fcfec,"Player.on","Player.hx",92,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_97_go,"Player","go",0xa27fc8f5,"Player.go","Player.hx",97,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_103_getUser,"Player","getUser",0x4a2b0c14,"Player.getUser","Player.hx",103,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_107_getColor,"Player","getColor",0x3ba9877a,"Player.getColor","Player.hx",107,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_110_setColor,"Player","setColor",0xea06e0ee,"Player.setColor","Player.hx",110,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_117_informColors,"Player","informColors",0xaf14c346,"Player.informColors","Player.hx",117,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_125_informLocs,"Player","informLocs",0x3e09e809,"Player.informLocs","Player.hx",125,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_133_informDests,"Player","informDests",0x68dc7efb,"Player.informDests","Player.hx",133,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_141_broadcastColor,"Player","broadcastColor",0xac0da8ef,"Player.broadcastColor","Player.hx",141,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_149_broadcastLoc,"Player","broadcastLoc",0xb0a2510c,"Player.broadcastLoc","Player.hx",149,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_157_broadcastDest,"Player","broadcastDest",0xd8135c56,"Player.broadcastDest","Player.hx",157,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_165_getLoc,"Player","getLoc",0x0e14e6d7,"Player.getLoc","Player.hx",165,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_169_getDest,"Player","getDest",0x3ee3d82b,"Player.getDest","Player.hx",169,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_172_to,"Player","to",0xa27fd448,"Player.to","Player.hx",172,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_177_refine,"Player","refine",0x6ad6e2ba,"Player.refine","Player.hx",177,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_184_setCur,"Player","setCur",0xda566c4b,"Player.setCur","Player.hx",184,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_190_increaseExp,"Player","increaseExp",0xc2729d8e,"Player.increaseExp","Player.hx",190,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_202_rollDie,"Player","rollDie",0x87045fd6,"Player.rollDie","Player.hx",202,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_210_loop,"Player","loop",0x1c0a2271,"Player.loop","Player.hx",210,0xa27fc9dd)

void Player_obj::__construct( ::Globals g,::String user,::String pass, ::sys::net::Socket s){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_11_new)
HXLINE(  28)		this->roygbiv = HX_("roygbiv",e4,d2,07,d6);
HXLINE(  20)		this->level = (int)1;
HXLINE(  19)		this->cards = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  31)		::haxe::Log_obj::trace(HX_("new Player",41,33,ad,0e),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),31,HX_("Player",81,5f,4d,6c),HX_("new",60,d0,53,00)));
HXLINE(  32)		this->g = g;
HXLINE(  33)		this->user = user;
HXLINE(  34)		this->pass = pass;
HXLINE(  35)		this->socket = s;
HXLINE(  37)		::sys::FileSystem_obj::createDirectory(HX_("accounts",26,1b,63,8d));
HXLINE(  38)		this->save();
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6c4d5f81;
}

bool Player_obj::onGoal(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_41_onGoal)
HXLINE(  41)		int _hx_tmp = this->cur;
HXDLIN(  41)		return (_hx_tmp == (this->path->length - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,onGoal,return )

void Player_obj::addCard( ::Card c){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_43_addCard)
HXLINE(  44)		::haxe::Log_obj::trace(HX_("addCard",91,60,f7,7d),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),44,HX_("Player",81,5f,4d,6c),HX_("addCard",91,60,f7,7d)));
HXLINE(  46)		if ((this->cards->length == (int)0)) {
HXLINE(  46)			this->card = c;
            		}
HXLINE(  47)		this->cards->push(c);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,addCard,(void))

void Player_obj::equipCard( ::Card c){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_51_equipCard)
HXLINE(  51)		if ((this->cards->indexOf(c,null()) != (int)-1)) {
HXLINE(  51)			this->card = c;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,equipCard,(void))

void Player_obj::save(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_55_save)
HXLINE(  55)		::String _hx_tmp = (HX_("accounts/",49,a6,54,29) + this->user);
HXDLIN(  55)		::sys::io::File_obj::saveContent(_hx_tmp,(((((HX_("\r\n            ",dd,ca,03,fe) + this->pass) + HX_(":",3a,00,00,00)) + this->exp) + HX_(":",3a,00,00,00)) + this->level));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,save,(void))

void Player_obj::init(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_60_init)
HXLINE(  61)		::haxe::Log_obj::trace(HX_("init",10,3b,bb,45),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),61,HX_("Player",81,5f,4d,6c),HX_("init",10,3b,bb,45)));
HXLINE(  62)		::String _hx_tmp = this->roygbiv;
HXDLIN(  62)		this->setColor(_hx_tmp.charAt(hx::Mod(this->user.length,(int)7)));
HXLINE(  63)		this->reset();
HXLINE(  64)		{
HXLINE(  64)			::Array< ::Dynamic> m = this->g->out;
HXDLIN(  64)			 ::sys::net::Socket s = this->socket;
HXDLIN(  64)			::cpp::VirtualArray t = ::cpp::VirtualArray_obj::__new(1)->init(0,HX_("init",10,3b,bb,45));
HXDLIN(  64)			 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN(  64)			{
HXLINE(  64)				int _g = (int)0;
HXDLIN(  64)				while((_g < t->get_length())){
HXLINE(  64)					 ::Dynamic token = t->__get(_g);
HXDLIN(  64)					_g = (_g + (int)1);
HXDLIN(  64)					serial->serialize(token);
            				}
            			}
HXDLIN(  64)			m->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            				->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            		}
HXLINE(  65)		::haxe::Log_obj::trace(HX_("addLetter(socket,['init'])",3f,ec,cb,9a),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),65,HX_("Player",81,5f,4d,6c),HX_("init",10,3b,bb,45)));
HXLINE(  68)		this->informColors();
HXLINE(  69)		this->informLocs();
HXLINE(  70)		this->informDests();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,init,(void))

void Player_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_73_reset)
HXLINE(  74)		::haxe::Log_obj::trace(HX_("reset",cf,49,c8,e6),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),74,HX_("Player",81,5f,4d,6c),HX_("reset",cf,49,c8,e6)));
HXLINE(  79)		int i = ::Std_obj::random(this->g->t->pairs->length);
HXLINE(  82)		int s = ::Std_obj::random((int)2);
HXLINE(  86)		 ::Node _hx_tmp = this->g->t->pairs->__get(i).StaticCast< ::Array< ::Dynamic> >()->__get(s).StaticCast<  ::Node >();
HXDLIN(  86)		::Array< ::Dynamic> _hx_tmp1 = this->g->t->pairs->__get(i).StaticCast< ::Array< ::Dynamic> >();
HXDLIN(  86)		this->refine(_hx_tmp,_hx_tmp1->__get(hx::Mod((s + (int)1),(int)2)).StaticCast<  ::Node >());
HXLINE(  88)		 ::Dynamic _hx_tmp2 = ::haxe::Log_obj::trace;
HXDLIN(  88)		::String _hx_tmp3 = ((HX_("",00,00,00,00) + this->user) + HX_(".dest <- ",ff,97,e7,81));
HXDLIN(  88)		::String _hx_tmp4 = (_hx_tmp3 + this->getDest());
HXDLIN(  88)		_hx_tmp2(_hx_tmp4,hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),88,HX_("Player",81,5f,4d,6c),HX_("reset",cf,49,c8,e6)));
HXLINE(  89)		this->broadcastDest();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,reset,(void))

bool Player_obj::on(int hwy){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_92_on)
HXLINE(  93)		::haxe::Log_obj::trace(HX_("on",1f,61,00,00),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),93,HX_("Player",81,5f,4d,6c),HX_("on",1f,61,00,00)));
HXLINE(  94)		return (this->path->__get(this->cur).StaticCast<  ::Node >()->hwys->indexOf(hwy,null()) != (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,on,return )

void Player_obj::go(int n){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_97_go)
HXLINE(  98)		::haxe::Log_obj::trace(HX_("go",28,5a,00,00),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),98,HX_("Player",81,5f,4d,6c),HX_("go",28,5a,00,00)));
HXLINE(  99)		int _hx_tmp;
HXDLIN(  99)		if (((this->cur + n) >= this->path->length)) {
HXLINE(  99)			_hx_tmp = (this->path->length - (int)1);
            		}
            		else {
HXLINE(  99)			_hx_tmp = (this->cur + n);
            		}
HXDLIN(  99)		this->setCur(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,go,(void))

::String Player_obj::getUser(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_103_getUser)
HXLINE( 103)		return this->user;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getUser,return )

::String Player_obj::getColor(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_107_getColor)
HXLINE( 107)		return this->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getColor,return )

void Player_obj::setColor(::String c){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_110_setColor)
HXLINE( 111)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 111)		_hx_tmp((((HX_("",00,00,00,00) + this->user) + HX_(".color <- ",64,6b,4a,93)) + c),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),111,HX_("Player",81,5f,4d,6c),HX_("setColor",61,da,90,58)));
HXLINE( 112)		this->color = c;
HXLINE( 113)		this->broadcastColor();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,setColor,(void))

void Player_obj::informColors(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_117_informColors)
HXLINE( 117)		 ::Dynamic p = this->g->players->iterator();
HXDLIN( 117)		while(( (bool)(p->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 117)			 ::Player p1 = ( ( ::Player)(p->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 118)			::Array< ::Dynamic> m = this->g->out;
HXDLIN( 118)			 ::sys::net::Socket s = this->socket;
HXLINE( 119)			::String t = p1->getUser();
HXLINE( 118)			::cpp::VirtualArray t1 = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("color",63,71,5c,4a))->init(1,t)->init(2,p1->getColor());
HXDLIN( 118)			 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 118)			{
HXLINE( 118)				int _g = (int)0;
HXDLIN( 118)				while((_g < t1->get_length())){
HXLINE( 118)					 ::Dynamic token = t1->__get(_g);
HXDLIN( 118)					_g = (_g + (int)1);
HXDLIN( 118)					serial->serialize(token);
            				}
            			}
HXDLIN( 118)			m->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            				->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,informColors,(void))

void Player_obj::informLocs(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_125_informLocs)
HXLINE( 125)		 ::Dynamic p = this->g->players->iterator();
HXDLIN( 125)		while(( (bool)(p->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 125)			 ::Player p1 = ( ( ::Player)(p->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 126)			::Array< ::Dynamic> m = this->g->out;
HXDLIN( 126)			 ::sys::net::Socket s = this->socket;
HXLINE( 127)			::String t = p1->getUser();
HXLINE( 126)			::cpp::VirtualArray t1 = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("loc",80,54,52,00))->init(1,t)->init(2,p1->getLoc());
HXDLIN( 126)			 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 126)			{
HXLINE( 126)				int _g = (int)0;
HXDLIN( 126)				while((_g < t1->get_length())){
HXLINE( 126)					 ::Dynamic token = t1->__get(_g);
HXDLIN( 126)					_g = (_g + (int)1);
HXDLIN( 126)					serial->serialize(token);
            				}
            			}
HXDLIN( 126)			m->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            				->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,informLocs,(void))

void Player_obj::informDests(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_133_informDests)
HXLINE( 133)		 ::Dynamic p = this->g->players->iterator();
HXDLIN( 133)		while(( (bool)(p->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 133)			 ::Player p1 = ( ( ::Player)(p->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 134)			::Array< ::Dynamic> m = this->g->out;
HXDLIN( 134)			 ::sys::net::Socket s = this->socket;
HXLINE( 135)			::String t = p1->getUser();
HXLINE( 134)			::cpp::VirtualArray t1 = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("dest",62,5e,66,42))->init(1,t)->init(2,p1->getDest());
HXDLIN( 134)			 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 134)			{
HXLINE( 134)				int _g = (int)0;
HXDLIN( 134)				while((_g < t1->get_length())){
HXLINE( 134)					 ::Dynamic token = t1->__get(_g);
HXDLIN( 134)					_g = (_g + (int)1);
HXDLIN( 134)					serial->serialize(token);
            				}
            			}
HXDLIN( 134)			m->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            				->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,informDests,(void))

void Player_obj::broadcastColor(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_141_broadcastColor)
HXLINE( 141)		int _g = (int)0;
HXDLIN( 141)		::Array< ::Dynamic> _g1 = this->g->sockets;
HXDLIN( 141)		while((_g < _g1->length)){
HXLINE( 141)			 ::sys::net::Socket s = _g1->__get(_g).StaticCast<  ::sys::net::Socket >();
HXDLIN( 141)			_g = (_g + (int)1);
HXLINE( 142)			{
HXLINE( 142)				::Array< ::Dynamic> m = this->g->out;
HXLINE( 143)				::String t = this->user;
HXLINE( 142)				::cpp::VirtualArray t1 = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("color",63,71,5c,4a))->init(1,t)->init(2,this->getColor());
HXDLIN( 142)				 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 142)				{
HXLINE( 142)					int _g2 = (int)0;
HXDLIN( 142)					while((_g2 < t1->get_length())){
HXLINE( 142)						 ::Dynamic token = t1->__get(_g2);
HXDLIN( 142)						_g2 = (_g2 + (int)1);
HXDLIN( 142)						serial->serialize(token);
            					}
            				}
HXDLIN( 142)				m->push( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            					->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,broadcastColor,(void))

void Player_obj::broadcastLoc(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_149_broadcastLoc)
HXLINE( 149)		int _g = (int)0;
HXDLIN( 149)		::Array< ::Dynamic> _g1 = this->g->sockets;
HXDLIN( 149)		while((_g < _g1->length)){
HXLINE( 149)			 ::sys::net::Socket s = _g1->__get(_g).StaticCast<  ::sys::net::Socket >();
HXDLIN( 149)			_g = (_g + (int)1);
HXLINE( 150)			{
HXLINE( 150)				::Array< ::Dynamic> m = this->g->out;
HXLINE( 151)				::String t = this->user;
HXLINE( 150)				::cpp::VirtualArray t1 = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("loc",80,54,52,00))->init(1,t)->init(2,this->getLoc());
HXDLIN( 150)				 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 150)				{
HXLINE( 150)					int _g2 = (int)0;
HXDLIN( 150)					while((_g2 < t1->get_length())){
HXLINE( 150)						 ::Dynamic token = t1->__get(_g2);
HXDLIN( 150)						_g2 = (_g2 + (int)1);
HXDLIN( 150)						serial->serialize(token);
            					}
            				}
HXDLIN( 150)				m->push( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            					->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,broadcastLoc,(void))

void Player_obj::broadcastDest(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_157_broadcastDest)
HXLINE( 157)		int _g = (int)0;
HXDLIN( 157)		::Array< ::Dynamic> _g1 = this->g->sockets;
HXDLIN( 157)		while((_g < _g1->length)){
HXLINE( 157)			 ::sys::net::Socket s = _g1->__get(_g).StaticCast<  ::sys::net::Socket >();
HXDLIN( 157)			_g = (_g + (int)1);
HXLINE( 158)			{
HXLINE( 158)				::Array< ::Dynamic> m = this->g->out;
HXLINE( 159)				::String t = this->user;
HXLINE( 158)				::cpp::VirtualArray t1 = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("dest",62,5e,66,42))->init(1,t)->init(2,this->getDest());
HXDLIN( 158)				 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 158)				{
HXLINE( 158)					int _g2 = (int)0;
HXDLIN( 158)					while((_g2 < t1->get_length())){
HXLINE( 158)						 ::Dynamic token = t1->__get(_g2);
HXDLIN( 158)						_g2 = (_g2 + (int)1);
HXDLIN( 158)						serial->serialize(token);
            					}
            				}
HXDLIN( 158)				m->push( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            					->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,broadcastDest,(void))

::String Player_obj::getLoc(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_165_getLoc)
HXLINE( 165)		return this->path->__get(this->cur).StaticCast<  ::Node >()->id;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getLoc,return )

::String Player_obj::getDest(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_169_getDest)
HXLINE( 169)		::Array< ::Dynamic> _hx_tmp = this->path;
HXDLIN( 169)		return _hx_tmp->__get((this->path->length - (int)1)).StaticCast<  ::Node >()->id;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,getDest,return )

void Player_obj::to(::String city){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_172_to)
HXLINE( 173)		::haxe::Log_obj::trace(HX_("to",7b,65,00,00),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),173,HX_("Player",81,5f,4d,6c),HX_("to",7b,65,00,00)));
HXLINE( 174)		 ::Node _hx_tmp = this->g->t->map->get(city).StaticCast<  ::Node >();
HXDLIN( 174)		::Dynamic this1 = this->g->t->map;
HXDLIN( 174)		this->refine(_hx_tmp,( ( ::haxe::ds::StringMap)(this1) )->get(this->getDest()).StaticCast<  ::Node >());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,to,(void))

void Player_obj::refine( ::Node start, ::Node end){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_177_refine)
HXLINE( 178)		::haxe::Log_obj::trace(HX_("refine",6d,89,e3,ff),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),178,HX_("Player",81,5f,4d,6c),HX_("refine",6d,89,e3,ff)));
HXLINE( 180)		this->path = this->g->t->aStar->find(start,end);
HXLINE( 181)		this->setCur((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Player_obj,refine,(void))

void Player_obj::setCur(int n){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_184_setCur)
HXLINE( 185)		this->cur = n;
HXLINE( 186)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 186)		::String _hx_tmp1 = ((HX_("",00,00,00,00) + this->user) + HX_(".loc <- ",81,98,bb,49));
HXDLIN( 186)		::String _hx_tmp2 = (_hx_tmp1 + this->getLoc());
HXDLIN( 186)		_hx_tmp(_hx_tmp2,hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),186,HX_("Player",81,5f,4d,6c),HX_("setCur",fe,12,63,6f)));
HXLINE( 187)		this->broadcastLoc();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,setCur,(void))

void Player_obj::increaseExp(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_190_increaseExp)
HXLINE( 191)		::haxe::Log_obj::trace(HX_("increaseExp",fb,cd,ad,31),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),191,HX_("Player",81,5f,4d,6c),HX_("increaseExp",fb,cd,ad,31)));
HXLINE( 192)		int _hx_tmp = ::Std_obj::_hx_int((::Math_obj::pow(((Float)1.1),this->level) + ((Float)1.95)));
HXDLIN( 192)		this->req = (_hx_tmp * this->level);
HXLINE( 193)		this->exp = hx::Mod((this->exp + (int)1),this->req);
HXLINE( 197)		if ((this->exp == (int)0)) {
HXLINE( 197)			this->level++;
            		}
HXLINE( 199)		{
HXLINE( 199)			::Array< ::Dynamic> m = this->g->out;
HXDLIN( 199)			 ::sys::net::Socket s = this->socket;
HXDLIN( 199)			::cpp::VirtualArray t = ::cpp::VirtualArray_obj::__new(4)->init(0,HX_("exp",9d,0c,4d,00))->init(1,this->req)->init(2,this->exp)->init(3,this->level);
HXDLIN( 199)			 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 199)			{
HXLINE( 199)				int _g = (int)0;
HXDLIN( 199)				while((_g < t->get_length())){
HXLINE( 199)					 ::Dynamic token = t->__get(_g);
HXDLIN( 199)					_g = (_g + (int)1);
HXDLIN( 199)					serial->serialize(token);
            				}
            			}
HXDLIN( 199)			m->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            				->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,increaseExp,(void))

void Player_obj::rollDie(){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_202_rollDie)
HXLINE( 203)		this->side = ::Std_obj::random((int)6);
HXLINE( 204)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 204)		_hx_tmp((((HX_("",00,00,00,00) + this->user) + HX_(".side <- ",b4,05,d5,df)) + this->side),hx::SourceInfo(HX_("Player.hx",dd,c9,7f,a2),204,HX_("Player",81,5f,4d,6c),HX_("rollDie",c3,95,09,5d)));
HXLINE( 205)		{
HXLINE( 205)			::Array< ::Dynamic> m = this->g->out;
HXDLIN( 205)			 ::sys::net::Socket s = this->socket;
HXDLIN( 205)			::cpp::VirtualArray t = ::cpp::VirtualArray_obj::__new(2)->init(0,HX_("roll",7d,eb,ae,4b))->init(1,this->side);
HXDLIN( 205)			 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 205)			{
HXLINE( 205)				int _g = (int)0;
HXDLIN( 205)				while((_g < t->get_length())){
HXLINE( 205)					 ::Dynamic token = t->__get(_g);
HXDLIN( 205)					_g = (_g + (int)1);
HXDLIN( 205)					serial->serialize(token);
            				}
            			}
HXDLIN( 205)			m->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            				->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            		}
HXLINE( 206)		this->rollerAnim = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,rollDie,(void))

void Player_obj::loop(Float time){
            	HX_GC_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_210_loop)
HXLINE( 210)		bool _hx_tmp;
HXDLIN( 210)		if (this->rollerAnim) {
HXLINE( 210)			_hx_tmp = (this->rollerFuture < time);
            		}
            		else {
HXLINE( 210)			_hx_tmp = false;
            		}
HXDLIN( 210)		if (_hx_tmp) {
HXLINE( 212)			if ((this->roller == this->side)) {
HXLINE( 214)				this->rollerAnim = false;
HXLINE( 216)				if (!(this->onGoal())) {
HXLINE( 217)					this->card->i->__get(this->side)(hx::ObjectPtr<OBJ_>(this));
HXLINE( 219)					if (this->onGoal()) {
HXLINE( 220)						{
HXLINE( 220)							::Array< ::Dynamic> m = this->g->out;
HXDLIN( 220)							 ::sys::net::Socket s = this->socket;
HXDLIN( 220)							::cpp::VirtualArray t = ::cpp::VirtualArray_obj::__new(1)->init(0,HX_("arrived",6d,8c,c0,3f));
HXDLIN( 220)							 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 220)							{
HXLINE( 220)								int _g = (int)0;
HXDLIN( 220)								while((_g < t->get_length())){
HXLINE( 220)									 ::Dynamic token = t->__get(_g);
HXDLIN( 220)									_g = (_g + (int)1);
HXDLIN( 220)									serial->serialize(token);
            								}
            							}
HXDLIN( 220)							m->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            								->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            						}
HXLINE( 221)						this->increaseExp();
            					}
            				}
            				else {
HXLINE( 223)					this->reset();
            				}
            			}
            			else {
HXLINE( 225)				this->roller = hx::Mod((this->roller + (int)1),(int)6);
            			}
HXLINE( 227)			this->rollerFuture = (time + ((Float)0.125));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player_obj,loop,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new( ::Globals g,::String user,::String pass, ::sys::net::Socket s) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(g,user,pass,s);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx, ::Globals g,::String user,::String pass, ::sys::net::Socket s) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(g,user,pass,s);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(user,"user");
	HX_MARK_MEMBER_NAME(pass,"pass");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(cur,"cur");
	HX_MARK_MEMBER_NAME(card,"card");
	HX_MARK_MEMBER_NAME(cards,"cards");
	HX_MARK_MEMBER_NAME(level,"level");
	HX_MARK_MEMBER_NAME(req,"req");
	HX_MARK_MEMBER_NAME(exp,"exp");
	HX_MARK_MEMBER_NAME(socket,"socket");
	HX_MARK_MEMBER_NAME(side,"side");
	HX_MARK_MEMBER_NAME(roller,"roller");
	HX_MARK_MEMBER_NAME(rollerFuture,"rollerFuture");
	HX_MARK_MEMBER_NAME(rollerAnim,"rollerAnim");
	HX_MARK_MEMBER_NAME(roygbiv,"roygbiv");
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(user,"user");
	HX_VISIT_MEMBER_NAME(pass,"pass");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(cur,"cur");
	HX_VISIT_MEMBER_NAME(card,"card");
	HX_VISIT_MEMBER_NAME(cards,"cards");
	HX_VISIT_MEMBER_NAME(level,"level");
	HX_VISIT_MEMBER_NAME(req,"req");
	HX_VISIT_MEMBER_NAME(exp,"exp");
	HX_VISIT_MEMBER_NAME(socket,"socket");
	HX_VISIT_MEMBER_NAME(side,"side");
	HX_VISIT_MEMBER_NAME(roller,"roller");
	HX_VISIT_MEMBER_NAME(rollerFuture,"rollerFuture");
	HX_VISIT_MEMBER_NAME(rollerAnim,"rollerAnim");
	HX_VISIT_MEMBER_NAME(roygbiv,"roygbiv");
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"on") ) { return hx::Val( on_dyn()); }
		if (HX_FIELD_EQ(inName,"go") ) { return hx::Val( go_dyn()); }
		if (HX_FIELD_EQ(inName,"to") ) { return hx::Val( to_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cur") ) { return hx::Val( cur); }
		if (HX_FIELD_EQ(inName,"req") ) { return hx::Val( req); }
		if (HX_FIELD_EQ(inName,"exp") ) { return hx::Val( exp); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { return hx::Val( user); }
		if (HX_FIELD_EQ(inName,"pass") ) { return hx::Val( pass); }
		if (HX_FIELD_EQ(inName,"path") ) { return hx::Val( path); }
		if (HX_FIELD_EQ(inName,"card") ) { return hx::Val( card); }
		if (HX_FIELD_EQ(inName,"side") ) { return hx::Val( side); }
		if (HX_FIELD_EQ(inName,"save") ) { return hx::Val( save_dyn()); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"loop") ) { return hx::Val( loop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color); }
		if (HX_FIELD_EQ(inName,"cards") ) { return hx::Val( cards); }
		if (HX_FIELD_EQ(inName,"level") ) { return hx::Val( level); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"socket") ) { return hx::Val( socket); }
		if (HX_FIELD_EQ(inName,"roller") ) { return hx::Val( roller); }
		if (HX_FIELD_EQ(inName,"onGoal") ) { return hx::Val( onGoal_dyn()); }
		if (HX_FIELD_EQ(inName,"getLoc") ) { return hx::Val( getLoc_dyn()); }
		if (HX_FIELD_EQ(inName,"refine") ) { return hx::Val( refine_dyn()); }
		if (HX_FIELD_EQ(inName,"setCur") ) { return hx::Val( setCur_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roygbiv") ) { return hx::Val( roygbiv); }
		if (HX_FIELD_EQ(inName,"addCard") ) { return hx::Val( addCard_dyn()); }
		if (HX_FIELD_EQ(inName,"getUser") ) { return hx::Val( getUser_dyn()); }
		if (HX_FIELD_EQ(inName,"getDest") ) { return hx::Val( getDest_dyn()); }
		if (HX_FIELD_EQ(inName,"rollDie") ) { return hx::Val( rollDie_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getColor") ) { return hx::Val( getColor_dyn()); }
		if (HX_FIELD_EQ(inName,"setColor") ) { return hx::Val( setColor_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"equipCard") ) { return hx::Val( equipCard_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rollerAnim") ) { return hx::Val( rollerAnim); }
		if (HX_FIELD_EQ(inName,"informLocs") ) { return hx::Val( informLocs_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"informDests") ) { return hx::Val( informDests_dyn()); }
		if (HX_FIELD_EQ(inName,"increaseExp") ) { return hx::Val( increaseExp_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rollerFuture") ) { return hx::Val( rollerFuture); }
		if (HX_FIELD_EQ(inName,"informColors") ) { return hx::Val( informColors_dyn()); }
		if (HX_FIELD_EQ(inName,"broadcastLoc") ) { return hx::Val( broadcastLoc_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"broadcastDest") ) { return hx::Val( broadcastDest_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"broadcastColor") ) { return hx::Val( broadcastColor_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"cur") ) { cur=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"req") ) { req=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"exp") ) { exp=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"user") ) { user=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pass") ) { pass=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"card") ) { card=inValue.Cast<  ::Card >(); return inValue; }
		if (HX_FIELD_EQ(inName,"side") ) { side=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cards") ) { cards=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"level") ) { level=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"socket") ) { socket=inValue.Cast<  ::sys::net::Socket >(); return inValue; }
		if (HX_FIELD_EQ(inName,"roller") ) { roller=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"roygbiv") ) { roygbiv=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rollerAnim") ) { rollerAnim=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rollerFuture") ) { rollerFuture=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("user","\x4b","\x92","\xad","\x4d"));
	outFields->push(HX_HCSTRING("pass","\xd1","\xe4","\x51","\x4a"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"));
	outFields->push(HX_HCSTRING("cur","\x80","\x85","\x4b","\x00"));
	outFields->push(HX_HCSTRING("card","\xd0","\x1d","\xba","\x41"));
	outFields->push(HX_HCSTRING("cards","\xa3","\xf8","\x1f","\x41"));
	outFields->push(HX_HCSTRING("level","\x84","\x15","\x63","\x72"));
	outFields->push(HX_HCSTRING("req","\x5e","\xd9","\x56","\x00"));
	outFields->push(HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00"));
	outFields->push(HX_HCSTRING("socket","\xb3","\x8b","\x46","\x26"));
	outFields->push(HX_HCSTRING("side","\x97","\x8d","\x53","\x4c"));
	outFields->push(HX_HCSTRING("roller","\x2a","\xdd","\xde","\xc5"));
	outFields->push(HX_HCSTRING("rollerFuture","\x0d","\x25","\x4b","\x02"));
	outFields->push(HX_HCSTRING("rollerAnim","\x5b","\x6c","\x30","\xf5"));
	outFields->push(HX_HCSTRING("roygbiv","\xe4","\xd2","\x07","\xd6"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Player_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsString,(int)offsetof(Player_obj,user),HX_HCSTRING("user","\x4b","\x92","\xad","\x4d")},
	{hx::fsString,(int)offsetof(Player_obj,pass),HX_HCSTRING("pass","\xd1","\xe4","\x51","\x4a")},
	{hx::fsString,(int)offsetof(Player_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Player_obj,path),HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{hx::fsInt,(int)offsetof(Player_obj,cur),HX_HCSTRING("cur","\x80","\x85","\x4b","\x00")},
	{hx::fsObject /*::Card*/ ,(int)offsetof(Player_obj,card),HX_HCSTRING("card","\xd0","\x1d","\xba","\x41")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Player_obj,cards),HX_HCSTRING("cards","\xa3","\xf8","\x1f","\x41")},
	{hx::fsInt,(int)offsetof(Player_obj,level),HX_HCSTRING("level","\x84","\x15","\x63","\x72")},
	{hx::fsInt,(int)offsetof(Player_obj,req),HX_HCSTRING("req","\x5e","\xd9","\x56","\x00")},
	{hx::fsInt,(int)offsetof(Player_obj,exp),HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00")},
	{hx::fsObject /*::sys::net::Socket*/ ,(int)offsetof(Player_obj,socket),HX_HCSTRING("socket","\xb3","\x8b","\x46","\x26")},
	{hx::fsInt,(int)offsetof(Player_obj,side),HX_HCSTRING("side","\x97","\x8d","\x53","\x4c")},
	{hx::fsInt,(int)offsetof(Player_obj,roller),HX_HCSTRING("roller","\x2a","\xdd","\xde","\xc5")},
	{hx::fsFloat,(int)offsetof(Player_obj,rollerFuture),HX_HCSTRING("rollerFuture","\x0d","\x25","\x4b","\x02")},
	{hx::fsBool,(int)offsetof(Player_obj,rollerAnim),HX_HCSTRING("rollerAnim","\x5b","\x6c","\x30","\xf5")},
	{hx::fsString,(int)offsetof(Player_obj,roygbiv),HX_HCSTRING("roygbiv","\xe4","\xd2","\x07","\xd6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("user","\x4b","\x92","\xad","\x4d"),
	HX_HCSTRING("pass","\xd1","\xe4","\x51","\x4a"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("cur","\x80","\x85","\x4b","\x00"),
	HX_HCSTRING("card","\xd0","\x1d","\xba","\x41"),
	HX_HCSTRING("cards","\xa3","\xf8","\x1f","\x41"),
	HX_HCSTRING("level","\x84","\x15","\x63","\x72"),
	HX_HCSTRING("req","\x5e","\xd9","\x56","\x00"),
	HX_HCSTRING("exp","\x9d","\x0c","\x4d","\x00"),
	HX_HCSTRING("socket","\xb3","\x8b","\x46","\x26"),
	HX_HCSTRING("side","\x97","\x8d","\x53","\x4c"),
	HX_HCSTRING("roller","\x2a","\xdd","\xde","\xc5"),
	HX_HCSTRING("rollerFuture","\x0d","\x25","\x4b","\x02"),
	HX_HCSTRING("rollerAnim","\x5b","\x6c","\x30","\xf5"),
	HX_HCSTRING("roygbiv","\xe4","\xd2","\x07","\xd6"),
	HX_HCSTRING("onGoal","\xd2","\x91","\xf3","\xe6"),
	HX_HCSTRING("addCard","\x91","\x60","\xf7","\x7d"),
	HX_HCSTRING("equipCard","\xa0","\x38","\xbf","\x1e"),
	HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("on","\x1f","\x61","\x00","\x00"),
	HX_HCSTRING("go","\x28","\x5a","\x00","\x00"),
	HX_HCSTRING("getUser","\x01","\x42","\x30","\x20"),
	HX_HCSTRING("getColor","\xed","\x80","\x33","\xaa"),
	HX_HCSTRING("setColor","\x61","\xda","\x90","\x58"),
	HX_HCSTRING("informColors","\x39","\xf2","\xa3","\x93"),
	HX_HCSTRING("informLocs","\x3c","\x64","\x1b","\xde"),
	HX_HCSTRING("informDests","\x68","\xaf","\x17","\xd8"),
	HX_HCSTRING("broadcastColor","\xa2","\xba","\xfc","\x35"),
	HX_HCSTRING("broadcastLoc","\xff","\x7f","\x31","\x95"),
	HX_HCSTRING("broadcastDest","\x03","\x42","\xcd","\xf0"),
	HX_HCSTRING("getLoc","\x8a","\x8d","\x21","\xa3"),
	HX_HCSTRING("getDest","\x18","\x0e","\xe9","\x14"),
	HX_HCSTRING("to","\x7b","\x65","\x00","\x00"),
	HX_HCSTRING("refine","\x6d","\x89","\xe3","\xff"),
	HX_HCSTRING("setCur","\xfe","\x12","\x63","\x6f"),
	HX_HCSTRING("increaseExp","\xfb","\xcd","\xad","\x31"),
	HX_HCSTRING("rollDie","\xc3","\x95","\x09","\x5d"),
	HX_HCSTRING("loop","\x64","\xa6","\xb7","\x47"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

