// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Server
#include <Server.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ed582805cb4219c2_15_new,"Server","new",0x59340d55,"Server.new","Server.hx",15,0x1acdb3bb)
HX_DEFINE_STACK_FRAME(_hx_pos_ed582805cb4219c2_45_connect,"Server","connect",0x7a5a975f,"Server.connect","Server.hx",45,0x1acdb3bb)
HX_DEFINE_STACK_FRAME(_hx_pos_ed582805cb4219c2_53_disconnect,"Server","disconnect",0x7c6ae007,"Server.disconnect","Server.hx",53,0x1acdb3bb)
HX_DEFINE_STACK_FRAME(_hx_pos_ed582805cb4219c2_61_updateCount,"Server","updateCount",0xde8167fb,"Server.updateCount","Server.hx",61,0x1acdb3bb)
HX_DEFINE_STACK_FRAME(_hx_pos_ed582805cb4219c2_64_read,"Server","read",0xb6fc64c1,"Server.read","Server.hx",64,0x1acdb3bb)
HX_DEFINE_STACK_FRAME(_hx_pos_ed582805cb4219c2_79_accountInfoArrived,"Server","accountInfoArrived",0xccf4549d,"Server.accountInfoArrived","Server.hx",79,0x1acdb3bb)
HX_DEFINE_STACK_FRAME(_hx_pos_ed582805cb4219c2_86_rollRequestArrived,"Server","rollRequestArrived",0xcbe94be6,"Server.rollRequestArrived","Server.hx",86,0x1acdb3bb)
HX_DEFINE_STACK_FRAME(_hx_pos_ed582805cb4219c2_97_serverLoop,"Server","serverLoop",0x897eb672,"Server.serverLoop","Server.hx",97,0x1acdb3bb)

void Server_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_ed582805cb4219c2_15_new)
            	HX_STACK_THIS(this)
HXLINE(  92)		this->pingDelay = ((Float)2.5);
HXLINE(  19)		this->readers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  18)		this->listener =  ::sys::net::Socket_obj::__alloc( HX_CTX );
HXLINE(  17)		HX_VARI(  ::openfl::text::TextField,t) =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXDLIN(  17)		t->set_embedFonts(true);
HXDLIN(  17)		t->set_text(HX_("",00,00,00,00));
HXDLIN(  17)		t->set_x((((Float)400.) - ((Float)t->get_width() / (Float)(int)2)));
HXDLIN(  17)		t->set_y(((Float)240.));
HXDLIN(  17)		t->set_autoSize((int)0);
HXDLIN(  17)		t->set_selectable(false);
HXDLIN(  17)		t->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,(int)18,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN(  17)		this->clientCount = t;
HXLINE(  16)		this->g =  ::Globals_obj::__alloc( HX_CTX );
HXLINE(  23)		super::__construct();
HXLINE(  25)		this->set_scaleY(this->set_scaleX(::Math_obj::min(((Float)this->stage->stageWidth / (Float)(int)800),((Float)this->stage->stageHeight / (Float)(int)480))));
HXLINE(  27)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/bg.png",5b,18,b4,cf)),null());
HXDLIN(  27)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN(  27)		set->addRect(png->rect);
HXDLIN(  27)		HX_VARI( int,map) = ::Std_obj::_hx_int(set->getRect((int)0)->width);
HXDLIN(  27)		HX_VARI_NAME(  ::openfl::display::Tilemap,map2,"map") =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,::Std_obj::_hx_int(set->getRect((int)0)->height),set,null());
HXDLIN(  27)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
HXDLIN(  27)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  27)		sprite->addChild(map2);
HXDLIN(  27)		sprite->set_x((int)0);
HXDLIN(  27)		sprite->set_y((int)0);
HXDLIN(  27)		this->addChild(sprite);
HXLINE(  29)		HX_VARI_NAME(  ::openfl::display::BitmapData,png1,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/card.png",a6,ee,0f,94)),null());
HXDLIN(  29)		HX_VARI_NAME(  ::openfl::display::Tileset,set1,"set") =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png1,null());
HXDLIN(  29)		set1->addRect(png1->rect);
HXDLIN(  29)		HX_VARI_NAME( int,map3,"map") = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
HXDLIN(  29)		HX_VARI_NAME(  ::openfl::display::Tilemap,map5,"map") =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map3,::Std_obj::_hx_int(set1->getRect((int)0)->height),set1,null());
HXDLIN(  29)		map5->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
HXDLIN(  29)		HX_VARI_NAME(  ::openfl::display::Sprite,sprite1,"sprite") =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  29)		sprite1->addChild(map5);
HXDLIN(  29)		sprite1->set_x((int)0);
HXDLIN(  29)		sprite1->set_y((int)0);
HXLINE(  30)		sprite1->set_y((((Float)240.) - ((Float)sprite1->get_height() / (Float)(int)2)));
HXLINE(  31)		this->addChild(sprite1);
HXLINE(  33)		this->updateCount();
HXLINE(  34)		this->addChild(this->clientCount);
HXLINE(  37)		this->listener->setBlocking(false);
HXLINE(  38)		 ::sys::net::Socket _hx_tmp = this->listener;
HXDLIN(  38)		_hx_tmp->bind( ::sys::net::Host_obj::__alloc( HX_CTX ,HX_("192.168.1.173",b1,45,6f,f9)),(int)4200);
HXLINE(  39)		this->listener->listen((int)100);
HXLINE(  40)		this->readers->push(this->listener);
HXLINE(  42)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->serverLoop_dyn(),null(),null(),null());
            	}

Dynamic Server_obj::__CreateEmpty() { return new Server_obj; }

void *Server_obj::_hx_vtable = 0;

Dynamic Server_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Server_obj > _hx_result = new Server_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Server_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x1f9085ab) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x1f9085ab;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Server_obj::connect( ::sys::net::Socket client){
            	HX_STACKFRAME(&_hx_pos_ed582805cb4219c2_45_connect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(client,"client")
HXLINE(  46)		client->setFastSend(true);
HXLINE(  47)		client->setBlocking(false);
HXLINE(  48)		this->readers->push(client);
HXLINE(  49)		this->g->sockets->push(client);
HXLINE(  50)		this->updateCount();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,connect,(void))

void Server_obj::disconnect( ::sys::net::Socket client){
            	HX_STACKFRAME(&_hx_pos_ed582805cb4219c2_53_disconnect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(client,"client")
HXLINE(  54)		this->readers->remove(client);
HXLINE(  55)		this->g->sockets->remove(client);
HXLINE(  56)		this->g->players->remove(client);
HXLINE(  57)		this->updateCount();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,disconnect,(void))

void Server_obj::updateCount(){
            	HX_STACKFRAME(&_hx_pos_ed582805cb4219c2_61_updateCount)
            	HX_STACK_THIS(this)
HXLINE(  61)		this->clientCount->set_text((HX_("",00,00,00,00) + this->g->sockets->length));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Server_obj,updateCount,(void))

void Server_obj::read( ::sys::net::Socket index,::String packet){
            	HX_GC_STACKFRAME(&_hx_pos_ed582805cb4219c2_64_read)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(packet,"packet")
HXLINE(  65)		HX_VARI(  ::haxe::Unserializer,serial) =  ::haxe::Unserializer_obj::__alloc( HX_CTX ,packet);
HXLINE(  67)		::String _hx_switch_0 = ::Std_obj::string(serial->unserialize());
            		if (  (_hx_switch_0==HX_("login",69,d9,f3,78)) ){
HXLINE(  70)			 ::Dynamic _hx_tmp = serial->unserialize();
HXLINE(  69)			this->accountInfoArrived(index,( (::String)(_hx_tmp) ),( (::String)(serial->unserialize()) ));
HXDLIN(  69)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("roll",7d,eb,ae,4b)) ){
HXLINE(  75)			this->rollRequestArrived(index);
HXDLIN(  75)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Server_obj,read,(void))

void Server_obj::accountInfoArrived( ::sys::net::Socket index,::String user,::String pass){
            	HX_GC_STACKFRAME(&_hx_pos_ed582805cb4219c2_79_accountInfoArrived)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(user,"user")
            	HX_STACK_ARG(pass,"pass")
HXLINE(  80)		::haxe::Log_obj::trace(HX_("accountInfoArrived",f2,b5,19,3f),hx::SourceInfo(HX_("Server.hx",bb,b3,cd,1a),80,HX_("Server",e3,be,cb,a2),HX_("accountInfoArrived",f2,b5,19,3f)));
HXLINE(  81)		::Dynamic this1 = this->g->players;
HXDLIN(  81)		HX_VARI(  ::Player,v) =  ::Player_obj::__alloc( HX_CTX ,this->g,user,pass,index);
HXDLIN(  81)		( ( ::haxe::ds::ObjectMap)(this1) )->set(index,v);
HXLINE(  82)		v->addCard(this->g->c1);
HXLINE(  83)		v->init();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Server_obj,accountInfoArrived,(void))

void Server_obj::rollRequestArrived( ::sys::net::Socket index){
            	HX_STACKFRAME(&_hx_pos_ed582805cb4219c2_86_rollRequestArrived)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(  87)		::haxe::Log_obj::trace(HX_("rollRequestArrived",3b,ad,0e,3e),hx::SourceInfo(HX_("Server.hx",bb,b3,cd,1a),87,HX_("Server",e3,be,cb,a2),HX_("rollRequestArrived",3b,ad,0e,3e)));
HXLINE(  88)		this->g->player(index)->rollDie();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,rollRequestArrived,(void))

void Server_obj::serverLoop( ::openfl::events::Event e){
            	HX_GC_STACKFRAME(&_hx_pos_ed582805cb4219c2_97_serverLoop)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE(  98)		HX_VARI( Float,time) = ((Float)::lime::_hx_system::System_obj::getTimer() / (Float)(int)1000);
HXLINE(  99)		HX_VARI(  ::Dynamic,sockets) = ::sys::net::Socket_obj::select(this->readers,this->g->sockets,null(),(int)0);
HXLINE( 108)		{
HXLINE( 108)			HX_VARI( int,_g) = (int)0;
HXDLIN( 108)			HX_VARI( ::Array< ::Dynamic>,_g1) = ( (::Array< ::Dynamic>)(sockets->__Field(HX_("read",56,4b,a7,4b),hx::paccDynamic)) );
HXDLIN( 108)			while((_g < _g1->length)){
HXLINE( 108)				HX_VARI(  ::sys::net::Socket,client) = _g1->__get(_g).StaticCast<  ::sys::net::Socket >();
HXDLIN( 108)				_g = (_g + (int)1);
HXLINE( 109)				if (hx::IsNotEq( client,this->listener )) {
HXLINE( 110)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 110)						this->read(client,client->input->readLine());
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e1 = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            				else {
HXLINE( 113)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 113)						this->connect(client->accept());
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e2 = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE( 116)		{
HXLINE( 116)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 116)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ( (::Array< ::Dynamic>)(sockets->__Field(HX_("write",df,6c,59,d0),hx::paccDynamic)) );
HXDLIN( 116)			while((_g2 < _g11->length)){
HXLINE( 116)				HX_VARI_NAME(  ::sys::net::Socket,client1,"client") = _g11->__get(_g2).StaticCast<  ::sys::net::Socket >();
HXDLIN( 116)				_g2 = (_g2 + (int)1);
HXLINE( 117)				{
HXLINE( 117)					HX_VARI_NAME( int,_g21,"_g2") = (int)0;
HXDLIN( 117)					HX_VARI( ::Array< ::Dynamic>,_g3) = this->g->out;
HXDLIN( 117)					while((_g21 < _g3->length)){
HXLINE( 117)						HX_VARI(  ::Dynamic,letter) = _g3->__get(_g21);
HXDLIN( 117)						_g21 = (_g21 + (int)1);
HXLINE( 118)						if (hx::IsEq( ( ( ::sys::net::Socket)(letter->__Field(HX_("sender",b5,c7,84,6b),hx::paccDynamic)) ),client1 )) {
HXLINE( 119)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 120)								client1->output->writeString(((HX_("",00,00,00,00) + ( (::String)(letter->__Field(HX_("body",a2,7a,1b,41),hx::paccDynamic)) )) + HX_("\r\n",5d,0b,00,00)));
HXLINE( 121)								this->g->out->remove(letter);
            							}
            							catch( ::Dynamic _hx_e){
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic e3 = _hx_e;
HXLINE( 122)									this->disconnect(client1);
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            					}
            				}
HXLINE( 125)				if (((this->pingFuture + this->pingDelay) < time)) {
HXLINE( 126)					{
HXLINE( 126)						::Array< ::Dynamic> m = this->g->out;
HXDLIN( 126)						HX_VARI( ::cpp::VirtualArray,t) = ::cpp::VirtualArray_obj::__new(1)->init(0,HX_("`",60,00,00,00));
HXDLIN( 126)						HX_VARI(  ::haxe::Serializer,serial) =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN( 126)						{
HXLINE( 126)							HX_VARI_NAME( int,_g4,"_g") = (int)0;
HXDLIN( 126)							while((_g4 < t->get_length())){
HXLINE( 126)								HX_VARI(  ::Dynamic,token) = t->__get(_g4);
HXDLIN( 126)								_g4 = (_g4 + (int)1);
HXDLIN( 126)								serial->serialize(token);
            							}
            						}
HXDLIN( 126)						m->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            							->setFixed(1,HX_("sender",b5,c7,84,6b),client1)));
            					}
HXLINE( 127)					this->pingFuture = (time + this->pingDelay);
            				}
            			}
            		}
HXLINE( 132)		{
HXLINE( 132)			HX_VARI(  ::Dynamic,p) = this->g->players->iterator();
HXDLIN( 132)			while(( (bool)(p->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 132)				( ( ::Player)(p->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) )->loop(time);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,serverLoop,(void))


hx::ObjectPtr< Server_obj > Server_obj::__new() {
	hx::ObjectPtr< Server_obj > __this = new Server_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Server_obj > Server_obj::__alloc(hx::Ctx *_hx_ctx) {
	Server_obj *__this = (Server_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Server_obj), true, "Server"));
	*(void **)__this = Server_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Server_obj::Server_obj()
{
}

void Server_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Server);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(clientCount,"clientCount");
	HX_MARK_MEMBER_NAME(listener,"listener");
	HX_MARK_MEMBER_NAME(readers,"readers");
	HX_MARK_MEMBER_NAME(pingFuture,"pingFuture");
	HX_MARK_MEMBER_NAME(pingDelay,"pingDelay");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Server_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(clientCount,"clientCount");
	HX_VISIT_MEMBER_NAME(listener,"listener");
	HX_VISIT_MEMBER_NAME(readers,"readers");
	HX_VISIT_MEMBER_NAME(pingFuture,"pingFuture");
	HX_VISIT_MEMBER_NAME(pingDelay,"pingDelay");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Server_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readers") ) { return hx::Val( readers); }
		if (HX_FIELD_EQ(inName,"connect") ) { return hx::Val( connect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { return hx::Val( listener); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pingDelay") ) { return hx::Val( pingDelay); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"disconnect") ) { return hx::Val( disconnect_dyn()); }
		if (HX_FIELD_EQ(inName,"pingFuture") ) { return hx::Val( pingFuture); }
		if (HX_FIELD_EQ(inName,"serverLoop") ) { return hx::Val( serverLoop_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clientCount") ) { return hx::Val( clientCount); }
		if (HX_FIELD_EQ(inName,"updateCount") ) { return hx::Val( updateCount_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"accountInfoArrived") ) { return hx::Val( accountInfoArrived_dyn()); }
		if (HX_FIELD_EQ(inName,"rollRequestArrived") ) { return hx::Val( rollRequestArrived_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Server_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readers") ) { readers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { listener=inValue.Cast<  ::sys::net::Socket >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pingDelay") ) { pingDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pingFuture") ) { pingFuture=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clientCount") ) { clientCount=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Server_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28"));
	outFields->push(HX_HCSTRING("listener","\x74","\x00","\x32","\x38"));
	outFields->push(HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02"));
	outFields->push(HX_HCSTRING("pingFuture","\x55","\x60","\x4b","\x9c"));
	outFields->push(HX_HCSTRING("pingDelay","\xb1","\x37","\x9e","\x36"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Server_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Server_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Server_obj,clientCount),HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28")},
	{hx::fsObject /*::sys::net::Socket*/ ,(int)offsetof(Server_obj,listener),HX_HCSTRING("listener","\x74","\x00","\x32","\x38")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Server_obj,readers),HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02")},
	{hx::fsFloat,(int)offsetof(Server_obj,pingFuture),HX_HCSTRING("pingFuture","\x55","\x60","\x4b","\x9c")},
	{hx::fsFloat,(int)offsetof(Server_obj,pingDelay),HX_HCSTRING("pingDelay","\xb1","\x37","\x9e","\x36")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Server_obj_sStaticStorageInfo = 0;
#endif

static ::String Server_obj_sMemberFields[] = {
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28"),
	HX_HCSTRING("listener","\x74","\x00","\x32","\x38"),
	HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("disconnect","\x5c","\x64","\x44","\x69"),
	HX_HCSTRING("updateCount","\x06","\xae","\xfb","\x2f"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("accountInfoArrived","\xf2","\xb5","\x19","\x3f"),
	HX_HCSTRING("rollRequestArrived","\x3b","\xad","\x0e","\x3e"),
	HX_HCSTRING("pingFuture","\x55","\x60","\x4b","\x9c"),
	HX_HCSTRING("pingDelay","\xb1","\x37","\x9e","\x36"),
	HX_HCSTRING("serverLoop","\xc7","\x3a","\x58","\x76"),
	::String(null()) };

static void Server_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Server_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Server_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Server_obj::__mClass,"__mClass");
};

#endif

hx::Class Server_obj::__mClass;

void Server_obj::__register()
{
	hx::Object *dummy = new Server_obj;
	Server_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Server","\xe3","\xbe","\xcb","\xa2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Server_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Server_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Server_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Server_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Server_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Server_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

