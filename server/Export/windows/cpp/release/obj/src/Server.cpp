// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_Field
#include <Field.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Server
#include <Server.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif


void Server_obj::__construct(){
            	HX_STACK_FRAME("Server","new",0x59340d55,"Server.new","Server.hx",15,0x1acdb3bb)
            	HX_STACK_THIS(this)
HXLINE(  87)		this->pingDelay = ((Float)2.5);
HXLINE(  19)		this->readers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  18)		this->listener =  ::sys::net::Socket_obj::__new();
HXLINE(  16)		this->g =  ::Globals_obj::__new();
HXLINE(  22)		super::__construct();
HXLINE(  24)		Int w = this->stage->stageWidth;
HXDLIN(  24)		Int h = this->stage->stageHeight;
HXDLIN(  24)		Float _hx_tmp = ::Math_obj::min(((Float)w / (Float)(int)800),((Float)h / (Float)(int)480));
HXDLIN(  24)		Float _hx_tmp1 = this->set_scaleX(_hx_tmp);
HXDLIN(  24)		this->set_scaleY(_hx_tmp1);
HXLINE(  26)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/bg.png",5b,18,b4,cf)),null());
HXDLIN(  26)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__new(png,null());
HXDLIN(  26)		set->addRect(png->rect);
HXDLIN(  26)		Int _hx_tmp2 = ::Std_obj::_hx_int(set->getRect((int)0)->width);
HXDLIN(  26)		Int _hx_tmp3 = ::Std_obj::_hx_int(set->getRect((int)0)->height);
HXDLIN(  26)		HX_VARI(  ::openfl::display::Tilemap,map) =  ::openfl::display::Tilemap_obj::__new(_hx_tmp2,_hx_tmp3,set,null());
HXDLIN(  26)		map->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN(  26)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__new();
HXDLIN(  26)		sprite->addChild(map);
HXDLIN(  26)		sprite->set_x((int)0);
HXDLIN(  26)		sprite->set_y((int)0);
HXDLIN(  26)		this->addChild(sprite);
HXLINE(  28)		this->clientCount =  ::Field_obj::__new(this->g,((Float)400.),((Float)240.),null());
HXLINE(  29)		this->updateCount();
HXLINE(  30)		this->addChild(this->clientCount);
HXLINE(  32)		this->listener->setBlocking(false);
HXLINE(  33)		this->listener->bind( ::sys::net::Host_obj::__new(HX_("192.168.1.152",f2,43,6f,f9)),(int)4200);
HXLINE(  34)		this->listener->listen((int)100);
HXLINE(  35)		this->readers->push(this->listener);
HXLINE(  37)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->serverLoop_dyn(),null(),null(),null());
            	}

Dynamic Server_obj::__CreateEmpty() { return new Server_obj; }

hx::ObjectPtr< Server_obj > Server_obj::__new()
{
	hx::ObjectPtr< Server_obj > _hx_result = new Server_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Server_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Server_obj > _hx_result = new Server_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Server_obj::connect( ::sys::net::Socket client){
            	HX_STACK_FRAME("Server","connect",0x7a5a975f,"Server.connect","Server.hx",40,0x1acdb3bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(client,"client")
HXLINE(  41)		client->setFastSend(true);
HXLINE(  42)		client->setBlocking(false);
HXLINE(  43)		this->readers->push(client);
HXLINE(  44)		this->g->sockets->push(client);
HXLINE(  45)		this->updateCount();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,connect,(void))

void Server_obj::disconnect( ::sys::net::Socket client){
            	HX_STACK_FRAME("Server","disconnect",0x7c6ae007,"Server.disconnect","Server.hx",48,0x1acdb3bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(client,"client")
HXLINE(  49)		this->readers->remove(client);
HXLINE(  50)		this->g->sockets->remove(client);
HXLINE(  51)		this->g->players->remove(client);
HXLINE(  52)		this->updateCount();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,disconnect,(void))

void Server_obj::updateCount(){
            	HX_STACK_FRAME("Server","updateCount",0xde8167fb,"Server.updateCount","Server.hx",56,0x1acdb3bb)
            	HX_STACK_THIS(this)
HXLINE(  56)		::String _hx_tmp = (HX_("",00,00,00,00) + this->g->sockets->length);
HXDLIN(  56)		this->clientCount->setText(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Server_obj,updateCount,(void))

void Server_obj::read( ::sys::net::Socket index,::String packet){
            	HX_STACK_FRAME("Server","read",0xb6fc64c1,"Server.read","Server.hx",59,0x1acdb3bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(packet,"packet")
HXLINE(  60)		HX_VARI(  ::haxe::Unserializer,serial) =  ::haxe::Unserializer_obj::__new(packet);
HXLINE(  62)		{
HXLINE(  62)			 ::Dynamic _hx_tmp = serial->unserialize();
HXDLIN(  62)			HX_VARI( ::String,_g) = ::Std_obj::string(_hx_tmp);
HXDLIN(  62)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("login",69,d9,f3,78)) ){
HXLINE(  65)				 ::Dynamic _hx_tmp1 = serial->unserialize();
HXLINE(  66)				 ::Dynamic _hx_tmp2 = serial->unserialize();
HXLINE(  64)				this->accountInfoArrived(index,_hx_tmp1,_hx_tmp2);
HXDLIN(  64)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("roll",7d,eb,ae,4b)) ){
HXLINE(  70)				this->rollRequestArrived(index);
HXDLIN(  70)				goto _hx_goto_0;
            			}
            			_hx_goto_0:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Server_obj,read,(void))

void Server_obj::accountInfoArrived( ::sys::net::Socket index,::String user,::String pass){
            	HX_STACK_FRAME("Server","accountInfoArrived",0xccf4549d,"Server.accountInfoArrived","Server.hx",74,0x1acdb3bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(user,"user")
            	HX_STACK_ARG(pass,"pass")
HXLINE(  75)		::haxe::Log_obj::trace(HX_("accountInfoArrived",f2,b5,19,3f),hx::SourceInfo(HX_("Server.hx",bb,b3,cd,1a),75,HX_("Server",e3,be,cb,a2),HX_("accountInfoArrived",f2,b5,19,3f)));
HXLINE(  76)		HX_VARI(  ::Player,v) =  ::Player_obj::__new(this->g,user,pass,index);
HXDLIN(  76)		this->g->players->set(index,v);
HXLINE(  77)		v->addCard(this->g->c1);
HXLINE(  78)		v->init();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Server_obj,accountInfoArrived,(void))

void Server_obj::rollRequestArrived( ::sys::net::Socket index){
            	HX_STACK_FRAME("Server","rollRequestArrived",0xcbe94be6,"Server.rollRequestArrived","Server.hx",81,0x1acdb3bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE(  82)		::haxe::Log_obj::trace(HX_("rollRequestArrived",3b,ad,0e,3e),hx::SourceInfo(HX_("Server.hx",bb,b3,cd,1a),82,HX_("Server",e3,be,cb,a2),HX_("rollRequestArrived",3b,ad,0e,3e)));
HXLINE(  83)		this->g->player(index)->rollDie();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,rollRequestArrived,(void))

void Server_obj::serverLoop( ::openfl::events::Event e){
            	HX_STACK_FRAME("Server","serverLoop",0x897eb672,"Server.serverLoop","Server.hx",92,0x1acdb3bb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE(  93)		Int _hx_tmp = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  93)		HX_VARI( Float,time) = ((Float)_hx_tmp / (Float)(int)1000);
HXLINE(  94)		HX_VARI(  ::Dynamic,sockets) = ::sys::net::Socket_obj::select(this->readers,this->g->sockets,null(),(int)0);
HXLINE( 103)		{
HXLINE( 103)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 103)			HX_VARI( ::Array< ::Dynamic>,_g1) = ( (::Array< ::Dynamic>)(sockets->__Field(HX_("read",56,4b,a7,4b),hx::paccDynamic)) );
HXDLIN( 103)			while((_g < _g1->length)){
HXLINE( 103)				HX_VARI(  ::sys::net::Socket,client) = _g1->__get(_g).StaticCast<  ::sys::net::Socket >();
HXDLIN( 103)				++_g;
HXLINE( 104)				if (hx::IsNotEq( client,this->listener )) {
HXLINE( 105)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 105)						::String _hx_tmp1 = client->input->readLine();
HXDLIN( 105)						this->read(client,_hx_tmp1);
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e1 = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            				else {
HXLINE( 108)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 108)						 ::sys::net::Socket _hx_tmp2 = client->accept();
HXDLIN( 108)						this->connect(_hx_tmp2);
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic e2 = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
            		}
HXLINE( 111)		{
HXLINE( 111)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 111)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ( (::Array< ::Dynamic>)(sockets->__Field(HX_("write",df,6c,59,d0),hx::paccDynamic)) );
HXDLIN( 111)			while((_g2 < _g11->length)){
HXLINE( 111)				HX_VARI_NAME(  ::sys::net::Socket,client1,"client") = _g11->__get(_g2).StaticCast<  ::sys::net::Socket >();
HXDLIN( 111)				++_g2;
HXLINE( 112)				{
HXLINE( 112)					HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 112)					HX_VARI( ::Array< ::Dynamic>,_g3) = this->g->out;
HXDLIN( 112)					while((_g21 < _g3->length)){
HXLINE( 112)						HX_VARI(  ::Dynamic,letter) = _g3->__get(_g21);
HXDLIN( 112)						++_g21;
HXLINE( 113)						if (hx::IsEq( ( ( ::sys::net::Socket)(letter->__Field(HX_("sender",b5,c7,84,6b),hx::paccDynamic)) ),client1 )) {
HXLINE( 114)							try {
            								HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 115)								client1->output->writeString(((HX_("",00,00,00,00) + ( (::String)(letter->__Field(HX_("body",a2,7a,1b,41),hx::paccDynamic)) )) + HX_("\r\n",5d,0b,00,00)));
HXLINE( 116)								this->g->out->remove(letter);
            							}
            							catch( ::Dynamic _hx_e){
            								if (_hx_e.IsClass<  ::Dynamic >() ){
            									HX_STACK_BEGIN_CATCH
            									 ::Dynamic e3 = _hx_e;
HXLINE( 117)									this->disconnect(client1);
            								}
            								else {
            									HX_STACK_DO_THROW(_hx_e);
            								}
            							}
            						}
            					}
            				}
HXLINE( 120)				Bool _hx_tmp3 = ((this->pingFuture + this->pingDelay) < time);
HXDLIN( 120)				if (_hx_tmp3) {
HXLINE( 121)					{
HXLINE( 121)						HX_VARI( ::cpp::VirtualArray,t) = ::cpp::VirtualArray_obj::__new(1)->init(0,HX_("`",60,00,00,00));
HXDLIN( 121)						HX_VARI(  ::haxe::Serializer,serial) =  ::haxe::Serializer_obj::__new();
HXDLIN( 121)						{
HXLINE( 121)							HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 121)							while((_g4 < t->get_length())){
HXLINE( 121)								HX_VARI(  ::Dynamic,token) = t->__get(_g4);
HXDLIN( 121)								++_g4;
HXDLIN( 121)								serial->serialize(token);
            							}
            						}
HXDLIN( 121)						::String _hx_tmp4 = serial->toString();
HXDLIN( 121)						this->g->out->push( ::Dynamic(hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("body",a2,7a,1b,41),_hx_tmp4)
            							->setFixed(1,HX_("sender",b5,c7,84,6b),client1)));
            					}
HXLINE( 122)					this->pingFuture = (time + this->pingDelay);
            				}
            			}
            		}
HXLINE( 127)		{
HXLINE( 127)			HX_VARI(  ::Dynamic,tmp) = this->g->players->iterator();
HXDLIN( 127)			while(true){
HXLINE( 127)				Bool _hx_tmp5 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 127)				if (_hx_tmp5) {
HXLINE( 127)					goto _hx_goto_5;
            				}
HXDLIN( 127)				HX_VARI(  ::Player,p) = ( ( ::Player)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXDLIN( 127)				p->loop(time);
            			}
            			_hx_goto_5:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Server_obj,serverLoop,(void))


Server_obj::Server_obj()
{
}

void Server_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Server);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(clientCount,"clientCount");
	HX_MARK_MEMBER_NAME(listener,"listener");
	HX_MARK_MEMBER_NAME(readers,"readers");
	HX_MARK_MEMBER_NAME(pingFuture,"pingFuture");
	HX_MARK_MEMBER_NAME(pingDelay,"pingDelay");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Server_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(clientCount,"clientCount");
	HX_VISIT_MEMBER_NAME(listener,"listener");
	HX_VISIT_MEMBER_NAME(readers,"readers");
	HX_VISIT_MEMBER_NAME(pingFuture,"pingFuture");
	HX_VISIT_MEMBER_NAME(pingDelay,"pingDelay");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Server_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readers") ) { return hx::Val( readers); }
		if (HX_FIELD_EQ(inName,"connect") ) { return hx::Val( connect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { return hx::Val( listener); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pingDelay") ) { return hx::Val( pingDelay); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"disconnect") ) { return hx::Val( disconnect_dyn()); }
		if (HX_FIELD_EQ(inName,"pingFuture") ) { return hx::Val( pingFuture); }
		if (HX_FIELD_EQ(inName,"serverLoop") ) { return hx::Val( serverLoop_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clientCount") ) { return hx::Val( clientCount); }
		if (HX_FIELD_EQ(inName,"updateCount") ) { return hx::Val( updateCount_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"accountInfoArrived") ) { return hx::Val( accountInfoArrived_dyn()); }
		if (HX_FIELD_EQ(inName,"rollRequestArrived") ) { return hx::Val( rollRequestArrived_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Server_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readers") ) { readers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"listener") ) { listener=inValue.Cast<  ::sys::net::Socket >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pingDelay") ) { pingDelay=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pingFuture") ) { pingFuture=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"clientCount") ) { clientCount=inValue.Cast<  ::Field >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Server_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28"));
	outFields->push(HX_HCSTRING("listener","\x74","\x00","\x32","\x38"));
	outFields->push(HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02"));
	outFields->push(HX_HCSTRING("pingFuture","\x55","\x60","\x4b","\x9c"));
	outFields->push(HX_HCSTRING("pingDelay","\xb1","\x37","\x9e","\x36"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Server_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Server_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::Field*/ ,(int)offsetof(Server_obj,clientCount),HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28")},
	{hx::fsObject /*::sys::net::Socket*/ ,(int)offsetof(Server_obj,listener),HX_HCSTRING("listener","\x74","\x00","\x32","\x38")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Server_obj,readers),HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02")},
	{hx::fsFloat,(int)offsetof(Server_obj,pingFuture),HX_HCSTRING("pingFuture","\x55","\x60","\x4b","\x9c")},
	{hx::fsFloat,(int)offsetof(Server_obj,pingDelay),HX_HCSTRING("pingDelay","\xb1","\x37","\x9e","\x36")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Server_obj_sStaticStorageInfo = 0;
#endif

static ::String Server_obj_sMemberFields[] = {
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("clientCount","\x84","\xba","\x88","\x28"),
	HX_HCSTRING("listener","\x74","\x00","\x32","\x38"),
	HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("disconnect","\x5c","\x64","\x44","\x69"),
	HX_HCSTRING("updateCount","\x06","\xae","\xfb","\x2f"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("accountInfoArrived","\xf2","\xb5","\x19","\x3f"),
	HX_HCSTRING("rollRequestArrived","\x3b","\xad","\x0e","\x3e"),
	HX_HCSTRING("pingFuture","\x55","\x60","\x4b","\x9c"),
	HX_HCSTRING("pingDelay","\xb1","\x37","\x9e","\x36"),
	HX_HCSTRING("serverLoop","\xc7","\x3a","\x58","\x76"),
	::String(null()) };

static void Server_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Server_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Server_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Server_obj::__mClass,"__mClass");
};

#endif

hx::Class Server_obj::__mClass;

void Server_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Server","\xe3","\xbe","\xcb","\xa2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Server_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Server_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Server_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Server_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Server_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Server_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

