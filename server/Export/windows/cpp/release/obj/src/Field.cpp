// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Field
#include <Field.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_99e38b06967cbf51_8_new,"Field","new",0x6d03fa8c,"Field.new","Field.hx",8,0x85a79a64)
HX_LOCAL_STACK_FRAME(_hx_pos_99e38b06967cbf51_45_size,"Field","size",0xf9c85d15,"Field.size","Field.hx",45,0x85a79a64)
HX_LOCAL_STACK_FRAME(_hx_pos_99e38b06967cbf51_49_password,"Field","password",0x72fb996f,"Field.password","Field.hx",49,0x85a79a64)
HX_LOCAL_STACK_FRAME(_hx_pos_99e38b06967cbf51_53_getText,"Field","getText",0xce2b2c8f,"Field.getText","Field.hx",53,0x85a79a64)
HX_LOCAL_STACK_FRAME(_hx_pos_99e38b06967cbf51_62_setText,"Field","setText",0xc12cbd9b,"Field.setText","Field.hx",62,0x85a79a64)

void Field_obj::__construct( ::Globals g,Float x,Float y,hx::Null< bool >  __o_pw){
bool pw = __o_pw.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_99e38b06967cbf51_8_new)
HXLINE(  16)		this->length = (int)0;
HXLINE(  15)		this->tE = (int)35;
HXLINE(  14)		this->tW = (int)44;
HXLINE(  19)		super::__construct();
HXLINE(  21)		this->g = g;
HXLINE(  22)		 ::openfl::text::TextField t =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXDLIN(  22)		t->set_text(HX_("",00,00,00,00));
HXDLIN(  22)		t->set_x((x - ((Float)t->get_width() / (Float)(int)2)));
HXDLIN(  22)		t->set_y((y - (int)32));
HXDLIN(  22)		t->set_autoSize((int)0);
HXDLIN(  22)		t->set_selectable(false);
HXDLIN(  22)		t->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,(int)72,(int)16777215,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN(  22)		t->set_embedFonts(true);
HXDLIN(  22)		this->f = t;
HXLINE(  23)		int w = (int)-1;
HXDLIN(  23)		int h = (int)-1;
HXDLIN(  23)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("field/l.png",52,a5,dc,e8)),null());
HXDLIN(  23)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN(  23)		set->addRect(png->rect);
HXDLIN(  23)		 ::openfl::display::Tileset set1 = set;
HXDLIN(  23)		int map;
HXDLIN(  23)		if ((w < (int)0)) {
HXLINE(  23)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE(  23)			map = w;
            		}
HXDLIN(  23)		int map1;
HXDLIN(  23)		if ((h < (int)0)) {
HXLINE(  23)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE(  23)			map1 = h;
            		}
HXDLIN(  23)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN(  23)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN(  23)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  23)		sprite->addChild(map2);
HXDLIN(  23)		 ::openfl::display::Sprite sprite1 = sprite;
HXDLIN(  23)		sprite1->set_x((int)0);
HXDLIN(  23)		sprite1->set_y((int)0);
HXDLIN(  23)		this->l = sprite1;
HXLINE(  24)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  24)		{
HXLINE(  24)			int _g1 = (int)0;
HXDLIN(  24)			while((_g1 < (int)19)){
HXLINE(  24)				_g1 = (_g1 + (int)1);
HXDLIN(  24)				int i = (_g1 - (int)1);
HXDLIN(  24)				int w1 = (int)-1;
HXDLIN(  24)				int h1 = (int)-1;
HXDLIN(  24)				 ::openfl::display::BitmapData png1 = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("field/m.png",d3,39,43,7c)),null());
HXDLIN(  24)				 ::openfl::display::Tileset set2 =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png1,null());
HXDLIN(  24)				set2->addRect(png1->rect);
HXDLIN(  24)				 ::openfl::display::Tileset set3 = set2;
HXDLIN(  24)				int map3;
HXDLIN(  24)				if ((w1 < (int)0)) {
HXLINE(  24)					map3 = ::Std_obj::_hx_int(set3->getRect((int)0)->width);
            				}
            				else {
HXLINE(  24)					map3 = w1;
            				}
HXDLIN(  24)				int map4;
HXDLIN(  24)				if ((h1 < (int)0)) {
HXLINE(  24)					map4 = ::Std_obj::_hx_int(set3->getRect((int)0)->height);
            				}
            				else {
HXLINE(  24)					map4 = h1;
            				}
HXDLIN(  24)				 ::openfl::display::Tilemap map5 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map3,map4,set3,null());
HXDLIN(  24)				map5->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN(  24)				 ::openfl::display::Sprite sprite2 =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  24)				sprite2->addChild(map5);
HXDLIN(  24)				 ::openfl::display::Sprite sprite3 = sprite2;
HXDLIN(  24)				sprite3->set_x((int)0);
HXDLIN(  24)				sprite3->set_y((int)0);
HXDLIN(  24)				_g->push(sprite3);
            			}
            		}
HXDLIN(  24)		this->ms = _g;
HXLINE(  25)		int w2 = (int)-1;
HXDLIN(  25)		int h2 = (int)-1;
HXDLIN(  25)		 ::openfl::display::BitmapData png2 = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("field/r.png",58,20,44,5d)),null());
HXDLIN(  25)		 ::openfl::display::Tileset set4 =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png2,null());
HXDLIN(  25)		set4->addRect(png2->rect);
HXDLIN(  25)		 ::openfl::display::Tileset set5 = set4;
HXDLIN(  25)		int map6;
HXDLIN(  25)		if ((w2 < (int)0)) {
HXLINE(  25)			map6 = ::Std_obj::_hx_int(set5->getRect((int)0)->width);
            		}
            		else {
HXLINE(  25)			map6 = w2;
            		}
HXDLIN(  25)		int map7;
HXDLIN(  25)		if ((h2 < (int)0)) {
HXLINE(  25)			map7 = ::Std_obj::_hx_int(set5->getRect((int)0)->height);
            		}
            		else {
HXLINE(  25)			map7 = h2;
            		}
HXDLIN(  25)		 ::openfl::display::Tilemap map8 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map6,map7,set5,null());
HXDLIN(  25)		map8->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN(  25)		 ::openfl::display::Sprite sprite4 =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  25)		sprite4->addChild(map8);
HXDLIN(  25)		 ::openfl::display::Sprite sprite5 = sprite4;
HXDLIN(  25)		sprite5->set_x((int)0);
HXDLIN(  25)		sprite5->set_y((int)0);
HXDLIN(  25)		this->r = sprite5;
HXLINE(  27)		this->f->set_displayAsPassword(pw);
HXLINE(  29)		 ::openfl::display::Sprite _hx_tmp = this->l;
HXDLIN(  29)		_hx_tmp->set_y((y - ((Float)this->l->get_height() / (Float)(int)2)));
HXLINE(  30)		this->addChild(this->l);
HXLINE(  32)		{
HXLINE(  32)			int _g11 = (int)0;
HXDLIN(  32)			::Array< ::Dynamic> _g2 = this->ms;
HXDLIN(  32)			while((_g11 < _g2->length)){
HXLINE(  32)				 ::openfl::display::Sprite m = _g2->__get(_g11).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  32)				_g11 = (_g11 + (int)1);
HXLINE(  33)				m->set_y(this->l->get_y());
HXLINE(  34)				this->addChild(m);
            			}
            		}
HXLINE(  37)		 ::openfl::display::Sprite _hx_tmp1 = this->r;
HXDLIN(  37)		_hx_tmp1->set_y(this->l->get_y());
HXLINE(  38)		this->addChild(this->r);
HXLINE(  39)		this->addChild(this->f);
HXLINE(  41)		this->setText(HX_("",00,00,00,00));
            	}

Dynamic Field_obj::__CreateEmpty() { return new Field_obj; }

void *Field_obj::_hx_vtable = 0;

Dynamic Field_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Field_obj > _hx_result = new Field_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Field_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x7e316e26;
		}
	}
}

int Field_obj::size(){
            	HX_STACKFRAME(&_hx_pos_99e38b06967cbf51_45_size)
HXLINE(  45)		return this->f->get_text().length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Field_obj,size,return )

void Field_obj::password(bool tf){
            	HX_STACKFRAME(&_hx_pos_99e38b06967cbf51_49_password)
HXLINE(  49)		this->f->set_displayAsPassword(tf);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Field_obj,password,(void))

::String Field_obj::getText(){
            	HX_STACKFRAME(&_hx_pos_99e38b06967cbf51_53_getText)
HXLINE(  53)		return this->f->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Field_obj,getText,return )

void Field_obj::setText(::String t){
            	HX_STACKFRAME(&_hx_pos_99e38b06967cbf51_62_setText)
HXLINE(  63)		::String t20 = t;
HXLINE(  65)		if ((t.length > (int)11)) {
HXLINE(  66)			this->g->errSfx();
HXLINE(  67)			t20 = t.substr((int)0,(int)11);
            		}
HXLINE(  70)		if ((t20.length == (int)0)) {
HXLINE(  71)			this->l->set_visible(false);
HXLINE(  73)			{
HXLINE(  73)				int _g = (int)0;
HXDLIN(  73)				::Array< ::Dynamic> _g1 = this->ms;
HXDLIN(  73)				while((_g < _g1->length)){
HXLINE(  73)					 ::openfl::display::Sprite m = _g1->__get(_g).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  73)					_g = (_g + (int)1);
HXDLIN(  73)					m->set_visible(false);
            				}
            			}
HXLINE(  75)			this->r->set_visible(false);
            		}
            		else {
HXLINE(  76)			if ((t20.length == (int)1)) {
HXLINE(  77)				this->l->set_x((((Float)400.) - ((Float)(this->tE * (int)2) / (Float)(int)2)));
HXLINE(  78)				this->l->set_visible(true);
HXLINE(  80)				{
HXLINE(  80)					int _g2 = (int)0;
HXDLIN(  80)					::Array< ::Dynamic> _g11 = this->ms;
HXDLIN(  80)					while((_g2 < _g11->length)){
HXLINE(  80)						 ::openfl::display::Sprite m1 = _g11->__get(_g2).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  80)						_g2 = (_g2 + (int)1);
HXDLIN(  80)						m1->set_visible(false);
            					}
            				}
HXLINE(  82)				 ::openfl::display::Sprite _hx_tmp = this->r;
HXDLIN(  82)				Float _hx_tmp1 = this->l->get_x();
HXDLIN(  82)				_hx_tmp->set_x((_hx_tmp1 + this->tE));
HXLINE(  83)				this->r->set_visible(true);
            			}
            			else {
HXLINE(  85)				int line = (this->tE * (int)2);
HXDLIN(  85)				int line1 = this->tW;
HXDLIN(  85)				this->l->set_x((((Float)400.) - ((Float)(line + (line1 * (t20.length - (int)1))) / (Float)(int)2)));
HXLINE(  86)				this->l->set_visible(true);
HXLINE(  88)				{
HXLINE(  88)					int _g3 = (int)0;
HXDLIN(  88)					::Array< ::Dynamic> _g12 = this->ms;
HXDLIN(  88)					while((_g3 < _g12->length)){
HXLINE(  88)						 ::openfl::display::Sprite m2 = _g12->__get(_g3).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  88)						_g3 = (_g3 + (int)1);
HXDLIN(  88)						m2->set_visible(false);
            					}
            				}
HXLINE(  89)				{
HXLINE(  89)					int _g13 = (int)0;
HXDLIN(  89)					int _g4 = (t20.length - (int)1);
HXDLIN(  89)					while((_g13 < _g4)){
HXLINE(  89)						_g13 = (_g13 + (int)1);
HXDLIN(  89)						int i = (_g13 - (int)1);
HXLINE(  90)						if ((i == (int)0)) {
HXLINE(  90)							 ::openfl::display::Sprite _hx_tmp2 = this->ms->__get((int)0).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  90)							Float _hx_tmp3 = this->l->get_x();
HXDLIN(  90)							_hx_tmp2->set_x((_hx_tmp3 + this->tE));
            						}
            						else {
HXLINE(  91)							 ::openfl::display::Sprite _hx_tmp4 = this->ms->__get(i).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  91)							::Array< ::Dynamic> _hx_tmp5 = this->ms;
HXDLIN(  91)							Float _hx_tmp6 = _hx_tmp5->__get((i - (int)1)).StaticCast<  ::openfl::display::Sprite >()->get_x();
HXDLIN(  91)							_hx_tmp4->set_x((_hx_tmp6 + this->tW));
            						}
HXLINE(  93)						this->ms->__get(i).StaticCast<  ::openfl::display::Sprite >()->set_visible(true);
            					}
            				}
HXLINE(  96)				 ::openfl::display::Sprite _hx_tmp7 = this->r;
HXDLIN(  96)				::Array< ::Dynamic> _hx_tmp8 = this->ms;
HXDLIN(  96)				Float _hx_tmp9 = _hx_tmp8->__get((t20.length - (int)2)).StaticCast<  ::openfl::display::Sprite >()->get_x();
HXDLIN(  96)				_hx_tmp7->set_x((_hx_tmp9 + this->tW));
HXLINE(  97)				this->r->set_visible(true);
            			}
            		}
HXLINE( 100)		this->f->set_text(t20);
HXLINE( 101)		 ::Dynamic _hx_tmp10 = ::haxe::Log_obj::trace;
HXDLIN( 101)		::String _hx_tmp11 = (HX_("field=",43,8e,8e,80) + this->f->get_text());
HXDLIN( 101)		_hx_tmp10(_hx_tmp11,hx::SourceInfo(HX_("Field.hx",64,9a,a7,85),101,HX_("Field",9a,04,c1,93),HX_("setText",6f,0d,7e,12)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Field_obj,setText,(void))


hx::ObjectPtr< Field_obj > Field_obj::__new( ::Globals g,Float x,Float y,hx::Null< bool >  __o_pw) {
	hx::ObjectPtr< Field_obj > __this = new Field_obj();
	__this->__construct(g,x,y,__o_pw);
	return __this;
}

hx::ObjectPtr< Field_obj > Field_obj::__alloc(hx::Ctx *_hx_ctx, ::Globals g,Float x,Float y,hx::Null< bool >  __o_pw) {
	Field_obj *__this = (Field_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Field_obj), true, "Field"));
	*(void **)__this = Field_obj::_hx_vtable;
	__this->__construct(g,x,y,__o_pw);
	return __this;
}

Field_obj::Field_obj()
{
}

void Field_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Field);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(l,"l");
	HX_MARK_MEMBER_NAME(ms,"ms");
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(tW,"tW");
	HX_MARK_MEMBER_NAME(tE,"tE");
	HX_MARK_MEMBER_NAME(length,"length");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Field_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(l,"l");
	HX_VISIT_MEMBER_NAME(ms,"ms");
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(tW,"tW");
	HX_VISIT_MEMBER_NAME(tE,"tE");
	HX_VISIT_MEMBER_NAME(length,"length");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Field_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		if (HX_FIELD_EQ(inName,"l") ) { return hx::Val( l); }
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r); }
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ms") ) { return hx::Val( ms); }
		if (HX_FIELD_EQ(inName,"tW") ) { return hx::Val( tW); }
		if (HX_FIELD_EQ(inName,"tE") ) { return hx::Val( tE); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn()); }
		if (HX_FIELD_EQ(inName,"setText") ) { return hx::Val( setText_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"password") ) { return hx::Val( password_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Field_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l") ) { l=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ms") ) { ms=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tW") ) { tW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tE") ) { tE=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Field_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("l","\x6c","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ms","\x66","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("r","\x72","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("f","\x66","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("tW","\x63","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("tE","\x51","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Field_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Field_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Field_obj,l),HX_HCSTRING("l","\x6c","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Field_obj,ms),HX_HCSTRING("ms","\x66","\x5f","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Field_obj,r),HX_HCSTRING("r","\x72","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Field_obj,f),HX_HCSTRING("f","\x66","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Field_obj,tW),HX_HCSTRING("tW","\x63","\x65","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Field_obj,tE),HX_HCSTRING("tE","\x51","\x65","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Field_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Field_obj_sStaticStorageInfo = 0;
#endif

static ::String Field_obj_sMemberFields[] = {
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("l","\x6c","\x00","\x00","\x00"),
	HX_HCSTRING("ms","\x66","\x5f","\x00","\x00"),
	HX_HCSTRING("r","\x72","\x00","\x00","\x00"),
	HX_HCSTRING("f","\x66","\x00","\x00","\x00"),
	HX_HCSTRING("tW","\x63","\x65","\x00","\x00"),
	HX_HCSTRING("tE","\x51","\x65","\x00","\x00"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("password","\x1b","\x23","\xd0","\x48"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("setText","\x6f","\x0d","\x7e","\x12"),
	::String(null()) };

static void Field_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Field_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Field_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Field_obj::__mClass,"__mClass");
};

#endif

hx::Class Field_obj::__mClass;

void Field_obj::__register()
{
	hx::Object *dummy = new Field_obj;
	Field_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Field","\x9a","\x04","\xc1","\x93");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Field_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Field_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Field_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Field_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Field_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Field_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

