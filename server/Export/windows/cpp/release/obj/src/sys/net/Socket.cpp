// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_abc44b2301b28fc5_254_select,"sys.net.Socket","select",0xfc0916c5,"sys.net.Socket.select","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/net/Socket.hx",254,0xa375f0f1)
namespace sys{
namespace net{

void Socket_obj::__construct() { }

Dynamic Socket_obj::__CreateEmpty() { return new Socket_obj; }

void *Socket_obj::_hx_vtable = 0;

Dynamic Socket_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Socket_obj > _hx_result = new Socket_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Socket_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x109f852f;
}

 ::Dynamic Socket_obj::select(::Array< ::Dynamic> read,::Array< ::Dynamic> write,::Array< ::Dynamic> others, ::Dynamic timeout){
            	HX_STACKFRAME(&_hx_pos_abc44b2301b28fc5_254_select)
HXLINE( 255)		::cpp::VirtualArray neko_array = _hx_std_socket_select(read,write,others,timeout);
HXLINE( 256)		if (hx::IsNull( neko_array )) {
HXLINE( 257)			HX_STACK_DO_THROW(HX_("Select error",c4,23,4b,b6));
            		}
HXLINE( 258)		return  ::Dynamic(hx::AnonStruct3_obj< ::Array< ::Dynamic>,::Array< ::Dynamic>,::Array< ::Dynamic> >::Create(HX_("read",56,4b,a7,4b),( (::Array< ::Dynamic>)(neko_array->__get((int)0)) ),HX_("write",df,6c,59,d0),( (::Array< ::Dynamic>)(neko_array->__get((int)1)) ),HX_("others",a3,8f,23,71),( (::Array< ::Dynamic>)(neko_array->__get((int)2)) )));
            	/*?*/}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Socket_obj,select,return )


Socket_obj::Socket_obj()
{
}

bool Socket_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"select") ) { outValue = select_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Socket_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Socket_obj_sStaticStorageInfo = 0;
#endif

static void Socket_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Socket_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Socket_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Socket_obj::__mClass,"__mClass");
};

#endif

hx::Class Socket_obj::__mClass;

static ::String Socket_obj_sStaticFields[] = {
	HX_HCSTRING("select","\xfc","\x1a","\x33","\x6a"),
	::String(null())
};

void Socket_obj::__register()
{
	hx::Object *dummy = new Socket_obj;
	Socket_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("sys.net.Socket","\x85","\x45","\x9d","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Socket_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Socket_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Socket_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Socket_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Socket_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Socket_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Socket_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace net
