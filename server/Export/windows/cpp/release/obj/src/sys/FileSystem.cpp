// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

namespace sys{

void FileSystem_obj::__construct() { }

Dynamic FileSystem_obj::__CreateEmpty() { return new FileSystem_obj; }

hx::ObjectPtr< FileSystem_obj > FileSystem_obj::__new()
{
	hx::ObjectPtr< FileSystem_obj > _hx_result = new FileSystem_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FileSystem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FileSystem_obj > _hx_result = new FileSystem_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool FileSystem_obj::exists(::String path){
            	HX_STACK_FRAME("sys.FileSystem","exists",0xf55bed9e,"sys.FileSystem.exists","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/FileSystem.hx",31,0xb7079c8b)
            	HX_STACK_ARG(path,"path")
HXLINE(  31)		::String _hx_tmp;
HXDLIN(  31)		Bool _hx_tmp1;
HXDLIN(  31)		 ::Dynamic _hx_tmp2 = path.charCodeAt((int)1);
HXDLIN(  31)		if (hx::IsEq( _hx_tmp2,(int)58 )) {
HXLINE(  31)			_hx_tmp1 = (path.length <= (int)3);
            		}
            		else {
HXLINE(  31)			_hx_tmp1 = false;
            		}
HXDLIN(  31)		if (_hx_tmp1) {
HXLINE(  31)			_hx_tmp = ::haxe::io::Path_obj::addTrailingSlash(path);
            		}
            		else {
HXLINE(  31)			_hx_tmp = ::haxe::io::Path_obj::removeTrailingSlashes(path);
            		}
HXDLIN(  31)		return _hx_std_sys_exists(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,exists,return )

::String FileSystem_obj::absolutePath(::String relPath){
            	HX_STACK_FRAME("sys.FileSystem","absolutePath",0x5973f4fe,"sys.FileSystem.absolutePath","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/FileSystem.hx",52,0xb7079c8b)
            	HX_STACK_ARG(relPath,"relPath")
HXLINE(  53)		Bool _hx_tmp = ::haxe::io::Path_obj::isAbsolute(relPath);
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  53)			return relPath;
            		}
HXLINE(  54)		::String _hx_tmp1 = ::Sys_obj::getCwd();
HXDLIN(  54)		return ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,_hx_tmp1)->init(1,relPath));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,absolutePath,return )

void FileSystem_obj::createDirectory(::String path){
            	HX_STACK_FRAME("sys.FileSystem","createDirectory",0x63bad3cf,"sys.FileSystem.createDirectory","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/FileSystem.hx",65,0xb7079c8b)
            	HX_STACK_ARG(path,"path")
HXLINE(  66)		HX_VARI_NAME( ::String,path1,"path") = ::haxe::io::Path_obj::addTrailingSlash(path);
HXLINE(  67)		HX_VARI( ::String,_p) = null();
HXLINE(  68)		HX_VARI( ::Array< ::String >,parts) = ::Array_obj< ::String >::__new(0);
HXLINE(  69)		while(true){
HXLINE(  69)			_p = ::haxe::io::Path_obj::directory(path1);
HXDLIN(  69)			if (!((path1 != _p))) {
HXLINE(  69)				goto _hx_goto_0;
            			}
HXLINE(  70)			parts->unshift(path1);
HXLINE(  71)			path1 = _p;
            		}
            		_hx_goto_0:;
HXLINE(  73)		{
HXLINE(  73)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  73)			while((_g < parts->length)){
HXLINE(  73)				HX_VARI( ::String,part) = parts->__get(_g);
HXDLIN(  73)				++_g;
HXLINE(  74)				Bool _hx_tmp;
HXDLIN(  74)				Bool _hx_tmp1;
HXDLIN(  74)				Int _hx_tmp2 = (part.length - (int)1);
HXDLIN(  74)				 ::Dynamic _hx_tmp3 = part.charCodeAt(_hx_tmp2);
HXDLIN(  74)				if (hx::IsNotEq( _hx_tmp3,(int)58 )) {
HXLINE(  74)					_hx_tmp1 = !(::sys::FileSystem_obj::exists(part));
            				}
            				else {
HXLINE(  74)					_hx_tmp1 = false;
            				}
HXDLIN(  74)				if (_hx_tmp1) {
HXLINE(  74)					_hx_tmp = !(_hx_std_sys_create_dir(part,(int)493));
            				}
            				else {
HXLINE(  74)					_hx_tmp = false;
            				}
HXDLIN(  74)				if (_hx_tmp) {
HXLINE(  75)					HX_STACK_DO_THROW((HX_("Could not create directory:",05,3d,91,19) + part));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FileSystem_obj,createDirectory,(void))


FileSystem_obj::FileSystem_obj()
{
}

bool FileSystem_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"absolutePath") ) { outValue = absolutePath_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createDirectory") ) { outValue = createDirectory_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FileSystem_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FileSystem_obj_sStaticStorageInfo = 0;
#endif

static void FileSystem_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FileSystem_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FileSystem_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FileSystem_obj::__mClass,"__mClass");
};

#endif

hx::Class FileSystem_obj::__mClass;

static ::String FileSystem_obj_sStaticFields[] = {
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("absolutePath","\xbc","\xe7","\x6e","\xf7"),
	HX_HCSTRING("createDirectory","\xd1","\xab","\x39","\xb1"),
	::String(null())
};

void FileSystem_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("sys.FileSystem","\x6c","\x2c","\xe5","\xe6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FileSystem_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FileSystem_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FileSystem_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< FileSystem_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FileSystem_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FileSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FileSystem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
