// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Consts
#include <Consts.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_34_take,"Consts","take",0x0c0e23a5,"Consts.take","Consts.hx",34,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_37_addLetter,"Consts","addLetter",0x4ddd81c9,"Consts.addLetter","Consts.hx",37,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_47_serial,"Consts","serial",0xb27ce8d2,"Consts.serial","Consts.hx",47,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_51_next,"Consts","next",0x0819f051,"Consts.next","Consts.hx",51,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_55_nextString,"Consts","nextString",0x2e3d2002,"Consts.nextString","Consts.hx",55,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_58_text,"Consts","text",0x0c11380b,"Consts.text","Consts.hx",58,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_78_textBox,"Consts","textBox",0x1ff996c0,"Consts.textBox","Consts.hx",78,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_105_diff,"Consts","diff",0x0180c763,"Consts.diff","Consts.hx",105,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_112_dist,"Consts","dist",0x0180d2c4,"Consts.dist","Consts.hx",112,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_119_scale,"Consts","scale",0xee35556c,"Consts.scale","Consts.hx",119,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_126_sound,"Consts","sound",0xf63313b1,"Consts.sound","Consts.hx",126,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_133_bmp,"Consts","bmp",0xc32866a7,"Consts.bmp","Consts.hx",133,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_139_tileset,"Consts","tileset",0xc6d30496,"Consts.tileset","Consts.hx",139,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_149_tile,"Consts","tile",0x0c14368c,"Consts.tile","Consts.hx",149,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_158_tilemap,"Consts","tilemap",0xc6ce7390,"Consts.tilemap","Consts.hx",158,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_175_mapToSprite,"Consts","mapToSprite",0x411122fe,"Consts.mapToSprite","Consts.hx",175,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_185_sprite,"Consts","sprite",0x07e55ae3,"Consts.sprite","Consts.hx",185,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_197_center,"Consts","center",0x4a2aa4b3,"Consts.center","Consts.hx",197,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_203_locations,"Consts","locations",0xab0aa080,"Consts.locations","Consts.hx",203,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_228_nameToIndex,"Consts","nameToIndex",0x6d6628ee,"Consts.nameToIndex","Consts.hx",228,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_29_boot,"Consts","boot",0x0032ef90,"Consts.boot","Consts.hx",29,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_30_boot,"Consts","boot",0x0032ef90,"Consts.boot","Consts.hx",30,0xf1f392ee)
HX_LOCAL_STACK_FRAME(_hx_pos_f429a08227001bc8_31_boot,"Consts","boot",0x0032ef90,"Consts.boot","Consts.hx",31,0xf1f392ee)

void Consts_obj::__construct() { }

Dynamic Consts_obj::__CreateEmpty() { return new Consts_obj; }

void *Consts_obj::_hx_vtable = 0;

Dynamic Consts_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Consts_obj > _hx_result = new Consts_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Consts_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3ad31534;
}

int Consts_obj::WIDTH;

int Consts_obj::HEIGHT;

int Consts_obj::FONT_COLOR;

 ::Dynamic Consts_obj::take(::Array< ::Dynamic> m){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_34_take)
HXLINE(  34)		return m->shift();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,take,return )

void Consts_obj::addLetter(::Array< ::Dynamic> m, ::sys::net::Socket s,::cpp::VirtualArray t){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_37_addLetter)
HXLINE(  38)		 ::haxe::Serializer serial =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXLINE(  40)		{
HXLINE(  40)			int _g = (int)0;
HXDLIN(  40)			while((_g < t->get_length())){
HXLINE(  40)				 ::Dynamic token = t->__get(_g);
HXDLIN(  40)				_g = (_g + (int)1);
HXLINE(  41)				serial->serialize(token);
            			}
            		}
HXLINE(  43)		m->push( ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("body",a2,7a,1b,41),serial->toString())
            			->setFixed(1,HX_("sender",b5,c7,84,6b),s)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Consts_obj,addLetter,(void))

 ::haxe::Unserializer Consts_obj::serial(::String packet){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_47_serial)
HXLINE(  47)		return  ::haxe::Unserializer_obj::__alloc( HX_CTX ,packet);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,serial,return )

 ::Dynamic Consts_obj::next( ::haxe::Unserializer serial){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_51_next)
HXLINE(  51)		return serial->unserialize();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,next,return )

::String Consts_obj::nextString( ::haxe::Unserializer serial){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_55_nextString)
HXLINE(  55)		return ::Std_obj::string(serial->unserialize());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,nextString,return )

 ::openfl::text::TextField Consts_obj::text(::String s,Float x,Float y,int pt,hx::Null< int >  __o_c){
int c = __o_c.Default(8323072);
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_58_text)
HXLINE(  59)		 ::openfl::text::TextField t =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  60)		t->set_text(s);
HXLINE(  61)		t->set_x((x - ((Float)t->get_width() / (Float)(int)2)));
HXLINE(  62)		t->set_y(y);
HXLINE(  63)		t->set_autoSize((int)0);
HXLINE(  64)		t->set_selectable(false);
HXLINE(  66)		t->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,pt,c,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXLINE(  73)		t->set_embedFonts(true);
HXLINE(  75)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Consts_obj,text,return )

 ::openfl::text::TextField Consts_obj::textBox(::String s,Float x,Float y,int pt){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_78_textBox)
HXLINE(  79)		 ::openfl::text::TextField t =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  80)		t->set_embedFonts(true);
HXLINE(  81)		t->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,pt,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXLINE(  87)		t->set_multiline(false);
HXLINE(  88)		t->set_wordWrap(false);
HXLINE(  89)		t->set_text(s);
HXLINE(  90)		t->set_x(x);
HXLINE(  91)		t->set_y(y);
HXLINE(  92)		t->set_type((int)1);
HXLINE(  93)		t->set_border(true);
HXLINE(  94)		t->set_borderColor((int)8323072);
HXLINE(  95)		t->set_maxChars(::Std_obj::_hx_int(((Float)t->get_width() / (Float)pt)));
HXLINE(  96)		t->set_restrict(HX_("A-Z a-z 0-9",b8,e4,9c,e8));
HXLINE(  98)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Consts_obj,textBox,return )

Float Consts_obj::diff(Float a,Float b){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_105_diff)
HXLINE( 105)		return ::Math_obj::abs((a - b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,diff,return )

Float Consts_obj::dist(int ax,int ay,int bx,int by){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_112_dist)
HXLINE( 112)		Float _hx_tmp = ::Math_obj::pow((bx - ax),(int)2);
HXDLIN( 112)		return ::Math_obj::sqrt((_hx_tmp + ::Math_obj::pow((by - ay),(int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Consts_obj,dist,return )

Float Consts_obj::scale(int w,int h){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_119_scale)
HXLINE( 119)		return ::Math_obj::min(((Float)w / (Float)(int)800),((Float)h / (Float)(int)480));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,scale,return )

 ::openfl::media::Sound Consts_obj::sound(::String dir){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_126_sound)
HXLINE( 126)		return ::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + dir));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,sound,return )

 ::openfl::display::BitmapData Consts_obj::bmp(::String dir){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_133_bmp)
HXLINE( 133)		return ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,bmp,return )

 ::openfl::display::Tileset Consts_obj::tileset(::String dir){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_139_tileset)
HXLINE( 140)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
HXLINE( 141)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXLINE( 142)		set->addRect(png->rect);
HXLINE( 143)		return set;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,tileset,return )

 ::openfl::display::Tile Consts_obj::tile(::String dir){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_149_tile)
HXLINE( 150)		 ::openfl::display::Tile tile =  ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 151)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
HXDLIN( 151)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 151)		set->addRect(png->rect);
HXDLIN( 151)		tile->set_tileset(set);
HXLINE( 152)		return tile;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,tile,return )

 ::openfl::display::Tilemap Consts_obj::tilemap(::String dir,hx::Null< int >  __o_w,hx::Null< int >  __o_h){
int w = __o_w.Default(-1);
int h = __o_h.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_158_tilemap)
HXLINE( 159)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
HXDLIN( 159)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 159)		set->addRect(png->rect);
HXDLIN( 159)		 ::openfl::display::Tileset set1 = set;
HXLINE( 162)		int map;
HXDLIN( 162)		if ((w < (int)0)) {
HXLINE( 162)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE( 162)			map = w;
            		}
HXLINE( 163)		int map1;
HXDLIN( 163)		if ((h < (int)0)) {
HXLINE( 163)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE( 163)			map1 = h;
            		}
HXLINE( 161)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXLINE( 167)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE( 169)		return map2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Consts_obj,tilemap,return )

 ::openfl::display::Sprite Consts_obj::mapToSprite( ::openfl::display::Tilemap map){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_175_mapToSprite)
HXLINE( 176)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 177)		sprite->addChild(map);
HXLINE( 179)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,mapToSprite,return )

 ::openfl::display::Sprite Consts_obj::sprite(::String dir,hx::Null< int >  __o_x,hx::Null< int >  __o_y){
int x = __o_x.Default(0);
int y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_185_sprite)
HXLINE( 186)		int w = (int)-1;
HXDLIN( 186)		int h = (int)-1;
HXDLIN( 186)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
HXDLIN( 186)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 186)		set->addRect(png->rect);
HXDLIN( 186)		 ::openfl::display::Tileset set1 = set;
HXDLIN( 186)		int map;
HXDLIN( 186)		if ((w < (int)0)) {
HXLINE( 186)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE( 186)			map = w;
            		}
HXDLIN( 186)		int map1;
HXDLIN( 186)		if ((h < (int)0)) {
HXLINE( 186)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE( 186)			map1 = h;
            		}
HXDLIN( 186)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN( 186)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN( 186)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN( 186)		sprite->addChild(map2);
HXDLIN( 186)		 ::openfl::display::Sprite sprite1 = sprite;
HXLINE( 187)		sprite1->set_x(x);
HXLINE( 188)		sprite1->set_y(y);
HXLINE( 190)		return sprite1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Consts_obj,sprite,return )

Float Consts_obj::center(Float line,Float point){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_197_center)
HXLINE( 197)		return (point - ((Float)line / (Float)(int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,center,return )

::Array< ::Dynamic> Consts_obj::locations( ::openfl::display::BitmapData image){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_203_locations)
HXLINE( 204)		::Array< ::Dynamic> points = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 205)		int cenX = (int)12;
HXLINE( 206)		int cenY = (int)13;
HXLINE( 207)		int halfCenY = ::Std_obj::_hx_int(((Float)cenY / (Float)(int)2));
HXLINE( 208)		int color = (int)16711680;
HXLINE( 210)		{
HXLINE( 210)			int _g1 = (int)0;
HXDLIN( 210)			int _g = image->height;
HXDLIN( 210)			while((_g1 < _g)){
HXLINE( 210)				_g1 = (_g1 + (int)1);
HXDLIN( 210)				int j = (_g1 - (int)1);
HXLINE( 211)				{
HXLINE( 211)					int _g3 = (int)0;
HXDLIN( 211)					int _g2 = image->width;
HXDLIN( 211)					while((_g3 < _g2)){
HXLINE( 211)						_g3 = (_g3 + (int)1);
HXDLIN( 211)						int i = (_g3 - (int)1);
HXLINE( 212)						bool newLoc = true;
HXLINE( 214)						if ((image->getPixel(i,j) == color)) {
HXLINE( 215)							if ((points->length > (int)0)) {
HXLINE( 216)								{
HXLINE( 216)									int _g4 = (int)0;
HXDLIN( 216)									while((_g4 < points->length)){
HXLINE( 216)										 ::Dynamic p = points->__get(_g4);
HXDLIN( 216)										_g4 = (_g4 + (int)1);
HXDLIN( 216)										bool _hx_tmp;
HXDLIN( 216)										if ((::Math_obj::abs((( (int)(p->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - i)) <= cenX)) {
HXLINE( 216)											_hx_tmp = (::Math_obj::abs((( (int)(p->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - j)) <= cenY);
            										}
            										else {
HXLINE( 216)											_hx_tmp = false;
            										}
HXDLIN( 216)										if (_hx_tmp) {
HXLINE( 217)											newLoc = false;
            										}
            									}
            								}
HXLINE( 218)								if (newLoc) {
HXLINE( 218)									points->push( ::Dynamic(hx::Anon_obj::Create(2)
            										->setFixed(0,HX_("x",78,00,00,00),(i + (int)1))
            										->setFixed(1,HX_("y",79,00,00,00),(j + halfCenY))));
            								}
            							}
            							else {
HXLINE( 219)								points->push( ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("x",78,00,00,00),(i + (int)1))
            									->setFixed(1,HX_("y",79,00,00,00),(j + halfCenY))));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 222)		return points;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,locations,return )

int Consts_obj::nameToIndex(::String name,::Array< ::String > names){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_228_nameToIndex)
HXLINE( 229)		int index = (int)0;
HXLINE( 230)		{
HXLINE( 230)			int _g1 = (int)0;
HXDLIN( 230)			int _g = names->length;
HXDLIN( 230)			while((_g1 < _g)){
HXLINE( 230)				_g1 = (_g1 + (int)1);
HXDLIN( 230)				int i = (_g1 - (int)1);
HXDLIN( 230)				if ((name == names->__get(i))) {
HXLINE( 230)					index = i;
            				}
            			}
            		}
HXLINE( 231)		return index;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,nameToIndex,return )


Consts_obj::Consts_obj()
{
}

bool Consts_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bmp") ) { outValue = bmp_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"take") ) { outValue = take_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"text") ) { outValue = text_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"diff") ) { outValue = diff_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dist") ) { outValue = dist_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tile") ) { outValue = tile_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sound") ) { outValue = sound_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"serial") ) { outValue = serial_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sprite") ) { outValue = sprite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"center") ) { outValue = center_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"textBox") ) { outValue = textBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tileset") ) { outValue = tileset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilemap") ) { outValue = tilemap_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addLetter") ) { outValue = addLetter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"locations") ) { outValue = locations_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nextString") ) { outValue = nextString_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mapToSprite") ) { outValue = mapToSprite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nameToIndex") ) { outValue = nameToIndex_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Consts_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Consts_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Consts_obj::WIDTH,HX_HCSTRING("WIDTH","\xe6","\xed","\x50","\x48")},
	{hx::fsInt,(void *) &Consts_obj::HEIGHT,HX_HCSTRING("HEIGHT","\xe7","\xb3","\xce","\xb4")},
	{hx::fsInt,(void *) &Consts_obj::FONT_COLOR,HX_HCSTRING("FONT_COLOR","\x93","\xdb","\x77","\x83")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Consts_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Consts_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Consts_obj::WIDTH,"WIDTH");
	HX_MARK_MEMBER_NAME(Consts_obj::HEIGHT,"HEIGHT");
	HX_MARK_MEMBER_NAME(Consts_obj::FONT_COLOR,"FONT_COLOR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Consts_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Consts_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Consts_obj::WIDTH,"WIDTH");
	HX_VISIT_MEMBER_NAME(Consts_obj::HEIGHT,"HEIGHT");
	HX_VISIT_MEMBER_NAME(Consts_obj::FONT_COLOR,"FONT_COLOR");
};

#endif

hx::Class Consts_obj::__mClass;

static ::String Consts_obj_sStaticFields[] = {
	HX_HCSTRING("WIDTH","\xe6","\xed","\x50","\x48"),
	HX_HCSTRING("HEIGHT","\xe7","\xb3","\xce","\xb4"),
	HX_HCSTRING("FONT_COLOR","\x93","\xdb","\x77","\x83"),
	HX_HCSTRING("take","\x47","\xb8","\xf6","\x4c"),
	HX_HCSTRING("addLetter","\xe7","\xe1","\x2c","\x5b"),
	HX_HCSTRING("serial","\xf4","\x69","\x2d","\x6e"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("nextString","\x24","\xda","\x61","\xc6"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textBox","\x5e","\x13","\xba","\x9e"),
	HX_HCSTRING("diff","\x05","\x5c","\x69","\x42"),
	HX_HCSTRING("dist","\x66","\x67","\x69","\x42"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"),
	HX_HCSTRING("bmp","\x45","\xbc","\x4a","\x00"),
	HX_HCSTRING("tileset","\x34","\x81","\x93","\x45"),
	HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c"),
	HX_HCSTRING("tilemap","\x2e","\xf0","\x8e","\x45"),
	HX_HCSTRING("mapToSprite","\x9c","\x46","\x0f","\xc9"),
	HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"),
	HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"),
	HX_HCSTRING("locations","\x9e","\x00","\x5a","\xb8"),
	HX_HCSTRING("nameToIndex","\x8c","\x4c","\x64","\xf5"),
	::String(null())
};

void Consts_obj::__register()
{
	hx::Object *dummy = new Consts_obj;
	Consts_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Consts","\xd0","\xb1","\x70","\xfc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Consts_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Consts_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Consts_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Consts_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Consts_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Consts_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Consts_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Consts_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_29_boot)
HXLINE(  29)		WIDTH = (int)800;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_30_boot)
HXLINE(  30)		HEIGHT = (int)480;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_31_boot)
HXLINE(  31)		FONT_COLOR = (int)8323072;
            	}
}

