// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_AStar
#include <AStar.h>
#endif
#ifndef INCLUDED_Node
#include <Node.h>
#endif
#ifndef INCLUDED_Terrain
#include <Terrain.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif


void AStar_obj::__construct( ::Terrain t){
            	HX_STACK_FRAME("AStar","new",0x7d683b25,"AStar.new","AStar.hx",12,0x88062feb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE(  12)		this->t = t;
            	}

Dynamic AStar_obj::__CreateEmpty() { return new AStar_obj; }

hx::ObjectPtr< AStar_obj > AStar_obj::__new( ::Terrain t)
{
	hx::ObjectPtr< AStar_obj > _hx_result = new AStar_obj();
	_hx_result->__construct(t);
	return _hx_result;
}

Dynamic AStar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AStar_obj > _hx_result = new AStar_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

::Array< ::Dynamic> AStar_obj::find( ::Node start, ::Node goal){
            	HX_STACK_FRAME("AStar","find",0x3884d1d4,"AStar.find","AStar.hx",17,0x88062feb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(goal,"goal")
HXLINE(  20)		HX_VARI( ::Array< ::Dynamic>,closedSet) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  24)		HX_VARI( ::Array< ::Dynamic>,openSet) = ::Array_obj< ::Dynamic>::__new(1)->init(0,start);
HXLINE(  29)		HX_VARI(  ::haxe::ds::ObjectMap,cameFrom) =  ::haxe::ds::ObjectMap_obj::__new();
HXLINE(  33)		HX_VARI(  ::haxe::ds::ObjectMap,_g) =  ::haxe::ds::ObjectMap_obj::__new();
HXDLIN(  33)		_g->set(start,(int)0);
HXLINE(  39)		HX_VARI(  ::haxe::ds::ObjectMap,_g1) =  ::haxe::ds::ObjectMap_obj::__new();
HXDLIN(  39)		{
HXLINE(  39)			Float value = this->estimate(start,goal);
HXDLIN(  39)			_g1->set(start,value);
            		}
HXDLIN(  39)		HX_VARI(  ::haxe::ds::ObjectMap,fScore) = _g1;
HXLINE(  41)		while((openSet->length > (int)0)){
HXLINE(  44)			HX_VARI(  ::Node,current) = openSet->shift().StaticCast<  ::Node >();
HXLINE(  47)			if (hx::IsEq( current,goal )) {
HXLINE(  47)				return this->reconstructPath(cameFrom,current);
            			}
HXLINE(  49)			closedSet->push(current);
HXLINE(  51)			{
HXLINE(  51)				HX_VARI( Int,_g2) = (int)0;
HXDLIN(  51)				HX_VARI( ::Array< ::Dynamic>,_g3) = current->list;
HXDLIN(  51)				while((_g2 < _g3->length)){
HXLINE(  51)					HX_VARI(  ::Node,neighbor) = _g3->__get(_g2).StaticCast<  ::Node >();
HXDLIN(  51)					++_g2;
HXLINE(  54)					Int _hx_tmp = closedSet->indexOf(neighbor,null());
HXDLIN(  54)					if ((_hx_tmp != (int)-1)) {
HXLINE(  54)						continue;
            					}
HXLINE(  57)					HX_VARI( Int,tentativeGScore) = (_g->get(current) + (int)1);
HXLINE(  59)					Int _hx_tmp1 = openSet->indexOf(neighbor,null());
HXDLIN(  59)					if ((_hx_tmp1 == (int)-1)) {
            						HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::haxe::ds::ObjectMap,fScore) HXARGC(2)
            						Int _hx_run( ::Node a, ::Node b){
            							HX_STACK_FRAME("AStar","find",0x3884d1d4,"AStar.find","AStar.hx",62,0x88062feb)
            							HX_STACK_ARG(a,"a")
            							HX_STACK_ARG(b,"b")
HXLINE(  64)							HX_VARI(  ::Dynamic,fa) = fScore->get(a);
HXLINE(  65)							HX_VARI(  ::Dynamic,fb) = fScore->get(b);
HXLINE(  67)							if (hx::IsLess( fa,fb )) {
HXLINE(  67)								return (int)-1;
            							}
            							else {
HXLINE(  68)								if (hx::IsEq( fa,fb )) {
HXLINE(  67)									return (int)0;
            								}
            								else {
HXLINE(  67)									return (int)1;
            								}
            							}
HXDLIN(  67)							return (int)0;
            						}
            						HX_END_LOCAL_FUNC2(return)

HXLINE(  61)						openSet->push(neighbor);
HXLINE(  62)						openSet->sort( ::Dynamic(new _hx_Closure_0(fScore)));
            					}
            					else {
HXLINE(  73)						Bool _hx_tmp2 = hx::IsGreaterEq( tentativeGScore,_g->get(neighbor) );
HXDLIN(  73)						if (_hx_tmp2) {
HXLINE(  73)							continue;
            						}
            					}
HXLINE(  76)					cameFrom->set(neighbor,current);
HXLINE(  77)					_g->set(neighbor,tentativeGScore);
HXLINE(  78)					{
HXLINE(  78)						 ::Dynamic _hx_tmp3 = _g->get(neighbor);
HXDLIN(  78)						Float _hx_tmp4 = this->estimate(neighbor,goal);
HXDLIN(  78)						fScore->set(neighbor,(_hx_tmp3 + _hx_tmp4));
            					}
            				}
            			}
            		}
HXLINE(  82)		return ::Array_obj< ::Dynamic>::__new(1)->init(0,start);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AStar_obj,find,return )

Float AStar_obj::estimate( ::Node start, ::Node goal){
            	HX_STACK_FRAME("AStar","estimate",0x90d3cfc3,"AStar.estimate","AStar.hx",87,0x88062feb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(goal,"goal")
HXLINE(  89)		HX_VARI(  ::Dynamic,a) = this->t->point(start->id);
HXLINE(  90)		HX_VARI(  ::Dynamic,b) = this->t->point(goal->id);
HXLINE(  92)		Int ax = ( (Int)(a->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(  92)		Int ay = ( (Int)(a->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(  92)		Int bx = ( (Int)(b->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN(  92)		Int by = ( (Int)(b->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN(  92)		Float _hx_tmp = ::Math_obj::pow((bx - ax),(int)2);
HXDLIN(  92)		Float _hx_tmp1 = ::Math_obj::pow((by - ay),(int)2);
HXDLIN(  92)		Float _hx_tmp2 = ::Math_obj::sqrt((_hx_tmp + _hx_tmp1));
HXDLIN(  92)		return ((Float)_hx_tmp2 / (Float)this->t->diag);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AStar_obj,estimate,return )

::Array< ::Dynamic> AStar_obj::reconstructPath( ::haxe::ds::ObjectMap cameFrom, ::Node current){
            	HX_STACK_FRAME("AStar","reconstructPath",0x3336c80e,"AStar.reconstructPath","AStar.hx",97,0x88062feb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cameFrom,"cameFrom")
            	HX_STACK_ARG(current,"current")
HXLINE(  99)		HX_VARI( ::Array< ::Dynamic>,path) = ::Array_obj< ::Dynamic>::__new(1)->init(0,current);
HXLINE( 101)		while(true){
HXLINE( 101)			Bool _hx_tmp = !(cameFrom->exists(current));
HXDLIN( 101)			if (_hx_tmp) {
HXLINE( 101)				goto _hx_goto_2;
            			}
HXLINE( 103)			current = cameFrom->get(current).StaticCast<  ::Node >();
HXLINE( 104)			path->unshift(current);
            		}
            		_hx_goto_2:;
HXLINE( 107)		return path;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AStar_obj,reconstructPath,return )


AStar_obj::AStar_obj()
{
}

void AStar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AStar);
	HX_MARK_MEMBER_NAME(t,"t");
	HX_MARK_END_CLASS();
}

void AStar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(t,"t");
}

hx::Val AStar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"t") ) { return hx::Val( t); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"find") ) { return hx::Val( find_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"estimate") ) { return hx::Val( estimate_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"reconstructPath") ) { return hx::Val( reconstructPath_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AStar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"t") ) { t=inValue.Cast<  ::Terrain >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AStar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("t","\x74","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AStar_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Terrain*/ ,(int)offsetof(AStar_obj,t),HX_HCSTRING("t","\x74","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AStar_obj_sStaticStorageInfo = 0;
#endif

static ::String AStar_obj_sMemberFields[] = {
	HX_HCSTRING("t","\x74","\x00","\x00","\x00"),
	HX_HCSTRING("find","\x39","\xd0","\xbb","\x43"),
	HX_HCSTRING("estimate","\xa8","\x64","\xda","\x5d"),
	HX_HCSTRING("reconstructPath","\xc9","\xc9","\x0a","\x07"),
	::String(null()) };

static void AStar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AStar_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AStar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AStar_obj::__mClass,"__mClass");
};

#endif

hx::Class AStar_obj::__mClass;

void AStar_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("AStar","\xb3","\xc4","\x40","\xa4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AStar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AStar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AStar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AStar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AStar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AStar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

