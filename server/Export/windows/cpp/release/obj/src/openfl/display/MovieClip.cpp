// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_FilterType
#include <openfl/_internal/swf/FilterType.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SpriteSymbol
#include <openfl/_internal/symbols/SpriteSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_Frame
#include <openfl/_internal/timeline/Frame.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_FrameObject
#include <openfl/_internal/timeline/FrameObject.h>
#endif
#ifndef INCLUDED_openfl__internal_timeline_FrameObjectType
#include <openfl/_internal/timeline/FrameObjectType.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_FrameLabel
#include <openfl/display/FrameLabel.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display__MovieClip_TimelineObject
#include <openfl/display/_MovieClip/TimelineObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_BlurFilter
#include <openfl/filters/BlurFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_DropShadowFilter
#include <openfl/filters/DropShadowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_53_new,"openfl.display.MovieClip","new",0xe16984e8,"openfl.display.MovieClip.new","openfl/display/MovieClip.hx",53,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_79_addFrameScript,"openfl.display.MovieClip","addFrameScript",0xff5029ef,"openfl.display.MovieClip.addFrameScript","openfl/display/MovieClip.hx",79,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_100_gotoAndPlay,"openfl.display.MovieClip","gotoAndPlay",0x3bade190,"openfl.display.MovieClip.gotoAndPlay","openfl/display/MovieClip.hx",100,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_113_gotoAndStop,"openfl.display.MovieClip","gotoAndStop",0x3dafa39e,"openfl.display.MovieClip.gotoAndStop","openfl/display/MovieClip.hx",113,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_126_nextFrame,"openfl.display.MovieClip","nextFrame",0x3b845cc2,"openfl.display.MovieClip.nextFrame","openfl/display/MovieClip.hx",126,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_145_play,"openfl.display.MovieClip","play",0x5c42706c,"openfl.display.MovieClip.play","openfl/display/MovieClip.hx",145,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_165_prevFrame,"openfl.display.MovieClip","prevFrame",0x7f95e2c2,"openfl.display.MovieClip.prevFrame","openfl/display/MovieClip.hx",165,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_184_stop,"openfl.display.MovieClip","stop",0x5e44327a,"openfl.display.MovieClip.stop","openfl/display/MovieClip.hx",184,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_199___applyTween,"openfl.display.MovieClip","__applyTween",0x55791bb5,"openfl.display.MovieClip.__applyTween","openfl/display/MovieClip.hx",199,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_204___enterFrame,"openfl.display.MovieClip","__enterFrame",0x9306f98d,"openfl.display.MovieClip.__enterFrame","openfl/display/MovieClip.hx",204,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_262___fromSymbol,"openfl.display.MovieClip","__fromSymbol",0xc2d8a9fa,"openfl.display.MovieClip.__fromSymbol","openfl/display/MovieClip.hx",262,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_314___getFrame,"openfl.display.MovieClip","__getFrame",0x8028674f,"openfl.display.MovieClip.__getFrame","openfl/display/MovieClip.hx",314,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_346___placeObject,"openfl.display.MovieClip","__placeObject",0x4de0264e,"openfl.display.MovieClip.__placeObject","openfl/display/MovieClip.hx",346,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_407___renderFrame,"openfl.display.MovieClip","__renderFrame",0xe194945f,"openfl.display.MovieClip.__renderFrame","openfl/display/MovieClip.hx",407,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_599___sortTimelineDepth,"openfl.display.MovieClip","__sortTimelineDepth",0x441c91ec,"openfl.display.MovieClip.__sortTimelineDepth","openfl/display/MovieClip.hx",599,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_604___stopAllMovieClips,"openfl.display.MovieClip","__stopAllMovieClips",0x702dce5a,"openfl.display.MovieClip.__stopAllMovieClips","openfl/display/MovieClip.hx",604,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_612___updateFrame,"openfl.display.MovieClip","__updateFrame",0xfb7bd0cc,"openfl.display.MovieClip.__updateFrame","openfl/display/MovieClip.hx",612,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_679_get_currentFrame,"openfl.display.MovieClip","get_currentFrame",0xf2ac6035,"openfl.display.MovieClip.get_currentFrame","openfl/display/MovieClip.hx",679,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_680_get_currentFrameLabel,"openfl.display.MovieClip","get_currentFrameLabel",0x543e3d7f,"openfl.display.MovieClip.get_currentFrameLabel","openfl/display/MovieClip.hx",680,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_681_get_currentLabel,"openfl.display.MovieClip","get_currentLabel",0x5bd7f5fc,"openfl.display.MovieClip.get_currentLabel","openfl/display/MovieClip.hx",681,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_682_get_currentLabels,"openfl.display.MovieClip","get_currentLabels",0x011f46f7,"openfl.display.MovieClip.get_currentLabels","openfl/display/MovieClip.hx",682,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_683_get_framesLoaded,"openfl.display.MovieClip","get_framesLoaded",0xb37eaf4c,"openfl.display.MovieClip.get_framesLoaded","openfl/display/MovieClip.hx",683,0x2b84738a)
HX_DEFINE_STACK_FRAME(_hx_pos_9f7ac0293b858dd4_684_get_totalFrames,"openfl.display.MovieClip","get_totalFrames",0x46b3baa9,"openfl.display.MovieClip.get_totalFrames","openfl/display/MovieClip.hx",684,0x2b84738a)
namespace openfl{
namespace display{

void MovieClip_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_53_new)
            	HX_STACK_THIS(this)
HXLINE(  55)		super::__construct();
HXLINE(  57)		this->_hx___currentFrame = (int)0;
HXLINE(  58)		this->_hx___currentLabels = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  59)		this->_hx___totalFrames = (int)0;
HXLINE(  60)		this->enabled = true;
HXLINE(  62)		if (hx::IsNotNull( ::openfl::display::MovieClip_obj::_hx___initSymbol )) {
HXLINE(  64)			this->_hx___swf = ::openfl::display::MovieClip_obj::_hx___initSWF;
HXLINE(  65)			this->_hx___symbol = ::openfl::display::MovieClip_obj::_hx___initSymbol;
HXLINE(  67)			::openfl::display::MovieClip_obj::_hx___initSWF = null();
HXLINE(  68)			::openfl::display::MovieClip_obj::_hx___initSymbol = null();
HXLINE(  70)			this->_hx___fromSymbol(this->_hx___swf,this->_hx___symbol);
            		}
            	}

Dynamic MovieClip_obj::__CreateEmpty() { return new MovieClip_obj; }

void *MovieClip_obj::_hx_vtable = 0;

Dynamic MovieClip_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MovieClip_obj > _hx_result = new MovieClip_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MovieClip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x21e31f0e) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x21e31f0e;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void MovieClip_obj::addFrameScript(int index, ::Dynamic method){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_79_addFrameScript)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(method,"method")
HXLINE(  79)		if (hx::IsNotNull( method )) {
HXLINE(  81)			if (hx::IsNull( this->_hx___frameScripts )) {
HXLINE(  83)				this->_hx___frameScripts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            			}
HXLINE(  87)			this->_hx___frameScripts->set(index,method);
            		}
            		else {
HXLINE(  89)			if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE(  91)				this->_hx___frameScripts->remove(index);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,addFrameScript,(void))

void MovieClip_obj::gotoAndPlay( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_100_gotoAndPlay)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(frame,"frame")
            	HX_STACK_ARG(scene,"scene")
HXLINE( 100)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 102)			this->_hx___currentFrame = this->_hx___getFrame(frame);
HXLINE( 103)			this->_hx___updateFrame();
HXLINE( 104)			this->play();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndPlay,(void))

void MovieClip_obj::gotoAndStop( ::Dynamic frame,::String scene){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_113_gotoAndStop)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(frame,"frame")
            	HX_STACK_ARG(scene,"scene")
HXLINE( 113)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 115)			this->_hx___currentFrame = this->_hx___getFrame(frame);
HXLINE( 116)			this->_hx___updateFrame();
HXLINE( 117)			this->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,gotoAndStop,(void))

void MovieClip_obj::nextFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_126_nextFrame)
            	HX_STACK_THIS(this)
HXLINE( 126)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 128)			HX_VARI( int,next) = (this->_hx___currentFrame + (int)1);
HXLINE( 130)			if ((next > this->_hx___totalFrames)) {
HXLINE( 132)				next = this->_hx___totalFrames;
            			}
HXLINE( 136)			this->gotoAndStop(next,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,nextFrame,(void))

void MovieClip_obj::play(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_145_play)
            	HX_STACK_THIS(this)
HXLINE( 145)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 147)			bool _hx_tmp;
HXDLIN( 147)			if (!(this->_hx___playing)) {
HXLINE( 147)				_hx_tmp = (this->_hx___totalFrames > (int)1);
            			}
            			else {
HXLINE( 147)				_hx_tmp = false;
            			}
HXDLIN( 147)			if (_hx_tmp) {
HXLINE( 149)				this->_hx___playing = true;
HXLINE( 152)				this->_hx___frameTime = ::Std_obj::_hx_int(((Float)(int)1000 / (Float)this->_hx___swf->frameRate));
HXLINE( 153)				this->_hx___timeElapsed = (int)0;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,play,(void))

void MovieClip_obj::prevFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_165_prevFrame)
            	HX_STACK_THIS(this)
HXLINE( 165)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 167)			HX_VARI( int,previous) = (this->_hx___currentFrame - (int)1);
HXLINE( 169)			if ((previous < (int)1)) {
HXLINE( 171)				previous = (int)1;
            			}
HXLINE( 175)			this->gotoAndStop(previous,null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,prevFrame,(void))

void MovieClip_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_184_stop)
            	HX_STACK_THIS(this)
HXLINE( 184)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 186)			if (this->_hx___playing) {
HXLINE( 188)				this->_hx___playing = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,stop,(void))

Float MovieClip_obj::_hx___applyTween(Float start,Float end,Float ratio){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_199___applyTween)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(end,"end")
            	HX_STACK_ARG(ratio,"ratio")
HXLINE( 199)		return (start + ((end - start) * ratio));
            	}


HX_DEFINE_DYNAMIC_FUNC3(MovieClip_obj,_hx___applyTween,return )

void MovieClip_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_204___enterFrame)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
HXLINE( 206)		if (hx::IsNotNull( this->_hx___symbol )) {
HXLINE( 208)			if (this->_hx___playing) {
HXLINE( 211)				 ::openfl::display::MovieClip _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 211)				_hx_tmp->_hx___timeElapsed = (_hx_tmp->_hx___timeElapsed + deltaTime);
HXLINE( 212)				HX_VARI( int,advanceFrames) = ::Math_obj::floor(((Float)this->_hx___timeElapsed / (Float)this->_hx___frameTime));
HXLINE( 213)				this->_hx___timeElapsed = hx::Mod(this->_hx___timeElapsed,this->_hx___frameTime);
HXLINE( 218)				if (hx::IsNotNull( this->_hx___frameScripts )) {
HXLINE( 220)					HX_VARI( int,_g1) = (int)0;
HXDLIN( 220)					while((_g1 < advanceFrames)){
HXLINE( 220)						_g1 = (_g1 + (int)1);
HXLINE( 222)						this->_hx___currentFrame++;
HXLINE( 224)						if ((this->_hx___currentFrame > this->_hx___totalFrames)) {
HXLINE( 226)							this->_hx___currentFrame = (int)1;
            						}
HXLINE( 230)						if (this->_hx___frameScripts->exists((this->_hx___currentFrame - (int)1))) {
HXLINE( 232)							this->_hx___frameScripts->get((this->_hx___currentFrame - (int)1))();
HXLINE( 233)							if (!(this->_hx___playing)) {
HXLINE( 233)								goto _hx_goto_9;
            							}
            						}
            					}
            					_hx_goto_9:;
            				}
            				else {
HXLINE( 241)					 ::openfl::display::MovieClip _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 241)					_hx_tmp1->_hx___currentFrame = (_hx_tmp1->_hx___currentFrame + advanceFrames);
HXLINE( 243)					while((this->_hx___currentFrame > this->_hx___totalFrames)){
HXLINE( 245)						 ::openfl::display::MovieClip _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 245)						_hx_tmp2->_hx___currentFrame = (_hx_tmp2->_hx___currentFrame - this->_hx___totalFrames);
            					}
            				}
HXLINE( 251)				this->_hx___updateFrame();
            			}
            		}
HXLINE( 257)		this->super::_hx___enterFrame(deltaTime);
            	}


void MovieClip_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::SpriteSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_262___fromSymbol)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(swf,"swf")
            	HX_STACK_ARG(symbol,"symbol")
HXLINE( 264)		if (hx::IsNotNull( this->_hx___objects )) {
HXLINE( 264)			return;
            		}
HXLINE( 266)		this->_hx___swf = swf;
HXLINE( 267)		this->_hx___symbol = symbol;
HXLINE( 269)		this->_hx___lastUpdate = (int)-1;
HXLINE( 270)		this->_hx___objectDepths = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 271)		this->_hx___objects =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE( 272)		this->_hx___zeroSymbol = (int)-1;
HXLINE( 274)		this->_hx___currentFrame = (int)1;
HXLINE( 275)		this->_hx___totalFrames = this->_hx___symbol->frames->length;
HXLINE( 277)		{
HXLINE( 277)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 277)			HX_VARI( int,_g) = this->_hx___symbol->frames->length;
HXDLIN( 277)			while((_g1 < _g)){
HXLINE( 277)				_g1 = (_g1 + (int)1);
HXDLIN( 277)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 279)				if (hx::IsNotNull( this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::timeline::Frame >()->label )) {
HXLINE( 281)					this->_hx___currentLabels->push( ::openfl::display::FrameLabel_obj::__alloc( HX_CTX ,this->_hx___symbol->frames->__get(i).StaticCast<  ::openfl::_internal::timeline::Frame >()->label,(i + (int)1)));
            				}
            			}
            		}
HXLINE( 287)		this->_hx___updateFrame();
HXLINE( 290)		{
HXLINE( 290)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 290)			HX_VARI_NAME( ::Array< ::String >,_g11,"_g1") = ::Type_obj::getInstanceFields(::Type_obj::getClass(hx::ObjectPtr<OBJ_>(this)));
HXDLIN( 290)			while((_g2 < _g11->length)){
HXLINE( 290)				HX_VARI( ::String,field) = _g11->__get(_g2);
HXDLIN( 290)				_g2 = (_g2 + (int)1);
HXLINE( 292)				{
HXLINE( 292)					HX_VARI_NAME( int,_g21,"_g2") = (int)0;
HXDLIN( 292)					HX_VARI( ::Array< ::Dynamic>,_g3) = this->_hx___children;
HXDLIN( 292)					while((_g21 < _g3->length)){
HXLINE( 292)						HX_VARI(  ::openfl::display::DisplayObject,child) = _g3->__get(_g21).StaticCast<  ::openfl::display::DisplayObject >();
HXDLIN( 292)						_g21 = (_g21 + (int)1);
HXLINE( 294)						if ((child->get_name() == field)) {
HXLINE( 296)							::Reflect_obj::setField(hx::ObjectPtr<OBJ_>(this),field,child);
            						}
            					}
            				}
            			}
            		}
HXLINE( 305)		if ((this->_hx___totalFrames > (int)1)) {
HXLINE( 307)			this->play();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___fromSymbol,(void))

int MovieClip_obj::_hx___getFrame( ::Dynamic frame){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_314___getFrame)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(frame,"frame")
HXLINE( 316)		if (::Std_obj::is(frame,hx::ClassOf< int >())) {
HXLINE( 318)			HX_VARI( int,index) = ( (int)(frame) );
HXLINE( 320)			if ((index < (int)1)) {
HXLINE( 320)				return (int)1;
            			}
HXLINE( 321)			if ((index > this->_hx___totalFrames)) {
HXLINE( 321)				return this->_hx___totalFrames;
            			}
HXLINE( 323)			return index;
            		}
            		else {
HXLINE( 325)			if (::Std_obj::is(frame,hx::ClassOf< ::String >())) {
HXLINE( 327)				HX_VARI( ::String,label) = ( (::String)(frame) );
HXLINE( 329)				{
HXLINE( 329)					HX_VARI( int,_g) = (int)0;
HXDLIN( 329)					HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___currentLabels;
HXDLIN( 329)					while((_g < _g1->length)){
HXLINE( 329)						HX_VARI(  ::openfl::display::FrameLabel,frameLabel) = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 329)						_g = (_g + (int)1);
HXLINE( 331)						if ((frameLabel->get_name() == label)) {
HXLINE( 333)							return frameLabel->get_frame();
            						}
            					}
            				}
            			}
            		}
HXLINE( 341)		return (int)1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___getFrame,return )

void MovieClip_obj::_hx___placeObject( ::openfl::display::DisplayObject displayObject, ::openfl::_internal::timeline::FrameObject frameObject){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_346___placeObject)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(displayObject,"displayObject")
            	HX_STACK_ARG(frameObject,"frameObject")
HXLINE( 348)		if (hx::IsNotNull( frameObject->name )) {
HXLINE( 350)			displayObject->set_name(frameObject->name);
            		}
HXLINE( 354)		if (hx::IsNotNull( frameObject->matrix )) {
HXLINE( 356)			displayObject->get_transform()->set_matrix(frameObject->matrix);
            		}
HXLINE( 360)		if (hx::IsNotNull( frameObject->colorTransform )) {
HXLINE( 362)			displayObject->get_transform()->set_colorTransform(frameObject->colorTransform);
            		}
HXLINE( 366)		if (hx::IsNotNull( frameObject->filters )) {
HXLINE( 368)			HX_VARI( ::Array< ::Dynamic>,filters) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 370)			{
HXLINE( 370)				HX_VARI( int,_g) = (int)0;
HXDLIN( 370)				HX_VARI( ::Array< ::Dynamic>,_g1) = frameObject->filters;
HXDLIN( 370)				while((_g < _g1->length)){
HXLINE( 370)					HX_VARI(  ::openfl::_internal::swf::FilterType,filter) = _g1->__get(_g).StaticCast<  ::openfl::_internal::swf::FilterType >();
HXDLIN( 370)					_g = (_g + (int)1);
HXLINE( 372)					switch((int)(_hx_getEnumValueIndex(filter))){
            						case (int)0: {
HXLINE( 376)							filters->push( ::openfl::filters::BlurFilter_obj::__alloc( HX_CTX ,filter->_hx_getFloat(0),filter->_hx_getFloat(1),filter->_hx_getInt(2)));
            						}
            						break;
            						case (int)1: {
HXLINE( 380)							filters->push( ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,filter->_hx_getObject(0).StaticCast< ::Array< Float > >()));
            						}
            						break;
            						case (int)2: {
HXLINE( 384)							filters->push( ::openfl::filters::DropShadowFilter_obj::__alloc( HX_CTX ,filter->_hx_getFloat(0),filter->_hx_getFloat(1),filter->_hx_getInt(2),filter->_hx_getFloat(3),filter->_hx_getFloat(4),filter->_hx_getFloat(5),filter->_hx_getFloat(6),filter->_hx_getInt(7),filter->_hx_getBool(8),filter->_hx_getBool(9),filter->_hx_getBool(10)));
            						}
            						break;
            						case (int)3: {
HXLINE( 388)							filters->push( ::openfl::filters::GlowFilter_obj::__alloc( HX_CTX ,filter->_hx_getInt(0),filter->_hx_getFloat(1),filter->_hx_getFloat(2),filter->_hx_getFloat(3),filter->_hx_getFloat(4),filter->_hx_getInt(5),filter->_hx_getBool(6),filter->_hx_getBool(7)));
            						}
            						break;
            					}
            				}
            			}
HXLINE( 394)			displayObject->set_filters(filters);
            		}
HXLINE( 398)		displayObject->set_visible(frameObject->visible);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___placeObject,(void))

void MovieClip_obj::_hx___renderFrame(int index){
            	HX_GC_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_407___renderFrame)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 409)		HX_VARI( int,previousIndex) = (this->_hx___lastUpdate - (int)1);
HXLINE( 411)		if ((previousIndex > index)) {
HXLINE( 413)			HX_VAR(  ::openfl::display::_MovieClip::TimelineObject,timelineObject);
HXDLIN( 413)			HX_VAR( bool,exists);
HXLINE( 414)			HX_VARI( int,i) = (int)0;
HXLINE( 416)			while((i < this->_hx___objectDepths->length)){
HXLINE( 418)				timelineObject = this->_hx___objectDepths->__get(i).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 419)				exists = false;
HXLINE( 421)				{
HXLINE( 421)					HX_VARI( int,_g) = (int)0;
HXDLIN( 421)					HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___symbol->frames->__get((int)0).StaticCast<  ::openfl::_internal::timeline::Frame >()->objects;
HXDLIN( 421)					while((_g < _g1->length)){
HXLINE( 421)						HX_VARI(  ::openfl::_internal::timeline::FrameObject,frameObject) = _g1->__get(_g).StaticCast<  ::openfl::_internal::timeline::FrameObject >();
HXDLIN( 421)						_g = (_g + (int)1);
HXLINE( 423)						if ((frameObject->id == timelineObject->id)) {
HXLINE( 425)							exists = true;
HXLINE( 426)							goto _hx_goto_21;
            						}
            					}
            					_hx_goto_21:;
            				}
HXLINE( 432)				if (!(exists)) {
HXLINE( 434)					if (hx::IsEq( timelineObject->displayObject->parent,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 436)						this->removeChild(timelineObject->displayObject);
            					}
HXLINE( 440)					this->_hx___objectDepths->removeRange(i,(int)1);
            				}
            				else {
HXLINE( 444)					i = (i + (int)1);
            				}
            			}
HXLINE( 450)			previousIndex = (int)0;
            		}
HXLINE( 454)		HX_VAR(  ::openfl::_internal::timeline::Frame,frame);
HXDLIN( 454)		HX_VAR_NAME(  ::openfl::display::_MovieClip::TimelineObject,timelineObject1,"timelineObject");
HXDLIN( 454)		HX_VAR(  ::openfl::display::DisplayObject,displayObject);
HXDLIN( 454)		HX_VAR(  ::openfl::_internal::symbols::SWFSymbol,symbol);
HXLINE( 455)		HX_VARI(  ::Dynamic,mask) = null();
HXDLIN( 455)		HX_VARI(  ::openfl::display::DisplayObject,maskObject) = null();
HXLINE( 456)		HX_VARI( bool,depthChange) = false;
HXLINE( 458)		{
HXLINE( 458)			HX_VARI_NAME( int,_g11,"_g1") = previousIndex;
HXDLIN( 458)			HX_VARI_NAME( int,_g2,"_g") = (index + (int)1);
HXDLIN( 458)			while((_g11 < _g2)){
HXLINE( 458)				_g11 = (_g11 + (int)1);
HXDLIN( 458)				HX_VARI_NAME( int,i1,"i") = (_g11 - (int)1);
HXLINE( 460)				if ((i1 < (int)0)) {
HXLINE( 460)					continue;
            				}
HXLINE( 462)				frame = this->_hx___symbol->frames->__get(i1).StaticCast<  ::openfl::_internal::timeline::Frame >();
HXLINE( 464)				{
HXLINE( 464)					HX_VARI_NAME( int,_g21,"_g2") = (int)0;
HXDLIN( 464)					HX_VARI( ::Array< ::Dynamic>,_g3) = frame->objects;
HXDLIN( 464)					while((_g21 < _g3->length)){
HXLINE( 464)						HX_VARI_NAME(  ::openfl::_internal::timeline::FrameObject,frameObject1,"frameObject") = _g3->__get(_g21).StaticCast<  ::openfl::_internal::timeline::FrameObject >();
HXDLIN( 464)						_g21 = (_g21 + (int)1);
HXLINE( 466)						if (hx::IsNotEq( frameObject1->type,::openfl::_internal::timeline::FrameObjectType_obj::DESTROY_dyn() )) {
HXLINE( 468)							bool _hx_tmp;
HXDLIN( 468)							if ((frameObject1->id == (int)0)) {
HXLINE( 468)								_hx_tmp = (frameObject1->symbol != this->_hx___zeroSymbol);
            							}
            							else {
HXLINE( 468)								_hx_tmp = false;
            							}
HXDLIN( 468)							if (_hx_tmp) {
HXLINE( 470)								timelineObject1 = this->_hx___objects->get((int)0).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 472)								bool _hx_tmp1;
HXDLIN( 472)								if (hx::IsNotNull( timelineObject1 )) {
HXLINE( 472)									_hx_tmp1 = hx::IsEq( timelineObject1->displayObject->parent,hx::ObjectPtr<OBJ_>(this) );
            								}
            								else {
HXLINE( 472)									_hx_tmp1 = false;
            								}
HXDLIN( 472)								if (_hx_tmp1) {
HXLINE( 474)									this->removeChild(timelineObject1->displayObject);
            								}
HXLINE( 478)								::Array< ::Dynamic> _hx_tmp2 = this->_hx___objectDepths;
HXDLIN( 478)								_hx_tmp2->remove(this->_hx___objects->get((int)0).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >());
HXLINE( 479)								timelineObject1 = null();
HXLINE( 480)								this->_hx___zeroSymbol = frameObject1->symbol;
            							}
HXLINE( 484)							displayObject = null();
HXLINE( 486)							if (!(this->_hx___objects->exists(frameObject1->id))) {
HXLINE( 488)								if (this->_hx___swf->symbols->exists(frameObject1->symbol)) {
HXLINE( 490)									symbol = this->_hx___swf->symbols->get(frameObject1->symbol).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >();
HXLINE( 491)									displayObject = symbol->_hx___createObject(this->_hx___swf);
            								}
HXLINE( 495)								if (hx::IsNotNull( displayObject )) {
HXLINE( 497)									timelineObject1 =  ::openfl::display::_MovieClip::TimelineObject_obj::__alloc( HX_CTX ,frameObject1->id,frameObject1->depth,displayObject);
HXLINE( 499)									this->_hx___objectDepths->push(timelineObject1);
HXLINE( 501)									depthChange = true;
HXLINE( 503)									this->_hx___objects->set(frameObject1->id,timelineObject1);
            								}
            							}
            							else {
HXLINE( 509)								timelineObject1 = this->_hx___objects->get(frameObject1->id).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 510)								displayObject = timelineObject1->displayObject;
HXLINE( 512)								if (hx::IsNull( timelineObject1->displayObject->parent )) {
HXLINE( 514)									this->_hx___objectDepths->push(timelineObject1);
HXLINE( 516)									depthChange = true;
            								}
            							}
HXLINE( 522)							if (hx::IsNotNull( displayObject )) {
HXLINE( 524)								this->_hx___placeObject(displayObject,frameObject1);
HXLINE( 526)								if (hx::IsNotNull( mask )) {
HXLINE( 528)									if ((( (int)(mask->__Field(HX_("clipDepth",13,40,41,f5),hx::paccDynamic)) ) < frameObject1->depth)) {
HXLINE( 530)										mask = null();
            									}
            									else {
HXLINE( 534)										displayObject->set_mask(maskObject);
            									}
            								}
            								else {
HXLINE( 540)									displayObject->set_mask(null());
            								}
HXLINE( 544)								if ((frameObject1->clipDepth != (int)0)) {
HXLINE( 546)									mask = frameObject1;
HXLINE( 547)									displayObject->set_visible(false);
HXLINE( 548)									maskObject = displayObject;
            								}
            							}
            						}
            						else {
HXLINE( 556)							if (this->_hx___objects->exists(frameObject1->id)) {
HXLINE( 558)								timelineObject1 = this->_hx___objects->get(frameObject1->id).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 560)								bool _hx_tmp3;
HXDLIN( 560)								if (hx::IsNotNull( timelineObject1 )) {
HXLINE( 560)									_hx_tmp3 = hx::IsEq( timelineObject1->displayObject->parent,hx::ObjectPtr<OBJ_>(this) );
            								}
            								else {
HXLINE( 560)									_hx_tmp3 = false;
            								}
HXDLIN( 560)								if (_hx_tmp3) {
HXLINE( 562)									this->removeChild(timelineObject1->displayObject);
            								}
HXLINE( 566)								this->_hx___objectDepths->remove(timelineObject1);
HXLINE( 568)								depthChange = true;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 578)		if (depthChange) {
HXLINE( 580)			this->_hx___objectDepths->sort(this->_hx___sortTimelineDepth_dyn());
HXLINE( 582)			HX_VARI_NAME( int,i2,"i") = (this->_hx___objectDepths->length - (int)1);
HXLINE( 584)			while((i2 >= (int)0)){
HXLINE( 586)				timelineObject1 = this->_hx___objectDepths->__get(i2).StaticCast<  ::openfl::display::_MovieClip::TimelineObject >();
HXLINE( 587)				this->addChildAt(timelineObject1->displayObject,(int)0);
HXLINE( 588)				i2 = (i2 - (int)1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MovieClip_obj,_hx___renderFrame,(void))

int MovieClip_obj::_hx___sortTimelineDepth( ::openfl::display::_MovieClip::TimelineObject a, ::openfl::display::_MovieClip::TimelineObject b){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_599___sortTimelineDepth)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 599)		return (a->depth - b->depth);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MovieClip_obj,_hx___sortTimelineDepth,return )

void MovieClip_obj::_hx___stopAllMovieClips(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_604___stopAllMovieClips)
            	HX_STACK_THIS(this)
HXLINE( 606)		this->super::_hx___stopAllMovieClips();
HXLINE( 607)		this->stop();
            	}


void MovieClip_obj::_hx___updateFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_612___updateFrame)
            	HX_STACK_THIS(this)
HXLINE( 614)		if ((this->_hx___currentFrame != this->_hx___lastUpdate)) {
HXLINE( 616)			HX_VARI( int,frameIndex) = (this->_hx___currentFrame - (int)1);
HXLINE( 618)			if ((frameIndex > (int)-1)) {
HXLINE( 620)				bool _hx_tmp;
HXDLIN( 620)				if ((this->_hx___symbol->frames->length > frameIndex)) {
HXLINE( 620)					_hx_tmp = hx::IsNotNull( this->_hx___symbol->frames->__get(frameIndex).StaticCast<  ::openfl::_internal::timeline::Frame >() );
            				}
            				else {
HXLINE( 620)					_hx_tmp = false;
            				}
HXDLIN( 620)				if (_hx_tmp) {
HXLINE( 622)					this->_hx___currentFrameLabel = this->_hx___symbol->frames->__get(frameIndex).StaticCast<  ::openfl::_internal::timeline::Frame >()->label;
            				}
            				else {
HXLINE( 626)					this->_hx___currentFrameLabel = null();
            				}
HXLINE( 630)				if (hx::IsNotNull( this->_hx___currentFrameLabel )) {
HXLINE( 632)					this->_hx___currentLabel = this->_hx___currentFrameLabel;
            				}
            				else {
HXLINE( 636)					if ((this->_hx___currentFrame != (this->_hx___lastUpdate + (int)1))) {
HXLINE( 638)						this->_hx___currentLabel = null();
HXLINE( 640)						{
HXLINE( 640)							HX_VARI( int,_g) = (int)0;
HXDLIN( 640)							HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___currentLabels;
HXDLIN( 640)							while((_g < _g1->length)){
HXLINE( 640)								HX_VARI(  ::openfl::display::FrameLabel,label) = _g1->__get(_g).StaticCast<  ::openfl::display::FrameLabel >();
HXDLIN( 640)								_g = (_g + (int)1);
HXLINE( 642)								if ((label->get_frame() <= this->_hx___currentFrame)) {
HXLINE( 644)									this->_hx___currentLabel = label->get_name();
            								}
            								else {
HXLINE( 648)									goto _hx_goto_28;
            								}
            							}
            							_hx_goto_28:;
            						}
            					}
            				}
HXLINE( 658)				this->_hx___renderFrame(frameIndex);
            			}
HXLINE( 662)			this->_hx___renderDirty = true;
HXLINE( 663)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE( 667)		this->_hx___lastUpdate = this->_hx___currentFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,_hx___updateFrame,(void))

int MovieClip_obj::get_currentFrame(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_679_get_currentFrame)
            	HX_STACK_THIS(this)
HXLINE( 679)		return this->_hx___currentFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrame,return )

::String MovieClip_obj::get_currentFrameLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_680_get_currentFrameLabel)
            	HX_STACK_THIS(this)
HXLINE( 680)		return this->_hx___currentFrameLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentFrameLabel,return )

::String MovieClip_obj::get_currentLabel(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_681_get_currentLabel)
            	HX_STACK_THIS(this)
HXLINE( 681)		return this->_hx___currentLabel;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabel,return )

::Array< ::Dynamic> MovieClip_obj::get_currentLabels(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_682_get_currentLabels)
            	HX_STACK_THIS(this)
HXLINE( 682)		return this->_hx___currentLabels;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_currentLabels,return )

int MovieClip_obj::get_framesLoaded(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_683_get_framesLoaded)
            	HX_STACK_THIS(this)
HXLINE( 683)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_framesLoaded,return )

int MovieClip_obj::get_totalFrames(){
            	HX_STACKFRAME(&_hx_pos_9f7ac0293b858dd4_684_get_totalFrames)
            	HX_STACK_THIS(this)
HXLINE( 684)		return this->_hx___totalFrames;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MovieClip_obj,get_totalFrames,return )

 ::openfl::_internal::swf::SWFLite MovieClip_obj::_hx___initSWF;

 ::openfl::_internal::symbols::SpriteSymbol MovieClip_obj::_hx___initSymbol;


hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__new() {
	hx::ObjectPtr< MovieClip_obj > __this = new MovieClip_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MovieClip_obj > MovieClip_obj::__alloc(hx::Ctx *_hx_ctx) {
	MovieClip_obj *__this = (MovieClip_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MovieClip_obj), true, "openfl.display.MovieClip"));
	*(void **)__this = MovieClip_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MovieClip_obj::MovieClip_obj()
{
}

void MovieClip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MovieClip);
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_MARK_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_MARK_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_MARK_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_MARK_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_MARK_MEMBER_NAME(_hx___lastUpdate,"__lastUpdate");
	HX_MARK_MEMBER_NAME(_hx___objectDepths,"__objectDepths");
	HX_MARK_MEMBER_NAME(_hx___objects,"__objects");
	HX_MARK_MEMBER_NAME(_hx___playing,"__playing");
	HX_MARK_MEMBER_NAME(_hx___swf,"__swf");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_MARK_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	HX_MARK_MEMBER_NAME(_hx___zeroSymbol,"__zeroSymbol");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MovieClip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(_hx___currentFrame,"__currentFrame");
	HX_VISIT_MEMBER_NAME(_hx___currentFrameLabel,"__currentFrameLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabel,"__currentLabel");
	HX_VISIT_MEMBER_NAME(_hx___currentLabels,"__currentLabels");
	HX_VISIT_MEMBER_NAME(_hx___frameScripts,"__frameScripts");
	HX_VISIT_MEMBER_NAME(_hx___frameTime,"__frameTime");
	HX_VISIT_MEMBER_NAME(_hx___lastUpdate,"__lastUpdate");
	HX_VISIT_MEMBER_NAME(_hx___objectDepths,"__objectDepths");
	HX_VISIT_MEMBER_NAME(_hx___objects,"__objects");
	HX_VISIT_MEMBER_NAME(_hx___playing,"__playing");
	HX_VISIT_MEMBER_NAME(_hx___swf,"__swf");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___timeElapsed,"__timeElapsed");
	HX_VISIT_MEMBER_NAME(_hx___totalFrames,"__totalFrames");
	HX_VISIT_MEMBER_NAME(_hx___zeroSymbol,"__zeroSymbol");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MovieClip_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn()); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { return hx::Val( _hx___swf); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__objects") ) { return hx::Val( _hx___objects); }
		if (HX_FIELD_EQ(inName,"__playing") ) { return hx::Val( _hx___playing); }
		if (HX_FIELD_EQ(inName,"nextFrame") ) { return hx::Val( nextFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"prevFrame") ) { return hx::Val( prevFrame_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__getFrame") ) { return hx::Val( _hx___getFrame_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"totalFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_totalFrames()); }
		if (HX_FIELD_EQ(inName,"__frameTime") ) { return hx::Val( _hx___frameTime); }
		if (HX_FIELD_EQ(inName,"gotoAndPlay") ) { return hx::Val( gotoAndPlay_dyn()); }
		if (HX_FIELD_EQ(inName,"gotoAndStop") ) { return hx::Val( gotoAndStop_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentFrame") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentFrame()); }
		if (HX_FIELD_EQ(inName,"currentLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentLabel()); }
		if (HX_FIELD_EQ(inName,"framesLoaded") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_framesLoaded()); }
		if (HX_FIELD_EQ(inName,"__lastUpdate") ) { return hx::Val( _hx___lastUpdate); }
		if (HX_FIELD_EQ(inName,"__zeroSymbol") ) { return hx::Val( _hx___zeroSymbol); }
		if (HX_FIELD_EQ(inName,"__applyTween") ) { return hx::Val( _hx___applyTween_dyn()); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentLabels") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentLabels()); }
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { return hx::Val( _hx___timeElapsed); }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { return hx::Val( _hx___totalFrames); }
		if (HX_FIELD_EQ(inName,"__placeObject") ) { return hx::Val( _hx___placeObject_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderFrame") ) { return hx::Val( _hx___renderFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateFrame") ) { return hx::Val( _hx___updateFrame_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { return hx::Val( _hx___currentFrame); }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { return hx::Val( _hx___currentLabel); }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { return hx::Val( _hx___frameScripts); }
		if (HX_FIELD_EQ(inName,"__objectDepths") ) { return hx::Val( _hx___objectDepths); }
		if (HX_FIELD_EQ(inName,"addFrameScript") ) { return hx::Val( addFrameScript_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { return hx::Val( _hx___currentLabels); }
		if (HX_FIELD_EQ(inName,"get_totalFrames") ) { return hx::Val( get_totalFrames_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_currentFrame") ) { return hx::Val( get_currentFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"get_currentLabel") ) { return hx::Val( get_currentLabel_dyn()); }
		if (HX_FIELD_EQ(inName,"get_framesLoaded") ) { return hx::Val( get_framesLoaded_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"currentFrameLabel") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentFrameLabel()); }
		if (HX_FIELD_EQ(inName,"get_currentLabels") ) { return hx::Val( get_currentLabels_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { return hx::Val( _hx___currentFrameLabel); }
		if (HX_FIELD_EQ(inName,"__sortTimelineDepth") ) { return hx::Val( _hx___sortTimelineDepth_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopAllMovieClips") ) { return hx::Val( _hx___stopAllMovieClips_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_currentFrameLabel") ) { return hx::Val( get_currentFrameLabel_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool MovieClip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { outValue = _hx___initSWF; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { outValue = _hx___initSymbol; return true; }
	}
	return false;
}

hx::Val MovieClip_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"__swf") ) { _hx___swf=inValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__objects") ) { _hx___objects=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__playing") ) { _hx___playing=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__frameTime") ) { _hx___frameTime=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__lastUpdate") ) { _hx___lastUpdate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__zeroSymbol") ) { _hx___zeroSymbol=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__timeElapsed") ) { _hx___timeElapsed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__totalFrames") ) { _hx___totalFrames=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__currentFrame") ) { _hx___currentFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentLabel") ) { _hx___currentLabel=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__frameScripts") ) { _hx___frameScripts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__objectDepths") ) { _hx___objectDepths=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__currentLabels") ) { _hx___currentLabels=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__currentFrameLabel") ) { _hx___currentFrameLabel=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MovieClip_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"__initSWF") ) { _hx___initSWF=ioValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initSymbol") ) { _hx___initSymbol=ioValue.Cast<  ::openfl::_internal::symbols::SpriteSymbol >(); return true; }
	}
	return false;
}

void MovieClip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentFrame","\x34","\x5d","\x8f","\x4d"));
	outFields->push(HX_HCSTRING("currentFrameLabel","\x20","\xc4","\x0a","\x2a"));
	outFields->push(HX_HCSTRING("currentLabel","\xfb","\xf2","\xba","\xb6"));
	outFields->push(HX_HCSTRING("currentLabels","\x18","\xa9","\xd9","\x2c"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("framesLoaded","\x4b","\xac","\x61","\x0e"));
	outFields->push(HX_HCSTRING("totalFrames","\x8a","\xa2","\xbb","\x72"));
	outFields->push(HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e"));
	outFields->push(HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc"));
	outFields->push(HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7"));
	outFields->push(HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4"));
	outFields->push(HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee"));
	outFields->push(HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68"));
	outFields->push(HX_HCSTRING("__lastUpdate","\x1f","\xe4","\x73","\x8a"));
	outFields->push(HX_HCSTRING("__objectDepths","\x4f","\x81","\x53","\x68"));
	outFields->push(HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03"));
	outFields->push(HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b"));
	outFields->push(HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75"));
	outFields->push(HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb"));
	outFields->push(HX_HCSTRING("__zeroSymbol","\xc0","\x7b","\x06","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MovieClip_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(MovieClip_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___currentFrame),HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e")},
	{hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentFrameLabel),HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc")},
	{hx::fsString,(int)offsetof(MovieClip_obj,_hx___currentLabel),HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MovieClip_obj,_hx___currentLabels),HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(MovieClip_obj,_hx___frameScripts),HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___frameTime),HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___lastUpdate),HX_HCSTRING("__lastUpdate","\x1f","\xe4","\x73","\x8a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(MovieClip_obj,_hx___objectDepths),HX_HCSTRING("__objectDepths","\x4f","\x81","\x53","\x68")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(MovieClip_obj,_hx___objects),HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03")},
	{hx::fsBool,(int)offsetof(MovieClip_obj,_hx___playing),HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b")},
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(int)offsetof(MovieClip_obj,_hx___swf),HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2")},
	{hx::fsObject /*::openfl::_internal::symbols::SpriteSymbol*/ ,(int)offsetof(MovieClip_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___timeElapsed),HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___totalFrames),HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb")},
	{hx::fsInt,(int)offsetof(MovieClip_obj,_hx___zeroSymbol),HX_HCSTRING("__zeroSymbol","\xc0","\x7b","\x06","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo MovieClip_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(void *) &MovieClip_obj::_hx___initSWF,HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c")},
	{hx::fsObject /*::openfl::_internal::symbols::SpriteSymbol*/ ,(void *) &MovieClip_obj::_hx___initSymbol,HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String MovieClip_obj_sMemberFields[] = {
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("__currentFrame","\x54","\xe0","\x4f","\x6e"),
	HX_HCSTRING("__currentFrameLabel","\x00","\xed","\xfa","\xdc"),
	HX_HCSTRING("__currentLabel","\x1b","\x76","\x7b","\xd7"),
	HX_HCSTRING("__currentLabels","\xf8","\xe1","\x8b","\xb4"),
	HX_HCSTRING("__frameScripts","\x7b","\x3e","\x2f","\xee"),
	HX_HCSTRING("__frameTime","\xba","\xd3","\xa9","\x68"),
	HX_HCSTRING("__lastUpdate","\x1f","\xe4","\x73","\x8a"),
	HX_HCSTRING("__objectDepths","\x4f","\x81","\x53","\x68"),
	HX_HCSTRING("__objects","\xb4","\xb9","\x9d","\x03"),
	HX_HCSTRING("__playing","\x4e","\x60","\x66","\x0b"),
	HX_HCSTRING("__swf","\x22","\x0c","\x34","\xf2"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__timeElapsed","\x8f","\x80","\x8e","\x75"),
	HX_HCSTRING("__totalFrames","\x6a","\xe3","\x33","\xbb"),
	HX_HCSTRING("__zeroSymbol","\xc0","\x7b","\x06","\xb9"),
	HX_HCSTRING("addFrameScript","\x77","\x21","\x7f","\xbb"),
	HX_HCSTRING("gotoAndPlay","\x08","\x65","\x84","\xef"),
	HX_HCSTRING("gotoAndStop","\x16","\x27","\x86","\xf1"),
	HX_HCSTRING("nextFrame","\x3a","\x92","\xc8","\xad"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("prevFrame","\x3a","\x18","\xda","\xf1"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("__applyTween","\x3d","\xa1","\x55","\xfd"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getFrame","\xd7","\xfa","\x92","\x09"),
	HX_HCSTRING("__placeObject","\xc6","\x77","\xf8","\x86"),
	HX_HCSTRING("__renderFrame","\xd7","\xe5","\xac","\x1a"),
	HX_HCSTRING("__sortTimelineDepth","\x64","\x4d","\xd7","\x27"),
	HX_HCSTRING("__stopAllMovieClips","\xd2","\x89","\xe8","\x53"),
	HX_HCSTRING("__updateFrame","\x44","\x22","\x94","\x34"),
	HX_HCSTRING("get_currentFrame","\xbd","\x49","\x2e","\x52"),
	HX_HCSTRING("get_currentFrameLabel","\xf7","\xc6","\xb8","\xa8"),
	HX_HCSTRING("get_currentLabel","\x84","\xdf","\x59","\xbb"),
	HX_HCSTRING("get_currentLabels","\x6f","\xb4","\x49","\x33"),
	HX_HCSTRING("get_framesLoaded","\xd4","\x98","\x00","\x13"),
	HX_HCSTRING("get_totalFrames","\x21","\x5a","\x9d","\x33"),
	::String(null()) };

static void MovieClip_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MovieClip_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_MARK_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MovieClip_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MovieClip_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSWF,"__initSWF");
	HX_VISIT_MEMBER_NAME(MovieClip_obj::_hx___initSymbol,"__initSymbol");
};

#endif

hx::Class MovieClip_obj::__mClass;

static ::String MovieClip_obj_sStaticFields[] = {
	HX_HCSTRING("__initSWF","\xf2","\xa6","\xdc","\x4c"),
	HX_HCSTRING("__initSymbol","\xa8","\x85","\xb6","\x2b"),
	::String(null())
};

void MovieClip_obj::__register()
{
	hx::Object *dummy = new MovieClip_obj;
	MovieClip_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.MovieClip","\xf6","\x30","\xc3","\xc4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MovieClip_obj::__GetStatic;
	__mClass->mSetStaticField = &MovieClip_obj::__SetStatic;
	__mClass->mMarkFunc = MovieClip_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(MovieClip_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MovieClip_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MovieClip_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MovieClip_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MovieClip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MovieClip_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
