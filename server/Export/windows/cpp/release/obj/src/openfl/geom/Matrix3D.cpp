// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_25_new,"openfl.geom.Matrix3D","new",0xe0591fd8,"openfl.geom.Matrix3D.new","openfl/geom/Matrix3D.hx",25,0x3acce238)
static const Float _hx_array_data_3d2e93e6_2[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_38_append,"openfl.geom.Matrix3D","append",0x481b8d62,"openfl.geom.Matrix3D.append","openfl/geom/Matrix3D.hx",38,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_72_appendRotation,"openfl.geom.Matrix3D","appendRotation",0xf492b8c0,"openfl.geom.Matrix3D.appendRotation","openfl/geom/Matrix3D.hx",72,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_123_appendScale,"openfl.geom.Matrix3D","appendScale",0x02daedc8,"openfl.geom.Matrix3D.appendScale","openfl/geom/Matrix3D.hx",123,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_128_appendTranslation,"openfl.geom.Matrix3D","appendTranslation",0x514252af,"openfl.geom.Matrix3D.appendTranslation","openfl/geom/Matrix3D.hx",128,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_139_clone,"openfl.geom.Matrix3D","clone",0x2ff530d5,"openfl.geom.Matrix3D.clone","openfl/geom/Matrix3D.hx",139,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_146_copyColumnFrom,"openfl.geom.Matrix3D","copyColumnFrom",0x63600afd,"openfl.geom.Matrix3D.copyColumnFrom","openfl/geom/Matrix3D.hx",146,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_185_copyColumnTo,"openfl.geom.Matrix3D","copyColumnTo",0x8c37304e,"openfl.geom.Matrix3D.copyColumnTo","openfl/geom/Matrix3D.hx",185,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_224_copyFrom,"openfl.geom.Matrix3D","copyFrom",0xe290a947,"openfl.geom.Matrix3D.copyFrom","openfl/geom/Matrix3D.hx",224,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_229_copyRawDataFrom,"openfl.geom.Matrix3D","copyRawDataFrom",0x9938207f,"openfl.geom.Matrix3D.copyRawDataFrom","openfl/geom/Matrix3D.hx",229,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_254_copyRawDataTo,"openfl.geom.Matrix3D","copyRawDataTo",0xac978150,"openfl.geom.Matrix3D.copyRawDataTo","openfl/geom/Matrix3D.hx",254,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_279_copyRowFrom,"openfl.geom.Matrix3D","copyRowFrom",0x3d20cce7,"openfl.geom.Matrix3D.copyRowFrom","openfl/geom/Matrix3D.hx",279,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_318_copyRowTo,"openfl.geom.Matrix3D","copyRowTo",0x42dcc3b8,"openfl.geom.Matrix3D.copyRowTo","openfl/geom/Matrix3D.hx",318,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_357_copyToMatrix3D,"openfl.geom.Matrix3D","copyToMatrix3D",0x2cc9916a,"openfl.geom.Matrix3D.copyToMatrix3D","openfl/geom/Matrix3D.hx",357,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_391_decompose,"openfl.geom.Matrix3D","decompose",0x4a21fd29,"openfl.geom.Matrix3D.decompose","openfl/geom/Matrix3D.hx",391,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_517_deltaTransformVector,"openfl.geom.Matrix3D","deltaTransformVector",0x0285cbbf,"openfl.geom.Matrix3D.deltaTransformVector","openfl/geom/Matrix3D.hx",517,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_528_identity,"openfl.geom.Matrix3D","identity",0xd35ee2c6,"openfl.geom.Matrix3D.identity","openfl/geom/Matrix3D.hx",528,0x3acce238)
static const Float _hx_array_data_3d2e93e6_24[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_550_interpolateTo,"openfl.geom.Matrix3D","interpolateTo",0x74c2e614,"openfl.geom.Matrix3D.interpolateTo","openfl/geom/Matrix3D.hx",550,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_559_invert,"openfl.geom.Matrix3D","invert",0x5820929e,"openfl.geom.Matrix3D.invert","openfl/geom/Matrix3D.hx",559,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_597_pointAt,"openfl.geom.Matrix3D","pointAt",0xd7900cdb,"openfl.geom.Matrix3D.pointAt","openfl/geom/Matrix3D.hx",597,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_664_prepend,"openfl.geom.Matrix3D","prepend",0xbe4f0286,"openfl.geom.Matrix3D.prepend","openfl/geom/Matrix3D.hx",664,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_698_prependRotation,"openfl.geom.Matrix3D","prependRotation",0x54b5f1e4,"openfl.geom.Matrix3D.prependRotation","openfl/geom/Matrix3D.hx",698,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_749_prependScale,"openfl.geom.Matrix3D","prependScale",0x59d85624,"openfl.geom.Matrix3D.prependScale","openfl/geom/Matrix3D.hx",749,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_754_prependTranslation,"openfl.geom.Matrix3D","prependTranslation",0x2df4680b,"openfl.geom.Matrix3D.prependTranslation","openfl/geom/Matrix3D.hx",754,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_763_recompose,"openfl.geom.Matrix3D","recompose",0xd355bb37,"openfl.geom.Matrix3D.recompose","openfl/geom/Matrix3D.hx",763,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_870_transformVector,"openfl.geom.Matrix3D","transformVector",0x3f2dcec7,"openfl.geom.Matrix3D.transformVector","openfl/geom/Matrix3D.hx",870,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_881_transformVectors,"openfl.geom.Matrix3D","transformVectors",0x08e71fcc,"openfl.geom.Matrix3D.transformVectors","openfl/geom/Matrix3D.hx",881,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_903_transpose,"openfl.geom.Matrix3D","transpose",0x1ba989f1,"openfl.geom.Matrix3D.transpose","openfl/geom/Matrix3D.hx",903,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_963_get_determinant,"openfl.geom.Matrix3D","get_determinant",0x5f71b8a4,"openfl.geom.Matrix3D.get_determinant","openfl/geom/Matrix3D.hx",963,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_975_get_position,"openfl.geom.Matrix3D","get_position",0x1555563a,"openfl.geom.Matrix3D.get_position","openfl/geom/Matrix3D.hx",975,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_980_set_position,"openfl.geom.Matrix3D","set_position",0x2a4e79ae,"openfl.geom.Matrix3D.set_position","openfl/geom/Matrix3D.hx",980,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_362_create2D,"openfl.geom.Matrix3D","create2D",0x4623e756,"openfl.geom.Matrix3D.create2D","openfl/geom/Matrix3D.hx",362,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_375_createABCD,"openfl.geom.Matrix3D","createABCD",0x0e55d246,"openfl.geom.Matrix3D.createABCD","openfl/geom/Matrix3D.hx",375,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_380_createOrtho,"openfl.geom.Matrix3D","createOrtho",0xac3dd614,"openfl.geom.Matrix3D.createOrtho","openfl/geom/Matrix3D.hx",380,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_533_interpolate,"openfl.geom.Matrix3D","interpolate",0x6cc85c39,"openfl.geom.Matrix3D.interpolate","openfl/geom/Matrix3D.hx",533,0x3acce238)
HX_DEFINE_STACK_FRAME(_hx_pos_48294970c42d50e6_922___getAxisRotation,"openfl.geom.Matrix3D","__getAxisRotation",0xf649170d,"openfl.geom.Matrix3D.__getAxisRotation","openfl/geom/Matrix3D.hx",922,0x3acce238)
namespace openfl{
namespace geom{

void Matrix3D_obj::__construct( ::openfl::_Vector::FloatVector v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_25_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  25)		bool _hx_tmp;
HXDLIN(  25)		if (hx::IsNotNull( v )) {
HXLINE(  25)			_hx_tmp = (v->get_length() == (int)16);
            		}
            		else {
HXLINE(  25)			_hx_tmp = false;
            		}
HXDLIN(  25)		if (_hx_tmp) {
HXLINE(  27)			this->rawData = v;
            		}
            		else {
HXLINE(  31)			HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::fromData( _hx_array_data_3d2e93e6_2,16);
HXDLIN(  31)			int length = null();
HXDLIN(  31)			bool fixed = null();
HXDLIN(  31)			HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXDLIN(  31)			{
HXLINE(  31)				HX_VARI( int,_g1) = (int)0;
HXDLIN(  31)				HX_VARI( int,_g) = a->length;
HXDLIN(  31)				while((_g1 < _g)){
HXLINE(  31)					_g1 = (_g1 + (int)1);
HXDLIN(  31)					HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN(  31)					vector->set(i,a->__get(i));
            				}
            			}
HXDLIN(  31)			this->rawData = vector;
            		}
            	}

Dynamic Matrix3D_obj::__CreateEmpty() { return new Matrix3D_obj; }

void *Matrix3D_obj::_hx_vtable = 0;

Dynamic Matrix3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix3D_obj > _hx_result = new Matrix3D_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Matrix3D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x34742c1e;
}

void Matrix3D_obj::append( ::openfl::geom::Matrix3D lhs){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_38_append)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lhs,"lhs")
HXLINE(  40)		HX_VARI( Float,m111) = this->rawData->get((int)0);
HXDLIN(  40)		HX_VARI( Float,m121) = this->rawData->get((int)4);
HXDLIN(  40)		HX_VARI( Float,m131) = this->rawData->get((int)8);
HXDLIN(  40)		HX_VARI( Float,m141) = this->rawData->get((int)12);
HXDLIN(  40)		HX_VARI( Float,m112) = this->rawData->get((int)1);
HXDLIN(  40)		HX_VARI( Float,m122) = this->rawData->get((int)5);
HXDLIN(  40)		HX_VARI( Float,m132) = this->rawData->get((int)9);
HXDLIN(  40)		HX_VARI( Float,m142) = this->rawData->get((int)13);
HXDLIN(  40)		HX_VARI( Float,m113) = this->rawData->get((int)2);
HXDLIN(  40)		HX_VARI( Float,m123) = this->rawData->get((int)6);
HXDLIN(  40)		HX_VARI( Float,m133) = this->rawData->get((int)10);
HXDLIN(  40)		HX_VARI( Float,m143) = this->rawData->get((int)14);
HXDLIN(  40)		HX_VARI( Float,m114) = this->rawData->get((int)3);
HXDLIN(  40)		HX_VARI( Float,m124) = this->rawData->get((int)7);
HXDLIN(  40)		HX_VARI( Float,m134) = this->rawData->get((int)11);
HXDLIN(  40)		HX_VARI( Float,m144) = this->rawData->get((int)15);
HXDLIN(  40)		HX_VARI( Float,m211) = lhs->rawData->get((int)0);
HXDLIN(  40)		HX_VARI( Float,m221) = lhs->rawData->get((int)4);
HXDLIN(  40)		HX_VARI( Float,m231) = lhs->rawData->get((int)8);
HXDLIN(  40)		HX_VARI( Float,m241) = lhs->rawData->get((int)12);
HXDLIN(  40)		HX_VARI( Float,m212) = lhs->rawData->get((int)1);
HXDLIN(  40)		HX_VARI( Float,m222) = lhs->rawData->get((int)5);
HXDLIN(  40)		HX_VARI( Float,m232) = lhs->rawData->get((int)9);
HXDLIN(  40)		HX_VARI( Float,m242) = lhs->rawData->get((int)13);
HXDLIN(  40)		HX_VARI( Float,m213) = lhs->rawData->get((int)2);
HXDLIN(  40)		HX_VARI( Float,m223) = lhs->rawData->get((int)6);
HXDLIN(  40)		HX_VARI( Float,m233) = lhs->rawData->get((int)10);
HXDLIN(  40)		HX_VARI( Float,m243) = lhs->rawData->get((int)14);
HXDLIN(  40)		HX_VARI( Float,m214) = lhs->rawData->get((int)3);
HXDLIN(  40)		HX_VARI( Float,m224) = lhs->rawData->get((int)7);
HXDLIN(  40)		HX_VARI( Float,m234) = lhs->rawData->get((int)11);
HXDLIN(  40)		HX_VARI( Float,m244) = lhs->rawData->get((int)15);
HXLINE(  49)		this->rawData->set((int)0,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
HXLINE(  50)		this->rawData->set((int)1,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
HXLINE(  51)		this->rawData->set((int)2,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
HXLINE(  52)		this->rawData->set((int)3,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
HXLINE(  54)		this->rawData->set((int)4,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
HXLINE(  55)		this->rawData->set((int)5,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
HXLINE(  56)		this->rawData->set((int)6,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
HXLINE(  57)		this->rawData->set((int)7,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
HXLINE(  59)		this->rawData->set((int)8,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
HXLINE(  60)		this->rawData->set((int)9,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
HXLINE(  61)		this->rawData->set((int)10,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
HXLINE(  62)		this->rawData->set((int)11,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
HXLINE(  64)		this->rawData->set((int)12,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
HXLINE(  65)		this->rawData->set((int)13,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
HXLINE(  66)		this->rawData->set((int)14,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
HXLINE(  67)		this->rawData->set((int)15,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,append,(void))

void Matrix3D_obj::appendRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_72_appendRotation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE(  74)		HX_VAR( Float,tx);
HXDLIN(  74)		HX_VAR( Float,ty);
HXDLIN(  74)		HX_VARI( Float,tz) = (int)0;
HXLINE(  75)		ty = tz;
HXDLIN(  75)		tx = ty;
HXLINE(  77)		if (hx::IsNotNull( pivotPoint )) {
HXLINE(  78)			tx = pivotPoint->x;
HXLINE(  79)			ty = pivotPoint->y;
HXLINE(  80)			tz = pivotPoint->z;
            		}
HXLINE(  82)		HX_VARI( Float,radian) = ((Float)(degrees * ::Math_obj::PI) / (Float)(int)180);
HXLINE(  83)		HX_VARI( Float,cos) = ::Math_obj::cos(radian);
HXLINE(  84)		HX_VARI( Float,sin) = ::Math_obj::sin(radian);
HXLINE(  85)		HX_VARI( Float,x) = axis->x;
HXLINE(  86)		HX_VARI( Float,y) = axis->y;
HXLINE(  87)		HX_VARI( Float,z) = axis->z;
HXLINE(  88)		HX_VARI( Float,x2) = (x * x);
HXLINE(  89)		HX_VARI( Float,y2) = (y * y);
HXLINE(  90)		HX_VARI( Float,z2) = (z * z);
HXLINE(  91)		HX_VARI( Float,ls) = ((x2 + y2) + z2);
HXLINE(  92)		if ((ls != (int)0)) {
HXLINE(  93)			HX_VARI( Float,l) = ::Math_obj::sqrt(ls);
HXLINE(  94)			x = ((Float)x / (Float)l);
HXLINE(  95)			y = ((Float)y / (Float)l);
HXLINE(  96)			z = ((Float)z / (Float)l);
HXLINE(  97)			x2 = ((Float)x2 / (Float)ls);
HXLINE(  98)			y2 = ((Float)y2 / (Float)ls);
HXLINE(  99)			z2 = ((Float)z2 / (Float)ls);
            		}
HXLINE( 101)		HX_VARI( Float,ccos) = ((int)1 - cos);
HXLINE( 102)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 103)		HX_VARI(  ::openfl::_Vector::FloatVector,d) = m->rawData;
HXLINE( 104)		d->set((int)0,(x2 + ((y2 + z2) * cos)));
HXLINE( 105)		d->set((int)1,(((x * y) * ccos) + (z * sin)));
HXLINE( 106)		d->set((int)2,(((x * z) * ccos) - (y * sin)));
HXLINE( 107)		d->set((int)4,(((x * y) * ccos) - (z * sin)));
HXLINE( 108)		d->set((int)5,(y2 + ((x2 + z2) * cos)));
HXLINE( 109)		d->set((int)6,(((y * z) * ccos) + (x * sin)));
HXLINE( 110)		d->set((int)8,(((x * z) * ccos) + (y * sin)));
HXLINE( 111)		d->set((int)9,(((y * z) * ccos) - (x * sin)));
HXLINE( 112)		d->set((int)10,(z2 + ((x2 + y2) * cos)));
HXLINE( 113)		d->set((int)12,((((tx * (y2 + z2)) - (x * ((ty * y) + (tz * z)))) * ccos) + (((ty * z) - (tz * y)) * sin)));
HXLINE( 114)		d->set((int)13,((((ty * (x2 + z2)) - (y * ((tx * x) + (tz * z)))) * ccos) + (((tz * x) - (tx * z)) * sin)));
HXLINE( 115)		d->set((int)14,((((tz * (x2 + y2)) - (z * ((tx * x) + (ty * y)))) * ccos) + (((tx * y) - (ty * x)) * sin)));
HXLINE( 116)		this->append(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendRotation,(void))

void Matrix3D_obj::appendScale(Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_123_appendScale)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE( 123)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 123)		int length = null();
HXDLIN( 123)		bool fixed = null();
HXDLIN( 123)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXDLIN( 123)		{
HXLINE( 123)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 123)			HX_VARI( int,_g) = a->length;
HXDLIN( 123)			while((_g1 < _g)){
HXLINE( 123)				_g1 = (_g1 + (int)1);
HXDLIN( 123)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 123)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 123)		this->append( ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendScale,(void))

void Matrix3D_obj::appendTranslation(Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_128_appendTranslation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 130)		this->rawData->set((int)12,(this->rawData->get((int)12) + x));
HXLINE( 131)		this->rawData->set((int)13,(this->rawData->get((int)13) + y));
HXLINE( 132)		this->rawData->set((int)14,(this->rawData->get((int)14) + z));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendTranslation,(void))

 ::openfl::geom::Matrix3D Matrix3D_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_139_clone)
            	HX_STACK_THIS(this)
HXLINE( 139)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,clone,return )

void Matrix3D_obj::copyColumnFrom(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_146_copyColumnFrom)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 146)		switch((int)(column)){
            			case (int)0: {
HXLINE( 150)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)0,vector3D->x);
HXLINE( 151)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)1,vector3D->y);
HXLINE( 152)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)2,vector3D->z);
HXLINE( 153)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)3,vector3D->w);
            			}
            			break;
            			case (int)1: {
HXLINE( 157)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)4,vector3D->x);
HXLINE( 158)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)5,vector3D->y);
HXLINE( 159)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)6,vector3D->z);
HXLINE( 160)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)7,vector3D->w);
            			}
            			break;
            			case (int)2: {
HXLINE( 164)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)8,vector3D->x);
HXLINE( 165)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)9,vector3D->y);
HXLINE( 166)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)10,vector3D->z);
HXLINE( 167)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)11,vector3D->w);
            			}
            			break;
            			case (int)3: {
HXLINE( 171)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)12,vector3D->x);
HXLINE( 172)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)13,vector3D->y);
HXLINE( 173)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)14,vector3D->z);
HXLINE( 174)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)15,vector3D->w);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnFrom,(void))

void Matrix3D_obj::copyColumnTo(int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_185_copyColumnTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 185)		switch((int)(column)){
            			case (int)0: {
HXLINE( 189)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)0)) );
HXLINE( 190)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)1)) );
HXLINE( 191)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)2)) );
HXLINE( 192)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)3)) );
            			}
            			break;
            			case (int)1: {
HXLINE( 196)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)4)) );
HXLINE( 197)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)5)) );
HXLINE( 198)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)6)) );
HXLINE( 199)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)7)) );
            			}
            			break;
            			case (int)2: {
HXLINE( 203)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)8)) );
HXLINE( 204)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)9)) );
HXLINE( 205)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)10)) );
HXLINE( 206)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)11)) );
            			}
            			break;
            			case (int)3: {
HXLINE( 210)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)12)) );
HXLINE( 211)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)13)) );
HXLINE( 212)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)14)) );
HXLINE( 213)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)15)) );
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnTo,(void))

void Matrix3D_obj::copyFrom( ::openfl::geom::Matrix3D other){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_224_copyFrom)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE( 224)		this->rawData = ( ( ::openfl::_Vector::FloatVector)(other->rawData->copy()) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyFrom,(void))

void Matrix3D_obj::copyRawDataFrom( ::openfl::_Vector::FloatVector vector,hx::Null< int >  __o_index,hx::Null< bool >  __o_transpose){
int index = __o_index.Default(0);
bool transpose = __o_transpose.Default(false);
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_229_copyRawDataFrom)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vector,"vector")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transpose,"transpose")
HXLINE( 231)		if (transpose) {
HXLINE( 233)			this->transpose();
            		}
HXLINE( 239)		{
HXLINE( 239)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 239)			HX_VARI( int,_g) = (vector->get_length() - index);
HXDLIN( 239)			while((_g1 < _g)){
HXLINE( 239)				_g1 = (_g1 + (int)1);
HXDLIN( 239)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 241)				this->rawData->set(i,vector->get((i + index)));
            			}
            		}
HXLINE( 245)		if (transpose) {
HXLINE( 247)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataFrom,(void))

void Matrix3D_obj::copyRawDataTo( ::openfl::_Vector::FloatVector vector,hx::Null< int >  __o_index,hx::Null< bool >  __o_transpose){
int index = __o_index.Default(0);
bool transpose = __o_transpose.Default(false);
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_254_copyRawDataTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vector,"vector")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transpose,"transpose")
HXLINE( 256)		if (transpose) {
HXLINE( 258)			this->transpose();
            		}
HXLINE( 262)		{
HXLINE( 262)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 262)			HX_VARI( int,_g) = this->rawData->get_length();
HXDLIN( 262)			while((_g1 < _g)){
HXLINE( 262)				_g1 = (_g1 + (int)1);
HXDLIN( 262)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 264)				vector->set((i + index),this->rawData->get(i));
            			}
            		}
HXLINE( 268)		if (transpose) {
HXLINE( 270)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataTo,(void))

void Matrix3D_obj::copyRowFrom(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_279_copyRowFrom)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 279)		switch((int)(row)){
            			case (int)0: {
HXLINE( 283)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)0,vector3D->x);
HXLINE( 284)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)4,vector3D->y);
HXLINE( 285)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)8,vector3D->z);
HXLINE( 286)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)12,vector3D->w);
            			}
            			break;
            			case (int)1: {
HXLINE( 290)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)1,vector3D->x);
HXLINE( 291)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)5,vector3D->y);
HXLINE( 292)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)9,vector3D->z);
HXLINE( 293)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)13,vector3D->w);
            			}
            			break;
            			case (int)2: {
HXLINE( 297)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)2,vector3D->x);
HXLINE( 298)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)6,vector3D->y);
HXLINE( 299)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)10,vector3D->z);
HXLINE( 300)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)14,vector3D->w);
            			}
            			break;
            			case (int)3: {
HXLINE( 304)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)3,vector3D->x);
HXLINE( 305)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)7,vector3D->y);
HXLINE( 306)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)11,vector3D->z);
HXLINE( 307)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)15,vector3D->w);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowFrom,(void))

void Matrix3D_obj::copyRowTo(int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_318_copyRowTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 318)		switch((int)(row)){
            			case (int)0: {
HXLINE( 322)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)0)) );
HXLINE( 323)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)4)) );
HXLINE( 324)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)8)) );
HXLINE( 325)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)12)) );
            			}
            			break;
            			case (int)1: {
HXLINE( 329)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)1)) );
HXLINE( 330)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)5)) );
HXLINE( 331)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)9)) );
HXLINE( 332)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)13)) );
            			}
            			break;
            			case (int)2: {
HXLINE( 336)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)2)) );
HXLINE( 337)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)6)) );
HXLINE( 338)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)10)) );
HXLINE( 339)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)14)) );
            			}
            			break;
            			case (int)3: {
HXLINE( 343)				vector3D->x = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)3)) );
HXLINE( 344)				vector3D->y = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)7)) );
HXLINE( 345)				vector3D->z = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)11)) );
HXLINE( 346)				vector3D->w = ( (Float)(::openfl::_Vector::IVector_obj::get(this->rawData,(int)15)) );
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowTo,(void))

void Matrix3D_obj::copyToMatrix3D( ::openfl::geom::Matrix3D other){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_357_copyToMatrix3D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE( 357)		other->rawData = ( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyToMatrix3D,(void))

 ::openfl::_Vector::ObjectVector Matrix3D_obj::decompose( ::Dynamic orientationStyle){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_391_decompose)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(orientationStyle,"orientationStyle")
HXLINE( 393)		if (hx::IsNull( orientationStyle )) {
HXLINE( 395)			orientationStyle = (int)1;
            		}
HXLINE( 399)		int length = null();
HXDLIN( 399)		bool fixed = null();
HXDLIN( 399)		HX_VARI(  ::openfl::_Vector::ObjectVector,vec) =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 401)		HX_VARI(  ::openfl::_Vector::FloatVector,mr) = ( ( ::openfl::_Vector::FloatVector)(this->clone()->rawData->copy()) );
HXLINE( 403)		HX_VARI(  ::openfl::geom::Vector3D,pos) =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,mr->get((int)12),mr->get((int)13),mr->get((int)14),null());
HXLINE( 404)		mr->set((int)12,(int)0);
HXLINE( 405)		mr->set((int)13,(int)0);
HXLINE( 406)		mr->set((int)14,(int)0);
HXLINE( 408)		HX_VARI(  ::openfl::geom::Vector3D,scale) =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 410)		scale->x = ::Math_obj::sqrt((((mr->get((int)0) * mr->get((int)0)) + (mr->get((int)1) * mr->get((int)1))) + (mr->get((int)2) * mr->get((int)2))));
HXLINE( 411)		scale->y = ::Math_obj::sqrt((((mr->get((int)4) * mr->get((int)4)) + (mr->get((int)5) * mr->get((int)5))) + (mr->get((int)6) * mr->get((int)6))));
HXLINE( 412)		scale->z = ::Math_obj::sqrt((((mr->get((int)8) * mr->get((int)8)) + (mr->get((int)9) * mr->get((int)9))) + (mr->get((int)10) * mr->get((int)10))));
HXLINE( 414)		if (((((mr->get((int)0) * ((mr->get((int)5) * mr->get((int)10)) - (mr->get((int)6) * mr->get((int)9)))) - (mr->get((int)1) * ((mr->get((int)4) * mr->get((int)10)) - (mr->get((int)6) * mr->get((int)8))))) + (mr->get((int)2) * ((mr->get((int)4) * mr->get((int)9)) - (mr->get((int)5) * mr->get((int)8))))) < (int)0)) {
HXLINE( 416)			scale->z = -(scale->z);
            		}
HXLINE( 420)		mr->set((int)0,((Float)mr->get((int)0) / (Float)scale->x));
HXLINE( 421)		mr->set((int)1,((Float)mr->get((int)1) / (Float)scale->x));
HXLINE( 422)		mr->set((int)2,((Float)mr->get((int)2) / (Float)scale->x));
HXLINE( 423)		mr->set((int)4,((Float)mr->get((int)4) / (Float)scale->y));
HXLINE( 424)		mr->set((int)5,((Float)mr->get((int)5) / (Float)scale->y));
HXLINE( 425)		mr->set((int)6,((Float)mr->get((int)6) / (Float)scale->y));
HXLINE( 426)		mr->set((int)8,((Float)mr->get((int)8) / (Float)scale->z));
HXLINE( 427)		mr->set((int)9,((Float)mr->get((int)9) / (Float)scale->z));
HXLINE( 428)		mr->set((int)10,((Float)mr->get((int)10) / (Float)scale->z));
HXLINE( 430)		HX_VARI(  ::openfl::geom::Vector3D,rot) =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 432)		 ::Dynamic _hx_switch_0 = orientationStyle;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 436)			rot->w = ::Math_obj::acos(((Float)(((mr->get((int)0) + mr->get((int)5)) + mr->get((int)10)) - (int)1) / (Float)(int)2));
HXLINE( 438)			HX_VARI( Float,len) = ::Math_obj::sqrt(((((mr->get((int)6) - mr->get((int)9)) * (mr->get((int)6) - mr->get((int)9))) + ((mr->get((int)8) - mr->get((int)2)) * (mr->get((int)8) - mr->get((int)2)))) + ((mr->get((int)1) - mr->get((int)4)) * (mr->get((int)1) - mr->get((int)4)))));
HXLINE( 440)			if ((len != (int)0)) {
HXLINE( 442)				rot->x = ((Float)(mr->get((int)6) - mr->get((int)9)) / (Float)len);
HXLINE( 443)				rot->y = ((Float)(mr->get((int)8) - mr->get((int)2)) / (Float)len);
HXLINE( 444)				rot->z = ((Float)(mr->get((int)1) - mr->get((int)4)) / (Float)len);
            			}
            			else {
HXLINE( 448)				rot->x = (rot->y = (rot->z = (int)0));
            			}
HXLINE( 434)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 492)			rot->y = ::Math_obj::asin(-(mr->get((int)2)));
HXLINE( 494)			bool _hx_tmp;
HXDLIN( 494)			if ((mr->get((int)2) != (int)1)) {
HXLINE( 494)				_hx_tmp = (mr->get((int)2) != (int)-1);
            			}
            			else {
HXLINE( 494)				_hx_tmp = false;
            			}
HXDLIN( 494)			if (_hx_tmp) {
HXLINE( 496)				rot->x = ::Math_obj::atan2(mr->get((int)6),mr->get((int)10));
HXLINE( 497)				rot->z = ::Math_obj::atan2(mr->get((int)1),mr->get((int)0));
            			}
            			else {
HXLINE( 501)				rot->z = (int)0;
HXLINE( 502)				rot->x = ::Math_obj::atan2(mr->get((int)4),mr->get((int)5));
            			}
HXLINE( 490)			goto _hx_goto_19;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 454)			HX_VARI( Float,tr) = ((mr->get((int)0) + mr->get((int)5)) + mr->get((int)10));
HXLINE( 456)			if ((tr > (int)0)) {
HXLINE( 458)				rot->w = ((Float)::Math_obj::sqrt(((int)1 + tr)) / (Float)(int)2);
HXLINE( 460)				rot->x = ((Float)(mr->get((int)6) - mr->get((int)9)) / (Float)((int)4 * rot->w));
HXLINE( 461)				rot->y = ((Float)(mr->get((int)8) - mr->get((int)2)) / (Float)((int)4 * rot->w));
HXLINE( 462)				rot->z = ((Float)(mr->get((int)1) - mr->get((int)4)) / (Float)((int)4 * rot->w));
            			}
            			else {
HXLINE( 464)				bool _hx_tmp1;
HXDLIN( 464)				if ((mr->get((int)0) > mr->get((int)5))) {
HXLINE( 464)					_hx_tmp1 = (mr->get((int)0) > mr->get((int)10));
            				}
            				else {
HXLINE( 464)					_hx_tmp1 = false;
            				}
HXDLIN( 464)				if (_hx_tmp1) {
HXLINE( 466)					rot->x = ((Float)::Math_obj::sqrt(((((int)1 + mr->get((int)0)) - mr->get((int)5)) - mr->get((int)10))) / (Float)(int)2);
HXLINE( 468)					rot->w = ((Float)(mr->get((int)6) - mr->get((int)9)) / (Float)((int)4 * rot->x));
HXLINE( 469)					rot->y = ((Float)(mr->get((int)1) + mr->get((int)4)) / (Float)((int)4 * rot->x));
HXLINE( 470)					rot->z = ((Float)(mr->get((int)8) + mr->get((int)2)) / (Float)((int)4 * rot->x));
            				}
            				else {
HXLINE( 472)					if ((mr->get((int)5) > mr->get((int)10))) {
HXLINE( 474)						rot->y = ((Float)::Math_obj::sqrt(((((int)1 + mr->get((int)5)) - mr->get((int)0)) - mr->get((int)10))) / (Float)(int)2);
HXLINE( 476)						rot->x = ((Float)(mr->get((int)1) + mr->get((int)4)) / (Float)((int)4 * rot->y));
HXLINE( 477)						rot->w = ((Float)(mr->get((int)8) - mr->get((int)2)) / (Float)((int)4 * rot->y));
HXLINE( 478)						rot->z = ((Float)(mr->get((int)6) + mr->get((int)9)) / (Float)((int)4 * rot->y));
            					}
            					else {
HXLINE( 482)						rot->z = ((Float)::Math_obj::sqrt(((((int)1 + mr->get((int)10)) - mr->get((int)0)) - mr->get((int)5))) / (Float)(int)2);
HXLINE( 484)						rot->x = ((Float)(mr->get((int)8) + mr->get((int)2)) / (Float)((int)4 * rot->z));
HXLINE( 485)						rot->y = ((Float)(mr->get((int)6) + mr->get((int)9)) / (Float)((int)4 * rot->z));
HXLINE( 486)						rot->w = ((Float)(mr->get((int)1) - mr->get((int)4)) / (Float)((int)4 * rot->z));
            					}
            				}
            			}
HXLINE( 452)			goto _hx_goto_19;
            		}
            		_hx_goto_19:;
HXLINE( 508)		vec->push(pos);
HXLINE( 509)		vec->push(rot);
HXLINE( 510)		vec->push(scale);
HXLINE( 512)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,decompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::deltaTransformVector( ::openfl::geom::Vector3D v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_517_deltaTransformVector)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 519)		HX_VARI( Float,x) = v->x;
HXDLIN( 519)		HX_VARI( Float,y) = v->y;
HXDLIN( 519)		HX_VARI( Float,z) = v->z;
HXLINE( 521)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,((((x * this->rawData->get((int)0)) + (y * this->rawData->get((int)4))) + (z * this->rawData->get((int)8))) + this->rawData->get((int)3)),((((x * this->rawData->get((int)1)) + (y * this->rawData->get((int)5))) + (z * this->rawData->get((int)9))) + this->rawData->get((int)7)),((((x * this->rawData->get((int)2)) + (y * this->rawData->get((int)6))) + (z * this->rawData->get((int)10))) + this->rawData->get((int)11)),(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,deltaTransformVector,return )

void Matrix3D_obj::identity(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_528_identity)
            	HX_STACK_THIS(this)
HXLINE( 528)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::fromData( _hx_array_data_3d2e93e6_24,16);
HXDLIN( 528)		int length = null();
HXDLIN( 528)		bool fixed = null();
HXDLIN( 528)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXDLIN( 528)		{
HXLINE( 528)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 528)			HX_VARI( int,_g) = a->length;
HXDLIN( 528)			while((_g1 < _g)){
HXLINE( 528)				_g1 = (_g1 + (int)1);
HXDLIN( 528)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 528)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 528)		this->rawData = vector;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,identity,(void))

void Matrix3D_obj::interpolateTo( ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_550_interpolateTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 550)		HX_VARI( int,_g) = (int)0;
HXDLIN( 550)		while((_g < (int)16)){
HXLINE( 550)			_g = (_g + (int)1);
HXDLIN( 550)			HX_VARI( int,i) = (_g - (int)1);
HXLINE( 552)			this->rawData->set(i,(this->rawData->get(i) + ((toMat->rawData->get(i) - this->rawData->get(i)) * percent)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,interpolateTo,(void))

bool Matrix3D_obj::invert(){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_559_invert)
            	HX_STACK_THIS(this)
HXLINE( 561)		HX_VARI( Float,d) = this->get_determinant();
HXLINE( 562)		HX_VARI( bool,invertable) = (::Math_obj::abs(d) > ((Float)0.00000000001));
HXLINE( 564)		if (invertable) {
HXLINE( 566)			d = ((Float)(int)1 / (Float)d);
HXLINE( 568)			HX_VARI( Float,m11) = this->rawData->get((int)0);
HXDLIN( 568)			HX_VARI( Float,m21) = this->rawData->get((int)4);
HXDLIN( 568)			HX_VARI( Float,m31) = this->rawData->get((int)8);
HXDLIN( 568)			HX_VARI( Float,m41) = this->rawData->get((int)12);
HXLINE( 569)			HX_VARI( Float,m12) = this->rawData->get((int)1);
HXDLIN( 569)			HX_VARI( Float,m22) = this->rawData->get((int)5);
HXDLIN( 569)			HX_VARI( Float,m32) = this->rawData->get((int)9);
HXDLIN( 569)			HX_VARI( Float,m42) = this->rawData->get((int)13);
HXLINE( 570)			HX_VARI( Float,m13) = this->rawData->get((int)2);
HXDLIN( 570)			HX_VARI( Float,m23) = this->rawData->get((int)6);
HXDLIN( 570)			HX_VARI( Float,m33) = this->rawData->get((int)10);
HXDLIN( 570)			HX_VARI( Float,m43) = this->rawData->get((int)14);
HXLINE( 571)			HX_VARI( Float,m14) = this->rawData->get((int)3);
HXDLIN( 571)			HX_VARI( Float,m24) = this->rawData->get((int)7);
HXDLIN( 571)			HX_VARI( Float,m34) = this->rawData->get((int)11);
HXDLIN( 571)			HX_VARI( Float,m44) = this->rawData->get((int)15);
HXLINE( 573)			this->rawData->set((int)0,(d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24))))));
HXLINE( 574)			this->rawData->set((int)1,(-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14))))));
HXLINE( 575)			this->rawData->set((int)2,(d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 576)			this->rawData->set((int)3,(-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 577)			this->rawData->set((int)4,(-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24))))));
HXLINE( 578)			this->rawData->set((int)5,(d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14))))));
HXLINE( 579)			this->rawData->set((int)6,(-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 580)			this->rawData->set((int)7,(d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 581)			this->rawData->set((int)8,(d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24))))));
HXLINE( 582)			this->rawData->set((int)9,(-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14))))));
HXLINE( 583)			this->rawData->set((int)10,(d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14))))));
HXLINE( 584)			this->rawData->set((int)11,(-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14))))));
HXLINE( 585)			this->rawData->set((int)12,(-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23))))));
HXLINE( 586)			this->rawData->set((int)13,(d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13))))));
HXLINE( 587)			this->rawData->set((int)14,(-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13))))));
HXLINE( 588)			this->rawData->set((int)15,(d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13))))));
            		}
HXLINE( 592)		return invertable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,invert,return )

void Matrix3D_obj::pointAt( ::openfl::geom::Vector3D pos, ::openfl::geom::Vector3D at, ::openfl::geom::Vector3D up){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_597_pointAt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(at,"at")
            	HX_STACK_ARG(up,"up")
HXLINE( 599)		if (hx::IsNull( at )) {
HXLINE( 601)			at =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)-1,null());
            		}
HXLINE( 605)		if (hx::IsNull( up )) {
HXLINE( 607)			up =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)0,(int)-1,(int)0,null());
            		}
HXLINE( 611)		HX_VARI(  ::openfl::geom::Vector3D,dir) = at->subtract(pos);
HXLINE( 612)		HX_VARI(  ::openfl::geom::Vector3D,vup) = up->clone();
HXLINE( 613)		HX_VAR(  ::openfl::geom::Vector3D,right);
HXLINE( 615)		dir->normalize();
HXLINE( 616)		vup->normalize();
HXLINE( 618)		HX_VARI(  ::openfl::geom::Vector3D,dir2) = dir->clone();
HXLINE( 619)		dir2->scaleBy(vup->dotProduct(dir));
HXLINE( 621)		vup = vup->subtract(dir2);
HXLINE( 623)		if ((vup->get_length() > (int)0)) {
HXLINE( 625)			vup->normalize();
            		}
            		else {
HXLINE( 629)			if ((dir->x != (int)0)) {
HXLINE( 631)				vup =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,-(dir->y),dir->x,(int)0,null());
            			}
            			else {
HXLINE( 635)				vup =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null());
            			}
            		}
HXLINE( 641)		right = vup->crossProduct(dir);
HXLINE( 642)		right->normalize();
HXLINE( 644)		this->rawData->set((int)0,right->x);
HXLINE( 645)		this->rawData->set((int)4,right->y);
HXLINE( 646)		this->rawData->set((int)8,right->z);
HXLINE( 647)		this->rawData->set((int)12,((Float)0.0));
HXLINE( 648)		this->rawData->set((int)1,vup->x);
HXLINE( 649)		this->rawData->set((int)5,vup->y);
HXLINE( 650)		this->rawData->set((int)9,vup->z);
HXLINE( 651)		this->rawData->set((int)13,((Float)0.0));
HXLINE( 652)		this->rawData->set((int)2,dir->x);
HXLINE( 653)		this->rawData->set((int)6,dir->y);
HXLINE( 654)		this->rawData->set((int)10,dir->z);
HXLINE( 655)		this->rawData->set((int)14,((Float)0.0));
HXLINE( 656)		this->rawData->set((int)3,pos->x);
HXLINE( 657)		this->rawData->set((int)7,pos->y);
HXLINE( 658)		this->rawData->set((int)11,pos->z);
HXLINE( 659)		this->rawData->set((int)15,((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,pointAt,(void))

void Matrix3D_obj::prepend( ::openfl::geom::Matrix3D rhs){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_664_prepend)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rhs,"rhs")
HXLINE( 666)		HX_VARI( Float,m111) = rhs->rawData->get((int)0);
HXDLIN( 666)		HX_VARI( Float,m121) = rhs->rawData->get((int)4);
HXDLIN( 666)		HX_VARI( Float,m131) = rhs->rawData->get((int)8);
HXDLIN( 666)		HX_VARI( Float,m141) = rhs->rawData->get((int)12);
HXDLIN( 666)		HX_VARI( Float,m112) = rhs->rawData->get((int)1);
HXDLIN( 666)		HX_VARI( Float,m122) = rhs->rawData->get((int)5);
HXDLIN( 666)		HX_VARI( Float,m132) = rhs->rawData->get((int)9);
HXDLIN( 666)		HX_VARI( Float,m142) = rhs->rawData->get((int)13);
HXDLIN( 666)		HX_VARI( Float,m113) = rhs->rawData->get((int)2);
HXDLIN( 666)		HX_VARI( Float,m123) = rhs->rawData->get((int)6);
HXDLIN( 666)		HX_VARI( Float,m133) = rhs->rawData->get((int)10);
HXDLIN( 666)		HX_VARI( Float,m143) = rhs->rawData->get((int)14);
HXDLIN( 666)		HX_VARI( Float,m114) = rhs->rawData->get((int)3);
HXDLIN( 666)		HX_VARI( Float,m124) = rhs->rawData->get((int)7);
HXDLIN( 666)		HX_VARI( Float,m134) = rhs->rawData->get((int)11);
HXDLIN( 666)		HX_VARI( Float,m144) = rhs->rawData->get((int)15);
HXDLIN( 666)		HX_VARI( Float,m211) = this->rawData->get((int)0);
HXDLIN( 666)		HX_VARI( Float,m221) = this->rawData->get((int)4);
HXDLIN( 666)		HX_VARI( Float,m231) = this->rawData->get((int)8);
HXDLIN( 666)		HX_VARI( Float,m241) = this->rawData->get((int)12);
HXDLIN( 666)		HX_VARI( Float,m212) = this->rawData->get((int)1);
HXDLIN( 666)		HX_VARI( Float,m222) = this->rawData->get((int)5);
HXDLIN( 666)		HX_VARI( Float,m232) = this->rawData->get((int)9);
HXDLIN( 666)		HX_VARI( Float,m242) = this->rawData->get((int)13);
HXDLIN( 666)		HX_VARI( Float,m213) = this->rawData->get((int)2);
HXDLIN( 666)		HX_VARI( Float,m223) = this->rawData->get((int)6);
HXDLIN( 666)		HX_VARI( Float,m233) = this->rawData->get((int)10);
HXDLIN( 666)		HX_VARI( Float,m243) = this->rawData->get((int)14);
HXDLIN( 666)		HX_VARI( Float,m214) = this->rawData->get((int)3);
HXDLIN( 666)		HX_VARI( Float,m224) = this->rawData->get((int)7);
HXDLIN( 666)		HX_VARI( Float,m234) = this->rawData->get((int)11);
HXDLIN( 666)		HX_VARI( Float,m244) = this->rawData->get((int)15);
HXLINE( 675)		this->rawData->set((int)0,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
HXLINE( 676)		this->rawData->set((int)1,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
HXLINE( 677)		this->rawData->set((int)2,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
HXLINE( 678)		this->rawData->set((int)3,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
HXLINE( 680)		this->rawData->set((int)4,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
HXLINE( 681)		this->rawData->set((int)5,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
HXLINE( 682)		this->rawData->set((int)6,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
HXLINE( 683)		this->rawData->set((int)7,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
HXLINE( 685)		this->rawData->set((int)8,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
HXLINE( 686)		this->rawData->set((int)9,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
HXLINE( 687)		this->rawData->set((int)10,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
HXLINE( 688)		this->rawData->set((int)11,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
HXLINE( 690)		this->rawData->set((int)12,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
HXLINE( 691)		this->rawData->set((int)13,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
HXLINE( 692)		this->rawData->set((int)14,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
HXLINE( 693)		this->rawData->set((int)15,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,prepend,(void))

void Matrix3D_obj::prependRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_698_prependRotation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE( 700)		HX_VAR( Float,tx);
HXDLIN( 700)		HX_VAR( Float,ty);
HXDLIN( 700)		HX_VARI( Float,tz) = (int)0;
HXLINE( 701)		ty = tz;
HXDLIN( 701)		tx = ty;
HXLINE( 702)		if (hx::IsNotNull( pivotPoint )) {
HXLINE( 703)			tx = pivotPoint->x;
HXLINE( 704)			ty = pivotPoint->y;
HXLINE( 705)			tz = pivotPoint->z;
            		}
HXLINE( 707)		HX_VARI( Float,radian) = ((Float)(degrees * ::Math_obj::PI) / (Float)(int)180);
HXLINE( 708)		HX_VARI( Float,cos) = ::Math_obj::cos(radian);
HXLINE( 709)		HX_VARI( Float,sin) = ::Math_obj::sin(radian);
HXLINE( 710)		HX_VARI( Float,x) = axis->x;
HXLINE( 711)		HX_VARI( Float,y) = axis->y;
HXLINE( 712)		HX_VARI( Float,z) = axis->z;
HXLINE( 713)		HX_VARI( Float,x2) = (x * x);
HXLINE( 714)		HX_VARI( Float,y2) = (y * y);
HXLINE( 715)		HX_VARI( Float,z2) = (z * z);
HXLINE( 716)		HX_VARI( Float,ls) = ((x2 + y2) + z2);
HXLINE( 717)		if ((ls != (int)0)) {
HXLINE( 718)			HX_VARI( Float,l) = ::Math_obj::sqrt(ls);
HXLINE( 719)			x = ((Float)x / (Float)l);
HXLINE( 720)			y = ((Float)y / (Float)l);
HXLINE( 721)			z = ((Float)z / (Float)l);
HXLINE( 722)			x2 = ((Float)x2 / (Float)ls);
HXLINE( 723)			y2 = ((Float)y2 / (Float)ls);
HXLINE( 724)			z2 = ((Float)z2 / (Float)ls);
            		}
HXLINE( 726)		HX_VARI( Float,ccos) = ((int)1 - cos);
HXLINE( 727)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 728)		HX_VARI(  ::openfl::_Vector::FloatVector,d) = m->rawData;
HXLINE( 729)		d->set((int)0,(x2 + ((y2 + z2) * cos)));
HXLINE( 730)		d->set((int)1,(((x * y) * ccos) + (z * sin)));
HXLINE( 731)		d->set((int)2,(((x * z) * ccos) - (y * sin)));
HXLINE( 732)		d->set((int)4,(((x * y) * ccos) - (z * sin)));
HXLINE( 733)		d->set((int)5,(y2 + ((x2 + z2) * cos)));
HXLINE( 734)		d->set((int)6,(((y * z) * ccos) + (x * sin)));
HXLINE( 735)		d->set((int)8,(((x * z) * ccos) + (y * sin)));
HXLINE( 736)		d->set((int)9,(((y * z) * ccos) - (x * sin)));
HXLINE( 737)		d->set((int)10,(z2 + ((x2 + y2) * cos)));
HXLINE( 738)		d->set((int)12,((((tx * (y2 + z2)) - (x * ((ty * y) + (tz * z)))) * ccos) + (((ty * z) - (tz * y)) * sin)));
HXLINE( 739)		d->set((int)13,((((ty * (x2 + z2)) - (y * ((tx * x) + (tz * z)))) * ccos) + (((tz * x) - (tx * z)) * sin)));
HXLINE( 740)		d->set((int)14,((((tz * (x2 + y2)) - (z * ((tx * x) + (ty * y)))) * ccos) + (((tx * y) - (ty * x)) * sin)));
HXLINE( 742)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependRotation,(void))

void Matrix3D_obj::prependScale(Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_749_prependScale)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE( 749)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 749)		int length = null();
HXDLIN( 749)		bool fixed = null();
HXDLIN( 749)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXDLIN( 749)		{
HXLINE( 749)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 749)			HX_VARI( int,_g) = a->length;
HXDLIN( 749)			while((_g1 < _g)){
HXLINE( 749)				_g1 = (_g1 + (int)1);
HXDLIN( 749)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 749)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 749)		this->prepend( ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependScale,(void))

void Matrix3D_obj::prependTranslation(Float x,Float y,Float z){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_754_prependTranslation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 756)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 757)		m->set_position( ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,x,y,z,null()));
HXLINE( 758)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependTranslation,(void))

bool Matrix3D_obj::recompose( ::openfl::_Vector::ObjectVector components, ::Dynamic orientationStyle){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_763_recompose)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(components,"components")
            	HX_STACK_ARG(orientationStyle,"orientationStyle")
HXLINE( 765)		bool _hx_tmp;
HXDLIN( 765)		bool _hx_tmp1;
HXDLIN( 765)		bool _hx_tmp2;
HXDLIN( 765)		if ((components->get_length() >= (int)3)) {
HXLINE( 765)			_hx_tmp2 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x == (int)0);
            		}
            		else {
HXLINE( 765)			_hx_tmp2 = true;
            		}
HXDLIN( 765)		if (!(_hx_tmp2)) {
HXLINE( 765)			_hx_tmp1 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 765)			_hx_tmp1 = true;
            		}
HXDLIN( 765)		if (!(_hx_tmp1)) {
HXLINE( 765)			_hx_tmp = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z == (int)0);
            		}
            		else {
HXLINE( 765)			_hx_tmp = true;
            		}
HXDLIN( 765)		if (_hx_tmp) {
HXLINE( 767)			return false;
            		}
HXLINE( 771)		if (hx::IsNull( orientationStyle )) {
HXLINE( 773)			orientationStyle = (int)1;
            		}
HXLINE( 777)		this->identity();
HXLINE( 779)		HX_VARI( ::Array< Float >,scale) = ::Array_obj< Float >::__new(0);
HXLINE( 780)		scale[(int)0] = (scale[(int)1] = (scale[(int)2] = components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x));
HXLINE( 781)		scale[(int)4] = (scale[(int)5] = (scale[(int)6] = components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y));
HXLINE( 782)		scale[(int)8] = (scale[(int)9] = (scale[(int)10] = components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z));
HXLINE( 784)		if (hx::IsNull( orientationStyle )) {
HXLINE( 814)			HX_VARI( Float,x) = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXLINE( 815)			HX_VARI( Float,y) = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXLINE( 816)			HX_VARI( Float,z) = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXLINE( 817)			HX_VARI( Float,w) = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->w;
HXLINE( 819)			if (hx::IsEq( orientationStyle,(int)0 )) {
HXLINE( 821)				x = (x * ::Math_obj::sin(((Float)w / (Float)(int)2)));
HXLINE( 822)				y = (y * ::Math_obj::sin(((Float)w / (Float)(int)2)));
HXLINE( 823)				z = (z * ::Math_obj::sin(((Float)w / (Float)(int)2)));
HXLINE( 824)				w = ::Math_obj::cos(((Float)w / (Float)(int)2));
            			}
HXLINE( 828)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)0,((((int)1 - (((int)2 * y) * y)) - (((int)2 * z) * z)) * scale->__get((int)0)));
HXLINE( 829)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)1,(((((int)2 * x) * y) + (((int)2 * w) * z)) * scale->__get((int)1)));
HXLINE( 830)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)2,(((((int)2 * x) * z) - (((int)2 * w) * y)) * scale->__get((int)2)));
HXLINE( 831)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)3,(int)0);
HXLINE( 832)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)4,(((((int)2 * x) * y) - (((int)2 * w) * z)) * scale->__get((int)4)));
HXLINE( 833)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)5,((((int)1 - (((int)2 * x) * x)) - (((int)2 * z) * z)) * scale->__get((int)5)));
HXLINE( 834)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)6,(((((int)2 * y) * z) + (((int)2 * w) * x)) * scale->__get((int)6)));
HXLINE( 835)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)7,(int)0);
HXLINE( 836)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)8,(((((int)2 * x) * z) + (((int)2 * w) * y)) * scale->__get((int)8)));
HXLINE( 837)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)9,(((((int)2 * y) * z) - (((int)2 * w) * x)) * scale->__get((int)9)));
HXLINE( 838)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)10,((((int)1 - (((int)2 * x) * x)) - (((int)2 * y) * y)) * scale->__get((int)10)));
HXLINE( 839)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)11,(int)0);
HXLINE( 840)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)12,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 841)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)13,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 842)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)14,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 843)			::openfl::_Vector::IVector_obj::set(this->rawData,(int)15,(int)1);
            		}
            		else {
HXLINE( 784)			if (hx::IsEq( orientationStyle,(int)1 )) {
HXLINE( 788)				HX_VARI( Float,cx) = ::Math_obj::cos(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 789)				HX_VARI( Float,cy) = ::Math_obj::cos(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 790)				HX_VARI( Float,cz) = ::Math_obj::cos(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 791)				HX_VARI( Float,sx) = ::Math_obj::sin(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 792)				HX_VARI( Float,sy) = ::Math_obj::sin(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 793)				HX_VARI( Float,sz) = ::Math_obj::sin(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 795)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)0,((cy * cz) * scale->__get((int)0)));
HXLINE( 796)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)1,((cy * sz) * scale->__get((int)1)));
HXLINE( 797)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)2,(-(sy) * scale->__get((int)2)));
HXLINE( 798)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)3,(int)0);
HXLINE( 799)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)4,((((sx * sy) * cz) - (cx * sz)) * scale->__get((int)4)));
HXLINE( 800)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)5,((((sx * sy) * sz) + (cx * cz)) * scale->__get((int)5)));
HXLINE( 801)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)6,((sx * cy) * scale->__get((int)6)));
HXLINE( 802)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)7,(int)0);
HXLINE( 803)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)8,((((cx * sy) * cz) + (sx * sz)) * scale->__get((int)8)));
HXLINE( 804)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)9,((((cx * sy) * sz) - (sx * cz)) * scale->__get((int)9)));
HXLINE( 805)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)10,((cx * cy) * scale->__get((int)10)));
HXLINE( 806)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)11,(int)0);
HXLINE( 807)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)12,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 808)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)13,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 809)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)14,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 810)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)15,(int)1);
            			}
            			else {
HXLINE( 814)				HX_VARI_NAME( Float,x1,"x") = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXLINE( 815)				HX_VARI_NAME( Float,y1,"y") = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXLINE( 816)				HX_VARI_NAME( Float,z1,"z") = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXLINE( 817)				HX_VARI_NAME( Float,w1,"w") = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->w;
HXLINE( 819)				if (hx::IsEq( orientationStyle,(int)0 )) {
HXLINE( 821)					x1 = (x1 * ::Math_obj::sin(((Float)w1 / (Float)(int)2)));
HXLINE( 822)					y1 = (y1 * ::Math_obj::sin(((Float)w1 / (Float)(int)2)));
HXLINE( 823)					z1 = (z1 * ::Math_obj::sin(((Float)w1 / (Float)(int)2)));
HXLINE( 824)					w1 = ::Math_obj::cos(((Float)w1 / (Float)(int)2));
            				}
HXLINE( 828)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)0,((((int)1 - (((int)2 * y1) * y1)) - (((int)2 * z1) * z1)) * scale->__get((int)0)));
HXLINE( 829)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)1,(((((int)2 * x1) * y1) + (((int)2 * w1) * z1)) * scale->__get((int)1)));
HXLINE( 830)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)2,(((((int)2 * x1) * z1) - (((int)2 * w1) * y1)) * scale->__get((int)2)));
HXLINE( 831)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)3,(int)0);
HXLINE( 832)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)4,(((((int)2 * x1) * y1) - (((int)2 * w1) * z1)) * scale->__get((int)4)));
HXLINE( 833)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)5,((((int)1 - (((int)2 * x1) * x1)) - (((int)2 * z1) * z1)) * scale->__get((int)5)));
HXLINE( 834)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)6,(((((int)2 * y1) * z1) + (((int)2 * w1) * x1)) * scale->__get((int)6)));
HXLINE( 835)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)7,(int)0);
HXLINE( 836)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)8,(((((int)2 * x1) * z1) + (((int)2 * w1) * y1)) * scale->__get((int)8)));
HXLINE( 837)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)9,(((((int)2 * y1) * z1) - (((int)2 * w1) * x1)) * scale->__get((int)9)));
HXLINE( 838)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)10,((((int)1 - (((int)2 * x1) * x1)) - (((int)2 * y1) * y1)) * scale->__get((int)10)));
HXLINE( 839)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)11,(int)0);
HXLINE( 840)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)12,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 841)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)13,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 842)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)14,components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 843)				::openfl::_Vector::IVector_obj::set(this->rawData,(int)15,(int)1);
            			}
            		}
HXLINE( 847)		if ((components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x == (int)0)) {
HXLINE( 849)			this->rawData->set((int)0,((Float)1e-15));
            		}
HXLINE( 853)		if ((components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0)) {
HXLINE( 855)			this->rawData->set((int)5,((Float)1e-15));
            		}
HXLINE( 859)		if ((components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z == (int)0)) {
HXLINE( 861)			this->rawData->set((int)10,((Float)1e-15));
            		}
HXLINE( 865)		bool _hx_tmp3;
HXDLIN( 865)		bool _hx_tmp4;
HXDLIN( 865)		if ((components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x != (int)0)) {
HXLINE( 865)			_hx_tmp4 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 865)			_hx_tmp4 = true;
            		}
HXDLIN( 865)		if (!(_hx_tmp4)) {
HXLINE( 865)			_hx_tmp3 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 865)			_hx_tmp3 = true;
            		}
HXDLIN( 865)		return !(_hx_tmp3);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,recompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::transformVector( ::openfl::geom::Vector3D v){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_870_transformVector)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 872)		HX_VARI( Float,x) = v->x;
HXLINE( 873)		HX_VARI( Float,y) = v->y;
HXLINE( 874)		HX_VARI( Float,z) = v->z;
HXLINE( 876)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,((((x * this->rawData->get((int)0)) + (y * this->rawData->get((int)4))) + (z * this->rawData->get((int)8))) + this->rawData->get((int)12)),((((x * this->rawData->get((int)1)) + (y * this->rawData->get((int)5))) + (z * this->rawData->get((int)9))) + this->rawData->get((int)13)),((((x * this->rawData->get((int)2)) + (y * this->rawData->get((int)6))) + (z * this->rawData->get((int)10))) + this->rawData->get((int)14)),((((x * this->rawData->get((int)3)) + (y * this->rawData->get((int)7))) + (z * this->rawData->get((int)11))) + this->rawData->get((int)15)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,transformVector,return )

void Matrix3D_obj::transformVectors( ::openfl::_Vector::FloatVector vin, ::openfl::_Vector::FloatVector vout){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_881_transformVectors)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vin,"vin")
            	HX_STACK_ARG(vout,"vout")
HXLINE( 883)		HX_VARI( int,i) = (int)0;
HXLINE( 884)		HX_VAR( Float,x);
HXDLIN( 884)		HX_VAR( Float,y);
HXDLIN( 884)		HX_VAR( Float,z);
HXLINE( 886)		while(((i + (int)3) <= vin->get_length())){
HXLINE( 888)			x = vin->get(i);
HXLINE( 889)			y = vin->get((i + (int)1));
HXLINE( 890)			z = vin->get((i + (int)2));
HXLINE( 892)			vout->set(i,((((x * this->rawData->get((int)0)) + (y * this->rawData->get((int)4))) + (z * this->rawData->get((int)8))) + this->rawData->get((int)12)));
HXLINE( 893)			vout->set((i + (int)1),((((x * this->rawData->get((int)1)) + (y * this->rawData->get((int)5))) + (z * this->rawData->get((int)9))) + this->rawData->get((int)13)));
HXLINE( 894)			vout->set((i + (int)2),((((x * this->rawData->get((int)2)) + (y * this->rawData->get((int)6))) + (z * this->rawData->get((int)10))) + this->rawData->get((int)14)));
HXLINE( 896)			i = (i + (int)3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,transformVectors,(void))

void Matrix3D_obj::transpose(){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_903_transpose)
            	HX_STACK_THIS(this)
HXLINE( 905)		HX_VARI(  ::openfl::_Vector::FloatVector,oRawData) = ( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) );
HXLINE( 906)		this->rawData->set((int)1,oRawData->get((int)4));
HXLINE( 907)		this->rawData->set((int)2,oRawData->get((int)8));
HXLINE( 908)		this->rawData->set((int)3,oRawData->get((int)12));
HXLINE( 909)		this->rawData->set((int)4,oRawData->get((int)1));
HXLINE( 910)		this->rawData->set((int)6,oRawData->get((int)9));
HXLINE( 911)		this->rawData->set((int)7,oRawData->get((int)13));
HXLINE( 912)		this->rawData->set((int)8,oRawData->get((int)2));
HXLINE( 913)		this->rawData->set((int)9,oRawData->get((int)6));
HXLINE( 914)		this->rawData->set((int)11,oRawData->get((int)14));
HXLINE( 915)		this->rawData->set((int)12,oRawData->get((int)3));
HXLINE( 916)		this->rawData->set((int)13,oRawData->get((int)7));
HXLINE( 917)		this->rawData->set((int)14,oRawData->get((int)11));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,transpose,(void))

Float Matrix3D_obj::get_determinant(){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_963_get_determinant)
            	HX_STACK_THIS(this)
HXLINE( 963)		return ((((((((this->rawData->get((int)0) * this->rawData->get((int)5)) - (this->rawData->get((int)4) * this->rawData->get((int)1))) * ((this->rawData->get((int)10) * this->rawData->get((int)15)) - (this->rawData->get((int)14) * this->rawData->get((int)11)))) - (((this->rawData->get((int)0) * this->rawData->get((int)9)) - (this->rawData->get((int)8) * this->rawData->get((int)1))) * ((this->rawData->get((int)6) * this->rawData->get((int)15)) - (this->rawData->get((int)14) * this->rawData->get((int)7))))) + (((this->rawData->get((int)0) * this->rawData->get((int)13)) - (this->rawData->get((int)12) * this->rawData->get((int)1))) * ((this->rawData->get((int)6) * this->rawData->get((int)11)) - (this->rawData->get((int)10) * this->rawData->get((int)7))))) + (((this->rawData->get((int)4) * this->rawData->get((int)9)) - (this->rawData->get((int)8) * this->rawData->get((int)5))) * ((this->rawData->get((int)2) * this->rawData->get((int)15)) - (this->rawData->get((int)14) * this->rawData->get((int)3))))) - (((this->rawData->get((int)4) * this->rawData->get((int)13)) - (this->rawData->get((int)12) * this->rawData->get((int)5))) * ((this->rawData->get((int)2) * this->rawData->get((int)11)) - (this->rawData->get((int)10) * this->rawData->get((int)3))))) + (((this->rawData->get((int)8) * this->rawData->get((int)13)) - (this->rawData->get((int)12) * this->rawData->get((int)9))) * ((this->rawData->get((int)2) * this->rawData->get((int)7)) - (this->rawData->get((int)6) * this->rawData->get((int)3)))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_determinant,return )

 ::openfl::geom::Vector3D Matrix3D_obj::get_position(){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_975_get_position)
            	HX_STACK_THIS(this)
HXLINE( 975)		return  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,this->rawData->get((int)12),this->rawData->get((int)13),this->rawData->get((int)14),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_position,return )

 ::openfl::geom::Vector3D Matrix3D_obj::set_position( ::openfl::geom::Vector3D val){
            	HX_STACKFRAME(&_hx_pos_48294970c42d50e6_980_set_position)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(val,"val")
HXLINE( 982)		this->rawData->set((int)12,val->x);
HXLINE( 983)		this->rawData->set((int)13,val->y);
HXLINE( 984)		this->rawData->set((int)14,val->z);
HXLINE( 985)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,set_position,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::create2D(Float x,Float y,hx::Null< Float >  __o_scale,hx::Null< Float >  __o_rotation){
Float scale = __o_scale.Default(1);
Float rotation = __o_rotation.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_362_create2D)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(rotation,"rotation")
HXLINE( 364)		HX_VARI( Float,theta) = ((Float)(rotation * ::Math_obj::PI) / (Float)((Float)180.0));
HXLINE( 365)		HX_VARI( Float,c) = ::Math_obj::cos(theta);
HXLINE( 366)		HX_VARI( Float,s) = ::Math_obj::sin(theta);
HXLINE( 368)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::__new(16)->init(0,(c * scale))->init(1,(-(s) * scale))->init(2,(int)0)->init(3,(int)0)->init(4,(s * scale))->init(5,(c * scale))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,x)->init(13,y)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 368)		int length = null();
HXDLIN( 368)		bool fixed = null();
HXDLIN( 368)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXDLIN( 368)		{
HXLINE( 368)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 368)			HX_VARI( int,_g) = a->length;
HXDLIN( 368)			while((_g1 < _g)){
HXLINE( 368)				_g1 = (_g1 + (int)1);
HXDLIN( 368)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 368)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 368)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,create2D,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createABCD(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_375_createABCD)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 375)		HX_VARI_NAME( ::Array< Float >,a1,"a") = ::Array_obj< Float >::__new(16)->init(0,a)->init(1,b)->init(2,(int)0)->init(3,(int)0)->init(4,c)->init(5,d)->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,tx)->init(13,ty)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 375)		int length = null();
HXDLIN( 375)		bool fixed = null();
HXDLIN( 375)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXDLIN( 375)		{
HXLINE( 375)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 375)			HX_VARI( int,_g) = a1->length;
HXDLIN( 375)			while((_g1 < _g)){
HXLINE( 375)				_g1 = (_g1 + (int)1);
HXDLIN( 375)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 375)				vector->set(i,a1->__get(i));
            			}
            		}
HXDLIN( 375)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createABCD,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createOrtho(Float x0,Float x1,Float y0,Float y1,Float zNear,Float zFar){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_380_createOrtho)
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(zNear,"zNear")
            	HX_STACK_ARG(zFar,"zFar")
HXLINE( 382)		HX_VARI( Float,sx) = ((Float)((Float)1.0) / (Float)(x1 - x0));
HXLINE( 383)		HX_VARI( Float,sy) = ((Float)((Float)1.0) / (Float)(y1 - y0));
HXLINE( 384)		HX_VARI( Float,sz) = ((Float)((Float)1.0) / (Float)(zFar - zNear));
HXLINE( 386)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::__new(16)->init(0,(((Float)2.0) * sx))->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(((Float)2.0) * sy))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(((Float)-2.0) * sz))->init(11,(int)0)->init(12,(-((x0 + x1)) * sx))->init(13,(-((y0 + y1)) * sy))->init(14,(-((zNear + zFar)) * sz))->init(15,(int)1);
HXDLIN( 386)		int length = null();
HXDLIN( 386)		bool fixed = null();
HXDLIN( 386)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXDLIN( 386)		{
HXLINE( 386)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 386)			HX_VARI( int,_g) = a->length;
HXDLIN( 386)			while((_g1 < _g)){
HXLINE( 386)				_g1 = (_g1 + (int)1);
HXDLIN( 386)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 386)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 386)		return  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createOrtho,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::interpolate( ::openfl::geom::Matrix3D thisMat, ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_533_interpolate)
            	HX_STACK_ARG(thisMat,"thisMat")
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 535)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 537)		{
HXLINE( 537)			HX_VARI( int,_g) = (int)0;
HXDLIN( 537)			while((_g < (int)16)){
HXLINE( 537)				_g = (_g + (int)1);
HXDLIN( 537)				HX_VARI( int,i) = (_g - (int)1);
HXLINE( 539)				m->rawData->set(i,(thisMat->rawData->get(i) + ((toMat->rawData->get(i) - thisMat->rawData->get(i)) * percent)));
            			}
            		}
HXLINE( 543)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,interpolate,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::_hx___getAxisRotation(Float x,Float y,Float z,Float degrees){
            	HX_GC_STACKFRAME(&_hx_pos_48294970c42d50e6_922___getAxisRotation)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(degrees,"degrees")
HXLINE( 924)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__alloc( HX_CTX ,null());
HXLINE( 926)		HX_VARI(  ::openfl::geom::Vector3D,a1) =  ::openfl::geom::Vector3D_obj::__alloc( HX_CTX ,x,y,z,null());
HXLINE( 927)		HX_VARI( Float,rad) = (-(degrees) * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 928)		HX_VARI( Float,c) = ::Math_obj::cos(rad);
HXLINE( 929)		HX_VARI( Float,s) = ::Math_obj::sin(rad);
HXLINE( 930)		HX_VARI( Float,t) = (((Float)1.0) - c);
HXLINE( 932)		m->rawData->set((int)0,(c + ((a1->x * a1->x) * t)));
HXLINE( 933)		m->rawData->set((int)5,(c + ((a1->y * a1->y) * t)));
HXLINE( 934)		m->rawData->set((int)10,(c + ((a1->z * a1->z) * t)));
HXLINE( 936)		HX_VARI( Float,tmp1) = ((a1->x * a1->y) * t);
HXLINE( 937)		HX_VARI( Float,tmp2) = (a1->z * s);
HXLINE( 938)		m->rawData->set((int)4,(tmp1 + tmp2));
HXLINE( 939)		m->rawData->set((int)1,(tmp1 - tmp2));
HXLINE( 940)		tmp1 = ((a1->x * a1->z) * t);
HXLINE( 941)		tmp2 = (a1->y * s);
HXLINE( 942)		m->rawData->set((int)8,(tmp1 - tmp2));
HXLINE( 943)		m->rawData->set((int)2,(tmp1 + tmp2));
HXLINE( 944)		tmp1 = ((a1->y * a1->z) * t);
HXLINE( 945)		tmp2 = (a1->x * s);
HXLINE( 946)		m->rawData->set((int)9,(tmp1 + tmp2));
HXLINE( 947)		m->rawData->set((int)6,(tmp1 - tmp2));
HXLINE( 949)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,_hx___getAxisRotation,return )


hx::ObjectPtr< Matrix3D_obj > Matrix3D_obj::__new( ::openfl::_Vector::FloatVector v) {
	hx::ObjectPtr< Matrix3D_obj > __this = new Matrix3D_obj();
	__this->__construct(v);
	return __this;
}

hx::ObjectPtr< Matrix3D_obj > Matrix3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::_Vector::FloatVector v) {
	Matrix3D_obj *__this = (Matrix3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Matrix3D_obj), true, "openfl.geom.Matrix3D"));
	*(void **)__this = Matrix3D_obj::_hx_vtable;
	__this->__construct(v);
	return __this;
}

Matrix3D_obj::Matrix3D_obj()
{
}

void Matrix3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Matrix3D);
	HX_MARK_MEMBER_NAME(rawData,"rawData");
	HX_MARK_END_CLASS();
}

void Matrix3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rawData,"rawData");
}

hx::Val Matrix3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn()); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { return hx::Val( rawData); }
		if (HX_FIELD_EQ(inName,"pointAt") ) { return hx::Val( pointAt_dyn()); }
		if (HX_FIELD_EQ(inName,"prepend") ) { return hx::Val( prepend_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_position()); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn()); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn()); }
		if (HX_FIELD_EQ(inName,"recompose") ) { return hx::Val( recompose_dyn()); }
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"determinant") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_determinant()); }
		if (HX_FIELD_EQ(inName,"appendScale") ) { return hx::Val( appendScale_dyn()); }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn()); }
		if (HX_FIELD_EQ(inName,"prependScale") ) { return hx::Val( prependScale_dyn()); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyRawDataTo") ) { return hx::Val( copyRawDataTo_dyn()); }
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { return hx::Val( interpolateTo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { return hx::Val( appendRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"copyToMatrix3D") ) { return hx::Val( copyToMatrix3D_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"copyRawDataFrom") ) { return hx::Val( copyRawDataFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"prependRotation") ) { return hx::Val( prependRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return hx::Val( transformVector_dyn()); }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { return hx::Val( get_determinant_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { return hx::Val( transformVectors_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { return hx::Val( appendTranslation_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { return hx::Val( prependTranslation_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { return hx::Val( deltaTransformVector_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createABCD") ) { outValue = createABCD_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__getAxisRotation") ) { outValue = _hx___getAxisRotation_dyn(); return true; }
	}
	return false;
}

hx::Val Matrix3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { rawData=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("determinant","\x95","\x5d","\x15","\x32"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(Matrix3D_obj,rawData),HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Matrix3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Matrix3D_obj_sMemberFields[] = {
	HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("appendRotation","\x38","\x45","\xe8","\xcb"),
	HX_HCSTRING("appendScale","\x50","\x66","\x45","\xb5"),
	HX_HCSTRING("appendTranslation","\x37","\xe1","\x3d","\xd6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRawDataFrom","\x07","\x7d","\xbd","\x2c"),
	HX_HCSTRING("copyRawDataTo","\xd8","\x2b","\xf7","\xa8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("copyToMatrix3D","\xe2","\x1d","\x1f","\x04"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("interpolateTo","\x9c","\x90","\x22","\x71"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("pointAt","\x63","\xa1","\x21","\x51"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("recompose","\xbf","\x81","\xdb","\x03"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformVectors","\x44","\xba","\x12","\x8a"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	::String(null()) };

static void Matrix3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix3D_obj::__mClass,"__mClass");
};

#endif

hx::Class Matrix3D_obj::__mClass;

static ::String Matrix3D_obj_sStaticFields[] = {
	HX_HCSTRING("create2D","\xce","\x49","\xf4","\x2b"),
	HX_HCSTRING("createABCD","\xbe","\xc2","\xdd","\x52"),
	HX_HCSTRING("createOrtho","\x9c","\x4e","\xa8","\x5e"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("__getAxisRotation","\x95","\xa5","\x44","\x7b"),
	::String(null())
};

void Matrix3D_obj::__register()
{
	hx::Object *dummy = new Matrix3D_obj;
	Matrix3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Matrix3D","\xe6","\x93","\x2e","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace geom
