// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTilemap
#include <openfl/_internal/renderer/cairo/CairoTilemap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_display__Tileset_TileData
#include <openfl/display/_Tileset/TileData.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a3e299adbe0f9dae_25_render,"openfl._internal.renderer.cairo.CairoTilemap","render",0xc7ad047d,"openfl._internal.renderer.cairo.CairoTilemap.render","openfl/_internal/renderer/cairo/CairoTilemap.hx",25,0x8aa306f7)
namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoTilemap_obj::__construct() { }

Dynamic CairoTilemap_obj::__CreateEmpty() { return new CairoTilemap_obj; }

void *CairoTilemap_obj::_hx_vtable = 0;

Dynamic CairoTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoTilemap_obj > _hx_result = new CairoTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CairoTilemap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x039e5af7;
}

void CairoTilemap_obj::render( ::openfl::display::Tilemap tilemap, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_a3e299adbe0f9dae_25_render)
            	HX_STACK_ARG(tilemap,"tilemap")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(  27)		bool _hx_tmp;
HXDLIN(  27)		bool _hx_tmp1;
HXDLIN(  27)		if (!(!(tilemap->_hx___renderable))) {
HXLINE(  27)			_hx_tmp1 = (tilemap->_hx___tiles->length == (int)0);
            		}
            		else {
HXLINE(  27)			_hx_tmp1 = true;
            		}
HXDLIN(  27)		if (!(_hx_tmp1)) {
HXLINE(  27)			_hx_tmp = (tilemap->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(  27)			_hx_tmp = true;
            		}
HXDLIN(  27)		if (_hx_tmp) {
HXLINE(  27)			return;
            		}
HXLINE(  29)		HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(  31)		renderSession->maskManager->pushObject(tilemap,null());
HXLINE(  33)		HX_VARI(  ::openfl::geom::Rectangle,rect) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE(  34)		rect->setTo((int)0,(int)0,tilemap->_hx___width,tilemap->_hx___height);
HXLINE(  35)		renderSession->maskManager->pushRect(rect,tilemap->_hx___renderTransform);
HXLINE(  37)		HX_VARI(  ::openfl::geom::Matrix,transform) = tilemap->_hx___renderTransform;
HXLINE(  38)		HX_VARI( bool,roundPixels) = renderSession->roundPixels;
HXLINE(  40)		HX_VARI(  ::openfl::display::Tileset,defaultTileset) = tilemap->tileset;
HXLINE(  41)		HX_VARI(  ::openfl::display::BitmapData,cacheBitmapData) = null();
HXLINE(  42)		HX_VARI(  ::Dynamic,surface) = null();
HXLINE(  43)		HX_VARI(  ::Dynamic,pattern) = null();
HXLINE(  45)		HX_VAR( ::Array< ::Dynamic>,tiles);
HXDLIN(  45)		HX_VAR( int,count);
HXDLIN(  45)		HX_VAR(  ::openfl::display::Tile,tile);
HXDLIN(  45)		HX_VAR( Float,alpha);
HXDLIN(  45)		HX_VAR( bool,visible);
HXDLIN(  45)		HX_VAR(  ::openfl::display::Tileset,tileset);
HXDLIN(  45)		HX_VAR(  ::openfl::display::_Tileset::TileData,tileData);
HXDLIN(  45)		HX_VAR(  ::openfl::display::BitmapData,bitmapData);
HXLINE(  47)		tiles = tilemap->_hx___tiles;
HXLINE(  48)		count = tiles->length;
HXLINE(  50)		HX_VARI(  ::lime::math::Matrix3,matrix) =  ::lime::math::Matrix3_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE(  51)		HX_VARI(  ::openfl::geom::Matrix,tileTransform) = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE(  53)		{
HXLINE(  53)			HX_VARI( int,_g1) = (int)0;
HXDLIN(  53)			while((_g1 < count)){
HXLINE(  53)				_g1 = (_g1 + (int)1);
HXLINE(  55)				tile = tiles->__get((_g1 - (int)1)).StaticCast<  ::openfl::display::Tile >();
HXLINE(  57)				alpha = tile->alpha;
HXLINE(  58)				visible = tile->visible;
HXLINE(  60)				bool _hx_tmp2;
HXDLIN(  60)				if (!(!(visible))) {
HXLINE(  60)					_hx_tmp2 = (alpha <= (int)0);
            				}
            				else {
HXLINE(  60)					_hx_tmp2 = true;
            				}
HXDLIN(  60)				if (_hx_tmp2) {
HXLINE(  60)					continue;
            				}
HXLINE(  62)				if (hx::IsNotNull( tile->tileset )) {
HXLINE(  62)					tileset = tile->tileset;
            				}
            				else {
HXLINE(  62)					tileset = defaultTileset;
            				}
HXLINE(  64)				if (hx::IsNull( tileset )) {
HXLINE(  64)					continue;
            				}
HXLINE(  66)				tileData = tileset->_hx___data->__get(tile->id).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXLINE(  68)				if (hx::IsNull( tileData )) {
HXLINE(  68)					continue;
            				}
HXLINE(  70)				bitmapData = tileset->bitmapData;
HXLINE(  72)				if (hx::IsNull( bitmapData )) {
HXLINE(  72)					continue;
            				}
HXLINE(  74)				if (hx::IsNotEq( bitmapData,cacheBitmapData )) {
HXLINE(  76)					surface = bitmapData->getSurface();
HXLINE(  77)					pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE(  78)					int _hx_tmp3;
HXDLIN(  78)					bool _hx_tmp4;
HXDLIN(  78)					if (renderSession->allowSmoothing) {
HXLINE(  78)						_hx_tmp4 = tilemap->smoothing;
            					}
            					else {
HXLINE(  78)						_hx_tmp4 = false;
            					}
HXDLIN(  78)					if (_hx_tmp4) {
HXLINE(  78)						_hx_tmp3 = (int)1;
            					}
            					else {
HXLINE(  78)						_hx_tmp3 = (int)3;
            					}
HXDLIN(  78)					::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXLINE(  80)					cairo->set_source(pattern);
HXLINE(  81)					cacheBitmapData = bitmapData;
            				}
HXLINE(  85)				tileTransform->copyFrom(tile->matrix);
HXLINE(  86)				tileTransform->concat(transform);
HXLINE(  88)				if (roundPixels) {
HXLINE(  90)					tileTransform->tx = ::Math_obj::round(tileTransform->tx);
HXLINE(  91)					tileTransform->ty = ::Math_obj::round(tileTransform->ty);
            				}
HXLINE(  95)				cairo->set_matrix(tileTransform->_hx___toMatrix3());
HXLINE(  97)				matrix->tx = tileData->x;
HXLINE(  98)				matrix->ty = tileData->y;
HXLINE(  99)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(pattern,matrix);
HXLINE( 100)				cairo->set_source(pattern);
HXLINE( 102)				cairo->save();
HXLINE( 104)				cairo->newPath();
HXLINE( 105)				cairo->rectangle((int)0,(int)0,tileData->width,tileData->height);
HXLINE( 106)				cairo->clip();
HXLINE( 108)				bool _hx_tmp5;
HXDLIN( 108)				if ((tilemap->_hx___worldAlpha == (int)1)) {
HXLINE( 108)					_hx_tmp5 = (alpha == (int)1);
            				}
            				else {
HXLINE( 108)					_hx_tmp5 = false;
            				}
HXDLIN( 108)				if (_hx_tmp5) {
HXLINE( 110)					cairo->paint();
            				}
            				else {
HXLINE( 114)					cairo->paintWithAlpha((tilemap->_hx___worldAlpha * alpha));
            				}
HXLINE( 118)				cairo->restore();
            			}
            		}
HXLINE( 122)		renderSession->maskManager->popRect();
HXLINE( 123)		renderSession->maskManager->popObject(tilemap,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoTilemap_obj,render,(void))


CairoTilemap_obj::CairoTilemap_obj()
{
}

bool CairoTilemap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoTilemap_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CairoTilemap_obj_sStaticStorageInfo = 0;
#endif

static void CairoTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoTilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoTilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class CairoTilemap_obj::__mClass;

static ::String CairoTilemap_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null())
};

void CairoTilemap_obj::__register()
{
	hx::Object *dummy = new CairoTilemap_obj;
	CairoTilemap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoTilemap","\x67","\xa8","\x88","\x15");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoTilemap_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CairoTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoTilemap_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
