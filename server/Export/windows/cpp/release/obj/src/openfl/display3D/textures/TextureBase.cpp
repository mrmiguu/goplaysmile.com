// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6659164148434b5e_18_new,"openfl.display3D.textures.TextureBase","new",0x670078a1,"openfl.display3D.textures.TextureBase.new","openfl/display3D/textures/TextureBase.hx",18,0x7b0f92ae)
HX_DEFINE_STACK_FRAME(_hx_pos_6659164148434b5e_87_dispose,"openfl.display3D.textures.TextureBase","dispose",0xa678dd60,"openfl.display3D.textures.TextureBase.dispose","openfl/display3D/textures/TextureBase.hx",87,0x7b0f92ae)
HX_DEFINE_STACK_FRAME(_hx_pos_6659164148434b5e_134___getImage,"openfl.display3D.textures.TextureBase","__getImage",0x67fff3e4,"openfl.display3D.textures.TextureBase.__getImage","openfl/display3D/textures/TextureBase.hx",134,0x7b0f92ae)
HX_DEFINE_STACK_FRAME(_hx_pos_6659164148434b5e_196___getTexture,"openfl.display3D.textures.TextureBase","__getTexture",0x3c3c91a4,"openfl.display3D.textures.TextureBase.__getTexture","openfl/display3D/textures/TextureBase.hx",196,0x7b0f92ae)
HX_DEFINE_STACK_FRAME(_hx_pos_6659164148434b5e_203___setSamplerState,"openfl.display3D.textures.TextureBase","__setSamplerState",0x8e361f8c,"openfl.display3D.textures.TextureBase.__setSamplerState","openfl/display3D/textures/TextureBase.hx",203,0x7b0f92ae)
HX_DEFINE_STACK_FRAME(_hx_pos_6659164148434b5e_230___trackCompressedMemoryUsage,"openfl.display3D.textures.TextureBase","__trackCompressedMemoryUsage",0x1551bb93,"openfl.display3D.textures.TextureBase.__trackCompressedMemoryUsage","openfl/display3D/textures/TextureBase.hx",230,0x7b0f92ae)
HX_DEFINE_STACK_FRAME(_hx_pos_6659164148434b5e_254___trackMemoryUsage,"openfl.display3D.textures.TextureBase","__trackMemoryUsage",0xc7a62994,"openfl.display3D.textures.TextureBase.__trackMemoryUsage","openfl/display3D/textures/TextureBase.hx",254,0x7b0f92ae)
namespace openfl{
namespace display3D{
namespace textures{

void TextureBase_obj::__construct( ::openfl::display3D::Context3D context,int target){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_18_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(context,"context")
            	HX_STACK_ARG(target,"target")
HXLINE(  31)		this->_hx___outputTextureMemoryUsage = false;
HXLINE(  41)		super::__construct(null());
HXLINE(  43)		this->_hx___context = context;
HXLINE(  44)		this->_hx___textureTarget = target;
HXLINE(  46)		this->_hx___textureID = ::lime::graphics::opengl::GL_obj::context->createTexture();
HXLINE(  60)		if (hx::IsNull( ::openfl::display3D::textures::TextureBase_obj::_hx___isGLES )) {
HXLINE(  62)			HX_VARI( ::String,version) = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7938)) );
HXLINE(  64)			if (hx::IsNull( version )) {
HXLINE(  66)				::openfl::display3D::textures::TextureBase_obj::_hx___isGLES = false;
            			}
            			else {
HXLINE(  70)				bool _hx_tmp;
HXDLIN(  70)				if ((version.indexOf(HX_("OpenGL ES",5f,cb,92,95),null()) > (int)-1)) {
HXLINE(  70)					_hx_tmp = (version.indexOf(HX_("WebGL",99,9f,e9,5a),null()) == (int)-1);
            				}
            				else {
HXLINE(  70)					_hx_tmp = false;
            				}
HXDLIN(  70)				::openfl::display3D::textures::TextureBase_obj::_hx___isGLES = _hx_tmp;
            			}
            		}
HXLINE(  76)		int _hx_tmp1;
HXDLIN(  76)		if (::openfl::display3D::textures::TextureBase_obj::_hx___isGLES) {
HXLINE(  76)			_hx_tmp1 = (int)32993;
            		}
            		else {
HXLINE(  76)			_hx_tmp1 = (int)6408;
            		}
HXDLIN(  76)		this->_hx___internalFormat = _hx_tmp1;
HXLINE(  77)		this->_hx___format = (int)32993;
HXLINE(  81)		this->_hx___memoryUsage = (int)0;
HXLINE(  82)		this->_hx___compressedMemoryUsage = (int)0;
            	}

Dynamic TextureBase_obj::__CreateEmpty() { return new TextureBase_obj; }

void *TextureBase_obj::_hx_vtable = 0;

Dynamic TextureBase_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextureBase_obj > _hx_result = new TextureBase_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TextureBase_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19affbf1) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x19affbf1;
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

void TextureBase_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_87_dispose)
            	HX_STACK_THIS(this)
HXLINE(  89)		if (hx::IsNotNull( this->_hx___alphaTexture )) {
HXLINE(  91)			this->_hx___alphaTexture->dispose();
            		}
HXLINE(  95)		::lime::graphics::opengl::GL_obj::context->deleteTexture(this->_hx___textureID);
HXLINE(  97)		if ((this->_hx___compressedMemoryUsage > (int)0)) {
HXLINE(  99)			this->_hx___context->_hx___statsDecrement((int)4);
HXLINE( 100)			this->_hx___context->_hx___statsSubtract((int)9,this->_hx___compressedMemoryUsage);
HXLINE( 110)			this->_hx___compressedMemoryUsage = (int)0;
            		}
HXLINE( 114)		if ((this->_hx___memoryUsage > (int)0)) {
HXLINE( 116)			this->_hx___context->_hx___statsDecrement((int)3);
HXLINE( 117)			this->_hx___context->_hx___statsSubtract((int)8,this->_hx___memoryUsage);
HXLINE( 127)			this->_hx___memoryUsage = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureBase_obj,dispose,(void))

 ::lime::graphics::Image TextureBase_obj::_hx___getImage( ::openfl::display::BitmapData bitmapData){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_134___getImage)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmapData,"bitmapData")
HXLINE( 136)		HX_VARI(  ::lime::graphics::Image,image) = bitmapData->image;
HXLINE( 138)		bool _hx_tmp;
HXDLIN( 138)		if (!(!(bitmapData->_hx___isValid))) {
HXLINE( 138)			_hx_tmp = hx::IsNull( image );
            		}
            		else {
HXLINE( 138)			_hx_tmp = true;
            		}
HXDLIN( 138)		if (_hx_tmp) {
HXLINE( 140)			return null();
            		}
HXLINE( 177)		bool _hx_tmp1;
HXDLIN( 177)		if (!(image->get_premultiplied())) {
HXLINE( 177)			_hx_tmp1 = image->get_transparent();
            		}
            		else {
HXLINE( 177)			_hx_tmp1 = false;
            		}
HXDLIN( 177)		if (_hx_tmp1) {
HXLINE( 179)			image = image->clone();
HXLINE( 180)			image->set_premultiplied(true);
            		}
HXLINE( 189)		return image;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureBase_obj,_hx___getImage,return )

 ::lime::graphics::opengl::GLTexture TextureBase_obj::_hx___getTexture(){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_196___getTexture)
            	HX_STACK_THIS(this)
HXLINE( 196)		return this->_hx___textureID;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureBase_obj,_hx___getTexture,return )

void TextureBase_obj::_hx___setSamplerState( ::openfl::_internal::stage3D::SamplerState state){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_203___setSamplerState)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(state,"state")
HXLINE( 203)		if (!(state->equals(this->_hx___samplerState))) {
HXLINE( 205)			::lime::graphics::opengl::GL_obj::context->bindTexture(this->_hx___textureTarget,this->_hx___textureID);
HXLINE( 206)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 207)			::lime::graphics::opengl::GL_obj::context->texParameteri(this->_hx___textureTarget,(int)10241,state->minFilter);
HXLINE( 208)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 209)			::lime::graphics::opengl::GL_obj::context->texParameteri(this->_hx___textureTarget,(int)10240,state->magFilter);
HXLINE( 210)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 211)			::lime::graphics::opengl::GL_obj::context->texParameteri(this->_hx___textureTarget,(int)10242,state->wrapModeS);
HXLINE( 212)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 213)			::lime::graphics::opengl::GL_obj::context->texParameteri(this->_hx___textureTarget,(int)10243,state->wrapModeT);
HXLINE( 214)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 223)			this->_hx___samplerState = state;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureBase_obj,_hx___setSamplerState,(void))

void TextureBase_obj::_hx___trackCompressedMemoryUsage(int memory){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_230___trackCompressedMemoryUsage)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(memory,"memory")
HXLINE( 232)		if ((this->_hx___compressedMemoryUsage == (int)0)) {
HXLINE( 234)			this->_hx___context->_hx___statsIncrement((int)4);
            		}
HXLINE( 238)		 ::openfl::display3D::textures::TextureBase _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 238)		_hx_tmp->_hx___compressedMemoryUsage = (_hx_tmp->_hx___compressedMemoryUsage + memory);
HXLINE( 239)		this->_hx___context->_hx___statsAdd((int)9,memory);
HXLINE( 249)		this->_hx___trackMemoryUsage(memory);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureBase_obj,_hx___trackCompressedMemoryUsage,(void))

void TextureBase_obj::_hx___trackMemoryUsage(int memory){
            	HX_STACKFRAME(&_hx_pos_6659164148434b5e_254___trackMemoryUsage)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(memory,"memory")
HXLINE( 256)		if ((this->_hx___memoryUsage == (int)0)) {
HXLINE( 258)			this->_hx___context->_hx___statsIncrement((int)3);
            		}
HXLINE( 262)		 ::openfl::display3D::textures::TextureBase _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 262)		_hx_tmp->_hx___memoryUsage = (_hx_tmp->_hx___memoryUsage + memory);
HXLINE( 263)		this->_hx___context->_hx___statsAdd((int)8,memory);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextureBase_obj,_hx___trackMemoryUsage,(void))

 ::Dynamic TextureBase_obj::_hx___isGLES;


hx::ObjectPtr< TextureBase_obj > TextureBase_obj::__new( ::openfl::display3D::Context3D context,int target) {
	hx::ObjectPtr< TextureBase_obj > __this = new TextureBase_obj();
	__this->__construct(context,target);
	return __this;
}

hx::ObjectPtr< TextureBase_obj > TextureBase_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display3D::Context3D context,int target) {
	TextureBase_obj *__this = (TextureBase_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextureBase_obj), true, "openfl.display3D.textures.TextureBase"));
	*(void **)__this = TextureBase_obj::_hx_vtable;
	__this->__construct(context,target);
	return __this;
}

TextureBase_obj::TextureBase_obj()
{
}

void TextureBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextureBase);
	HX_MARK_MEMBER_NAME(_hx___alphaTexture,"__alphaTexture");
	HX_MARK_MEMBER_NAME(_hx___compressedMemoryUsage,"__compressedMemoryUsage");
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___format,"__format");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___internalFormat,"__internalFormat");
	HX_MARK_MEMBER_NAME(_hx___memoryUsage,"__memoryUsage");
	HX_MARK_MEMBER_NAME(_hx___optimizeForRenderToTexture,"__optimizeForRenderToTexture");
	HX_MARK_MEMBER_NAME(_hx___outputTextureMemoryUsage,"__outputTextureMemoryUsage");
	HX_MARK_MEMBER_NAME(_hx___samplerState,"__samplerState");
	HX_MARK_MEMBER_NAME(_hx___streamingLevels,"__streamingLevels");
	HX_MARK_MEMBER_NAME(_hx___textureID,"__textureID");
	HX_MARK_MEMBER_NAME(_hx___textureTarget,"__textureTarget");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextureBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___alphaTexture,"__alphaTexture");
	HX_VISIT_MEMBER_NAME(_hx___compressedMemoryUsage,"__compressedMemoryUsage");
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___format,"__format");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___internalFormat,"__internalFormat");
	HX_VISIT_MEMBER_NAME(_hx___memoryUsage,"__memoryUsage");
	HX_VISIT_MEMBER_NAME(_hx___optimizeForRenderToTexture,"__optimizeForRenderToTexture");
	HX_VISIT_MEMBER_NAME(_hx___outputTextureMemoryUsage,"__outputTextureMemoryUsage");
	HX_VISIT_MEMBER_NAME(_hx___samplerState,"__samplerState");
	HX_VISIT_MEMBER_NAME(_hx___streamingLevels,"__streamingLevels");
	HX_VISIT_MEMBER_NAME(_hx___textureID,"__textureID");
	HX_VISIT_MEMBER_NAME(_hx___textureTarget,"__textureTarget");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextureBase_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__format") ) { return hx::Val( _hx___format); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__getImage") ) { return hx::Val( _hx___getImage_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__textureID") ) { return hx::Val( _hx___textureID); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__getTexture") ) { return hx::Val( _hx___getTexture_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__memoryUsage") ) { return hx::Val( _hx___memoryUsage); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__alphaTexture") ) { return hx::Val( _hx___alphaTexture); }
		if (HX_FIELD_EQ(inName,"__samplerState") ) { return hx::Val( _hx___samplerState); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureTarget") ) { return hx::Val( _hx___textureTarget); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__internalFormat") ) { return hx::Val( _hx___internalFormat); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__streamingLevels") ) { return hx::Val( _hx___streamingLevels); }
		if (HX_FIELD_EQ(inName,"__setSamplerState") ) { return hx::Val( _hx___setSamplerState_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__trackMemoryUsage") ) { return hx::Val( _hx___trackMemoryUsage_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__compressedMemoryUsage") ) { return hx::Val( _hx___compressedMemoryUsage); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__outputTextureMemoryUsage") ) { return hx::Val( _hx___outputTextureMemoryUsage); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__optimizeForRenderToTexture") ) { return hx::Val( _hx___optimizeForRenderToTexture); }
		if (HX_FIELD_EQ(inName,"__trackCompressedMemoryUsage") ) { return hx::Val( _hx___trackCompressedMemoryUsage_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextureBase_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__isGLES") ) { outValue = _hx___isGLES; return true; }
	}
	return false;
}

hx::Val TextureBase_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__format") ) { _hx___format=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__textureID") ) { _hx___textureID=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__memoryUsage") ) { _hx___memoryUsage=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__alphaTexture") ) { _hx___alphaTexture=inValue.Cast<  ::openfl::display3D::textures::Texture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerState") ) { _hx___samplerState=inValue.Cast<  ::openfl::_internal::stage3D::SamplerState >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__textureTarget") ) { _hx___textureTarget=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__internalFormat") ) { _hx___internalFormat=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__streamingLevels") ) { _hx___streamingLevels=inValue.Cast< int >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__compressedMemoryUsage") ) { _hx___compressedMemoryUsage=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__outputTextureMemoryUsage") ) { _hx___outputTextureMemoryUsage=inValue.Cast< bool >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__optimizeForRenderToTexture") ) { _hx___optimizeForRenderToTexture=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextureBase_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__isGLES") ) { _hx___isGLES=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void TextureBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__alphaTexture","\x3d","\x94","\x14","\x53"));
	outFields->push(HX_HCSTRING("__compressedMemoryUsage","\x3f","\xa0","\x58","\x95"));
	outFields->push(HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"));
	outFields->push(HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__internalFormat","\x74","\x81","\xbd","\x56"));
	outFields->push(HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5"));
	outFields->push(HX_HCSTRING("__optimizeForRenderToTexture","\xbe","\xd4","\x90","\xb3"));
	outFields->push(HX_HCSTRING("__outputTextureMemoryUsage","\xc6","\xcf","\x1a","\x71"));
	outFields->push(HX_HCSTRING("__samplerState","\x09","\x67","\x80","\xdc"));
	outFields->push(HX_HCSTRING("__streamingLevels","\x51","\xa1","\xde","\x07"));
	outFields->push(HX_HCSTRING("__textureID","\x56","\x7e","\x75","\xdd"));
	outFields->push(HX_HCSTRING("__textureTarget","\x6c","\xff","\xb6","\xa1"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextureBase_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::textures::Texture*/ ,(int)offsetof(TextureBase_obj,_hx___alphaTexture),HX_HCSTRING("__alphaTexture","\x3d","\x94","\x14","\x53")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___compressedMemoryUsage),HX_HCSTRING("__compressedMemoryUsage","\x3f","\xa0","\x58","\x95")},
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(TextureBase_obj,_hx___context),HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___format),HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___internalFormat),HX_HCSTRING("__internalFormat","\x74","\x81","\xbd","\x56")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___memoryUsage),HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5")},
	{hx::fsBool,(int)offsetof(TextureBase_obj,_hx___optimizeForRenderToTexture),HX_HCSTRING("__optimizeForRenderToTexture","\xbe","\xd4","\x90","\xb3")},
	{hx::fsBool,(int)offsetof(TextureBase_obj,_hx___outputTextureMemoryUsage),HX_HCSTRING("__outputTextureMemoryUsage","\xc6","\xcf","\x1a","\x71")},
	{hx::fsObject /*::openfl::_internal::stage3D::SamplerState*/ ,(int)offsetof(TextureBase_obj,_hx___samplerState),HX_HCSTRING("__samplerState","\x09","\x67","\x80","\xdc")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___streamingLevels),HX_HCSTRING("__streamingLevels","\x51","\xa1","\xde","\x07")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(TextureBase_obj,_hx___textureID),HX_HCSTRING("__textureID","\x56","\x7e","\x75","\xdd")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___textureTarget),HX_HCSTRING("__textureTarget","\x6c","\xff","\xb6","\xa1")},
	{hx::fsInt,(int)offsetof(TextureBase_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextureBase_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &TextureBase_obj::_hx___isGLES,HX_HCSTRING("__isGLES","\xdd","\x11","\xe5","\x09")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextureBase_obj_sMemberFields[] = {
	HX_HCSTRING("__alphaTexture","\x3d","\x94","\x14","\x53"),
	HX_HCSTRING("__compressedMemoryUsage","\x3f","\xa0","\x58","\x95"),
	HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"),
	HX_HCSTRING("__format","\x57","\xfa","\xbd","\xa5"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__internalFormat","\x74","\x81","\xbd","\x56"),
	HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5"),
	HX_HCSTRING("__optimizeForRenderToTexture","\xbe","\xd4","\x90","\xb3"),
	HX_HCSTRING("__outputTextureMemoryUsage","\xc6","\xcf","\x1a","\x71"),
	HX_HCSTRING("__samplerState","\x09","\x67","\x80","\xdc"),
	HX_HCSTRING("__streamingLevels","\x51","\xa1","\xde","\x07"),
	HX_HCSTRING("__textureID","\x56","\x7e","\x75","\xdd"),
	HX_HCSTRING("__textureTarget","\x6c","\xff","\xb6","\xa1"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("__getImage","\x05","\xa2","\x78","\xc0"),
	HX_HCSTRING("__getTexture","\x05","\xca","\xd5","\x26"),
	HX_HCSTRING("__setSamplerState","\x8b","\xe7","\xcf","\x5d"),
	HX_HCSTRING("__trackCompressedMemoryUsage","\xf4","\x85","\x3d","\x76"),
	HX_HCSTRING("__trackMemoryUsage","\xb5","\x60","\x9b","\x9e"),
	::String(null()) };

static void TextureBase_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextureBase_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextureBase_obj::_hx___isGLES,"__isGLES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextureBase_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextureBase_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextureBase_obj::_hx___isGLES,"__isGLES");
};

#endif

hx::Class TextureBase_obj::__mClass;

static ::String TextureBase_obj_sStaticFields[] = {
	HX_HCSTRING("__isGLES","\xdd","\x11","\xe5","\x09"),
	::String(null())
};

void TextureBase_obj::__register()
{
	hx::Object *dummy = new TextureBase_obj;
	TextureBase_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.textures.TextureBase","\x2f","\x94","\x15","\xbc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextureBase_obj::__GetStatic;
	__mClass->mSetStaticField = &TextureBase_obj::__SetStatic;
	__mClass->mMarkFunc = TextureBase_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextureBase_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextureBase_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextureBase_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextureBase_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureBase_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
} // end namespace textures
