// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_PerlinNoise
#include <openfl/_internal/utils/PerlinNoise.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

static const Int _hx_array_data_4[] = {
	(Int)151,(Int)160,(Int)137,(Int)91,(Int)90,(Int)15,(Int)131,(Int)13,(Int)201,(Int)95,(Int)96,(Int)53,(Int)194,(Int)233,(Int)7,(Int)225,(Int)140,(Int)36,(Int)103,(Int)30,(Int)69,(Int)142,(Int)8,(Int)99,(Int)37,(Int)240,(Int)21,(Int)10,(Int)23,(Int)190,(Int)6,(Int)148,(Int)247,(Int)120,(Int)234,(Int)75,(Int)0,(Int)26,(Int)197,(Int)62,(Int)94,(Int)252,(Int)219,(Int)203,(Int)117,(Int)35,(Int)11,(Int)32,(Int)57,(Int)177,(Int)33,(Int)88,(Int)237,(Int)149,(Int)56,(Int)87,(Int)174,(Int)20,(Int)125,(Int)136,(Int)171,(Int)168,(Int)68,(Int)175,(Int)74,(Int)165,(Int)71,(Int)134,(Int)139,(Int)48,(Int)27,(Int)166,(Int)77,(Int)146,(Int)158,(Int)231,(Int)83,(Int)111,(Int)229,(Int)122,(Int)60,(Int)211,(Int)133,(Int)230,(Int)220,(Int)105,(Int)92,(Int)41,(Int)55,(Int)46,(Int)245,(Int)40,(Int)244,(Int)102,(Int)143,(Int)54,(Int)65,(Int)25,(Int)63,(Int)161,(Int)1,(Int)216,(Int)80,(Int)73,(Int)209,(Int)76,(Int)132,(Int)187,(Int)208,(Int)89,(Int)18,(Int)169,(Int)200,(Int)196,(Int)135,(Int)130,(Int)116,(Int)188,(Int)159,(Int)86,(Int)164,(Int)100,(Int)109,(Int)198,(Int)173,(Int)186,(Int)3,(Int)64,(Int)52,(Int)217,(Int)226,(Int)250,(Int)124,(Int)123,(Int)5,(Int)202,(Int)38,(Int)147,(Int)118,(Int)126,(Int)255,(Int)82,(Int)85,(Int)212,(Int)207,(Int)206,(Int)59,(Int)227,(Int)47,(Int)16,(Int)58,(Int)17,(Int)182,(Int)189,(Int)28,(Int)42,(Int)223,(Int)183,(Int)170,(Int)213,(Int)119,(Int)248,(Int)152,(Int)2,(Int)44,(Int)154,(Int)163,(Int)70,(Int)221,(Int)153,(Int)101,(Int)155,(Int)167,(Int)43,(Int)172,(Int)9,(Int)129,(Int)22,(Int)39,(Int)253,(Int)19,(Int)98,(Int)108,(Int)110,(Int)79,(Int)113,(Int)224,(Int)232,(Int)178,(Int)185,(Int)112,(Int)104,(Int)218,(Int)246,(Int)97,(Int)228,(Int)251,(Int)34,(Int)242,(Int)193,(Int)238,(Int)210,(Int)144,(Int)12,(Int)191,(Int)179,(Int)162,(Int)241,(Int)81,(Int)51,(Int)145,(Int)235,(Int)249,(Int)14,(Int)239,(Int)107,(Int)49,(Int)192,(Int)214,(Int)31,(Int)181,(Int)199,(Int)106,(Int)157,(Int)184,(Int)84,(Int)204,(Int)176,(Int)115,(Int)121,(Int)50,(Int)45,(Int)127,(Int)4,(Int)150,(Int)254,(Int)138,(Int)236,(Int)205,(Int)93,(Int)222,(Int)114,(Int)67,(Int)29,(Int)24,(Int)72,(Int)243,(Int)141,(Int)128,(Int)195,(Int)78,(Int)66,(Int)215,(Int)61,(Int)156,(Int)180,(Int)151,(Int)160,(Int)137,(Int)91,(Int)90,(Int)15,(Int)131,(Int)13,(Int)201,(Int)95,(Int)96,(Int)53,(Int)194,(Int)233,(Int)7,(Int)225,(Int)140,(Int)36,(Int)103,(Int)30,(Int)69,(Int)142,(Int)8,(Int)99,(Int)37,(Int)240,(Int)21,(Int)10,(Int)23,(Int)190,(Int)6,(Int)148,(Int)247,(Int)120,(Int)234,(Int)75,(Int)0,(Int)26,(Int)197,(Int)62,(Int)94,(Int)252,(Int)219,(Int)203,(Int)117,(Int)35,(Int)11,(Int)32,(Int)57,(Int)177,(Int)33,(Int)88,(Int)237,(Int)149,(Int)56,(Int)87,(Int)174,(Int)20,(Int)125,(Int)136,(Int)171,(Int)168,(Int)68,(Int)175,(Int)74,(Int)165,(Int)71,(Int)134,(Int)139,(Int)48,(Int)27,(Int)166,(Int)77,(Int)146,(Int)158,(Int)231,(Int)83,(Int)111,(Int)229,(Int)122,(Int)60,(Int)211,(Int)133,(Int)230,(Int)220,(Int)105,(Int)92,(Int)41,(Int)55,(Int)46,(Int)245,(Int)40,(Int)244,(Int)102,(Int)143,(Int)54,(Int)65,(Int)25,(Int)63,(Int)161,(Int)1,(Int)216,(Int)80,(Int)73,(Int)209,(Int)76,(Int)132,(Int)187,(Int)208,(Int)89,(Int)18,(Int)169,(Int)200,(Int)196,(Int)135,(Int)130,(Int)116,(Int)188,(Int)159,(Int)86,(Int)164,(Int)100,(Int)109,(Int)198,(Int)173,(Int)186,(Int)3,(Int)64,(Int)52,(Int)217,(Int)226,(Int)250,(Int)124,(Int)123,(Int)5,(Int)202,(Int)38,(Int)147,(Int)118,(Int)126,(Int)255,(Int)82,(Int)85,(Int)212,(Int)207,(Int)206,(Int)59,(Int)227,(Int)47,(Int)16,(Int)58,(Int)17,(Int)182,(Int)189,(Int)28,(Int)42,(Int)223,(Int)183,(Int)170,(Int)213,(Int)119,(Int)248,(Int)152,(Int)2,(Int)44,(Int)154,(Int)163,(Int)70,(Int)221,(Int)153,(Int)101,(Int)155,(Int)167,(Int)43,(Int)172,(Int)9,(Int)129,(Int)22,(Int)39,(Int)253,(Int)19,(Int)98,(Int)108,(Int)110,(Int)79,(Int)113,(Int)224,(Int)232,(Int)178,(Int)185,(Int)112,(Int)104,(Int)218,(Int)246,(Int)97,(Int)228,(Int)251,(Int)34,(Int)242,(Int)193,(Int)238,(Int)210,(Int)144,(Int)12,(Int)191,(Int)179,(Int)162,(Int)241,(Int)81,(Int)51,(Int)145,(Int)235,(Int)249,(Int)14,(Int)239,(Int)107,(Int)49,(Int)192,(Int)214,(Int)31,(Int)181,(Int)199,(Int)106,(Int)157,(Int)184,(Int)84,(Int)204,(Int)176,(Int)115,(Int)121,(Int)50,(Int)45,(Int)127,(Int)4,(Int)150,(Int)254,(Int)138,(Int)236,(Int)205,(Int)93,(Int)222,(Int)114,(Int)67,(Int)29,(Int)24,(Int)72,(Int)243,(Int)141,(Int)128,(Int)195,(Int)78,(Int)66,(Int)215,(Int)61,(Int)156,(Int)180,
};
namespace openfl{
namespace _internal{
namespace utils{

void PerlinNoise_obj::__construct( ::Dynamic seed, ::Dynamic octaves, ::Dynamic falloff){
            	HX_STACK_FRAME("openfl._internal.utils.PerlinNoise","new",0x0294f3cb,"openfl._internal.utils.PerlinNoise.new","openfl/_internal/utils/PerlinNoise.hx",85,0x13a5c608)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(seed,"seed")
            	HX_STACK_ARG(octaves,"octaves")
            	HX_STACK_ARG(falloff,"falloff")
HXLINE(  86)		Bool _hx_tmp = hx::IsNull( seed );
HXDLIN(  86)		if (_hx_tmp) {
HXLINE(  86)			seed = (int)123;
            		}
HXLINE(  87)		Bool _hx_tmp1 = hx::IsNull( falloff );
HXDLIN(  87)		if (_hx_tmp1) {
HXLINE(  87)			falloff = ((Float).5);
            		}
HXLINE(  88)		Int _hx_tmp2;
HXDLIN(  88)		Bool _hx_tmp3 = hx::IsNull( octaves );
HXDLIN(  88)		if (_hx_tmp3) {
HXLINE(  88)			_hx_tmp2 = (int)4;
            		}
            		else {
HXLINE(  88)			_hx_tmp2 = octaves;
            		}
HXDLIN(  88)		this->octaves = _hx_tmp2;
HXLINE(  89)		this->baseFactor = ((Float)0.015625);
HXLINE(  90)		this->seedOffset(seed);
HXLINE(  91)		this->octFreqPers(falloff);
            	}

Dynamic PerlinNoise_obj::__CreateEmpty() { return new PerlinNoise_obj; }

hx::ObjectPtr< PerlinNoise_obj > PerlinNoise_obj::__new( ::Dynamic seed, ::Dynamic octaves, ::Dynamic falloff)
{
	hx::ObjectPtr< PerlinNoise_obj > _hx_result = new PerlinNoise_obj();
	_hx_result->__construct(seed,octaves,falloff);
	return _hx_result;
}

Dynamic PerlinNoise_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PerlinNoise_obj > _hx_result = new PerlinNoise_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void PerlinNoise_obj::fill( ::openfl::display::BitmapData bitmap,Float _x,Float _y,Float _z, ::Dynamic _){
            	HX_STACK_FRAME("openfl._internal.utils.PerlinNoise","fill",0x3a79a8b8,"openfl._internal.utils.PerlinNoise.fill","openfl/_internal/utils/PerlinNoise.hx",94,0x13a5c608)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(_x,"_x")
            	HX_STACK_ARG(_y,"_y")
            	HX_STACK_ARG(_z,"_z")
            	HX_STACK_ARG(_,"_")
HXLINE(  96)		HX_VARI( Float,baseX) = ((_x * this->baseFactor) + this->iXoffset);
HXLINE(  99)		Float _hx_tmp = (_y * this->baseFactor);
HXDLIN(  99)		_y = (_hx_tmp + this->iYoffset);
HXLINE( 100)		Float _hx_tmp1 = (_z * this->baseFactor);
HXDLIN( 100)		_z = (_hx_tmp1 + this->iZoffset);
HXLINE( 102)		HX_VARI( Int,width) = bitmap->width;
HXLINE( 103)		HX_VARI( Int,height) = bitmap->height;
HXLINE( 105)		HX_VARI( ::Array< Int >,p) = ::openfl::_internal::utils::PerlinNoise_obj::P;
HXLINE( 106)		HX_VARI( Int,octaves) = this->octaves;
HXLINE( 107)		HX_VARI( ::Array< Float >,aOctFreq) = this->aOctFreq;
HXLINE( 108)		HX_VARI( ::Array< Float >,aOctPers) = this->aOctPers;
HXLINE( 110)		{
HXLINE( 110)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 110)			while((_g1 < height)){
HXLINE( 110)				HX_VARI( Int,py) = _g1++;
HXLINE( 112)				_x = baseX;
HXLINE( 114)				{
HXLINE( 114)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 114)					while((_g3 < width)){
HXLINE( 114)						HX_VARI( Int,px) = _g3++;
HXLINE( 116)						HX_VARI( Float,s) = ((Float)0.);
HXLINE( 118)						{
HXLINE( 118)							HX_VARI( Int,_g5) = (int)0;
HXDLIN( 118)							while((_g5 < octaves)){
HXLINE( 118)								HX_VARI( Int,i) = _g5++;
HXLINE( 120)								HX_VARI( Float,fFreq) = aOctFreq->__get(i);
HXLINE( 121)								HX_VARI( Float,fPers) = aOctPers->__get(i);
HXLINE( 123)								HX_VARI( Float,x) = (_x * fFreq);
HXLINE( 124)								HX_VARI( Float,y) = (_y * fFreq);
HXLINE( 125)								HX_VARI( Float,z) = (_z * fFreq);
HXLINE( 127)								HX_VARI( Float,xf) = (x - hx::Mod(x,(int)1));
HXLINE( 128)								HX_VARI( Float,yf) = (y - hx::Mod(y,(int)1));
HXLINE( 129)								HX_VARI( Float,zf) = (z - hx::Mod(z,(int)1));
HXLINE( 131)								Int _hx_tmp2 = ::Std_obj::_hx_int(xf);
HXDLIN( 131)								HX_VARI( Int,X) = ((int)_hx_tmp2 & (int)(int)255);
HXLINE( 132)								Int _hx_tmp3 = ::Std_obj::_hx_int(yf);
HXDLIN( 132)								HX_VARI( Int,Y) = ((int)_hx_tmp3 & (int)(int)255);
HXLINE( 133)								Int _hx_tmp4 = ::Std_obj::_hx_int(zf);
HXDLIN( 133)								HX_VARI( Int,Z) = ((int)_hx_tmp4 & (int)(int)255);
HXLINE( 135)								hx::SubEq(x,xf);
HXLINE( 136)								hx::SubEq(y,yf);
HXLINE( 137)								hx::SubEq(z,zf);
HXLINE( 139)								HX_VARI( Float,u) = (((x * x) * x) * ((x * ((x * (int)6) - (int)15)) + (int)10));
HXLINE( 140)								HX_VARI( Float,v) = (((y * y) * y) * ((y * ((y * (int)6) - (int)15)) + (int)10));
HXLINE( 141)								HX_VARI( Float,w) = (((z * z) * z) * ((z * ((z * (int)6) - (int)15)) + (int)10));
HXLINE( 143)								HX_VARI( Int,A) = (p->__get(X) + Y);
HXLINE( 144)								HX_VARI( Int,AA) = (p->__get(A) + Z);
HXLINE( 145)								HX_VARI( Int,AB) = (p->__get((A + (int)1)) + Z);
HXLINE( 146)								HX_VARI( Int,B) = (p->__get((X + (int)1)) + Y);
HXLINE( 147)								HX_VARI( Int,BA) = (p->__get(B) + Z);
HXLINE( 148)								HX_VARI( Int,BB) = (p->__get((B + (int)1)) + Z);
HXLINE( 150)								HX_VARI( Float,x1) = (x - (int)1);
HXLINE( 151)								HX_VARI( Float,y1) = (y - (int)1);
HXLINE( 152)								HX_VARI( Float,z1) = (z - (int)1);
HXLINE( 154)								HX_VARI( Int,hash) = ((int)p->__get((BB + (int)1)) & (int)(int)15);
HXLINE( 155)								Float _hx_tmp5;
HXDLIN( 155)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE( 155)									if ((hash < (int)8)) {
HXLINE( 155)										_hx_tmp5 = x1;
            									}
            									else {
HXLINE( 155)										_hx_tmp5 = y1;
            									}
            								}
            								else {
HXLINE( 155)									if ((hash < (int)8)) {
HXLINE( 155)										_hx_tmp5 = -(x1);
            									}
            									else {
HXLINE( 155)										_hx_tmp5 = -(y1);
            									}
            								}
HXDLIN( 155)								Float _hx_tmp6;
HXDLIN( 155)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE( 155)									if ((hash < (int)4)) {
HXLINE( 155)										_hx_tmp6 = y1;
            									}
            									else {
HXLINE( 155)										if ((hash == (int)12)) {
HXLINE( 155)											_hx_tmp6 = x1;
            										}
            										else {
HXLINE( 155)											_hx_tmp6 = z1;
            										}
            									}
            								}
            								else {
HXLINE( 155)									if ((hash < (int)4)) {
HXLINE( 155)										_hx_tmp6 = -(y1);
            									}
            									else {
HXLINE( 155)										if ((hash == (int)14)) {
HXLINE( 155)											_hx_tmp6 = -(x1);
            										}
            										else {
HXLINE( 155)											_hx_tmp6 = -(z1);
            										}
            									}
            								}
HXDLIN( 155)								HX_VARI( Float,g1) = (_hx_tmp5 + _hx_tmp6);
HXLINE( 157)								hash = ((int)p->__get((AB + (int)1)) & (int)(int)15);
HXLINE( 158)								Float _hx_tmp7;
HXDLIN( 158)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE( 158)									if ((hash < (int)8)) {
HXLINE( 158)										_hx_tmp7 = x;
            									}
            									else {
HXLINE( 158)										_hx_tmp7 = y1;
            									}
            								}
            								else {
HXLINE( 158)									if ((hash < (int)8)) {
HXLINE( 158)										_hx_tmp7 = -(x);
            									}
            									else {
HXLINE( 158)										_hx_tmp7 = -(y1);
            									}
            								}
HXDLIN( 158)								Float _hx_tmp8;
HXDLIN( 158)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE( 158)									if ((hash < (int)4)) {
HXLINE( 158)										_hx_tmp8 = y1;
            									}
            									else {
HXLINE( 158)										if ((hash == (int)12)) {
HXLINE( 158)											_hx_tmp8 = x;
            										}
            										else {
HXLINE( 158)											_hx_tmp8 = z1;
            										}
            									}
            								}
            								else {
HXLINE( 158)									if ((hash < (int)4)) {
HXLINE( 158)										_hx_tmp8 = -(y1);
            									}
            									else {
HXLINE( 158)										if ((hash == (int)14)) {
HXLINE( 158)											_hx_tmp8 = -(x);
            										}
            										else {
HXLINE( 158)											_hx_tmp8 = -(z1);
            										}
            									}
            								}
HXDLIN( 158)								HX_VARI( Float,g2) = (_hx_tmp7 + _hx_tmp8);
HXLINE( 160)								hash = ((int)p->__get((BA + (int)1)) & (int)(int)15);
HXLINE( 161)								Float _hx_tmp9;
HXDLIN( 161)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE( 161)									if ((hash < (int)8)) {
HXLINE( 161)										_hx_tmp9 = x1;
            									}
            									else {
HXLINE( 161)										_hx_tmp9 = y;
            									}
            								}
            								else {
HXLINE( 161)									if ((hash < (int)8)) {
HXLINE( 161)										_hx_tmp9 = -(x1);
            									}
            									else {
HXLINE( 161)										_hx_tmp9 = -(y);
            									}
            								}
HXDLIN( 161)								Float _hx_tmp10;
HXDLIN( 161)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE( 161)									if ((hash < (int)4)) {
HXLINE( 161)										_hx_tmp10 = y;
            									}
            									else {
HXLINE( 161)										if ((hash == (int)12)) {
HXLINE( 161)											_hx_tmp10 = x1;
            										}
            										else {
HXLINE( 161)											_hx_tmp10 = z1;
            										}
            									}
            								}
            								else {
HXLINE( 161)									if ((hash < (int)4)) {
HXLINE( 161)										_hx_tmp10 = -(y);
            									}
            									else {
HXLINE( 161)										if ((hash == (int)14)) {
HXLINE( 161)											_hx_tmp10 = -(x1);
            										}
            										else {
HXLINE( 161)											_hx_tmp10 = -(z1);
            										}
            									}
            								}
HXDLIN( 161)								HX_VARI( Float,g3) = (_hx_tmp9 + _hx_tmp10);
HXLINE( 163)								hash = ((int)p->__get((AA + (int)1)) & (int)(int)15);
HXLINE( 164)								Float _hx_tmp11;
HXDLIN( 164)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE( 164)									if ((hash < (int)8)) {
HXLINE( 164)										_hx_tmp11 = x;
            									}
            									else {
HXLINE( 164)										_hx_tmp11 = y;
            									}
            								}
            								else {
HXLINE( 164)									if ((hash < (int)8)) {
HXLINE( 164)										_hx_tmp11 = -(x);
            									}
            									else {
HXLINE( 164)										_hx_tmp11 = -(y);
            									}
            								}
HXDLIN( 164)								Float _hx_tmp12;
HXDLIN( 164)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE( 164)									if ((hash < (int)4)) {
HXLINE( 164)										_hx_tmp12 = y;
            									}
            									else {
HXLINE( 164)										if ((hash == (int)12)) {
HXLINE( 164)											_hx_tmp12 = x;
            										}
            										else {
HXLINE( 164)											_hx_tmp12 = z1;
            										}
            									}
            								}
            								else {
HXLINE( 164)									if ((hash < (int)4)) {
HXLINE( 164)										_hx_tmp12 = -(y);
            									}
            									else {
HXLINE( 164)										if ((hash == (int)14)) {
HXLINE( 164)											_hx_tmp12 = -(x);
            										}
            										else {
HXLINE( 164)											_hx_tmp12 = -(z1);
            										}
            									}
            								}
HXDLIN( 164)								HX_VARI( Float,g4) = (_hx_tmp11 + _hx_tmp12);
HXLINE( 166)								hash = ((int)p->__get(BB) & (int)(int)15);
HXLINE( 167)								Float _hx_tmp13;
HXDLIN( 167)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE( 167)									if ((hash < (int)8)) {
HXLINE( 167)										_hx_tmp13 = x1;
            									}
            									else {
HXLINE( 167)										_hx_tmp13 = y1;
            									}
            								}
            								else {
HXLINE( 167)									if ((hash < (int)8)) {
HXLINE( 167)										_hx_tmp13 = -(x1);
            									}
            									else {
HXLINE( 167)										_hx_tmp13 = -(y1);
            									}
            								}
HXDLIN( 167)								Float _hx_tmp14;
HXDLIN( 167)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE( 167)									if ((hash < (int)4)) {
HXLINE( 167)										_hx_tmp14 = y1;
            									}
            									else {
HXLINE( 167)										if ((hash == (int)12)) {
HXLINE( 167)											_hx_tmp14 = x1;
            										}
            										else {
HXLINE( 167)											_hx_tmp14 = z;
            										}
            									}
            								}
            								else {
HXLINE( 167)									if ((hash < (int)4)) {
HXLINE( 167)										_hx_tmp14 = -(y1);
            									}
            									else {
HXLINE( 167)										if ((hash == (int)14)) {
HXLINE( 167)											_hx_tmp14 = -(x1);
            										}
            										else {
HXLINE( 167)											_hx_tmp14 = -(z);
            										}
            									}
            								}
HXDLIN( 167)								HX_VARI( Float,g5) = (_hx_tmp13 + _hx_tmp14);
HXLINE( 169)								hash = ((int)p->__get(AB) & (int)(int)15);
HXLINE( 170)								Float _hx_tmp15;
HXDLIN( 170)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE( 170)									if ((hash < (int)8)) {
HXLINE( 170)										_hx_tmp15 = x;
            									}
            									else {
HXLINE( 170)										_hx_tmp15 = y1;
            									}
            								}
            								else {
HXLINE( 170)									if ((hash < (int)8)) {
HXLINE( 170)										_hx_tmp15 = -(x);
            									}
            									else {
HXLINE( 170)										_hx_tmp15 = -(y1);
            									}
            								}
HXDLIN( 170)								Float _hx_tmp16;
HXDLIN( 170)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE( 170)									if ((hash < (int)4)) {
HXLINE( 170)										_hx_tmp16 = y1;
            									}
            									else {
HXLINE( 170)										if ((hash == (int)12)) {
HXLINE( 170)											_hx_tmp16 = x;
            										}
            										else {
HXLINE( 170)											_hx_tmp16 = z;
            										}
            									}
            								}
            								else {
HXLINE( 170)									if ((hash < (int)4)) {
HXLINE( 170)										_hx_tmp16 = -(y1);
            									}
            									else {
HXLINE( 170)										if ((hash == (int)14)) {
HXLINE( 170)											_hx_tmp16 = -(x);
            										}
            										else {
HXLINE( 170)											_hx_tmp16 = -(z);
            										}
            									}
            								}
HXDLIN( 170)								HX_VARI( Float,g6) = (_hx_tmp15 + _hx_tmp16);
HXLINE( 172)								hash = ((int)p->__get(BA) & (int)(int)15);
HXLINE( 173)								Float _hx_tmp17;
HXDLIN( 173)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE( 173)									if ((hash < (int)8)) {
HXLINE( 173)										_hx_tmp17 = x1;
            									}
            									else {
HXLINE( 173)										_hx_tmp17 = y;
            									}
            								}
            								else {
HXLINE( 173)									if ((hash < (int)8)) {
HXLINE( 173)										_hx_tmp17 = -(x1);
            									}
            									else {
HXLINE( 173)										_hx_tmp17 = -(y);
            									}
            								}
HXDLIN( 173)								Float _hx_tmp18;
HXDLIN( 173)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE( 173)									if ((hash < (int)4)) {
HXLINE( 173)										_hx_tmp18 = y;
            									}
            									else {
HXLINE( 173)										if ((hash == (int)12)) {
HXLINE( 173)											_hx_tmp18 = x1;
            										}
            										else {
HXLINE( 173)											_hx_tmp18 = z;
            										}
            									}
            								}
            								else {
HXLINE( 173)									if ((hash < (int)4)) {
HXLINE( 173)										_hx_tmp18 = -(y);
            									}
            									else {
HXLINE( 173)										if ((hash == (int)14)) {
HXLINE( 173)											_hx_tmp18 = -(x1);
            										}
            										else {
HXLINE( 173)											_hx_tmp18 = -(z);
            										}
            									}
            								}
HXDLIN( 173)								HX_VARI( Float,g7) = (_hx_tmp17 + _hx_tmp18);
HXLINE( 175)								hash = ((int)p->__get(AA) & (int)(int)15);
HXLINE( 176)								Float _hx_tmp19;
HXDLIN( 176)								if ((((int)hash & (int)(int)1) == (int)0)) {
HXLINE( 176)									if ((hash < (int)8)) {
HXLINE( 176)										_hx_tmp19 = x;
            									}
            									else {
HXLINE( 176)										_hx_tmp19 = y;
            									}
            								}
            								else {
HXLINE( 176)									if ((hash < (int)8)) {
HXLINE( 176)										_hx_tmp19 = -(x);
            									}
            									else {
HXLINE( 176)										_hx_tmp19 = -(y);
            									}
            								}
HXDLIN( 176)								Float _hx_tmp20;
HXDLIN( 176)								if ((((int)hash & (int)(int)2) == (int)0)) {
HXLINE( 176)									if ((hash < (int)4)) {
HXLINE( 176)										_hx_tmp20 = y;
            									}
            									else {
HXLINE( 176)										if ((hash == (int)12)) {
HXLINE( 176)											_hx_tmp20 = x;
            										}
            										else {
HXLINE( 176)											_hx_tmp20 = z;
            										}
            									}
            								}
            								else {
HXLINE( 176)									if ((hash < (int)4)) {
HXLINE( 176)										_hx_tmp20 = -(y);
            									}
            									else {
HXLINE( 176)										if ((hash == (int)14)) {
HXLINE( 176)											_hx_tmp20 = -(x);
            										}
            										else {
HXLINE( 176)											_hx_tmp20 = -(z);
            										}
            									}
            								}
HXDLIN( 176)								HX_VARI( Float,g8) = (_hx_tmp19 + _hx_tmp20);
HXLINE( 178)								Float _hx_tmp21 = (u * (g1 - g2));
HXDLIN( 178)								hx::AddEq(g2,_hx_tmp21);
HXLINE( 179)								Float _hx_tmp22 = (u * (g3 - g4));
HXDLIN( 179)								hx::AddEq(g4,_hx_tmp22);
HXLINE( 180)								Float _hx_tmp23 = (u * (g5 - g6));
HXDLIN( 180)								hx::AddEq(g6,_hx_tmp23);
HXLINE( 181)								Float _hx_tmp24 = (u * (g7 - g8));
HXDLIN( 181)								hx::AddEq(g8,_hx_tmp24);
HXLINE( 183)								Float _hx_tmp25 = (v * (g2 - g4));
HXDLIN( 183)								hx::AddEq(g4,_hx_tmp25);
HXLINE( 184)								Float _hx_tmp26 = (v * (g6 - g8));
HXDLIN( 184)								hx::AddEq(g8,_hx_tmp26);
HXLINE( 186)								hx::AddEq(s,((g8 + (w * (g4 - g8))) * fPers));
            							}
            						}
HXLINE( 189)						Float _hx_tmp27 = ((s * this->fPersMax) + (int)1);
HXDLIN( 189)						HX_VARI( Int,color) = ::Std_obj::_hx_int((_hx_tmp27 * (int)128));
HXLINE( 191)						bitmap->setPixel32(px,py,((int)((int)((int)(int)-16777216 | (int)((int)color << (int)(int)16)) | (int)((int)color << (int)(int)8)) | (int)color));
HXLINE( 193)						hx::AddEq(_x,this->baseFactor);
            					}
            				}
HXLINE( 196)				hx::AddEq(_y,this->baseFactor);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(PerlinNoise_obj,fill,(void))

void PerlinNoise_obj::octFreqPers(Float fPersistence){
            	HX_STACK_FRAME("openfl._internal.utils.PerlinNoise","octFreqPers",0x79fea539,"openfl._internal.utils.PerlinNoise.octFreqPers","openfl/_internal/utils/PerlinNoise.hx",200,0x13a5c608)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fPersistence,"fPersistence")
HXLINE( 202)		HX_VAR( Float,fFreq);
HXDLIN( 202)		HX_VAR( Float,fPers);
HXLINE( 204)		this->aOctFreq = ::Array_obj< Float >::__new(0);
HXLINE( 205)		this->aOctPers = ::Array_obj< Float >::__new(0);
HXLINE( 206)		this->fPersMax = (int)0;
HXLINE( 208)		{
HXLINE( 208)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 208)			HX_VARI( Int,_g) = this->octaves;
HXDLIN( 208)			while((_g1 < _g)){
HXLINE( 208)				HX_VARI( Int,i) = _g1++;
HXLINE( 209)				fFreq = ::Math_obj::pow((int)2,i);
HXLINE( 210)				fPers = ::Math_obj::pow(fPersistence,i);
HXLINE( 211)				hx::AddEq(this->fPersMax,fPers);
HXLINE( 212)				this->aOctFreq->push(fFreq);
HXLINE( 213)				this->aOctPers->push(fPers);
            			}
            		}
HXLINE( 216)		this->fPersMax = ((Float)(int)1 / (Float)this->fPersMax);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PerlinNoise_obj,octFreqPers,(void))

void PerlinNoise_obj::seedOffset(Int iSeed){
            	HX_STACK_FRAME("openfl._internal.utils.PerlinNoise","seedOffset",0x045eabd9,"openfl._internal.utils.PerlinNoise.seedOffset","openfl/_internal/utils/PerlinNoise.hx",219,0x13a5c608)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(iSeed,"iSeed")
HXLINE( 220)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN( 220)		this->iXoffset = iSeed;
HXLINE( 221)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN( 221)		this->iYoffset = iSeed;
HXLINE( 222)		iSeed = ::Std_obj::_hx_int(hx::Mod((iSeed * ((Float)16807.)),(int)2147483647));
HXDLIN( 222)		this->iZoffset = iSeed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PerlinNoise_obj,seedOffset,(void))

::Array< Int > PerlinNoise_obj::P;


PerlinNoise_obj::PerlinNoise_obj()
{
}

void PerlinNoise_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PerlinNoise);
	HX_MARK_MEMBER_NAME(octaves,"octaves");
	HX_MARK_MEMBER_NAME(aOctFreq,"aOctFreq");
	HX_MARK_MEMBER_NAME(aOctPers,"aOctPers");
	HX_MARK_MEMBER_NAME(fPersMax,"fPersMax");
	HX_MARK_MEMBER_NAME(iXoffset,"iXoffset");
	HX_MARK_MEMBER_NAME(iYoffset,"iYoffset");
	HX_MARK_MEMBER_NAME(iZoffset,"iZoffset");
	HX_MARK_MEMBER_NAME(baseFactor,"baseFactor");
	HX_MARK_END_CLASS();
}

void PerlinNoise_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(octaves,"octaves");
	HX_VISIT_MEMBER_NAME(aOctFreq,"aOctFreq");
	HX_VISIT_MEMBER_NAME(aOctPers,"aOctPers");
	HX_VISIT_MEMBER_NAME(fPersMax,"fPersMax");
	HX_VISIT_MEMBER_NAME(iXoffset,"iXoffset");
	HX_VISIT_MEMBER_NAME(iYoffset,"iYoffset");
	HX_VISIT_MEMBER_NAME(iZoffset,"iZoffset");
	HX_VISIT_MEMBER_NAME(baseFactor,"baseFactor");
}

hx::Val PerlinNoise_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"fill") ) { return hx::Val( fill_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"octaves") ) { return hx::Val( octaves); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"aOctFreq") ) { return hx::Val( aOctFreq); }
		if (HX_FIELD_EQ(inName,"aOctPers") ) { return hx::Val( aOctPers); }
		if (HX_FIELD_EQ(inName,"fPersMax") ) { return hx::Val( fPersMax); }
		if (HX_FIELD_EQ(inName,"iXoffset") ) { return hx::Val( iXoffset); }
		if (HX_FIELD_EQ(inName,"iYoffset") ) { return hx::Val( iYoffset); }
		if (HX_FIELD_EQ(inName,"iZoffset") ) { return hx::Val( iZoffset); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"baseFactor") ) { return hx::Val( baseFactor); }
		if (HX_FIELD_EQ(inName,"seedOffset") ) { return hx::Val( seedOffset_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"octFreqPers") ) { return hx::Val( octFreqPers_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool PerlinNoise_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { outValue = P; return true; }
	}
	return false;
}

hx::Val PerlinNoise_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"octaves") ) { octaves=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"aOctFreq") ) { aOctFreq=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aOctPers") ) { aOctPers=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fPersMax") ) { fPersMax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iXoffset") ) { iXoffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iYoffset") ) { iYoffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iZoffset") ) { iZoffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"baseFactor") ) { baseFactor=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PerlinNoise_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"P") ) { P=ioValue.Cast< ::Array< Int > >(); return true; }
	}
	return false;
}

void PerlinNoise_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8"));
	outFields->push(HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f"));
	outFields->push(HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16"));
	outFields->push(HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a"));
	outFields->push(HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21"));
	outFields->push(HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a"));
	outFields->push(HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74"));
	outFields->push(HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PerlinNoise_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(PerlinNoise_obj,octaves),HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(PerlinNoise_obj,aOctFreq),HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(PerlinNoise_obj,aOctPers),HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16")},
	{hx::fsFloat,(int)offsetof(PerlinNoise_obj,fPersMax),HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a")},
	{hx::fsFloat,(int)offsetof(PerlinNoise_obj,iXoffset),HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21")},
	{hx::fsFloat,(int)offsetof(PerlinNoise_obj,iYoffset),HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a")},
	{hx::fsFloat,(int)offsetof(PerlinNoise_obj,iZoffset),HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74")},
	{hx::fsFloat,(int)offsetof(PerlinNoise_obj,baseFactor),HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PerlinNoise_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< int >*/ ,(void *) &PerlinNoise_obj::P,HX_HCSTRING("P","\x50","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PerlinNoise_obj_sMemberFields[] = {
	HX_HCSTRING("octaves","\x83","\x15","\x16","\xa8"),
	HX_HCSTRING("aOctFreq","\x57","\xaf","\xa8","\x0f"),
	HX_HCSTRING("aOctPers","\x95","\xff","\x3a","\x16"),
	HX_HCSTRING("fPersMax","\x88","\x73","\xc6","\x1a"),
	HX_HCSTRING("iXoffset","\xa2","\x38","\x51","\x21"),
	HX_HCSTRING("iYoffset","\x63","\xaf","\xe6","\x4a"),
	HX_HCSTRING("iZoffset","\x24","\x26","\x7c","\x74"),
	HX_HCSTRING("baseFactor","\xc0","\xd7","\x3d","\xbc"),
	HX_HCSTRING("fill","\x83","\xce","\xbb","\x43"),
	HX_HCSTRING("octFreqPers","\xce","\x9e","\x7b","\xa2"),
	HX_HCSTRING("seedOffset","\xe4","\xbb","\xcf","\xfe"),
	::String(null()) };

static void PerlinNoise_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PerlinNoise_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PerlinNoise_obj::P,"P");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PerlinNoise_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PerlinNoise_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PerlinNoise_obj::P,"P");
};

#endif

hx::Class PerlinNoise_obj::__mClass;

static ::String PerlinNoise_obj_sStaticFields[] = {
	HX_HCSTRING("P","\x50","\x00","\x00","\x00"),
	::String(null())
};

void PerlinNoise_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.utils.PerlinNoise","\x59","\xb2","\xee","\x42");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PerlinNoise_obj::__GetStatic;
	__mClass->mSetStaticField = &PerlinNoise_obj::__SetStatic;
	__mClass->mMarkFunc = PerlinNoise_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PerlinNoise_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PerlinNoise_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PerlinNoise_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PerlinNoise_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PerlinNoise_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PerlinNoise_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PerlinNoise_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.utils.PerlinNoise","boot",0x37d95e67,"openfl._internal.utils.PerlinNoise.boot","openfl/_internal/utils/PerlinNoise.hx",17,0x13a5c608)
HXLINE(  17)		P = ::Array_obj< Int >::fromData( _hx_array_data_4,512);
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace utils
