// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_GLUtils
#include <lime/utils/GLUtils.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Bool
#include <openfl/display/ShaderParameter_Bool.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Int
#include <openfl/display/ShaderParameter_Int.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

namespace openfl{
namespace display{

void Shader_obj::__construct( ::openfl::utils::ByteArrayData code){
            	HX_STACK_FRAME("openfl.display.Shader","new",0x88fbb381,"openfl.display.Shader.new","openfl/display/Shader.hx",19,0xae8f5dcd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(code,"code")
HXLINE(  15)		this->_hx___data =  ::openfl::display::ShaderData_obj::__new(null());
HXLINE( 111)		Bool _hx_tmp = hx::IsNull( this->_hx___glFragmentSource );
HXDLIN( 111)		if (_hx_tmp) {
HXLINE( 111)			this->_hx___glFragmentSource = HX_("varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}",c4,a8,f4,37);
            		}
HXLINE( 110)		Bool _hx_tmp1 = hx::IsNull( this->_hx___glVertexSource );
HXDLIN( 110)		if (_hx_tmp1) {
HXLINE( 110)			this->_hx___glVertexSource = HX_("attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}",a2,64,9a,8b);
            		}
HXLINE(  94)		this->byteCode = code;
HXLINE(  95)		this->precisionHint = (int)1;
HXLINE(  97)		this->_hx___glSourceDirty = true;
HXLINE(  98)		this->_hx___numPasses = (int)1;
            	}

Dynamic Shader_obj::__CreateEmpty() { return new Shader_obj; }

hx::ObjectPtr< Shader_obj > Shader_obj::__new( ::openfl::utils::ByteArrayData code)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(code);
	return _hx_result;
}

Dynamic Shader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Shader_obj::_hx___disable(){
            	HX_STACK_FRAME("openfl.display.Shader","__disable",0x171f2ca9,"openfl.display.Shader.__disable","openfl/display/Shader.hx",105,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 105)		Bool _hx_tmp = hx::IsNotNull( this->glProgram );
HXDLIN( 105)		if (_hx_tmp) {
HXLINE( 107)			this->_hx___disableGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___disable,(void))

void Shader_obj::_hx___disableGL(){
            	HX_STACK_FRAME("openfl.display.Shader","__disableGL",0x7ec2a70e,"openfl.display.Shader.__disableGL","openfl/display/Shader.hx",114,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 116)		Bool _hx_tmp = hx::IsNotNull( this->get_data()->uImage0 );
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 118)			this->get_data()->uImage0->input = null();
            		}
HXLINE( 122)		{
HXLINE( 122)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 122)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___paramBool;
HXDLIN( 122)			while((_g < _g1->length)){
HXLINE( 122)				HX_VARI(  ::openfl::display::ShaderParameter_Bool,parameter) = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 122)				++_g;
HXLINE( 124)				this->gl->disableVertexAttribArray(parameter->index);
            			}
            		}
HXLINE( 128)		{
HXLINE( 128)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 128)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___paramFloat;
HXDLIN( 128)			while((_g2 < _g11->length)){
HXLINE( 128)				HX_VARI_NAME(  ::openfl::display::ShaderParameter_Float,parameter1,"parameter") = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 128)				++_g2;
HXLINE( 130)				this->gl->disableVertexAttribArray(parameter1->index);
            			}
            		}
HXLINE( 134)		{
HXLINE( 134)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 134)			HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = this->_hx___paramInt;
HXDLIN( 134)			while((_g3 < _g12->length)){
HXLINE( 134)				HX_VARI_NAME(  ::openfl::display::ShaderParameter_Int,parameter2,"parameter") = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 134)				++_g3;
HXLINE( 136)				this->gl->disableVertexAttribArray(parameter2->index);
            			}
            		}
HXLINE( 140)		this->gl->bindBuffer(this->gl->ARRAY_BUFFER,null());
HXLINE( 141)		this->gl->bindTexture(this->gl->TEXTURE_2D,null());
HXLINE( 144)		this->gl->disable(this->gl->TEXTURE_2D);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___disableGL,(void))

void Shader_obj::_hx___enable(){
            	HX_STACK_FRAME("openfl.display.Shader","__enable",0x8f5f3ee2,"openfl.display.Shader.__enable","openfl/display/Shader.hx",150,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 152)		this->_hx___init();
HXLINE( 154)		Bool _hx_tmp = hx::IsNotNull( this->glProgram );
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 156)			this->_hx___enableGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___enable,(void))

void Shader_obj::_hx___enableGL(){
            	HX_STACK_FRAME("openfl.display.Shader","__enableGL",0x94d67987,"openfl.display.Shader.__enableGL","openfl/display/Shader.hx",163,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 165)		HX_VARI( Int,textureCount) = (int)0;
HXLINE( 167)		{
HXLINE( 167)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 167)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___inputBitmapData;
HXDLIN( 167)			while((_g < _g1->length)){
HXLINE( 167)				HX_VARI(  ::openfl::display::ShaderInput_openfl_display_BitmapData,input) = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 167)				++_g;
HXLINE( 169)				this->gl->uniform1i(input->index,textureCount);
HXLINE( 170)				++textureCount;
            			}
            		}
HXLINE( 175)		if ((textureCount > (int)0)) {
HXLINE( 177)			this->gl->enable(this->gl->TEXTURE_2D);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___enableGL,(void))

void Shader_obj::_hx___init(){
            	HX_STACK_FRAME("openfl.display.Shader","__init",0x2faba5af,"openfl.display.Shader.__init","openfl/display/Shader.hx",185,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 187)		Bool _hx_tmp = hx::IsNull( this->_hx___data );
HXDLIN( 187)		if (_hx_tmp) {
HXLINE( 189)			this->_hx___data =  ::openfl::display::ShaderData_obj::__new(null());
            		}
HXLINE( 193)		Bool _hx_tmp1;
HXDLIN( 193)		Bool _hx_tmp2;
HXDLIN( 193)		Bool _hx_tmp3 = hx::IsNotNull( this->_hx___glFragmentSource );
HXDLIN( 193)		if (_hx_tmp3) {
HXLINE( 193)			_hx_tmp2 = hx::IsNotNull( this->_hx___glVertexSource );
            		}
            		else {
HXLINE( 193)			_hx_tmp2 = false;
            		}
HXDLIN( 193)		if (_hx_tmp2) {
HXLINE( 193)			Bool _hx_tmp4 = hx::IsNotNull( this->glProgram );
HXDLIN( 193)			if (_hx_tmp4) {
HXLINE( 193)				_hx_tmp1 = this->_hx___glSourceDirty;
            			}
            			else {
HXLINE( 193)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 193)			_hx_tmp1 = false;
            		}
HXDLIN( 193)		if (_hx_tmp1) {
HXLINE( 195)			this->_hx___initGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___init,(void))

void Shader_obj::_hx___initGL(){
            	HX_STACK_FRAME("openfl.display.Shader","__initGL",0x2e23ed94,"openfl.display.Shader.__initGL","openfl/display/Shader.hx",202,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 204)		Bool _hx_tmp;
HXDLIN( 204)		if (!(this->_hx___glSourceDirty)) {
HXLINE( 204)			_hx_tmp = hx::IsNull( this->_hx___isUniform );
            		}
            		else {
HXLINE( 204)			_hx_tmp = true;
            		}
HXDLIN( 204)		if (_hx_tmp) {
HXLINE( 206)			this->_hx___glSourceDirty = false;
HXLINE( 207)			this->glProgram = null();
HXLINE( 209)			this->_hx___isUniform =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 211)			this->_hx___inputBitmapData = ::Array_obj< ::Dynamic>::__new();
HXLINE( 212)			this->_hx___paramBool = ::Array_obj< ::Dynamic>::__new();
HXLINE( 213)			this->_hx___paramFloat = ::Array_obj< ::Dynamic>::__new();
HXLINE( 214)			this->_hx___paramInt = ::Array_obj< ::Dynamic>::__new();
HXLINE( 216)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)4,(int)8);
HXDLIN( 216)			this->_hx___uniformMatrix2 = this1;
HXLINE( 217)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)9,(int)8);
HXDLIN( 217)			this->_hx___uniformMatrix3 = this2;
HXLINE( 218)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)16,(int)8);
HXDLIN( 218)			this->_hx___uniformMatrix4 = this3;
HXLINE( 220)			::String _hx_tmp1 = this->get_glVertexSource();
HXDLIN( 220)			this->_hx___processGLData(_hx_tmp1,HX_("attribute",1c,70,f0,fa));
HXLINE( 221)			::String _hx_tmp2 = this->get_glVertexSource();
HXDLIN( 221)			this->_hx___processGLData(_hx_tmp2,HX_("uniform",34,41,64,b5));
HXLINE( 222)			::String _hx_tmp3 = this->get_glFragmentSource();
HXDLIN( 222)			this->_hx___processGLData(_hx_tmp3,HX_("uniform",34,41,64,b5));
            		}
HXLINE( 226)		Bool _hx_tmp4;
HXDLIN( 226)		Bool _hx_tmp5 = hx::IsNotNull( this->gl );
HXDLIN( 226)		if (_hx_tmp5) {
HXLINE( 226)			_hx_tmp4 = hx::IsNull( this->glProgram );
            		}
            		else {
HXLINE( 226)			_hx_tmp4 = false;
            		}
HXDLIN( 226)		if (_hx_tmp4) {
HXLINE( 231)			::String _hx_tmp6;
HXDLIN( 231)			if (hx::IsEq( this->precisionHint,(int)1 )) {
HXLINE( 231)				_hx_tmp6 = HX_("mediump",5b,92,81,f0);
            			}
            			else {
HXLINE( 231)				_hx_tmp6 = HX_("lowp",5c,ad,b7,47);
            			}
HXLINE( 230)			::String _hx_tmp7 = ((HX_("#ifdef GL_ES\n\t\t\t\tprecision ",df,92,6a,64) + _hx_tmp6) + HX_(" float;\n\t\t\t\t#endif\n\t\t\t\t",ea,d3,26,bb));
HXLINE( 233)			::String _hx_tmp8 = this->get_glFragmentSource();
HXLINE( 228)			HX_VARI( ::String,fragment) = (_hx_tmp7 + _hx_tmp8);
HXLINE( 235)			::String _hx_tmp9 = this->get_glVertexSource();
HXDLIN( 235)			this->glProgram = ::lime::utils::GLUtils_obj::createProgram(_hx_tmp9,fragment);
HXLINE( 237)			Bool _hx_tmp10 = hx::IsNotNull( this->glProgram );
HXDLIN( 237)			if (_hx_tmp10) {
HXLINE( 239)				{
HXLINE( 239)					HX_VARI( Int,_g) = (int)0;
HXDLIN( 239)					HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___inputBitmapData;
HXDLIN( 239)					while((_g < _g1->length)){
HXLINE( 239)						HX_VARI(  ::openfl::display::ShaderInput_openfl_display_BitmapData,input) = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 239)						++_g;
HXLINE( 241)						 ::Dynamic _hx_tmp11 = this->_hx___isUniform->get(input->name);
HXDLIN( 241)						if (_hx_tmp11) {
HXLINE( 243)							input->index = this->gl->getUniformLocation(this->glProgram,input->name);
            						}
            						else {
HXLINE( 247)							input->index = this->gl->getAttribLocation(this->glProgram,input->name);
            						}
            					}
            				}
HXLINE( 253)				{
HXLINE( 253)					HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 253)					HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___paramBool;
HXDLIN( 253)					while((_g2 < _g11->length)){
HXLINE( 253)						HX_VARI(  ::openfl::display::ShaderParameter_Bool,parameter) = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 253)						++_g2;
HXLINE( 255)						 ::Dynamic _hx_tmp12 = this->_hx___isUniform->get(parameter->name);
HXDLIN( 255)						if (_hx_tmp12) {
HXLINE( 257)							parameter->index = this->gl->getUniformLocation(this->glProgram,parameter->name);
            						}
            						else {
HXLINE( 261)							parameter->index = this->gl->getAttribLocation(this->glProgram,parameter->name);
            						}
            					}
            				}
HXLINE( 267)				{
HXLINE( 267)					HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 267)					HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = this->_hx___paramFloat;
HXDLIN( 267)					while((_g3 < _g12->length)){
HXLINE( 267)						HX_VARI_NAME(  ::openfl::display::ShaderParameter_Float,parameter1,"parameter") = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 267)						++_g3;
HXLINE( 269)						 ::Dynamic _hx_tmp13 = this->_hx___isUniform->get(parameter1->name);
HXDLIN( 269)						if (_hx_tmp13) {
HXLINE( 271)							parameter1->index = this->gl->getUniformLocation(this->glProgram,parameter1->name);
            						}
            						else {
HXLINE( 275)							parameter1->index = this->gl->getAttribLocation(this->glProgram,parameter1->name);
            						}
            					}
            				}
HXLINE( 281)				{
HXLINE( 281)					HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 281)					HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = this->_hx___paramInt;
HXDLIN( 281)					while((_g4 < _g13->length)){
HXLINE( 281)						HX_VARI_NAME(  ::openfl::display::ShaderParameter_Int,parameter2,"parameter") = _g13->__get(_g4).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 281)						++_g4;
HXLINE( 283)						 ::Dynamic _hx_tmp14 = this->_hx___isUniform->get(parameter2->name);
HXDLIN( 283)						if (_hx_tmp14) {
HXLINE( 285)							parameter2->index = this->gl->getUniformLocation(this->glProgram,parameter2->name);
            						}
            						else {
HXLINE( 289)							parameter2->index = this->gl->getAttribLocation(this->glProgram,parameter2->name);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___initGL,(void))

void Shader_obj::_hx___processGLData(::String source,::String storageType){
            	HX_STACK_FRAME("openfl.display.Shader","__processGLData",0x90b8a01f,"openfl.display.Shader.__processGLData","openfl/display/Shader.hx",302,0xae8f5dcd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(storageType,"storageType")
HXLINE( 304)		HX_VARI( Int,lastMatch) = (int)0;
HXDLIN( 304)		HX_VAR(  ::Dynamic,position);
HXDLIN( 304)		HX_VAR(  ::EReg,regex);
HXDLIN( 304)		HX_VAR( ::String,name);
HXDLIN( 304)		HX_VAR( ::String,type);
HXLINE( 306)		if ((storageType == HX_("uniform",34,41,64,b5))) {
HXLINE( 308)			regex =  ::EReg_obj::__new(HX_("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)",74,9c,40,21),HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 312)			regex =  ::EReg_obj::__new(HX_("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)",5c,61,a8,c8),HX_("",00,00,00,00));
            		}
HXLINE( 316)		while(true){
HXLINE( 316)			Bool _hx_tmp = !(regex->matchSub(source,lastMatch,null()));
HXDLIN( 316)			if (_hx_tmp) {
HXLINE( 316)				goto _hx_goto_8;
            			}
HXLINE( 318)			type = regex->matched((int)1);
HXLINE( 319)			name = regex->matched((int)2);
HXLINE( 321)			Bool _hx_tmp1 = ::StringTools_obj::startsWith(type,HX_("sampler",08,c5,c9,83));
HXDLIN( 321)			if (_hx_tmp1) {
HXLINE( 323)				HX_VARI(  ::openfl::display::ShaderInput_openfl_display_BitmapData,input) =  ::openfl::display::ShaderInput_openfl_display_BitmapData_obj::__new();
HXLINE( 324)				input->name = name;
HXLINE( 325)				this->_hx___inputBitmapData->push(input);
HXLINE( 326)				 ::openfl::display::ShaderData _hx_tmp2 = this->get_data();
HXDLIN( 326)				::Reflect_obj::setField(_hx_tmp2,name,input);
            			}
            			else {
HXLINE( 330)				HX_VAR(  ::Dynamic,parameterType);
HXDLIN( 330)				::String _hx_switch_0 = type;
            				if (  (_hx_switch_0==HX_("bool",2a,84,1b,41)) ){
HXLINE( 330)					parameterType = (int)0;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("bvec2",c0,00,91,bb)) ){
HXLINE( 330)					parameterType = (int)1;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("bvec3",c1,00,91,bb)) ){
HXLINE( 330)					parameterType = (int)2;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("bvec4",c2,00,91,bb)) ){
HXLINE( 330)					parameterType = (int)3;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("dvec2",c2,29,5e,e2)) ||  (_hx_switch_0==HX_("vec2",5e,27,4c,4e)) ){
HXLINE( 330)					parameterType = (int)5;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("dvec3",c3,29,5e,e2)) ||  (_hx_switch_0==HX_("vec3",5f,27,4c,4e)) ){
HXLINE( 330)					parameterType = (int)6;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("double",11,2b,cb,32)) ||  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 330)					parameterType = (int)4;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("ivec3",48,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec3",54,06,2e,ac)) ){
HXLINE( 330)					parameterType = (int)10;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("ivec4",49,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec4",55,06,2e,ac)) ){
HXLINE( 330)					parameterType = (int)11;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat2",92,41,56,48)) ||  (_hx_switch_0==HX_("mat2x2",cc,b2,97,bb)) ){
HXLINE( 330)					parameterType = (int)12;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat2x3",cd,b2,97,bb)) ){
HXLINE( 330)					parameterType = (int)13;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat2x4",ce,b2,97,bb)) ){
HXLINE( 330)					parameterType = (int)14;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat3x2",0d,75,98,bb)) ){
HXLINE( 330)					parameterType = (int)15;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat3",93,41,56,48)) ||  (_hx_switch_0==HX_("mat3x3",0e,75,98,bb)) ){
HXLINE( 330)					parameterType = (int)16;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat3x4",0f,75,98,bb)) ){
HXLINE( 330)					parameterType = (int)17;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat4",94,41,56,48)) ||  (_hx_switch_0==HX_("mat4x4",50,37,99,bb)) ){
HXLINE( 330)					parameterType = (int)20;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat4x2",4e,37,99,bb)) ){
HXLINE( 330)					parameterType = (int)18;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("mat4x3",4f,37,99,bb)) ){
HXLINE( 330)					parameterType = (int)19;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("int",ef,0c,50,00)) ||  (_hx_switch_0==HX_("uint",9a,03,a6,4d)) ){
HXLINE( 330)					parameterType = (int)8;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("ivec2",47,10,5f,c3)) ||  (_hx_switch_0==HX_("uvec2",53,06,2e,ac)) ){
HXLINE( 330)					parameterType = (int)9;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				if (  (_hx_switch_0==HX_("dvec4",c4,29,5e,e2)) ||  (_hx_switch_0==HX_("vec4",60,27,4c,4e)) ){
HXLINE( 330)					parameterType = (int)7;
HXDLIN( 330)					goto _hx_goto_9;
            				}
            				/* default */{
HXLINE( 330)					parameterType = null();
            				}
            				_hx_goto_9:;
HXLINE( 357)				 ::Dynamic _hx_switch_1 = parameterType;
            				if (  (_hx_switch_1==(int)0) ||  (_hx_switch_1==(int)1) ||  (_hx_switch_1==(int)2) ||  (_hx_switch_1==(int)3) ){
HXLINE( 361)					HX_VARI(  ::openfl::display::ShaderParameter_Bool,parameter) =  ::openfl::display::ShaderParameter_Bool_obj::__new();
HXLINE( 362)					parameter->name = name;
HXLINE( 363)					parameter->type = parameterType;
HXLINE( 364)					this->_hx___paramBool->push(parameter);
HXLINE( 365)					 ::openfl::display::ShaderData _hx_tmp3 = this->get_data();
HXDLIN( 365)					::Reflect_obj::setField(_hx_tmp3,name,parameter);
HXLINE( 359)					goto _hx_goto_10;
            				}
            				if (  (_hx_switch_1==(int)8) ||  (_hx_switch_1==(int)9) ||  (_hx_switch_1==(int)10) ||  (_hx_switch_1==(int)11) ){
HXLINE( 369)					HX_VARI_NAME(  ::openfl::display::ShaderParameter_Int,parameter1,"parameter") =  ::openfl::display::ShaderParameter_Int_obj::__new();
HXLINE( 370)					parameter1->name = name;
HXLINE( 371)					parameter1->type = parameterType;
HXLINE( 372)					this->_hx___paramInt->push(parameter1);
HXLINE( 373)					 ::openfl::display::ShaderData _hx_tmp4 = this->get_data();
HXDLIN( 373)					::Reflect_obj::setField(_hx_tmp4,name,parameter1);
HXLINE( 367)					goto _hx_goto_10;
            				}
            				/* default */{
HXLINE( 377)					HX_VARI_NAME(  ::openfl::display::ShaderParameter_Float,parameter2,"parameter") =  ::openfl::display::ShaderParameter_Float_obj::__new();
HXLINE( 378)					parameter2->name = name;
HXLINE( 379)					parameter2->type = parameterType;
HXLINE( 380)					this->_hx___paramFloat->push(parameter2);
HXLINE( 381)					 ::openfl::display::ShaderData _hx_tmp5 = this->get_data();
HXDLIN( 381)					::Reflect_obj::setField(_hx_tmp5,name,parameter2);
            				}
            				_hx_goto_10:;
            			}
HXLINE( 387)			this->_hx___isUniform->set(name,(storageType == HX_("uniform",34,41,64,b5)));
HXLINE( 389)			position = regex->matchedPos();
HXLINE( 390)			lastMatch = (( (Int)(position->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ) + ( (Int)(position->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ));
            		}
            		_hx_goto_8:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,_hx___processGLData,(void))

void Shader_obj::_hx___update(){
            	HX_STACK_FRAME("openfl.display.Shader","__update",0x1ddd1668,"openfl.display.Shader.__update","openfl/display/Shader.hx",399,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 399)		Bool _hx_tmp = hx::IsNotNull( this->glProgram );
HXDLIN( 399)		if (_hx_tmp) {
HXLINE( 401)			this->_hx___updateGL();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___update,(void))

void Shader_obj::_hx___updateGL(){
            	HX_STACK_FRAME("openfl.display.Shader","__updateGL",0x201dbe8d,"openfl.display.Shader.__updateGL","openfl/display/Shader.hx",408,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 410)		HX_VARI( Int,textureCount) = (int)0;
HXLINE( 412)		{
HXLINE( 412)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 412)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___inputBitmapData;
HXDLIN( 412)			while((_g < _g1->length)){
HXLINE( 412)				HX_VARI(  ::openfl::display::ShaderInput_openfl_display_BitmapData,input) = _g1->__get(_g).StaticCast<  ::openfl::display::ShaderInput_openfl_display_BitmapData >();
HXDLIN( 412)				++_g;
HXLINE( 414)				Bool _hx_tmp = hx::IsNotNull( input->input );
HXDLIN( 414)				if (_hx_tmp) {
HXLINE( 416)					Int _hx_tmp1 = (this->gl->TEXTURE0 + textureCount);
HXDLIN( 416)					this->gl->activeTexture(_hx_tmp1);
HXLINE( 417)					Int _hx_tmp2 = this->gl->TEXTURE_2D;
HXDLIN( 417)					 ::lime::graphics::opengl::GLTexture _hx_tmp3 = input->input->getTexture(this->gl);
HXDLIN( 417)					this->gl->bindTexture(_hx_tmp2,_hx_tmp3);
HXLINE( 419)					Bool _hx_tmp4 = input->smoothing;
HXDLIN( 419)					if (_hx_tmp4) {
HXLINE( 421)						this->gl->texParameteri(this->gl->TEXTURE_2D,this->gl->TEXTURE_MAG_FILTER,this->gl->LINEAR);
HXLINE( 422)						this->gl->texParameteri(this->gl->TEXTURE_2D,this->gl->TEXTURE_MIN_FILTER,this->gl->LINEAR);
            					}
            					else {
HXLINE( 426)						this->gl->texParameteri(this->gl->TEXTURE_2D,this->gl->TEXTURE_MAG_FILTER,this->gl->NEAREST);
HXLINE( 427)						this->gl->texParameteri(this->gl->TEXTURE_2D,this->gl->TEXTURE_MIN_FILTER,this->gl->NEAREST);
            					}
            				}
HXLINE( 433)				++textureCount;
            			}
            		}
HXLINE( 437)		HX_VARI(  ::Dynamic,index) = (int)0;
HXLINE( 439)		{
HXLINE( 439)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 439)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___paramBool;
HXDLIN( 439)			while((_g2 < _g11->length)){
HXLINE( 439)				HX_VARI(  ::openfl::display::ShaderParameter_Bool,parameter) = _g11->__get(_g2).StaticCast<  ::openfl::display::ShaderParameter_Bool >();
HXDLIN( 439)				++_g2;
HXLINE( 441)				HX_VARI( ::Array< Bool >,value) = parameter->value;
HXLINE( 442)				index = parameter->index;
HXLINE( 444)				Bool _hx_tmp5 = hx::IsNotNull( value );
HXDLIN( 444)				if (_hx_tmp5) {
HXLINE( 446)					HX_VARI_NAME(  ::Dynamic,_g21,"_g2") = parameter->type;
HXDLIN( 446)					 ::Dynamic _hx_switch_0 = _g21;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE( 450)						Int _hx_tmp6;
HXDLIN( 450)						if (value->__get((int)0)) {
HXLINE( 450)							_hx_tmp6 = (int)1;
            						}
            						else {
HXLINE( 450)							_hx_tmp6 = (int)0;
            						}
HXDLIN( 450)						this->gl->uniform1i(index,_hx_tmp6);
HXDLIN( 450)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_0==(int)1) ){
HXLINE( 454)						Int _hx_tmp7;
HXDLIN( 454)						if (value->__get((int)0)) {
HXLINE( 454)							_hx_tmp7 = (int)1;
            						}
            						else {
HXLINE( 454)							_hx_tmp7 = (int)0;
            						}
HXDLIN( 454)						Int _hx_tmp8;
HXDLIN( 454)						if (value->__get((int)1)) {
HXLINE( 454)							_hx_tmp8 = (int)1;
            						}
            						else {
HXLINE( 454)							_hx_tmp8 = (int)0;
            						}
HXDLIN( 454)						this->gl->uniform2i(index,_hx_tmp7,_hx_tmp8);
HXDLIN( 454)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE( 458)						Int _hx_tmp9;
HXDLIN( 458)						if (value->__get((int)0)) {
HXLINE( 458)							_hx_tmp9 = (int)1;
            						}
            						else {
HXLINE( 458)							_hx_tmp9 = (int)0;
            						}
HXDLIN( 458)						Int _hx_tmp10;
HXDLIN( 458)						if (value->__get((int)1)) {
HXLINE( 458)							_hx_tmp10 = (int)1;
            						}
            						else {
HXLINE( 458)							_hx_tmp10 = (int)0;
            						}
HXDLIN( 458)						Int _hx_tmp11;
HXDLIN( 458)						if (value->__get((int)2)) {
HXLINE( 458)							_hx_tmp11 = (int)1;
            						}
            						else {
HXLINE( 458)							_hx_tmp11 = (int)0;
            						}
HXDLIN( 458)						this->gl->uniform3i(index,_hx_tmp9,_hx_tmp10,_hx_tmp11);
HXDLIN( 458)						goto _hx_goto_13;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE( 462)						Int _hx_tmp12;
HXDLIN( 462)						if (value->__get((int)0)) {
HXLINE( 462)							_hx_tmp12 = (int)1;
            						}
            						else {
HXLINE( 462)							_hx_tmp12 = (int)0;
            						}
HXDLIN( 462)						Int _hx_tmp13;
HXDLIN( 462)						if (value->__get((int)1)) {
HXLINE( 462)							_hx_tmp13 = (int)1;
            						}
            						else {
HXLINE( 462)							_hx_tmp13 = (int)0;
            						}
HXDLIN( 462)						Int _hx_tmp14;
HXDLIN( 462)						if (value->__get((int)2)) {
HXLINE( 462)							_hx_tmp14 = (int)1;
            						}
            						else {
HXLINE( 462)							_hx_tmp14 = (int)0;
            						}
HXDLIN( 462)						Int _hx_tmp15;
HXDLIN( 462)						if (value->__get((int)3)) {
HXLINE( 462)							_hx_tmp15 = (int)1;
            						}
            						else {
HXLINE( 462)							_hx_tmp15 = (int)0;
            						}
HXDLIN( 462)						this->gl->uniform4i(index,_hx_tmp12,_hx_tmp13,_hx_tmp14,_hx_tmp15);
HXDLIN( 462)						goto _hx_goto_13;
            					}
            					/* default */{
            					}
            					_hx_goto_13:;
            				}
            				else {
HXLINE( 468)					Bool _hx_tmp16 = !(( (Bool)(this->_hx___isUniform->get(parameter->name)) ));
HXDLIN( 468)					if (_hx_tmp16) {
HXLINE( 470)						this->gl->enableVertexAttribArray(parameter->index);
            					}
            				}
            			}
            		}
HXLINE( 476)		{
HXLINE( 476)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 476)			HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = this->_hx___paramFloat;
HXDLIN( 476)			while((_g3 < _g12->length)){
HXLINE( 476)				HX_VARI_NAME(  ::openfl::display::ShaderParameter_Float,parameter1,"parameter") = _g12->__get(_g3).StaticCast<  ::openfl::display::ShaderParameter_Float >();
HXDLIN( 476)				++_g3;
HXLINE( 478)				HX_VARI_NAME( ::Array< Float >,value1,"value") = parameter1->value;
HXLINE( 479)				index = parameter1->index;
HXLINE( 481)				Bool _hx_tmp17 = hx::IsNotNull( value1 );
HXDLIN( 481)				if (_hx_tmp17) {
HXLINE( 483)					HX_VARI_NAME(  ::Dynamic,_g22,"_g2") = parameter1->type;
HXDLIN( 483)					 ::Dynamic _hx_switch_1 = _g22;
            					if (  (_hx_switch_1==(int)4) ){
HXLINE( 487)						Float _hx_tmp18 = value1->__get((int)0);
HXDLIN( 487)						this->gl->uniform1f(index,_hx_tmp18);
HXDLIN( 487)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_1==(int)5) ){
HXLINE( 491)						Float _hx_tmp19 = value1->__get((int)0);
HXDLIN( 491)						Float _hx_tmp20 = value1->__get((int)1);
HXDLIN( 491)						this->gl->uniform2f(index,_hx_tmp19,_hx_tmp20);
HXDLIN( 491)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_1==(int)6) ){
HXLINE( 495)						Float _hx_tmp21 = value1->__get((int)0);
HXDLIN( 495)						Float _hx_tmp22 = value1->__get((int)1);
HXDLIN( 495)						Float _hx_tmp23 = value1->__get((int)2);
HXDLIN( 495)						this->gl->uniform3f(index,_hx_tmp21,_hx_tmp22,_hx_tmp23);
HXDLIN( 495)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_1==(int)7) ){
HXLINE( 499)						Float _hx_tmp24 = value1->__get((int)0);
HXDLIN( 499)						Float _hx_tmp25 = value1->__get((int)1);
HXDLIN( 499)						Float _hx_tmp26 = value1->__get((int)2);
HXDLIN( 499)						Float _hx_tmp27 = value1->__get((int)3);
HXDLIN( 499)						this->gl->uniform4f(index,_hx_tmp24,_hx_tmp25,_hx_tmp26,_hx_tmp27);
HXDLIN( 499)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_1==(int)12) ){
HXLINE( 503)						{
HXLINE( 503)							HX_VARI_NAME( Int,_g23,"_g2") = (int)0;
HXDLIN( 503)							while((_g23 < (int)4)){
HXLINE( 503)								HX_VARI( Int,i) = _g23++;
HXLINE( 505)								{
HXLINE( 505)									HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = this->_hx___uniformMatrix2;
HXDLIN( 505)									HX_VARI( Float,val) = value1->__get(i);
HXDLIN( 505)									{
HXLINE( 505)										Int byteOffset = (this1->byteOffset + (i * (int)4));
HXDLIN( 505)										::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
            									}
            								}
            							}
            						}
HXLINE( 509)						this->gl->uniformMatrix2fv(index,false,this->_hx___uniformMatrix2);
HXLINE( 501)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_1==(int)16) ){
HXLINE( 517)						{
HXLINE( 517)							HX_VARI_NAME( Int,_g24,"_g2") = (int)0;
HXDLIN( 517)							while((_g24 < (int)9)){
HXLINE( 517)								HX_VARI_NAME( Int,i1,"i") = _g24++;
HXLINE( 519)								{
HXLINE( 519)									HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = this->_hx___uniformMatrix3;
HXDLIN( 519)									HX_VARI_NAME( Float,val1,"val") = value1->__get(i1);
HXDLIN( 519)									{
HXLINE( 519)										Int byteOffset1 = (this2->byteOffset + (i1 * (int)4));
HXDLIN( 519)										::__hxcpp_memory_set_float(this2->buffer->b,byteOffset1,val1);
            									}
            								}
            							}
            						}
HXLINE( 523)						this->gl->uniformMatrix3fv(index,false,this->_hx___uniformMatrix3);
HXLINE( 515)						goto _hx_goto_15;
            					}
            					if (  (_hx_switch_1==(int)20) ){
HXLINE( 531)						{
HXLINE( 531)							HX_VARI_NAME( Int,_g25,"_g2") = (int)0;
HXDLIN( 531)							while((_g25 < (int)16)){
HXLINE( 531)								HX_VARI_NAME( Int,i2,"i") = _g25++;
HXLINE( 533)								{
HXLINE( 533)									HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = this->_hx___uniformMatrix4;
HXDLIN( 533)									HX_VARI_NAME( Float,val2,"val") = value1->__get(i2);
HXDLIN( 533)									{
HXLINE( 533)										Int byteOffset2 = (this3->byteOffset + (i2 * (int)4));
HXDLIN( 533)										::__hxcpp_memory_set_float(this3->buffer->b,byteOffset2,val2);
            									}
            								}
            							}
            						}
HXLINE( 537)						this->gl->uniformMatrix4fv(index,false,this->_hx___uniformMatrix4);
HXLINE( 529)						goto _hx_goto_15;
            					}
            					/* default */{
            					}
            					_hx_goto_15:;
            				}
            				else {
HXLINE( 543)					Bool _hx_tmp28 = !(( (Bool)(this->_hx___isUniform->get(parameter1->name)) ));
HXDLIN( 543)					if (_hx_tmp28) {
HXLINE( 545)						this->gl->enableVertexAttribArray(parameter1->index);
            					}
            				}
            			}
            		}
HXLINE( 551)		{
HXLINE( 551)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 551)			HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = this->_hx___paramInt;
HXDLIN( 551)			while((_g4 < _g13->length)){
HXLINE( 551)				HX_VARI_NAME(  ::openfl::display::ShaderParameter_Int,parameter2,"parameter") = _g13->__get(_g4).StaticCast<  ::openfl::display::ShaderParameter_Int >();
HXDLIN( 551)				++_g4;
HXLINE( 553)				HX_VARI_NAME( ::Array< Int >,value2,"value") = parameter2->value;
HXLINE( 555)				Bool _hx_tmp29 = hx::IsNotNull( value2 );
HXDLIN( 555)				if (_hx_tmp29) {
HXLINE( 557)					HX_VARI_NAME(  ::Dynamic,_g26,"_g2") = parameter2->type;
HXDLIN( 557)					 ::Dynamic _hx_switch_2 = _g26;
            					if (  (_hx_switch_2==(int)8) ){
HXLINE( 561)						Int _hx_tmp30 = value2->__get((int)0);
HXDLIN( 561)						this->gl->uniform1i(index,_hx_tmp30);
HXDLIN( 561)						goto _hx_goto_20;
            					}
            					if (  (_hx_switch_2==(int)9) ){
HXLINE( 565)						Int _hx_tmp31 = value2->__get((int)0);
HXDLIN( 565)						Int _hx_tmp32 = value2->__get((int)1);
HXDLIN( 565)						this->gl->uniform2i(index,_hx_tmp31,_hx_tmp32);
HXDLIN( 565)						goto _hx_goto_20;
            					}
            					if (  (_hx_switch_2==(int)10) ){
HXLINE( 569)						Int _hx_tmp33 = value2->__get((int)0);
HXDLIN( 569)						Int _hx_tmp34 = value2->__get((int)1);
HXDLIN( 569)						Int _hx_tmp35 = value2->__get((int)2);
HXDLIN( 569)						this->gl->uniform3i(index,_hx_tmp33,_hx_tmp34,_hx_tmp35);
HXDLIN( 569)						goto _hx_goto_20;
            					}
            					if (  (_hx_switch_2==(int)11) ){
HXLINE( 573)						Int _hx_tmp36 = value2->__get((int)0);
HXDLIN( 573)						Int _hx_tmp37 = value2->__get((int)1);
HXDLIN( 573)						Int _hx_tmp38 = value2->__get((int)2);
HXDLIN( 573)						Int _hx_tmp39 = value2->__get((int)3);
HXDLIN( 573)						this->gl->uniform4i(index,_hx_tmp36,_hx_tmp37,_hx_tmp38,_hx_tmp39);
HXDLIN( 573)						goto _hx_goto_20;
            					}
            					/* default */{
            					}
            					_hx_goto_20:;
            				}
            				else {
HXLINE( 579)					Bool _hx_tmp40 = !(( (Bool)(this->_hx___isUniform->get(parameter2->name)) ));
HXDLIN( 579)					if (_hx_tmp40) {
HXLINE( 581)						this->gl->enableVertexAttribArray(parameter2->index);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,_hx___updateGL,(void))

 ::openfl::display::ShaderData Shader_obj::get_data(){
            	HX_STACK_FRAME("openfl.display.Shader","get_data",0xb0c636f2,"openfl.display.Shader.get_data","openfl/display/Shader.hx",597,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 599)		Bool _hx_tmp;
HXDLIN( 599)		if (!(this->_hx___glSourceDirty)) {
HXLINE( 599)			_hx_tmp = hx::IsNull( this->_hx___data );
            		}
            		else {
HXLINE( 599)			_hx_tmp = true;
            		}
HXDLIN( 599)		if (_hx_tmp) {
HXLINE( 601)			this->_hx___init();
            		}
HXLINE( 605)		return this->_hx___data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_data,return )

 ::openfl::display::ShaderData Shader_obj::set_data( ::openfl::display::ShaderData value){
            	HX_STACK_FRAME("openfl.display.Shader","set_data",0x5f239066,"openfl.display.Shader.set_data","openfl/display/Shader.hx",612,0xae8f5dcd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 612)		return (this->_hx___data = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_data,return )

::String Shader_obj::get_glFragmentSource(){
            	HX_STACK_FRAME("openfl.display.Shader","get_glFragmentSource",0x5d5fb298,"openfl.display.Shader.get_glFragmentSource","openfl/display/Shader.hx",619,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 619)		return this->_hx___glFragmentSource;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_glFragmentSource,return )

::String Shader_obj::set_glFragmentSource(::String value){
            	HX_STACK_FRAME("openfl.display.Shader","set_glFragmentSource",0x2a176a0c,"openfl.display.Shader.set_glFragmentSource","openfl/display/Shader.hx",624,0xae8f5dcd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 626)		if ((value != this->_hx___glFragmentSource)) {
HXLINE( 628)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 632)		return (this->_hx___glFragmentSource = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_glFragmentSource,return )

::String Shader_obj::get_glVertexSource(){
            	HX_STACK_FRAME("openfl.display.Shader","get_glVertexSource",0xa3c917ec,"openfl.display.Shader.get_glVertexSource","openfl/display/Shader.hx",639,0xae8f5dcd)
            	HX_STACK_THIS(this)
HXLINE( 639)		return this->_hx___glVertexSource;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,get_glVertexSource,return )

::String Shader_obj::set_glVertexSource(::String value){
            	HX_STACK_FRAME("openfl.display.Shader","set_glVertexSource",0x80784a60,"openfl.display.Shader.set_glVertexSource","openfl/display/Shader.hx",644,0xae8f5dcd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 646)		if ((value != this->_hx___glFragmentSource)) {
HXLINE( 648)			this->_hx___glSourceDirty = true;
            		}
HXLINE( 652)		return (this->_hx___glFragmentSource = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,set_glVertexSource,return )


Shader_obj::Shader_obj()
{
}

void Shader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shader);
	HX_MARK_MEMBER_NAME(byteCode,"byteCode");
	HX_MARK_MEMBER_NAME(glProgram,"glProgram");
	HX_MARK_MEMBER_NAME(precisionHint,"precisionHint");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(_hx___data,"__data");
	HX_MARK_MEMBER_NAME(_hx___glFragmentSource,"__glFragmentSource");
	HX_MARK_MEMBER_NAME(_hx___glSourceDirty,"__glSourceDirty");
	HX_MARK_MEMBER_NAME(_hx___glVertexSource,"__glVertexSource");
	HX_MARK_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_MARK_MEMBER_NAME(_hx___inputBitmapData,"__inputBitmapData");
	HX_MARK_MEMBER_NAME(_hx___numPasses,"__numPasses");
	HX_MARK_MEMBER_NAME(_hx___paramBool,"__paramBool");
	HX_MARK_MEMBER_NAME(_hx___paramFloat,"__paramFloat");
	HX_MARK_MEMBER_NAME(_hx___paramInt,"__paramInt");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix2,"__uniformMatrix2");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix3,"__uniformMatrix3");
	HX_MARK_MEMBER_NAME(_hx___uniformMatrix4,"__uniformMatrix4");
	HX_MARK_END_CLASS();
}

void Shader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(byteCode,"byteCode");
	HX_VISIT_MEMBER_NAME(glProgram,"glProgram");
	HX_VISIT_MEMBER_NAME(precisionHint,"precisionHint");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(_hx___data,"__data");
	HX_VISIT_MEMBER_NAME(_hx___glFragmentSource,"__glFragmentSource");
	HX_VISIT_MEMBER_NAME(_hx___glSourceDirty,"__glSourceDirty");
	HX_VISIT_MEMBER_NAME(_hx___glVertexSource,"__glVertexSource");
	HX_VISIT_MEMBER_NAME(_hx___isUniform,"__isUniform");
	HX_VISIT_MEMBER_NAME(_hx___inputBitmapData,"__inputBitmapData");
	HX_VISIT_MEMBER_NAME(_hx___numPasses,"__numPasses");
	HX_VISIT_MEMBER_NAME(_hx___paramBool,"__paramBool");
	HX_VISIT_MEMBER_NAME(_hx___paramFloat,"__paramFloat");
	HX_VISIT_MEMBER_NAME(_hx___paramInt,"__paramInt");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix2,"__uniformMatrix2");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix3,"__uniformMatrix3");
	HX_VISIT_MEMBER_NAME(_hx___uniformMatrix4,"__uniformMatrix4");
}

hx::Val Shader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_data()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__data") ) { return hx::Val( _hx___data); }
		if (HX_FIELD_EQ(inName,"__init") ) { return hx::Val( _hx___init_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"byteCode") ) { return hx::Val( byteCode); }
		if (HX_FIELD_EQ(inName,"__enable") ) { return hx::Val( _hx___enable_dyn()); }
		if (HX_FIELD_EQ(inName,"__initGL") ) { return hx::Val( _hx___initGL_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		if (HX_FIELD_EQ(inName,"get_data") ) { return hx::Val( get_data_dyn()); }
		if (HX_FIELD_EQ(inName,"set_data") ) { return hx::Val( set_data_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { return hx::Val( glProgram); }
		if (HX_FIELD_EQ(inName,"__disable") ) { return hx::Val( _hx___disable_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__paramInt") ) { return hx::Val( _hx___paramInt); }
		if (HX_FIELD_EQ(inName,"__enableGL") ) { return hx::Val( _hx___enableGL_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateGL") ) { return hx::Val( _hx___updateGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { return hx::Val( _hx___isUniform); }
		if (HX_FIELD_EQ(inName,"__numPasses") ) { return hx::Val( _hx___numPasses); }
		if (HX_FIELD_EQ(inName,"__paramBool") ) { return hx::Val( _hx___paramBool); }
		if (HX_FIELD_EQ(inName,"__disableGL") ) { return hx::Val( _hx___disableGL_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__paramFloat") ) { return hx::Val( _hx___paramFloat); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"precisionHint") ) { return hx::Val( precisionHint); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glVertexSource") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_glVertexSource()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__glSourceDirty") ) { return hx::Val( _hx___glSourceDirty); }
		if (HX_FIELD_EQ(inName,"__processGLData") ) { return hx::Val( _hx___processGLData_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"glFragmentSource") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_glFragmentSource()); }
		if (HX_FIELD_EQ(inName,"__glVertexSource") ) { return hx::Val( _hx___glVertexSource); }
		if (HX_FIELD_EQ(inName,"__uniformMatrix2") ) { return hx::Val( _hx___uniformMatrix2); }
		if (HX_FIELD_EQ(inName,"__uniformMatrix3") ) { return hx::Val( _hx___uniformMatrix3); }
		if (HX_FIELD_EQ(inName,"__uniformMatrix4") ) { return hx::Val( _hx___uniformMatrix4); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__inputBitmapData") ) { return hx::Val( _hx___inputBitmapData); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__glFragmentSource") ) { return hx::Val( _hx___glFragmentSource); }
		if (HX_FIELD_EQ(inName,"get_glVertexSource") ) { return hx::Val( get_glVertexSource_dyn()); }
		if (HX_FIELD_EQ(inName,"set_glVertexSource") ) { return hx::Val( set_glVertexSource_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"get_glFragmentSource") ) { return hx::Val( get_glFragmentSource_dyn()); }
		if (HX_FIELD_EQ(inName,"set_glFragmentSource") ) { return hx::Val( set_glFragmentSource_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Shader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_data(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__data") ) { _hx___data=inValue.Cast<  ::openfl::display::ShaderData >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"byteCode") ) { byteCode=inValue.Cast<  ::openfl::utils::ByteArrayData >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glProgram") ) { glProgram=inValue.Cast<  ::lime::graphics::opengl::GLProgram >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__paramInt") ) { _hx___paramInt=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__isUniform") ) { _hx___isUniform=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__numPasses") ) { _hx___numPasses=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__paramBool") ) { _hx___paramBool=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__paramFloat") ) { _hx___paramFloat=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"precisionHint") ) { precisionHint=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"glVertexSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glVertexSource(inValue) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__glSourceDirty") ) { _hx___glSourceDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"glFragmentSource") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_glFragmentSource(inValue) ); }
		if (HX_FIELD_EQ(inName,"__glVertexSource") ) { _hx___glVertexSource=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uniformMatrix2") ) { _hx___uniformMatrix2=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uniformMatrix3") ) { _hx___uniformMatrix3=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uniformMatrix4") ) { _hx___uniformMatrix4=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__inputBitmapData") ) { _hx___inputBitmapData=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__glFragmentSource") ) { _hx___glFragmentSource=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Shader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("glFragmentSource","\xd0","\xc5","\xca","\xf7"));
	outFields->push(HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1"));
	outFields->push(HX_HCSTRING("glVertexSource","\x24","\x6d","\x4a","\x5b"));
	outFields->push(HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1"));
	outFields->push(HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63"));
	outFields->push(HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41"));
	outFields->push(HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f"));
	outFields->push(HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7"));
	outFields->push(HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64"));
	outFields->push(HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd"));
	outFields->push(HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f"));
	outFields->push(HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab"));
	outFields->push(HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21"));
	outFields->push(HX_HCSTRING("__uniformMatrix2","\x1d","\x03","\x4d","\x81"));
	outFields->push(HX_HCSTRING("__uniformMatrix3","\x1e","\x03","\x4d","\x81"));
	outFields->push(HX_HCSTRING("__uniformMatrix4","\x1f","\x03","\x4d","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::utils::ByteArrayData*/ ,(int)offsetof(Shader_obj,byteCode),HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42")},
	{hx::fsObject /*::lime::graphics::opengl::GLProgram*/ ,(int)offsetof(Shader_obj,glProgram),HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Shader_obj,precisionHint),HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(Shader_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*::openfl::display::ShaderData*/ ,(int)offsetof(Shader_obj,_hx___data),HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1")},
	{hx::fsString,(int)offsetof(Shader_obj,_hx___glFragmentSource),HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63")},
	{hx::fsBool,(int)offsetof(Shader_obj,_hx___glSourceDirty),HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41")},
	{hx::fsString,(int)offsetof(Shader_obj,_hx___glVertexSource),HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Shader_obj,_hx___isUniform),HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___inputBitmapData),HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64")},
	{hx::fsInt,(int)offsetof(Shader_obj,_hx___numPasses),HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramBool),HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramFloat),HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Shader_obj,_hx___paramInt),HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Shader_obj,_hx___uniformMatrix2),HX_HCSTRING("__uniformMatrix2","\x1d","\x03","\x4d","\x81")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Shader_obj,_hx___uniformMatrix3),HX_HCSTRING("__uniformMatrix3","\x1e","\x03","\x4d","\x81")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Shader_obj,_hx___uniformMatrix4),HX_HCSTRING("__uniformMatrix4","\x1f","\x03","\x4d","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Shader_obj_sStaticStorageInfo = 0;
#endif

static ::String Shader_obj_sMemberFields[] = {
	HX_HCSTRING("byteCode","\x55","\x20","\x71","\x42"),
	HX_HCSTRING("glProgram","\xdf","\xd6","\xb3","\xc1"),
	HX_HCSTRING("precisionHint","\xe5","\xb5","\x95","\x2c"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("__data","\x4a","\xb9","\x5b","\xf1"),
	HX_HCSTRING("__glFragmentSource","\xf0","\x58","\x5b","\x63"),
	HX_HCSTRING("__glSourceDirty","\xf2","\xa3","\xef","\x41"),
	HX_HCSTRING("__glVertexSource","\x44","\xf8","\x89","\x8f"),
	HX_HCSTRING("__isUniform","\x4a","\x07","\x8f","\xe7"),
	HX_HCSTRING("__inputBitmapData","\x43","\xdf","\xf6","\x64"),
	HX_HCSTRING("__numPasses","\x45","\x67","\x5f","\xcd"),
	HX_HCSTRING("__paramBool","\x37","\x44","\xb6","\x5f"),
	HX_HCSTRING("__paramFloat","\xef","\x10","\x64","\xab"),
	HX_HCSTRING("__paramInt","\x82","\xcd","\xbd","\x21"),
	HX_HCSTRING("__uniformMatrix2","\x1d","\x03","\x4d","\x81"),
	HX_HCSTRING("__uniformMatrix3","\x1e","\x03","\x4d","\x81"),
	HX_HCSTRING("__uniformMatrix4","\x1f","\x03","\x4d","\x81"),
	HX_HCSTRING("__disable","\xc8","\xba","\xa6","\x32"),
	HX_HCSTRING("__disableGL","\xed","\x3a","\xe1","\x35"),
	HX_HCSTRING("__enable","\xa3","\x19","\xb7","\xa0"),
	HX_HCSTRING("__enableGL","\x88","\x46","\xeb","\x8f"),
	HX_HCSTRING("__init","\x30","\x9e","\xb3","\xf4"),
	HX_HCSTRING("__initGL","\x55","\xc8","\x7b","\x3f"),
	HX_HCSTRING("__processGLData","\x7e","\x0f","\x78","\x7c"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateGL","\x8e","\x8b","\x32","\x1b"),
	HX_HCSTRING("get_data","\xb3","\x11","\x1e","\xc2"),
	HX_HCSTRING("set_data","\x27","\x6b","\x7b","\x70"),
	HX_HCSTRING("get_glFragmentSource","\xd9","\x2a","\x35","\x16"),
	HX_HCSTRING("set_glFragmentSource","\x4d","\xe2","\xec","\xe2"),
	HX_HCSTRING("get_glVertexSource","\xed","\x4d","\xe4","\xf6"),
	HX_HCSTRING("set_glVertexSource","\x61","\x80","\x93","\xd3"),
	::String(null()) };

static void Shader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#endif

hx::Class Shader_obj::__mClass;

void Shader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Shader","\x0f","\xdf","\x61","\xa7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
