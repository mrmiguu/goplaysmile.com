// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters__ColorMatrixFilter_ColorMatrixShader
#include <openfl/filters/_ColorMatrixFilter/ColorMatrixShader.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

static const Float _hx_array_data_2[] = {
	(Float)1,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,
};
namespace openfl{
namespace filters{

void ColorMatrixFilter_obj::__construct(::Array< Float > matrix){
            	HX_STACK_FRAME("openfl.filters.ColorMatrixFilter","new",0x2c3a675d,"openfl.filters.ColorMatrixFilter.new","openfl/filters/ColorMatrixFilter.hx",20,0xb64128b5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE(  22)		super::__construct();
HXLINE(  24)		this->set_matrix(matrix);
HXLINE(  27)		this->_hx___numPasses = (int)0;
            	}

Dynamic ColorMatrixFilter_obj::__CreateEmpty() { return new ColorMatrixFilter_obj; }

hx::ObjectPtr< ColorMatrixFilter_obj > ColorMatrixFilter_obj::__new(::Array< Float > matrix)
{
	hx::ObjectPtr< ColorMatrixFilter_obj > _hx_result = new ColorMatrixFilter_obj();
	_hx_result->__construct(matrix);
	return _hx_result;
}

Dynamic ColorMatrixFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorMatrixFilter_obj > _hx_result = new ColorMatrixFilter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::openfl::filters::BitmapFilter ColorMatrixFilter_obj::clone(){
            	HX_STACK_FRAME("openfl.filters.ColorMatrixFilter","clone",0x2c5b239a,"openfl.filters.ColorMatrixFilter.clone","openfl/filters/ColorMatrixFilter.hx",34,0xb64128b5)
            	HX_STACK_THIS(this)
HXLINE(  34)		return  ::openfl::filters::ColorMatrixFilter_obj::__new(this->matrix);
            	}


void ColorMatrixFilter_obj::_hx___applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::display::BitmapData destBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint){
            	HX_STACK_FRAME("openfl.filters.ColorMatrixFilter","__applyFilter",0xffb635e3,"openfl.filters.ColorMatrixFilter.__applyFilter","openfl/filters/ColorMatrixFilter.hx",39,0xb64128b5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(destBitmapData,"destBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
HXLINE(  48)		HX_VARI(  ::lime::utils::ArrayBufferView,source) = sourceBitmapData->image->get_data();
HXLINE(  49)		HX_VARI(  ::lime::utils::ArrayBufferView,target) = destBitmapData->image->get_data();
HXLINE(  51)		Float _hx_tmp = (destPoint->x - sourceRect->x);
HXDLIN(  51)		HX_VARI( Int,offsetX) = ::Std_obj::_hx_int(_hx_tmp);
HXLINE(  52)		Float _hx_tmp1 = (destPoint->y - sourceRect->y);
HXDLIN(  52)		HX_VARI( Int,offsetY) = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE(  53)		HX_VARI( Int,sourceStride) = (sourceBitmapData->width * (int)4);
HXLINE(  54)		HX_VARI( Int,targetStride) = (destBitmapData->width * (int)4);
HXLINE(  56)		HX_VAR( Int,sourceOffset);
HXLINE(  57)		HX_VAR( Int,targetOffset);
HXLINE(  59)		{
HXLINE(  59)			HX_VARI( Int,_g1) = ::Std_obj::_hx_int(sourceRect->y);
HXDLIN(  59)			HX_VARI( Int,_g) = ::Std_obj::_hx_int(sourceRect->height);
HXDLIN(  59)			while((_g1 < _g)){
HXLINE(  59)				HX_VARI( Int,row) = _g1++;
HXLINE(  61)				{
HXLINE(  61)					HX_VARI( Int,_g3) = ::Std_obj::_hx_int(sourceRect->x);
HXDLIN(  61)					HX_VARI( Int,_g2) = ::Std_obj::_hx_int(sourceRect->width);
HXDLIN(  61)					while((_g3 < _g2)){
HXLINE(  61)						HX_VARI( Int,column) = _g3++;
HXLINE(  63)						sourceOffset = ((row * sourceStride) + (column * (int)4));
HXLINE(  64)						targetOffset = (((row + offsetX) * targetStride) + ((column + offsetY) * (int)4));
HXLINE(  66)						Int byteOffset = (source->byteOffset + sourceOffset);
HXDLIN(  66)						Int _hx_tmp2 = ::__hxcpp_memory_get_byte(source->buffer->b,byteOffset);
HXDLIN(  66)						HX_VARI(  ::Dynamic,srcR) = ((int)_hx_tmp2 & (int)(int)255);
HXLINE(  67)						Int byteOffset1 = (source->byteOffset + (sourceOffset + (int)1));
HXDLIN(  67)						Int _hx_tmp3 = ::__hxcpp_memory_get_byte(source->buffer->b,byteOffset1);
HXDLIN(  67)						HX_VARI(  ::Dynamic,srcG) = ((int)_hx_tmp3 & (int)(int)255);
HXLINE(  68)						Int byteOffset2 = (source->byteOffset + (sourceOffset + (int)2));
HXDLIN(  68)						Int _hx_tmp4 = ::__hxcpp_memory_get_byte(source->buffer->b,byteOffset2);
HXDLIN(  68)						HX_VARI(  ::Dynamic,srcB) = ((int)_hx_tmp4 & (int)(int)255);
HXLINE(  69)						Int byteOffset3 = (source->byteOffset + (sourceOffset + (int)3));
HXDLIN(  69)						Int _hx_tmp5 = ::__hxcpp_memory_get_byte(source->buffer->b,byteOffset3);
HXDLIN(  69)						HX_VARI(  ::Dynamic,srcA) = ((int)_hx_tmp5 & (int)(int)255);
HXLINE(  71)						{
HXLINE(  71)							HX_VARI_NAME( Int,_hx_int,"int") = srcR;
HXDLIN(  71)							Float _hx_tmp6;
HXDLIN(  71)							if ((_hx_int < (int)0)) {
HXLINE(  71)								_hx_tmp6 = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(  71)								_hx_tmp6 = (_hx_int + ((Float)0.0));
            							}
HXDLIN(  71)							Float _hx_tmp7 = (_hx_tmp6 * this->matrix->__get((int)0));
HXDLIN(  71)							HX_VARI_NAME( Int,int1,"int") = srcG;
HXDLIN(  71)							Float _hx_tmp8;
HXDLIN(  71)							if ((int1 < (int)0)) {
HXLINE(  71)								_hx_tmp8 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(  71)								_hx_tmp8 = (int1 + ((Float)0.0));
            							}
HXDLIN(  71)							Float _hx_tmp9 = (_hx_tmp7 + (_hx_tmp8 * this->matrix->__get((int)1)));
HXDLIN(  71)							HX_VARI_NAME( Int,int2,"int") = srcB;
HXDLIN(  71)							Float _hx_tmp10;
HXDLIN(  71)							if ((int2 < (int)0)) {
HXLINE(  71)								_hx_tmp10 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(  71)								_hx_tmp10 = (int2 + ((Float)0.0));
            							}
HXDLIN(  71)							Float _hx_tmp11 = (_hx_tmp9 + (_hx_tmp10 * this->matrix->__get((int)2)));
HXDLIN(  71)							HX_VARI_NAME( Int,int3,"int") = srcA;
HXDLIN(  71)							Float _hx_tmp12;
HXDLIN(  71)							if ((int3 < (int)0)) {
HXLINE(  71)								_hx_tmp12 = (((Float)4294967296.0) + int3);
            							}
            							else {
HXLINE(  71)								_hx_tmp12 = (int3 + ((Float)0.0));
            							}
HXDLIN(  71)							Float _hx_tmp13 = ((_hx_tmp11 + (_hx_tmp12 * this->matrix->__get((int)3))) + this->matrix->__get((int)4));
HXDLIN(  71)							HX_VARI( Int,val) = ::Std_obj::_hx_int(_hx_tmp13);
HXDLIN(  71)							{
HXLINE(  71)								Int byteOffset4 = (target->byteOffset + targetOffset);
HXDLIN(  71)								::__hxcpp_memory_set_byte(target->buffer->b,byteOffset4,val);
            							}
            						}
HXLINE(  72)						{
HXLINE(  72)							HX_VARI_NAME( Int,int4,"int") = srcR;
HXDLIN(  72)							Float _hx_tmp14;
HXDLIN(  72)							if ((int4 < (int)0)) {
HXLINE(  72)								_hx_tmp14 = (((Float)4294967296.0) + int4);
            							}
            							else {
HXLINE(  72)								_hx_tmp14 = (int4 + ((Float)0.0));
            							}
HXDLIN(  72)							Float _hx_tmp15 = (_hx_tmp14 * this->matrix->__get((int)5));
HXDLIN(  72)							HX_VARI_NAME( Int,int5,"int") = srcG;
HXDLIN(  72)							Float _hx_tmp16;
HXDLIN(  72)							if ((int5 < (int)0)) {
HXLINE(  72)								_hx_tmp16 = (((Float)4294967296.0) + int5);
            							}
            							else {
HXLINE(  72)								_hx_tmp16 = (int5 + ((Float)0.0));
            							}
HXDLIN(  72)							Float _hx_tmp17 = (_hx_tmp15 + (_hx_tmp16 * this->matrix->__get((int)6)));
HXDLIN(  72)							HX_VARI_NAME( Int,int6,"int") = srcB;
HXDLIN(  72)							Float _hx_tmp18;
HXDLIN(  72)							if ((int6 < (int)0)) {
HXLINE(  72)								_hx_tmp18 = (((Float)4294967296.0) + int6);
            							}
            							else {
HXLINE(  72)								_hx_tmp18 = (int6 + ((Float)0.0));
            							}
HXDLIN(  72)							Float _hx_tmp19 = (_hx_tmp17 + (_hx_tmp18 * this->matrix->__get((int)7)));
HXDLIN(  72)							HX_VARI_NAME( Int,int7,"int") = srcA;
HXDLIN(  72)							Float _hx_tmp20;
HXDLIN(  72)							if ((int7 < (int)0)) {
HXLINE(  72)								_hx_tmp20 = (((Float)4294967296.0) + int7);
            							}
            							else {
HXLINE(  72)								_hx_tmp20 = (int7 + ((Float)0.0));
            							}
HXDLIN(  72)							Float _hx_tmp21 = ((_hx_tmp19 + (_hx_tmp20 * this->matrix->__get((int)8))) + this->matrix->__get((int)9));
HXDLIN(  72)							HX_VARI_NAME( Int,val1,"val") = ::Std_obj::_hx_int(_hx_tmp21);
HXDLIN(  72)							{
HXLINE(  72)								Int byteOffset5 = (target->byteOffset + (targetOffset + (int)1));
HXDLIN(  72)								::__hxcpp_memory_set_byte(target->buffer->b,byteOffset5,val1);
            							}
            						}
HXLINE(  73)						{
HXLINE(  73)							HX_VARI_NAME( Int,int8,"int") = srcR;
HXDLIN(  73)							Float _hx_tmp22;
HXDLIN(  73)							if ((int8 < (int)0)) {
HXLINE(  73)								_hx_tmp22 = (((Float)4294967296.0) + int8);
            							}
            							else {
HXLINE(  73)								_hx_tmp22 = (int8 + ((Float)0.0));
            							}
HXDLIN(  73)							Float _hx_tmp23 = (_hx_tmp22 * this->matrix->__get((int)10));
HXDLIN(  73)							HX_VARI_NAME( Int,int9,"int") = srcG;
HXDLIN(  73)							Float _hx_tmp24;
HXDLIN(  73)							if ((int9 < (int)0)) {
HXLINE(  73)								_hx_tmp24 = (((Float)4294967296.0) + int9);
            							}
            							else {
HXLINE(  73)								_hx_tmp24 = (int9 + ((Float)0.0));
            							}
HXDLIN(  73)							Float _hx_tmp25 = (_hx_tmp23 + (_hx_tmp24 * this->matrix->__get((int)11)));
HXDLIN(  73)							HX_VARI_NAME( Int,int10,"int") = srcB;
HXDLIN(  73)							Float _hx_tmp26;
HXDLIN(  73)							if ((int10 < (int)0)) {
HXLINE(  73)								_hx_tmp26 = (((Float)4294967296.0) + int10);
            							}
            							else {
HXLINE(  73)								_hx_tmp26 = (int10 + ((Float)0.0));
            							}
HXDLIN(  73)							Float _hx_tmp27 = (_hx_tmp25 + (_hx_tmp26 * this->matrix->__get((int)12)));
HXDLIN(  73)							HX_VARI_NAME( Int,int11,"int") = srcA;
HXDLIN(  73)							Float _hx_tmp28;
HXDLIN(  73)							if ((int11 < (int)0)) {
HXLINE(  73)								_hx_tmp28 = (((Float)4294967296.0) + int11);
            							}
            							else {
HXLINE(  73)								_hx_tmp28 = (int11 + ((Float)0.0));
            							}
HXDLIN(  73)							Float _hx_tmp29 = ((_hx_tmp27 + (_hx_tmp28 * this->matrix->__get((int)13))) + this->matrix->__get((int)14));
HXDLIN(  73)							HX_VARI_NAME( Int,val2,"val") = ::Std_obj::_hx_int(_hx_tmp29);
HXDLIN(  73)							{
HXLINE(  73)								Int byteOffset6 = (target->byteOffset + (targetOffset + (int)2));
HXDLIN(  73)								::__hxcpp_memory_set_byte(target->buffer->b,byteOffset6,val2);
            							}
            						}
HXLINE(  74)						{
HXLINE(  74)							HX_VARI_NAME( Int,int12,"int") = srcR;
HXDLIN(  74)							Float _hx_tmp30;
HXDLIN(  74)							if ((int12 < (int)0)) {
HXLINE(  74)								_hx_tmp30 = (((Float)4294967296.0) + int12);
            							}
            							else {
HXLINE(  74)								_hx_tmp30 = (int12 + ((Float)0.0));
            							}
HXDLIN(  74)							Float _hx_tmp31 = (_hx_tmp30 * this->matrix->__get((int)15));
HXDLIN(  74)							HX_VARI_NAME( Int,int13,"int") = srcG;
HXDLIN(  74)							Float _hx_tmp32;
HXDLIN(  74)							if ((int13 < (int)0)) {
HXLINE(  74)								_hx_tmp32 = (((Float)4294967296.0) + int13);
            							}
            							else {
HXLINE(  74)								_hx_tmp32 = (int13 + ((Float)0.0));
            							}
HXDLIN(  74)							Float _hx_tmp33 = (_hx_tmp31 + (_hx_tmp32 * this->matrix->__get((int)16)));
HXDLIN(  74)							HX_VARI_NAME( Int,int14,"int") = srcB;
HXDLIN(  74)							Float _hx_tmp34;
HXDLIN(  74)							if ((int14 < (int)0)) {
HXLINE(  74)								_hx_tmp34 = (((Float)4294967296.0) + int14);
            							}
            							else {
HXLINE(  74)								_hx_tmp34 = (int14 + ((Float)0.0));
            							}
HXDLIN(  74)							Float _hx_tmp35 = (_hx_tmp33 + (_hx_tmp34 * this->matrix->__get((int)17)));
HXDLIN(  74)							HX_VARI_NAME( Int,int15,"int") = srcA;
HXDLIN(  74)							Float _hx_tmp36;
HXDLIN(  74)							if ((int15 < (int)0)) {
HXLINE(  74)								_hx_tmp36 = (((Float)4294967296.0) + int15);
            							}
            							else {
HXLINE(  74)								_hx_tmp36 = (int15 + ((Float)0.0));
            							}
HXDLIN(  74)							Float _hx_tmp37 = ((_hx_tmp35 + (_hx_tmp36 * this->matrix->__get((int)18))) + this->matrix->__get((int)19));
HXDLIN(  74)							HX_VARI_NAME( Int,val3,"val") = ::Std_obj::_hx_int(_hx_tmp37);
HXDLIN(  74)							{
HXLINE(  74)								Int byteOffset7 = (target->byteOffset + (targetOffset + (int)3));
HXDLIN(  74)								::__hxcpp_memory_set_byte(target->buffer->b,byteOffset7,val3);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  80)		destBitmapData->image->dirty = true;
            	}


 ::openfl::display::Shader ColorMatrixFilter_obj::_hx___initShader( ::openfl::_internal::renderer::RenderSession renderSession,Int pass){
            	HX_STACK_FRAME("openfl.filters.ColorMatrixFilter","__initShader",0x2d28b6d8,"openfl.filters.ColorMatrixFilter.__initShader","openfl/filters/ColorMatrixFilter.hx",85,0xb64128b5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(pass,"pass")
HXLINE(  87)		::openfl::filters::ColorMatrixFilter_obj::_hx___colorMatrixShader->init(this->matrix);
HXLINE(  88)		return ::openfl::filters::ColorMatrixFilter_obj::_hx___colorMatrixShader;
            	}


::Array< Float > ColorMatrixFilter_obj::set_matrix(::Array< Float > value){
            	HX_STACK_FRAME("openfl.filters.ColorMatrixFilter","set_matrix",0x82603721,"openfl.filters.ColorMatrixFilter.set_matrix","openfl/filters/ColorMatrixFilter.hx",100,0xb64128b5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 102)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 104)			value = ::Array_obj< Float >::fromData( _hx_array_data_2,20);
            		}
HXLINE( 108)		return (this->matrix = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrixFilter_obj,set_matrix,return )

 ::openfl::filters::_ColorMatrixFilter::ColorMatrixShader ColorMatrixFilter_obj::_hx___colorMatrixShader;


ColorMatrixFilter_obj::ColorMatrixFilter_obj()
{
}

void ColorMatrixFilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorMatrixFilter);
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_END_CLASS();
}

void ColorMatrixFilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
}

hx::Val ColorMatrixFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_matrix") ) { return hx::Val( set_matrix_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initShader") ) { return hx::Val( _hx___initShader_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__applyFilter") ) { return hx::Val( _hx___applyFilter_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ColorMatrixFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__colorMatrixShader") ) { outValue = _hx___colorMatrixShader; return true; }
	}
	return false;
}

hx::Val ColorMatrixFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_matrix(inValue) );matrix=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ColorMatrixFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__colorMatrixShader") ) { _hx___colorMatrixShader=ioValue.Cast<  ::openfl::filters::_ColorMatrixFilter::ColorMatrixShader >(); return true; }
	}
	return false;
}

void ColorMatrixFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ColorMatrixFilter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ColorMatrixFilter_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ColorMatrixFilter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::filters::_ColorMatrixFilter::ColorMatrixShader*/ ,(void *) &ColorMatrixFilter_obj::_hx___colorMatrixShader,HX_HCSTRING("__colorMatrixShader","\x29","\xff","\xb1","\xf9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ColorMatrixFilter_obj_sMemberFields[] = {
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("__applyFilter","\xa6","\x20","\xa8","\x09"),
	HX_HCSTRING("__initShader","\x75","\x95","\xf9","\x59"),
	HX_HCSTRING("set_matrix","\x7e","\x44","\xcd","\xaf"),
	::String(null()) };

static void ColorMatrixFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorMatrixFilter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ColorMatrixFilter_obj::_hx___colorMatrixShader,"__colorMatrixShader");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorMatrixFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorMatrixFilter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ColorMatrixFilter_obj::_hx___colorMatrixShader,"__colorMatrixShader");
};

#endif

hx::Class ColorMatrixFilter_obj::__mClass;

static ::String ColorMatrixFilter_obj_sStaticFields[] = {
	HX_HCSTRING("__colorMatrixShader","\x29","\xff","\xb1","\xf9"),
	::String(null())
};

void ColorMatrixFilter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters.ColorMatrixFilter","\xeb","\x74","\x0a","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorMatrixFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &ColorMatrixFilter_obj::__SetStatic;
	__mClass->mMarkFunc = ColorMatrixFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ColorMatrixFilter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColorMatrixFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColorMatrixFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorMatrixFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorMatrixFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorMatrixFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColorMatrixFilter_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.filters.ColorMatrixFilter","boot",0x7ef90a95,"openfl.filters.ColorMatrixFilter.boot","openfl/filters/ColorMatrixFilter.hx",15,0xb64128b5)
HXLINE(  15)		_hx___colorMatrixShader =  ::openfl::filters::_ColorMatrixFilter::ColorMatrixShader_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace filters
