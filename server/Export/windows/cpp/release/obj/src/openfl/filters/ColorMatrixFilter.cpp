// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_ColorMatrixFilter
#include <openfl/filters/ColorMatrixFilter.h>
#endif
#ifndef INCLUDED_openfl_filters__ColorMatrixFilter_ColorMatrixShader
#include <openfl/filters/_ColorMatrixFilter/ColorMatrixShader.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7545faed7dab6ee1_20_new,"openfl.filters.ColorMatrixFilter","new",0x2c3a675d,"openfl.filters.ColorMatrixFilter.new","openfl/filters/ColorMatrixFilter.hx",20,0xb64128b5)
HX_DEFINE_STACK_FRAME(_hx_pos_7545faed7dab6ee1_34_clone,"openfl.filters.ColorMatrixFilter","clone",0x2c5b239a,"openfl.filters.ColorMatrixFilter.clone","openfl/filters/ColorMatrixFilter.hx",34,0xb64128b5)
HX_DEFINE_STACK_FRAME(_hx_pos_7545faed7dab6ee1_39___applyFilter,"openfl.filters.ColorMatrixFilter","__applyFilter",0xffb635e3,"openfl.filters.ColorMatrixFilter.__applyFilter","openfl/filters/ColorMatrixFilter.hx",39,0xb64128b5)
HX_DEFINE_STACK_FRAME(_hx_pos_7545faed7dab6ee1_85___initShader,"openfl.filters.ColorMatrixFilter","__initShader",0x2d28b6d8,"openfl.filters.ColorMatrixFilter.__initShader","openfl/filters/ColorMatrixFilter.hx",85,0xb64128b5)
HX_DEFINE_STACK_FRAME(_hx_pos_7545faed7dab6ee1_100_set_matrix,"openfl.filters.ColorMatrixFilter","set_matrix",0x82603721,"openfl.filters.ColorMatrixFilter.set_matrix","openfl/filters/ColorMatrixFilter.hx",100,0xb64128b5)
static const Float _hx_array_data_760a74eb_7[] = {
	(Float)1,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,(Float)0,(Float)0,(Float)0,(Float)0,(Float)1,(Float)0,
};
HX_DEFINE_STACK_FRAME(_hx_pos_7545faed7dab6ee1_15_boot,"openfl.filters.ColorMatrixFilter","boot",0x7ef90a95,"openfl.filters.ColorMatrixFilter.boot","openfl/filters/ColorMatrixFilter.hx",15,0xb64128b5)
namespace openfl{
namespace filters{

void ColorMatrixFilter_obj::__construct(::Array< Float > matrix){
            	HX_STACKFRAME(&_hx_pos_7545faed7dab6ee1_20_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE(  22)		super::__construct();
HXLINE(  24)		this->set_matrix(matrix);
HXLINE(  27)		this->_hx___numPasses = (int)0;
            	}

Dynamic ColorMatrixFilter_obj::__CreateEmpty() { return new ColorMatrixFilter_obj; }

void *ColorMatrixFilter_obj::_hx_vtable = 0;

Dynamic ColorMatrixFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorMatrixFilter_obj > _hx_result = new ColorMatrixFilter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ColorMatrixFilter_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x09ed1ad5) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x09ed1ad5;
	} else {
		return inClassId==(int)0x4f68d692;
	}
}

 ::openfl::filters::BitmapFilter ColorMatrixFilter_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_7545faed7dab6ee1_34_clone)
            	HX_STACK_THIS(this)
HXLINE(  34)		return  ::openfl::filters::ColorMatrixFilter_obj::__alloc( HX_CTX ,this->matrix);
            	}


void ColorMatrixFilter_obj::_hx___applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::display::BitmapData destBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint){
            	HX_STACKFRAME(&_hx_pos_7545faed7dab6ee1_39___applyFilter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(destBitmapData,"destBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
HXLINE(  48)		HX_VARI(  ::lime::utils::ArrayBufferView,source) = sourceBitmapData->image->get_data();
HXLINE(  49)		HX_VARI(  ::lime::utils::ArrayBufferView,target) = destBitmapData->image->get_data();
HXLINE(  51)		HX_VARI( int,offsetX) = ::Std_obj::_hx_int((destPoint->x - sourceRect->x));
HXLINE(  52)		HX_VARI( int,offsetY) = ::Std_obj::_hx_int((destPoint->y - sourceRect->y));
HXLINE(  53)		HX_VARI( int,sourceStride) = (sourceBitmapData->width * (int)4);
HXLINE(  54)		HX_VARI( int,targetStride) = (destBitmapData->width * (int)4);
HXLINE(  56)		HX_VAR( int,sourceOffset);
HXLINE(  57)		HX_VAR( int,targetOffset);
HXLINE(  59)		{
HXLINE(  59)			HX_VARI( int,_g1) = ::Std_obj::_hx_int(sourceRect->y);
HXDLIN(  59)			HX_VARI( int,_g) = ::Std_obj::_hx_int(sourceRect->height);
HXDLIN(  59)			while((_g1 < _g)){
HXLINE(  59)				_g1 = (_g1 + (int)1);
HXDLIN(  59)				HX_VARI( int,row) = (_g1 - (int)1);
HXLINE(  61)				{
HXLINE(  61)					HX_VARI( int,_g3) = ::Std_obj::_hx_int(sourceRect->x);
HXDLIN(  61)					HX_VARI( int,_g2) = ::Std_obj::_hx_int(sourceRect->width);
HXDLIN(  61)					while((_g3 < _g2)){
HXLINE(  61)						_g3 = (_g3 + (int)1);
HXDLIN(  61)						HX_VARI( int,column) = (_g3 - (int)1);
HXLINE(  63)						sourceOffset = ((row * sourceStride) + (column * (int)4));
HXLINE(  64)						targetOffset = (((row + offsetX) * targetStride) + ((column + offsetY) * (int)4));
HXLINE(  66)						HX_VARI(  ::Dynamic,srcR) = ((int)::__hxcpp_memory_get_byte(source->buffer->b,(source->byteOffset + sourceOffset)) & (int)(int)255);
HXLINE(  67)						HX_VARI(  ::Dynamic,srcG) = ((int)::__hxcpp_memory_get_byte(source->buffer->b,(source->byteOffset + (sourceOffset + (int)1))) & (int)(int)255);
HXLINE(  68)						HX_VARI(  ::Dynamic,srcB) = ((int)::__hxcpp_memory_get_byte(source->buffer->b,(source->byteOffset + (sourceOffset + (int)2))) & (int)(int)255);
HXLINE(  69)						HX_VARI(  ::Dynamic,srcA) = ((int)::__hxcpp_memory_get_byte(source->buffer->b,(source->byteOffset + (sourceOffset + (int)3))) & (int)(int)255);
HXLINE(  71)						{
HXLINE(  71)							HX_VARI_NAME( int,_hx_int,"int") = srcR;
HXDLIN(  71)							Float val;
HXDLIN(  71)							if ((_hx_int < (int)0)) {
HXLINE(  71)								val = (((Float)4294967296.0) + _hx_int);
            							}
            							else {
HXLINE(  71)								val = (_hx_int + ((Float)0.0));
            							}
HXDLIN(  71)							HX_VARI_NAME( int,int1,"int") = srcG;
HXDLIN(  71)							Float val1;
HXDLIN(  71)							if ((int1 < (int)0)) {
HXLINE(  71)								val1 = (((Float)4294967296.0) + int1);
            							}
            							else {
HXLINE(  71)								val1 = (int1 + ((Float)0.0));
            							}
HXDLIN(  71)							HX_VARI_NAME( int,int2,"int") = srcB;
HXDLIN(  71)							Float val2;
HXDLIN(  71)							if ((int2 < (int)0)) {
HXLINE(  71)								val2 = (((Float)4294967296.0) + int2);
            							}
            							else {
HXLINE(  71)								val2 = (int2 + ((Float)0.0));
            							}
HXDLIN(  71)							HX_VARI_NAME( int,int3,"int") = srcA;
HXDLIN(  71)							Float val3;
HXDLIN(  71)							if ((int3 < (int)0)) {
HXLINE(  71)								val3 = (((Float)4294967296.0) + int3);
            							}
            							else {
HXLINE(  71)								val3 = (int3 + ((Float)0.0));
            							}
HXDLIN(  71)							HX_VARI_NAME( int,val4,"val") = ::Std_obj::_hx_int((((((val * this->matrix->__get((int)0)) + (val1 * this->matrix->__get((int)1))) + (val2 * this->matrix->__get((int)2))) + (val3 * this->matrix->__get((int)3))) + this->matrix->__get((int)4)));
HXDLIN(  71)							::__hxcpp_memory_set_byte(target->buffer->b,(target->byteOffset + targetOffset),val4);
            						}
HXLINE(  72)						{
HXLINE(  72)							HX_VARI_NAME( int,int4,"int") = srcR;
HXDLIN(  72)							Float val5;
HXDLIN(  72)							if ((int4 < (int)0)) {
HXLINE(  72)								val5 = (((Float)4294967296.0) + int4);
            							}
            							else {
HXLINE(  72)								val5 = (int4 + ((Float)0.0));
            							}
HXDLIN(  72)							HX_VARI_NAME( int,int5,"int") = srcG;
HXDLIN(  72)							Float val6;
HXDLIN(  72)							if ((int5 < (int)0)) {
HXLINE(  72)								val6 = (((Float)4294967296.0) + int5);
            							}
            							else {
HXLINE(  72)								val6 = (int5 + ((Float)0.0));
            							}
HXDLIN(  72)							HX_VARI_NAME( int,int6,"int") = srcB;
HXDLIN(  72)							Float val7;
HXDLIN(  72)							if ((int6 < (int)0)) {
HXLINE(  72)								val7 = (((Float)4294967296.0) + int6);
            							}
            							else {
HXLINE(  72)								val7 = (int6 + ((Float)0.0));
            							}
HXDLIN(  72)							HX_VARI_NAME( int,int7,"int") = srcA;
HXDLIN(  72)							Float val8;
HXDLIN(  72)							if ((int7 < (int)0)) {
HXLINE(  72)								val8 = (((Float)4294967296.0) + int7);
            							}
            							else {
HXLINE(  72)								val8 = (int7 + ((Float)0.0));
            							}
HXDLIN(  72)							HX_VARI_NAME( int,val9,"val") = ::Std_obj::_hx_int((((((val5 * this->matrix->__get((int)5)) + (val6 * this->matrix->__get((int)6))) + (val7 * this->matrix->__get((int)7))) + (val8 * this->matrix->__get((int)8))) + this->matrix->__get((int)9)));
HXDLIN(  72)							::__hxcpp_memory_set_byte(target->buffer->b,(target->byteOffset + (targetOffset + (int)1)),val9);
            						}
HXLINE(  73)						{
HXLINE(  73)							HX_VARI_NAME( int,int8,"int") = srcR;
HXDLIN(  73)							Float val10;
HXDLIN(  73)							if ((int8 < (int)0)) {
HXLINE(  73)								val10 = (((Float)4294967296.0) + int8);
            							}
            							else {
HXLINE(  73)								val10 = (int8 + ((Float)0.0));
            							}
HXDLIN(  73)							HX_VARI_NAME( int,int9,"int") = srcG;
HXDLIN(  73)							Float val11;
HXDLIN(  73)							if ((int9 < (int)0)) {
HXLINE(  73)								val11 = (((Float)4294967296.0) + int9);
            							}
            							else {
HXLINE(  73)								val11 = (int9 + ((Float)0.0));
            							}
HXDLIN(  73)							HX_VARI_NAME( int,int10,"int") = srcB;
HXDLIN(  73)							Float val12;
HXDLIN(  73)							if ((int10 < (int)0)) {
HXLINE(  73)								val12 = (((Float)4294967296.0) + int10);
            							}
            							else {
HXLINE(  73)								val12 = (int10 + ((Float)0.0));
            							}
HXDLIN(  73)							HX_VARI_NAME( int,int11,"int") = srcA;
HXDLIN(  73)							Float val13;
HXDLIN(  73)							if ((int11 < (int)0)) {
HXLINE(  73)								val13 = (((Float)4294967296.0) + int11);
            							}
            							else {
HXLINE(  73)								val13 = (int11 + ((Float)0.0));
            							}
HXDLIN(  73)							HX_VARI_NAME( int,val14,"val") = ::Std_obj::_hx_int((((((val10 * this->matrix->__get((int)10)) + (val11 * this->matrix->__get((int)11))) + (val12 * this->matrix->__get((int)12))) + (val13 * this->matrix->__get((int)13))) + this->matrix->__get((int)14)));
HXDLIN(  73)							::__hxcpp_memory_set_byte(target->buffer->b,(target->byteOffset + (targetOffset + (int)2)),val14);
            						}
HXLINE(  74)						{
HXLINE(  74)							HX_VARI_NAME( int,int12,"int") = srcR;
HXDLIN(  74)							Float val15;
HXDLIN(  74)							if ((int12 < (int)0)) {
HXLINE(  74)								val15 = (((Float)4294967296.0) + int12);
            							}
            							else {
HXLINE(  74)								val15 = (int12 + ((Float)0.0));
            							}
HXDLIN(  74)							HX_VARI_NAME( int,int13,"int") = srcG;
HXDLIN(  74)							Float val16;
HXDLIN(  74)							if ((int13 < (int)0)) {
HXLINE(  74)								val16 = (((Float)4294967296.0) + int13);
            							}
            							else {
HXLINE(  74)								val16 = (int13 + ((Float)0.0));
            							}
HXDLIN(  74)							HX_VARI_NAME( int,int14,"int") = srcB;
HXDLIN(  74)							Float val17;
HXDLIN(  74)							if ((int14 < (int)0)) {
HXLINE(  74)								val17 = (((Float)4294967296.0) + int14);
            							}
            							else {
HXLINE(  74)								val17 = (int14 + ((Float)0.0));
            							}
HXDLIN(  74)							HX_VARI_NAME( int,int15,"int") = srcA;
HXDLIN(  74)							Float val18;
HXDLIN(  74)							if ((int15 < (int)0)) {
HXLINE(  74)								val18 = (((Float)4294967296.0) + int15);
            							}
            							else {
HXLINE(  74)								val18 = (int15 + ((Float)0.0));
            							}
HXDLIN(  74)							HX_VARI_NAME( int,val19,"val") = ::Std_obj::_hx_int((((((val15 * this->matrix->__get((int)15)) + (val16 * this->matrix->__get((int)16))) + (val17 * this->matrix->__get((int)17))) + (val18 * this->matrix->__get((int)18))) + this->matrix->__get((int)19)));
HXDLIN(  74)							::__hxcpp_memory_set_byte(target->buffer->b,(target->byteOffset + (targetOffset + (int)3)),val19);
            						}
            					}
            				}
            			}
            		}
HXLINE(  80)		destBitmapData->image->dirty = true;
            	}


 ::openfl::display::Shader ColorMatrixFilter_obj::_hx___initShader( ::openfl::_internal::renderer::RenderSession renderSession,int pass){
            	HX_STACKFRAME(&_hx_pos_7545faed7dab6ee1_85___initShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(pass,"pass")
HXLINE(  87)		::openfl::filters::ColorMatrixFilter_obj::_hx___colorMatrixShader->init(this->matrix);
HXLINE(  88)		return ::openfl::filters::ColorMatrixFilter_obj::_hx___colorMatrixShader;
            	}


::Array< Float > ColorMatrixFilter_obj::set_matrix(::Array< Float > value){
            	HX_STACKFRAME(&_hx_pos_7545faed7dab6ee1_100_set_matrix)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 102)		if (hx::IsNull( value )) {
HXLINE( 104)			value = ::Array_obj< Float >::fromData( _hx_array_data_760a74eb_7,20);
            		}
HXLINE( 108)		return (this->matrix = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrixFilter_obj,set_matrix,return )

 ::openfl::filters::_ColorMatrixFilter::ColorMatrixShader ColorMatrixFilter_obj::_hx___colorMatrixShader;


hx::ObjectPtr< ColorMatrixFilter_obj > ColorMatrixFilter_obj::__new(::Array< Float > matrix) {
	hx::ObjectPtr< ColorMatrixFilter_obj > __this = new ColorMatrixFilter_obj();
	__this->__construct(matrix);
	return __this;
}

hx::ObjectPtr< ColorMatrixFilter_obj > ColorMatrixFilter_obj::__alloc(hx::Ctx *_hx_ctx,::Array< Float > matrix) {
	ColorMatrixFilter_obj *__this = (ColorMatrixFilter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ColorMatrixFilter_obj), true, "openfl.filters.ColorMatrixFilter"));
	*(void **)__this = ColorMatrixFilter_obj::_hx_vtable;
	__this->__construct(matrix);
	return __this;
}

ColorMatrixFilter_obj::ColorMatrixFilter_obj()
{
}

void ColorMatrixFilter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColorMatrixFilter);
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_END_CLASS();
}

void ColorMatrixFilter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
}

hx::Val ColorMatrixFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { return hx::Val( matrix); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"set_matrix") ) { return hx::Val( set_matrix_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initShader") ) { return hx::Val( _hx___initShader_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__applyFilter") ) { return hx::Val( _hx___applyFilter_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool ColorMatrixFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__colorMatrixShader") ) { outValue = _hx___colorMatrixShader; return true; }
	}
	return false;
}

hx::Val ColorMatrixFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_matrix(inValue) );matrix=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ColorMatrixFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__colorMatrixShader") ) { _hx___colorMatrixShader=ioValue.Cast<  ::openfl::filters::_ColorMatrixFilter::ColorMatrixShader >(); return true; }
	}
	return false;
}

void ColorMatrixFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ColorMatrixFilter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(ColorMatrixFilter_obj,matrix),HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ColorMatrixFilter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::filters::_ColorMatrixFilter::ColorMatrixShader*/ ,(void *) &ColorMatrixFilter_obj::_hx___colorMatrixShader,HX_HCSTRING("__colorMatrixShader","\x29","\xff","\xb1","\xf9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ColorMatrixFilter_obj_sMemberFields[] = {
	HX_HCSTRING("matrix","\x41","\x36","\xc8","\xbb"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("__applyFilter","\xa6","\x20","\xa8","\x09"),
	HX_HCSTRING("__initShader","\x75","\x95","\xf9","\x59"),
	HX_HCSTRING("set_matrix","\x7e","\x44","\xcd","\xaf"),
	::String(null()) };

static void ColorMatrixFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorMatrixFilter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ColorMatrixFilter_obj::_hx___colorMatrixShader,"__colorMatrixShader");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorMatrixFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorMatrixFilter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ColorMatrixFilter_obj::_hx___colorMatrixShader,"__colorMatrixShader");
};

#endif

hx::Class ColorMatrixFilter_obj::__mClass;

static ::String ColorMatrixFilter_obj_sStaticFields[] = {
	HX_HCSTRING("__colorMatrixShader","\x29","\xff","\xb1","\xf9"),
	::String(null())
};

void ColorMatrixFilter_obj::__register()
{
	hx::Object *dummy = new ColorMatrixFilter_obj;
	ColorMatrixFilter_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters.ColorMatrixFilter","\xeb","\x74","\x0a","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorMatrixFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &ColorMatrixFilter_obj::__SetStatic;
	__mClass->mMarkFunc = ColorMatrixFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ColorMatrixFilter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColorMatrixFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColorMatrixFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorMatrixFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorMatrixFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorMatrixFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColorMatrixFilter_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_7545faed7dab6ee1_15_boot)
HXLINE(  15)		_hx___colorMatrixShader =  ::openfl::filters::_ColorMatrixFilter::ColorMatrixShader_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace filters
