// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLRenderbuffer
#include <lime/graphics/opengl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_Context3DStateCache
#include <openfl/_internal/stage3D/Context3DStateCache.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_VideoTexture
#include <openfl/display3D/textures/VideoTexture.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_44_new,"openfl.display3D.Context3D","new",0x4f12c019,"openfl.display3D.Context3D.new","openfl/display3D/Context3D.hx",44,0xc899cbb9)
static const Float _hx_array_data_2fa0bfa7_3[] = {
	1.0,1.0,1.0,1.0,
};
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_184_clear,"openfl.display3D.Context3D","clear",0xf8808186,"openfl.display3D.Context3D.clear","openfl/display3D/Context3D.hx",184,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_221_configureBackBuffer,"openfl.display3D.Context3D","configureBackBuffer",0x7210edc6,"openfl.display3D.Context3D.configureBackBuffer","openfl/display3D/Context3D.hx",221,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_239_createCubeTexture,"openfl.display3D.Context3D","createCubeTexture",0xbb69e843,"openfl.display3D.Context3D.createCubeTexture","openfl/display3D/Context3D.hx",239,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_246_createIndexBuffer,"openfl.display3D.Context3D","createIndexBuffer",0x3b80e18f,"openfl.display3D.Context3D.createIndexBuffer","openfl/display3D/Context3D.hx",246,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_253_createProgram,"openfl.display3D.Context3D","createProgram",0x0b5753e1,"openfl.display3D.Context3D.createProgram","openfl/display3D/Context3D.hx",253,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_260_createRectangleTexture,"openfl.display3D.Context3D","createRectangleTexture",0x8720f36f,"openfl.display3D.Context3D.createRectangleTexture","openfl/display3D/Context3D.hx",260,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_267_createTexture,"openfl.display3D.Context3D","createTexture",0xb63ed238,"openfl.display3D.Context3D.createTexture","openfl/display3D/Context3D.hx",267,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_274_createVertexBuffer,"openfl.display3D.Context3D","createVertexBuffer",0x49fb9507,"openfl.display3D.Context3D.createVertexBuffer","openfl/display3D/Context3D.hx",274,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_284_createVideoTexture,"openfl.display3D.Context3D","createVideoTexture",0x922f1723,"openfl.display3D.Context3D.createVideoTexture","openfl/display3D/Context3D.hx",284,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_290_dispose,"openfl.display3D.Context3D","dispose",0x8ad040d8,"openfl.display3D.Context3D.dispose","openfl/display3D/Context3D.hx",290,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_297_drawToBitmapData,"openfl.display3D.Context3D","drawToBitmapData",0x474f45df,"openfl.display3D.Context3D.drawToBitmapData","openfl/display3D/Context3D.hx",297,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_304_drawTriangles,"openfl.display3D.Context3D","drawTriangles",0x0d837500,"openfl.display3D.Context3D.drawTriangles","openfl/display3D/Context3D.hx",304,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_329_present,"openfl.display3D.Context3D","present",0x095ffb34,"openfl.display3D.Context3D.present","openfl/display3D/Context3D.hx",329,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_345_setBlendFactors,"openfl.display3D.Context3D","setBlendFactors",0x86d16c6e,"openfl.display3D.Context3D.setBlendFactors","openfl/display3D/Context3D.hx",345,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_360_setColorMask,"openfl.display3D.Context3D","setColorMask",0xad4f5d14,"openfl.display3D.Context3D.setColorMask","openfl/display3D/Context3D.hx",360,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_367_setCulling,"openfl.display3D.Context3D","setCulling",0x39687055,"openfl.display3D.Context3D.setCulling","openfl/display3D/Context3D.hx",367,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_401_setDepthTest,"openfl.display3D.Context3D","setDepthTest",0x2d08b41a,"openfl.display3D.Context3D.setDepthTest","openfl/display3D/Context3D.hx",401,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_448_setProgram,"openfl.display3D.Context3D","setProgram",0xd9d9d869,"openfl.display3D.Context3D.setProgram","openfl/display3D/Context3D.hx",448,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_476_setProgramConstantsFromByteArray,"openfl.display3D.Context3D","setProgramConstantsFromByteArray",0xd8990de1,"openfl.display3D.Context3D.setProgramConstantsFromByteArray","openfl/display3D/Context3D.hx",476,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_508_setProgramConstantsFromMatrix,"openfl.display3D.Context3D","setProgramConstantsFromMatrix",0x29e843d1,"openfl.display3D.Context3D.setProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",508,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_570_setProgramConstantsFromVector,"openfl.display3D.Context3D","setProgramConstantsFromVector",0x057dbe53,"openfl.display3D.Context3D.setProgramConstantsFromVector","openfl/display3D/Context3D.hx",570,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_605_setRenderToBackBuffer,"openfl.display3D.Context3D","setRenderToBackBuffer",0x6095d693,"openfl.display3D.Context3D.setRenderToBackBuffer","openfl/display3D/Context3D.hx",605,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_627_setRenderToTexture,"openfl.display3D.Context3D","setRenderToTexture",0x25c5d54f,"openfl.display3D.Context3D.setRenderToTexture","openfl/display3D/Context3D.hx",627,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_749_setSamplerStateAt,"openfl.display3D.Context3D","setSamplerStateAt",0x9f8ad1f7,"openfl.display3D.Context3D.setSamplerStateAt","openfl/display3D/Context3D.hx",749,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_846_setScissorRectangle,"openfl.display3D.Context3D","setScissorRectangle",0x712bb5ee,"openfl.display3D.Context3D.setScissorRectangle","openfl/display3D/Context3D.hx",846,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_854_setStencilActions,"openfl.display3D.Context3D","setStencilActions",0x1fe08e1c,"openfl.display3D.Context3D.setStencilActions","openfl/display3D/Context3D.hx",854,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_863_setStencilReferenceValue,"openfl.display3D.Context3D","setStencilReferenceValue",0xaa284f67,"openfl.display3D.Context3D.setStencilReferenceValue","openfl/display3D/Context3D.hx",863,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_876_setTextureAt,"openfl.display3D.Context3D","setTextureAt",0x38d4bfd3,"openfl.display3D.Context3D.setTextureAt","openfl/display3D/Context3D.hx",876,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_888_setVertexBufferAt,"openfl.display3D.Context3D","setVertexBufferAt",0xbb32fa52,"openfl.display3D.Context3D.setVertexBufferAt","openfl/display3D/Context3D.hx",888,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_946___flushSamplerState,"openfl.display3D.Context3D","__flushSamplerState",0xbb488366,"openfl.display3D.Context3D.__flushSamplerState","openfl/display3D/Context3D.hx",946,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_992___getGLCompareMode,"openfl.display3D.Context3D","__getGLCompareMode",0xec8b55b4,"openfl.display3D.Context3D.__getGLCompareMode","openfl/display3D/Context3D.hx",992,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1011___getGLStencilAction,"openfl.display3D.Context3D","__getGLStencilAction",0xdf4274de,"openfl.display3D.Context3D.__getGLStencilAction","openfl/display3D/Context3D.hx",1011,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1030___hasGLExtension,"openfl.display3D.Context3D","__hasGLExtension",0xeedeef47,"openfl.display3D.Context3D.__hasGLExtension","openfl/display3D/Context3D.hx",1030,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1037___setViewport,"openfl.display3D.Context3D","__setViewport",0x44998801,"openfl.display3D.Context3D.__setViewport","openfl/display3D/Context3D.hx",1037,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1047___statsAdd,"openfl.display3D.Context3D","__statsAdd",0x9eeb6dc9,"openfl.display3D.Context3D.__statsAdd","openfl/display3D/Context3D.hx",1047,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1057___statsClear,"openfl.display3D.Context3D","__statsClear",0xef112735,"openfl.display3D.Context3D.__statsClear","openfl/display3D/Context3D.hx",1057,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1064___statsDecrement,"openfl.display3D.Context3D","__statsDecrement",0xf8079fbb,"openfl.display3D.Context3D.__statsDecrement","openfl/display3D/Context3D.hx",1064,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1071___statsIncrement,"openfl.display3D.Context3D","__statsIncrement",0x1984afd7,"openfl.display3D.Context3D.__statsIncrement","openfl/display3D/Context3D.hx",1071,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1076___statsSendToTelemetry,"openfl.display3D.Context3D","__statsSendToTelemetry",0x95ec20be,"openfl.display3D.Context3D.__statsSendToTelemetry","openfl/display3D/Context3D.hx",1076,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1125___statsSubtract,"openfl.display3D.Context3D","__statsSubtract",0xc326b86c,"openfl.display3D.Context3D.__statsSubtract","openfl/display3D/Context3D.hx",1125,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1132___updateDepthAndStencilState,"openfl.display3D.Context3D","__updateDepthAndStencilState",0x7fba6d19,"openfl.display3D.Context3D.__updateDepthAndStencilState","openfl/display3D/Context3D.hx",1132,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1155___updateBlendFactors,"openfl.display3D.Context3D","__updateBlendFactors",0x00141f63,"openfl.display3D.Context3D.__updateBlendFactors","openfl/display3D/Context3D.hx",1155,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1203___updateScissorRectangle,"openfl.display3D.Context3D","__updateScissorRectangle",0x17db8763,"openfl.display3D.Context3D.__updateScissorRectangle","openfl/display3D/Context3D.hx",1203,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1250___updateBackbufferViewport,"openfl.display3D.Context3D","__updateBackbufferViewport",0x1ffcf0dd,"openfl.display3D.Context3D.__updateBackbufferViewport","openfl/display3D/Context3D.hx",1250,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1261_set_enableErrorChecking,"openfl.display3D.Context3D","set_enableErrorChecking",0x101dce5b,"openfl.display3D.Context3D.set_enableErrorChecking","openfl/display3D/Context3D.hx",1261,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_47_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",47,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_49_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",49,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_50_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",50,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_51_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",51,0xc899cbb9)
HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_53_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",53,0xc899cbb9)
namespace openfl{
namespace display3D{

void Context3D_obj::__construct( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_44_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stage3D,"stage3D")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(  62)		this->totalGPUMemory = (int)0;
HXLINE(  61)		this->profile = (int)0;
HXLINE(  58)		this->enableErrorChecking = false;
HXLINE(  57)		this->driverInfo = HX_("OpenGL (Direct blitting)",e6,33,c8,a6);
HXLINE(  56)		this->backBufferWidth = (int)0;
HXLINE(  55)		this->backBufferHeight = (int)0;
HXLINE( 100)		super::__construct(null());
HXLINE( 102)		this->_hx___stage3D = stage3D;
HXLINE( 103)		this->_hx___renderSession = renderSession;
HXLINE( 105)		this->_hx___vertexConstants =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXLINE( 106)		this->_hx___fragmentConstants =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXLINE( 108)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::fromData( _hx_array_data_2fa0bfa7_3,4);
HXDLIN( 108)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 108)		if (hx::IsNotNull( array )) {
HXLINE( 108)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 108)			_this->byteOffset = (int)0;
HXDLIN( 108)			_this->length = array->get_length();
HXDLIN( 108)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 108)			_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 108)			_this->copyFromArray(array,null());
HXDLIN( 108)			this1 = _this;
            		}
            		else {
HXLINE( 108)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 108)		this->_hx___positionScale = this1;
HXLINE( 109)		this->_hx___samplerDirty = (int)0;
HXLINE( 110)		bool fixed = null();
HXDLIN( 110)		this->_hx___samplerTextures =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,(int)8,fixed,null());
HXLINE( 111)		this->_hx___samplerStates = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 113)		{
HXLINE( 113)			HX_VARI( int,_g) = (int)0;
HXDLIN( 113)			while((_g < (int)8)){
HXLINE( 113)				_g = (_g + (int)1);
HXLINE( 115)				this->_hx___samplerStates[(_g - (int)1)] =  ::openfl::_internal::stage3D::SamplerState_obj::__alloc( HX_CTX ,(int)9729,(int)9729,(int)33071,(int)33071,null(),null(),null(),null());
            			}
            		}
HXLINE( 122)		this->maxBackBufferHeight = (this->maxBackBufferWidth = (int)16384);
HXLINE( 125)		this->_hx___backBufferAntiAlias = (int)0;
HXLINE( 126)		this->_hx___backBufferEnableDepthAndStencil = true;
HXLINE( 127)		this->_hx___backBufferWantsBestResolution = false;
HXLINE( 129)		this->_hx___frameCount = (int)0;
HXLINE( 130)		this->_hx___rttDepthAndStencil = false;
HXLINE( 131)		this->_hx___samplerDirty = (int)0;
HXLINE( 132)		this->_hx___stencilCompareMode = (int)0;
HXLINE( 133)		this->_hx___stencilRef = (int)0;
HXLINE( 134)		this->_hx___stencilReadMask = (int)255;
HXLINE( 138)		bool _hx_tmp;
HXDLIN( 138)		if (!(this->_hx___hasGLExtension(HX_("GL_OES_packed_depth_stencil",15,ba,96,d2)))) {
HXLINE( 138)			_hx_tmp = this->_hx___hasGLExtension(HX_("GL_EXT_packed_depth_stencil",91,29,49,e0));
            		}
            		else {
HXLINE( 138)			_hx_tmp = true;
            		}
HXDLIN( 138)		this->_hx___supportsPackedDepthStencil = _hx_tmp;
HXLINE( 141)		bool fixed1 = null();
HXDLIN( 141)		this->_hx___stats =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,(int)11,fixed1,null());
HXLINE( 142)		bool fixed2 = null();
HXDLIN( 142)		this->_hx___statsCache =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,(int)11,fixed2,null());
HXLINE( 149)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 151)		HX_VARI( ::String,vendor) = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7936)) );
HXLINE( 152)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 154)		HX_VARI( ::String,version) = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7938)) );
HXLINE( 155)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 157)		HX_VARI( ::String,renderer) = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7937)) );
HXLINE( 158)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 161)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 163)		this->driverInfo = ((((((((HX_("OpenGL",8f,bc,28,56) + HX_(" Vendor=",75,5d,11,19)) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + renderer) + HX_(" GLSL=",5f,30,5a,df)) + HX_("<unknown>",b0,91,d8,da));
HXLINE( 173)		{
HXLINE( 173)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 173)			HX_VARI_NAME( int,_g2,"_g") = this->_hx___stats->get_length();
HXDLIN( 173)			while((_g1 < _g2)){
HXLINE( 173)				_g1 = (_g1 + (int)1);
HXLINE( 175)				this->_hx___stats->set((_g1 - (int)1),(int)0);
            			}
            		}
HXLINE( 179)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}

Dynamic Context3D_obj::__CreateEmpty() { return new Context3D_obj; }

void *Context3D_obj::_hx_vtable = 0;

Dynamic Context3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Context3D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
	} else {
		return inClassId==(int)0x6271873d;
	}
}

void Context3D_obj::clear(hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil,hx::Null< int >  __o_mask){
Float red = __o_red.Default(0);
Float green = __o_green.Default(0);
Float blue = __o_blue.Default(0);
Float alpha = __o_alpha.Default(1);
Float depth = __o_depth.Default(1);
int stencil = __o_stencil.Default(0);
int mask = __o_mask.Default(7);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_184_clear)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
            	HX_STACK_ARG(depth,"depth")
            	HX_STACK_ARG(stencil,"stencil")
            	HX_STACK_ARG(mask,"mask")
HXLINE( 186)		HX_VARI( int,clearMask) = (int)0;
HXLINE( 188)		if ((((int)mask & (int)(int)1) != (int)0)) {
HXLINE( 190)			clearMask = (int)16384;
HXLINE( 192)			::lime::graphics::opengl::GL_obj::context->clearColor(red,green,blue,alpha);
HXLINE( 193)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 197)		if ((((int)mask & (int)(int)2) != (int)0)) {
HXLINE( 199)			clearMask = ((int)clearMask | (int)(int)256);
HXLINE( 201)			::lime::graphics::opengl::GL_obj::context->clearDepth(depth);
HXLINE( 202)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 206)		if ((((int)mask & (int)(int)4) != (int)0)) {
HXLINE( 208)			clearMask = ((int)clearMask | (int)(int)1024);
HXLINE( 210)			::lime::graphics::opengl::GL_obj::context->clearStencil(stencil);
HXLINE( 211)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 215)		::lime::graphics::opengl::GL_obj::context->clear(clearMask);
HXLINE( 216)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC7(Context3D_obj,clear,(void))

void Context3D_obj::configureBackBuffer(int width,int height,int antiAlias,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< bool >  __o_wantsBestResolution,hx::Null< bool >  __o_wantsBestResolutionOnBrowserZoom){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
bool wantsBestResolution = __o_wantsBestResolution.Default(false);
bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_221_configureBackBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(antiAlias,"antiAlias")
            	HX_STACK_ARG(enableDepthAndStencil,"enableDepthAndStencil")
            	HX_STACK_ARG(wantsBestResolution,"wantsBestResolution")
            	HX_STACK_ARG(wantsBestResolutionOnBrowserZoom,"wantsBestResolutionOnBrowserZoom")
HXLINE( 223)		this->_hx___updateBackbufferViewport();
HXLINE( 225)		this->backBufferWidth = width;
HXLINE( 226)		this->backBufferHeight = height;
HXLINE( 228)		this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 229)		this->_hx___backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 230)		this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 232)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}


HX_DEFINE_DYNAMIC_FUNC6(Context3D_obj,configureBackBuffer,(void))

 ::openfl::display3D::textures::CubeTexture Context3D_obj::createCubeTexture(int size, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_239_createCubeTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(optimizeForRenderToTexture,"optimizeForRenderToTexture")
            	HX_STACK_ARG(streamingLevels,"streamingLevels")
HXLINE( 239)		return  ::openfl::display3D::textures::CubeTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),size,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createCubeTexture,return )

 ::openfl::display3D::IndexBuffer3D Context3D_obj::createIndexBuffer(int numIndices, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_246_createIndexBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numIndices,"numIndices")
            	HX_STACK_ARG(bufferUsage,"bufferUsage")
HXLINE( 246)		return  ::openfl::display3D::IndexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numIndices,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,createIndexBuffer,return )

 ::openfl::display3D::Program3D Context3D_obj::createProgram(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_253_createProgram)
            	HX_STACK_THIS(this)
HXLINE( 253)		return  ::openfl::display3D::Program3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createProgram,return )

 ::openfl::display3D::textures::RectangleTexture Context3D_obj::createRectangleTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_260_createRectangleTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(optimizeForRenderToTexture,"optimizeForRenderToTexture")
HXLINE( 260)		return  ::openfl::display3D::textures::RectangleTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(format),optimizeForRenderToTexture);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createRectangleTexture,return )

 ::openfl::display3D::textures::Texture Context3D_obj::createTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_267_createTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(optimizeForRenderToTexture,"optimizeForRenderToTexture")
            	HX_STACK_ARG(streamingLevels,"streamingLevels")
HXLINE( 267)		return  ::openfl::display3D::textures::Texture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,createTexture,return )

 ::openfl::display3D::VertexBuffer3D Context3D_obj::createVertexBuffer(int numVertices,int data32PerVertex, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_274_createVertexBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(numVertices,"numVertices")
            	HX_STACK_ARG(data32PerVertex,"data32PerVertex")
            	HX_STACK_ARG(bufferUsage,"bufferUsage")
HXLINE( 274)		return  ::openfl::display3D::VertexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numVertices,data32PerVertex,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,createVertexBuffer,return )

 ::openfl::display3D::textures::VideoTexture Context3D_obj::createVideoTexture(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_284_createVideoTexture)
            	HX_STACK_THIS(this)
HXLINE( 284)		HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Video textures are not supported on this platform",02,cd,86,ca),null()));
HXDLIN( 284)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createVideoTexture,return )

void Context3D_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_290_dispose)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,dispose,(void))

void Context3D_obj::drawToBitmapData( ::openfl::display::BitmapData destination){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_297_drawToBitmapData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(destination,"destination")
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,drawToBitmapData,(void))

void Context3D_obj::drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  __o_firstIndex,hx::Null< int >  __o_numTriangles){
int firstIndex = __o_firstIndex.Default(0);
int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_304_drawTriangles)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indexBuffer,"indexBuffer")
            	HX_STACK_ARG(firstIndex,"firstIndex")
            	HX_STACK_ARG(numTriangles,"numTriangles")
HXLINE( 306)		if (hx::IsNull( this->_hx___program )) {
HXLINE( 308)			return;
            		}
HXLINE( 312)		this->_hx___flushSamplerState();
HXLINE( 313)		this->_hx___program->_hx___flush();
HXLINE( 315)		HX_VAR( int,count);
HXDLIN( 315)		if ((numTriangles == (int)-1)) {
HXLINE( 315)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE( 315)			count = (numTriangles * (int)3);
            		}
HXLINE( 317)		::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34963,indexBuffer->_hx___id);
HXLINE( 318)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 320)		::lime::graphics::opengl::GL_obj::context->drawElements((int)4,count,indexBuffer->_hx___elementType,firstIndex);
HXLINE( 321)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 323)		this->_hx___statsIncrement((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawTriangles,(void))

void Context3D_obj::present(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_329_present)
            	HX_STACK_THIS(this)
HXLINE( 338)		this->_hx___statsClear((int)0);
HXLINE( 340)		this->_hx___frameCount++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,present,(void))

void Context3D_obj::setBlendFactors( ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_345_setBlendFactors)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceFactor,"sourceFactor")
            	HX_STACK_ARG(destinationFactor,"destinationFactor")
HXLINE( 347)		HX_VARI( bool,updateSrc) = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendSrcFactor(sourceFactor);
HXLINE( 348)		HX_VARI( bool,updateDest) = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendDestFactor(destinationFactor);
HXLINE( 349)		bool _hx_tmp;
HXDLIN( 349)		if (!(updateSrc)) {
HXLINE( 349)			_hx_tmp = updateDest;
            		}
            		else {
HXLINE( 349)			_hx_tmp = true;
            		}
HXDLIN( 349)		if (_hx_tmp) {
HXLINE( 351)			this->_hx___updateBlendFactors();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setBlendFactors,(void))

void Context3D_obj::setColorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_360_setColorMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 360)		::lime::graphics::opengl::GL_obj::context->colorMask(red,green,blue,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setColorMask,(void))

void Context3D_obj::setCulling( ::Dynamic triangleFaceToCull){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_367_setCulling)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(triangleFaceToCull,"triangleFaceToCull")
HXLINE( 367)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateCullingMode(triangleFaceToCull)) {
HXLINE( 369)			 ::Dynamic _hx_switch_0 = triangleFaceToCull;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 377)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 378)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1028);
HXLINE( 375)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 382)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 383)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1029);
HXLINE( 380)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 387)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 388)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1032);
HXLINE( 385)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 373)				::lime::graphics::opengl::GL_obj::context->disable((int)2884);
HXDLIN( 373)				goto _hx_goto_19;
            			}
            			/* default */{
HXLINE( 392)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_19:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setCulling,(void))

void Context3D_obj::setDepthTest(bool depthMask, ::Dynamic passCompareMode){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_401_setDepthTest)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(depthMask,"depthMask")
            	HX_STACK_ARG(passCompareMode,"passCompareMode")
HXLINE( 403)		HX_VARI( bool,depthTestEnabled) = this->_hx___backBufferEnableDepthAndStencil;
HXLINE( 405)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestEnabled(depthTestEnabled)) {
HXLINE( 407)			if (depthTestEnabled) {
HXLINE( 409)				::lime::graphics::opengl::GL_obj::context->enable((int)2929);
            			}
            			else {
HXLINE( 413)				::lime::graphics::opengl::GL_obj::context->disable((int)2929);
            			}
            		}
HXLINE( 419)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestMask(depthMask)) {
HXLINE( 421)			::lime::graphics::opengl::GL_obj::context->depthMask(depthMask);
            		}
HXLINE( 425)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthCompareMode(passCompareMode)) {
HXLINE( 427)			 ::Dynamic _hx_switch_0 = passCompareMode;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 429)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)519);
HXDLIN( 429)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 430)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)514);
HXDLIN( 430)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 431)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)516);
HXDLIN( 431)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 432)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)518);
HXDLIN( 432)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE( 433)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)513);
HXDLIN( 433)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE( 434)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)515);
HXDLIN( 434)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)6) ){
HXLINE( 435)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)512);
HXDLIN( 435)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE( 436)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)517);
HXDLIN( 436)				goto _hx_goto_21;
            			}
            			/* default */{
HXLINE( 439)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_21:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setDepthTest,(void))

void Context3D_obj::setProgram( ::openfl::display3D::Program3D program){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_448_setProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE( 450)		if (hx::IsNull( program )) {
HXLINE( 452)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE( 456)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateProgram3D(program)) {
HXLINE( 458)			program->_hx___use();
HXLINE( 459)			program->_hx___setPositionScale(this->_hx___positionScale);
HXLINE( 461)			this->_hx___program = program;
HXLINE( 463)			 ::openfl::display3D::Context3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 463)			_hx_tmp->_hx___samplerDirty = ((int)_hx_tmp->_hx___samplerDirty | (int)this->_hx___program->_hx___samplerUsageMask);
HXLINE( 465)			{
HXLINE( 465)				HX_VARI( int,_g) = (int)0;
HXDLIN( 465)				while((_g < (int)8)){
HXLINE( 465)					_g = (_g + (int)1);
HXDLIN( 465)					HX_VARI( int,i) = (_g - (int)1);
HXLINE( 467)					 ::openfl::_internal::stage3D::SamplerState _hx_tmp1 = this->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXDLIN( 467)					_hx_tmp1->copyFrom(this->_hx___program->_hx___getSamplerState(i));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setProgram,(void))

void Context3D_obj::setProgramConstantsFromByteArray( ::Dynamic programType,int firstRegister,int numRegisters, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_476_setProgramConstantsFromByteArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(programType,"programType")
            	HX_STACK_ARG(firstRegister,"firstRegister")
            	HX_STACK_ARG(numRegisters,"numRegisters")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(byteArrayOffset,"byteArrayOffset")
HXLINE( 478)		if ((numRegisters == (int)0)) {
HXLINE( 478)			return;
            		}
HXLINE( 480)		if ((numRegisters == (int)-1)) {
HXLINE( 482)			numRegisters = (((int)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data) >> (int)(int)2) - byteArrayOffset);
            		}
HXLINE( 486)		HX_VARI( bool,isVertex) = hx::IsEq( programType,(int)1 );
HXLINE( 487)		HX_VAR(  ::lime::utils::ArrayBufferView,dest);
HXDLIN( 487)		if (isVertex) {
HXLINE( 487)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 487)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 489)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 489)		HX_VARI(  ::Dynamic,len) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
HXDLIN( 489)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 489)		if (hx::IsNotNull( bytes )) {
HXLINE( 489)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 489)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE( 489)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 489)			HX_VARI( int,bufferByteLength) = bytes->length;
HXDLIN( 489)			HX_VARI( int,newByteLength) = bufferByteLength;
HXDLIN( 489)			if (hx::IsNull( len )) {
HXLINE( 489)				newByteLength = bufferByteLength;
HXDLIN( 489)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 489)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 489)				if ((bufferByteLength < (int)0)) {
HXLINE( 489)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE( 489)				newByteLength = (len * _this->bytesPerElement);
HXDLIN( 489)				if ((newByteLength > bufferByteLength)) {
HXLINE( 489)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 489)			_this->buffer = bytes;
HXDLIN( 489)			_this->byteOffset = (int)0;
HXDLIN( 489)			_this->byteLength = newByteLength;
HXDLIN( 489)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 489)			this1 = _this;
            		}
            		else {
HXLINE( 489)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 489)		HX_VARI(  ::lime::utils::ArrayBufferView,floatData) = this1;
HXLINE( 490)		HX_VARI( int,outOffset) = (firstRegister * (int)4);
HXLINE( 491)		HX_VARI_NAME( int,_hx_int,"int") = byteArrayOffset;
HXDLIN( 491)		Float inOffset;
HXDLIN( 491)		if ((_hx_int < (int)0)) {
HXLINE( 491)			inOffset = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 491)			inOffset = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 491)		HX_VARI_NAME( int,inOffset1,"inOffset") = ::Std_obj::_hx_int(((Float)inOffset / (Float)((Float)4.)));
HXLINE( 493)		{
HXLINE( 493)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 493)			HX_VARI( int,_g) = (numRegisters * (int)4);
HXDLIN( 493)			while((_g1 < _g)){
HXLINE( 493)				_g1 = (_g1 + (int)1);
HXDLIN( 493)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 495)				{
HXLINE( 495)					HX_VARI( Float,val) = ::__hxcpp_memory_get_float(floatData->buffer->b,(floatData->byteOffset + ((inOffset1 + i) * (int)4)));
HXDLIN( 495)					::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((outOffset + i) * (int)4)),val);
            				}
            			}
            		}
HXLINE( 499)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 501)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setProgramConstantsFromByteArray,(void))

void Context3D_obj::setProgramConstantsFromMatrix( ::Dynamic programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_508_setProgramConstantsFromMatrix)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(programType,"programType")
            	HX_STACK_ARG(firstRegister,"firstRegister")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(transposedMatrix,"transposedMatrix")
HXLINE( 510)		HX_VARI( bool,isVertex) = hx::IsEq( programType,(int)1 );
HXLINE( 511)		HX_VAR(  ::lime::utils::ArrayBufferView,dest);
HXDLIN( 511)		if (isVertex) {
HXLINE( 511)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 511)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 512)		HX_VARI(  ::openfl::_Vector::FloatVector,source) = matrix->rawData;
HXLINE( 513)		HX_VARI( int,i) = (firstRegister * (int)4);
HXLINE( 515)		if (transposedMatrix) {
HXLINE( 517)			{
HXLINE( 517)				i = (i + (int)1);
HXDLIN( 517)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)0));
            			}
HXLINE( 518)			{
HXLINE( 518)				i = (i + (int)1);
HXDLIN( 518)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)4));
            			}
HXLINE( 519)			{
HXLINE( 519)				i = (i + (int)1);
HXDLIN( 519)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)8));
            			}
HXLINE( 520)			{
HXLINE( 520)				i = (i + (int)1);
HXDLIN( 520)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)12));
            			}
HXLINE( 522)			{
HXLINE( 522)				i = (i + (int)1);
HXDLIN( 522)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)1));
            			}
HXLINE( 523)			{
HXLINE( 523)				i = (i + (int)1);
HXDLIN( 523)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)5));
            			}
HXLINE( 524)			{
HXLINE( 524)				i = (i + (int)1);
HXDLIN( 524)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)9));
            			}
HXLINE( 525)			{
HXLINE( 525)				i = (i + (int)1);
HXDLIN( 525)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)13));
            			}
HXLINE( 527)			{
HXLINE( 527)				i = (i + (int)1);
HXDLIN( 527)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)2));
            			}
HXLINE( 528)			{
HXLINE( 528)				i = (i + (int)1);
HXDLIN( 528)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)6));
            			}
HXLINE( 529)			{
HXLINE( 529)				i = (i + (int)1);
HXDLIN( 529)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)10));
            			}
HXLINE( 530)			{
HXLINE( 530)				i = (i + (int)1);
HXDLIN( 530)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)14));
            			}
HXLINE( 532)			{
HXLINE( 532)				i = (i + (int)1);
HXDLIN( 532)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)3));
            			}
HXLINE( 533)			{
HXLINE( 533)				i = (i + (int)1);
HXDLIN( 533)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)7));
            			}
HXLINE( 534)			{
HXLINE( 534)				i = (i + (int)1);
HXDLIN( 534)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)11));
            			}
HXLINE( 535)			{
HXLINE( 535)				i = (i + (int)1);
HXDLIN( 535)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)15));
            			}
            		}
            		else {
HXLINE( 539)			{
HXLINE( 539)				i = (i + (int)1);
HXDLIN( 539)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)0));
            			}
HXLINE( 540)			{
HXLINE( 540)				i = (i + (int)1);
HXDLIN( 540)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)1));
            			}
HXLINE( 541)			{
HXLINE( 541)				i = (i + (int)1);
HXDLIN( 541)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)2));
            			}
HXLINE( 542)			{
HXLINE( 542)				i = (i + (int)1);
HXDLIN( 542)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)3));
            			}
HXLINE( 544)			{
HXLINE( 544)				i = (i + (int)1);
HXDLIN( 544)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)4));
            			}
HXLINE( 545)			{
HXLINE( 545)				i = (i + (int)1);
HXDLIN( 545)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)5));
            			}
HXLINE( 546)			{
HXLINE( 546)				i = (i + (int)1);
HXDLIN( 546)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)6));
            			}
HXLINE( 547)			{
HXLINE( 547)				i = (i + (int)1);
HXDLIN( 547)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)7));
            			}
HXLINE( 549)			{
HXLINE( 549)				i = (i + (int)1);
HXDLIN( 549)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)8));
            			}
HXLINE( 550)			{
HXLINE( 550)				i = (i + (int)1);
HXDLIN( 550)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)9));
            			}
HXLINE( 551)			{
HXLINE( 551)				i = (i + (int)1);
HXDLIN( 551)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)10));
            			}
HXLINE( 552)			{
HXLINE( 552)				i = (i + (int)1);
HXDLIN( 552)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)11));
            			}
HXLINE( 554)			{
HXLINE( 554)				i = (i + (int)1);
HXDLIN( 554)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)12));
            			}
HXLINE( 555)			{
HXLINE( 555)				i = (i + (int)1);
HXDLIN( 555)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)13));
            			}
HXLINE( 556)			{
HXLINE( 556)				i = (i + (int)1);
HXDLIN( 556)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)14));
            			}
HXLINE( 557)			{
HXLINE( 557)				i = (i + (int)1);
HXDLIN( 557)				::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((i - (int)1) * (int)4)),source->get((int)15));
            			}
            		}
HXLINE( 561)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 563)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,(int)4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromMatrix,(void))

void Context3D_obj::setProgramConstantsFromVector( ::Dynamic programType,int firstRegister, ::openfl::_Vector::FloatVector data,hx::Null< int >  __o_numRegisters){
int numRegisters = __o_numRegisters.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_570_setProgramConstantsFromVector)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(programType,"programType")
            	HX_STACK_ARG(firstRegister,"firstRegister")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(numRegisters,"numRegisters")
HXLINE( 572)		if ((numRegisters == (int)0)) {
HXLINE( 572)			return;
            		}
HXLINE( 574)		if ((numRegisters == (int)-1)) {
HXLINE( 576)			numRegisters = ((int)data->get_length() >> (int)(int)2);
            		}
HXLINE( 580)		HX_VARI( bool,isVertex) = hx::IsEq( programType,(int)1 );
HXLINE( 581)		HX_VAR(  ::lime::utils::ArrayBufferView,dest);
HXDLIN( 581)		if (isVertex) {
HXLINE( 581)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 581)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 584)		HX_VARI( int,sourceIndex) = (int)0;
HXLINE( 585)		HX_VARI( int,destIndex) = (firstRegister * (int)4);
HXLINE( 587)		{
HXLINE( 587)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 587)			HX_VARI( int,_g) = numRegisters;
HXDLIN( 587)			while((_g1 < _g)){
HXLINE( 587)				_g1 = (_g1 + (int)1);
HXLINE( 589)				{
HXLINE( 589)					destIndex = (destIndex + (int)1);
HXDLIN( 589)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 589)					::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((destIndex - (int)1) * (int)4)),data->get((sourceIndex - (int)1)));
            				}
HXLINE( 590)				{
HXLINE( 590)					destIndex = (destIndex + (int)1);
HXDLIN( 590)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 590)					::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((destIndex - (int)1) * (int)4)),data->get((sourceIndex - (int)1)));
            				}
HXLINE( 591)				{
HXLINE( 591)					destIndex = (destIndex + (int)1);
HXDLIN( 591)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 591)					::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((destIndex - (int)1) * (int)4)),data->get((sourceIndex - (int)1)));
            				}
HXLINE( 592)				{
HXLINE( 592)					destIndex = (destIndex + (int)1);
HXDLIN( 592)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 592)					::__hxcpp_memory_set_float(dest->buffer->b,(dest->byteOffset + ((destIndex - (int)1) * (int)4)),data->get((sourceIndex - (int)1)));
            				}
            			}
            		}
HXLINE( 596)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 598)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromVector,(void))

void Context3D_obj::setRenderToBackBuffer(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_605_setRenderToBackBuffer)
            	HX_STACK_THIS(this)
HXLINE( 607)		::lime::graphics::opengl::GL_obj::context->bindFramebuffer((int)36160,null());
HXLINE( 608)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 610)		this->_hx___renderToTexture = null();
HXLINE( 611)		this->_hx___scissorRectangle = null();
HXLINE( 612)		this->_hx___updateBackbufferViewport();
HXLINE( 613)		this->_hx___updateScissorRectangle();
HXLINE( 614)		this->_hx___updateDepthAndStencilState();
HXLINE( 616)		{
HXLINE( 616)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = this->_hx___positionScale;
HXDLIN( 616)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)1.0));
            		}
HXLINE( 618)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 620)			this->_hx___program->_hx___setPositionScale(this->_hx___positionScale);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,setRenderToBackBuffer,(void))

void Context3D_obj::setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias,hx::Null< int >  __o_surfaceSelector){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
int antiAlias = __o_antiAlias.Default(0);
int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_627_setRenderToTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
            	HX_STACK_ARG(enableDepthAndStencil,"enableDepthAndStencil")
            	HX_STACK_ARG(antiAlias,"antiAlias")
            	HX_STACK_ARG(surfaceSelector,"surfaceSelector")
HXLINE( 629)		HX_VARI( int,width) = (int)0;
HXLINE( 630)		HX_VARI( int,height) = (int)0;
HXLINE( 632)		if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE( 634)			HX_VARI(  ::openfl::display3D::textures::Texture,texture2D) = ( ( ::openfl::display3D::textures::Texture)(texture) );
HXLINE( 635)			width = texture2D->_hx___width;
HXLINE( 636)			height = texture2D->_hx___height;
            		}
            		else {
HXLINE( 638)			if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE( 640)				HX_VARI(  ::openfl::display3D::textures::RectangleTexture,rectTexture) = ( ( ::openfl::display3D::textures::RectangleTexture)(texture) );
HXLINE( 641)				width = rectTexture->_hx___width;
HXLINE( 642)				height = rectTexture->_hx___height;
            			}
            			else {
HXLINE( 646)				HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Invalid texture",92,3e,59,9a),null()));
            			}
            		}
HXLINE( 650)		if (hx::IsNull( this->_hx___framebuffer )) {
HXLINE( 652)			this->_hx___framebuffer = ::lime::graphics::opengl::GL_obj::context->createFramebuffer();
HXLINE( 653)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 657)		::lime::graphics::opengl::GL_obj::context->bindFramebuffer((int)36160,this->_hx___framebuffer);
HXLINE( 658)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 659)		::lime::graphics::opengl::GL_obj::context->framebufferTexture2D((int)36160,(int)36064,(int)3553,texture->_hx___textureID,(int)0);
HXLINE( 660)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 662)		if (enableDepthAndStencil) {
HXLINE( 664)			if (this->_hx___supportsPackedDepthStencil) {
HXLINE( 666)				if (hx::IsNull( this->_hx___depthStencilRenderBuffer )) {
HXLINE( 668)					this->_hx___depthStencilRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 669)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 673)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___depthStencilRenderBuffer);
HXLINE( 674)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 675)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,(int)35056,width,height);
HXLINE( 676)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 678)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)33306,(int)36161,this->_hx___depthStencilRenderBuffer);
HXLINE( 679)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 683)				if (hx::IsNull( this->_hx___depthRenderBuffer )) {
HXLINE( 685)					this->_hx___depthRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 686)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 690)				if (hx::IsNull( this->_hx___stencilRenderBuffer )) {
HXLINE( 692)					this->_hx___stencilRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 693)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 697)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___depthRenderBuffer);
HXLINE( 698)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 699)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,(int)33189,width,height);
HXLINE( 700)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 701)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___stencilRenderBuffer);
HXLINE( 702)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 703)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,(int)36168,width,height);
HXLINE( 704)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 706)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)36096,(int)36161,this->_hx___depthRenderBuffer);
HXLINE( 707)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 708)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)36128,(int)36161,this->_hx___stencilRenderBuffer);
HXLINE( 709)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
HXLINE( 713)			::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,null());
HXLINE( 714)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 718)		this->_hx___setViewport((int)0,(int)0,width,height);
HXLINE( 720)		if (this->enableErrorChecking) {
HXLINE( 724)			if ((::lime::graphics::opengl::GL_obj::context->checkFramebufferStatus((int)36160) != (int)36053)) {
HXLINE( 726)				::haxe::Log_obj::trace(HX_("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",55,db,0b,ac),hx::SourceInfo(HX_("Context3D.hx",7e,2e,cf,45),726,HX_("openfl.display3D.Context3D",a7,bf,a0,2f),HX_("setRenderToTexture",e8,2c,92,46)));
            			}
            		}
HXLINE( 732)		{
HXLINE( 732)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = this->_hx___positionScale;
HXDLIN( 732)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)-1.0));
            		}
HXLINE( 734)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 736)			this->_hx___program->_hx___setPositionScale(this->_hx___positionScale);
            		}
HXLINE( 740)		this->_hx___renderToTexture = texture;
HXLINE( 741)		this->_hx___scissorRectangle = null();
HXLINE( 742)		this->_hx___rttDepthAndStencil = enableDepthAndStencil;
HXLINE( 743)		this->_hx___updateScissorRectangle();
HXLINE( 744)		this->_hx___updateDepthAndStencilState();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setRenderToTexture,(void))

void Context3D_obj::setSamplerStateAt(int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_749_setSamplerStateAt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sampler,"sampler")
            	HX_STACK_ARG(wrap,"wrap")
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(mipfilter,"mipfilter")
HXLINE( 751)		bool _hx_tmp;
HXDLIN( 751)		if ((sampler >= (int)0)) {
HXLINE( 751)			_hx_tmp = (sampler > (int)8);
            		}
            		else {
HXLINE( 751)			_hx_tmp = true;
            		}
HXDLIN( 751)		if (_hx_tmp) {
HXLINE( 753)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("sampler out of range",de,61,c4,36),null()));
            		}
HXLINE( 757)		HX_VARI(  ::openfl::_internal::stage3D::SamplerState,state) = this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXLINE( 759)		 ::Dynamic _hx_switch_0 = wrap;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 763)			state->wrapModeS = (int)33071;
HXLINE( 764)			state->wrapModeT = (int)33071;
HXLINE( 761)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 768)			state->wrapModeS = (int)33071;
HXLINE( 769)			state->wrapModeT = (int)10497;
HXLINE( 766)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 773)			state->wrapModeS = (int)10497;
HXLINE( 774)			state->wrapModeT = (int)10497;
HXLINE( 771)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 778)			state->wrapModeS = (int)10497;
HXLINE( 779)			state->wrapModeT = (int)33071;
HXLINE( 776)			goto _hx_goto_32;
            		}
            		/* default */{
HXLINE( 783)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("wrap bad enum",52,1c,4c,59),null()));
            		}
            		_hx_goto_32:;
HXLINE( 787)		 ::Dynamic _hx_switch_1 = filter;
            		if (  (_hx_switch_1==(int)0) ){
HXLINE( 815)			state->magFilter = (int)9729;
HXDLIN( 815)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)1) ){
HXLINE( 800)			state->magFilter = (int)9729;
HXDLIN( 800)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)2) ){
HXLINE( 805)			state->magFilter = (int)9729;
HXDLIN( 805)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)3) ){
HXLINE( 810)			state->magFilter = (int)9729;
HXDLIN( 810)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)4) ){
HXLINE( 791)			state->magFilter = (int)9729;
HXDLIN( 791)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)5) ){
HXLINE( 795)			state->magFilter = (int)9728;
HXDLIN( 795)			goto _hx_goto_33;
            		}
            		/* default */{
HXLINE( 819)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("filter bad enum",a4,08,ed,96),null()));
            		}
            		_hx_goto_33:;
HXLINE( 823)		 ::Dynamic _hx_switch_2 = mipfilter;
            		if (  (_hx_switch_2==(int)0) ){
HXLINE( 827)			state->minFilter = (int)9987;
HXDLIN( 827)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_2==(int)1) ){
HXLINE( 831)			state->minFilter = (int)9984;
HXDLIN( 831)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_2==(int)2) ){
HXLINE( 835)			int _hx_tmp1;
HXDLIN( 835)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 835)				_hx_tmp1 = (int)9728;
            			}
            			else {
HXLINE( 835)				_hx_tmp1 = (int)9729;
            			}
HXDLIN( 835)			state->minFilter = _hx_tmp1;
HXDLIN( 835)			goto _hx_goto_34;
            		}
            		/* default */{
HXLINE( 839)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("mipfiter bad enum",b2,1b,09,c4),null()));
            		}
            		_hx_goto_34:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setSamplerStateAt,(void))

void Context3D_obj::setScissorRectangle( ::openfl::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_846_setScissorRectangle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rectangle,"rectangle")
HXLINE( 848)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 848)		if (hx::IsNotNull( rectangle )) {
HXLINE( 848)			_hx_tmp = rectangle->clone();
            		}
            		else {
HXLINE( 848)			_hx_tmp = null();
            		}
HXDLIN( 848)		this->_hx___scissorRectangle = _hx_tmp;
HXLINE( 849)		this->_hx___updateScissorRectangle();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setScissorRectangle,(void))

void Context3D_obj::setStencilActions( ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
 ::Dynamic triangleFace = __o_triangleFace.Default(2);
 ::Dynamic compareMode = __o_compareMode.Default(0);
 ::Dynamic actionOnBothPass = __o_actionOnBothPass.Default(5);
 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail.Default(5);
 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail.Default(5);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_854_setStencilActions)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(triangleFace,"triangleFace")
            	HX_STACK_ARG(compareMode,"compareMode")
            	HX_STACK_ARG(actionOnBothPass,"actionOnBothPass")
            	HX_STACK_ARG(actionOnDepthFail,"actionOnDepthFail")
            	HX_STACK_ARG(actionOnDepthPassStencilFail,"actionOnDepthPassStencilFail")
HXLINE( 856)		this->_hx___stencilCompareMode = compareMode;
HXLINE( 857)		::lime::graphics::opengl::GL_obj::context->stencilOp(this->_hx___getGLStencilAction(actionOnDepthFail),this->_hx___getGLStencilAction(actionOnDepthPassStencilFail),this->_hx___getGLStencilAction(actionOnBothPass));
HXLINE( 858)		::lime::graphics::opengl::GL_obj::context->stencilFunc(this->_hx___getGLCompareMode(this->_hx___stencilCompareMode),this->_hx___stencilRef,this->_hx___stencilReadMask);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setStencilActions,(void))

void Context3D_obj::setStencilReferenceValue(int referenceValue,hx::Null< int >  __o_readMask,hx::Null< int >  __o_writeMask){
int readMask = __o_readMask.Default(255);
int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_863_setStencilReferenceValue)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(referenceValue,"referenceValue")
            	HX_STACK_ARG(readMask,"readMask")
            	HX_STACK_ARG(writeMask,"writeMask")
HXLINE( 865)		this->_hx___stencilReadMask = readMask;
HXLINE( 866)		this->_hx___stencilRef = referenceValue;
HXLINE( 868)		::lime::graphics::opengl::GL_obj::context->stencilFunc(this->_hx___getGLCompareMode(this->_hx___stencilCompareMode),this->_hx___stencilRef,this->_hx___stencilReadMask);
HXLINE( 869)		::lime::graphics::opengl::GL_obj::context->stencilMask(writeMask);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setStencilReferenceValue,(void))

void Context3D_obj::setTextureAt(int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_876_setTextureAt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sampler,"sampler")
            	HX_STACK_ARG(texture,"texture")
HXLINE( 876)		if (hx::IsNotEq( this->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >(),texture )) {
HXLINE( 878)			this->_hx___samplerTextures->set(sampler,texture).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE( 879)			 ::openfl::display3D::Context3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 879)			_hx_tmp->_hx___samplerDirty = ((int)_hx_tmp->_hx___samplerDirty | (int)((int)(int)1 << (int)sampler));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setTextureAt,(void))

void Context3D_obj::setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::Dynamic __o_format){
int bufferOffset = __o_bufferOffset.Default(0);
 ::Dynamic format = __o_format.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_888_setVertexBufferAt)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(bufferOffset,"bufferOffset")
            	HX_STACK_ARG(format,"format")
HXLINE( 890)		if (hx::IsNull( buffer )) {
HXLINE( 892)			::lime::graphics::opengl::GL_obj::context->disableVertexAttribArray(index);
HXLINE( 893)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 895)			::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34962,null());
HXLINE( 896)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 898)			return;
            		}
HXLINE( 902)		::lime::graphics::opengl::GL_obj::context->enableVertexAttribArray(index);
HXLINE( 903)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 905)		::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34962,buffer->_hx___id);
HXLINE( 906)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 908)		HX_VARI( int,byteOffset) = (bufferOffset * (int)4);
HXLINE( 910)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 914)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)4,(int)5121,true,buffer->_hx___stride,byteOffset);
HXLINE( 915)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 912)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 934)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)1,(int)5126,false,buffer->_hx___stride,byteOffset);
HXLINE( 935)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 932)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 929)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)2,(int)5126,false,buffer->_hx___stride,byteOffset);
HXLINE( 930)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 927)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 924)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)3,(int)5126,false,buffer->_hx___stride,byteOffset);
HXLINE( 925)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 922)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 919)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)4,(int)5126,false,buffer->_hx___stride,byteOffset);
HXLINE( 920)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 917)			goto _hx_goto_40;
            		}
            		/* default */{
HXLINE( 939)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_40:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setVertexBufferAt,(void))

void Context3D_obj::_hx___flushSamplerState(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_946___flushSamplerState)
            	HX_STACK_THIS(this)
HXLINE( 948)		HX_VARI( int,sampler) = (int)0;
HXLINE( 950)		while((this->_hx___samplerDirty != (int)0)){
HXLINE( 952)			if ((((int)this->_hx___samplerDirty & (int)((int)(int)1 << (int)sampler)) != (int)0)) {
HXLINE( 954)				if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateActiveTextureSample(sampler)) {
HXLINE( 956)					::lime::graphics::opengl::GL_obj::context->activeTexture(((int)33984 + sampler));
HXLINE( 957)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 961)				HX_VARI(  ::openfl::display3D::textures::TextureBase,texture) = this->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE( 963)				if (hx::IsNotNull( texture )) {
HXLINE( 967)					::lime::graphics::opengl::GL_obj::context->bindTexture(texture->_hx___textureTarget,texture->_hx___getTexture());
HXLINE( 968)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 970)					texture->_hx___setSamplerState(this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >());
            				}
            				else {
HXLINE( 974)					::lime::graphics::opengl::GL_obj::context->bindTexture((int)3553,null());
HXLINE( 975)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 979)				 ::openfl::display3D::Context3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 979)				_hx_tmp->_hx___samplerDirty = ((int)_hx_tmp->_hx___samplerDirty & (int)~(((int)(int)1 << (int)sampler)));
            			}
HXLINE( 983)			sampler = (sampler + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushSamplerState,(void))

int Context3D_obj::_hx___getGLCompareMode( ::Dynamic compareMode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_992___getGLCompareMode)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(compareMode,"compareMode")
HXLINE( 992)		 ::Dynamic _hx_switch_0 = compareMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 992)			return (int)519;
HXDLIN( 992)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 992)			return (int)514;
HXDLIN( 992)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 992)			return (int)516;
HXDLIN( 992)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 992)			return (int)518;
HXDLIN( 992)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 992)			return (int)513;
HXDLIN( 992)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE( 992)			return (int)515;
HXDLIN( 992)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE( 992)			return (int)512;
HXDLIN( 992)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE( 992)			return (int)517;
HXDLIN( 992)			goto _hx_goto_44;
            		}
            		/* default */{
HXLINE( 992)			return (int)514;
            		}
            		_hx_goto_44:;
HXDLIN( 992)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLCompareMode,return )

int Context3D_obj::_hx___getGLStencilAction( ::Dynamic stencilAction){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1011___getGLStencilAction)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stencilAction,"stencilAction")
HXLINE(1011)		 ::Dynamic _hx_switch_0 = stencilAction;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1011)			return (int)7683;
HXDLIN(1011)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1011)			return (int)34056;
HXDLIN(1011)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1011)			return (int)7682;
HXDLIN(1011)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1011)			return (int)34055;
HXDLIN(1011)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1011)			return (int)5386;
HXDLIN(1011)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1011)			return (int)7680;
HXDLIN(1011)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1011)			return (int)7681;
HXDLIN(1011)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1011)			return (int)0;
HXDLIN(1011)			goto _hx_goto_46;
            		}
            		/* default */{
HXLINE(1011)			return (int)7680;
            		}
            		_hx_goto_46:;
HXDLIN(1011)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLStencilAction,return )

bool Context3D_obj::_hx___hasGLExtension(::String name){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1030___hasGLExtension)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(1030)		return (::lime::graphics::opengl::GL_obj::context->getSupportedExtensions()->indexOf(name,null()) != (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___hasGLExtension,return )

void Context3D_obj::_hx___setViewport(int originX,int originY,int width,int height){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1037___setViewport)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(originX,"originX")
            	HX_STACK_ARG(originY,"originY")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1037)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateViewport(originX,originY,width,height)) {
HXLINE(1039)			::lime::graphics::opengl::GL_obj::context->viewport(originX,originY,width,height);
HXLINE(1040)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,_hx___setViewport,(void))

int Context3D_obj::_hx___statsAdd(int stat,int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1047___statsAdd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
            	HX_STACK_ARG(value,"value")
HXLINE(1049)		this->_hx___stats->set(stat,(this->_hx___stats->get(stat) + value));
HXLINE(1050)		return this->_hx___stats->get(stat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___statsAdd,return )

void Context3D_obj::_hx___statsClear(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1057___statsClear)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
HXLINE(1057)		this->_hx___stats->set(stat,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsClear,(void))

void Context3D_obj::_hx___statsDecrement(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1064___statsDecrement)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
HXLINE(1064)		this->_hx___stats->set(stat,(this->_hx___stats->get(stat) - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsDecrement,(void))

void Context3D_obj::_hx___statsIncrement(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1071___statsIncrement)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
HXLINE(1071)		this->_hx___stats->set(stat,(this->_hx___stats->get(stat) + (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsIncrement,(void))

void Context3D_obj::_hx___statsSendToTelemetry(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1076___statsSendToTelemetry)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___statsSendToTelemetry,(void))

int Context3D_obj::_hx___statsSubtract(int stat,int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1125___statsSubtract)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stat,"stat")
            	HX_STACK_ARG(value,"value")
HXLINE(1127)		this->_hx___stats->set(stat,(this->_hx___stats->get(stat) - value));
HXLINE(1128)		return this->_hx___stats->get(stat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___statsSubtract,return )

void Context3D_obj::_hx___updateDepthAndStencilState(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1132___updateDepthAndStencilState)
            	HX_STACK_THIS(this)
HXLINE(1134)		HX_VAR( bool,depthAndStencil);
HXDLIN(1134)		if (hx::IsNotNull( this->_hx___renderToTexture )) {
HXLINE(1134)			depthAndStencil = this->_hx___rttDepthAndStencil;
            		}
            		else {
HXLINE(1134)			depthAndStencil = this->_hx___backBufferEnableDepthAndStencil;
            		}
HXLINE(1136)		if (depthAndStencil) {
HXLINE(1138)			::lime::graphics::opengl::GL_obj::context->enable((int)2929);
HXLINE(1139)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1140)			::lime::graphics::opengl::GL_obj::context->enable((int)2960);
HXLINE(1141)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE(1145)			::lime::graphics::opengl::GL_obj::context->disable((int)2929);
HXLINE(1146)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1147)			::lime::graphics::opengl::GL_obj::context->disable((int)2960);
HXLINE(1148)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateDepthAndStencilState,(void))

void Context3D_obj::_hx___updateBlendFactors(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1155___updateBlendFactors)
            	HX_STACK_THIS(this)
HXLINE(1157)		bool _hx_tmp;
HXDLIN(1157)		if (hx::IsNotNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor )) {
HXLINE(1157)			_hx_tmp = hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor );
            		}
            		else {
HXLINE(1157)			_hx_tmp = true;
            		}
HXDLIN(1157)		if (_hx_tmp) {
HXLINE(1159)			return;
            		}
HXLINE(1163)		HX_VARI( int,src) = (int)1;
HXLINE(1164)		HX_VARI( int,dest) = (int)0;
HXLINE(1165)		 ::Dynamic _hx_switch_0 = ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1170)			src = (int)772;
HXDLIN(1170)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1171)			src = (int)774;
HXDLIN(1171)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1167)			src = (int)1;
HXDLIN(1167)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1173)			src = (int)773;
HXDLIN(1173)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1174)			src = (int)775;
HXDLIN(1174)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1172)			src = (int)771;
HXDLIN(1172)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1169)			src = (int)770;
HXDLIN(1169)			goto _hx_goto_57;
            		}
            		if (  (_hx_switch_0==(int)9) ){
HXLINE(1168)			src = (int)0;
HXDLIN(1168)			goto _hx_goto_57;
            		}
            		/* default */{
HXLINE(1176)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_57:;
HXLINE(1180)		 ::Dynamic _hx_switch_1 = ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor;
            		if (  (_hx_switch_1==(int)0) ){
HXLINE(1186)			dest = (int)772;
HXDLIN(1186)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_1==(int)2) ){
HXLINE(1182)			dest = (int)1;
HXDLIN(1182)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_1==(int)3) ){
HXLINE(1189)			dest = (int)773;
HXDLIN(1189)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_1==(int)5) ){
HXLINE(1187)			dest = (int)771;
HXDLIN(1187)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_1==(int)6) ){
HXLINE(1188)			dest = (int)769;
HXDLIN(1188)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_1==(int)7) ){
HXLINE(1184)			dest = (int)770;
HXDLIN(1184)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_1==(int)8) ){
HXLINE(1185)			dest = (int)768;
HXDLIN(1185)			goto _hx_goto_58;
            		}
            		if (  (_hx_switch_1==(int)9) ){
HXLINE(1183)			dest = (int)0;
HXDLIN(1183)			goto _hx_goto_58;
            		}
            		/* default */{
HXLINE(1191)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_58:;
HXLINE(1195)		::lime::graphics::opengl::GL_obj::context->enable((int)3042);
HXLINE(1196)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1197)		::lime::graphics::opengl::GL_obj::context->blendFunc(src,dest);
HXLINE(1198)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBlendFactors,(void))

void Context3D_obj::_hx___updateScissorRectangle(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1203___updateScissorRectangle)
            	HX_STACK_THIS(this)
HXLINE(1205)		if (hx::IsNull( this->_hx___scissorRectangle )) {
HXLINE(1207)			::lime::graphics::opengl::GL_obj::context->disable((int)3089);
HXLINE(1208)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1209)			return;
            		}
HXLINE(1213)		::lime::graphics::opengl::GL_obj::context->enable((int)3089);
HXLINE(1214)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1216)		HX_VARI( int,height) = (int)0;
HXLINE(1218)		if (hx::IsNotNull( this->_hx___renderToTexture )) {
HXLINE(1220)			if (::Std_obj::is(this->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE(1223)				height = ( ( ::openfl::display3D::textures::Texture)(this->_hx___renderToTexture) )->_hx___height;
            			}
            			else {
HXLINE(1225)				if (::Std_obj::is(this->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(1228)					height = ( ( ::openfl::display3D::textures::RectangleTexture)(this->_hx___renderToTexture) )->_hx___height;
            				}
            			}
            		}
            		else {
HXLINE(1234)			height = this->backBufferHeight;
            		}
HXLINE(1238)		{
HXLINE(1238)			int x = ::Std_obj::_hx_int(this->_hx___scissorRectangle->x);
HXLINE(1239)			HX_VARI( int,y) = (height - ::Std_obj::_hx_int(this->_hx___scissorRectangle->y));
HXLINE(1238)			int y1 = ::Std_obj::_hx_int((y - ::Std_obj::_hx_int(this->_hx___scissorRectangle->height)));
HXDLIN(1238)			int width = ::Std_obj::_hx_int(this->_hx___scissorRectangle->width);
HXDLIN(1238)			int height1 = ::Std_obj::_hx_int(this->_hx___scissorRectangle->height);
HXDLIN(1238)			::lime::graphics::opengl::GL_obj::context->scissor(x,y1,width,height1);
            		}
HXLINE(1243)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateScissorRectangle,(void))

void Context3D_obj::_hx___updateBackbufferViewport(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1250___updateBackbufferViewport)
            	HX_STACK_THIS(this)
HXLINE(1250)		if (hx::IsNull( this->_hx___renderToTexture )) {
HXLINE(1252)			int _hx_tmp = ::Std_obj::_hx_int(this->_hx___stage3D->x);
HXDLIN(1252)			int _hx_tmp1 = ::Std_obj::_hx_int(this->_hx___stage3D->y);
HXDLIN(1252)			this->_hx___setViewport(_hx_tmp,_hx_tmp1,this->backBufferWidth,this->backBufferHeight);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBackbufferViewport,(void))

bool Context3D_obj::set_enableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1261_set_enableErrorChecking)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1261)		return (this->enableErrorChecking = (::openfl::_internal::stage3D::GLUtils_obj::debug = value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,set_enableErrorChecking,return )

bool Context3D_obj::supportsVideoTexture;

int Context3D_obj::MAX_SAMPLERS;

int Context3D_obj::MAX_ATTRIBUTES;

int Context3D_obj::MAX_PROGRAM_REGISTERS;

 ::openfl::_internal::stage3D::Context3DStateCache Context3D_obj::_hx___stateCache;


hx::ObjectPtr< Context3D_obj > Context3D_obj::__new( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession) {
	hx::ObjectPtr< Context3D_obj > __this = new Context3D_obj();
	__this->__construct(stage3D,renderSession);
	return __this;
}

hx::ObjectPtr< Context3D_obj > Context3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession) {
	Context3D_obj *__this = (Context3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3D_obj), true, "openfl.display3D.Context3D"));
	*(void **)__this = Context3D_obj::_hx_vtable;
	__this->__construct(stage3D,renderSession);
	return __this;
}

Context3D_obj::Context3D_obj()
{
}

void Context3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3D);
	HX_MARK_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_MARK_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_MARK_MEMBER_NAME(driverInfo,"driverInfo");
	HX_MARK_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_MARK_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_MARK_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_MARK_MEMBER_NAME(profile,"profile");
	HX_MARK_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_MARK_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_MARK_MEMBER_NAME(_hx___backBufferEnableDepthAndStencil,"__backBufferEnableDepthAndStencil");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_MARK_MEMBER_NAME(_hx___depthRenderBuffer,"__depthRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___depthStencilRenderBuffer,"__depthStencilRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_MARK_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_MARK_MEMBER_NAME(_hx___program,"__program");
	HX_MARK_MEMBER_NAME(_hx___renderSession,"__renderSession");
	HX_MARK_MEMBER_NAME(_hx___renderToTexture,"__renderToTexture");
	HX_MARK_MEMBER_NAME(_hx___rttDepthAndStencil,"__rttDepthAndStencil");
	HX_MARK_MEMBER_NAME(_hx___samplerDirty,"__samplerDirty");
	HX_MARK_MEMBER_NAME(_hx___samplerTextures,"__samplerTextures");
	HX_MARK_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_MARK_MEMBER_NAME(_hx___scissorRectangle,"__scissorRectangle");
	HX_MARK_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_MARK_MEMBER_NAME(_hx___stats,"__stats");
	HX_MARK_MEMBER_NAME(_hx___statsCache,"__statsCache");
	HX_MARK_MEMBER_NAME(_hx___stencilCompareMode,"__stencilCompareMode");
	HX_MARK_MEMBER_NAME(_hx___stencilRef,"__stencilRef");
	HX_MARK_MEMBER_NAME(_hx___stencilReadMask,"__stencilReadMask");
	HX_MARK_MEMBER_NAME(_hx___stencilRenderBuffer,"__stencilRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___supportsPackedDepthStencil,"__supportsPackedDepthStencil");
	HX_MARK_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_VISIT_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_VISIT_MEMBER_NAME(driverInfo,"driverInfo");
	HX_VISIT_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_VISIT_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_VISIT_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_VISIT_MEMBER_NAME(profile,"profile");
	HX_VISIT_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_VISIT_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_VISIT_MEMBER_NAME(_hx___backBufferEnableDepthAndStencil,"__backBufferEnableDepthAndStencil");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_VISIT_MEMBER_NAME(_hx___depthRenderBuffer,"__depthRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___depthStencilRenderBuffer,"__depthStencilRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_VISIT_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_VISIT_MEMBER_NAME(_hx___program,"__program");
	HX_VISIT_MEMBER_NAME(_hx___renderSession,"__renderSession");
	HX_VISIT_MEMBER_NAME(_hx___renderToTexture,"__renderToTexture");
	HX_VISIT_MEMBER_NAME(_hx___rttDepthAndStencil,"__rttDepthAndStencil");
	HX_VISIT_MEMBER_NAME(_hx___samplerDirty,"__samplerDirty");
	HX_VISIT_MEMBER_NAME(_hx___samplerTextures,"__samplerTextures");
	HX_VISIT_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_VISIT_MEMBER_NAME(_hx___scissorRectangle,"__scissorRectangle");
	HX_VISIT_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_VISIT_MEMBER_NAME(_hx___stats,"__stats");
	HX_VISIT_MEMBER_NAME(_hx___statsCache,"__statsCache");
	HX_VISIT_MEMBER_NAME(_hx___stencilCompareMode,"__stencilCompareMode");
	HX_VISIT_MEMBER_NAME(_hx___stencilRef,"__stencilRef");
	HX_VISIT_MEMBER_NAME(_hx___stencilReadMask,"__stencilReadMask");
	HX_VISIT_MEMBER_NAME(_hx___stencilRenderBuffer,"__stencilRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___supportsPackedDepthStencil,"__supportsPackedDepthStencil");
	HX_VISIT_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Context3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return hx::Val( profile); }
		if (HX_FIELD_EQ(inName,"__stats") ) { return hx::Val( _hx___stats); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__program") ) { return hx::Val( _hx___program); }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { return hx::Val( _hx___stage3D); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { return hx::Val( driverInfo); }
		if (HX_FIELD_EQ(inName,"setCulling") ) { return hx::Val( setCulling_dyn()); }
		if (HX_FIELD_EQ(inName,"setProgram") ) { return hx::Val( setProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsAdd") ) { return hx::Val( _hx___statsAdd_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__frameCount") ) { return hx::Val( _hx___frameCount); }
		if (HX_FIELD_EQ(inName,"__statsCache") ) { return hx::Val( _hx___statsCache); }
		if (HX_FIELD_EQ(inName,"__stencilRef") ) { return hx::Val( _hx___stencilRef); }
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return hx::Val( setColorMask_dyn()); }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { return hx::Val( setDepthTest_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { return hx::Val( setTextureAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsClear") ) { return hx::Val( _hx___statsClear_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer); }
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		if (HX_FIELD_EQ(inName,"__setViewport") ) { return hx::Val( _hx___setViewport_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { return hx::Val( totalGPUMemory); }
		if (HX_FIELD_EQ(inName,"__samplerDirty") ) { return hx::Val( _hx___samplerDirty); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { return hx::Val( backBufferWidth); }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { return hx::Val( _hx___positionScale); }
		if (HX_FIELD_EQ(inName,"__renderSession") ) { return hx::Val( _hx___renderSession); }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { return hx::Val( _hx___samplerStates); }
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { return hx::Val( setBlendFactors_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsSubtract") ) { return hx::Val( _hx___statsSubtract_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { return hx::Val( backBufferHeight); }
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { return hx::Val( drawToBitmapData_dyn()); }
		if (HX_FIELD_EQ(inName,"__hasGLExtension") ) { return hx::Val( _hx___hasGLExtension_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsDecrement") ) { return hx::Val( _hx___statsDecrement_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsIncrement") ) { return hx::Val( _hx___statsIncrement_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderToTexture") ) { return hx::Val( _hx___renderToTexture); }
		if (HX_FIELD_EQ(inName,"__samplerTextures") ) { return hx::Val( _hx___samplerTextures); }
		if (HX_FIELD_EQ(inName,"__stencilReadMask") ) { return hx::Val( _hx___stencilReadMask); }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { return hx::Val( _hx___vertexConstants); }
		if (HX_FIELD_EQ(inName,"createCubeTexture") ) { return hx::Val( createCubeTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return hx::Val( createIndexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { return hx::Val( setSamplerStateAt_dyn()); }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { return hx::Val( setStencilActions_dyn()); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return hx::Val( setVertexBufferAt_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { return hx::Val( maxBackBufferWidth); }
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { return hx::Val( _hx___scissorRectangle); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return hx::Val( createVertexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"createVideoTexture") ) { return hx::Val( createVideoTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { return hx::Val( setRenderToTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { return hx::Val( _hx___getGLCompareMode_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { return hx::Val( enableErrorChecking); }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { return hx::Val( maxBackBufferHeight); }
		if (HX_FIELD_EQ(inName,"__depthRenderBuffer") ) { return hx::Val( _hx___depthRenderBuffer); }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { return hx::Val( _hx___fragmentConstants); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return hx::Val( configureBackBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { return hx::Val( setScissorRectangle_dyn()); }
		if (HX_FIELD_EQ(inName,"__flushSamplerState") ) { return hx::Val( _hx___flushSamplerState_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__rttDepthAndStencil") ) { return hx::Val( _hx___rttDepthAndStencil); }
		if (HX_FIELD_EQ(inName,"__stencilCompareMode") ) { return hx::Val( _hx___stencilCompareMode); }
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { return hx::Val( _hx___getGLStencilAction_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateBlendFactors") ) { return hx::Val( _hx___updateBlendFactors_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { return hx::Val( _hx___backBufferAntiAlias); }
		if (HX_FIELD_EQ(inName,"__stencilRenderBuffer") ) { return hx::Val( _hx___stencilRenderBuffer); }
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { return hx::Val( setRenderToBackBuffer_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createRectangleTexture") ) { return hx::Val( createRectangleTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsSendToTelemetry") ) { return hx::Val( _hx___statsSendToTelemetry_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"set_enableErrorChecking") ) { return hx::Val( set_enableErrorChecking_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { return hx::Val( setStencilReferenceValue_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateScissorRectangle") ) { return hx::Val( _hx___updateScissorRectangle_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__depthStencilRenderBuffer") ) { return hx::Val( _hx___depthStencilRenderBuffer); }
		if (HX_FIELD_EQ(inName,"__updateBackbufferViewport") ) { return hx::Val( _hx___updateBackbufferViewport_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__supportsPackedDepthStencil") ) { return hx::Val( _hx___supportsPackedDepthStencil); }
		if (HX_FIELD_EQ(inName,"__updateDepthAndStencilState") ) { return hx::Val( _hx___updateDepthAndStencilState_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { return hx::Val( setProgramConstantsFromMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { return hx::Val( setProgramConstantsFromVector_dyn()); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { return hx::Val( _hx___backBufferWantsBestResolution); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { return hx::Val( setProgramConstantsFromByteArray_dyn()); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"__backBufferEnableDepthAndStencil") ) { return hx::Val( _hx___backBufferEnableDepthAndStencil); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__stateCache") ) { outValue = _hx___stateCache; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { outValue = supportsVideoTexture; return true; }
	}
	return false;
}

hx::Val Context3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { profile=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stats") ) { _hx___stats=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__program") ) { _hx___program=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { _hx___stage3D=inValue.Cast<  ::openfl::display::Stage3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { driverInfo=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__frameCount") ) { _hx___frameCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__statsCache") ) { _hx___statsCache=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilRef") ) { _hx___stencilRef=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { totalGPUMemory=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerDirty") ) { _hx___samplerDirty=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { backBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { _hx___positionScale=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderSession") ) { _hx___renderSession=inValue.Cast<  ::openfl::_internal::renderer::RenderSession >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { _hx___samplerStates=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { backBufferHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderToTexture") ) { _hx___renderToTexture=inValue.Cast<  ::openfl::display3D::textures::TextureBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerTextures") ) { _hx___samplerTextures=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilReadMask") ) { _hx___stencilReadMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { _hx___vertexConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { maxBackBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { _hx___scissorRectangle=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enableErrorChecking(inValue) );enableErrorChecking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { maxBackBufferHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__depthRenderBuffer") ) { _hx___depthRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { _hx___fragmentConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__rttDepthAndStencil") ) { _hx___rttDepthAndStencil=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilCompareMode") ) { _hx___stencilCompareMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { _hx___backBufferAntiAlias=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilRenderBuffer") ) { _hx___stencilRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__depthStencilRenderBuffer") ) { _hx___depthStencilRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__supportsPackedDepthStencil") ) { _hx___supportsPackedDepthStencil=inValue.Cast< bool >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { _hx___backBufferWantsBestResolution=inValue.Cast< bool >(); return inValue; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"__backBufferEnableDepthAndStencil") ) { _hx___backBufferEnableDepthAndStencil=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__stateCache") ) { _hx___stateCache=ioValue.Cast<  ::openfl::_internal::stage3D::Context3DStateCache >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { supportsVideoTexture=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Context3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"));
	outFields->push(HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"));
	outFields->push(HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"));
	outFields->push(HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"));
	outFields->push(HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"));
	outFields->push(HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"));
	outFields->push(HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"));
	outFields->push(HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"));
	outFields->push(HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"));
	outFields->push(HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce"));
	outFields->push(HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"));
	outFields->push(HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32"));
	outFields->push(HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76"));
	outFields->push(HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"));
	outFields->push(HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"));
	outFields->push(HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"));
	outFields->push(HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"));
	outFields->push(HX_HCSTRING("__program","\x64","\x9b","\x47","\x75"));
	outFields->push(HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17"));
	outFields->push(HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a"));
	outFields->push(HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce"));
	outFields->push(HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32"));
	outFields->push(HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14"));
	outFields->push(HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"));
	outFields->push(HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"));
	outFields->push(HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"));
	outFields->push(HX_HCSTRING("__stats","\xff","\xce","\x69","\xee"));
	outFields->push(HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82"));
	outFields->push(HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56"));
	outFields->push(HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0"));
	outFields->push(HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68"));
	outFields->push(HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34"));
	outFields->push(HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa"));
	outFields->push(HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Context3D_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferHeight),HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferWidth),HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c")},
	{hx::fsString,(int)offsetof(Context3D_obj,driverInfo),HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3")},
	{hx::fsBool,(int)offsetof(Context3D_obj,enableErrorChecking),HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferHeight),HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferWidth),HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,profile),HX_HCSTRING("profile","\x29","\x49","\x49","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,totalGPUMemory),HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___backBufferAntiAlias),HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferEnableDepthAndStencil),HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolution),HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___depthRenderBuffer),HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___depthStencilRenderBuffer),HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___fragmentConstants),HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65")},
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(Context3D_obj,_hx___framebuffer),HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___frameCount),HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___positionScale),HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a")},
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(int)offsetof(Context3D_obj,_hx___program),HX_HCSTRING("__program","\x64","\x9b","\x47","\x75")},
	{hx::fsObject /*::openfl::_internal::renderer::RenderSession*/ ,(int)offsetof(Context3D_obj,_hx___renderSession),HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17")},
	{hx::fsObject /*::openfl::display3D::textures::TextureBase*/ ,(int)offsetof(Context3D_obj,_hx___renderToTexture),HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___rttDepthAndStencil),HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___samplerDirty),HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(Context3D_obj,_hx___samplerTextures),HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,_hx___samplerStates),HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Context3D_obj,_hx___scissorRectangle),HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77")},
	{hx::fsObject /*::openfl::display::Stage3D*/ ,(int)offsetof(Context3D_obj,_hx___stage3D),HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(Context3D_obj,_hx___stats),HX_HCSTRING("__stats","\xff","\xce","\x69","\xee")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(Context3D_obj,_hx___statsCache),HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,_hx___stencilCompareMode),HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___stencilRef),HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___stencilReadMask),HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___stencilRenderBuffer),HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___supportsPackedDepthStencil),HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___vertexConstants),HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3D_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Context3D_obj::supportsVideoTexture,HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_SAMPLERS,HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_ATTRIBUTES,HX_HCSTRING("MAX_ATTRIBUTES","\xf2","\x89","\xd4","\x39")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_PROGRAM_REGISTERS,HX_HCSTRING("MAX_PROGRAM_REGISTERS","\xfa","\x9b","\x3d","\x0f")},
	{hx::fsObject /*::openfl::_internal::stage3D::Context3DStateCache*/ ,(void *) &Context3D_obj::_hx___stateCache,HX_HCSTRING("__stateCache","\x91","\x71","\x8f","\xe9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3D_obj_sMemberFields[] = {
	HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"),
	HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"),
	HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"),
	HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"),
	HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"),
	HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"),
	HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"),
	HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"),
	HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"),
	HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce"),
	HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"),
	HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32"),
	HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76"),
	HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"),
	HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"),
	HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"),
	HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"),
	HX_HCSTRING("__program","\x64","\x9b","\x47","\x75"),
	HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17"),
	HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a"),
	HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce"),
	HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32"),
	HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14"),
	HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"),
	HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"),
	HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"),
	HX_HCSTRING("__stats","\xff","\xce","\x69","\xee"),
	HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82"),
	HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56"),
	HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0"),
	HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68"),
	HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34"),
	HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa"),
	HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("createCubeTexture","\xca","\x46","\x30","\xc8"),
	HX_HCSTRING("createIndexBuffer","\x16","\x40","\x47","\x48"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("createRectangleTexture","\x88","\x8b","\xb3","\xf2"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("createVertexBuffer","\xa0","\xec","\xc7","\x6a"),
	HX_HCSTRING("createVideoTexture","\xbc","\x6e","\xfb","\xb2"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("setBlendFactors","\x35","\x4b","\xcd","\xf5"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setCulling","\xee","\x06","\x67","\xa6"),
	HX_HCSTRING("setDepthTest","\xf3","\xe2","\xcc","\xc7"),
	HX_HCSTRING("setProgram","\x02","\x6f","\xd8","\x46"),
	HX_HCSTRING("setProgramConstantsFromByteArray","\x3a","\x1f","\x12","\xd4"),
	HX_HCSTRING("setProgramConstantsFromMatrix","\xd8","\xd0","\x45","\xbe"),
	HX_HCSTRING("setProgramConstantsFromVector","\x5a","\x4b","\xdb","\x99"),
	HX_HCSTRING("setRenderToBackBuffer","\x9a","\x84","\xfb","\xad"),
	HX_HCSTRING("setRenderToTexture","\xe8","\x2c","\x92","\x46"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("setScissorRectangle","\x35","\x04","\x2c","\x03"),
	HX_HCSTRING("setStencilActions","\xa3","\xec","\xa6","\x2c"),
	HX_HCSTRING("setStencilReferenceValue","\xc0","\xdf","\xa3","\x11"),
	HX_HCSTRING("setTextureAt","\xac","\xee","\x98","\xd3"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("__flushSamplerState","\xad","\xd1","\x48","\x4d"),
	HX_HCSTRING("__getGLCompareMode","\x4d","\xad","\x57","\x0d"),
	HX_HCSTRING("__getGLStencilAction","\xb7","\xa4","\x86","\x0d"),
	HX_HCSTRING("__hasGLExtension","\xa0","\xfe","\x45","\x9c"),
	HX_HCSTRING("__setViewport","\x08","\x57","\x7e","\x15"),
	HX_HCSTRING("__statsAdd","\x62","\x04","\xea","\x0b"),
	HX_HCSTRING("__statsClear","\x0e","\x56","\xd5","\x89"),
	HX_HCSTRING("__statsDecrement","\x14","\xaf","\x6e","\xa5"),
	HX_HCSTRING("__statsIncrement","\x30","\xbf","\xeb","\xc6"),
	HX_HCSTRING("__statsSendToTelemetry","\xd7","\xb8","\x7e","\x01"),
	HX_HCSTRING("__statsSubtract","\x33","\x97","\x22","\x32"),
	HX_HCSTRING("__updateDepthAndStencilState","\xf2","\x9d","\xe7","\xb2"),
	HX_HCSTRING("__updateBlendFactors","\x3c","\x4f","\x58","\x2e"),
	HX_HCSTRING("__updateScissorRectangle","\xbc","\x17","\x57","\x7f"),
	HX_HCSTRING("__updateBackbufferViewport","\x76","\x09","\xc0","\x09"),
	HX_HCSTRING("set_enableErrorChecking","\x22","\x4c","\xd0","\xc4"),
	::String(null()) };

static void Context3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_ATTRIBUTES,"MAX_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_PROGRAM_REGISTERS,"MAX_PROGRAM_REGISTERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___stateCache,"__stateCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_ATTRIBUTES,"MAX_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_PROGRAM_REGISTERS,"MAX_PROGRAM_REGISTERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___stateCache,"__stateCache");
};

#endif

hx::Class Context3D_obj::__mClass;

static ::String Context3D_obj_sStaticFields[] = {
	HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67"),
	HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06"),
	HX_HCSTRING("MAX_ATTRIBUTES","\xf2","\x89","\xd4","\x39"),
	HX_HCSTRING("MAX_PROGRAM_REGISTERS","\xfa","\x9b","\x3d","\x0f"),
	HX_HCSTRING("__stateCache","\x91","\x71","\x8f","\xe9"),
	::String(null())
};

void Context3D_obj::__register()
{
	hx::Object *dummy = new Context3D_obj;
	Context3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.Context3D","\xa7","\xbf","\xa0","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3D_obj::__SetStatic;
	__mClass->mMarkFunc = Context3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_47_boot)
HXLINE(  47)		supportsVideoTexture = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_49_boot)
HXLINE(  49)		MAX_SAMPLERS = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_50_boot)
HXLINE(  50)		MAX_ATTRIBUTES = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_51_boot)
HXLINE(  51)		MAX_PROGRAM_REGISTERS = (int)128;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_53_boot)
HXLINE(  53)		_hx___stateCache =  ::openfl::_internal::stage3D::Context3DStateCache_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace display3D
