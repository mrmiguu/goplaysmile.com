// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_59_closePath,"openfl._internal.renderer.cairo.CairoGraphics","closePath",0x6dffa481,"openfl._internal.renderer.cairo.CairoGraphics.closePath","openfl/_internal/renderer/cairo/CairoGraphics.hx",59,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_87_createGradientPattern,"openfl._internal.renderer.cairo.CairoGraphics","createGradientPattern",0x9888a3a8,"openfl._internal.renderer.cairo.CairoGraphics.createGradientPattern","openfl/_internal/renderer/cairo/CairoGraphics.hx",87,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_148_createImagePattern,"openfl._internal.renderer.cairo.CairoGraphics","createImagePattern",0x42487dcd,"openfl._internal.renderer.cairo.CairoGraphics.createImagePattern","openfl/_internal/renderer/cairo/CairoGraphics.hx",148,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_166_drawRoundRect,"openfl._internal.renderer.cairo.CairoGraphics","drawRoundRect",0xa42fd4f2,"openfl._internal.renderer.cairo.CairoGraphics.drawRoundRect","openfl/_internal/renderer/cairo/CairoGraphics.hx",166,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_200_endFill,"openfl._internal.renderer.cairo.CairoGraphics","endFill",0x21233e02,"openfl._internal.renderer.cairo.CairoGraphics.endFill","openfl/_internal/renderer/cairo/CairoGraphics.hx",200,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_209_endStroke,"openfl._internal.renderer.cairo.CairoGraphics","endStroke",0xaaf640f7,"openfl._internal.renderer.cairo.CairoGraphics.endStroke","openfl/_internal/renderer/cairo/CairoGraphics.hx",209,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_219_hitTest,"openfl._internal.renderer.cairo.CairoGraphics","hitTest",0xddc21649,"openfl._internal.renderer.cairo.CairoGraphics.hitTest","openfl/_internal/renderer/cairo/CairoGraphics.hx",219,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_433_isCCW,"openfl._internal.renderer.cairo.CairoGraphics","isCCW",0x5353f111,"openfl._internal.renderer.cairo.CairoGraphics.isCCW","openfl/_internal/renderer/cairo/CairoGraphics.hx",433,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_438_normalizeUVT,"openfl._internal.renderer.cairo.CairoGraphics","normalizeUVT",0xc9c604e2,"openfl._internal.renderer.cairo.CairoGraphics.normalizeUVT","openfl/_internal/renderer/cairo/CairoGraphics.hx",438,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_487_playCommands,"openfl._internal.renderer.cairo.CairoGraphics","playCommands",0xcc85aa58,"openfl._internal.renderer.cairo.CairoGraphics.playCommands","openfl/_internal/renderer/cairo/CairoGraphics.hx",487,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_983_quadraticCurveTo,"openfl._internal.renderer.cairo.CairoGraphics","quadraticCurveTo",0x01a3b18e,"openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo","openfl/_internal/renderer/cairo/CairoGraphics.hx",983,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_1008_render,"openfl._internal.renderer.cairo.CairoGraphics","render",0x3c3e61d2,"openfl._internal.renderer.cairo.CairoGraphics.render","openfl/_internal/renderer/cairo/CairoGraphics.hx",1008,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_1212_renderMask,"openfl._internal.renderer.cairo.CairoGraphics","renderMask",0x2ed81fde,"openfl._internal.renderer.cairo.CairoGraphics.renderMask","openfl/_internal/renderer/cairo/CairoGraphics.hx",1212,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_38_boot,"openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",38,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_39_boot,"openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",39,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_46_boot,"openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",46,0x744ae94c)
HX_DEFINE_STACK_FRAME(_hx_pos_7c423d109b848e15_55_boot,"openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",55,0x744ae94c)
namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoGraphics_obj::__construct() { }

Dynamic CairoGraphics_obj::__CreateEmpty() { return new CairoGraphics_obj; }

void *CairoGraphics_obj::_hx_vtable = 0;

Dynamic CairoGraphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoGraphics_obj > _hx_result = new CairoGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CairoGraphics_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5163c976;
}

Float CairoGraphics_obj::SIN45;

Float CairoGraphics_obj::TAN22;

bool CairoGraphics_obj::allowSmoothing;

 ::openfl::display::BitmapData CairoGraphics_obj::bitmapFill;

bool CairoGraphics_obj::bitmapRepeat;

 ::openfl::geom::Rectangle CairoGraphics_obj::bounds;

 ::lime::graphics::cairo::Cairo CairoGraphics_obj::cairo;

 ::openfl::_internal::renderer::DrawCommandBuffer CairoGraphics_obj::fillCommands;

 ::Dynamic CairoGraphics_obj::fillPattern;

 ::openfl::geom::Matrix CairoGraphics_obj::fillPatternMatrix;

 ::openfl::display::Graphics CairoGraphics_obj::graphics;

bool CairoGraphics_obj::hasFill;

bool CairoGraphics_obj::hasStroke;

bool CairoGraphics_obj::hitTesting;

 ::openfl::geom::Matrix CairoGraphics_obj::inversePendingMatrix;

 ::openfl::geom::Matrix CairoGraphics_obj::pendingMatrix;

 ::openfl::_internal::renderer::DrawCommandBuffer CairoGraphics_obj::strokeCommands;

 ::Dynamic CairoGraphics_obj::strokePattern;

void CairoGraphics_obj::closePath(hx::Null< bool >  __o_strokeBefore){
bool strokeBefore = __o_strokeBefore.Default(false);
            	HX_STACKFRAME(&_hx_pos_7c423d109b848e15_59_closePath)
            	HX_STACK_ARG(strokeBefore,"strokeBefore")
HXLINE(  61)		if (hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern )) {
HXLINE(  63)			return;
            		}
HXLINE(  67)		if (!(strokeBefore)) {
HXLINE(  69)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            		}
HXLINE(  73)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern);
HXLINE(  74)		if (!(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting)) {
HXLINE(  74)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->strokePreserve();
            		}
HXLINE(  76)		if (strokeBefore) {
HXLINE(  78)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            		}
HXLINE(  82)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CairoGraphics_obj,closePath,(void))

 ::Dynamic CairoGraphics_obj::createGradientPattern( ::Dynamic type,::cpp::VirtualArray colors,::cpp::VirtualArray alphas,::cpp::VirtualArray ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_87_createGradientPattern)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE(  89)		HX_VARI(  ::Dynamic,pattern) = null();
HXLINE(  91)		 ::Dynamic _hx_switch_0 = type;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 106)			if (hx::IsNull( matrix )) {
HXLINE( 106)				matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE( 108)			HX_VARI(  ::openfl::geom::Point,point1) = matrix->transformPoint( ::openfl::geom::Point_obj::__alloc( HX_CTX ,((Float)-819.2),(int)0));
HXLINE( 109)			HX_VARI(  ::openfl::geom::Point,point2) = matrix->transformPoint( ::openfl::geom::Point_obj::__alloc( HX_CTX ,((Float)819.2),(int)0));
HXLINE( 111)			point1->x = (point1->x + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 112)			point2->x = (point2->x + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 113)			point1->y = (point1->y + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 114)			point2->y = (point2->y + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 116)			pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createLinear(point1->x,point1->y,point2->x,point2->y);
HXLINE( 104)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(  95)			if (hx::IsNull( matrix )) {
HXLINE(  95)				matrix =  ::openfl::geom::Matrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            			}
HXLINE(  99)			HX_VARI( Float,x) = (matrix->tx + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 100)			HX_VARI( Float,y) = (matrix->ty + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 102)			pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRadial(x,y,(int)0,x,y,::Math_obj::abs(((Float)(matrix->transformPoint( ::openfl::geom::Point_obj::__alloc( HX_CTX ,((Float)1638.4),(int)0))->x - matrix->tx) / (Float)(int)2)));
HXLINE(  93)			goto _hx_goto_1;
            		}
            		_hx_goto_1:;
HXLINE( 120)		{
HXLINE( 120)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 120)			HX_VARI( int,_g) = colors->get_length();
HXDLIN( 120)			while((_g1 < _g)){
HXLINE( 120)				_g1 = (_g1 + (int)1);
HXDLIN( 120)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE( 122)				HX_VARI( int,rgb) = ( (int)(colors->__get(i)) );
HXLINE( 128)				HX_VARI( Float,ratio) = ((Float)ratios->__get(i) / (Float)(int)255);
HXLINE( 129)				if ((ratio < (int)0)) {
HXLINE( 129)					ratio = (int)0;
            				}
HXLINE( 130)				if ((ratio > (int)1)) {
HXLINE( 130)					ratio = (int)1;
            				}
HXLINE( 132)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::addColorStopRGBA(pattern,ratio,((Float)hx::UShr(((int)rgb & (int)(int)16711680),(int)16) / (Float)(int)255),((Float)hx::UShr(((int)rgb & (int)(int)65280),(int)8) / (Float)(int)255),((Float)((int)rgb & (int)(int)255) / (Float)(int)255),( (Float)(alphas->__get(i)) ));
            			}
            		}
HXLINE( 136)		HX_VARI(  ::lime::math::Matrix3,mat) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::get_matrix(pattern);
HXLINE( 138)		mat->tx = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 139)		mat->ty = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 141)		::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(pattern,mat);
HXLINE( 143)		return pattern;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(CairoGraphics_obj,createGradientPattern,return )

 ::Dynamic CairoGraphics_obj::createImagePattern( ::openfl::display::BitmapData bitmapFill, ::openfl::geom::Matrix matrix,bool bitmapRepeat,bool smooth){
            	HX_STACKFRAME(&_hx_pos_7c423d109b848e15_148_createImagePattern)
            	HX_STACK_ARG(bitmapFill,"bitmapFill")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(bitmapRepeat,"bitmapRepeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE( 150)		HX_VARI(  ::Dynamic,pattern) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(bitmapFill->getSurface());
HXLINE( 151)		int _hx_tmp;
HXDLIN( 151)		bool _hx_tmp1;
HXDLIN( 151)		if (smooth) {
HXLINE( 151)			_hx_tmp1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::allowSmoothing;
            		}
            		else {
HXLINE( 151)			_hx_tmp1 = false;
            		}
HXDLIN( 151)		if (_hx_tmp1) {
HXLINE( 151)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE( 151)			_hx_tmp = (int)3;
            		}
HXDLIN( 151)		::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp);
HXLINE( 153)		if (bitmapRepeat) {
HXLINE( 155)			::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_extend(pattern,(int)1);
            		}
HXLINE( 159)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = matrix;
HXLINE( 161)		return pattern;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CairoGraphics_obj,createImagePattern,return )

void CairoGraphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACKFRAME(&_hx_pos_7c423d109b848e15_166_drawRoundRect)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(ellipseWidth,"ellipseWidth")
            	HX_STACK_ARG(ellipseHeight,"ellipseHeight")
HXLINE( 168)		if (hx::IsNull( ellipseHeight )) {
HXLINE( 168)			ellipseHeight = ellipseWidth;
            		}
HXLINE( 170)		ellipseWidth = (ellipseWidth * ((Float)0.5));
HXLINE( 171)		ellipseHeight = (ellipseHeight * ((Float)0.5));
HXLINE( 173)		if ((ellipseWidth > ((Float)width / (Float)(int)2))) {
HXLINE( 173)			ellipseWidth = ((Float)width / (Float)(int)2);
            		}
HXLINE( 174)		if (hx::IsGreater( ellipseHeight,((Float)height / (Float)(int)2) )) {
HXLINE( 174)			ellipseHeight = ((Float)height / (Float)(int)2);
            		}
HXLINE( 176)		HX_VARI( Float,xe) = (x + width);
HXDLIN( 176)		HX_VARI( Float,ye) = (y + height);
HXDLIN( 176)		HX_VARI( Float,cx1) = (-(ellipseWidth) + (ellipseWidth * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::SIN45));
HXDLIN( 176)		HX_VARI( Float,cx2) = (-(ellipseWidth) + (ellipseWidth * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::TAN22));
HXDLIN( 176)		HX_VARI( Float,cy1) = (-(ellipseHeight) + (ellipseHeight * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::SIN45));
HXDLIN( 176)		HX_VARI( Float,cy2) = (-(ellipseHeight) + (ellipseHeight * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::TAN22));
HXLINE( 183)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(xe,(ye - ellipseHeight));
HXLINE( 184)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(xe,(ye + cy2),(xe + cx1),(ye + cy1));
HXLINE( 185)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((xe + cx2),ye,(xe - ellipseWidth),ye);
HXLINE( 186)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((x + ellipseWidth),ye);
HXLINE( 187)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((x - cx2),ye,(x - cx1),(ye + cy1));
HXLINE( 188)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(x,(ye + cy2),x,(ye - ellipseHeight));
HXLINE( 189)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x,(y + ellipseHeight));
HXLINE( 190)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(x,(y - cy2),(x - cx1),(y - cy1));
HXLINE( 191)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((x - cx2),y,(x + ellipseWidth),y);
HXLINE( 192)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((xe - ellipseWidth),y);
HXLINE( 193)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((xe + cx2),y,(xe + cx1),(y - cy1));
HXLINE( 194)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(xe,(y - cy2),xe,(y + ellipseHeight));
HXLINE( 195)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(xe,(ye - ellipseHeight));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CairoGraphics_obj,drawRoundRect,(void))

void CairoGraphics_obj::endFill(){
            	HX_STACKFRAME(&_hx_pos_7c423d109b848e15_200_endFill)
HXLINE( 202)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 203)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::playCommands(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands,false);
HXLINE( 204)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,endFill,(void))

void CairoGraphics_obj::endStroke(){
            	HX_STACKFRAME(&_hx_pos_7c423d109b848e15_209_endStroke)
HXLINE( 211)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 212)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::playCommands(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands,true);
HXLINE( 213)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 214)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,endStroke,(void))

bool CairoGraphics_obj::hitTest( ::openfl::display::Graphics graphics,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_219_hitTest)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 222)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics = graphics;
HXLINE( 223)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = graphics->_hx___bounds;
HXLINE( 225)		bool _hx_tmp;
HXDLIN( 225)		bool _hx_tmp1;
HXDLIN( 225)		bool _hx_tmp2;
HXDLIN( 225)		bool _hx_tmp3;
HXDLIN( 225)		if ((graphics->_hx___commands->get_length() != (int)0)) {
HXLINE( 225)			_hx_tmp3 = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds );
            		}
            		else {
HXLINE( 225)			_hx_tmp3 = true;
            		}
HXDLIN( 225)		if (!(_hx_tmp3)) {
HXLINE( 225)			_hx_tmp2 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width == (int)0);
            		}
            		else {
HXLINE( 225)			_hx_tmp2 = true;
            		}
HXDLIN( 225)		if (!(_hx_tmp2)) {
HXLINE( 225)			_hx_tmp1 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height == (int)0);
            		}
            		else {
HXLINE( 225)			_hx_tmp1 = true;
            		}
HXDLIN( 225)		if (!(_hx_tmp1)) {
HXLINE( 225)			_hx_tmp = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->contains(x,y));
            		}
            		else {
HXLINE( 225)			_hx_tmp = true;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 227)			return false;
            		}
            		else {
HXLINE( 231)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting = true;
HXLINE( 233)			x = (x - ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x);
HXLINE( 234)			y = (y - ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y);
HXLINE( 236)			if (hx::IsNull( graphics->_hx___cairo )) {
HXLINE( 240)				graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX , ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width),::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height),true,(int)0)->getSurface());
            			}
HXLINE( 245)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo = graphics->_hx___cairo;
HXLINE( 247)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
HXLINE( 248)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
HXLINE( 250)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE( 251)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
HXLINE( 253)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = null();
HXLINE( 254)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = null();
HXLINE( 256)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 258)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE( 260)			{
HXLINE( 260)				HX_VARI( int,_g) = (int)0;
HXDLIN( 260)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN( 260)				while((_g < _g1->length)){
HXLINE( 260)					HX_VARI(  ::openfl::_internal::renderer::DrawCommandType,type) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 260)					_g = (_g + (int)1);
HXLINE( 262)					switch((int)(_hx_getEnumValueIndex(type))){
            						case (int)0: case (int)1: case (int)2: {
HXLINE( 328)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE( 329)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE( 331)							bool _hx_tmp4;
HXDLIN( 331)							if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill) {
HXLINE( 331)								_hx_tmp4 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            							}
            							else {
HXLINE( 331)								_hx_tmp4 = false;
            							}
HXDLIN( 331)							if (_hx_tmp4) {
HXLINE( 333)								data->destroy();
HXLINE( 334)								return true;
            							}
HXLINE( 338)							bool _hx_tmp5;
HXDLIN( 338)							if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke) {
HXLINE( 338)								_hx_tmp5 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            							}
            							else {
HXLINE( 338)								_hx_tmp5 = false;
            							}
HXDLIN( 338)							if (_hx_tmp5) {
HXLINE( 340)								data->destroy();
HXLINE( 341)								return true;
            							}
HXLINE( 345)							if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn() )) {
HXLINE( 347)								switch((int)(_hx_getEnumValueIndex(data->prev))){
            									case (int)0: {
HXLINE( 347)										data->oPos = (data->oPos + (int)2);
HXDLIN( 347)										data->bPos = (data->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 347)										data->iPos = (data->iPos + (int)1);
HXDLIN( 347)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 347)										data->oPos = (data->oPos + (int)4);
HXDLIN( 347)										data->iiPos = (data->iiPos + (int)2);
HXDLIN( 347)										data->ffPos = (data->ffPos + (int)1);
HXDLIN( 347)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 347)										data->fPos = (data->fPos + (int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 347)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 347)										data->fPos = (data->fPos + (int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 347)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 347)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 347)										data->fPos = (data->fPos + (int)5);
HXDLIN( 347)										data->oPos = (data->oPos + (int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 347)										data->oPos = (data->oPos + (int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 347)										data->oPos = (data->oPos + (int)2);
HXDLIN( 347)										data->bPos = (data->bPos + (int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 347)										data->oPos = (data->oPos + (int)4);
HXDLIN( 347)										data->iiPos = (data->iiPos + (int)2);
HXDLIN( 347)										data->ffPos = (data->ffPos + (int)1);
HXDLIN( 347)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 347)										data->oPos = (data->oPos + (int)4);
HXDLIN( 347)										data->iPos = (data->iPos + (int)1);
HXDLIN( 347)										data->fPos = (data->fPos + (int)2);
HXDLIN( 347)										data->bPos = (data->bPos + (int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 347)										data->fPos = (data->fPos + (int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 347)										data->fPos = (data->fPos + (int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 347)										data->oPos = (data->oPos + (int)1);
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 347)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 347)								HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 348)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginBitmapFill(( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) ),( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) ),c->buffer->b->__get(c->bPos),c->buffer->b->__get((c->bPos + (int)1)));
HXLINE( 349)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginBitmapFill(( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) ),( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) ),c->buffer->b->__get(c->bPos),c->buffer->b->__get((c->bPos + (int)1)));
            							}
            							else {
HXLINE( 351)								if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn() )) {
HXLINE( 353)									switch((int)(_hx_getEnumValueIndex(data->prev))){
            										case (int)0: {
HXLINE( 353)											data->oPos = (data->oPos + (int)2);
HXDLIN( 353)											data->bPos = (data->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 353)											data->iPos = (data->iPos + (int)1);
HXDLIN( 353)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 353)											data->oPos = (data->oPos + (int)4);
HXDLIN( 353)											data->iiPos = (data->iiPos + (int)2);
HXDLIN( 353)											data->ffPos = (data->ffPos + (int)1);
HXDLIN( 353)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 353)											data->fPos = (data->fPos + (int)6);
            										}
            										break;
            										case (int)4: {
HXLINE( 353)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)5: {
HXLINE( 353)											data->fPos = (data->fPos + (int)3);
            										}
            										break;
            										case (int)6: {
HXLINE( 353)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)7: {
HXLINE( 353)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 353)											data->fPos = (data->fPos + (int)5);
HXDLIN( 353)											data->oPos = (data->oPos + (int)1);
            										}
            										break;
            										case (int)10: {
HXLINE( 353)											data->oPos = (data->oPos + (int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE( 353)											data->oPos = (data->oPos + (int)2);
HXDLIN( 353)											data->bPos = (data->bPos + (int)2);
            										}
            										break;
            										case (int)13: {
HXLINE( 353)											data->oPos = (data->oPos + (int)4);
HXDLIN( 353)											data->iiPos = (data->iiPos + (int)2);
HXDLIN( 353)											data->ffPos = (data->ffPos + (int)1);
HXDLIN( 353)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)14: {
HXLINE( 353)											data->oPos = (data->oPos + (int)4);
HXDLIN( 353)											data->iPos = (data->iPos + (int)1);
HXDLIN( 353)											data->fPos = (data->fPos + (int)2);
HXDLIN( 353)											data->bPos = (data->bPos + (int)1);
            										}
            										break;
            										case (int)15: {
HXLINE( 353)											data->fPos = (data->fPos + (int)2);
            										}
            										break;
            										case (int)16: {
HXLINE( 353)											data->fPos = (data->fPos + (int)2);
            										}
            										break;
            										case (int)17: {
HXLINE( 353)											data->oPos = (data->oPos + (int)1);
            										}
            										break;
            										default:{
            										}
            									}
HXLINE( 353)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 353)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 354)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get((c1->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get((c1->oPos + (int)1))) ),c1->buffer->o->__get((c1->oPos + (int)2)),c1->buffer->o->__get((c1->oPos + (int)3)),c1->buffer->f->__get(c1->fPos));
HXLINE( 355)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get((c1->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get((c1->oPos + (int)1))) ),c1->buffer->o->__get((c1->oPos + (int)2)),c1->buffer->o->__get((c1->oPos + (int)3)),c1->buffer->f->__get(c1->fPos));
            								}
            								else {
HXLINE( 359)									switch((int)(_hx_getEnumValueIndex(data->prev))){
            										case (int)0: {
HXLINE( 359)											data->oPos = (data->oPos + (int)2);
HXDLIN( 359)											data->bPos = (data->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 359)											data->iPos = (data->iPos + (int)1);
HXDLIN( 359)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 359)											data->oPos = (data->oPos + (int)4);
HXDLIN( 359)											data->iiPos = (data->iiPos + (int)2);
HXDLIN( 359)											data->ffPos = (data->ffPos + (int)1);
HXDLIN( 359)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 359)											data->fPos = (data->fPos + (int)6);
            										}
            										break;
            										case (int)4: {
HXLINE( 359)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)5: {
HXLINE( 359)											data->fPos = (data->fPos + (int)3);
            										}
            										break;
            										case (int)6: {
HXLINE( 359)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)7: {
HXLINE( 359)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 359)											data->fPos = (data->fPos + (int)5);
HXDLIN( 359)											data->oPos = (data->oPos + (int)1);
            										}
            										break;
            										case (int)10: {
HXLINE( 359)											data->oPos = (data->oPos + (int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE( 359)											data->oPos = (data->oPos + (int)2);
HXDLIN( 359)											data->bPos = (data->bPos + (int)2);
            										}
            										break;
            										case (int)13: {
HXLINE( 359)											data->oPos = (data->oPos + (int)4);
HXDLIN( 359)											data->iiPos = (data->iiPos + (int)2);
HXDLIN( 359)											data->ffPos = (data->ffPos + (int)1);
HXDLIN( 359)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)14: {
HXLINE( 359)											data->oPos = (data->oPos + (int)4);
HXDLIN( 359)											data->iPos = (data->iPos + (int)1);
HXDLIN( 359)											data->fPos = (data->fPos + (int)2);
HXDLIN( 359)											data->bPos = (data->bPos + (int)1);
            										}
            										break;
            										case (int)15: {
HXLINE( 359)											data->fPos = (data->fPos + (int)2);
            										}
            										break;
            										case (int)16: {
HXLINE( 359)											data->fPos = (data->fPos + (int)2);
            										}
            										break;
            										case (int)17: {
HXLINE( 359)											data->oPos = (data->oPos + (int)1);
            										}
            										break;
            										default:{
            										}
            									}
HXLINE( 359)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 359)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 360)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginFill(c2->buffer->i->__get(c2->iPos),(int)1);
HXLINE( 361)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginFill(c2->buffer->i->__get(c2->iPos),(int)1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 266)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 266)									data->oPos = (data->oPos + (int)2);
HXDLIN( 266)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 266)									data->iPos = (data->iPos + (int)1);
HXDLIN( 266)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 266)									data->oPos = (data->oPos + (int)4);
HXDLIN( 266)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 266)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 266)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 266)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 266)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 266)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 266)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 266)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 266)									data->fPos = (data->fPos + (int)5);
HXDLIN( 266)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 266)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 266)									data->oPos = (data->oPos + (int)2);
HXDLIN( 266)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 266)									data->oPos = (data->oPos + (int)4);
HXDLIN( 266)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 266)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 266)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 266)									data->oPos = (data->oPos + (int)4);
HXDLIN( 266)									data->iPos = (data->iPos + (int)1);
HXDLIN( 266)									data->fPos = (data->fPos + (int)2);
HXDLIN( 266)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 266)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 266)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 266)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 266)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 266)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 267)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->cubicCurveTo(c3->buffer->f->__get(c3->fPos),c3->buffer->f->__get((c3->fPos + (int)1)),c3->buffer->f->__get((c3->fPos + (int)2)),c3->buffer->f->__get((c3->fPos + (int)3)),c3->buffer->f->__get((c3->fPos + (int)4)),c3->buffer->f->__get((c3->fPos + (int)5)));
HXLINE( 268)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->cubicCurveTo(c3->buffer->f->__get(c3->fPos),c3->buffer->f->__get((c3->fPos + (int)1)),c3->buffer->f->__get((c3->fPos + (int)2)),c3->buffer->f->__get((c3->fPos + (int)3)),c3->buffer->f->__get((c3->fPos + (int)4)),c3->buffer->f->__get((c3->fPos + (int)5)));
            						}
            						break;
            						case (int)4: {
HXLINE( 272)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 272)									data->oPos = (data->oPos + (int)2);
HXDLIN( 272)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 272)									data->iPos = (data->iPos + (int)1);
HXDLIN( 272)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 272)									data->oPos = (data->oPos + (int)4);
HXDLIN( 272)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 272)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 272)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 272)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 272)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 272)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 272)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 272)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 272)									data->fPos = (data->fPos + (int)5);
HXDLIN( 272)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 272)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 272)									data->oPos = (data->oPos + (int)2);
HXDLIN( 272)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 272)									data->oPos = (data->oPos + (int)4);
HXDLIN( 272)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 272)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 272)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 272)									data->oPos = (data->oPos + (int)4);
HXDLIN( 272)									data->iPos = (data->iPos + (int)1);
HXDLIN( 272)									data->fPos = (data->fPos + (int)2);
HXDLIN( 272)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 272)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 272)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 272)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 272)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 272)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 273)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->curveTo(c4->buffer->f->__get(c4->fPos),c4->buffer->f->__get((c4->fPos + (int)1)),c4->buffer->f->__get((c4->fPos + (int)2)),c4->buffer->f->__get((c4->fPos + (int)3)));
HXLINE( 274)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->curveTo(c4->buffer->f->__get(c4->fPos),c4->buffer->f->__get((c4->fPos + (int)1)),c4->buffer->f->__get((c4->fPos + (int)2)),c4->buffer->f->__get((c4->fPos + (int)3)));
            						}
            						break;
            						case (int)5: {
HXLINE( 367)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 367)									data->oPos = (data->oPos + (int)2);
HXDLIN( 367)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 367)									data->iPos = (data->iPos + (int)1);
HXDLIN( 367)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 367)									data->oPos = (data->oPos + (int)4);
HXDLIN( 367)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 367)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 367)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 367)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 367)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 367)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 367)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 367)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 367)									data->fPos = (data->fPos + (int)5);
HXDLIN( 367)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 367)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 367)									data->oPos = (data->oPos + (int)2);
HXDLIN( 367)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 367)									data->oPos = (data->oPos + (int)4);
HXDLIN( 367)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 367)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 367)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 367)									data->oPos = (data->oPos + (int)4);
HXDLIN( 367)									data->iPos = (data->iPos + (int)1);
HXDLIN( 367)									data->fPos = (data->fPos + (int)2);
HXDLIN( 367)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 367)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 367)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 367)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 367)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 367)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 368)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawCircle(c5->buffer->f->__get(c5->fPos),c5->buffer->f->__get((c5->fPos + (int)1)),c5->buffer->f->__get((c5->fPos + (int)2)));
HXLINE( 369)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawCircle(c5->buffer->f->__get(c5->fPos),c5->buffer->f->__get((c5->fPos + (int)1)),c5->buffer->f->__get((c5->fPos + (int)2)));
            						}
            						break;
            						case (int)6: {
HXLINE( 373)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 373)									data->oPos = (data->oPos + (int)2);
HXDLIN( 373)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 373)									data->iPos = (data->iPos + (int)1);
HXDLIN( 373)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 373)									data->oPos = (data->oPos + (int)4);
HXDLIN( 373)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 373)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 373)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 373)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 373)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 373)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 373)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 373)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 373)									data->fPos = (data->fPos + (int)5);
HXDLIN( 373)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 373)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 373)									data->oPos = (data->oPos + (int)2);
HXDLIN( 373)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 373)									data->oPos = (data->oPos + (int)4);
HXDLIN( 373)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 373)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 373)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 373)									data->oPos = (data->oPos + (int)4);
HXDLIN( 373)									data->iPos = (data->iPos + (int)1);
HXDLIN( 373)									data->fPos = (data->fPos + (int)2);
HXDLIN( 373)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 373)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 373)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 373)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 373)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 373)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 374)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawEllipse(c6->buffer->f->__get(c6->fPos),c6->buffer->f->__get((c6->fPos + (int)1)),c6->buffer->f->__get((c6->fPos + (int)2)),c6->buffer->f->__get((c6->fPos + (int)3)));
HXLINE( 375)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawEllipse(c6->buffer->f->__get(c6->fPos),c6->buffer->f->__get((c6->fPos + (int)1)),c6->buffer->f->__get((c6->fPos + (int)2)),c6->buffer->f->__get((c6->fPos + (int)3)));
            						}
            						break;
            						case (int)7: {
HXLINE( 379)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 379)									data->oPos = (data->oPos + (int)2);
HXDLIN( 379)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 379)									data->iPos = (data->iPos + (int)1);
HXDLIN( 379)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 379)									data->oPos = (data->oPos + (int)4);
HXDLIN( 379)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 379)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 379)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 379)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 379)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 379)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 379)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 379)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 379)									data->fPos = (data->fPos + (int)5);
HXDLIN( 379)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 379)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 379)									data->oPos = (data->oPos + (int)2);
HXDLIN( 379)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 379)									data->oPos = (data->oPos + (int)4);
HXDLIN( 379)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 379)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 379)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 379)									data->oPos = (data->oPos + (int)4);
HXDLIN( 379)									data->iPos = (data->iPos + (int)1);
HXDLIN( 379)									data->fPos = (data->fPos + (int)2);
HXDLIN( 379)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 379)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 379)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 379)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 379)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 379)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 380)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRect(c7->buffer->f->__get(c7->fPos),c7->buffer->f->__get((c7->fPos + (int)1)),c7->buffer->f->__get((c7->fPos + (int)2)),c7->buffer->f->__get((c7->fPos + (int)3)));
HXLINE( 381)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRect(c7->buffer->f->__get(c7->fPos),c7->buffer->f->__get((c7->fPos + (int)1)),c7->buffer->f->__get((c7->fPos + (int)2)),c7->buffer->f->__get((c7->fPos + (int)3)));
            						}
            						break;
            						case (int)8: {
HXLINE( 385)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 385)									data->oPos = (data->oPos + (int)2);
HXDLIN( 385)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 385)									data->iPos = (data->iPos + (int)1);
HXDLIN( 385)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 385)									data->oPos = (data->oPos + (int)4);
HXDLIN( 385)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 385)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 385)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 385)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 385)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 385)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 385)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 385)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 385)									data->fPos = (data->fPos + (int)5);
HXDLIN( 385)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 385)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 385)									data->oPos = (data->oPos + (int)2);
HXDLIN( 385)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 385)									data->oPos = (data->oPos + (int)4);
HXDLIN( 385)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 385)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 385)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 385)									data->oPos = (data->oPos + (int)4);
HXDLIN( 385)									data->iPos = (data->iPos + (int)1);
HXDLIN( 385)									data->fPos = (data->fPos + (int)2);
HXDLIN( 385)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 385)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 385)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 385)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 385)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 385)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 386)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRoundRect(c8->buffer->f->__get(c8->fPos),c8->buffer->f->__get((c8->fPos + (int)1)),c8->buffer->f->__get((c8->fPos + (int)2)),c8->buffer->f->__get((c8->fPos + (int)3)),c8->buffer->f->__get((c8->fPos + (int)4)),c8->buffer->o->__get(c8->oPos));
HXLINE( 387)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRoundRect(c8->buffer->f->__get(c8->fPos),c8->buffer->f->__get((c8->fPos + (int)1)),c8->buffer->f->__get((c8->fPos + (int)2)),c8->buffer->f->__get((c8->fPos + (int)3)),c8->buffer->f->__get((c8->fPos + (int)4)),c8->buffer->o->__get(c8->oPos));
            						}
            						break;
            						case (int)11: {
HXLINE( 305)							{
HXLINE( 305)								switch((int)(_hx_getEnumValueIndex(data->prev))){
            									case (int)0: {
HXLINE( 305)										data->oPos = (data->oPos + (int)2);
HXDLIN( 305)										data->bPos = (data->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 305)										data->iPos = (data->iPos + (int)1);
HXDLIN( 305)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 305)										data->oPos = (data->oPos + (int)4);
HXDLIN( 305)										data->iiPos = (data->iiPos + (int)2);
HXDLIN( 305)										data->ffPos = (data->ffPos + (int)1);
HXDLIN( 305)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 305)										data->fPos = (data->fPos + (int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 305)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 305)										data->fPos = (data->fPos + (int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 305)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 305)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 305)										data->fPos = (data->fPos + (int)5);
HXDLIN( 305)										data->oPos = (data->oPos + (int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 305)										data->oPos = (data->oPos + (int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 305)										data->oPos = (data->oPos + (int)2);
HXDLIN( 305)										data->bPos = (data->bPos + (int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 305)										data->oPos = (data->oPos + (int)4);
HXDLIN( 305)										data->iiPos = (data->iiPos + (int)2);
HXDLIN( 305)										data->ffPos = (data->ffPos + (int)1);
HXDLIN( 305)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 305)										data->oPos = (data->oPos + (int)4);
HXDLIN( 305)										data->iPos = (data->iPos + (int)1);
HXDLIN( 305)										data->fPos = (data->fPos + (int)2);
HXDLIN( 305)										data->bPos = (data->bPos + (int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 305)										data->fPos = (data->fPos + (int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 305)										data->fPos = (data->fPos + (int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 305)										data->oPos = (data->oPos + (int)1);
            									}
            									break;
            									default:{
            									}
            								}
HXLINE( 305)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            							}
HXLINE( 306)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE( 307)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE( 309)							bool _hx_tmp6;
HXDLIN( 309)							if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill) {
HXLINE( 309)								_hx_tmp6 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            							}
            							else {
HXLINE( 309)								_hx_tmp6 = false;
            							}
HXDLIN( 309)							if (_hx_tmp6) {
HXLINE( 311)								data->destroy();
HXLINE( 312)								return true;
            							}
HXLINE( 316)							bool _hx_tmp7;
HXDLIN( 316)							if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke) {
HXLINE( 316)								_hx_tmp7 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            							}
            							else {
HXLINE( 316)								_hx_tmp7 = false;
            							}
HXDLIN( 316)							if (_hx_tmp7) {
HXLINE( 318)								data->destroy();
HXLINE( 319)								return true;
            							}
HXLINE( 323)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE( 324)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            						}
            						break;
            						case (int)12: {
HXLINE( 300)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 300)									data->oPos = (data->oPos + (int)2);
HXDLIN( 300)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 300)									data->iPos = (data->iPos + (int)1);
HXDLIN( 300)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 300)									data->oPos = (data->oPos + (int)4);
HXDLIN( 300)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 300)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 300)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 300)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 300)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 300)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 300)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 300)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 300)									data->fPos = (data->fPos + (int)5);
HXDLIN( 300)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 300)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 300)									data->oPos = (data->oPos + (int)2);
HXDLIN( 300)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 300)									data->oPos = (data->oPos + (int)4);
HXDLIN( 300)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 300)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 300)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 300)									data->oPos = (data->oPos + (int)4);
HXDLIN( 300)									data->iPos = (data->iPos + (int)1);
HXDLIN( 300)									data->fPos = (data->fPos + (int)2);
HXDLIN( 300)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 300)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 300)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 300)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 300)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 300)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 301)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::geom::Matrix)(c9->buffer->o->__get((c9->oPos + (int)1))) ),c9->buffer->b->__get(c9->bPos),c9->buffer->b->__get((c9->bPos + (int)1)));
            						}
            						break;
            						case (int)13: {
HXLINE( 295)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 295)									data->oPos = (data->oPos + (int)2);
HXDLIN( 295)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 295)									data->iPos = (data->iPos + (int)1);
HXDLIN( 295)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 295)									data->oPos = (data->oPos + (int)4);
HXDLIN( 295)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 295)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 295)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 295)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 295)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 295)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 295)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 295)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 295)									data->fPos = (data->fPos + (int)5);
HXDLIN( 295)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 295)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 295)									data->oPos = (data->oPos + (int)2);
HXDLIN( 295)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 295)									data->oPos = (data->oPos + (int)4);
HXDLIN( 295)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 295)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 295)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 295)									data->oPos = (data->oPos + (int)4);
HXDLIN( 295)									data->iPos = (data->iPos + (int)1);
HXDLIN( 295)									data->fPos = (data->fPos + (int)2);
HXDLIN( 295)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 295)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 295)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 295)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 295)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 295)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 296)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineGradientStyle(c10->buffer->o->__get(c10->oPos),c10->buffer->ii->__get(c10->iiPos).StaticCast< ::Array< int > >(),c10->buffer->ff->__get(c10->ffPos).StaticCast< ::Array< Float > >(),c10->buffer->ii->__get((c10->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get((c10->oPos + (int)1))) ),c10->buffer->o->__get((c10->oPos + (int)2)),c10->buffer->o->__get((c10->oPos + (int)3)),c10->buffer->f->__get(c10->fPos));
            						}
            						break;
            						case (int)14: {
HXLINE( 290)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 290)									data->oPos = (data->oPos + (int)2);
HXDLIN( 290)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 290)									data->iPos = (data->iPos + (int)1);
HXDLIN( 290)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 290)									data->oPos = (data->oPos + (int)4);
HXDLIN( 290)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 290)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 290)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 290)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 290)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 290)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 290)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 290)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 290)									data->fPos = (data->fPos + (int)5);
HXDLIN( 290)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 290)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 290)									data->oPos = (data->oPos + (int)2);
HXDLIN( 290)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 290)									data->oPos = (data->oPos + (int)4);
HXDLIN( 290)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 290)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 290)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 290)									data->oPos = (data->oPos + (int)4);
HXDLIN( 290)									data->iPos = (data->iPos + (int)1);
HXDLIN( 290)									data->fPos = (data->fPos + (int)2);
HXDLIN( 290)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 290)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 290)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 290)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 290)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 290)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 291)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->i->__get(c11->iPos),(int)1,c11->buffer->b->__get(c11->bPos),c11->buffer->o->__get((c11->oPos + (int)1)),c11->buffer->o->__get((c11->oPos + (int)2)),c11->buffer->o->__get((c11->oPos + (int)3)),c11->buffer->f->__get((c11->fPos + (int)1)));
            						}
            						break;
            						case (int)15: {
HXLINE( 278)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 278)									data->oPos = (data->oPos + (int)2);
HXDLIN( 278)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 278)									data->iPos = (data->iPos + (int)1);
HXDLIN( 278)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 278)									data->oPos = (data->oPos + (int)4);
HXDLIN( 278)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 278)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 278)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 278)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 278)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 278)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 278)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 278)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 278)									data->fPos = (data->fPos + (int)5);
HXDLIN( 278)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 278)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 278)									data->oPos = (data->oPos + (int)2);
HXDLIN( 278)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 278)									data->oPos = (data->oPos + (int)4);
HXDLIN( 278)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 278)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 278)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 278)									data->oPos = (data->oPos + (int)4);
HXDLIN( 278)									data->iPos = (data->iPos + (int)1);
HXDLIN( 278)									data->fPos = (data->fPos + (int)2);
HXDLIN( 278)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 278)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 278)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 278)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 278)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 278)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 279)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->lineTo(c12->buffer->f->__get(c12->fPos),c12->buffer->f->__get((c12->fPos + (int)1)));
HXLINE( 280)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineTo(c12->buffer->f->__get(c12->fPos),c12->buffer->f->__get((c12->fPos + (int)1)));
            						}
            						break;
            						case (int)16: {
HXLINE( 284)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 284)									data->oPos = (data->oPos + (int)2);
HXDLIN( 284)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 284)									data->iPos = (data->iPos + (int)1);
HXDLIN( 284)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 284)									data->oPos = (data->oPos + (int)4);
HXDLIN( 284)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 284)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 284)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 284)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 284)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 284)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 284)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 284)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 284)									data->fPos = (data->fPos + (int)5);
HXDLIN( 284)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 284)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 284)									data->oPos = (data->oPos + (int)2);
HXDLIN( 284)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 284)									data->oPos = (data->oPos + (int)4);
HXDLIN( 284)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 284)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 284)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 284)									data->oPos = (data->oPos + (int)4);
HXDLIN( 284)									data->iPos = (data->iPos + (int)1);
HXDLIN( 284)									data->fPos = (data->fPos + (int)2);
HXDLIN( 284)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 284)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 284)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 284)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 284)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 284)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 285)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->moveTo(c13->buffer->f->__get(c13->fPos),c13->buffer->f->__get((c13->fPos + (int)1)));
HXLINE( 286)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->moveTo(c13->buffer->f->__get(c13->fPos),c13->buffer->f->__get((c13->fPos + (int)1)));
            						}
            						break;
            						default:{
HXLINE( 391)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE( 391)									data->oPos = (data->oPos + (int)2);
HXDLIN( 391)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 391)									data->iPos = (data->iPos + (int)1);
HXDLIN( 391)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 391)									data->oPos = (data->oPos + (int)4);
HXDLIN( 391)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 391)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 391)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 391)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 391)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 391)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 391)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 391)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 391)									data->fPos = (data->fPos + (int)5);
HXDLIN( 391)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 391)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 391)									data->oPos = (data->oPos + (int)2);
HXDLIN( 391)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 391)									data->oPos = (data->oPos + (int)4);
HXDLIN( 391)									data->iiPos = (data->iiPos + (int)2);
HXDLIN( 391)									data->ffPos = (data->ffPos + (int)1);
HXDLIN( 391)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 391)									data->oPos = (data->oPos + (int)4);
HXDLIN( 391)									data->iPos = (data->iPos + (int)1);
HXDLIN( 391)									data->fPos = (data->fPos + (int)2);
HXDLIN( 391)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 391)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 391)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 391)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 391)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE( 397)			if ((::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->get_length() > (int)0)) {
HXLINE( 399)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
            			}
HXLINE( 403)			if ((::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->get_length() > (int)0)) {
HXLINE( 405)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
            			}
HXLINE( 409)			data->destroy();
HXLINE( 411)			bool _hx_tmp8;
HXDLIN( 411)			if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill) {
HXLINE( 411)				_hx_tmp8 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            			}
            			else {
HXLINE( 411)				_hx_tmp8 = false;
            			}
HXDLIN( 411)			if (_hx_tmp8) {
HXLINE( 413)				return true;
            			}
HXLINE( 417)			bool _hx_tmp9;
HXDLIN( 417)			if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke) {
HXLINE( 417)				_hx_tmp9 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            			}
            			else {
HXLINE( 417)				_hx_tmp9 = false;
            			}
HXDLIN( 417)			if (_hx_tmp9) {
HXLINE( 419)				return true;
            			}
            		}
HXLINE( 426)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,hitTest,return )

bool CairoGraphics_obj::isCCW(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_7c423d109b848e15_433_isCCW)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE( 433)		return ((((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1))) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CairoGraphics_obj,isCCW,return )

 ::Dynamic CairoGraphics_obj::normalizeUVT( ::openfl::_Vector::FloatVector uvt,hx::Null< bool >  __o_skipT){
bool skipT = __o_skipT.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_438_normalizeUVT)
            	HX_STACK_ARG(uvt,"uvt")
            	HX_STACK_ARG(skipT,"skipT")
HXLINE( 440)		HX_VARI( Float,max) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 441)		HX_VARI( Float,tmp) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 442)		HX_VARI( int,len) = uvt->get_length();
HXLINE( 444)		{
HXLINE( 444)			HX_VARI( int,_g1) = (int)1;
HXDLIN( 444)			HX_VARI( int,_g) = (len + (int)1);
HXDLIN( 444)			while((_g1 < _g)){
HXLINE( 444)				_g1 = (_g1 + (int)1);
HXDLIN( 444)				HX_VARI( int,t) = (_g1 - (int)1);
HXLINE( 446)				bool _hx_tmp;
HXDLIN( 446)				if (skipT) {
HXLINE( 446)					_hx_tmp = (hx::Mod(t,(int)3) == (int)0);
            				}
            				else {
HXLINE( 446)					_hx_tmp = false;
            				}
HXDLIN( 446)				if (_hx_tmp) {
HXLINE( 448)					continue;
            				}
HXLINE( 452)				tmp = uvt->get((t - (int)1));
HXLINE( 454)				if ((max < tmp)) {
HXLINE( 456)					max = tmp;
            				}
            			}
            		}
HXLINE( 462)		if (!(skipT)) {
HXLINE( 464)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("max",a4,0a,53,00),max)
            				->setFixed(1,HX_("uvt",f3,2e,59,00),uvt));
            		}
HXLINE( 468)		int length = null();
HXDLIN( 468)		bool fixed = null();
HXDLIN( 468)		HX_VARI(  ::openfl::_Vector::FloatVector,result) =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 470)		{
HXLINE( 470)			HX_VARI_NAME( int,_g11,"_g1") = (int)1;
HXDLIN( 470)			HX_VARI_NAME( int,_g2,"_g") = (len + (int)1);
HXDLIN( 470)			while((_g11 < _g2)){
HXLINE( 470)				_g11 = (_g11 + (int)1);
HXDLIN( 470)				HX_VARI_NAME( int,t1,"t") = (_g11 - (int)1);
HXLINE( 472)				bool _hx_tmp1;
HXDLIN( 472)				if (skipT) {
HXLINE( 472)					_hx_tmp1 = (hx::Mod(t1,(int)3) == (int)0);
            				}
            				else {
HXLINE( 472)					_hx_tmp1 = false;
            				}
HXDLIN( 472)				if (_hx_tmp1) {
HXLINE( 474)					continue;
            				}
HXLINE( 478)				result->push(uvt->get((t1 - (int)1)));
            			}
            		}
HXLINE( 482)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("max",a4,0a,53,00),max)
            			->setFixed(1,HX_("uvt",f3,2e,59,00),result));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,normalizeUVT,return )

void CairoGraphics_obj::playCommands( ::openfl::_internal::renderer::DrawCommandBuffer commands,hx::Null< bool >  __o_stroke){
bool stroke = __o_stroke.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_487_playCommands)
            	HX_STACK_ARG(commands,"commands")
            	HX_STACK_ARG(stroke,"stroke")
HXLINE( 489)		if ((commands->get_length() == (int)0)) {
HXLINE( 489)			return;
            		}
HXLINE( 491)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds;
HXLINE( 493)		HX_VARI( Float,offsetX) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 494)		HX_VARI( Float,offsetY) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 496)		HX_VARI( Float,positionX) = ((Float)0.0);
HXLINE( 497)		HX_VARI( Float,positionY) = ((Float)0.0);
HXLINE( 499)		HX_VARI( bool,closeGap) = false;
HXLINE( 500)		HX_VARI( Float,startX) = ((Float)0.0);
HXLINE( 501)		HX_VARI( Float,startY) = ((Float)0.0);
HXLINE( 503)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_fillRule((int)1);
HXLINE( 504)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_antialias((int)3);
HXLINE( 506)		HX_VARI( bool,hasPath) = false;
HXLINE( 508)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,commands);
HXLINE( 510)		{
HXLINE( 510)			HX_VARI( int,_g) = (int)0;
HXDLIN( 510)			HX_VARI( ::Array< ::Dynamic>,_g1) = commands->types;
HXDLIN( 510)			while((_g < _g1->length)){
HXLINE( 510)				HX_VARI(  ::openfl::_internal::renderer::DrawCommandType,type) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN( 510)				_g = (_g + (int)1);
HXLINE( 512)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)0: {
HXLINE( 694)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 694)								data->oPos = (data->oPos + (int)2);
HXDLIN( 694)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 694)								data->iPos = (data->iPos + (int)1);
HXDLIN( 694)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 694)								data->oPos = (data->oPos + (int)4);
HXDLIN( 694)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 694)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 694)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 694)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 694)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 694)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 694)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 694)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 694)								data->fPos = (data->fPos + (int)5);
HXDLIN( 694)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 694)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 694)								data->oPos = (data->oPos + (int)2);
HXDLIN( 694)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 694)								data->oPos = (data->oPos + (int)4);
HXDLIN( 694)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 694)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 694)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 694)								data->oPos = (data->oPos + (int)4);
HXDLIN( 694)								data->iPos = (data->iPos + (int)1);
HXDLIN( 694)								data->fPos = (data->fPos + (int)2);
HXDLIN( 694)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 694)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 694)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 694)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 694)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 694)						HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 695)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createImagePattern(( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) ),( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) ),c->buffer->b->__get(c->bPos),c->buffer->b->__get((c->bPos + (int)1)));
HXLINE( 697)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXLINE( 698)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapRepeat = c->buffer->b->__get(c->bPos);
HXLINE( 700)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
            					}
            					break;
            					case (int)1: {
HXLINE( 704)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 704)								data->oPos = (data->oPos + (int)2);
HXDLIN( 704)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 704)								data->iPos = (data->iPos + (int)1);
HXDLIN( 704)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 704)								data->oPos = (data->oPos + (int)4);
HXDLIN( 704)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 704)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 704)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 704)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 704)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 704)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 704)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 704)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 704)								data->fPos = (data->fPos + (int)5);
HXDLIN( 704)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 704)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 704)								data->oPos = (data->oPos + (int)2);
HXDLIN( 704)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 704)								data->oPos = (data->oPos + (int)4);
HXDLIN( 704)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 704)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 704)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 704)								data->oPos = (data->oPos + (int)4);
HXDLIN( 704)								data->iPos = (data->iPos + (int)1);
HXDLIN( 704)								data->fPos = (data->fPos + (int)2);
HXDLIN( 704)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 704)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 704)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 704)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 704)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 704)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 705)						if ((c1->buffer->f->__get(c1->fPos) < ((Float)0.005))) {
HXLINE( 707)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
            						}
            						else {
HXLINE( 711)							if (hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern )) {
HXLINE( 713)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = null();
            							}
HXLINE( 717)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGBA(((Float)hx::UShr(((int)c1->buffer->i->__get(c1->iPos) & (int)(int)16711680),(int)16) / (Float)(int)255),((Float)hx::UShr(((int)c1->buffer->i->__get(c1->iPos) & (int)(int)65280),(int)8) / (Float)(int)255),((Float)((int)c1->buffer->i->__get(c1->iPos) & (int)(int)255) / (Float)(int)255),c1->buffer->f->__get(c1->fPos));
HXLINE( 718)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
            						}
HXLINE( 722)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            					}
            					break;
            					case (int)2: {
HXLINE( 726)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 726)								data->oPos = (data->oPos + (int)2);
HXDLIN( 726)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 726)								data->iPos = (data->iPos + (int)1);
HXDLIN( 726)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 726)								data->oPos = (data->oPos + (int)4);
HXDLIN( 726)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 726)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 726)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 726)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 726)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 726)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 726)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 726)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 726)								data->fPos = (data->fPos + (int)5);
HXDLIN( 726)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 726)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 726)								data->oPos = (data->oPos + (int)2);
HXDLIN( 726)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 726)								data->oPos = (data->oPos + (int)4);
HXDLIN( 726)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 726)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 726)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 726)								data->oPos = (data->oPos + (int)4);
HXDLIN( 726)								data->iPos = (data->iPos + (int)1);
HXDLIN( 726)								data->fPos = (data->fPos + (int)2);
HXDLIN( 726)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 726)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 726)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 726)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 726)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 726)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 727)						if (hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern )) {
HXLINE( 729)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = null();
            						}
HXLINE( 733)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createGradientPattern(c2->buffer->o->__get(c2->oPos),c2->buffer->ii->__get(c2->iiPos).StaticCast< ::Array< int > >(),c2->buffer->ff->__get(c2->ffPos).StaticCast< ::Array< Float > >(),c2->buffer->ii->__get((c2->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c2->buffer->o->__get((c2->oPos + (int)1))) ),c2->buffer->o->__get((c2->oPos + (int)2)),c2->buffer->o->__get((c2->oPos + (int)3)),c2->buffer->f->__get(c2->fPos));
HXLINE( 735)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
HXLINE( 736)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            					}
            					break;
            					case (int)3: {
HXLINE( 516)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 516)								data->oPos = (data->oPos + (int)2);
HXDLIN( 516)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 516)								data->iPos = (data->iPos + (int)1);
HXDLIN( 516)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 516)								data->oPos = (data->oPos + (int)4);
HXDLIN( 516)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 516)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 516)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 516)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 516)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 516)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 516)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 516)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 516)								data->fPos = (data->fPos + (int)5);
HXDLIN( 516)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 516)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 516)								data->oPos = (data->oPos + (int)2);
HXDLIN( 516)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 516)								data->oPos = (data->oPos + (int)4);
HXDLIN( 516)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 516)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 516)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 516)								data->oPos = (data->oPos + (int)4);
HXDLIN( 516)								data->iPos = (data->iPos + (int)1);
HXDLIN( 516)								data->fPos = (data->fPos + (int)2);
HXDLIN( 516)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 516)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 516)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 516)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 516)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 516)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 517)						hasPath = true;
HXLINE( 518)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((c3->buffer->f->__get(c3->fPos) - offsetX),(c3->buffer->f->__get((c3->fPos + (int)1)) - offsetY),(c3->buffer->f->__get((c3->fPos + (int)2)) - offsetX),(c3->buffer->f->__get((c3->fPos + (int)3)) - offsetY),(c3->buffer->f->__get((c3->fPos + (int)4)) - offsetX),(c3->buffer->f->__get((c3->fPos + (int)5)) - offsetY));
            					}
            					break;
            					case (int)4: {
HXLINE( 522)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 522)								data->oPos = (data->oPos + (int)2);
HXDLIN( 522)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 522)								data->iPos = (data->iPos + (int)1);
HXDLIN( 522)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 522)								data->oPos = (data->oPos + (int)4);
HXDLIN( 522)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 522)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 522)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 522)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 522)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 522)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 522)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 522)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 522)								data->fPos = (data->fPos + (int)5);
HXDLIN( 522)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 522)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 522)								data->oPos = (data->oPos + (int)2);
HXDLIN( 522)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 522)								data->oPos = (data->oPos + (int)4);
HXDLIN( 522)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 522)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 522)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 522)								data->oPos = (data->oPos + (int)4);
HXDLIN( 522)								data->iPos = (data->iPos + (int)1);
HXDLIN( 522)								data->fPos = (data->fPos + (int)2);
HXDLIN( 522)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 522)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 522)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 522)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 522)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 522)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 523)						hasPath = true;
HXLINE( 524)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((c4->buffer->f->__get(c4->fPos) - offsetX),(c4->buffer->f->__get((c4->fPos + (int)1)) - offsetY),(c4->buffer->f->__get((c4->fPos + (int)2)) - offsetX),(c4->buffer->f->__get((c4->fPos + (int)3)) - offsetY));
            					}
            					break;
            					case (int)5: {
HXLINE( 528)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 528)								data->oPos = (data->oPos + (int)2);
HXDLIN( 528)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 528)								data->iPos = (data->iPos + (int)1);
HXDLIN( 528)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 528)								data->oPos = (data->oPos + (int)4);
HXDLIN( 528)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 528)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 528)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 528)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 528)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 528)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 528)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 528)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 528)								data->fPos = (data->fPos + (int)5);
HXDLIN( 528)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 528)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 528)								data->oPos = (data->oPos + (int)2);
HXDLIN( 528)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 528)								data->oPos = (data->oPos + (int)4);
HXDLIN( 528)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 528)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 528)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 528)								data->oPos = (data->oPos + (int)4);
HXDLIN( 528)								data->iPos = (data->iPos + (int)1);
HXDLIN( 528)								data->fPos = (data->fPos + (int)2);
HXDLIN( 528)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 528)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 528)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 528)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 528)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 528)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 529)						hasPath = true;
HXLINE( 530)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(((c5->buffer->f->__get(c5->fPos) - offsetX) + c5->buffer->f->__get((c5->fPos + (int)2))),(c5->buffer->f->__get((c5->fPos + (int)1)) - offsetY));
HXLINE( 531)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->arc((c5->buffer->f->__get(c5->fPos) - offsetX),(c5->buffer->f->__get((c5->fPos + (int)1)) - offsetY),c5->buffer->f->__get((c5->fPos + (int)2)),(int)0,(::Math_obj::PI * (int)2));
            					}
            					break;
            					case (int)6: {
HXLINE( 541)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 541)								data->oPos = (data->oPos + (int)2);
HXDLIN( 541)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 541)								data->iPos = (data->iPos + (int)1);
HXDLIN( 541)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 541)								data->oPos = (data->oPos + (int)4);
HXDLIN( 541)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 541)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 541)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 541)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 541)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 541)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 541)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 541)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 541)								data->fPos = (data->fPos + (int)5);
HXDLIN( 541)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 541)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 541)								data->oPos = (data->oPos + (int)2);
HXDLIN( 541)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 541)								data->oPos = (data->oPos + (int)4);
HXDLIN( 541)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 541)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 541)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 541)								data->oPos = (data->oPos + (int)4);
HXDLIN( 541)								data->iPos = (data->iPos + (int)1);
HXDLIN( 541)								data->fPos = (data->fPos + (int)2);
HXDLIN( 541)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 541)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 541)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 541)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 541)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 541)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 542)						hasPath = true;
HXLINE( 544)						HX_VARI( Float,x) = c6->buffer->f->__get(c6->fPos);
HXLINE( 545)						HX_VARI( Float,y) = c6->buffer->f->__get((c6->fPos + (int)1));
HXLINE( 546)						HX_VARI( Float,width) = c6->buffer->f->__get((c6->fPos + (int)2));
HXLINE( 547)						HX_VARI( Float,height) = c6->buffer->f->__get((c6->fPos + (int)3));
HXLINE( 549)						x = (x - offsetX);
HXLINE( 550)						y = (y - offsetY);
HXLINE( 552)						HX_VARI( Float,ox) = (((Float)width / (Float)(int)2) * ((Float).5522848));
HXDLIN( 552)						HX_VARI( Float,oy) = (((Float)height / (Float)(int)2) * ((Float).5522848));
HXDLIN( 552)						HX_VARI( Float,xe) = (x + width);
HXDLIN( 552)						HX_VARI( Float,ye) = (y + height);
HXDLIN( 552)						HX_VARI( Float,xm) = (x + ((Float)width / (Float)(int)2));
HXDLIN( 552)						HX_VARI( Float,ym) = (y + ((Float)height / (Float)(int)2));
HXLINE( 560)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x,ym);
HXLINE( 561)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(x,(ym - oy),(xm - ox),y,xm,y);
HXLINE( 562)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((xm + ox),y,xe,(ym - oy),xe,ym);
HXLINE( 563)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(xe,(ym + oy),(xm + ox),ye,xm,ye);
HXLINE( 564)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((xm - ox),ye,x,(ym + oy),x,ym);
            					}
            					break;
            					case (int)7: {
HXLINE( 535)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 535)								data->oPos = (data->oPos + (int)2);
HXDLIN( 535)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 535)								data->iPos = (data->iPos + (int)1);
HXDLIN( 535)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 535)								data->oPos = (data->oPos + (int)4);
HXDLIN( 535)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 535)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 535)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 535)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 535)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 535)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 535)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 535)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 535)								data->fPos = (data->fPos + (int)5);
HXDLIN( 535)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 535)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 535)								data->oPos = (data->oPos + (int)2);
HXDLIN( 535)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 535)								data->oPos = (data->oPos + (int)4);
HXDLIN( 535)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 535)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 535)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 535)								data->oPos = (data->oPos + (int)4);
HXDLIN( 535)								data->iPos = (data->iPos + (int)1);
HXDLIN( 535)								data->fPos = (data->fPos + (int)2);
HXDLIN( 535)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 535)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 535)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 535)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 535)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 535)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 536)						hasPath = true;
HXLINE( 537)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->rectangle((c7->buffer->f->__get(c7->fPos) - offsetX),(c7->buffer->f->__get((c7->fPos + (int)1)) - offsetY),c7->buffer->f->__get((c7->fPos + (int)2)),c7->buffer->f->__get((c7->fPos + (int)3)));
            					}
            					break;
            					case (int)8: {
HXLINE( 568)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 568)								data->oPos = (data->oPos + (int)2);
HXDLIN( 568)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 568)								data->iPos = (data->iPos + (int)1);
HXDLIN( 568)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 568)								data->oPos = (data->oPos + (int)4);
HXDLIN( 568)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 568)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 568)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 568)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 568)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 568)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 568)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 568)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 568)								data->fPos = (data->fPos + (int)5);
HXDLIN( 568)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 568)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 568)								data->oPos = (data->oPos + (int)2);
HXDLIN( 568)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 568)								data->oPos = (data->oPos + (int)4);
HXDLIN( 568)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 568)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 568)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 568)								data->oPos = (data->oPos + (int)4);
HXDLIN( 568)								data->iPos = (data->iPos + (int)1);
HXDLIN( 568)								data->fPos = (data->fPos + (int)2);
HXDLIN( 568)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 568)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 568)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 568)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 568)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 568)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 569)						hasPath = true;
HXLINE( 570)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::drawRoundRect((c8->buffer->f->__get(c8->fPos) - offsetX),(c8->buffer->f->__get((c8->fPos + (int)1)) - offsetY),c8->buffer->f->__get((c8->fPos + (int)2)),c8->buffer->f->__get((c8->fPos + (int)3)),c8->buffer->f->__get((c8->fPos + (int)4)),c8->buffer->o->__get(c8->oPos));
            					}
            					break;
            					case (int)10: {
HXLINE( 740)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 740)								data->oPos = (data->oPos + (int)2);
HXDLIN( 740)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 740)								data->iPos = (data->iPos + (int)1);
HXDLIN( 740)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 740)								data->oPos = (data->oPos + (int)4);
HXDLIN( 740)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 740)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 740)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 740)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 740)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 740)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 740)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 740)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 740)								data->fPos = (data->fPos + (int)5);
HXDLIN( 740)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 740)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 740)								data->oPos = (data->oPos + (int)2);
HXDLIN( 740)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 740)								data->oPos = (data->oPos + (int)4);
HXDLIN( 740)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 740)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 740)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 740)								data->oPos = (data->oPos + (int)4);
HXDLIN( 740)								data->iPos = (data->iPos + (int)1);
HXDLIN( 740)								data->fPos = (data->fPos + (int)2);
HXDLIN( 740)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 740)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 740)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 740)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 740)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 740)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 741)						HX_VARI(  ::openfl::_Vector::FloatVector,v) = ( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(c9->oPos)) );
HXLINE( 742)						HX_VARI(  ::openfl::_Vector::IntVector,ind) = ( ( ::openfl::_Vector::IntVector)(c9->buffer->o->__get((c9->oPos + (int)1))) );
HXLINE( 743)						HX_VARI(  ::openfl::_Vector::FloatVector,uvt) = ( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get((c9->oPos + (int)2))) );
HXLINE( 744)						HX_VARI( bool,colorFill) = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill );
HXLINE( 746)						bool _hx_tmp;
HXDLIN( 746)						if (colorFill) {
HXLINE( 746)							_hx_tmp = hx::IsNotNull( uvt );
            						}
            						else {
HXLINE( 746)							_hx_tmp = false;
            						}
HXDLIN( 746)						if (_hx_tmp) {
HXLINE( 748)							goto _hx_goto_14;
            						}
HXLINE( 752)						HX_VARI_NAME( int,width1,"width") = (int)0;
HXLINE( 753)						HX_VARI_NAME( int,height1,"height") = (int)0;
HXLINE( 754)						HX_VARI(  ::lime::math::Matrix3,currentMatrix) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___renderTransform->_hx___toMatrix3();
HXLINE( 756)						if (!(colorFill)) {
HXLINE( 760)							if (hx::IsNull( uvt )) {
HXLINE( 762)								int length = null();
HXDLIN( 762)								bool fixed = null();
HXDLIN( 762)								uvt =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 764)								{
HXLINE( 764)									HX_VARI( int,_g3) = (int)0;
HXDLIN( 764)									HX_VARI( int,_g2) = ::Std_obj::_hx_int(((Float)v->get_length() / (Float)(int)2));
HXDLIN( 764)									while((_g3 < _g2)){
HXLINE( 764)										_g3 = (_g3 + (int)1);
HXDLIN( 764)										HX_VARI( int,i) = (_g3 - (int)1);
HXLINE( 766)										uvt->push(((Float)v->get((i * (int)2)) / (Float)::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->width));
HXLINE( 767)										uvt->push(((Float)v->get(((i * (int)2) + (int)1)) / (Float)::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->height));
            									}
            								}
            							}
HXLINE( 773)							HX_VARI( int,skipT) = ( (int)(( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get((c9->oPos + (int)2))) )->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic)()) );
HXLINE( 774)							HX_VARI(  ::Dynamic,normalizedUVT) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::normalizeUVT(uvt,(skipT != v->get_length()));
HXLINE( 776)							uvt = ( ( ::openfl::_Vector::FloatVector)(normalizedUVT->__Field(HX_("uvt",f3,2e,59,00),hx::paccDynamic)) );
HXLINE( 778)							if ((( (Float)(normalizedUVT->__Field(HX_("max",a4,0a,53,00),hx::paccDynamic)) ) > (int)1)) {
HXLINE( 779)								width1 = ::Std_obj::_hx_int(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width);
HXLINE( 780)								height1 = ::Std_obj::_hx_int(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height);
            							}
            							else {
HXLINE( 785)								width1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->width;
HXLINE( 786)								height1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->height;
            							}
            						}
HXLINE( 792)						HX_VARI_NAME( int,i1,"i") = (int)0;
HXLINE( 793)						HX_VARI( int,l) = ind->get_length();
HXLINE( 795)						HX_VAR( int,a_);
HXDLIN( 795)						HX_VAR( int,b_);
HXDLIN( 795)						HX_VAR( int,c_);
HXLINE( 796)						HX_VAR( int,iax);
HXDLIN( 796)						HX_VAR( int,iay);
HXDLIN( 796)						HX_VAR( int,ibx);
HXDLIN( 796)						HX_VAR( int,iby);
HXDLIN( 796)						HX_VAR( int,icx);
HXDLIN( 796)						HX_VAR( int,icy);
HXLINE( 797)						HX_VAR( Float,x1);
HXDLIN( 797)						HX_VAR( Float,y1);
HXDLIN( 797)						HX_VAR( Float,x2);
HXDLIN( 797)						HX_VAR( Float,y2);
HXDLIN( 797)						HX_VAR( Float,x3);
HXDLIN( 797)						HX_VAR( Float,y3);
HXLINE( 798)						HX_VAR( Float,uvx1);
HXDLIN( 798)						HX_VAR( Float,uvy1);
HXDLIN( 798)						HX_VAR( Float,uvx2);
HXDLIN( 798)						HX_VAR( Float,uvy2);
HXDLIN( 798)						HX_VAR( Float,uvx3);
HXDLIN( 798)						HX_VAR( Float,uvy3);
HXLINE( 799)						HX_VAR( Float,denom);
HXLINE( 800)						HX_VAR( Float,t1);
HXDLIN( 800)						HX_VAR( Float,t2);
HXDLIN( 800)						HX_VAR( Float,t3);
HXDLIN( 800)						HX_VAR( Float,t4);
HXLINE( 801)						HX_VAR( Float,dx);
HXDLIN( 801)						HX_VAR( Float,dy);
HXLINE( 803)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_antialias((int)1);
HXLINE( 805)						while((i1 < l)){
HXLINE( 807)							a_ = i1;
HXLINE( 808)							b_ = (i1 + (int)1);
HXLINE( 809)							c_ = (i1 + (int)2);
HXLINE( 811)							iax = (ind->get(a_) * (int)2);
HXLINE( 812)							iay = ((ind->get(a_) * (int)2) + (int)1);
HXLINE( 813)							ibx = (ind->get(b_) * (int)2);
HXLINE( 814)							iby = ((ind->get(b_) * (int)2) + (int)1);
HXLINE( 815)							icx = (ind->get(c_) * (int)2);
HXLINE( 816)							icy = ((ind->get(c_) * (int)2) + (int)1);
HXLINE( 818)							x1 = v->get(iax);
HXLINE( 819)							y1 = v->get(iay);
HXLINE( 820)							x2 = v->get(ibx);
HXLINE( 821)							y2 = v->get(iby);
HXLINE( 822)							x3 = v->get(icx);
HXLINE( 823)							y3 = v->get(icy);
HXLINE( 825)							 ::Dynamic _hx_switch_0 = c9->buffer->o->__get((c9->oPos + (int)3));
            							if (  (_hx_switch_0==(int)0) ){
HXLINE( 838)								if (((((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1))) < (int)0)) {
HXLINE( 840)									i1 = (i1 + (int)3);
HXLINE( 841)									continue;
            								}
HXLINE( 838)								goto _hx_goto_17;
            							}
            							if (  (_hx_switch_0==(int)2) ){
HXLINE( 829)								if (!(((((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1))) < (int)0))) {
HXLINE( 831)									i1 = (i1 + (int)3);
HXLINE( 832)									continue;
            								}
HXLINE( 829)								goto _hx_goto_17;
            							}
            							/* default */{
            							}
            							_hx_goto_17:;
HXLINE( 849)							if (colorFill) {
HXLINE( 851)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 852)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x1,y1);
HXLINE( 853)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x2,y2);
HXLINE( 854)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x3,y3);
HXLINE( 855)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 856)								if (!(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting)) {
HXLINE( 856)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            								}
HXLINE( 857)								i1 = (i1 + (int)3);
HXLINE( 858)								continue;
            							}
HXLINE( 862)							 ::lime::graphics::cairo::Cairo _hx_tmp1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo;
HXDLIN( 862)							_hx_tmp1->set_matrix(::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___renderTransform->_hx___toMatrix3());
HXLINE( 866)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 867)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x1,y1);
HXLINE( 868)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x2,y2);
HXLINE( 869)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x3,y3);
HXLINE( 870)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 873)							uvx1 = (uvt->get(iax) * width1);
HXLINE( 874)							uvx2 = (uvt->get(ibx) * width1);
HXLINE( 875)							uvx3 = (uvt->get(icx) * width1);
HXLINE( 876)							uvy1 = (uvt->get(iay) * height1);
HXLINE( 877)							uvy2 = (uvt->get(iby) * height1);
HXLINE( 878)							uvy3 = (uvt->get(icy) * height1);
HXLINE( 880)							denom = ((((uvx1 * (uvy3 - uvy2)) - (uvx2 * uvy3)) + (uvx3 * uvy2)) + ((uvx2 - uvx3) * uvy1));
HXLINE( 882)							if ((denom == (int)0)) {
HXLINE( 884)								i1 = (i1 + (int)3);
HXLINE( 885)								continue;
            							}
HXLINE( 889)							x1 = (x1 * currentMatrix->a);
HXLINE( 890)							x2 = (x2 * currentMatrix->a);
HXLINE( 891)							x3 = (x3 * currentMatrix->a);
HXLINE( 892)							y1 = (y1 * currentMatrix->d);
HXLINE( 893)							y2 = (y2 * currentMatrix->d);
HXLINE( 894)							y3 = (y3 * currentMatrix->d);
HXLINE( 896)							t1 = ((Float)-(((((uvy1 * (x3 - x2)) - (uvy2 * x3)) + (uvy3 * x2)) + ((uvy2 - uvy3) * x1))) / (Float)denom);
HXLINE( 897)							t2 = ((Float)((((uvy2 * y3) + (uvy1 * (y2 - y3))) - (uvy3 * y2)) + ((uvy3 - uvy2) * y1)) / (Float)denom);
HXLINE( 898)							t3 = ((Float)((((uvx1 * (x3 - x2)) - (uvx2 * x3)) + (uvx3 * x2)) + ((uvx2 - uvx3) * x1)) / (Float)denom);
HXLINE( 899)							t4 = ((Float)-(((((uvx2 * y3) + (uvx1 * (y2 - y3))) - (uvx3 * y2)) + ((uvx3 - uvx2) * y1))) / (Float)denom);
HXLINE( 900)							dx = ((Float)(((uvx1 * ((uvy3 * x2) - (uvy2 * x3))) + (uvy1 * ((uvx2 * x3) - (uvx3 * x2)))) + (((uvx3 * uvy2) - (uvx2 * uvy3)) * x1)) / (Float)denom);
HXLINE( 901)							dy = ((Float)(((uvx1 * ((uvy3 * y2) - (uvy2 * y3))) + (uvy1 * ((uvx2 * y3) - (uvx3 * y2)))) + (((uvx3 * uvy2) - (uvx2 * uvy3)) * y1)) / (Float)denom);
HXLINE( 904)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix( ::lime::math::Matrix3_obj::__alloc( HX_CTX ,t1,t2,t3,t4,dx,dy));
HXLINE( 905)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern);
HXLINE( 906)							if (!(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting)) {
HXLINE( 906)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fill();
            							}
HXLINE( 908)							i1 = (i1 + (int)3);
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 680)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 680)								data->oPos = (data->oPos + (int)2);
HXDLIN( 680)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 680)								data->iPos = (data->iPos + (int)1);
HXDLIN( 680)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 680)								data->oPos = (data->oPos + (int)4);
HXDLIN( 680)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 680)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 680)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 680)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 680)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 680)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 680)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 680)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 680)								data->fPos = (data->fPos + (int)5);
HXDLIN( 680)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 680)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 680)								data->oPos = (data->oPos + (int)2);
HXDLIN( 680)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 680)								data->oPos = (data->oPos + (int)4);
HXDLIN( 680)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 680)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 680)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 680)								data->oPos = (data->oPos + (int)4);
HXDLIN( 680)								data->iPos = (data->iPos + (int)1);
HXDLIN( 680)								data->fPos = (data->fPos + (int)2);
HXDLIN( 680)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 680)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 680)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 680)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 680)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 680)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 681)						bool _hx_tmp2;
HXDLIN( 681)						if (stroke) {
HXLINE( 681)							_hx_tmp2 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 681)							_hx_tmp2 = false;
            						}
HXDLIN( 681)						if (_hx_tmp2) {
HXLINE( 683)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(null());
            						}
HXLINE( 687)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 688)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createImagePattern(( ( ::openfl::display::BitmapData)(c10->buffer->o->__get(c10->oPos)) ),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get((c10->oPos + (int)1))) ),c10->buffer->b->__get(c10->bPos),c10->buffer->b->__get((c10->bPos + (int)1)));
HXLINE( 690)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
            					}
            					break;
            					case (int)13: {
HXLINE( 666)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 666)								data->oPos = (data->oPos + (int)2);
HXDLIN( 666)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 666)								data->iPos = (data->iPos + (int)1);
HXDLIN( 666)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 666)								data->oPos = (data->oPos + (int)4);
HXDLIN( 666)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 666)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 666)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 666)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 666)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 666)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 666)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 666)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 666)								data->fPos = (data->fPos + (int)5);
HXDLIN( 666)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 666)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 666)								data->oPos = (data->oPos + (int)2);
HXDLIN( 666)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 666)								data->oPos = (data->oPos + (int)4);
HXDLIN( 666)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 666)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 666)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 666)								data->oPos = (data->oPos + (int)4);
HXDLIN( 666)								data->iPos = (data->iPos + (int)1);
HXDLIN( 666)								data->fPos = (data->fPos + (int)2);
HXDLIN( 666)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 666)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 666)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 666)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 666)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 666)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 667)						bool _hx_tmp3;
HXDLIN( 667)						if (stroke) {
HXLINE( 667)							_hx_tmp3 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 667)							_hx_tmp3 = false;
            						}
HXDLIN( 667)						if (_hx_tmp3) {
HXLINE( 669)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(null());
            						}
HXLINE( 673)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 674)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createGradientPattern(c11->buffer->o->__get(c11->oPos),c11->buffer->ii->__get(c11->iiPos).StaticCast< ::Array< int > >(),c11->buffer->ff->__get(c11->ffPos).StaticCast< ::Array< Float > >(),c11->buffer->ii->__get((c11->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get((c11->oPos + (int)1))) ),c11->buffer->o->__get((c11->oPos + (int)2)),c11->buffer->o->__get((c11->oPos + (int)3)),c11->buffer->f->__get(c11->fPos));
HXLINE( 676)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
            					}
            					break;
            					case (int)14: {
HXLINE( 595)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 595)								data->oPos = (data->oPos + (int)2);
HXDLIN( 595)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 595)								data->iPos = (data->iPos + (int)1);
HXDLIN( 595)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 595)								data->oPos = (data->oPos + (int)4);
HXDLIN( 595)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 595)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 595)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 595)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 595)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 595)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 595)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 595)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 595)								data->fPos = (data->fPos + (int)5);
HXDLIN( 595)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 595)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 595)								data->oPos = (data->oPos + (int)2);
HXDLIN( 595)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 595)								data->oPos = (data->oPos + (int)4);
HXDLIN( 595)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 595)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 595)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 595)								data->oPos = (data->oPos + (int)4);
HXDLIN( 595)								data->iPos = (data->iPos + (int)1);
HXDLIN( 595)								data->fPos = (data->fPos + (int)2);
HXDLIN( 595)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 595)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 595)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 595)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 595)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 595)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 596)						bool _hx_tmp4;
HXDLIN( 596)						if (stroke) {
HXLINE( 596)							_hx_tmp4 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 596)							_hx_tmp4 = false;
            						}
HXDLIN( 596)						if (_hx_tmp4) {
HXLINE( 598)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(hx::IsNull( c12->buffer->o->__get(c12->oPos) ));
            						}
HXLINE( 602)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 604)						if (hx::IsNull( c12->buffer->o->__get(c12->oPos) )) {
HXLINE( 606)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
            						}
            						else {
HXLINE( 610)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
HXLINE( 612)							Float _hx_tmp5;
HXDLIN( 612)							if (hx::IsGreater( c12->buffer->o->__get(c12->oPos),(int)0 )) {
HXLINE( 612)								_hx_tmp5 = ( (Float)(c12->buffer->o->__get(c12->oPos)) );
            							}
            							else {
HXLINE( 612)								_hx_tmp5 = (int)1;
            							}
HXDLIN( 612)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineWidth(_hx_tmp5);
HXLINE( 614)							if (hx::IsNull( c12->buffer->o->__get((c12->oPos + (int)3)) )) {
HXLINE( 616)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineJoin((int)1);
            							}
            							else {
HXLINE( 620)								int _hx_tmp6;
HXDLIN( 620)								 ::Dynamic _hx_switch_1 = c12->buffer->o->__get((c12->oPos + (int)3));
            								if (  (_hx_switch_1==(int)0) ){
HXLINE( 620)									_hx_tmp6 = (int)2;
HXDLIN( 620)									goto _hx_goto_18;
            								}
            								if (  (_hx_switch_1==(int)1) ){
HXLINE( 620)									_hx_tmp6 = (int)0;
HXDLIN( 620)									goto _hx_goto_18;
            								}
            								/* default */{
HXLINE( 620)									_hx_tmp6 = (int)1;
            								}
            								_hx_goto_18:;
HXDLIN( 620)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineJoin(_hx_tmp6);
            							}
HXLINE( 630)							if (hx::IsNull( c12->buffer->o->__get((c12->oPos + (int)2)) )) {
HXLINE( 632)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineCap((int)1);
            							}
            							else {
HXLINE( 636)								int _hx_tmp7;
HXDLIN( 636)								 ::Dynamic _hx_switch_2 = c12->buffer->o->__get((c12->oPos + (int)2));
            								if (  (_hx_switch_2==(int)0) ){
HXLINE( 636)									_hx_tmp7 = (int)0;
HXDLIN( 636)									goto _hx_goto_19;
            								}
            								if (  (_hx_switch_2==(int)2) ){
HXLINE( 636)									_hx_tmp7 = (int)2;
HXDLIN( 636)									goto _hx_goto_19;
            								}
            								/* default */{
HXLINE( 636)									_hx_tmp7 = (int)1;
            								}
            								_hx_goto_19:;
HXDLIN( 636)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineCap(_hx_tmp7);
            							}
HXLINE( 646)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_miterLimit(c12->buffer->f->__get((c12->fPos + (int)1)));
HXLINE( 648)							HX_VARI( Float,r) = ((Float)hx::UShr(((int)c12->buffer->i->__get(c12->iPos) & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 649)							HX_VARI( Float,g) = ((Float)hx::UShr(((int)c12->buffer->i->__get(c12->iPos) & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 650)							HX_VARI( Float,b) = ((Float)((int)c12->buffer->i->__get(c12->iPos) & (int)(int)255) / (Float)(int)255);
HXLINE( 652)							if ((c12->buffer->f->__get(c12->fPos) == (int)1)) {
HXLINE( 654)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGB(r,g,b);
            							}
            							else {
HXLINE( 658)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGBA(r,g,b,c12->buffer->f->__get(c12->fPos));
            							}
            						}
            					}
            					break;
            					case (int)15: {
HXLINE( 574)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 574)								data->oPos = (data->oPos + (int)2);
HXDLIN( 574)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 574)								data->iPos = (data->iPos + (int)1);
HXDLIN( 574)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 574)								data->oPos = (data->oPos + (int)4);
HXDLIN( 574)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 574)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 574)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 574)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 574)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 574)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 574)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 574)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 574)								data->fPos = (data->fPos + (int)5);
HXDLIN( 574)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 574)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 574)								data->oPos = (data->oPos + (int)2);
HXDLIN( 574)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 574)								data->oPos = (data->oPos + (int)4);
HXDLIN( 574)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 574)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 574)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 574)								data->oPos = (data->oPos + (int)4);
HXDLIN( 574)								data->iPos = (data->iPos + (int)1);
HXDLIN( 574)								data->fPos = (data->fPos + (int)2);
HXDLIN( 574)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 574)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 574)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 574)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 574)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 574)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 575)						hasPath = true;
HXLINE( 576)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((c13->buffer->f->__get(c13->fPos) - offsetX),(c13->buffer->f->__get((c13->fPos + (int)1)) - offsetY));
HXLINE( 578)						positionX = c13->buffer->f->__get(c13->fPos);
HXLINE( 579)						positionY = c13->buffer->f->__get((c13->fPos + (int)1));
            					}
            					break;
            					case (int)16: {
HXLINE( 583)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 583)								data->oPos = (data->oPos + (int)2);
HXDLIN( 583)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 583)								data->iPos = (data->iPos + (int)1);
HXDLIN( 583)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 583)								data->oPos = (data->oPos + (int)4);
HXDLIN( 583)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 583)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 583)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 583)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 583)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 583)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 583)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 583)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 583)								data->fPos = (data->fPos + (int)5);
HXDLIN( 583)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 583)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 583)								data->oPos = (data->oPos + (int)2);
HXDLIN( 583)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 583)								data->oPos = (data->oPos + (int)4);
HXDLIN( 583)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 583)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 583)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 583)								data->oPos = (data->oPos + (int)4);
HXDLIN( 583)								data->iPos = (data->iPos + (int)1);
HXDLIN( 583)								data->fPos = (data->fPos + (int)2);
HXDLIN( 583)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 583)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 583)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 583)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 583)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 583)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE( 584)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((c14->buffer->f->__get(c14->fPos) - offsetX),(c14->buffer->f->__get((c14->fPos + (int)1)) - offsetY));
HXLINE( 586)						positionX = c14->buffer->f->__get(c14->fPos);
HXLINE( 587)						positionY = c14->buffer->f->__get((c14->fPos + (int)1));
HXLINE( 589)						closeGap = true;
HXLINE( 590)						startX = c14->buffer->f->__get(c14->fPos);
HXLINE( 591)						startY = c14->buffer->f->__get((c14->fPos + (int)1));
            					}
            					break;
            					default:{
HXLINE( 914)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 914)								data->oPos = (data->oPos + (int)2);
HXDLIN( 914)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 914)								data->iPos = (data->iPos + (int)1);
HXDLIN( 914)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 914)								data->oPos = (data->oPos + (int)4);
HXDLIN( 914)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 914)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 914)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 914)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 914)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 914)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 914)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 914)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 914)								data->fPos = (data->fPos + (int)5);
HXDLIN( 914)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 914)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 914)								data->oPos = (data->oPos + (int)2);
HXDLIN( 914)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 914)								data->oPos = (data->oPos + (int)4);
HXDLIN( 914)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 914)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 914)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 914)								data->oPos = (data->oPos + (int)4);
HXDLIN( 914)								data->iPos = (data->iPos + (int)1);
HXDLIN( 914)								data->fPos = (data->fPos + (int)2);
HXDLIN( 914)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 914)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 914)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 914)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 914)						data->prev = type;
            					}
            				}
            			}
            			_hx_goto_14:;
            		}
HXLINE( 920)		data->destroy();
HXLINE( 922)		if (hasPath) {
HXLINE( 924)			bool _hx_tmp8;
HXDLIN( 924)			if (stroke) {
HXLINE( 924)				_hx_tmp8 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            			}
            			else {
HXLINE( 924)				_hx_tmp8 = false;
            			}
HXDLIN( 924)			if (_hx_tmp8) {
HXLINE( 926)				bool _hx_tmp9;
HXDLIN( 926)				if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill) {
HXLINE( 926)					_hx_tmp9 = closeGap;
            				}
            				else {
HXLINE( 926)					_hx_tmp9 = false;
            				}
HXDLIN( 926)				if (_hx_tmp9) {
HXLINE( 928)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((startX - offsetX),(startY - offsetY));
            				}
            				else {
HXLINE( 930)					bool _hx_tmp10;
HXDLIN( 930)					bool _hx_tmp11;
HXDLIN( 930)					if (closeGap) {
HXLINE( 930)						_hx_tmp11 = (positionX == startX);
            					}
            					else {
HXLINE( 930)						_hx_tmp11 = false;
            					}
HXDLIN( 930)					if (_hx_tmp11) {
HXLINE( 930)						_hx_tmp10 = (positionY == startY);
            					}
            					else {
HXLINE( 930)						_hx_tmp10 = false;
            					}
HXDLIN( 930)					if (_hx_tmp10) {
HXLINE( 932)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(true);
            					}
            				}
HXLINE( 936)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern);
HXLINE( 937)				if (!(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting)) {
HXLINE( 937)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->strokePreserve();
            				}
            			}
HXLINE( 941)			bool _hx_tmp12;
HXDLIN( 941)			if (!(stroke)) {
HXLINE( 941)				_hx_tmp12 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
            			}
            			else {
HXLINE( 941)				_hx_tmp12 = false;
            			}
HXDLIN( 941)			if (_hx_tmp12) {
HXLINE( 943)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(-(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x),-(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y));
HXLINE( 945)				if (hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix )) {
HXLINE( 947)					HX_VARI(  ::openfl::geom::Matrix,matrix) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix->clone();
HXLINE( 948)					matrix->invert();
HXLINE( 950)					if (hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix )) {
HXLINE( 952)						matrix->concat(::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix);
            					}
HXLINE( 956)					 ::Dynamic _hx_tmp13 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern;
HXDLIN( 956)					::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(_hx_tmp13,matrix->_hx___toMatrix3());
            				}
HXLINE( 960)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern);
HXLINE( 962)				if (hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix )) {
HXLINE( 964)					 ::lime::graphics::cairo::Cairo _hx_tmp14 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo;
HXDLIN( 964)					_hx_tmp14->transform(::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix->_hx___toMatrix3());
HXLINE( 965)					if (!(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting)) {
HXLINE( 965)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            					}
HXLINE( 966)					 ::lime::graphics::cairo::Cairo _hx_tmp15 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo;
HXDLIN( 966)					_hx_tmp15->transform(::openfl::_internal::renderer::cairo::CairoGraphics_obj::inversePendingMatrix->_hx___toMatrix3());
            				}
            				else {
HXLINE( 970)					if (!(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting)) {
HXLINE( 970)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            					}
            				}
HXLINE( 974)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y);
HXLINE( 975)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,playCommands,(void))

void CairoGraphics_obj::quadraticCurveTo(Float cx,Float cy,Float x,Float y){
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_983_quadraticCurveTo)
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 985)		HX_VARI(  ::lime::math::Vector2,current) = null();
HXLINE( 987)		if (!(::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->get_hasCurrentPoint())) {
HXLINE( 989)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(cx,cy);
HXLINE( 990)			current =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,cx,cy);
            		}
            		else {
HXLINE( 994)			current = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->get_currentPoint();
            		}
HXLINE(1003)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((current->x + (((Float)0.66666666666666663) * (cx - current->x))),(current->y + (((Float)0.66666666666666663) * (cy - current->y))),(x + (((Float)0.66666666666666663) * (cx - x))),(y + (((Float)0.66666666666666663) * (cy - y))),x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CairoGraphics_obj,quadraticCurveTo,(void))

void CairoGraphics_obj::render( ::openfl::display::Graphics graphics, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::geom::Matrix parentTransform){
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_1008_render)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(parentTransform,"parentTransform")
HXLINE(1012)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics = graphics;
HXLINE(1013)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::allowSmoothing = renderSession->allowSmoothing;
HXLINE(1014)		graphics->_hx___update();
HXLINE(1016)		bool _hx_tmp;
HXDLIN(1016)		if (!(!(graphics->_hx___dirty))) {
HXLINE(1016)			_hx_tmp = graphics->_hx___managed;
            		}
            		else {
HXLINE(1016)			_hx_tmp = true;
            		}
HXDLIN(1016)		if (_hx_tmp) {
HXLINE(1016)			return;
            		}
HXLINE(1018)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = graphics->_hx___bounds;
HXLINE(1020)		HX_VARI( int,width) = graphics->_hx___width;
HXLINE(1021)		HX_VARI( int,height) = graphics->_hx___height;
HXLINE(1023)		bool _hx_tmp1;
HXDLIN(1023)		bool _hx_tmp2;
HXDLIN(1023)		bool _hx_tmp3;
HXDLIN(1023)		bool _hx_tmp4;
HXDLIN(1023)		if (!(!(graphics->_hx___visible))) {
HXLINE(1023)			_hx_tmp4 = (graphics->_hx___commands->get_length() == (int)0);
            		}
            		else {
HXLINE(1023)			_hx_tmp4 = true;
            		}
HXDLIN(1023)		if (!(_hx_tmp4)) {
HXLINE(1023)			_hx_tmp3 = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds );
            		}
            		else {
HXLINE(1023)			_hx_tmp3 = true;
            		}
HXDLIN(1023)		if (!(_hx_tmp3)) {
HXLINE(1023)			_hx_tmp2 = (width < (int)1);
            		}
            		else {
HXLINE(1023)			_hx_tmp2 = true;
            		}
HXDLIN(1023)		if (!(_hx_tmp2)) {
HXLINE(1023)			_hx_tmp1 = (height < (int)1);
            		}
            		else {
HXLINE(1023)			_hx_tmp1 = true;
            		}
HXDLIN(1023)		if (_hx_tmp1) {
HXLINE(1025)			graphics->_hx___cairo = null();
HXLINE(1026)			graphics->_hx___bitmap = null();
            		}
            		else {
HXLINE(1030)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting = false;
HXLINE(1032)			if (hx::IsNotNull( graphics->_hx___cairo )) {
HXLINE(1034)				HX_VARI(  ::Dynamic,surface) = graphics->_hx___cairo->get_target();
HXLINE(1036)				bool _hx_tmp5;
HXDLIN(1036)				if ((width == ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_width(surface))) {
HXLINE(1036)					_hx_tmp5 = (height != ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_height(surface));
            				}
            				else {
HXLINE(1036)					_hx_tmp5 = true;
            				}
HXDLIN(1036)				if (_hx_tmp5) {
HXLINE(1038)					graphics->_hx___cairo = null();
            				}
            			}
HXLINE(1044)			bool _hx_tmp6;
HXDLIN(1044)			if (hx::IsNotNull( graphics->_hx___cairo )) {
HXLINE(1044)				_hx_tmp6 = hx::IsNull( graphics->_hx___bitmap );
            			}
            			else {
HXLINE(1044)				_hx_tmp6 = true;
            			}
HXDLIN(1044)			if (_hx_tmp6) {
HXLINE(1046)				HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,width,height,true,(int)0);
HXLINE(1048)				graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__alloc( HX_CTX ,bitmap->getSurface());
HXLINE(1049)				graphics->_hx___bitmap = bitmap;
            			}
HXLINE(1053)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo = graphics->_hx___cairo;
HXLINE(1054)			 ::lime::graphics::cairo::Cairo _hx_tmp7 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo;
HXDLIN(1054)			_hx_tmp7->set_matrix(graphics->_hx___renderTransform->_hx___toMatrix3());
HXLINE(1056)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)0);
HXLINE(1057)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->paint();
HXLINE(1058)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)2);
HXLINE(1060)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
HXLINE(1061)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
HXLINE(1063)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE(1064)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
HXLINE(1066)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = null();
HXLINE(1067)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = null();
HXLINE(1069)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE(1071)			{
HXLINE(1071)				HX_VARI( int,_g) = (int)0;
HXDLIN(1071)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN(1071)				while((_g < _g1->length)){
HXLINE(1071)					HX_VARI(  ::openfl::_internal::renderer::DrawCommandType,type) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN(1071)					_g = (_g + (int)1);
HXLINE(1073)					switch((int)(_hx_getEnumValueIndex(type))){
            						case (int)0: case (int)1: case (int)2: {
HXLINE(1124)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE(1125)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE(1127)							if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn() )) {
HXLINE(1129)								switch((int)(_hx_getEnumValueIndex(data->prev))){
            									case (int)0: {
HXLINE(1129)										data->oPos = (data->oPos + (int)2);
HXDLIN(1129)										data->bPos = (data->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1129)										data->iPos = (data->iPos + (int)1);
HXDLIN(1129)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1129)										data->oPos = (data->oPos + (int)4);
HXDLIN(1129)										data->iiPos = (data->iiPos + (int)2);
HXDLIN(1129)										data->ffPos = (data->ffPos + (int)1);
HXDLIN(1129)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1129)										data->fPos = (data->fPos + (int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1129)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1129)										data->fPos = (data->fPos + (int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1129)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1129)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1129)										data->fPos = (data->fPos + (int)5);
HXDLIN(1129)										data->oPos = (data->oPos + (int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1129)										data->oPos = (data->oPos + (int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1129)										data->oPos = (data->oPos + (int)2);
HXDLIN(1129)										data->bPos = (data->bPos + (int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1129)										data->oPos = (data->oPos + (int)4);
HXDLIN(1129)										data->iiPos = (data->iiPos + (int)2);
HXDLIN(1129)										data->ffPos = (data->ffPos + (int)1);
HXDLIN(1129)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1129)										data->oPos = (data->oPos + (int)4);
HXDLIN(1129)										data->iPos = (data->iPos + (int)1);
HXDLIN(1129)										data->fPos = (data->fPos + (int)2);
HXDLIN(1129)										data->bPos = (data->bPos + (int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1129)										data->fPos = (data->fPos + (int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1129)										data->fPos = (data->fPos + (int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1129)										data->oPos = (data->oPos + (int)1);
            									}
            									break;
            									default:{
            									}
            								}
HXLINE(1129)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(1129)								HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE(1130)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginBitmapFill(( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) ),( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) ),c->buffer->b->__get(c->bPos),c->buffer->b->__get((c->bPos + (int)1)));
HXLINE(1131)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginBitmapFill(( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) ),( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) ),c->buffer->b->__get(c->bPos),c->buffer->b->__get((c->bPos + (int)1)));
            							}
            							else {
HXLINE(1133)								if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn() )) {
HXLINE(1135)									switch((int)(_hx_getEnumValueIndex(data->prev))){
            										case (int)0: {
HXLINE(1135)											data->oPos = (data->oPos + (int)2);
HXDLIN(1135)											data->bPos = (data->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE(1135)											data->iPos = (data->iPos + (int)1);
HXDLIN(1135)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE(1135)											data->oPos = (data->oPos + (int)4);
HXDLIN(1135)											data->iiPos = (data->iiPos + (int)2);
HXDLIN(1135)											data->ffPos = (data->ffPos + (int)1);
HXDLIN(1135)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE(1135)											data->fPos = (data->fPos + (int)6);
            										}
            										break;
            										case (int)4: {
HXLINE(1135)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)5: {
HXLINE(1135)											data->fPos = (data->fPos + (int)3);
            										}
            										break;
            										case (int)6: {
HXLINE(1135)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)7: {
HXLINE(1135)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE(1135)											data->fPos = (data->fPos + (int)5);
HXDLIN(1135)											data->oPos = (data->oPos + (int)1);
            										}
            										break;
            										case (int)10: {
HXLINE(1135)											data->oPos = (data->oPos + (int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE(1135)											data->oPos = (data->oPos + (int)2);
HXDLIN(1135)											data->bPos = (data->bPos + (int)2);
            										}
            										break;
            										case (int)13: {
HXLINE(1135)											data->oPos = (data->oPos + (int)4);
HXDLIN(1135)											data->iiPos = (data->iiPos + (int)2);
HXDLIN(1135)											data->ffPos = (data->ffPos + (int)1);
HXDLIN(1135)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)14: {
HXLINE(1135)											data->oPos = (data->oPos + (int)4);
HXDLIN(1135)											data->iPos = (data->iPos + (int)1);
HXDLIN(1135)											data->fPos = (data->fPos + (int)2);
HXDLIN(1135)											data->bPos = (data->bPos + (int)1);
            										}
            										break;
            										case (int)15: {
HXLINE(1135)											data->fPos = (data->fPos + (int)2);
            										}
            										break;
            										case (int)16: {
HXLINE(1135)											data->fPos = (data->fPos + (int)2);
            										}
            										break;
            										case (int)17: {
HXLINE(1135)											data->oPos = (data->oPos + (int)1);
            										}
            										break;
            										default:{
            										}
            									}
HXLINE(1135)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(1135)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE(1136)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get((c1->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get((c1->oPos + (int)1))) ),c1->buffer->o->__get((c1->oPos + (int)2)),c1->buffer->o->__get((c1->oPos + (int)3)),c1->buffer->f->__get(c1->fPos));
HXLINE(1137)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get((c1->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get((c1->oPos + (int)1))) ),c1->buffer->o->__get((c1->oPos + (int)2)),c1->buffer->o->__get((c1->oPos + (int)3)),c1->buffer->f->__get(c1->fPos));
            								}
            								else {
HXLINE(1141)									switch((int)(_hx_getEnumValueIndex(data->prev))){
            										case (int)0: {
HXLINE(1141)											data->oPos = (data->oPos + (int)2);
HXDLIN(1141)											data->bPos = (data->bPos + (int)2);
            										}
            										break;
            										case (int)1: {
HXLINE(1141)											data->iPos = (data->iPos + (int)1);
HXDLIN(1141)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)2: {
HXLINE(1141)											data->oPos = (data->oPos + (int)4);
HXDLIN(1141)											data->iiPos = (data->iiPos + (int)2);
HXDLIN(1141)											data->ffPos = (data->ffPos + (int)1);
HXDLIN(1141)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)3: {
HXLINE(1141)											data->fPos = (data->fPos + (int)6);
            										}
            										break;
            										case (int)4: {
HXLINE(1141)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)5: {
HXLINE(1141)											data->fPos = (data->fPos + (int)3);
            										}
            										break;
            										case (int)6: {
HXLINE(1141)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)7: {
HXLINE(1141)											data->fPos = (data->fPos + (int)4);
            										}
            										break;
            										case (int)8: {
HXLINE(1141)											data->fPos = (data->fPos + (int)5);
HXDLIN(1141)											data->oPos = (data->oPos + (int)1);
            										}
            										break;
            										case (int)10: {
HXLINE(1141)											data->oPos = (data->oPos + (int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE(1141)											data->oPos = (data->oPos + (int)2);
HXDLIN(1141)											data->bPos = (data->bPos + (int)2);
            										}
            										break;
            										case (int)13: {
HXLINE(1141)											data->oPos = (data->oPos + (int)4);
HXDLIN(1141)											data->iiPos = (data->iiPos + (int)2);
HXDLIN(1141)											data->ffPos = (data->ffPos + (int)1);
HXDLIN(1141)											data->fPos = (data->fPos + (int)1);
            										}
            										break;
            										case (int)14: {
HXLINE(1141)											data->oPos = (data->oPos + (int)4);
HXDLIN(1141)											data->iPos = (data->iPos + (int)1);
HXDLIN(1141)											data->fPos = (data->fPos + (int)2);
HXDLIN(1141)											data->bPos = (data->bPos + (int)1);
            										}
            										break;
            										case (int)15: {
HXLINE(1141)											data->fPos = (data->fPos + (int)2);
            										}
            										break;
            										case (int)16: {
HXLINE(1141)											data->fPos = (data->fPos + (int)2);
            										}
            										break;
            										case (int)17: {
HXLINE(1141)											data->oPos = (data->oPos + (int)1);
            										}
            										break;
            										default:{
            										}
            									}
HXLINE(1141)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(1141)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE(1142)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginFill(c2->buffer->i->__get(c2->iPos),c2->buffer->f->__get(c2->fPos));
HXLINE(1143)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginFill(c2->buffer->i->__get(c2->iPos),c2->buffer->f->__get(c2->fPos));
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1077)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1077)									data->oPos = (data->oPos + (int)2);
HXDLIN(1077)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1077)									data->iPos = (data->iPos + (int)1);
HXDLIN(1077)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1077)									data->oPos = (data->oPos + (int)4);
HXDLIN(1077)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1077)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1077)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1077)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1077)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1077)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1077)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1077)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1077)									data->fPos = (data->fPos + (int)5);
HXDLIN(1077)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1077)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1077)									data->oPos = (data->oPos + (int)2);
HXDLIN(1077)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1077)									data->oPos = (data->oPos + (int)4);
HXDLIN(1077)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1077)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1077)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1077)									data->oPos = (data->oPos + (int)4);
HXDLIN(1077)									data->iPos = (data->iPos + (int)1);
HXDLIN(1077)									data->fPos = (data->fPos + (int)2);
HXDLIN(1077)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1077)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1077)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1077)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1077)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1077)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE(1078)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->cubicCurveTo(c3->buffer->f->__get(c3->fPos),c3->buffer->f->__get((c3->fPos + (int)1)),c3->buffer->f->__get((c3->fPos + (int)2)),c3->buffer->f->__get((c3->fPos + (int)3)),c3->buffer->f->__get((c3->fPos + (int)4)),c3->buffer->f->__get((c3->fPos + (int)5)));
HXLINE(1079)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->cubicCurveTo(c3->buffer->f->__get(c3->fPos),c3->buffer->f->__get((c3->fPos + (int)1)),c3->buffer->f->__get((c3->fPos + (int)2)),c3->buffer->f->__get((c3->fPos + (int)3)),c3->buffer->f->__get((c3->fPos + (int)4)),c3->buffer->f->__get((c3->fPos + (int)5)));
            						}
            						break;
            						case (int)4: {
HXLINE(1083)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1083)									data->oPos = (data->oPos + (int)2);
HXDLIN(1083)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1083)									data->iPos = (data->iPos + (int)1);
HXDLIN(1083)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1083)									data->oPos = (data->oPos + (int)4);
HXDLIN(1083)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1083)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1083)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1083)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1083)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1083)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1083)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1083)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1083)									data->fPos = (data->fPos + (int)5);
HXDLIN(1083)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1083)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1083)									data->oPos = (data->oPos + (int)2);
HXDLIN(1083)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1083)									data->oPos = (data->oPos + (int)4);
HXDLIN(1083)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1083)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1083)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1083)									data->oPos = (data->oPos + (int)4);
HXDLIN(1083)									data->iPos = (data->iPos + (int)1);
HXDLIN(1083)									data->fPos = (data->fPos + (int)2);
HXDLIN(1083)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1083)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1083)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1083)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1083)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1083)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE(1084)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->curveTo(c4->buffer->f->__get(c4->fPos),c4->buffer->f->__get((c4->fPos + (int)1)),c4->buffer->f->__get((c4->fPos + (int)2)),c4->buffer->f->__get((c4->fPos + (int)3)));
HXLINE(1085)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->curveTo(c4->buffer->f->__get(c4->fPos),c4->buffer->f->__get((c4->fPos + (int)1)),c4->buffer->f->__get((c4->fPos + (int)2)),c4->buffer->f->__get((c4->fPos + (int)3)));
            						}
            						break;
            						case (int)5: {
HXLINE(1149)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1149)									data->oPos = (data->oPos + (int)2);
HXDLIN(1149)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1149)									data->iPos = (data->iPos + (int)1);
HXDLIN(1149)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1149)									data->oPos = (data->oPos + (int)4);
HXDLIN(1149)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1149)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1149)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1149)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1149)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1149)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1149)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1149)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1149)									data->fPos = (data->fPos + (int)5);
HXDLIN(1149)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1149)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1149)									data->oPos = (data->oPos + (int)2);
HXDLIN(1149)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1149)									data->oPos = (data->oPos + (int)4);
HXDLIN(1149)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1149)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1149)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1149)									data->oPos = (data->oPos + (int)4);
HXDLIN(1149)									data->iPos = (data->iPos + (int)1);
HXDLIN(1149)									data->fPos = (data->fPos + (int)2);
HXDLIN(1149)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1149)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1149)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1149)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1149)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1149)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE(1150)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawCircle(c5->buffer->f->__get(c5->fPos),c5->buffer->f->__get((c5->fPos + (int)1)),c5->buffer->f->__get((c5->fPos + (int)2)));
HXLINE(1151)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawCircle(c5->buffer->f->__get(c5->fPos),c5->buffer->f->__get((c5->fPos + (int)1)),c5->buffer->f->__get((c5->fPos + (int)2)));
            						}
            						break;
            						case (int)6: {
HXLINE(1155)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1155)									data->oPos = (data->oPos + (int)2);
HXDLIN(1155)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1155)									data->iPos = (data->iPos + (int)1);
HXDLIN(1155)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1155)									data->oPos = (data->oPos + (int)4);
HXDLIN(1155)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1155)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1155)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1155)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1155)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1155)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1155)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1155)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1155)									data->fPos = (data->fPos + (int)5);
HXDLIN(1155)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1155)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1155)									data->oPos = (data->oPos + (int)2);
HXDLIN(1155)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1155)									data->oPos = (data->oPos + (int)4);
HXDLIN(1155)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1155)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1155)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1155)									data->oPos = (data->oPos + (int)4);
HXDLIN(1155)									data->iPos = (data->iPos + (int)1);
HXDLIN(1155)									data->fPos = (data->fPos + (int)2);
HXDLIN(1155)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1155)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1155)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1155)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1155)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1155)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE(1156)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawEllipse(c6->buffer->f->__get(c6->fPos),c6->buffer->f->__get((c6->fPos + (int)1)),c6->buffer->f->__get((c6->fPos + (int)2)),c6->buffer->f->__get((c6->fPos + (int)3)));
HXLINE(1157)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawEllipse(c6->buffer->f->__get(c6->fPos),c6->buffer->f->__get((c6->fPos + (int)1)),c6->buffer->f->__get((c6->fPos + (int)2)),c6->buffer->f->__get((c6->fPos + (int)3)));
            						}
            						break;
            						case (int)7: {
HXLINE(1161)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1161)									data->oPos = (data->oPos + (int)2);
HXDLIN(1161)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1161)									data->iPos = (data->iPos + (int)1);
HXDLIN(1161)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1161)									data->oPos = (data->oPos + (int)4);
HXDLIN(1161)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1161)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1161)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1161)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1161)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1161)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1161)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1161)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1161)									data->fPos = (data->fPos + (int)5);
HXDLIN(1161)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1161)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1161)									data->oPos = (data->oPos + (int)2);
HXDLIN(1161)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1161)									data->oPos = (data->oPos + (int)4);
HXDLIN(1161)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1161)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1161)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1161)									data->oPos = (data->oPos + (int)4);
HXDLIN(1161)									data->iPos = (data->iPos + (int)1);
HXDLIN(1161)									data->fPos = (data->fPos + (int)2);
HXDLIN(1161)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1161)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1161)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1161)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1161)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1161)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE(1162)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRect(c7->buffer->f->__get(c7->fPos),c7->buffer->f->__get((c7->fPos + (int)1)),c7->buffer->f->__get((c7->fPos + (int)2)),c7->buffer->f->__get((c7->fPos + (int)3)));
HXLINE(1163)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRect(c7->buffer->f->__get(c7->fPos),c7->buffer->f->__get((c7->fPos + (int)1)),c7->buffer->f->__get((c7->fPos + (int)2)),c7->buffer->f->__get((c7->fPos + (int)3)));
            						}
            						break;
            						case (int)8: {
HXLINE(1167)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1167)									data->oPos = (data->oPos + (int)2);
HXDLIN(1167)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1167)									data->iPos = (data->iPos + (int)1);
HXDLIN(1167)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1167)									data->oPos = (data->oPos + (int)4);
HXDLIN(1167)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1167)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1167)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1167)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1167)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1167)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1167)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1167)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1167)									data->fPos = (data->fPos + (int)5);
HXDLIN(1167)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1167)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1167)									data->oPos = (data->oPos + (int)2);
HXDLIN(1167)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1167)									data->oPos = (data->oPos + (int)4);
HXDLIN(1167)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1167)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1167)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1167)									data->oPos = (data->oPos + (int)4);
HXDLIN(1167)									data->iPos = (data->iPos + (int)1);
HXDLIN(1167)									data->fPos = (data->fPos + (int)2);
HXDLIN(1167)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1167)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1167)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1167)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1167)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1167)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE(1168)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRoundRect(c8->buffer->f->__get(c8->fPos),c8->buffer->f->__get((c8->fPos + (int)1)),c8->buffer->f->__get((c8->fPos + (int)2)),c8->buffer->f->__get((c8->fPos + (int)3)),c8->buffer->f->__get((c8->fPos + (int)4)),c8->buffer->o->__get(c8->oPos));
HXLINE(1169)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRoundRect(c8->buffer->f->__get(c8->fPos),c8->buffer->f->__get((c8->fPos + (int)1)),c8->buffer->f->__get((c8->fPos + (int)2)),c8->buffer->f->__get((c8->fPos + (int)3)),c8->buffer->f->__get((c8->fPos + (int)4)),c8->buffer->o->__get(c8->oPos));
            						}
            						break;
            						case (int)10: {
HXLINE(1173)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1173)									data->oPos = (data->oPos + (int)2);
HXDLIN(1173)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1173)									data->iPos = (data->iPos + (int)1);
HXDLIN(1173)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1173)									data->oPos = (data->oPos + (int)4);
HXDLIN(1173)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1173)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1173)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1173)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1173)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1173)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1173)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1173)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1173)									data->fPos = (data->fPos + (int)5);
HXDLIN(1173)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1173)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1173)									data->oPos = (data->oPos + (int)2);
HXDLIN(1173)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1173)									data->oPos = (data->oPos + (int)4);
HXDLIN(1173)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1173)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1173)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1173)									data->oPos = (data->oPos + (int)4);
HXDLIN(1173)									data->iPos = (data->iPos + (int)1);
HXDLIN(1173)									data->fPos = (data->fPos + (int)2);
HXDLIN(1173)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1173)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1173)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1173)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1173)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN(1173)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE(1174)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawTriangles(( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::_Vector::IntVector)(c9->buffer->o->__get((c9->oPos + (int)1))) ),( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get((c9->oPos + (int)2))) ),c9->buffer->o->__get((c9->oPos + (int)3)));
            						}
            						break;
            						case (int)11: {
HXLINE(1101)							{
HXLINE(1101)								switch((int)(_hx_getEnumValueIndex(data->prev))){
            									case (int)0: {
HXLINE(1101)										data->oPos = (data->oPos + (int)2);
HXDLIN(1101)										data->bPos = (data->bPos + (int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1101)										data->iPos = (data->iPos + (int)1);
HXDLIN(1101)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1101)										data->oPos = (data->oPos + (int)4);
HXDLIN(1101)										data->iiPos = (data->iiPos + (int)2);
HXDLIN(1101)										data->ffPos = (data->ffPos + (int)1);
HXDLIN(1101)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1101)										data->fPos = (data->fPos + (int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1101)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1101)										data->fPos = (data->fPos + (int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1101)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1101)										data->fPos = (data->fPos + (int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1101)										data->fPos = (data->fPos + (int)5);
HXDLIN(1101)										data->oPos = (data->oPos + (int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1101)										data->oPos = (data->oPos + (int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1101)										data->oPos = (data->oPos + (int)2);
HXDLIN(1101)										data->bPos = (data->bPos + (int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1101)										data->oPos = (data->oPos + (int)4);
HXDLIN(1101)										data->iiPos = (data->iiPos + (int)2);
HXDLIN(1101)										data->ffPos = (data->ffPos + (int)1);
HXDLIN(1101)										data->fPos = (data->fPos + (int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1101)										data->oPos = (data->oPos + (int)4);
HXDLIN(1101)										data->iPos = (data->iPos + (int)1);
HXDLIN(1101)										data->fPos = (data->fPos + (int)2);
HXDLIN(1101)										data->bPos = (data->bPos + (int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1101)										data->fPos = (data->fPos + (int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1101)										data->fPos = (data->fPos + (int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1101)										data->oPos = (data->oPos + (int)1);
            									}
            									break;
            									default:{
            									}
            								}
HXLINE(1101)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            							}
HXLINE(1102)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE(1103)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE(1104)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE(1105)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            						}
            						break;
            						case (int)12: {
HXLINE(1114)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1114)									data->oPos = (data->oPos + (int)2);
HXDLIN(1114)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1114)									data->iPos = (data->iPos + (int)1);
HXDLIN(1114)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1114)									data->oPos = (data->oPos + (int)4);
HXDLIN(1114)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1114)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1114)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1114)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1114)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1114)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1114)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1114)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1114)									data->fPos = (data->fPos + (int)5);
HXDLIN(1114)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1114)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1114)									data->oPos = (data->oPos + (int)2);
HXDLIN(1114)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1114)									data->oPos = (data->oPos + (int)4);
HXDLIN(1114)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1114)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1114)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1114)									data->oPos = (data->oPos + (int)4);
HXDLIN(1114)									data->iPos = (data->iPos + (int)1);
HXDLIN(1114)									data->fPos = (data->fPos + (int)2);
HXDLIN(1114)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1114)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1114)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1114)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1114)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN(1114)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE(1115)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c10->buffer->o->__get(c10->oPos)) ),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get((c10->oPos + (int)1))) ),c10->buffer->b->__get(c10->bPos),c10->buffer->b->__get((c10->bPos + (int)1)));
            						}
            						break;
            						case (int)13: {
HXLINE(1109)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1109)									data->oPos = (data->oPos + (int)2);
HXDLIN(1109)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1109)									data->iPos = (data->iPos + (int)1);
HXDLIN(1109)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1109)									data->oPos = (data->oPos + (int)4);
HXDLIN(1109)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1109)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1109)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1109)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1109)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1109)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1109)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1109)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1109)									data->fPos = (data->fPos + (int)5);
HXDLIN(1109)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1109)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1109)									data->oPos = (data->oPos + (int)2);
HXDLIN(1109)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1109)									data->oPos = (data->oPos + (int)4);
HXDLIN(1109)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1109)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1109)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1109)									data->oPos = (data->oPos + (int)4);
HXDLIN(1109)									data->iPos = (data->iPos + (int)1);
HXDLIN(1109)									data->fPos = (data->fPos + (int)2);
HXDLIN(1109)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1109)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1109)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1109)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1109)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN(1109)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE(1110)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineGradientStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->ii->__get(c11->iiPos).StaticCast< ::Array< int > >(),c11->buffer->ff->__get(c11->ffPos).StaticCast< ::Array< Float > >(),c11->buffer->ii->__get((c11->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get((c11->oPos + (int)1))) ),c11->buffer->o->__get((c11->oPos + (int)2)),c11->buffer->o->__get((c11->oPos + (int)3)),c11->buffer->f->__get(c11->fPos));
            						}
            						break;
            						case (int)14: {
HXLINE(1119)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1119)									data->oPos = (data->oPos + (int)2);
HXDLIN(1119)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1119)									data->iPos = (data->iPos + (int)1);
HXDLIN(1119)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1119)									data->oPos = (data->oPos + (int)4);
HXDLIN(1119)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1119)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1119)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1119)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1119)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1119)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1119)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1119)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1119)									data->fPos = (data->fPos + (int)5);
HXDLIN(1119)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1119)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1119)									data->oPos = (data->oPos + (int)2);
HXDLIN(1119)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1119)									data->oPos = (data->oPos + (int)4);
HXDLIN(1119)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1119)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1119)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1119)									data->oPos = (data->oPos + (int)4);
HXDLIN(1119)									data->iPos = (data->iPos + (int)1);
HXDLIN(1119)									data->fPos = (data->fPos + (int)2);
HXDLIN(1119)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1119)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1119)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1119)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1119)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN(1119)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE(1120)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineStyle(c12->buffer->o->__get(c12->oPos),c12->buffer->i->__get(c12->iPos),c12->buffer->f->__get(c12->fPos),c12->buffer->b->__get(c12->bPos),c12->buffer->o->__get((c12->oPos + (int)1)),c12->buffer->o->__get((c12->oPos + (int)2)),c12->buffer->o->__get((c12->oPos + (int)3)),c12->buffer->f->__get((c12->fPos + (int)1)));
            						}
            						break;
            						case (int)15: {
HXLINE(1089)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1089)									data->oPos = (data->oPos + (int)2);
HXDLIN(1089)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1089)									data->iPos = (data->iPos + (int)1);
HXDLIN(1089)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1089)									data->oPos = (data->oPos + (int)4);
HXDLIN(1089)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1089)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1089)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1089)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1089)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1089)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1089)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1089)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1089)									data->fPos = (data->fPos + (int)5);
HXDLIN(1089)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1089)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1089)									data->oPos = (data->oPos + (int)2);
HXDLIN(1089)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1089)									data->oPos = (data->oPos + (int)4);
HXDLIN(1089)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1089)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1089)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1089)									data->oPos = (data->oPos + (int)4);
HXDLIN(1089)									data->iPos = (data->iPos + (int)1);
HXDLIN(1089)									data->fPos = (data->fPos + (int)2);
HXDLIN(1089)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1089)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1089)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1089)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1089)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1089)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE(1090)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->lineTo(c13->buffer->f->__get(c13->fPos),c13->buffer->f->__get((c13->fPos + (int)1)));
HXLINE(1091)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineTo(c13->buffer->f->__get(c13->fPos),c13->buffer->f->__get((c13->fPos + (int)1)));
            						}
            						break;
            						case (int)16: {
HXLINE(1095)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1095)									data->oPos = (data->oPos + (int)2);
HXDLIN(1095)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1095)									data->iPos = (data->iPos + (int)1);
HXDLIN(1095)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1095)									data->oPos = (data->oPos + (int)4);
HXDLIN(1095)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1095)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1095)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1095)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1095)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1095)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1095)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1095)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1095)									data->fPos = (data->fPos + (int)5);
HXDLIN(1095)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1095)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1095)									data->oPos = (data->oPos + (int)2);
HXDLIN(1095)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1095)									data->oPos = (data->oPos + (int)4);
HXDLIN(1095)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1095)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1095)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1095)									data->oPos = (data->oPos + (int)4);
HXDLIN(1095)									data->iPos = (data->iPos + (int)1);
HXDLIN(1095)									data->fPos = (data->fPos + (int)2);
HXDLIN(1095)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1095)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1095)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1095)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1095)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1095)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE(1096)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->moveTo(c14->buffer->f->__get(c14->fPos),c14->buffer->f->__get((c14->fPos + (int)1)));
HXLINE(1097)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->moveTo(c14->buffer->f->__get(c14->fPos),c14->buffer->f->__get((c14->fPos + (int)1)));
            						}
            						break;
            						default:{
HXLINE(1178)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1178)									data->oPos = (data->oPos + (int)2);
HXDLIN(1178)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1178)									data->iPos = (data->iPos + (int)1);
HXDLIN(1178)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1178)									data->oPos = (data->oPos + (int)4);
HXDLIN(1178)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1178)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1178)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1178)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1178)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1178)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1178)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1178)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1178)									data->fPos = (data->fPos + (int)5);
HXDLIN(1178)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1178)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1178)									data->oPos = (data->oPos + (int)2);
HXDLIN(1178)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1178)									data->oPos = (data->oPos + (int)4);
HXDLIN(1178)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1178)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1178)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1178)									data->oPos = (data->oPos + (int)4);
HXDLIN(1178)									data->iPos = (data->iPos + (int)1);
HXDLIN(1178)									data->fPos = (data->fPos + (int)2);
HXDLIN(1178)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1178)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1178)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1178)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1178)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE(1184)			if ((::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->get_length() > (int)0)) {
HXLINE(1186)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
            			}
HXLINE(1190)			if ((::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->get_length() > (int)0)) {
HXLINE(1192)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
            			}
HXLINE(1196)			data->destroy();
HXLINE(1198)			graphics->_hx___bitmap->image->dirty = true;
HXLINE(1199)			graphics->_hx___bitmap->image->version++;
            		}
HXLINE(1203)		graphics->set___dirty(false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,render,(void))

void CairoGraphics_obj::renderMask( ::openfl::display::Graphics graphics, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_1212_renderMask)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1212)		if ((graphics->_hx___commands->get_length() != (int)0)) {
HXLINE(1214)			HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(1222)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,graphics->_hx___commands);
HXLINE(1224)			{
HXLINE(1224)				HX_VARI( int,_g) = (int)0;
HXDLIN(1224)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN(1224)				while((_g < _g1->length)){
HXLINE(1224)					HX_VARI(  ::openfl::_internal::renderer::DrawCommandType,type) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN(1224)					_g = (_g + (int)1);
HXLINE(1226)					switch((int)(_hx_getEnumValueIndex(type))){
            						case (int)3: {
HXLINE(1230)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1230)									data->oPos = (data->oPos + (int)2);
HXDLIN(1230)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1230)									data->iPos = (data->iPos + (int)1);
HXDLIN(1230)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1230)									data->oPos = (data->oPos + (int)4);
HXDLIN(1230)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1230)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1230)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1230)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1230)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1230)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1230)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1230)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1230)									data->fPos = (data->fPos + (int)5);
HXDLIN(1230)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1230)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1230)									data->oPos = (data->oPos + (int)2);
HXDLIN(1230)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1230)									data->oPos = (data->oPos + (int)4);
HXDLIN(1230)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1230)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1230)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1230)									data->oPos = (data->oPos + (int)4);
HXDLIN(1230)									data->iPos = (data->iPos + (int)1);
HXDLIN(1230)									data->fPos = (data->fPos + (int)2);
HXDLIN(1230)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1230)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1230)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1230)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1230)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1230)							HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE(1231)							cairo->curveTo(c->buffer->f->__get(c->fPos),c->buffer->f->__get((c->fPos + (int)1)),c->buffer->f->__get((c->fPos + (int)2)),c->buffer->f->__get((c->fPos + (int)3)),c->buffer->f->__get((c->fPos + (int)4)),c->buffer->f->__get((c->fPos + (int)5)));
            						}
            						break;
            						case (int)4: {
HXLINE(1237)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1237)									data->oPos = (data->oPos + (int)2);
HXDLIN(1237)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1237)									data->iPos = (data->iPos + (int)1);
HXDLIN(1237)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1237)									data->oPos = (data->oPos + (int)4);
HXDLIN(1237)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1237)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1237)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1237)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1237)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1237)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1237)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1237)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1237)									data->fPos = (data->fPos + (int)5);
HXDLIN(1237)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1237)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1237)									data->oPos = (data->oPos + (int)2);
HXDLIN(1237)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1237)									data->oPos = (data->oPos + (int)4);
HXDLIN(1237)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1237)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1237)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1237)									data->oPos = (data->oPos + (int)4);
HXDLIN(1237)									data->iPos = (data->iPos + (int)1);
HXDLIN(1237)									data->fPos = (data->fPos + (int)2);
HXDLIN(1237)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1237)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1237)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1237)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1237)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1237)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE(1238)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(c1->buffer->f->__get(c1->fPos),c1->buffer->f->__get((c1->fPos + (int)1)),c1->buffer->f->__get((c1->fPos + (int)2)),c1->buffer->f->__get((c1->fPos + (int)3)));
            						}
            						break;
            						case (int)5: {
HXLINE(1244)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1244)									data->oPos = (data->oPos + (int)2);
HXDLIN(1244)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1244)									data->iPos = (data->iPos + (int)1);
HXDLIN(1244)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1244)									data->oPos = (data->oPos + (int)4);
HXDLIN(1244)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1244)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1244)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1244)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1244)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1244)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1244)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1244)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1244)									data->fPos = (data->fPos + (int)5);
HXDLIN(1244)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1244)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1244)									data->oPos = (data->oPos + (int)2);
HXDLIN(1244)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1244)									data->oPos = (data->oPos + (int)4);
HXDLIN(1244)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1244)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1244)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1244)									data->oPos = (data->oPos + (int)4);
HXDLIN(1244)									data->iPos = (data->iPos + (int)1);
HXDLIN(1244)									data->fPos = (data->fPos + (int)2);
HXDLIN(1244)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1244)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1244)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1244)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1244)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1244)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE(1245)							cairo->arc(c2->buffer->f->__get(c2->fPos),c2->buffer->f->__get((c2->fPos + (int)1)),c2->buffer->f->__get((c2->fPos + (int)2)),(int)0,(::Math_obj::PI * (int)2));
            						}
            						break;
            						case (int)6: {
HXLINE(1249)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1249)									data->oPos = (data->oPos + (int)2);
HXDLIN(1249)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1249)									data->iPos = (data->iPos + (int)1);
HXDLIN(1249)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1249)									data->oPos = (data->oPos + (int)4);
HXDLIN(1249)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1249)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1249)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1249)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1249)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1249)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1249)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1249)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1249)									data->fPos = (data->fPos + (int)5);
HXDLIN(1249)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1249)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1249)									data->oPos = (data->oPos + (int)2);
HXDLIN(1249)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1249)									data->oPos = (data->oPos + (int)4);
HXDLIN(1249)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1249)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1249)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1249)									data->oPos = (data->oPos + (int)4);
HXDLIN(1249)									data->iPos = (data->iPos + (int)1);
HXDLIN(1249)									data->fPos = (data->fPos + (int)2);
HXDLIN(1249)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1249)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1249)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1249)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1249)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1249)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE(1251)							HX_VARI( Float,x) = c3->buffer->f->__get(c3->fPos);
HXLINE(1252)							HX_VARI( Float,y) = c3->buffer->f->__get((c3->fPos + (int)1));
HXLINE(1253)							HX_VARI( Float,width) = c3->buffer->f->__get((c3->fPos + (int)2));
HXLINE(1254)							HX_VARI( Float,height) = c3->buffer->f->__get((c3->fPos + (int)3));
HXLINE(1256)							x = x;
HXLINE(1257)							y = y;
HXLINE(1259)							HX_VARI( Float,ox) = (((Float)width / (Float)(int)2) * ((Float).5522848));
HXDLIN(1259)							HX_VARI( Float,oy) = (((Float)height / (Float)(int)2) * ((Float).5522848));
HXDLIN(1259)							HX_VARI( Float,xe) = (x + width);
HXDLIN(1259)							HX_VARI( Float,ye) = (y + height);
HXDLIN(1259)							HX_VARI( Float,xm) = (x + ((Float)width / (Float)(int)2));
HXDLIN(1259)							HX_VARI( Float,ym) = (y + ((Float)height / (Float)(int)2));
HXLINE(1269)							cairo->moveTo(x,ym);
HXLINE(1270)							cairo->curveTo(x,(ym - oy),(xm - ox),y,xm,y);
HXLINE(1271)							cairo->curveTo((xm + ox),y,xe,(ym - oy),xe,ym);
HXLINE(1272)							cairo->curveTo(xe,(ym + oy),(xm + ox),ye,xm,ye);
HXLINE(1273)							cairo->curveTo((xm - ox),ye,x,(ym + oy),x,ym);
            						}
            						break;
            						case (int)7: {
HXLINE(1278)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1278)									data->oPos = (data->oPos + (int)2);
HXDLIN(1278)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1278)									data->iPos = (data->iPos + (int)1);
HXDLIN(1278)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1278)									data->oPos = (data->oPos + (int)4);
HXDLIN(1278)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1278)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1278)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1278)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1278)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1278)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1278)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1278)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1278)									data->fPos = (data->fPos + (int)5);
HXDLIN(1278)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1278)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1278)									data->oPos = (data->oPos + (int)2);
HXDLIN(1278)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1278)									data->oPos = (data->oPos + (int)4);
HXDLIN(1278)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1278)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1278)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1278)									data->oPos = (data->oPos + (int)4);
HXDLIN(1278)									data->iPos = (data->iPos + (int)1);
HXDLIN(1278)									data->fPos = (data->fPos + (int)2);
HXDLIN(1278)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1278)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1278)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1278)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1278)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1278)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE(1279)							cairo->rectangle(c4->buffer->f->__get(c4->fPos),c4->buffer->f->__get((c4->fPos + (int)1)),c4->buffer->f->__get((c4->fPos + (int)2)),c4->buffer->f->__get((c4->fPos + (int)3)));
            						}
            						break;
            						case (int)8: {
HXLINE(1283)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1283)									data->oPos = (data->oPos + (int)2);
HXDLIN(1283)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1283)									data->iPos = (data->iPos + (int)1);
HXDLIN(1283)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1283)									data->oPos = (data->oPos + (int)4);
HXDLIN(1283)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1283)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1283)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1283)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1283)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1283)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1283)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1283)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1283)									data->fPos = (data->fPos + (int)5);
HXDLIN(1283)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1283)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1283)									data->oPos = (data->oPos + (int)2);
HXDLIN(1283)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1283)									data->oPos = (data->oPos + (int)4);
HXDLIN(1283)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1283)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1283)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1283)									data->oPos = (data->oPos + (int)4);
HXDLIN(1283)									data->iPos = (data->iPos + (int)1);
HXDLIN(1283)									data->fPos = (data->fPos + (int)2);
HXDLIN(1283)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1283)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1283)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1283)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1283)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1283)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE(1284)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::drawRoundRect(c5->buffer->f->__get(c5->fPos),c5->buffer->f->__get((c5->fPos + (int)1)),c5->buffer->f->__get((c5->fPos + (int)2)),c5->buffer->f->__get((c5->fPos + (int)3)),c5->buffer->f->__get((c5->fPos + (int)4)),c5->buffer->o->__get(c5->oPos));
            						}
            						break;
            						case (int)15: {
HXLINE(1288)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1288)									data->oPos = (data->oPos + (int)2);
HXDLIN(1288)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1288)									data->iPos = (data->iPos + (int)1);
HXDLIN(1288)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1288)									data->oPos = (data->oPos + (int)4);
HXDLIN(1288)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1288)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1288)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1288)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1288)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1288)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1288)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1288)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1288)									data->fPos = (data->fPos + (int)5);
HXDLIN(1288)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1288)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1288)									data->oPos = (data->oPos + (int)2);
HXDLIN(1288)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1288)									data->oPos = (data->oPos + (int)4);
HXDLIN(1288)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1288)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1288)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1288)									data->oPos = (data->oPos + (int)4);
HXDLIN(1288)									data->iPos = (data->iPos + (int)1);
HXDLIN(1288)									data->fPos = (data->fPos + (int)2);
HXDLIN(1288)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1288)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1288)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1288)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1288)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1288)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE(1289)							cairo->lineTo(c6->buffer->f->__get(c6->fPos),c6->buffer->f->__get((c6->fPos + (int)1)));
            						}
            						break;
            						case (int)16: {
HXLINE(1295)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1295)									data->oPos = (data->oPos + (int)2);
HXDLIN(1295)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1295)									data->iPos = (data->iPos + (int)1);
HXDLIN(1295)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1295)									data->oPos = (data->oPos + (int)4);
HXDLIN(1295)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1295)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1295)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1295)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1295)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1295)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1295)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1295)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1295)									data->fPos = (data->fPos + (int)5);
HXDLIN(1295)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1295)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1295)									data->oPos = (data->oPos + (int)2);
HXDLIN(1295)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1295)									data->oPos = (data->oPos + (int)4);
HXDLIN(1295)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1295)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1295)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1295)									data->oPos = (data->oPos + (int)4);
HXDLIN(1295)									data->iPos = (data->iPos + (int)1);
HXDLIN(1295)									data->fPos = (data->fPos + (int)2);
HXDLIN(1295)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1295)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1295)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1295)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1295)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1295)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE(1296)							cairo->moveTo(c7->buffer->f->__get(c7->fPos),c7->buffer->f->__get((c7->fPos + (int)1)));
            						}
            						break;
            						default:{
HXLINE(1302)							switch((int)(_hx_getEnumValueIndex(data->prev))){
            								case (int)0: {
HXLINE(1302)									data->oPos = (data->oPos + (int)2);
HXDLIN(1302)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1302)									data->iPos = (data->iPos + (int)1);
HXDLIN(1302)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1302)									data->oPos = (data->oPos + (int)4);
HXDLIN(1302)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1302)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1302)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1302)									data->fPos = (data->fPos + (int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1302)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1302)									data->fPos = (data->fPos + (int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1302)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1302)									data->fPos = (data->fPos + (int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(1302)									data->fPos = (data->fPos + (int)5);
HXDLIN(1302)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1302)									data->oPos = (data->oPos + (int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(1302)									data->oPos = (data->oPos + (int)2);
HXDLIN(1302)									data->bPos = (data->bPos + (int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(1302)									data->oPos = (data->oPos + (int)4);
HXDLIN(1302)									data->iiPos = (data->iiPos + (int)2);
HXDLIN(1302)									data->ffPos = (data->ffPos + (int)1);
HXDLIN(1302)									data->fPos = (data->fPos + (int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(1302)									data->oPos = (data->oPos + (int)4);
HXDLIN(1302)									data->iPos = (data->iPos + (int)1);
HXDLIN(1302)									data->fPos = (data->fPos + (int)2);
HXDLIN(1302)									data->bPos = (data->bPos + (int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1302)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(1302)									data->fPos = (data->fPos + (int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1302)									data->oPos = (data->oPos + (int)1);
            								}
            								break;
            								default:{
            								}
            							}
HXLINE(1302)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE(1308)			data->destroy();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,renderMask,(void))


CairoGraphics_obj::CairoGraphics_obj()
{
}

bool CairoGraphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { outValue = SIN45; return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { outValue = TAN22; return true; }
		if (HX_FIELD_EQ(inName,"cairo") ) { outValue = cairo; return true; }
		if (HX_FIELD_EQ(inName,"isCCW") ) { outValue = isCCW_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { outValue = bounds; return true; }
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { outValue = hasFill; return true; }
		if (HX_FIELD_EQ(inName,"endFill") ) { outValue = endFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hitTest") ) { outValue = hitTest_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { outValue = graphics; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { outValue = hasStroke; return true; }
		if (HX_FIELD_EQ(inName,"closePath") ) { outValue = closePath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endStroke") ) { outValue = endStroke_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { outValue = bitmapFill; return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { outValue = hitTesting; return true; }
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fillPattern") ) { outValue = fillPattern; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { outValue = bitmapRepeat; return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { outValue = fillCommands; return true; }
		if (HX_FIELD_EQ(inName,"normalizeUVT") ) { outValue = normalizeUVT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"playCommands") ) { outValue = playCommands_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { outValue = pendingMatrix; return true; }
		if (HX_FIELD_EQ(inName,"strokePattern") ) { outValue = strokePattern; return true; }
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { outValue = drawRoundRect_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"allowSmoothing") ) { outValue = allowSmoothing; return true; }
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { outValue = strokeCommands; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"quadraticCurveTo") ) { outValue = quadraticCurveTo_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillPatternMatrix") ) { outValue = fillPatternMatrix; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createImagePattern") ) { outValue = createImagePattern_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { outValue = inversePendingMatrix; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createGradientPattern") ) { outValue = createGradientPattern_dyn(); return true; }
	}
	return false;
}

bool CairoGraphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { SIN45=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { TAN22=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"cairo") ) { cairo=ioValue.Cast<  ::lime::graphics::cairo::Cairo >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { hasFill=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=ioValue.Cast<  ::openfl::display::Graphics >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { hasStroke=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { bitmapFill=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { hitTesting=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fillPattern") ) { fillPattern=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { bitmapRepeat=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { fillCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { pendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		if (HX_FIELD_EQ(inName,"strokePattern") ) { strokePattern=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"allowSmoothing") ) { allowSmoothing=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { strokeCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillPatternMatrix") ) { fillPatternMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { inversePendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoGraphics_obj_sMemberStorageInfo = 0;
static hx::StaticInfo CairoGraphics_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &CairoGraphics_obj::SIN45,HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa")},
	{hx::fsFloat,(void *) &CairoGraphics_obj::TAN22,HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88")},
	{hx::fsBool,(void *) &CairoGraphics_obj::allowSmoothing,HX_HCSTRING("allowSmoothing","\xab","\xb7","\x66","\x68")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &CairoGraphics_obj::bitmapFill,HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35")},
	{hx::fsBool,(void *) &CairoGraphics_obj::bitmapRepeat,HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &CairoGraphics_obj::bounds,HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(void *) &CairoGraphics_obj::cairo,HX_HCSTRING("cairo","\x88","\x30","\x19","\x41")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CairoGraphics_obj::fillCommands,HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CairoGraphics_obj::fillPattern,HX_HCSTRING("fillPattern","\x0d","\x86","\x12","\x35")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::fillPatternMatrix,HX_HCSTRING("fillPatternMatrix","\x2e","\xb8","\xae","\x97")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(void *) &CairoGraphics_obj::graphics,HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hasFill,HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hasStroke,HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hitTesting,HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::inversePendingMatrix,HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::pendingMatrix,HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CairoGraphics_obj::strokeCommands,HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CairoGraphics_obj::strokePattern,HX_HCSTRING("strokePattern","\x78","\xe1","\x21","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void CairoGraphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::SIN45,"SIN45");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::TAN22,"TAN22");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::allowSmoothing,"allowSmoothing");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bitmapFill,"bitmapFill");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bounds,"bounds");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::cairo,"cairo");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillCommands,"fillCommands");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillPattern,"fillPattern");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillPatternMatrix,"fillPatternMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::graphics,"graphics");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hasFill,"hasFill");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hasStroke,"hasStroke");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hitTesting,"hitTesting");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::strokeCommands,"strokeCommands");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::strokePattern,"strokePattern");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoGraphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::SIN45,"SIN45");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::TAN22,"TAN22");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::allowSmoothing,"allowSmoothing");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bitmapFill,"bitmapFill");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bounds,"bounds");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::cairo,"cairo");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillCommands,"fillCommands");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillPattern,"fillPattern");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillPatternMatrix,"fillPatternMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::graphics,"graphics");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hasFill,"hasFill");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hasStroke,"hasStroke");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hitTesting,"hitTesting");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::strokeCommands,"strokeCommands");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::strokePattern,"strokePattern");
};

#endif

hx::Class CairoGraphics_obj::__mClass;

static ::String CairoGraphics_obj_sStaticFields[] = {
	HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa"),
	HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88"),
	HX_HCSTRING("allowSmoothing","\xab","\xb7","\x66","\x68"),
	HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35"),
	HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("cairo","\x88","\x30","\x19","\x41"),
	HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2"),
	HX_HCSTRING("fillPattern","\x0d","\x86","\x12","\x35"),
	HX_HCSTRING("fillPatternMatrix","\x2e","\xb8","\xae","\x97"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12"),
	HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52"),
	HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19"),
	HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb"),
	HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5"),
	HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67"),
	HX_HCSTRING("strokePattern","\x78","\xe1","\x21","\x7e"),
	HX_HCSTRING("closePath","\x7d","\x65","\x20","\x14"),
	HX_HCSTRING("createGradientPattern","\xa4","\xee","\x44","\xf6"),
	HX_HCSTRING("createImagePattern","\x51","\xbd","\x5d","\xfb"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("endStroke","\xf3","\x01","\x17","\x51"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("isCCW","\x0d","\x84","\x49","\xc1"),
	HX_HCSTRING("normalizeUVT","\x66","\x09","\x2f","\x47"),
	HX_HCSTRING("playCommands","\xdc","\xae","\xee","\x49"),
	HX_HCSTRING("quadraticCurveTo","\x12","\x48","\xc3","\x82"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	::String(null())
};

void CairoGraphics_obj::__register()
{
	hx::Object *dummy = new CairoGraphics_obj;
	CairoGraphics_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoGraphics","\x72","\x72","\xef","\x3c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoGraphics_obj::__GetStatic;
	__mClass->mSetStaticField = &CairoGraphics_obj::__SetStatic;
	__mClass->mMarkFunc = CairoGraphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoGraphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoGraphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoGraphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoGraphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoGraphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CairoGraphics_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7c423d109b848e15_38_boot)
HXLINE(  38)		SIN45 = ((Float)0.70710678118654752440084436210485);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c423d109b848e15_39_boot)
HXLINE(  39)		TAN22 = ((Float)0.4142135623730950488016887242097);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_46_boot)
HXLINE(  46)		fillCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_7c423d109b848e15_55_boot)
HXLINE(  55)		strokeCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
