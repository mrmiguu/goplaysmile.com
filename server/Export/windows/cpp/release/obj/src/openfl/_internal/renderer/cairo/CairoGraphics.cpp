// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoGraphics_obj::__construct() { }

Dynamic CairoGraphics_obj::__CreateEmpty() { return new CairoGraphics_obj; }

hx::ObjectPtr< CairoGraphics_obj > CairoGraphics_obj::__new()
{
	hx::ObjectPtr< CairoGraphics_obj > _hx_result = new CairoGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CairoGraphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoGraphics_obj > _hx_result = new CairoGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float CairoGraphics_obj::SIN45;

Float CairoGraphics_obj::TAN22;

Bool CairoGraphics_obj::allowSmoothing;

 ::openfl::display::BitmapData CairoGraphics_obj::bitmapFill;

Bool CairoGraphics_obj::bitmapRepeat;

 ::openfl::geom::Rectangle CairoGraphics_obj::bounds;

 ::lime::graphics::cairo::Cairo CairoGraphics_obj::cairo;

 ::openfl::_internal::renderer::DrawCommandBuffer CairoGraphics_obj::fillCommands;

 ::Dynamic CairoGraphics_obj::fillPattern;

 ::openfl::geom::Matrix CairoGraphics_obj::fillPatternMatrix;

 ::openfl::display::Graphics CairoGraphics_obj::graphics;

Bool CairoGraphics_obj::hasFill;

Bool CairoGraphics_obj::hasStroke;

Bool CairoGraphics_obj::hitTesting;

 ::openfl::geom::Matrix CairoGraphics_obj::inversePendingMatrix;

 ::openfl::geom::Matrix CairoGraphics_obj::pendingMatrix;

 ::openfl::_internal::renderer::DrawCommandBuffer CairoGraphics_obj::strokeCommands;

 ::Dynamic CairoGraphics_obj::strokePattern;

void CairoGraphics_obj::closePath(hx::Null< Bool >  __o_strokeBefore){
Bool strokeBefore = __o_strokeBefore.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","closePath",0x6dffa481,"openfl._internal.renderer.cairo.CairoGraphics.closePath","openfl/_internal/renderer/cairo/CairoGraphics.hx",59,0x744ae94c)
            	HX_STACK_ARG(strokeBefore,"strokeBefore")
HXLINE(  61)		Bool _hx_tmp = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern );
HXDLIN(  61)		if (_hx_tmp) {
HXLINE(  63)			return;
            		}
HXLINE(  67)		if (!(strokeBefore)) {
HXLINE(  69)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            		}
HXLINE(  73)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern);
HXLINE(  74)		Bool _hx_tmp1 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN(  74)		if (_hx_tmp1) {
HXLINE(  74)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->strokePreserve();
            		}
HXLINE(  76)		if (strokeBefore) {
HXLINE(  78)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            		}
HXLINE(  82)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CairoGraphics_obj,closePath,(void))

 ::Dynamic CairoGraphics_obj::createGradientPattern( ::Dynamic type,::cpp::VirtualArray colors,::cpp::VirtualArray alphas,::cpp::VirtualArray ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","createGradientPattern",0x9888a3a8,"openfl._internal.renderer.cairo.CairoGraphics.createGradientPattern","openfl/_internal/renderer/cairo/CairoGraphics.hx",87,0x744ae94c)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE(  89)		HX_VARI(  ::Dynamic,pattern) = null();
HXLINE(  91)		 ::Dynamic _hx_switch_0 = type;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 106)			Bool _hx_tmp = hx::IsNull( matrix );
HXDLIN( 106)			if (_hx_tmp) {
HXLINE( 106)				matrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            			}
HXLINE( 108)			HX_VARI(  ::openfl::geom::Point,point1) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)-819.2),(int)0));
HXLINE( 109)			HX_VARI(  ::openfl::geom::Point,point2) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)819.2),(int)0));
HXLINE( 111)			hx::AddEq(point1->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 112)			hx::AddEq(point2->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 113)			hx::AddEq(point1->y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 114)			hx::AddEq(point2->y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 116)			pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createLinear(point1->x,point1->y,point2->x,point2->y);
HXLINE( 104)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(  95)			Bool _hx_tmp1 = hx::IsNull( matrix );
HXDLIN(  95)			if (_hx_tmp1) {
HXLINE(  95)				matrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            			}
HXLINE(  97)			HX_VARI(  ::openfl::geom::Point,point) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)1638.4),(int)0));
HXLINE(  99)			HX_VARI( Float,x) = (matrix->tx + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 100)			HX_VARI( Float,y) = (matrix->ty + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 102)			Float _hx_tmp2 = ((Float)(point->x - matrix->tx) / (Float)(int)2);
HXDLIN( 102)			Float _hx_tmp3 = ::Math_obj::abs(_hx_tmp2);
HXDLIN( 102)			pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRadial(x,y,(int)0,x,y,_hx_tmp3);
HXLINE(  93)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE( 120)		{
HXLINE( 120)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 120)			HX_VARI( Int,_g) = colors->get_length();
HXDLIN( 120)			while((_g1 < _g)){
HXLINE( 120)				HX_VARI( Int,i) = _g1++;
HXLINE( 122)				HX_VARI( Int,rgb) = ( (Int)(colors->__get(i)) );
HXLINE( 123)				HX_VARI( Float,alpha) = ( (Float)(alphas->__get(i)) );
HXLINE( 124)				HX_VARI( Float,r) = ((Float)hx::UShr(((int)rgb & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 125)				HX_VARI( Float,g) = ((Float)hx::UShr(((int)rgb & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 126)				HX_VARI( Float,b) = ((Float)((int)rgb & (int)(int)255) / (Float)(int)255);
HXLINE( 128)				HX_VARI( Float,ratio) = ((Float)ratios->__get(i) / (Float)(int)255);
HXLINE( 129)				Bool _hx_tmp4 = (ratio < (int)0);
HXDLIN( 129)				if (_hx_tmp4) {
HXLINE( 129)					ratio = (int)0;
            				}
HXLINE( 130)				Bool _hx_tmp5 = (ratio > (int)1);
HXDLIN( 130)				if (_hx_tmp5) {
HXLINE( 130)					ratio = (int)1;
            				}
HXLINE( 132)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::addColorStopRGBA(pattern,ratio,r,g,b,alpha);
            			}
            		}
HXLINE( 136)		HX_VARI(  ::lime::math::Matrix3,mat) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::get_matrix(pattern);
HXLINE( 138)		mat->tx = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 139)		mat->ty = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 141)		::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(pattern,mat);
HXLINE( 143)		return pattern;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(CairoGraphics_obj,createGradientPattern,return )

 ::Dynamic CairoGraphics_obj::createImagePattern( ::openfl::display::BitmapData bitmapFill, ::openfl::geom::Matrix matrix,Bool bitmapRepeat,Bool smooth){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","createImagePattern",0x42487dcd,"openfl._internal.renderer.cairo.CairoGraphics.createImagePattern","openfl/_internal/renderer/cairo/CairoGraphics.hx",148,0x744ae94c)
            	HX_STACK_ARG(bitmapFill,"bitmapFill")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(bitmapRepeat,"bitmapRepeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE( 150)		 ::Dynamic _hx_tmp = bitmapFill->getSurface();
HXDLIN( 150)		HX_VARI(  ::Dynamic,pattern) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(_hx_tmp);
HXLINE( 151)		Int _hx_tmp1;
HXDLIN( 151)		Bool _hx_tmp2;
HXDLIN( 151)		if (smooth) {
HXLINE( 151)			_hx_tmp2 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::allowSmoothing;
            		}
            		else {
HXLINE( 151)			_hx_tmp2 = false;
            		}
HXDLIN( 151)		if (_hx_tmp2) {
HXLINE( 151)			_hx_tmp1 = (int)1;
            		}
            		else {
HXLINE( 151)			_hx_tmp1 = (int)3;
            		}
HXDLIN( 151)		::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp1);
HXLINE( 153)		if (bitmapRepeat) {
HXLINE( 155)			::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_extend(pattern,(int)1);
            		}
HXLINE( 159)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = matrix;
HXLINE( 161)		return pattern;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CairoGraphics_obj,createImagePattern,return )

void CairoGraphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","drawRoundRect",0xa42fd4f2,"openfl._internal.renderer.cairo.CairoGraphics.drawRoundRect","openfl/_internal/renderer/cairo/CairoGraphics.hx",166,0x744ae94c)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(ellipseWidth,"ellipseWidth")
            	HX_STACK_ARG(ellipseHeight,"ellipseHeight")
HXLINE( 168)		Bool _hx_tmp = hx::IsNull( ellipseHeight );
HXDLIN( 168)		if (_hx_tmp) {
HXLINE( 168)			ellipseHeight = ellipseWidth;
            		}
HXLINE( 170)		hx::MultEq(ellipseWidth,((Float)0.5));
HXLINE( 171)		hx::MultEq(ellipseHeight,((Float)0.5));
HXLINE( 173)		Bool _hx_tmp1 = (ellipseWidth > ((Float)width / (Float)(int)2));
HXDLIN( 173)		if (_hx_tmp1) {
HXLINE( 173)			ellipseWidth = ((Float)width / (Float)(int)2);
            		}
HXLINE( 174)		Bool _hx_tmp2 = hx::IsGreater( ellipseHeight,((Float)height / (Float)(int)2) );
HXDLIN( 174)		if (_hx_tmp2) {
HXLINE( 174)			ellipseHeight = ((Float)height / (Float)(int)2);
            		}
HXLINE( 176)		HX_VARI( Float,xe) = (x + width);
HXDLIN( 176)		HX_VARI( Float,ye) = (y + height);
HXDLIN( 176)		HX_VARI( Float,cx1) = (-(ellipseWidth) + (ellipseWidth * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::SIN45));
HXDLIN( 176)		HX_VARI( Float,cx2) = (-(ellipseWidth) + (ellipseWidth * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::TAN22));
HXDLIN( 176)		HX_VARI( Float,cy1) = (-(ellipseHeight) + (ellipseHeight * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::SIN45));
HXDLIN( 176)		HX_VARI( Float,cy2) = (-(ellipseHeight) + (ellipseHeight * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::TAN22));
HXLINE( 183)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(xe,(ye - ellipseHeight));
HXLINE( 184)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(xe,(ye + cy2),(xe + cx1),(ye + cy1));
HXLINE( 185)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((xe + cx2),ye,(xe - ellipseWidth),ye);
HXLINE( 186)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((x + ellipseWidth),ye);
HXLINE( 187)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((x - cx2),ye,(x - cx1),(ye + cy1));
HXLINE( 188)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(x,(ye + cy2),x,(ye - ellipseHeight));
HXLINE( 189)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x,(y + ellipseHeight));
HXLINE( 190)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(x,(y - cy2),(x - cx1),(y - cy1));
HXLINE( 191)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((x - cx2),y,(x + ellipseWidth),y);
HXLINE( 192)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((xe - ellipseWidth),y);
HXLINE( 193)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((xe + cx2),y,(xe + cx1),(y - cy1));
HXLINE( 194)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(xe,(y - cy2),xe,(y + ellipseHeight));
HXLINE( 195)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(xe,(ye - ellipseHeight));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CairoGraphics_obj,drawRoundRect,(void))

void CairoGraphics_obj::endFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","endFill",0x21233e02,"openfl._internal.renderer.cairo.CairoGraphics.endFill","openfl/_internal/renderer/cairo/CairoGraphics.hx",200,0x744ae94c)
HXLINE( 202)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 203)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::playCommands(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands,false);
HXLINE( 204)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,endFill,(void))

void CairoGraphics_obj::endStroke(){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","endStroke",0xaaf640f7,"openfl._internal.renderer.cairo.CairoGraphics.endStroke","openfl/_internal/renderer/cairo/CairoGraphics.hx",209,0x744ae94c)
HXLINE( 211)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 212)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::playCommands(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands,true);
HXLINE( 213)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 214)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,endStroke,(void))

Bool CairoGraphics_obj::hitTest( ::openfl::display::Graphics graphics,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","hitTest",0xddc21649,"openfl._internal.renderer.cairo.CairoGraphics.hitTest","openfl/_internal/renderer/cairo/CairoGraphics.hx",219,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 222)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics = graphics;
HXLINE( 223)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = graphics->_hx___bounds;
HXLINE( 225)		Bool _hx_tmp;
HXDLIN( 225)		Bool _hx_tmp1;
HXDLIN( 225)		Bool _hx_tmp2;
HXDLIN( 225)		Bool _hx_tmp3;
HXDLIN( 225)		Int _hx_tmp4 = graphics->_hx___commands->get_length();
HXDLIN( 225)		if ((_hx_tmp4 != (int)0)) {
HXLINE( 225)			_hx_tmp3 = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds );
            		}
            		else {
HXLINE( 225)			_hx_tmp3 = true;
            		}
HXDLIN( 225)		if (!(_hx_tmp3)) {
HXLINE( 225)			_hx_tmp2 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width == (int)0);
            		}
            		else {
HXLINE( 225)			_hx_tmp2 = true;
            		}
HXDLIN( 225)		if (!(_hx_tmp2)) {
HXLINE( 225)			_hx_tmp1 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height == (int)0);
            		}
            		else {
HXLINE( 225)			_hx_tmp1 = true;
            		}
HXDLIN( 225)		if (!(_hx_tmp1)) {
HXLINE( 225)			_hx_tmp = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->contains(x,y));
            		}
            		else {
HXLINE( 225)			_hx_tmp = true;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 227)			return false;
            		}
            		else {
HXLINE( 231)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting = true;
HXLINE( 233)			hx::SubEq(x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x);
HXLINE( 234)			hx::SubEq(y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y);
HXLINE( 236)			Bool _hx_tmp5 = hx::IsNull( graphics->_hx___cairo );
HXDLIN( 236)			if (_hx_tmp5) {
HXLINE( 238)				Int _hx_tmp6 = ::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width);
HXDLIN( 238)				Int _hx_tmp7 = ::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height);
HXDLIN( 238)				HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp6,_hx_tmp7,true,(int)0);
HXLINE( 239)				HX_VARI(  ::Dynamic,surface) = bitmap->getSurface();
HXLINE( 240)				graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__new(surface);
            			}
HXLINE( 245)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo = graphics->_hx___cairo;
HXLINE( 247)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
HXLINE( 248)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
HXLINE( 250)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE( 251)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
HXLINE( 253)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = null();
HXLINE( 254)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = null();
HXLINE( 256)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 258)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE( 260)			{
HXLINE( 260)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 260)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN( 260)				while((_g < _g1->length)){
HXLINE( 260)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 260)					++_g;
HXLINE( 262)					Int _hx_tmp8 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 262)					switch((int)(_hx_tmp8)){
            						case (int)0: case (int)1: case (int)2: {
HXLINE( 328)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE( 329)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE( 331)							Bool _hx_tmp9;
HXDLIN( 331)							Bool _hx_tmp10 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 331)							if (_hx_tmp10) {
HXLINE( 331)								_hx_tmp9 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            							}
            							else {
HXLINE( 331)								_hx_tmp9 = false;
            							}
HXDLIN( 331)							if (_hx_tmp9) {
HXLINE( 333)								data->destroy();
HXLINE( 334)								return true;
            							}
HXLINE( 338)							Bool _hx_tmp11;
HXDLIN( 338)							Bool _hx_tmp12 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 338)							if (_hx_tmp12) {
HXLINE( 338)								_hx_tmp11 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            							}
            							else {
HXLINE( 338)								_hx_tmp11 = false;
            							}
HXDLIN( 338)							if (_hx_tmp11) {
HXLINE( 340)								data->destroy();
HXLINE( 341)								return true;
            							}
HXLINE( 345)							if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn() )) {
HXLINE( 347)								{
HXLINE( 347)									Int _hx_tmp13 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 347)									switch((int)(_hx_tmp13)){
            										case (int)0: {
HXLINE( 347)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 347)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 347)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 347)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 347)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 347)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 347)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 347)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 347)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE( 347)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE( 347)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE( 347)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE( 347)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 347)											hx::AddEq(data->fPos,(int)5);
HXDLIN( 347)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE( 347)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE( 347)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 347)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)13: {
HXLINE( 347)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 347)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 347)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 347)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)14: {
HXLINE( 347)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 347)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 347)											hx::AddEq(data->fPos,(int)2);
HXDLIN( 347)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE( 347)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)16: {
HXLINE( 347)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE( 347)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 347)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 347)								HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 348)								 ::openfl::display::BitmapData _hx_tmp14 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 348)								 ::openfl::geom::Matrix _hx_tmp15 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 348)								Bool _hx_tmp16 = c->buffer->b->__get(c->bPos);
HXDLIN( 348)								Bool _hx_tmp17 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 348)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginBitmapFill(_hx_tmp14,_hx_tmp15,_hx_tmp16,_hx_tmp17);
HXLINE( 349)								 ::openfl::display::BitmapData _hx_tmp18 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 349)								 ::openfl::geom::Matrix _hx_tmp19 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 349)								Bool _hx_tmp20 = c->buffer->b->__get(c->bPos);
HXDLIN( 349)								Bool _hx_tmp21 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 349)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginBitmapFill(_hx_tmp18,_hx_tmp19,_hx_tmp20,_hx_tmp21);
            							}
            							else {
HXLINE( 351)								if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn() )) {
HXLINE( 353)									{
HXLINE( 353)										Int _hx_tmp22 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 353)										switch((int)(_hx_tmp22)){
            											case (int)0: {
HXLINE( 353)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 353)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 353)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 353)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 353)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 353)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 353)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 353)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 353)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE( 353)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE( 353)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE( 353)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE( 353)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)8: {
HXLINE( 353)												hx::AddEq(data->fPos,(int)5);
HXDLIN( 353)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE( 353)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)11: {
            											}
            											break;
            											case (int)12: {
HXLINE( 353)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 353)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)13: {
HXLINE( 353)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 353)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 353)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 353)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)14: {
HXLINE( 353)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 353)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 353)												hx::AddEq(data->fPos,(int)2);
HXDLIN( 353)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE( 353)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)16: {
HXLINE( 353)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE( 353)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 353)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 353)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 354)									Int _hx_tmp23 = (c1->iiPos + (int)1);
HXDLIN( 354)									Int _hx_tmp24 = (c1->oPos + (int)1);
HXDLIN( 354)									Int _hx_tmp25 = (c1->oPos + (int)2);
HXDLIN( 354)									Int _hx_tmp26 = (c1->oPos + (int)3);
HXDLIN( 354)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp23).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp24)) ),c1->buffer->o->__get(_hx_tmp25),c1->buffer->o->__get(_hx_tmp26),c1->buffer->f->__get(c1->fPos));
HXLINE( 355)									Int _hx_tmp27 = (c1->iiPos + (int)1);
HXDLIN( 355)									Int _hx_tmp28 = (c1->oPos + (int)1);
HXDLIN( 355)									Int _hx_tmp29 = (c1->oPos + (int)2);
HXDLIN( 355)									Int _hx_tmp30 = (c1->oPos + (int)3);
HXDLIN( 355)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp27).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp28)) ),c1->buffer->o->__get(_hx_tmp29),c1->buffer->o->__get(_hx_tmp30),c1->buffer->f->__get(c1->fPos));
            								}
            								else {
HXLINE( 359)									{
HXLINE( 359)										Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 359)										switch((int)(_hx_tmp31)){
            											case (int)0: {
HXLINE( 359)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 359)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 359)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 359)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 359)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 359)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 359)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 359)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE( 359)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE( 359)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE( 359)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE( 359)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)8: {
HXLINE( 359)												hx::AddEq(data->fPos,(int)5);
HXDLIN( 359)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE( 359)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)11: {
            											}
            											break;
            											case (int)12: {
HXLINE( 359)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 359)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)13: {
HXLINE( 359)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 359)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 359)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)14: {
HXLINE( 359)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 359)												hx::AddEq(data->fPos,(int)2);
HXDLIN( 359)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE( 359)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)16: {
HXLINE( 359)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE( 359)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 359)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 359)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 360)									Int _hx_tmp32 = c2->buffer->i->__get(c2->iPos);
HXDLIN( 360)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginFill(_hx_tmp32,(int)1);
HXLINE( 361)									Int _hx_tmp33 = c2->buffer->i->__get(c2->iPos);
HXDLIN( 361)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginFill(_hx_tmp33,(int)1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 266)							{
HXLINE( 266)								Int _hx_tmp34 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 266)								switch((int)(_hx_tmp34)){
            									case (int)0: {
HXLINE( 266)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 266)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 266)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 266)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 266)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 266)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 266)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 266)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 266)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 266)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 266)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 266)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 266)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 266)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 266)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 266)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 266)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 266)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 266)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 266)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 266)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 266)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 266)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 266)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 266)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 266)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 266)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 266)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 266)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 266)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 266)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 267)							Float _hx_tmp35 = c3->buffer->f->__get(c3->fPos);
HXDLIN( 267)							Float _hx_tmp36 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN( 267)							Float _hx_tmp37 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN( 267)							Float _hx_tmp38 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN( 267)							Float _hx_tmp39 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN( 267)							Float _hx_tmp40 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 267)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->cubicCurveTo(_hx_tmp35,_hx_tmp36,_hx_tmp37,_hx_tmp38,_hx_tmp39,_hx_tmp40);
HXLINE( 268)							Float _hx_tmp41 = c3->buffer->f->__get(c3->fPos);
HXDLIN( 268)							Float _hx_tmp42 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN( 268)							Float _hx_tmp43 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN( 268)							Float _hx_tmp44 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN( 268)							Float _hx_tmp45 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN( 268)							Float _hx_tmp46 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 268)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->cubicCurveTo(_hx_tmp41,_hx_tmp42,_hx_tmp43,_hx_tmp44,_hx_tmp45,_hx_tmp46);
            						}
            						break;
            						case (int)4: {
HXLINE( 272)							{
HXLINE( 272)								Int _hx_tmp47 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 272)								switch((int)(_hx_tmp47)){
            									case (int)0: {
HXLINE( 272)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 272)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 272)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 272)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 272)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 272)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 272)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 272)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 272)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 272)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 272)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 272)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 272)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 272)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 272)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 272)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 272)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 272)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 272)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 272)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 272)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 272)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 272)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 272)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 272)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 272)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 272)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 272)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 272)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 272)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 272)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 273)							Float _hx_tmp48 = c4->buffer->f->__get(c4->fPos);
HXDLIN( 273)							Float _hx_tmp49 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN( 273)							Float _hx_tmp50 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN( 273)							Float _hx_tmp51 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 273)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->curveTo(_hx_tmp48,_hx_tmp49,_hx_tmp50,_hx_tmp51);
HXLINE( 274)							Float _hx_tmp52 = c4->buffer->f->__get(c4->fPos);
HXDLIN( 274)							Float _hx_tmp53 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN( 274)							Float _hx_tmp54 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN( 274)							Float _hx_tmp55 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 274)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->curveTo(_hx_tmp52,_hx_tmp53,_hx_tmp54,_hx_tmp55);
            						}
            						break;
            						case (int)5: {
HXLINE( 367)							{
HXLINE( 367)								Int _hx_tmp56 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 367)								switch((int)(_hx_tmp56)){
            									case (int)0: {
HXLINE( 367)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 367)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 367)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 367)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 367)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 367)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 367)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 367)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 367)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 367)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 367)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 367)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 367)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 367)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 367)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 367)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 367)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 367)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 367)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 367)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 367)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 367)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 367)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 367)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 367)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 367)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 367)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 367)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 367)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 367)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 367)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 368)							Float _hx_tmp57 = c5->buffer->f->__get(c5->fPos);
HXDLIN( 368)							Float _hx_tmp58 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 368)							Float _hx_tmp59 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 368)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawCircle(_hx_tmp57,_hx_tmp58,_hx_tmp59);
HXLINE( 369)							Float _hx_tmp60 = c5->buffer->f->__get(c5->fPos);
HXDLIN( 369)							Float _hx_tmp61 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 369)							Float _hx_tmp62 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 369)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawCircle(_hx_tmp60,_hx_tmp61,_hx_tmp62);
            						}
            						break;
            						case (int)6: {
HXLINE( 373)							{
HXLINE( 373)								Int _hx_tmp63 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 373)								switch((int)(_hx_tmp63)){
            									case (int)0: {
HXLINE( 373)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 373)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 373)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 373)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 373)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 373)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 373)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 373)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 373)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 373)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 373)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 373)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 373)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 373)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 373)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 373)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 373)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 373)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 373)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 373)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 373)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 373)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 373)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 373)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 373)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 373)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 373)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 373)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 373)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 373)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 373)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 374)							Float _hx_tmp64 = c6->buffer->f->__get(c6->fPos);
HXDLIN( 374)							Float _hx_tmp65 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN( 374)							Float _hx_tmp66 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN( 374)							Float _hx_tmp67 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN( 374)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawEllipse(_hx_tmp64,_hx_tmp65,_hx_tmp66,_hx_tmp67);
HXLINE( 375)							Float _hx_tmp68 = c6->buffer->f->__get(c6->fPos);
HXDLIN( 375)							Float _hx_tmp69 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN( 375)							Float _hx_tmp70 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN( 375)							Float _hx_tmp71 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN( 375)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawEllipse(_hx_tmp68,_hx_tmp69,_hx_tmp70,_hx_tmp71);
            						}
            						break;
            						case (int)7: {
HXLINE( 379)							{
HXLINE( 379)								Int _hx_tmp72 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 379)								switch((int)(_hx_tmp72)){
            									case (int)0: {
HXLINE( 379)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 379)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 379)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 379)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 379)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 379)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 379)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 379)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 379)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 379)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 379)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 379)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 379)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 379)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 379)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 379)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 379)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 379)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 379)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 379)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 379)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 379)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 379)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 379)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 379)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 379)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 379)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 379)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 379)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 379)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 379)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 380)							Float _hx_tmp73 = c7->buffer->f->__get(c7->fPos);
HXDLIN( 380)							Float _hx_tmp74 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN( 380)							Float _hx_tmp75 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 380)							Float _hx_tmp76 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 380)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRect(_hx_tmp73,_hx_tmp74,_hx_tmp75,_hx_tmp76);
HXLINE( 381)							Float _hx_tmp77 = c7->buffer->f->__get(c7->fPos);
HXDLIN( 381)							Float _hx_tmp78 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN( 381)							Float _hx_tmp79 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 381)							Float _hx_tmp80 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 381)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRect(_hx_tmp77,_hx_tmp78,_hx_tmp79,_hx_tmp80);
            						}
            						break;
            						case (int)8: {
HXLINE( 385)							{
HXLINE( 385)								Int _hx_tmp81 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 385)								switch((int)(_hx_tmp81)){
            									case (int)0: {
HXLINE( 385)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 385)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 385)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 385)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 385)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 385)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 385)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 385)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 385)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 385)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 385)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 385)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 385)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 385)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 385)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 385)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 385)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 385)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 385)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 385)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 385)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 385)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 385)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 385)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 385)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 385)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 385)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 385)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 385)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 385)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 385)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 386)							Float _hx_tmp82 = c8->buffer->f->__get(c8->fPos);
HXDLIN( 386)							Float _hx_tmp83 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN( 386)							Float _hx_tmp84 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 386)							Float _hx_tmp85 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 386)							Float _hx_tmp86 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 386)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRoundRect(_hx_tmp82,_hx_tmp83,_hx_tmp84,_hx_tmp85,_hx_tmp86,c8->buffer->o->__get(c8->oPos));
HXLINE( 387)							Float _hx_tmp87 = c8->buffer->f->__get(c8->fPos);
HXDLIN( 387)							Float _hx_tmp88 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN( 387)							Float _hx_tmp89 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 387)							Float _hx_tmp90 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 387)							Float _hx_tmp91 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 387)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRoundRect(_hx_tmp87,_hx_tmp88,_hx_tmp89,_hx_tmp90,_hx_tmp91,c8->buffer->o->__get(c8->oPos));
            						}
            						break;
            						case (int)11: {
HXLINE( 305)							{
HXLINE( 305)								{
HXLINE( 305)									Int _hx_tmp92 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 305)									switch((int)(_hx_tmp92)){
            										case (int)0: {
HXLINE( 305)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 305)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 305)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 305)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 305)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 305)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 305)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 305)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 305)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE( 305)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE( 305)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE( 305)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE( 305)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)8: {
HXLINE( 305)											hx::AddEq(data->fPos,(int)5);
HXDLIN( 305)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE( 305)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE( 305)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 305)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)13: {
HXLINE( 305)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 305)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 305)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 305)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)14: {
HXLINE( 305)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 305)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 305)											hx::AddEq(data->fPos,(int)2);
HXDLIN( 305)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE( 305)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)16: {
HXLINE( 305)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE( 305)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 305)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            							}
HXLINE( 306)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE( 307)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE( 309)							Bool _hx_tmp93;
HXDLIN( 309)							Bool _hx_tmp94 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 309)							if (_hx_tmp94) {
HXLINE( 309)								_hx_tmp93 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            							}
            							else {
HXLINE( 309)								_hx_tmp93 = false;
            							}
HXDLIN( 309)							if (_hx_tmp93) {
HXLINE( 311)								data->destroy();
HXLINE( 312)								return true;
            							}
HXLINE( 316)							Bool _hx_tmp95;
HXDLIN( 316)							Bool _hx_tmp96 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 316)							if (_hx_tmp96) {
HXLINE( 316)								_hx_tmp95 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            							}
            							else {
HXLINE( 316)								_hx_tmp95 = false;
            							}
HXDLIN( 316)							if (_hx_tmp95) {
HXLINE( 318)								data->destroy();
HXLINE( 319)								return true;
            							}
HXLINE( 323)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE( 324)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            						}
            						break;
            						case (int)12: {
HXLINE( 300)							{
HXLINE( 300)								Int _hx_tmp97 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 300)								switch((int)(_hx_tmp97)){
            									case (int)0: {
HXLINE( 300)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 300)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 300)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 300)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 300)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 300)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 300)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 300)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 300)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 300)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 300)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 300)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 300)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 300)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 300)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 300)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 300)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 300)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 300)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 300)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 300)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 300)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 300)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 300)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 300)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 300)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 300)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 300)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 300)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 300)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 300)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 301)							Int _hx_tmp98 = (c9->oPos + (int)1);
HXDLIN( 301)							Int _hx_tmp99 = (c9->bPos + (int)1);
HXDLIN( 301)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::geom::Matrix)(c9->buffer->o->__get(_hx_tmp98)) ),c9->buffer->b->__get(c9->bPos),c9->buffer->b->__get(_hx_tmp99));
            						}
            						break;
            						case (int)13: {
HXLINE( 295)							{
HXLINE( 295)								Int _hx_tmp100 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 295)								switch((int)(_hx_tmp100)){
            									case (int)0: {
HXLINE( 295)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 295)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 295)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 295)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 295)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 295)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 295)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 295)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 295)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 295)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 295)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 295)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 295)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 295)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 295)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 295)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 295)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 295)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 295)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 295)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 295)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 295)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 295)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 295)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 295)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 296)							Int _hx_tmp101 = (c10->iiPos + (int)1);
HXDLIN( 296)							Int _hx_tmp102 = (c10->oPos + (int)1);
HXDLIN( 296)							Int _hx_tmp103 = (c10->oPos + (int)2);
HXDLIN( 296)							Int _hx_tmp104 = (c10->oPos + (int)3);
HXDLIN( 296)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineGradientStyle(c10->buffer->o->__get(c10->oPos),c10->buffer->ii->__get(c10->iiPos).StaticCast< ::Array< Int > >(),c10->buffer->ff->__get(c10->ffPos).StaticCast< ::Array< Float > >(),c10->buffer->ii->__get(_hx_tmp101).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get(_hx_tmp102)) ),c10->buffer->o->__get(_hx_tmp103),c10->buffer->o->__get(_hx_tmp104),c10->buffer->f->__get(c10->fPos));
            						}
            						break;
            						case (int)14: {
HXLINE( 290)							{
HXLINE( 290)								Int _hx_tmp105 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 290)								switch((int)(_hx_tmp105)){
            									case (int)0: {
HXLINE( 290)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 290)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 290)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 290)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 290)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 290)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 290)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 290)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 290)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 290)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 290)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 290)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 290)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 290)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 290)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 290)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 290)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 290)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 290)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 290)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 290)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 290)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 290)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 290)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 290)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 290)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 290)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 290)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 290)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 290)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 290)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 291)							Int _hx_tmp106 = (c11->oPos + (int)1);
HXDLIN( 291)							Int _hx_tmp107 = (c11->oPos + (int)2);
HXDLIN( 291)							Int _hx_tmp108 = (c11->oPos + (int)3);
HXDLIN( 291)							Int _hx_tmp109 = (c11->fPos + (int)1);
HXDLIN( 291)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->i->__get(c11->iPos),(int)1,c11->buffer->b->__get(c11->bPos),c11->buffer->o->__get(_hx_tmp106),c11->buffer->o->__get(_hx_tmp107),c11->buffer->o->__get(_hx_tmp108),c11->buffer->f->__get(_hx_tmp109));
            						}
            						break;
            						case (int)15: {
HXLINE( 278)							{
HXLINE( 278)								Int _hx_tmp110 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 278)								switch((int)(_hx_tmp110)){
            									case (int)0: {
HXLINE( 278)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 278)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 278)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 278)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 278)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 278)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 278)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 278)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 278)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 278)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 278)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 278)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 278)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 278)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 278)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 278)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 278)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 278)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 278)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 278)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 278)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 278)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 278)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 278)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 278)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 278)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 278)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 278)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 278)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 278)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 278)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 279)							Float _hx_tmp111 = c12->buffer->f->__get(c12->fPos);
HXDLIN( 279)							Float _hx_tmp112 = c12->buffer->f->__get((c12->fPos + (int)1));
HXDLIN( 279)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->lineTo(_hx_tmp111,_hx_tmp112);
HXLINE( 280)							Float _hx_tmp113 = c12->buffer->f->__get(c12->fPos);
HXDLIN( 280)							Float _hx_tmp114 = c12->buffer->f->__get((c12->fPos + (int)1));
HXDLIN( 280)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineTo(_hx_tmp113,_hx_tmp114);
            						}
            						break;
            						case (int)16: {
HXLINE( 284)							{
HXLINE( 284)								Int _hx_tmp115 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 284)								switch((int)(_hx_tmp115)){
            									case (int)0: {
HXLINE( 284)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 284)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 284)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 284)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 284)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 284)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 284)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 284)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 284)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 284)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 284)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 284)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 284)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 284)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 284)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 284)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 284)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 284)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 284)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 284)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 284)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 284)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 284)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 284)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 284)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 284)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 284)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 284)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 284)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 284)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 284)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 285)							Float _hx_tmp116 = c13->buffer->f->__get(c13->fPos);
HXDLIN( 285)							Float _hx_tmp117 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 285)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->moveTo(_hx_tmp116,_hx_tmp117);
HXLINE( 286)							Float _hx_tmp118 = c13->buffer->f->__get(c13->fPos);
HXDLIN( 286)							Float _hx_tmp119 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 286)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->moveTo(_hx_tmp118,_hx_tmp119);
            						}
            						break;
            						default:{
HXLINE( 391)							{
HXLINE( 391)								Int _hx_tmp120 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 391)								switch((int)(_hx_tmp120)){
            									case (int)0: {
HXLINE( 391)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 391)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 391)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 391)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 391)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 391)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 391)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 391)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 391)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 391)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 391)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 391)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 391)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE( 391)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 391)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 391)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE( 391)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 391)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE( 391)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 391)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 391)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 391)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE( 391)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 391)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 391)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 391)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 391)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE( 391)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 391)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 391)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE( 397)			Int _hx_tmp121 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->get_length();
HXDLIN( 397)			if ((_hx_tmp121 > (int)0)) {
HXLINE( 399)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
            			}
HXLINE( 403)			Int _hx_tmp122 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->get_length();
HXDLIN( 403)			if ((_hx_tmp122 > (int)0)) {
HXLINE( 405)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
            			}
HXLINE( 409)			data->destroy();
HXLINE( 411)			Bool _hx_tmp123;
HXDLIN( 411)			Bool _hx_tmp124 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 411)			if (_hx_tmp124) {
HXLINE( 411)				_hx_tmp123 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            			}
            			else {
HXLINE( 411)				_hx_tmp123 = false;
            			}
HXDLIN( 411)			if (_hx_tmp123) {
HXLINE( 413)				return true;
            			}
HXLINE( 417)			Bool _hx_tmp125;
HXDLIN( 417)			Bool _hx_tmp126 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 417)			if (_hx_tmp126) {
HXLINE( 417)				_hx_tmp125 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            			}
            			else {
HXLINE( 417)				_hx_tmp125 = false;
            			}
HXDLIN( 417)			if (_hx_tmp125) {
HXLINE( 419)				return true;
            			}
            		}
HXLINE( 426)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,hitTest,return )

Bool CairoGraphics_obj::isCCW(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","isCCW",0x5353f111,"openfl._internal.renderer.cairo.CairoGraphics.isCCW","openfl/_internal/renderer/cairo/CairoGraphics.hx",433,0x744ae94c)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE( 433)		return ((((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1))) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CairoGraphics_obj,isCCW,return )

 ::Dynamic CairoGraphics_obj::normalizeUVT( ::openfl::_Vector::FloatVector uvt,hx::Null< Bool >  __o_skipT){
Bool skipT = __o_skipT.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","normalizeUVT",0xc9c604e2,"openfl._internal.renderer.cairo.CairoGraphics.normalizeUVT","openfl/_internal/renderer/cairo/CairoGraphics.hx",438,0x744ae94c)
            	HX_STACK_ARG(uvt,"uvt")
            	HX_STACK_ARG(skipT,"skipT")
HXLINE( 440)		HX_VARI( Float,max) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 441)		HX_VARI( Float,tmp) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 442)		HX_VARI( Int,len) = uvt->get_length();
HXLINE( 444)		{
HXLINE( 444)			HX_VARI( Int,_g1) = (int)1;
HXDLIN( 444)			HX_VARI( Int,_g) = (len + (int)1);
HXDLIN( 444)			while((_g1 < _g)){
HXLINE( 444)				HX_VARI( Int,t) = _g1++;
HXLINE( 446)				Bool _hx_tmp;
HXDLIN( 446)				if (skipT) {
HXLINE( 446)					_hx_tmp = (hx::Mod(t,(int)3) == (int)0);
            				}
            				else {
HXLINE( 446)					_hx_tmp = false;
            				}
HXDLIN( 446)				if (_hx_tmp) {
HXLINE( 448)					continue;
            				}
HXLINE( 452)				tmp = uvt->get((t - (int)1));
HXLINE( 454)				Bool _hx_tmp1 = (max < tmp);
HXDLIN( 454)				if (_hx_tmp1) {
HXLINE( 456)					max = tmp;
            				}
            			}
            		}
HXLINE( 462)		if (!(skipT)) {
HXLINE( 464)			return  ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("max",a4,0a,53,00),max)
            				->setFixed(1,HX_("uvt",f3,2e,59,00),uvt));
            		}
HXLINE( 468)		Int length = null();
HXDLIN( 468)		Bool fixed = null();
HXDLIN( 468)		HX_VARI(  ::openfl::_Vector::FloatVector,result) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXLINE( 470)		{
HXLINE( 470)			HX_VARI_NAME( Int,_g11,"_g1") = (int)1;
HXDLIN( 470)			HX_VARI_NAME( Int,_g2,"_g") = (len + (int)1);
HXDLIN( 470)			while((_g11 < _g2)){
HXLINE( 470)				HX_VARI_NAME( Int,t1,"t") = _g11++;
HXLINE( 472)				Bool _hx_tmp2;
HXDLIN( 472)				if (skipT) {
HXLINE( 472)					_hx_tmp2 = (hx::Mod(t1,(int)3) == (int)0);
            				}
            				else {
HXLINE( 472)					_hx_tmp2 = false;
            				}
HXDLIN( 472)				if (_hx_tmp2) {
HXLINE( 474)					continue;
            				}
HXLINE( 478)				{
HXLINE( 478)					Float x = uvt->get((t1 - (int)1));
HXDLIN( 478)					result->push(x);
            				}
            			}
            		}
HXLINE( 482)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("max",a4,0a,53,00),max)
            			->setFixed(1,HX_("uvt",f3,2e,59,00),result));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,normalizeUVT,return )

void CairoGraphics_obj::playCommands( ::openfl::_internal::renderer::DrawCommandBuffer commands,hx::Null< Bool >  __o_stroke){
Bool stroke = __o_stroke.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","playCommands",0xcc85aa58,"openfl._internal.renderer.cairo.CairoGraphics.playCommands","openfl/_internal/renderer/cairo/CairoGraphics.hx",487,0x744ae94c)
            	HX_STACK_ARG(commands,"commands")
            	HX_STACK_ARG(stroke,"stroke")
HXLINE( 489)		Int _hx_tmp = commands->get_length();
HXDLIN( 489)		if ((_hx_tmp == (int)0)) {
HXLINE( 489)			return;
            		}
HXLINE( 491)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds;
HXLINE( 493)		HX_VARI( Float,offsetX) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 494)		HX_VARI( Float,offsetY) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 496)		HX_VARI( Float,positionX) = ((Float)0.0);
HXLINE( 497)		HX_VARI( Float,positionY) = ((Float)0.0);
HXLINE( 499)		HX_VARI( Bool,closeGap) = false;
HXLINE( 500)		HX_VARI( Float,startX) = ((Float)0.0);
HXLINE( 501)		HX_VARI( Float,startY) = ((Float)0.0);
HXLINE( 503)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_fillRule((int)1);
HXLINE( 504)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_antialias((int)3);
HXLINE( 506)		HX_VARI( Bool,hasPath) = false;
HXLINE( 508)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(commands);
HXLINE( 510)		{
HXLINE( 510)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 510)			HX_VARI( ::Array< ::Dynamic>,_g1) = commands->types;
HXDLIN( 510)			while((_g < _g1->length)){
HXLINE( 510)				HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 510)				++_g;
HXLINE( 512)				Int _hx_tmp1 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 512)				switch((int)(_hx_tmp1)){
            					case (int)0: {
HXLINE( 694)						{
HXLINE( 694)							Int _hx_tmp2 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 694)							switch((int)(_hx_tmp2)){
            								case (int)0: {
HXLINE( 694)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 694)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 694)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 694)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 694)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 694)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 694)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 694)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 694)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 694)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 694)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 694)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 694)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 694)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 694)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 694)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 694)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 694)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 694)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 694)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 694)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 694)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 694)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 694)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 694)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 694)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 694)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 694)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 694)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 694)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 694)						HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 695)						 ::openfl::display::BitmapData _hx_tmp3 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 695)						 ::openfl::geom::Matrix _hx_tmp4 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 695)						Bool _hx_tmp5 = c->buffer->b->__get(c->bPos);
HXDLIN( 695)						Bool _hx_tmp6 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 695)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createImagePattern(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6);
HXLINE( 697)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXLINE( 698)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapRepeat = c->buffer->b->__get(c->bPos);
HXLINE( 700)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
            					}
            					break;
            					case (int)1: {
HXLINE( 704)						{
HXLINE( 704)							Int _hx_tmp7 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 704)							switch((int)(_hx_tmp7)){
            								case (int)0: {
HXLINE( 704)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 704)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 704)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 704)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 704)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 704)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 704)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 704)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 704)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 704)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 704)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 704)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 704)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 704)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 704)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 704)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 704)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 704)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 704)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 704)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 704)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 704)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 704)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 704)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 704)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 704)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 704)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 704)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 704)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 704)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 704)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 705)						Bool _hx_tmp8 = (c1->buffer->f->__get(c1->fPos) < ((Float)0.005));
HXDLIN( 705)						if (_hx_tmp8) {
HXLINE( 707)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
            						}
            						else {
HXLINE( 711)							Bool _hx_tmp9 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern );
HXDLIN( 711)							if (_hx_tmp9) {
HXLINE( 713)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = null();
            							}
HXLINE( 717)							Float _hx_tmp10 = ((Float)hx::UShr(((int)c1->buffer->i->__get(c1->iPos) & (int)(int)16711680),(int)16) / (Float)(int)255);
HXDLIN( 717)							Float _hx_tmp11 = ((Float)hx::UShr(((int)c1->buffer->i->__get(c1->iPos) & (int)(int)65280),(int)8) / (Float)(int)255);
HXDLIN( 717)							Float _hx_tmp12 = ((Float)((int)c1->buffer->i->__get(c1->iPos) & (int)(int)255) / (Float)(int)255);
HXDLIN( 717)							Float _hx_tmp13 = c1->buffer->f->__get(c1->fPos);
HXDLIN( 717)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGBA(_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13);
HXLINE( 718)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
            						}
HXLINE( 722)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            					}
            					break;
            					case (int)2: {
HXLINE( 726)						{
HXLINE( 726)							Int _hx_tmp14 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 726)							switch((int)(_hx_tmp14)){
            								case (int)0: {
HXLINE( 726)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 726)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 726)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 726)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 726)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 726)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 726)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 726)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 726)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 726)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 726)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 726)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 726)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 726)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 726)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 726)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 726)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 726)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 726)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 726)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 726)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 726)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 726)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 726)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 726)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 726)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 726)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 726)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 726)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 726)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 726)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 727)						Bool _hx_tmp15 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern );
HXDLIN( 727)						if (_hx_tmp15) {
HXLINE( 729)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = null();
            						}
HXLINE( 733)						Int _hx_tmp16 = (c2->iiPos + (int)1);
HXDLIN( 733)						Int _hx_tmp17 = (c2->oPos + (int)1);
HXDLIN( 733)						Int _hx_tmp18 = (c2->oPos + (int)2);
HXDLIN( 733)						Int _hx_tmp19 = (c2->oPos + (int)3);
HXDLIN( 733)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createGradientPattern(c2->buffer->o->__get(c2->oPos),c2->buffer->ii->__get(c2->iiPos).StaticCast< ::Array< Int > >(),c2->buffer->ff->__get(c2->ffPos).StaticCast< ::Array< Float > >(),c2->buffer->ii->__get(_hx_tmp16).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c2->buffer->o->__get(_hx_tmp17)) ),c2->buffer->o->__get(_hx_tmp18),c2->buffer->o->__get(_hx_tmp19),c2->buffer->f->__get(c2->fPos));
HXLINE( 735)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
HXLINE( 736)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            					}
            					break;
            					case (int)3: {
HXLINE( 516)						{
HXLINE( 516)							Int _hx_tmp20 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 516)							switch((int)(_hx_tmp20)){
            								case (int)0: {
HXLINE( 516)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 516)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 516)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 516)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 516)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 516)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 516)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 516)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 516)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 516)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 516)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 516)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 516)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 516)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 516)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 516)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 516)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 516)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 516)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 516)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 516)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 516)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 516)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 516)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 516)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 516)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 516)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 516)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 516)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 516)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 516)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 517)						hasPath = true;
HXLINE( 518)						Float _hx_tmp21 = (c3->buffer->f->__get(c3->fPos) - offsetX);
HXDLIN( 518)						Float _hx_tmp22 = (c3->buffer->f->__get((c3->fPos + (int)1)) - offsetY);
HXDLIN( 518)						Float _hx_tmp23 = (c3->buffer->f->__get((c3->fPos + (int)2)) - offsetX);
HXDLIN( 518)						Float _hx_tmp24 = (c3->buffer->f->__get((c3->fPos + (int)3)) - offsetY);
HXDLIN( 518)						Float _hx_tmp25 = (c3->buffer->f->__get((c3->fPos + (int)4)) - offsetX);
HXDLIN( 518)						Float _hx_tmp26 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 518)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(_hx_tmp21,_hx_tmp22,_hx_tmp23,_hx_tmp24,_hx_tmp25,(_hx_tmp26 - offsetY));
            					}
            					break;
            					case (int)4: {
HXLINE( 522)						{
HXLINE( 522)							Int _hx_tmp27 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 522)							switch((int)(_hx_tmp27)){
            								case (int)0: {
HXLINE( 522)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 522)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 522)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 522)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 522)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 522)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 522)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 522)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 522)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 522)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 522)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 522)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 522)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 522)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 522)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 522)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 522)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 522)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 522)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 522)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 522)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 522)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 522)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 522)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 522)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 522)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 522)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 522)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 522)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 522)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 522)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 523)						hasPath = true;
HXLINE( 524)						Float _hx_tmp28 = (c4->buffer->f->__get(c4->fPos) - offsetX);
HXDLIN( 524)						Float _hx_tmp29 = (c4->buffer->f->__get((c4->fPos + (int)1)) - offsetY);
HXDLIN( 524)						Float _hx_tmp30 = (c4->buffer->f->__get((c4->fPos + (int)2)) - offsetX);
HXDLIN( 524)						Float _hx_tmp31 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 524)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(_hx_tmp28,_hx_tmp29,_hx_tmp30,(_hx_tmp31 - offsetY));
            					}
            					break;
            					case (int)5: {
HXLINE( 528)						{
HXLINE( 528)							Int _hx_tmp32 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 528)							switch((int)(_hx_tmp32)){
            								case (int)0: {
HXLINE( 528)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 528)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 528)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 528)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 528)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 528)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 528)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 528)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 528)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 528)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 528)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 528)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 528)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 528)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 528)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 528)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 528)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 528)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 528)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 528)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 528)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 528)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 528)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 528)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 528)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 528)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 528)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 528)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 528)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 528)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 528)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 529)						hasPath = true;
HXLINE( 530)						Float _hx_tmp33 = ((c5->buffer->f->__get(c5->fPos) - offsetX) + c5->buffer->f->__get((c5->fPos + (int)2)));
HXDLIN( 530)						Float _hx_tmp34 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 530)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(_hx_tmp33,(_hx_tmp34 - offsetY));
HXLINE( 531)						Float _hx_tmp35 = (c5->buffer->f->__get(c5->fPos) - offsetX);
HXDLIN( 531)						Float _hx_tmp36 = (c5->buffer->f->__get((c5->fPos + (int)1)) - offsetY);
HXDLIN( 531)						Float _hx_tmp37 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 531)						Float _hx_tmp38 = (::Math_obj::PI * (int)2);
HXDLIN( 531)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->arc(_hx_tmp35,_hx_tmp36,_hx_tmp37,(int)0,_hx_tmp38);
            					}
            					break;
            					case (int)6: {
HXLINE( 541)						{
HXLINE( 541)							Int _hx_tmp39 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 541)							switch((int)(_hx_tmp39)){
            								case (int)0: {
HXLINE( 541)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 541)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 541)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 541)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 541)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 541)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 541)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 541)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 541)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 541)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 541)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 541)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 541)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 541)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 541)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 541)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 541)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 541)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 541)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 541)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 541)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 541)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 541)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 541)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 541)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 541)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 541)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 541)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 541)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 541)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 541)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 542)						hasPath = true;
HXLINE( 544)						HX_VARI( Float,x) = c6->buffer->f->__get(c6->fPos);
HXLINE( 545)						HX_VARI( Float,y) = c6->buffer->f->__get((c6->fPos + (int)1));
HXLINE( 546)						HX_VARI( Float,width) = c6->buffer->f->__get((c6->fPos + (int)2));
HXLINE( 547)						HX_VARI( Float,height) = c6->buffer->f->__get((c6->fPos + (int)3));
HXLINE( 549)						hx::SubEq(x,offsetX);
HXLINE( 550)						hx::SubEq(y,offsetY);
HXLINE( 552)						HX_VARI( Float,ox) = (((Float)width / (Float)(int)2) * ((Float).5522848));
HXDLIN( 552)						HX_VARI( Float,oy) = (((Float)height / (Float)(int)2) * ((Float).5522848));
HXDLIN( 552)						HX_VARI( Float,xe) = (x + width);
HXDLIN( 552)						HX_VARI( Float,ye) = (y + height);
HXDLIN( 552)						HX_VARI( Float,xm) = (x + ((Float)width / (Float)(int)2));
HXDLIN( 552)						HX_VARI( Float,ym) = (y + ((Float)height / (Float)(int)2));
HXLINE( 560)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x,ym);
HXLINE( 561)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(x,(ym - oy),(xm - ox),y,xm,y);
HXLINE( 562)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((xm + ox),y,xe,(ym - oy),xe,ym);
HXLINE( 563)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(xe,(ym + oy),(xm + ox),ye,xm,ye);
HXLINE( 564)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((xm - ox),ye,x,(ym + oy),x,ym);
            					}
            					break;
            					case (int)7: {
HXLINE( 535)						{
HXLINE( 535)							Int _hx_tmp40 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 535)							switch((int)(_hx_tmp40)){
            								case (int)0: {
HXLINE( 535)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 535)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 535)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 535)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 535)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 535)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 535)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 535)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 535)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 535)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 535)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 535)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 535)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 535)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 535)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 535)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 535)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 535)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 535)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 535)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 535)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 535)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 535)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 535)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 535)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 535)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 535)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 535)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 535)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 535)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 535)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 536)						hasPath = true;
HXLINE( 537)						Float _hx_tmp41 = (c7->buffer->f->__get(c7->fPos) - offsetX);
HXDLIN( 537)						Float _hx_tmp42 = (c7->buffer->f->__get((c7->fPos + (int)1)) - offsetY);
HXDLIN( 537)						Float _hx_tmp43 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 537)						Float _hx_tmp44 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 537)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->rectangle(_hx_tmp41,_hx_tmp42,_hx_tmp43,_hx_tmp44);
            					}
            					break;
            					case (int)8: {
HXLINE( 568)						{
HXLINE( 568)							Int _hx_tmp45 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 568)							switch((int)(_hx_tmp45)){
            								case (int)0: {
HXLINE( 568)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 568)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 568)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 568)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 568)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 568)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 568)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 568)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 568)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 568)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 568)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 568)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 568)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 568)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 568)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 568)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 568)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 568)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 568)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 568)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 568)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 568)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 568)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 568)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 568)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 568)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 568)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 568)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 568)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 568)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 568)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 569)						hasPath = true;
HXLINE( 570)						Float _hx_tmp46 = (c8->buffer->f->__get(c8->fPos) - offsetX);
HXDLIN( 570)						Float _hx_tmp47 = (c8->buffer->f->__get((c8->fPos + (int)1)) - offsetY);
HXDLIN( 570)						Float _hx_tmp48 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 570)						Float _hx_tmp49 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 570)						Float _hx_tmp50 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 570)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::drawRoundRect(_hx_tmp46,_hx_tmp47,_hx_tmp48,_hx_tmp49,_hx_tmp50,c8->buffer->o->__get(c8->oPos));
            					}
            					break;
            					case (int)10: {
HXLINE( 740)						{
HXLINE( 740)							Int _hx_tmp51 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 740)							switch((int)(_hx_tmp51)){
            								case (int)0: {
HXLINE( 740)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 740)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 740)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 740)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 740)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 740)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 740)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 740)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 740)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 740)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 740)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 740)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 740)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 740)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 740)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 740)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 740)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 740)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 740)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 740)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 740)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 740)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 740)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 740)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 740)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 740)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 740)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 740)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 740)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 740)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 740)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 741)						HX_VARI(  ::openfl::_Vector::FloatVector,v) = ( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(c9->oPos)) );
HXLINE( 742)						HX_VARI(  ::openfl::_Vector::IntVector,ind) = ( ( ::openfl::_Vector::IntVector)(c9->buffer->o->__get((c9->oPos + (int)1))) );
HXLINE( 743)						HX_VARI(  ::openfl::_Vector::FloatVector,uvt) = ( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get((c9->oPos + (int)2))) );
HXLINE( 744)						HX_VARI( Bool,colorFill) = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill );
HXLINE( 746)						Bool _hx_tmp52;
HXDLIN( 746)						if (colorFill) {
HXLINE( 746)							_hx_tmp52 = hx::IsNotNull( uvt );
            						}
            						else {
HXLINE( 746)							_hx_tmp52 = false;
            						}
HXDLIN( 746)						if (_hx_tmp52) {
HXLINE( 748)							goto _hx_goto_5;
            						}
HXLINE( 752)						HX_VARI_NAME( Int,width1,"width") = (int)0;
HXLINE( 753)						HX_VARI_NAME( Int,height1,"height") = (int)0;
HXLINE( 754)						HX_VARI(  ::lime::math::Matrix3,currentMatrix) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___renderTransform->_hx___toMatrix3();
HXLINE( 756)						if (!(colorFill)) {
HXLINE( 760)							Bool _hx_tmp53 = hx::IsNull( uvt );
HXDLIN( 760)							if (_hx_tmp53) {
HXLINE( 762)								Int length = null();
HXDLIN( 762)								Bool fixed = null();
HXDLIN( 762)								uvt =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXLINE( 764)								{
HXLINE( 764)									HX_VARI( Int,_g3) = (int)0;
HXDLIN( 764)									Int _hx_tmp54 = v->get_length();
HXDLIN( 764)									HX_VARI( Int,_g2) = ::Std_obj::_hx_int(((Float)_hx_tmp54 / (Float)(int)2));
HXDLIN( 764)									while((_g3 < _g2)){
HXLINE( 764)										HX_VARI( Int,i) = _g3++;
HXLINE( 766)										{
HXLINE( 766)											Float x1 = ((Float)v->get((i * (int)2)) / (Float)::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->width);
HXDLIN( 766)											uvt->push(x1);
            										}
HXLINE( 767)										{
HXLINE( 767)											Float x2 = ((Float)v->get(((i * (int)2) + (int)1)) / (Float)::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->height);
HXDLIN( 767)											uvt->push(x2);
            										}
            									}
            								}
            							}
HXLINE( 773)							::Dynamic this1 = ( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get((c9->oPos + (int)2))) );
HXDLIN( 773)							Int _hx_tmp55 = ( (Int)( ::Dynamic(this1->__Field(HX_("get_length",af,04,8f,8f),hx::paccDynamic))()) );
HXDLIN( 773)							Int _hx_tmp56 = v->get_length();
HXLINE( 774)							HX_VARI(  ::Dynamic,normalizedUVT) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::normalizeUVT(uvt,(_hx_tmp55 != _hx_tmp56));
HXLINE( 775)							HX_VARI( Float,maxUVT) = ( (Float)(normalizedUVT->__Field(HX_("max",a4,0a,53,00),hx::paccDynamic)) );
HXLINE( 776)							uvt = ( ( ::openfl::_Vector::FloatVector)(normalizedUVT->__Field(HX_("uvt",f3,2e,59,00),hx::paccDynamic)) );
HXLINE( 778)							if ((maxUVT > (int)1)) {
HXLINE( 779)								width1 = ::Std_obj::_hx_int(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width);
HXLINE( 780)								height1 = ::Std_obj::_hx_int(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height);
            							}
            							else {
HXLINE( 785)								width1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->width;
HXLINE( 786)								height1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->height;
            							}
            						}
HXLINE( 792)						HX_VARI_NAME( Int,i1,"i") = (int)0;
HXLINE( 793)						HX_VARI( Int,l) = ind->get_length();
HXLINE( 795)						HX_VAR( Int,a_);
HXDLIN( 795)						HX_VAR( Int,b_);
HXDLIN( 795)						HX_VAR( Int,c_);
HXLINE( 796)						HX_VAR( Int,iax);
HXDLIN( 796)						HX_VAR( Int,iay);
HXDLIN( 796)						HX_VAR( Int,ibx);
HXDLIN( 796)						HX_VAR( Int,iby);
HXDLIN( 796)						HX_VAR( Int,icx);
HXDLIN( 796)						HX_VAR( Int,icy);
HXLINE( 797)						HX_VAR_NAME( Float,x11,"x1");
HXDLIN( 797)						HX_VAR( Float,y1);
HXDLIN( 797)						HX_VAR_NAME( Float,x21,"x2");
HXDLIN( 797)						HX_VAR( Float,y2);
HXDLIN( 797)						HX_VAR( Float,x3);
HXDLIN( 797)						HX_VAR( Float,y3);
HXLINE( 798)						HX_VAR( Float,uvx1);
HXDLIN( 798)						HX_VAR( Float,uvy1);
HXDLIN( 798)						HX_VAR( Float,uvx2);
HXDLIN( 798)						HX_VAR( Float,uvy2);
HXDLIN( 798)						HX_VAR( Float,uvx3);
HXDLIN( 798)						HX_VAR( Float,uvy3);
HXLINE( 799)						HX_VAR( Float,denom);
HXLINE( 800)						HX_VAR( Float,t1);
HXDLIN( 800)						HX_VAR( Float,t2);
HXDLIN( 800)						HX_VAR( Float,t3);
HXDLIN( 800)						HX_VAR( Float,t4);
HXLINE( 801)						HX_VAR( Float,dx);
HXDLIN( 801)						HX_VAR( Float,dy);
HXLINE( 803)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_antialias((int)1);
HXLINE( 805)						while((i1 < l)){
HXLINE( 807)							a_ = i1;
HXLINE( 808)							b_ = (i1 + (int)1);
HXLINE( 809)							c_ = (i1 + (int)2);
HXLINE( 811)							iax = (ind->get(a_) * (int)2);
HXLINE( 812)							Int _hx_tmp57 = (ind->get(a_) * (int)2);
HXDLIN( 812)							iay = (_hx_tmp57 + (int)1);
HXLINE( 813)							ibx = (ind->get(b_) * (int)2);
HXLINE( 814)							Int _hx_tmp58 = (ind->get(b_) * (int)2);
HXDLIN( 814)							iby = (_hx_tmp58 + (int)1);
HXLINE( 815)							icx = (ind->get(c_) * (int)2);
HXLINE( 816)							Int _hx_tmp59 = (ind->get(c_) * (int)2);
HXDLIN( 816)							icy = (_hx_tmp59 + (int)1);
HXLINE( 818)							x11 = v->get(iax);
HXLINE( 819)							y1 = v->get(iay);
HXLINE( 820)							x21 = v->get(ibx);
HXLINE( 821)							y2 = v->get(iby);
HXLINE( 822)							x3 = v->get(icx);
HXLINE( 823)							y3 = v->get(icy);
HXLINE( 825)							 ::Dynamic _hx_switch_0 = c9->buffer->o->__get((c9->oPos + (int)3));
            							if (  (_hx_switch_0==(int)0) ){
HXLINE( 838)								if (((((x21 - x11) * (y3 - y1)) - ((y2 - y1) * (x3 - x11))) < (int)0)) {
HXLINE( 840)									hx::AddEq(i1,(int)3);
HXLINE( 841)									continue;
            								}
HXLINE( 838)								goto _hx_goto_8;
            							}
            							if (  (_hx_switch_0==(int)2) ){
HXLINE( 829)								if (!(((((x21 - x11) * (y3 - y1)) - ((y2 - y1) * (x3 - x11))) < (int)0))) {
HXLINE( 831)									hx::AddEq(i1,(int)3);
HXLINE( 832)									continue;
            								}
HXLINE( 829)								goto _hx_goto_8;
            							}
            							/* default */{
            							}
            							_hx_goto_8:;
HXLINE( 849)							if (colorFill) {
HXLINE( 851)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 852)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x11,y1);
HXLINE( 853)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x21,y2);
HXLINE( 854)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x3,y3);
HXLINE( 855)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 856)								Bool _hx_tmp60 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 856)								if (_hx_tmp60) {
HXLINE( 856)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            								}
HXLINE( 857)								hx::AddEq(i1,(int)3);
HXLINE( 858)								continue;
            							}
HXLINE( 862)							 ::lime::math::Matrix3 _hx_tmp61 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___renderTransform->_hx___toMatrix3();
HXDLIN( 862)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix(_hx_tmp61);
HXLINE( 866)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 867)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x11,y1);
HXLINE( 868)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x21,y2);
HXLINE( 869)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x3,y3);
HXLINE( 870)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 873)							uvx1 = (uvt->get(iax) * width1);
HXLINE( 874)							uvx2 = (uvt->get(ibx) * width1);
HXLINE( 875)							uvx3 = (uvt->get(icx) * width1);
HXLINE( 876)							uvy1 = (uvt->get(iay) * height1);
HXLINE( 877)							uvy2 = (uvt->get(iby) * height1);
HXLINE( 878)							uvy3 = (uvt->get(icy) * height1);
HXLINE( 880)							denom = ((((uvx1 * (uvy3 - uvy2)) - (uvx2 * uvy3)) + (uvx3 * uvy2)) + ((uvx2 - uvx3) * uvy1));
HXLINE( 882)							if ((denom == (int)0)) {
HXLINE( 884)								hx::AddEq(i1,(int)3);
HXLINE( 885)								continue;
            							}
HXLINE( 889)							hx::MultEq(x11,currentMatrix->a);
HXLINE( 890)							hx::MultEq(x21,currentMatrix->a);
HXLINE( 891)							hx::MultEq(x3,currentMatrix->a);
HXLINE( 892)							hx::MultEq(y1,currentMatrix->d);
HXLINE( 893)							hx::MultEq(y2,currentMatrix->d);
HXLINE( 894)							hx::MultEq(y3,currentMatrix->d);
HXLINE( 896)							t1 = ((Float)-(((((uvy1 * (x3 - x21)) - (uvy2 * x3)) + (uvy3 * x21)) + ((uvy2 - uvy3) * x11))) / (Float)denom);
HXLINE( 897)							t2 = ((Float)((((uvy2 * y3) + (uvy1 * (y2 - y3))) - (uvy3 * y2)) + ((uvy3 - uvy2) * y1)) / (Float)denom);
HXLINE( 898)							t3 = ((Float)((((uvx1 * (x3 - x21)) - (uvx2 * x3)) + (uvx3 * x21)) + ((uvx2 - uvx3) * x11)) / (Float)denom);
HXLINE( 899)							t4 = ((Float)-(((((uvx2 * y3) + (uvx1 * (y2 - y3))) - (uvx3 * y2)) + ((uvx3 - uvx2) * y1))) / (Float)denom);
HXLINE( 900)							dx = ((Float)(((uvx1 * ((uvy3 * x21) - (uvy2 * x3))) + (uvy1 * ((uvx2 * x3) - (uvx3 * x21)))) + (((uvx3 * uvy2) - (uvx2 * uvy3)) * x11)) / (Float)denom);
HXLINE( 901)							dy = ((Float)(((uvx1 * ((uvy3 * y2) - (uvy2 * y3))) + (uvy1 * ((uvx2 * y3) - (uvx3 * y2)))) + (((uvx3 * uvy2) - (uvx2 * uvy3)) * y1)) / (Float)denom);
HXLINE( 904)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix( ::lime::math::Matrix3_obj::__new(t1,t2,t3,t4,dx,dy));
HXLINE( 905)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern);
HXLINE( 906)							Bool _hx_tmp62 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 906)							if (_hx_tmp62) {
HXLINE( 906)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fill();
            							}
HXLINE( 908)							hx::AddEq(i1,(int)3);
            						}
            					}
            					break;
            					case (int)12: {
HXLINE( 680)						{
HXLINE( 680)							Int _hx_tmp63 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 680)							switch((int)(_hx_tmp63)){
            								case (int)0: {
HXLINE( 680)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 680)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 680)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 680)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 680)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 680)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 680)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 680)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 680)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 680)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 680)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 680)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 680)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 680)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 680)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 680)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 680)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 680)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 680)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 680)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 680)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 680)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 680)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 680)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 680)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 680)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 680)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 680)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 680)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 680)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 680)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 681)						Bool _hx_tmp64;
HXDLIN( 681)						if (stroke) {
HXLINE( 681)							_hx_tmp64 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 681)							_hx_tmp64 = false;
            						}
HXDLIN( 681)						if (_hx_tmp64) {
HXLINE( 683)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(null());
            						}
HXLINE( 687)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 688)						Int _hx_tmp65 = (c10->oPos + (int)1);
HXDLIN( 688)						Int _hx_tmp66 = (c10->bPos + (int)1);
HXDLIN( 688)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createImagePattern(( ( ::openfl::display::BitmapData)(c10->buffer->o->__get(c10->oPos)) ),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get(_hx_tmp65)) ),c10->buffer->b->__get(c10->bPos),c10->buffer->b->__get(_hx_tmp66));
HXLINE( 690)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
            					}
            					break;
            					case (int)13: {
HXLINE( 666)						{
HXLINE( 666)							Int _hx_tmp67 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 666)							switch((int)(_hx_tmp67)){
            								case (int)0: {
HXLINE( 666)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 666)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 666)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 666)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 666)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 666)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 666)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 666)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 666)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 666)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 666)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 666)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 666)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 666)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 666)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 666)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 666)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 666)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 666)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 666)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 666)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 666)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 666)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 666)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 666)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 666)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 666)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 666)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 666)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 666)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 666)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 667)						Bool _hx_tmp68;
HXDLIN( 667)						if (stroke) {
HXLINE( 667)							_hx_tmp68 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 667)							_hx_tmp68 = false;
            						}
HXDLIN( 667)						if (_hx_tmp68) {
HXLINE( 669)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(null());
            						}
HXLINE( 673)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 674)						Int _hx_tmp69 = (c11->iiPos + (int)1);
HXDLIN( 674)						Int _hx_tmp70 = (c11->oPos + (int)1);
HXDLIN( 674)						Int _hx_tmp71 = (c11->oPos + (int)2);
HXDLIN( 674)						Int _hx_tmp72 = (c11->oPos + (int)3);
HXDLIN( 674)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createGradientPattern(c11->buffer->o->__get(c11->oPos),c11->buffer->ii->__get(c11->iiPos).StaticCast< ::Array< Int > >(),c11->buffer->ff->__get(c11->ffPos).StaticCast< ::Array< Float > >(),c11->buffer->ii->__get(_hx_tmp69).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get(_hx_tmp70)) ),c11->buffer->o->__get(_hx_tmp71),c11->buffer->o->__get(_hx_tmp72),c11->buffer->f->__get(c11->fPos));
HXLINE( 676)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
            					}
            					break;
            					case (int)14: {
HXLINE( 595)						{
HXLINE( 595)							Int _hx_tmp73 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 595)							switch((int)(_hx_tmp73)){
            								case (int)0: {
HXLINE( 595)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 595)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 595)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 595)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 595)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 595)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 595)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 595)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 595)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 595)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 595)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 595)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 595)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 595)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 595)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 595)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 595)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 595)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 595)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 595)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 595)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 595)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 595)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 595)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 595)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 595)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 595)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 595)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 595)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 595)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 595)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 596)						Bool _hx_tmp74;
HXDLIN( 596)						if (stroke) {
HXLINE( 596)							_hx_tmp74 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 596)							_hx_tmp74 = false;
            						}
HXDLIN( 596)						if (_hx_tmp74) {
HXLINE( 598)							Bool _hx_tmp75 = hx::IsNull( c12->buffer->o->__get(c12->oPos) );
HXDLIN( 598)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(_hx_tmp75);
            						}
HXLINE( 602)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 604)						Bool _hx_tmp76 = hx::IsNull( c12->buffer->o->__get(c12->oPos) );
HXDLIN( 604)						if (_hx_tmp76) {
HXLINE( 606)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
            						}
            						else {
HXLINE( 610)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
HXLINE( 612)							Float _hx_tmp77;
HXDLIN( 612)							if (hx::IsGreater( c12->buffer->o->__get(c12->oPos),(int)0 )) {
HXLINE( 612)								_hx_tmp77 = c12->buffer->o->__get(c12->oPos);
            							}
            							else {
HXLINE( 612)								_hx_tmp77 = (int)1;
            							}
HXDLIN( 612)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineWidth(_hx_tmp77);
HXLINE( 614)							Bool _hx_tmp78 = hx::IsNull( c12->buffer->o->__get((c12->oPos + (int)3)) );
HXDLIN( 614)							if (_hx_tmp78) {
HXLINE( 616)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineJoin((int)1);
            							}
            							else {
HXLINE( 620)								HX_VARI_NAME(  ::Dynamic,_g21,"_g2") = c12->buffer->o->__get((c12->oPos + (int)3));
HXDLIN( 620)								Int _hx_tmp79;
HXDLIN( 620)								 ::Dynamic _hx_switch_1 = _g21;
            								if (  (_hx_switch_1==(int)0) ){
HXLINE( 620)									_hx_tmp79 = (int)2;
HXDLIN( 620)									goto _hx_goto_9;
            								}
            								if (  (_hx_switch_1==(int)1) ){
HXLINE( 620)									_hx_tmp79 = (int)0;
HXDLIN( 620)									goto _hx_goto_9;
            								}
            								/* default */{
HXLINE( 620)									_hx_tmp79 = (int)1;
            								}
            								_hx_goto_9:;
HXDLIN( 620)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineJoin(_hx_tmp79);
            							}
HXLINE( 630)							Bool _hx_tmp80 = hx::IsNull( c12->buffer->o->__get((c12->oPos + (int)2)) );
HXDLIN( 630)							if (_hx_tmp80) {
HXLINE( 632)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineCap((int)1);
            							}
            							else {
HXLINE( 636)								HX_VARI_NAME(  ::Dynamic,_g22,"_g2") = c12->buffer->o->__get((c12->oPos + (int)2));
HXDLIN( 636)								Int _hx_tmp81;
HXDLIN( 636)								 ::Dynamic _hx_switch_2 = _g22;
            								if (  (_hx_switch_2==(int)0) ){
HXLINE( 636)									_hx_tmp81 = (int)0;
HXDLIN( 636)									goto _hx_goto_10;
            								}
            								if (  (_hx_switch_2==(int)2) ){
HXLINE( 636)									_hx_tmp81 = (int)2;
HXDLIN( 636)									goto _hx_goto_10;
            								}
            								/* default */{
HXLINE( 636)									_hx_tmp81 = (int)1;
            								}
            								_hx_goto_10:;
HXDLIN( 636)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineCap(_hx_tmp81);
            							}
HXLINE( 646)							Int _hx_tmp82 = (c12->fPos + (int)1);
HXDLIN( 646)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_miterLimit(c12->buffer->f->__get(_hx_tmp82));
HXLINE( 648)							HX_VARI( Float,r) = ((Float)hx::UShr(((int)c12->buffer->i->__get(c12->iPos) & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 649)							HX_VARI( Float,g) = ((Float)hx::UShr(((int)c12->buffer->i->__get(c12->iPos) & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 650)							HX_VARI( Float,b) = ((Float)((int)c12->buffer->i->__get(c12->iPos) & (int)(int)255) / (Float)(int)255);
HXLINE( 652)							Bool _hx_tmp83 = (c12->buffer->f->__get(c12->fPos) == (int)1);
HXDLIN( 652)							if (_hx_tmp83) {
HXLINE( 654)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGB(r,g,b);
            							}
            							else {
HXLINE( 658)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGBA(r,g,b,c12->buffer->f->__get(c12->fPos));
            							}
            						}
            					}
            					break;
            					case (int)15: {
HXLINE( 574)						{
HXLINE( 574)							Int _hx_tmp84 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 574)							switch((int)(_hx_tmp84)){
            								case (int)0: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 574)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 574)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 574)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 574)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 574)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 574)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 574)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 574)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 574)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 574)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 574)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 574)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 574)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 574)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 575)						hasPath = true;
HXLINE( 576)						Float _hx_tmp85 = (c13->buffer->f->__get(c13->fPos) - offsetX);
HXDLIN( 576)						Float _hx_tmp86 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 576)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(_hx_tmp85,(_hx_tmp86 - offsetY));
HXLINE( 578)						positionX = c13->buffer->f->__get(c13->fPos);
HXLINE( 579)						positionY = c13->buffer->f->__get((c13->fPos + (int)1));
            					}
            					break;
            					case (int)16: {
HXLINE( 583)						{
HXLINE( 583)							Int _hx_tmp87 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 583)							switch((int)(_hx_tmp87)){
            								case (int)0: {
HXLINE( 583)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 583)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 583)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 583)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 583)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 583)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 583)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 583)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 583)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 583)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 583)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 583)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 583)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 583)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 583)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 583)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 583)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 583)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 583)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 583)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 583)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 583)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 583)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 583)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 583)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 583)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 583)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 583)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 583)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 583)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 583)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE( 584)						Float _hx_tmp88 = (c14->buffer->f->__get(c14->fPos) - offsetX);
HXDLIN( 584)						Float _hx_tmp89 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN( 584)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(_hx_tmp88,(_hx_tmp89 - offsetY));
HXLINE( 586)						positionX = c14->buffer->f->__get(c14->fPos);
HXLINE( 587)						positionY = c14->buffer->f->__get((c14->fPos + (int)1));
HXLINE( 589)						closeGap = true;
HXLINE( 590)						startX = c14->buffer->f->__get(c14->fPos);
HXLINE( 591)						startY = c14->buffer->f->__get((c14->fPos + (int)1));
            					}
            					break;
            					default:{
HXLINE( 914)						{
HXLINE( 914)							Int _hx_tmp90 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 914)							switch((int)(_hx_tmp90)){
            								case (int)0: {
HXLINE( 914)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 914)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 914)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 914)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 914)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 914)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 914)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 914)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 914)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 914)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 914)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 914)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 914)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 914)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 914)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 914)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 914)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 914)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 914)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 914)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 914)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 914)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 914)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 914)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 914)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 914)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 914)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 914)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 914)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 914)						data->prev = type;
            					}
            				}
            			}
            			_hx_goto_5:;
            		}
HXLINE( 920)		data->destroy();
HXLINE( 922)		if (hasPath) {
HXLINE( 924)			Bool _hx_tmp91;
HXDLIN( 924)			if (stroke) {
HXLINE( 924)				_hx_tmp91 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            			}
            			else {
HXLINE( 924)				_hx_tmp91 = false;
            			}
HXDLIN( 924)			if (_hx_tmp91) {
HXLINE( 926)				Bool _hx_tmp92;
HXDLIN( 926)				if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill) {
HXLINE( 926)					_hx_tmp92 = closeGap;
            				}
            				else {
HXLINE( 926)					_hx_tmp92 = false;
            				}
HXDLIN( 926)				if (_hx_tmp92) {
HXLINE( 928)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((startX - offsetX),(startY - offsetY));
            				}
            				else {
HXLINE( 930)					Bool _hx_tmp93;
HXDLIN( 930)					Bool _hx_tmp94;
HXDLIN( 930)					if (closeGap) {
HXLINE( 930)						_hx_tmp94 = (positionX == startX);
            					}
            					else {
HXLINE( 930)						_hx_tmp94 = false;
            					}
HXDLIN( 930)					if (_hx_tmp94) {
HXLINE( 930)						_hx_tmp93 = (positionY == startY);
            					}
            					else {
HXLINE( 930)						_hx_tmp93 = false;
            					}
HXDLIN( 930)					if (_hx_tmp93) {
HXLINE( 932)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath(true);
            					}
            				}
HXLINE( 936)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern);
HXLINE( 937)				Bool _hx_tmp95 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 937)				if (_hx_tmp95) {
HXLINE( 937)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->strokePreserve();
            				}
            			}
HXLINE( 941)			Bool _hx_tmp96;
HXDLIN( 941)			if (!(stroke)) {
HXLINE( 941)				_hx_tmp96 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
            			}
            			else {
HXLINE( 941)				_hx_tmp96 = false;
            			}
HXDLIN( 941)			if (_hx_tmp96) {
HXLINE( 943)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(-(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x),-(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y));
HXLINE( 945)				Bool _hx_tmp97 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix );
HXDLIN( 945)				if (_hx_tmp97) {
HXLINE( 947)					HX_VARI(  ::openfl::geom::Matrix,matrix) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix->clone();
HXLINE( 948)					matrix->invert();
HXLINE( 950)					Bool _hx_tmp98 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix );
HXDLIN( 950)					if (_hx_tmp98) {
HXLINE( 952)						matrix->concat(::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix);
            					}
HXLINE( 956)					 ::Dynamic _hx_tmp99 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern;
HXDLIN( 956)					 ::lime::math::Matrix3 _hx_tmp100 = matrix->_hx___toMatrix3();
HXDLIN( 956)					::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(_hx_tmp99,_hx_tmp100);
            				}
HXLINE( 960)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern);
HXLINE( 962)				Bool _hx_tmp101 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix );
HXDLIN( 962)				if (_hx_tmp101) {
HXLINE( 964)					 ::lime::math::Matrix3 _hx_tmp102 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix->_hx___toMatrix3();
HXDLIN( 964)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->transform(_hx_tmp102);
HXLINE( 965)					Bool _hx_tmp103 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 965)					if (_hx_tmp103) {
HXLINE( 965)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            					}
HXLINE( 966)					 ::lime::math::Matrix3 _hx_tmp104 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::inversePendingMatrix->_hx___toMatrix3();
HXDLIN( 966)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->transform(_hx_tmp104);
            				}
            				else {
HXLINE( 970)					Bool _hx_tmp105 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 970)					if (_hx_tmp105) {
HXLINE( 970)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            					}
            				}
HXLINE( 974)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y);
HXLINE( 975)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,playCommands,(void))

void CairoGraphics_obj::quadraticCurveTo(Float cx,Float cy,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","quadraticCurveTo",0x01a3b18e,"openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo","openfl/_internal/renderer/cairo/CairoGraphics.hx",983,0x744ae94c)
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 985)		HX_VARI(  ::lime::math::Vector2,current) = null();
HXLINE( 987)		Bool _hx_tmp = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->get_hasCurrentPoint());
HXDLIN( 987)		if (_hx_tmp) {
HXLINE( 989)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(cx,cy);
HXLINE( 990)			current =  ::lime::math::Vector2_obj::__new(cx,cy);
            		}
            		else {
HXLINE( 994)			current = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->get_currentPoint();
            		}
HXLINE( 998)		HX_VARI( Float,cx1) = (current->x + (((Float)0.66666666666666663) * (cx - current->x)));
HXLINE( 999)		HX_VARI( Float,cy1) = (current->y + (((Float)0.66666666666666663) * (cy - current->y)));
HXLINE(1003)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(cx1,cy1,(x + (((Float)0.66666666666666663) * (cx - x))),(y + (((Float)0.66666666666666663) * (cy - y))),x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CairoGraphics_obj,quadraticCurveTo,(void))

void CairoGraphics_obj::render( ::openfl::display::Graphics graphics, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::geom::Matrix parentTransform){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","render",0x3c3e61d2,"openfl._internal.renderer.cairo.CairoGraphics.render","openfl/_internal/renderer/cairo/CairoGraphics.hx",1008,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(parentTransform,"parentTransform")
HXLINE(1012)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics = graphics;
HXLINE(1013)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::allowSmoothing = renderSession->allowSmoothing;
HXLINE(1014)		graphics->_hx___update();
HXLINE(1016)		Bool _hx_tmp;
HXDLIN(1016)		if (!(!(graphics->_hx___dirty))) {
HXLINE(1016)			_hx_tmp = graphics->_hx___managed;
            		}
            		else {
HXLINE(1016)			_hx_tmp = true;
            		}
HXDLIN(1016)		if (_hx_tmp) {
HXLINE(1016)			return;
            		}
HXLINE(1018)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = graphics->_hx___bounds;
HXLINE(1020)		HX_VARI( Int,width) = graphics->_hx___width;
HXLINE(1021)		HX_VARI( Int,height) = graphics->_hx___height;
HXLINE(1023)		Bool _hx_tmp1;
HXDLIN(1023)		Bool _hx_tmp2;
HXDLIN(1023)		Bool _hx_tmp3;
HXDLIN(1023)		Bool _hx_tmp4;
HXDLIN(1023)		Bool _hx_tmp5 = !(!(graphics->_hx___visible));
HXDLIN(1023)		if (_hx_tmp5) {
HXLINE(1023)			Int _hx_tmp6 = graphics->_hx___commands->get_length();
HXDLIN(1023)			_hx_tmp4 = (_hx_tmp6 == (int)0);
            		}
            		else {
HXLINE(1023)			_hx_tmp4 = true;
            		}
HXDLIN(1023)		if (!(_hx_tmp4)) {
HXLINE(1023)			_hx_tmp3 = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds );
            		}
            		else {
HXLINE(1023)			_hx_tmp3 = true;
            		}
HXDLIN(1023)		if (!(_hx_tmp3)) {
HXLINE(1023)			_hx_tmp2 = (width < (int)1);
            		}
            		else {
HXLINE(1023)			_hx_tmp2 = true;
            		}
HXDLIN(1023)		if (!(_hx_tmp2)) {
HXLINE(1023)			_hx_tmp1 = (height < (int)1);
            		}
            		else {
HXLINE(1023)			_hx_tmp1 = true;
            		}
HXDLIN(1023)		if (_hx_tmp1) {
HXLINE(1025)			graphics->_hx___cairo = null();
HXLINE(1026)			graphics->_hx___bitmap = null();
            		}
            		else {
HXLINE(1030)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting = false;
HXLINE(1032)			Bool _hx_tmp7 = hx::IsNotNull( graphics->_hx___cairo );
HXDLIN(1032)			if (_hx_tmp7) {
HXLINE(1034)				HX_VARI(  ::Dynamic,surface) = graphics->_hx___cairo->get_target();
HXLINE(1036)				Bool _hx_tmp8;
HXDLIN(1036)				Int _hx_tmp9 = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_width(surface);
HXDLIN(1036)				if ((width == _hx_tmp9)) {
HXLINE(1036)					Int _hx_tmp10 = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_height(surface);
HXDLIN(1036)					_hx_tmp8 = (height != _hx_tmp10);
            				}
            				else {
HXLINE(1036)					_hx_tmp8 = true;
            				}
HXDLIN(1036)				if (_hx_tmp8) {
HXLINE(1038)					graphics->_hx___cairo = null();
            				}
            			}
HXLINE(1044)			Bool _hx_tmp11;
HXDLIN(1044)			Bool _hx_tmp12 = hx::IsNotNull( graphics->_hx___cairo );
HXDLIN(1044)			if (_hx_tmp12) {
HXLINE(1044)				_hx_tmp11 = hx::IsNull( graphics->_hx___bitmap );
            			}
            			else {
HXLINE(1044)				_hx_tmp11 = true;
            			}
HXDLIN(1044)			if (_hx_tmp11) {
HXLINE(1046)				HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__new(width,height,true,(int)0);
HXLINE(1047)				HX_VARI_NAME(  ::Dynamic,surface1,"surface") = bitmap->getSurface();
HXLINE(1048)				graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__new(surface1);
HXLINE(1049)				graphics->_hx___bitmap = bitmap;
            			}
HXLINE(1053)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo = graphics->_hx___cairo;
HXLINE(1054)			 ::lime::math::Matrix3 _hx_tmp13 = graphics->_hx___renderTransform->_hx___toMatrix3();
HXDLIN(1054)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix(_hx_tmp13);
HXLINE(1056)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)0);
HXLINE(1057)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->paint();
HXLINE(1058)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)2);
HXLINE(1060)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
HXLINE(1061)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
HXLINE(1063)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE(1064)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
HXLINE(1066)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = null();
HXLINE(1067)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = null();
HXLINE(1069)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE(1071)			{
HXLINE(1071)				HX_VARI( Int,_g) = (int)0;
HXDLIN(1071)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN(1071)				while((_g < _g1->length)){
HXLINE(1071)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(1071)					++_g;
HXLINE(1073)					Int _hx_tmp14 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(1073)					switch((int)(_hx_tmp14)){
            						case (int)0: case (int)1: case (int)2: {
HXLINE(1124)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE(1125)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE(1127)							if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn() )) {
HXLINE(1129)								{
HXLINE(1129)									Int _hx_tmp15 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1129)									switch((int)(_hx_tmp15)){
            										case (int)0: {
HXLINE(1129)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1129)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE(1129)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1129)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE(1129)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1129)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1129)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1129)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE(1129)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE(1129)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE(1129)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE(1129)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE(1129)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)8: {
HXLINE(1129)											hx::AddEq(data->fPos,(int)5);
HXDLIN(1129)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE(1129)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE(1129)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1129)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)13: {
HXLINE(1129)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1129)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1129)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1129)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)14: {
HXLINE(1129)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1129)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1129)											hx::AddEq(data->fPos,(int)2);
HXDLIN(1129)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE(1129)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)16: {
HXLINE(1129)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE(1129)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE(1129)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(1129)								HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE(1130)								 ::openfl::display::BitmapData _hx_tmp16 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(1130)								 ::openfl::geom::Matrix _hx_tmp17 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN(1130)								Bool _hx_tmp18 = c->buffer->b->__get(c->bPos);
HXDLIN(1130)								Bool _hx_tmp19 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN(1130)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginBitmapFill(_hx_tmp16,_hx_tmp17,_hx_tmp18,_hx_tmp19);
HXLINE(1131)								 ::openfl::display::BitmapData _hx_tmp20 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(1131)								 ::openfl::geom::Matrix _hx_tmp21 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN(1131)								Bool _hx_tmp22 = c->buffer->b->__get(c->bPos);
HXDLIN(1131)								Bool _hx_tmp23 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN(1131)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginBitmapFill(_hx_tmp20,_hx_tmp21,_hx_tmp22,_hx_tmp23);
            							}
            							else {
HXLINE(1133)								if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn() )) {
HXLINE(1135)									{
HXLINE(1135)										Int _hx_tmp24 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1135)										switch((int)(_hx_tmp24)){
            											case (int)0: {
HXLINE(1135)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1135)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE(1135)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1135)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE(1135)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1135)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1135)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1135)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE(1135)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE(1135)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE(1135)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE(1135)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE(1135)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)8: {
HXLINE(1135)												hx::AddEq(data->fPos,(int)5);
HXDLIN(1135)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE(1135)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)11: {
            											}
            											break;
            											case (int)12: {
HXLINE(1135)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1135)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)13: {
HXLINE(1135)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1135)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1135)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1135)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)14: {
HXLINE(1135)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1135)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1135)												hx::AddEq(data->fPos,(int)2);
HXDLIN(1135)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE(1135)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)16: {
HXLINE(1135)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE(1135)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE(1135)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(1135)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE(1136)									Int _hx_tmp25 = (c1->iiPos + (int)1);
HXDLIN(1136)									Int _hx_tmp26 = (c1->oPos + (int)1);
HXDLIN(1136)									Int _hx_tmp27 = (c1->oPos + (int)2);
HXDLIN(1136)									Int _hx_tmp28 = (c1->oPos + (int)3);
HXDLIN(1136)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp25).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp26)) ),c1->buffer->o->__get(_hx_tmp27),c1->buffer->o->__get(_hx_tmp28),c1->buffer->f->__get(c1->fPos));
HXLINE(1137)									Int _hx_tmp29 = (c1->iiPos + (int)1);
HXDLIN(1137)									Int _hx_tmp30 = (c1->oPos + (int)1);
HXDLIN(1137)									Int _hx_tmp31 = (c1->oPos + (int)2);
HXDLIN(1137)									Int _hx_tmp32 = (c1->oPos + (int)3);
HXDLIN(1137)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp29).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp30)) ),c1->buffer->o->__get(_hx_tmp31),c1->buffer->o->__get(_hx_tmp32),c1->buffer->f->__get(c1->fPos));
            								}
            								else {
HXLINE(1141)									{
HXLINE(1141)										Int _hx_tmp33 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1141)										switch((int)(_hx_tmp33)){
            											case (int)0: {
HXLINE(1141)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1141)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE(1141)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1141)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE(1141)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1141)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1141)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1141)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE(1141)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE(1141)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE(1141)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE(1141)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE(1141)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)8: {
HXLINE(1141)												hx::AddEq(data->fPos,(int)5);
HXDLIN(1141)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE(1141)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)11: {
            											}
            											break;
            											case (int)12: {
HXLINE(1141)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1141)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)13: {
HXLINE(1141)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1141)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1141)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1141)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)14: {
HXLINE(1141)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1141)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1141)												hx::AddEq(data->fPos,(int)2);
HXDLIN(1141)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE(1141)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)16: {
HXLINE(1141)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE(1141)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE(1141)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(1141)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE(1142)									Int _hx_tmp34 = c2->buffer->i->__get(c2->iPos);
HXDLIN(1142)									Float _hx_tmp35 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1142)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginFill(_hx_tmp34,_hx_tmp35);
HXLINE(1143)									Int _hx_tmp36 = c2->buffer->i->__get(c2->iPos);
HXDLIN(1143)									Float _hx_tmp37 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1143)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginFill(_hx_tmp36,_hx_tmp37);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1077)							{
HXLINE(1077)								Int _hx_tmp38 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1077)								switch((int)(_hx_tmp38)){
            									case (int)0: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1077)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1077)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1077)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1077)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1077)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1077)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1077)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1077)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1077)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1077)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1077)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1077)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1077)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1077)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE(1078)							Float _hx_tmp39 = c3->buffer->f->__get(c3->fPos);
HXDLIN(1078)							Float _hx_tmp40 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN(1078)							Float _hx_tmp41 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN(1078)							Float _hx_tmp42 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN(1078)							Float _hx_tmp43 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN(1078)							Float _hx_tmp44 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN(1078)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->cubicCurveTo(_hx_tmp39,_hx_tmp40,_hx_tmp41,_hx_tmp42,_hx_tmp43,_hx_tmp44);
HXLINE(1079)							Float _hx_tmp45 = c3->buffer->f->__get(c3->fPos);
HXDLIN(1079)							Float _hx_tmp46 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN(1079)							Float _hx_tmp47 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN(1079)							Float _hx_tmp48 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN(1079)							Float _hx_tmp49 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN(1079)							Float _hx_tmp50 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN(1079)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->cubicCurveTo(_hx_tmp45,_hx_tmp46,_hx_tmp47,_hx_tmp48,_hx_tmp49,_hx_tmp50);
            						}
            						break;
            						case (int)4: {
HXLINE(1083)							{
HXLINE(1083)								Int _hx_tmp51 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1083)								switch((int)(_hx_tmp51)){
            									case (int)0: {
HXLINE(1083)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1083)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1083)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1083)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1083)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1083)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1083)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1083)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1083)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1083)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1083)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1083)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1083)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1083)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1083)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1083)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1083)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1083)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1083)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1083)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1083)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1083)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1083)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1083)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1083)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1083)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1083)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1083)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1083)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1083)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1083)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE(1084)							Float _hx_tmp52 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1084)							Float _hx_tmp53 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1084)							Float _hx_tmp54 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1084)							Float _hx_tmp55 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1084)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->curveTo(_hx_tmp52,_hx_tmp53,_hx_tmp54,_hx_tmp55);
HXLINE(1085)							Float _hx_tmp56 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1085)							Float _hx_tmp57 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1085)							Float _hx_tmp58 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1085)							Float _hx_tmp59 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1085)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->curveTo(_hx_tmp56,_hx_tmp57,_hx_tmp58,_hx_tmp59);
            						}
            						break;
            						case (int)5: {
HXLINE(1149)							{
HXLINE(1149)								Int _hx_tmp60 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1149)								switch((int)(_hx_tmp60)){
            									case (int)0: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1149)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1149)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1149)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1149)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1149)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1149)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1149)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1149)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1149)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1149)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1149)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1149)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1149)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1149)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE(1150)							Float _hx_tmp61 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1150)							Float _hx_tmp62 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1150)							Float _hx_tmp63 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1150)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawCircle(_hx_tmp61,_hx_tmp62,_hx_tmp63);
HXLINE(1151)							Float _hx_tmp64 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1151)							Float _hx_tmp65 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1151)							Float _hx_tmp66 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1151)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawCircle(_hx_tmp64,_hx_tmp65,_hx_tmp66);
            						}
            						break;
            						case (int)6: {
HXLINE(1155)							{
HXLINE(1155)								Int _hx_tmp67 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1155)								switch((int)(_hx_tmp67)){
            									case (int)0: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1155)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1155)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1155)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1155)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1155)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1155)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1155)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1155)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1155)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1155)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1155)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1155)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1155)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1155)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE(1156)							Float _hx_tmp68 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1156)							Float _hx_tmp69 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1156)							Float _hx_tmp70 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN(1156)							Float _hx_tmp71 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN(1156)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawEllipse(_hx_tmp68,_hx_tmp69,_hx_tmp70,_hx_tmp71);
HXLINE(1157)							Float _hx_tmp72 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1157)							Float _hx_tmp73 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1157)							Float _hx_tmp74 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN(1157)							Float _hx_tmp75 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN(1157)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawEllipse(_hx_tmp72,_hx_tmp73,_hx_tmp74,_hx_tmp75);
            						}
            						break;
            						case (int)7: {
HXLINE(1161)							{
HXLINE(1161)								Int _hx_tmp76 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1161)								switch((int)(_hx_tmp76)){
            									case (int)0: {
HXLINE(1161)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1161)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1161)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1161)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1161)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1161)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1161)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1161)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1161)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1161)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1161)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1161)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1161)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1161)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1161)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1161)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1161)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1161)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1161)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1161)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1161)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1161)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1161)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1161)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1161)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1161)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1161)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1161)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1161)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1161)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1161)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE(1162)							Float _hx_tmp77 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1162)							Float _hx_tmp78 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1162)							Float _hx_tmp79 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN(1162)							Float _hx_tmp80 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN(1162)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRect(_hx_tmp77,_hx_tmp78,_hx_tmp79,_hx_tmp80);
HXLINE(1163)							Float _hx_tmp81 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1163)							Float _hx_tmp82 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1163)							Float _hx_tmp83 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN(1163)							Float _hx_tmp84 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN(1163)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRect(_hx_tmp81,_hx_tmp82,_hx_tmp83,_hx_tmp84);
            						}
            						break;
            						case (int)8: {
HXLINE(1167)							{
HXLINE(1167)								Int _hx_tmp85 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1167)								switch((int)(_hx_tmp85)){
            									case (int)0: {
HXLINE(1167)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1167)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1167)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1167)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1167)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1167)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1167)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1167)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1167)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1167)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1167)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1167)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1167)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1167)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1167)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1167)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1167)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1167)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1167)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1167)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1167)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1167)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1167)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1167)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1167)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1167)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1167)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1167)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1167)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1167)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1167)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE(1168)							Float _hx_tmp86 = c8->buffer->f->__get(c8->fPos);
HXDLIN(1168)							Float _hx_tmp87 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN(1168)							Float _hx_tmp88 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN(1168)							Float _hx_tmp89 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN(1168)							Float _hx_tmp90 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN(1168)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRoundRect(_hx_tmp86,_hx_tmp87,_hx_tmp88,_hx_tmp89,_hx_tmp90,c8->buffer->o->__get(c8->oPos));
HXLINE(1169)							Float _hx_tmp91 = c8->buffer->f->__get(c8->fPos);
HXDLIN(1169)							Float _hx_tmp92 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN(1169)							Float _hx_tmp93 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN(1169)							Float _hx_tmp94 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN(1169)							Float _hx_tmp95 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN(1169)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRoundRect(_hx_tmp91,_hx_tmp92,_hx_tmp93,_hx_tmp94,_hx_tmp95,c8->buffer->o->__get(c8->oPos));
            						}
            						break;
            						case (int)10: {
HXLINE(1173)							{
HXLINE(1173)								Int _hx_tmp96 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1173)								switch((int)(_hx_tmp96)){
            									case (int)0: {
HXLINE(1173)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1173)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1173)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1173)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1173)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1173)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1173)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1173)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1173)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1173)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1173)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1173)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1173)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1173)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1173)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1173)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1173)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1173)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1173)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1173)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1173)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1173)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1173)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1173)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1173)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1173)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1173)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1173)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1173)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1173)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN(1173)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE(1174)							Int _hx_tmp97 = (c9->oPos + (int)1);
HXDLIN(1174)							Int _hx_tmp98 = (c9->oPos + (int)2);
HXDLIN(1174)							Int _hx_tmp99 = (c9->oPos + (int)3);
HXDLIN(1174)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawTriangles(( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::_Vector::IntVector)(c9->buffer->o->__get(_hx_tmp97)) ),( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(_hx_tmp98)) ),c9->buffer->o->__get(_hx_tmp99));
            						}
            						break;
            						case (int)11: {
HXLINE(1101)							{
HXLINE(1101)								{
HXLINE(1101)									Int _hx_tmp100 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1101)									switch((int)(_hx_tmp100)){
            										case (int)0: {
HXLINE(1101)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1101)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE(1101)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1101)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE(1101)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1101)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1101)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1101)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE(1101)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE(1101)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE(1101)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE(1101)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE(1101)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)8: {
HXLINE(1101)											hx::AddEq(data->fPos,(int)5);
HXDLIN(1101)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE(1101)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)11: {
            										}
            										break;
            										case (int)12: {
HXLINE(1101)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1101)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)13: {
HXLINE(1101)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1101)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1101)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1101)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)14: {
HXLINE(1101)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1101)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1101)											hx::AddEq(data->fPos,(int)2);
HXDLIN(1101)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE(1101)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)16: {
HXLINE(1101)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE(1101)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE(1101)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            							}
HXLINE(1102)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE(1103)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE(1104)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE(1105)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            						}
            						break;
            						case (int)12: {
HXLINE(1114)							{
HXLINE(1114)								Int _hx_tmp101 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1114)								switch((int)(_hx_tmp101)){
            									case (int)0: {
HXLINE(1114)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1114)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1114)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1114)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1114)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1114)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1114)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1114)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1114)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1114)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1114)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1114)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1114)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1114)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1114)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1114)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1114)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1114)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1114)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1114)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1114)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1114)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1114)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1114)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1114)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1114)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1114)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1114)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1114)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1114)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN(1114)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE(1115)							Int _hx_tmp102 = (c10->oPos + (int)1);
HXDLIN(1115)							Int _hx_tmp103 = (c10->bPos + (int)1);
HXDLIN(1115)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c10->buffer->o->__get(c10->oPos)) ),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get(_hx_tmp102)) ),c10->buffer->b->__get(c10->bPos),c10->buffer->b->__get(_hx_tmp103));
            						}
            						break;
            						case (int)13: {
HXLINE(1109)							{
HXLINE(1109)								Int _hx_tmp104 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1109)								switch((int)(_hx_tmp104)){
            									case (int)0: {
HXLINE(1109)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1109)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1109)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1109)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1109)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1109)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1109)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1109)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1109)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1109)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1109)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1109)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1109)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1109)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1109)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1109)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1109)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1109)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1109)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1109)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1109)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1109)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1109)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1109)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1109)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1109)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1109)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1109)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1109)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1109)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN(1109)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE(1110)							Int _hx_tmp105 = (c11->iiPos + (int)1);
HXDLIN(1110)							Int _hx_tmp106 = (c11->oPos + (int)1);
HXDLIN(1110)							Int _hx_tmp107 = (c11->oPos + (int)2);
HXDLIN(1110)							Int _hx_tmp108 = (c11->oPos + (int)3);
HXDLIN(1110)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineGradientStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->ii->__get(c11->iiPos).StaticCast< ::Array< Int > >(),c11->buffer->ff->__get(c11->ffPos).StaticCast< ::Array< Float > >(),c11->buffer->ii->__get(_hx_tmp105).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get(_hx_tmp106)) ),c11->buffer->o->__get(_hx_tmp107),c11->buffer->o->__get(_hx_tmp108),c11->buffer->f->__get(c11->fPos));
            						}
            						break;
            						case (int)14: {
HXLINE(1119)							{
HXLINE(1119)								Int _hx_tmp109 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1119)								switch((int)(_hx_tmp109)){
            									case (int)0: {
HXLINE(1119)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1119)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1119)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1119)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1119)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1119)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1119)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1119)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1119)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1119)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1119)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1119)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1119)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1119)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1119)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1119)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1119)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1119)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1119)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1119)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1119)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1119)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1119)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1119)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1119)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1119)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1119)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1119)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1119)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1119)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN(1119)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE(1120)							Int _hx_tmp110 = (c12->oPos + (int)1);
HXDLIN(1120)							Int _hx_tmp111 = (c12->oPos + (int)2);
HXDLIN(1120)							Int _hx_tmp112 = (c12->oPos + (int)3);
HXDLIN(1120)							Int _hx_tmp113 = (c12->fPos + (int)1);
HXDLIN(1120)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineStyle(c12->buffer->o->__get(c12->oPos),c12->buffer->i->__get(c12->iPos),c12->buffer->f->__get(c12->fPos),c12->buffer->b->__get(c12->bPos),c12->buffer->o->__get(_hx_tmp110),c12->buffer->o->__get(_hx_tmp111),c12->buffer->o->__get(_hx_tmp112),c12->buffer->f->__get(_hx_tmp113));
            						}
            						break;
            						case (int)15: {
HXLINE(1089)							{
HXLINE(1089)								Int _hx_tmp114 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1089)								switch((int)(_hx_tmp114)){
            									case (int)0: {
HXLINE(1089)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1089)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1089)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1089)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1089)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1089)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1089)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1089)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1089)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1089)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1089)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1089)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1089)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1089)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1089)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1089)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1089)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1089)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1089)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1089)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1089)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1089)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1089)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1089)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1089)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1089)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1089)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1089)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1089)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1089)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1089)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE(1090)							Float _hx_tmp115 = c13->buffer->f->__get(c13->fPos);
HXDLIN(1090)							Float _hx_tmp116 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN(1090)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->lineTo(_hx_tmp115,_hx_tmp116);
HXLINE(1091)							Float _hx_tmp117 = c13->buffer->f->__get(c13->fPos);
HXDLIN(1091)							Float _hx_tmp118 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN(1091)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineTo(_hx_tmp117,_hx_tmp118);
            						}
            						break;
            						case (int)16: {
HXLINE(1095)							{
HXLINE(1095)								Int _hx_tmp119 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1095)								switch((int)(_hx_tmp119)){
            									case (int)0: {
HXLINE(1095)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1095)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1095)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1095)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1095)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1095)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1095)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1095)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1095)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1095)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1095)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1095)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1095)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1095)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1095)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1095)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1095)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1095)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1095)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1095)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1095)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1095)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1095)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1095)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1095)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1095)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1095)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1095)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1095)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1095)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1095)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE(1096)							Float _hx_tmp120 = c14->buffer->f->__get(c14->fPos);
HXDLIN(1096)							Float _hx_tmp121 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN(1096)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->moveTo(_hx_tmp120,_hx_tmp121);
HXLINE(1097)							Float _hx_tmp122 = c14->buffer->f->__get(c14->fPos);
HXDLIN(1097)							Float _hx_tmp123 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN(1097)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->moveTo(_hx_tmp122,_hx_tmp123);
            						}
            						break;
            						default:{
HXLINE(1178)							{
HXLINE(1178)								Int _hx_tmp124 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1178)								switch((int)(_hx_tmp124)){
            									case (int)0: {
HXLINE(1178)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1178)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1178)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1178)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1178)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1178)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1178)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1178)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1178)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1178)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1178)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1178)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1178)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1178)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1178)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1178)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1178)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1178)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1178)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1178)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1178)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1178)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1178)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1178)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1178)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1178)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1178)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1178)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1178)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1178)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE(1184)			Int _hx_tmp125 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->get_length();
HXDLIN(1184)			if ((_hx_tmp125 > (int)0)) {
HXLINE(1186)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
            			}
HXLINE(1190)			Int _hx_tmp126 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->get_length();
HXDLIN(1190)			if ((_hx_tmp126 > (int)0)) {
HXLINE(1192)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
            			}
HXLINE(1196)			data->destroy();
HXLINE(1198)			graphics->_hx___bitmap->image->dirty = true;
HXLINE(1199)			graphics->_hx___bitmap->image->version++;
            		}
HXLINE(1203)		graphics->set___dirty(false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,render,(void))

void CairoGraphics_obj::renderMask( ::openfl::display::Graphics graphics, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","renderMask",0x2ed81fde,"openfl._internal.renderer.cairo.CairoGraphics.renderMask","openfl/_internal/renderer/cairo/CairoGraphics.hx",1212,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1212)		Int _hx_tmp = graphics->_hx___commands->get_length();
HXDLIN(1212)		if ((_hx_tmp != (int)0)) {
HXLINE(1214)			HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(1222)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE(1224)			{
HXLINE(1224)				HX_VARI( Int,_g) = (int)0;
HXDLIN(1224)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN(1224)				while((_g < _g1->length)){
HXLINE(1224)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(1224)					++_g;
HXLINE(1226)					Int _hx_tmp1 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(1226)					switch((int)(_hx_tmp1)){
            						case (int)3: {
HXLINE(1230)							{
HXLINE(1230)								Int _hx_tmp2 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1230)								switch((int)(_hx_tmp2)){
            									case (int)0: {
HXLINE(1230)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1230)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1230)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1230)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1230)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1230)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1230)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1230)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1230)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1230)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1230)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1230)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1230)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1230)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1230)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1230)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1230)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1230)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1230)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1230)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1230)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1230)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1230)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1230)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1230)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1230)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1230)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1230)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1230)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1230)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1230)							HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE(1231)							Float _hx_tmp3 = c->buffer->f->__get(c->fPos);
HXDLIN(1231)							Float _hx_tmp4 = c->buffer->f->__get((c->fPos + (int)1));
HXDLIN(1231)							Float _hx_tmp5 = c->buffer->f->__get((c->fPos + (int)2));
HXDLIN(1231)							Float _hx_tmp6 = c->buffer->f->__get((c->fPos + (int)3));
HXDLIN(1231)							Float _hx_tmp7 = c->buffer->f->__get((c->fPos + (int)4));
HXDLIN(1231)							Float _hx_tmp8 = c->buffer->f->__get((c->fPos + (int)5));
HXDLIN(1231)							cairo->curveTo(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8);
            						}
            						break;
            						case (int)4: {
HXLINE(1237)							{
HXLINE(1237)								Int _hx_tmp9 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1237)								switch((int)(_hx_tmp9)){
            									case (int)0: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1237)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1237)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1237)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1237)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1237)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1237)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1237)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE(1238)							Float _hx_tmp10 = c1->buffer->f->__get(c1->fPos);
HXDLIN(1238)							Float _hx_tmp11 = c1->buffer->f->__get((c1->fPos + (int)1));
HXDLIN(1238)							Float _hx_tmp12 = c1->buffer->f->__get((c1->fPos + (int)2));
HXDLIN(1238)							Float _hx_tmp13 = c1->buffer->f->__get((c1->fPos + (int)3));
HXDLIN(1238)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13);
            						}
            						break;
            						case (int)5: {
HXLINE(1244)							{
HXLINE(1244)								Int _hx_tmp14 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1244)								switch((int)(_hx_tmp14)){
            									case (int)0: {
HXLINE(1244)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1244)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1244)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1244)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1244)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1244)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1244)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1244)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1244)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1244)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1244)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1244)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1244)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1244)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1244)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1244)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1244)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1244)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1244)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1244)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1244)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1244)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1244)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1244)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1244)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1244)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1244)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1244)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1244)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1244)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1244)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE(1245)							Float _hx_tmp15 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1245)							Float _hx_tmp16 = c2->buffer->f->__get((c2->fPos + (int)1));
HXDLIN(1245)							Float _hx_tmp17 = c2->buffer->f->__get((c2->fPos + (int)2));
HXDLIN(1245)							Float _hx_tmp18 = (::Math_obj::PI * (int)2);
HXDLIN(1245)							cairo->arc(_hx_tmp15,_hx_tmp16,_hx_tmp17,(int)0,_hx_tmp18);
            						}
            						break;
            						case (int)6: {
HXLINE(1249)							{
HXLINE(1249)								Int _hx_tmp19 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1249)								switch((int)(_hx_tmp19)){
            									case (int)0: {
HXLINE(1249)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1249)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1249)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1249)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1249)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1249)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1249)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1249)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1249)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1249)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1249)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1249)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1249)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1249)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1249)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1249)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1249)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1249)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1249)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1249)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1249)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1249)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1249)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1249)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1249)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1249)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1249)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1249)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1249)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1249)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1249)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE(1251)							HX_VARI( Float,x) = c3->buffer->f->__get(c3->fPos);
HXLINE(1252)							HX_VARI( Float,y) = c3->buffer->f->__get((c3->fPos + (int)1));
HXLINE(1253)							HX_VARI( Float,width) = c3->buffer->f->__get((c3->fPos + (int)2));
HXLINE(1254)							HX_VARI( Float,height) = c3->buffer->f->__get((c3->fPos + (int)3));
HXLINE(1256)							hx::SubEq(x,(int)0);
HXLINE(1257)							hx::SubEq(y,(int)0);
HXLINE(1259)							HX_VARI( Float,ox) = (((Float)width / (Float)(int)2) * ((Float).5522848));
HXDLIN(1259)							HX_VARI( Float,oy) = (((Float)height / (Float)(int)2) * ((Float).5522848));
HXDLIN(1259)							HX_VARI( Float,xe) = (x + width);
HXDLIN(1259)							HX_VARI( Float,ye) = (y + height);
HXDLIN(1259)							HX_VARI( Float,xm) = (x + ((Float)width / (Float)(int)2));
HXDLIN(1259)							HX_VARI( Float,ym) = (y + ((Float)height / (Float)(int)2));
HXLINE(1269)							cairo->moveTo(x,ym);
HXLINE(1270)							cairo->curveTo(x,(ym - oy),(xm - ox),y,xm,y);
HXLINE(1271)							cairo->curveTo((xm + ox),y,xe,(ym - oy),xe,ym);
HXLINE(1272)							cairo->curveTo(xe,(ym + oy),(xm + ox),ye,xm,ye);
HXLINE(1273)							cairo->curveTo((xm - ox),ye,x,(ym + oy),x,ym);
            						}
            						break;
            						case (int)7: {
HXLINE(1278)							{
HXLINE(1278)								Int _hx_tmp20 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1278)								switch((int)(_hx_tmp20)){
            									case (int)0: {
HXLINE(1278)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1278)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1278)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1278)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1278)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1278)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1278)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1278)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1278)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1278)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1278)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1278)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1278)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1278)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1278)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1278)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1278)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1278)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1278)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1278)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1278)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1278)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1278)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1278)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1278)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1278)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1278)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1278)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1278)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1278)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1278)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE(1279)							Float _hx_tmp21 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1279)							Float _hx_tmp22 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1279)							Float _hx_tmp23 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1279)							Float _hx_tmp24 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1279)							cairo->rectangle(_hx_tmp21,_hx_tmp22,_hx_tmp23,_hx_tmp24);
            						}
            						break;
            						case (int)8: {
HXLINE(1283)							{
HXLINE(1283)								Int _hx_tmp25 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1283)								switch((int)(_hx_tmp25)){
            									case (int)0: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1283)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1283)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1283)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1283)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1283)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1283)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1283)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE(1284)							Float _hx_tmp26 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1284)							Float _hx_tmp27 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1284)							Float _hx_tmp28 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1284)							Float _hx_tmp29 = c5->buffer->f->__get((c5->fPos + (int)3));
HXDLIN(1284)							Float _hx_tmp30 = c5->buffer->f->__get((c5->fPos + (int)4));
HXDLIN(1284)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::drawRoundRect(_hx_tmp26,_hx_tmp27,_hx_tmp28,_hx_tmp29,_hx_tmp30,c5->buffer->o->__get(c5->oPos));
            						}
            						break;
            						case (int)15: {
HXLINE(1288)							{
HXLINE(1288)								Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1288)								switch((int)(_hx_tmp31)){
            									case (int)0: {
HXLINE(1288)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1288)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1288)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1288)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1288)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1288)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1288)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1288)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1288)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1288)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1288)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1288)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1288)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1288)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1288)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1288)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1288)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1288)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1288)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1288)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1288)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1288)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1288)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1288)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1288)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1288)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1288)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1288)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1288)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1288)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1288)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE(1289)							Float _hx_tmp32 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1289)							Float _hx_tmp33 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1289)							cairo->lineTo(_hx_tmp32,_hx_tmp33);
            						}
            						break;
            						case (int)16: {
HXLINE(1295)							{
HXLINE(1295)								Int _hx_tmp34 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1295)								switch((int)(_hx_tmp34)){
            									case (int)0: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1295)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1295)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1295)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1295)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1295)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1295)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1295)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE(1296)							Float _hx_tmp35 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1296)							Float _hx_tmp36 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1296)							cairo->moveTo(_hx_tmp35,_hx_tmp36);
            						}
            						break;
            						default:{
HXLINE(1302)							{
HXLINE(1302)								Int _hx_tmp37 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1302)								switch((int)(_hx_tmp37)){
            									case (int)0: {
HXLINE(1302)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1302)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1302)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1302)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1302)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1302)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1302)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1302)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1302)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1302)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1302)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1302)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1302)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)8: {
HXLINE(1302)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1302)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1302)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)11: {
            									}
            									break;
            									case (int)12: {
HXLINE(1302)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1302)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)13: {
HXLINE(1302)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1302)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1302)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1302)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)14: {
HXLINE(1302)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1302)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1302)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1302)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1302)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)16: {
HXLINE(1302)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1302)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1302)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE(1308)			data->destroy();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,renderMask,(void))


CairoGraphics_obj::CairoGraphics_obj()
{
}

bool CairoGraphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { outValue = SIN45; return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { outValue = TAN22; return true; }
		if (HX_FIELD_EQ(inName,"cairo") ) { outValue = cairo; return true; }
		if (HX_FIELD_EQ(inName,"isCCW") ) { outValue = isCCW_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { outValue = bounds; return true; }
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { outValue = hasFill; return true; }
		if (HX_FIELD_EQ(inName,"endFill") ) { outValue = endFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hitTest") ) { outValue = hitTest_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { outValue = graphics; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { outValue = hasStroke; return true; }
		if (HX_FIELD_EQ(inName,"closePath") ) { outValue = closePath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endStroke") ) { outValue = endStroke_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { outValue = bitmapFill; return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { outValue = hitTesting; return true; }
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fillPattern") ) { outValue = fillPattern; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { outValue = bitmapRepeat; return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { outValue = fillCommands; return true; }
		if (HX_FIELD_EQ(inName,"normalizeUVT") ) { outValue = normalizeUVT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"playCommands") ) { outValue = playCommands_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { outValue = pendingMatrix; return true; }
		if (HX_FIELD_EQ(inName,"strokePattern") ) { outValue = strokePattern; return true; }
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { outValue = drawRoundRect_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"allowSmoothing") ) { outValue = allowSmoothing; return true; }
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { outValue = strokeCommands; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"quadraticCurveTo") ) { outValue = quadraticCurveTo_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillPatternMatrix") ) { outValue = fillPatternMatrix; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createImagePattern") ) { outValue = createImagePattern_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { outValue = inversePendingMatrix; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createGradientPattern") ) { outValue = createGradientPattern_dyn(); return true; }
	}
	return false;
}

bool CairoGraphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { SIN45=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { TAN22=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"cairo") ) { cairo=ioValue.Cast<  ::lime::graphics::cairo::Cairo >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { hasFill=ioValue.Cast< Bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=ioValue.Cast<  ::openfl::display::Graphics >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { hasStroke=ioValue.Cast< Bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { bitmapFill=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { hitTesting=ioValue.Cast< Bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fillPattern") ) { fillPattern=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { bitmapRepeat=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { fillCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { pendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		if (HX_FIELD_EQ(inName,"strokePattern") ) { strokePattern=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"allowSmoothing") ) { allowSmoothing=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { strokeCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillPatternMatrix") ) { fillPatternMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { inversePendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoGraphics_obj_sMemberStorageInfo = 0;
static hx::StaticInfo CairoGraphics_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &CairoGraphics_obj::SIN45,HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa")},
	{hx::fsFloat,(void *) &CairoGraphics_obj::TAN22,HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88")},
	{hx::fsBool,(void *) &CairoGraphics_obj::allowSmoothing,HX_HCSTRING("allowSmoothing","\xab","\xb7","\x66","\x68")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &CairoGraphics_obj::bitmapFill,HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35")},
	{hx::fsBool,(void *) &CairoGraphics_obj::bitmapRepeat,HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &CairoGraphics_obj::bounds,HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(void *) &CairoGraphics_obj::cairo,HX_HCSTRING("cairo","\x88","\x30","\x19","\x41")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CairoGraphics_obj::fillCommands,HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CairoGraphics_obj::fillPattern,HX_HCSTRING("fillPattern","\x0d","\x86","\x12","\x35")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::fillPatternMatrix,HX_HCSTRING("fillPatternMatrix","\x2e","\xb8","\xae","\x97")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(void *) &CairoGraphics_obj::graphics,HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hasFill,HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hasStroke,HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hitTesting,HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::inversePendingMatrix,HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::pendingMatrix,HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CairoGraphics_obj::strokeCommands,HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CairoGraphics_obj::strokePattern,HX_HCSTRING("strokePattern","\x78","\xe1","\x21","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void CairoGraphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::SIN45,"SIN45");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::TAN22,"TAN22");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::allowSmoothing,"allowSmoothing");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bitmapFill,"bitmapFill");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bounds,"bounds");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::cairo,"cairo");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillCommands,"fillCommands");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillPattern,"fillPattern");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillPatternMatrix,"fillPatternMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::graphics,"graphics");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hasFill,"hasFill");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hasStroke,"hasStroke");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hitTesting,"hitTesting");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::strokeCommands,"strokeCommands");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::strokePattern,"strokePattern");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoGraphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::SIN45,"SIN45");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::TAN22,"TAN22");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::allowSmoothing,"allowSmoothing");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bitmapFill,"bitmapFill");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bounds,"bounds");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::cairo,"cairo");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillCommands,"fillCommands");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillPattern,"fillPattern");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillPatternMatrix,"fillPatternMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::graphics,"graphics");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hasFill,"hasFill");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hasStroke,"hasStroke");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hitTesting,"hitTesting");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::strokeCommands,"strokeCommands");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::strokePattern,"strokePattern");
};

#endif

hx::Class CairoGraphics_obj::__mClass;

static ::String CairoGraphics_obj_sStaticFields[] = {
	HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa"),
	HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88"),
	HX_HCSTRING("allowSmoothing","\xab","\xb7","\x66","\x68"),
	HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35"),
	HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("cairo","\x88","\x30","\x19","\x41"),
	HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2"),
	HX_HCSTRING("fillPattern","\x0d","\x86","\x12","\x35"),
	HX_HCSTRING("fillPatternMatrix","\x2e","\xb8","\xae","\x97"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12"),
	HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52"),
	HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19"),
	HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb"),
	HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5"),
	HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67"),
	HX_HCSTRING("strokePattern","\x78","\xe1","\x21","\x7e"),
	HX_HCSTRING("closePath","\x7d","\x65","\x20","\x14"),
	HX_HCSTRING("createGradientPattern","\xa4","\xee","\x44","\xf6"),
	HX_HCSTRING("createImagePattern","\x51","\xbd","\x5d","\xfb"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("endStroke","\xf3","\x01","\x17","\x51"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("isCCW","\x0d","\x84","\x49","\xc1"),
	HX_HCSTRING("normalizeUVT","\x66","\x09","\x2f","\x47"),
	HX_HCSTRING("playCommands","\xdc","\xae","\xee","\x49"),
	HX_HCSTRING("quadraticCurveTo","\x12","\x48","\xc3","\x82"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	::String(null())
};

void CairoGraphics_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoGraphics","\x72","\x72","\xef","\x3c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoGraphics_obj::__GetStatic;
	__mClass->mSetStaticField = &CairoGraphics_obj::__SetStatic;
	__mClass->mMarkFunc = CairoGraphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoGraphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoGraphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoGraphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoGraphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoGraphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CairoGraphics_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",38,0x744ae94c)
HXLINE(  38)		SIN45 = ((Float)0.70710678118654752440084436210485);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",39,0x744ae94c)
HXLINE(  39)		TAN22 = ((Float)0.4142135623730950488016887242097);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",46,0x744ae94c)
HXLINE(  46)		fillCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",55,0x744ae94c)
HXLINE(  55)		strokeCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
