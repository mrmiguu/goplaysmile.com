// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_44_new,"openfl._internal.renderer.DrawCommandBuffer","new",0xdc2c151e,"openfl._internal.renderer.DrawCommandBuffer.new","openfl/_internal/renderer/DrawCommandBuffer.hx",44,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_66_append,"openfl._internal.renderer.DrawCommandBuffer","append",0x1b14a7dc,"openfl._internal.renderer.DrawCommandBuffer.append","openfl/_internal/renderer/DrawCommandBuffer.hx",66,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_118_beginBitmapFill,"openfl._internal.renderer.DrawCommandBuffer","beginBitmapFill",0x90133359,"openfl._internal.renderer.DrawCommandBuffer.beginBitmapFill","openfl/_internal/renderer/DrawCommandBuffer.hx",118,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_130_beginFill,"openfl._internal.renderer.DrawCommandBuffer","beginFill",0x6ae7148a,"openfl._internal.renderer.DrawCommandBuffer.beginFill","openfl/_internal/renderer/DrawCommandBuffer.hx",130,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_141_beginGradientFill,"openfl._internal.renderer.DrawCommandBuffer","beginGradientFill",0x7d0b119a,"openfl._internal.renderer.DrawCommandBuffer.beginGradientFill","openfl/_internal/renderer/DrawCommandBuffer.hx",141,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_158_clear,"openfl._internal.renderer.DrawCommandBuffer","clear",0xfe5ce1cb,"openfl._internal.renderer.DrawCommandBuffer.clear","openfl/_internal/renderer/DrawCommandBuffer.hx",158,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_174_copy,"openfl._internal.renderer.DrawCommandBuffer","copy",0xc3289d37,"openfl._internal.renderer.DrawCommandBuffer.copy","openfl/_internal/renderer/DrawCommandBuffer.hx",174,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_183_cubicCurveTo,"openfl._internal.renderer.DrawCommandBuffer","cubicCurveTo",0x96d43b62,"openfl._internal.renderer.DrawCommandBuffer.cubicCurveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",183,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_197_curveTo,"openfl._internal.renderer.DrawCommandBuffer","curveTo",0x1bf4dbc8,"openfl._internal.renderer.DrawCommandBuffer.curveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",197,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_210_destroy,"openfl._internal.renderer.DrawCommandBuffer","destroy",0x71f2a8b8,"openfl._internal.renderer.DrawCommandBuffer.destroy","openfl/_internal/renderer/DrawCommandBuffer.hx",210,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_226_drawCircle,"openfl._internal.renderer.DrawCommandBuffer","drawCircle",0x40b9dc36,"openfl._internal.renderer.DrawCommandBuffer.drawCircle","openfl/_internal/renderer/DrawCommandBuffer.hx",226,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_238_drawEllipse,"openfl._internal.renderer.DrawCommandBuffer","drawEllipse",0x77b6b7f8,"openfl._internal.renderer.DrawCommandBuffer.drawEllipse","openfl/_internal/renderer/DrawCommandBuffer.hx",238,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_251_drawRect,"openfl._internal.renderer.DrawCommandBuffer","drawRect",0xd190c1ca,"openfl._internal.renderer.DrawCommandBuffer.drawRect","openfl/_internal/renderer/DrawCommandBuffer.hx",251,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_263_drawRoundRect,"openfl._internal.renderer.DrawCommandBuffer","drawRoundRect",0xb613a22c,"openfl._internal.renderer.DrawCommandBuffer.drawRoundRect","openfl/_internal/renderer/DrawCommandBuffer.hx",263,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_278_drawTriangles,"openfl._internal.renderer.DrawCommandBuffer","drawTriangles",0xb1d12245,"openfl._internal.renderer.DrawCommandBuffer.drawTriangles","openfl/_internal/renderer/DrawCommandBuffer.hx",278,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_291_endFill,"openfl._internal.renderer.DrawCommandBuffer","endFill",0x734d03bc,"openfl._internal.renderer.DrawCommandBuffer.endFill","openfl/_internal/renderer/DrawCommandBuffer.hx",291,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_300_lineBitmapStyle,"openfl._internal.renderer.DrawCommandBuffer","lineBitmapStyle",0x6b2ca8ec,"openfl._internal.renderer.DrawCommandBuffer.lineBitmapStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",300,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_313_lineGradientStyle,"openfl._internal.renderer.DrawCommandBuffer","lineGradientStyle",0x10f9f9cb,"openfl._internal.renderer.DrawCommandBuffer.lineGradientStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",313,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_330_lineStyle,"openfl._internal.renderer.DrawCommandBuffer","lineStyle",0xa96a0fdb,"openfl._internal.renderer.DrawCommandBuffer.lineStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",330,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_347_lineTo,"openfl._internal.renderer.DrawCommandBuffer","lineTo",0x77e10c91,"openfl._internal.renderer.DrawCommandBuffer.lineTo","openfl/_internal/renderer/DrawCommandBuffer.hx",347,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_358_moveTo,"openfl._internal.renderer.DrawCommandBuffer","moveTo",0x57ed98ee,"openfl._internal.renderer.DrawCommandBuffer.moveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",358,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_371_prepareWrite,"openfl._internal.renderer.DrawCommandBuffer","prepareWrite",0xac4d955a,"openfl._internal.renderer.DrawCommandBuffer.prepareWrite","openfl/_internal/renderer/DrawCommandBuffer.hx",371,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_388_overrideMatrix,"openfl._internal.renderer.DrawCommandBuffer","overrideMatrix",0xe20325af,"openfl._internal.renderer.DrawCommandBuffer.overrideMatrix","openfl/_internal/renderer/DrawCommandBuffer.hx",388,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_407_get_length,"openfl._internal.renderer.DrawCommandBuffer","get_length",0x3877f3b1,"openfl._internal.renderer.DrawCommandBuffer.get_length","openfl/_internal/renderer/DrawCommandBuffer.hx",407,0xbc8e6e11)
HX_DEFINE_STACK_FRAME(_hx_pos_d2863eb1aba9f5f0_28_boot,"openfl._internal.renderer.DrawCommandBuffer","boot",0xc27f65b4,"openfl._internal.renderer.DrawCommandBuffer.boot","openfl/_internal/renderer/DrawCommandBuffer.hx",28,0xbc8e6e11)
namespace openfl{
namespace _internal{
namespace renderer{

void DrawCommandBuffer_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_44_new)
            	HX_STACK_THIS(this)
HXLINE(  44)		if (hx::IsNull( ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty )) {
HXLINE(  46)			this->types = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  48)			this->b = ::Array_obj< bool >::__new(0);
HXLINE(  49)			this->i = ::Array_obj< int >::__new(0);
HXLINE(  50)			this->f = ::Array_obj< Float >::__new(0);
HXLINE(  51)			this->o = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  52)			this->ff = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  53)			this->ii = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  55)			this->copyOnWrite = true;
            		}
            		else {
HXLINE(  59)			this->clear();
            		}
            	}

Dynamic DrawCommandBuffer_obj::__CreateEmpty() { return new DrawCommandBuffer_obj; }

void *DrawCommandBuffer_obj::_hx_vtable = 0;

Dynamic DrawCommandBuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DrawCommandBuffer_obj > _hx_result = new DrawCommandBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DrawCommandBuffer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5daef738;
}

 ::openfl::_internal::renderer::DrawCommandBuffer DrawCommandBuffer_obj::append( ::openfl::_internal::renderer::DrawCommandBuffer other){
            	HX_GC_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_66_append)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE(  68)		if ((this->get_length() == (int)0)) {
HXLINE(  70)			this->types = other->types;
HXLINE(  71)			this->b = other->b;
HXLINE(  72)			this->i = other->i;
HXLINE(  73)			this->f = other->f;
HXLINE(  74)			this->o = other->o;
HXLINE(  75)			this->ff = other->ff;
HXLINE(  76)			this->ii = other->ii;
HXLINE(  77)			this->copyOnWrite = (other->copyOnWrite = true);
HXLINE(  79)			return other;
            		}
HXLINE(  83)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__alloc( HX_CTX ,other);
HXLINE(  85)		{
HXLINE(  85)			HX_VARI( int,_g) = (int)0;
HXDLIN(  85)			HX_VARI( ::Array< ::Dynamic>,_g1) = other->types;
HXDLIN(  85)			while((_g < _g1->length)){
HXLINE(  85)				HX_VARI(  ::openfl::_internal::renderer::DrawCommandType,type) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::DrawCommandType >();
HXDLIN(  85)				_g = (_g + (int)1);
HXLINE(  87)				switch((int)(_hx_getEnumValueIndex(type))){
            					case (int)0: {
HXLINE(  89)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  89)								data->oPos = (data->oPos + (int)2);
HXDLIN(  89)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  89)								data->iPos = (data->iPos + (int)1);
HXDLIN(  89)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  89)								data->oPos = (data->oPos + (int)4);
HXDLIN(  89)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  89)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  89)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  89)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  89)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  89)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  89)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  89)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  89)								data->fPos = (data->fPos + (int)5);
HXDLIN(  89)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  89)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  89)								data->oPos = (data->oPos + (int)2);
HXDLIN(  89)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  89)								data->oPos = (data->oPos + (int)4);
HXDLIN(  89)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  89)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  89)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  89)								data->oPos = (data->oPos + (int)4);
HXDLIN(  89)								data->iPos = (data->iPos + (int)1);
HXDLIN(  89)								data->fPos = (data->fPos + (int)2);
HXDLIN(  89)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  89)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  89)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  89)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  89)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(  89)						HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXDLIN(  89)						this->beginBitmapFill(( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) ),( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) ),c->buffer->b->__get(c->bPos),c->buffer->b->__get((c->bPos + (int)1)));
            					}
            					break;
            					case (int)1: {
HXLINE(  90)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  90)								data->oPos = (data->oPos + (int)2);
HXDLIN(  90)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  90)								data->iPos = (data->iPos + (int)1);
HXDLIN(  90)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  90)								data->oPos = (data->oPos + (int)4);
HXDLIN(  90)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  90)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  90)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  90)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  90)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  90)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  90)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  90)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  90)								data->fPos = (data->fPos + (int)5);
HXDLIN(  90)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  90)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  90)								data->oPos = (data->oPos + (int)2);
HXDLIN(  90)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  90)								data->oPos = (data->oPos + (int)4);
HXDLIN(  90)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  90)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  90)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  90)								data->oPos = (data->oPos + (int)4);
HXDLIN(  90)								data->iPos = (data->iPos + (int)1);
HXDLIN(  90)								data->fPos = (data->fPos + (int)2);
HXDLIN(  90)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  90)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  90)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  90)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  90)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(  90)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXDLIN(  90)						this->beginFill(c1->buffer->i->__get(c1->iPos),c1->buffer->f->__get(c1->fPos));
            					}
            					break;
            					case (int)2: {
HXLINE(  91)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  91)								data->oPos = (data->oPos + (int)2);
HXDLIN(  91)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  91)								data->iPos = (data->iPos + (int)1);
HXDLIN(  91)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  91)								data->oPos = (data->oPos + (int)4);
HXDLIN(  91)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  91)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  91)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  91)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  91)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  91)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  91)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  91)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  91)								data->fPos = (data->fPos + (int)5);
HXDLIN(  91)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  91)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  91)								data->oPos = (data->oPos + (int)2);
HXDLIN(  91)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  91)								data->oPos = (data->oPos + (int)4);
HXDLIN(  91)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  91)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  91)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  91)								data->oPos = (data->oPos + (int)4);
HXDLIN(  91)								data->iPos = (data->iPos + (int)1);
HXDLIN(  91)								data->fPos = (data->fPos + (int)2);
HXDLIN(  91)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  91)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  91)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  91)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  91)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(  91)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXDLIN(  91)						this->beginGradientFill(c2->buffer->o->__get(c2->oPos),c2->buffer->ii->__get(c2->iiPos).StaticCast< ::Array< int > >(),c2->buffer->ff->__get(c2->ffPos).StaticCast< ::Array< Float > >(),c2->buffer->ii->__get((c2->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c2->buffer->o->__get((c2->oPos + (int)1))) ),c2->buffer->o->__get((c2->oPos + (int)2)),c2->buffer->o->__get((c2->oPos + (int)3)),c2->buffer->f->__get(c2->fPos));
            					}
            					break;
            					case (int)3: {
HXLINE(  92)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  92)								data->oPos = (data->oPos + (int)2);
HXDLIN(  92)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  92)								data->iPos = (data->iPos + (int)1);
HXDLIN(  92)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  92)								data->oPos = (data->oPos + (int)4);
HXDLIN(  92)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  92)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  92)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  92)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  92)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  92)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  92)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  92)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  92)								data->fPos = (data->fPos + (int)5);
HXDLIN(  92)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  92)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  92)								data->oPos = (data->oPos + (int)2);
HXDLIN(  92)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  92)								data->oPos = (data->oPos + (int)4);
HXDLIN(  92)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  92)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  92)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  92)								data->oPos = (data->oPos + (int)4);
HXDLIN(  92)								data->iPos = (data->iPos + (int)1);
HXDLIN(  92)								data->fPos = (data->fPos + (int)2);
HXDLIN(  92)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  92)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  92)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  92)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  92)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(  92)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXDLIN(  92)						this->cubicCurveTo(c3->buffer->f->__get(c3->fPos),c3->buffer->f->__get((c3->fPos + (int)1)),c3->buffer->f->__get((c3->fPos + (int)2)),c3->buffer->f->__get((c3->fPos + (int)3)),c3->buffer->f->__get((c3->fPos + (int)4)),c3->buffer->f->__get((c3->fPos + (int)5)));
            					}
            					break;
            					case (int)4: {
HXLINE(  93)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  93)								data->oPos = (data->oPos + (int)2);
HXDLIN(  93)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  93)								data->iPos = (data->iPos + (int)1);
HXDLIN(  93)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  93)								data->oPos = (data->oPos + (int)4);
HXDLIN(  93)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  93)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  93)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  93)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  93)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  93)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  93)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  93)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  93)								data->fPos = (data->fPos + (int)5);
HXDLIN(  93)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  93)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  93)								data->oPos = (data->oPos + (int)2);
HXDLIN(  93)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  93)								data->oPos = (data->oPos + (int)4);
HXDLIN(  93)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  93)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  93)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  93)								data->oPos = (data->oPos + (int)4);
HXDLIN(  93)								data->iPos = (data->iPos + (int)1);
HXDLIN(  93)								data->fPos = (data->fPos + (int)2);
HXDLIN(  93)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  93)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  93)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  93)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  93)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(  93)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXDLIN(  93)						this->curveTo(c4->buffer->f->__get(c4->fPos),c4->buffer->f->__get((c4->fPos + (int)1)),c4->buffer->f->__get((c4->fPos + (int)2)),c4->buffer->f->__get((c4->fPos + (int)3)));
            					}
            					break;
            					case (int)5: {
HXLINE(  94)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  94)								data->oPos = (data->oPos + (int)2);
HXDLIN(  94)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  94)								data->iPos = (data->iPos + (int)1);
HXDLIN(  94)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  94)								data->oPos = (data->oPos + (int)4);
HXDLIN(  94)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  94)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  94)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  94)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  94)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  94)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  94)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  94)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  94)								data->fPos = (data->fPos + (int)5);
HXDLIN(  94)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  94)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  94)								data->oPos = (data->oPos + (int)2);
HXDLIN(  94)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  94)								data->oPos = (data->oPos + (int)4);
HXDLIN(  94)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  94)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  94)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  94)								data->oPos = (data->oPos + (int)4);
HXDLIN(  94)								data->iPos = (data->iPos + (int)1);
HXDLIN(  94)								data->fPos = (data->fPos + (int)2);
HXDLIN(  94)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  94)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  94)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  94)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  94)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(  94)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXDLIN(  94)						this->drawCircle(c5->buffer->f->__get(c5->fPos),c5->buffer->f->__get((c5->fPos + (int)1)),c5->buffer->f->__get((c5->fPos + (int)2)));
            					}
            					break;
            					case (int)6: {
HXLINE(  95)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  95)								data->oPos = (data->oPos + (int)2);
HXDLIN(  95)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  95)								data->iPos = (data->iPos + (int)1);
HXDLIN(  95)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  95)								data->oPos = (data->oPos + (int)4);
HXDLIN(  95)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  95)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  95)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  95)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  95)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  95)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  95)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  95)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  95)								data->fPos = (data->fPos + (int)5);
HXDLIN(  95)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  95)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  95)								data->oPos = (data->oPos + (int)2);
HXDLIN(  95)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  95)								data->oPos = (data->oPos + (int)4);
HXDLIN(  95)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  95)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  95)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  95)								data->oPos = (data->oPos + (int)4);
HXDLIN(  95)								data->iPos = (data->iPos + (int)1);
HXDLIN(  95)								data->fPos = (data->fPos + (int)2);
HXDLIN(  95)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  95)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  95)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  95)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  95)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(  95)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXDLIN(  95)						this->drawEllipse(c6->buffer->f->__get(c6->fPos),c6->buffer->f->__get((c6->fPos + (int)1)),c6->buffer->f->__get((c6->fPos + (int)2)),c6->buffer->f->__get((c6->fPos + (int)3)));
            					}
            					break;
            					case (int)7: {
HXLINE(  96)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  96)								data->oPos = (data->oPos + (int)2);
HXDLIN(  96)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  96)								data->iPos = (data->iPos + (int)1);
HXDLIN(  96)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  96)								data->oPos = (data->oPos + (int)4);
HXDLIN(  96)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  96)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  96)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  96)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  96)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  96)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  96)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  96)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  96)								data->fPos = (data->fPos + (int)5);
HXDLIN(  96)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  96)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  96)								data->oPos = (data->oPos + (int)2);
HXDLIN(  96)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  96)								data->oPos = (data->oPos + (int)4);
HXDLIN(  96)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  96)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  96)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  96)								data->oPos = (data->oPos + (int)4);
HXDLIN(  96)								data->iPos = (data->iPos + (int)1);
HXDLIN(  96)								data->fPos = (data->fPos + (int)2);
HXDLIN(  96)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  96)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  96)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  96)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  96)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(  96)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXDLIN(  96)						this->drawRect(c7->buffer->f->__get(c7->fPos),c7->buffer->f->__get((c7->fPos + (int)1)),c7->buffer->f->__get((c7->fPos + (int)2)),c7->buffer->f->__get((c7->fPos + (int)3)));
            					}
            					break;
            					case (int)8: {
HXLINE(  97)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  97)								data->oPos = (data->oPos + (int)2);
HXDLIN(  97)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  97)								data->iPos = (data->iPos + (int)1);
HXDLIN(  97)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  97)								data->oPos = (data->oPos + (int)4);
HXDLIN(  97)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  97)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  97)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  97)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  97)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  97)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  97)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  97)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  97)								data->fPos = (data->fPos + (int)5);
HXDLIN(  97)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  97)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  97)								data->oPos = (data->oPos + (int)2);
HXDLIN(  97)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  97)								data->oPos = (data->oPos + (int)4);
HXDLIN(  97)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  97)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  97)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  97)								data->oPos = (data->oPos + (int)4);
HXDLIN(  97)								data->iPos = (data->iPos + (int)1);
HXDLIN(  97)								data->fPos = (data->fPos + (int)2);
HXDLIN(  97)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  97)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  97)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  97)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  97)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(  97)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXDLIN(  97)						this->drawRoundRect(c8->buffer->f->__get(c8->fPos),c8->buffer->f->__get((c8->fPos + (int)1)),c8->buffer->f->__get((c8->fPos + (int)2)),c8->buffer->f->__get((c8->fPos + (int)3)),c8->buffer->f->__get((c8->fPos + (int)4)),c8->buffer->o->__get(c8->oPos));
            					}
            					break;
            					case (int)10: {
HXLINE(  98)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  98)								data->oPos = (data->oPos + (int)2);
HXDLIN(  98)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  98)								data->iPos = (data->iPos + (int)1);
HXDLIN(  98)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  98)								data->oPos = (data->oPos + (int)4);
HXDLIN(  98)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  98)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  98)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  98)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  98)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  98)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  98)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  98)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  98)								data->fPos = (data->fPos + (int)5);
HXDLIN(  98)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  98)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  98)								data->oPos = (data->oPos + (int)2);
HXDLIN(  98)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  98)								data->oPos = (data->oPos + (int)4);
HXDLIN(  98)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  98)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  98)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  98)								data->oPos = (data->oPos + (int)4);
HXDLIN(  98)								data->iPos = (data->iPos + (int)1);
HXDLIN(  98)								data->fPos = (data->fPos + (int)2);
HXDLIN(  98)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  98)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  98)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  98)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  98)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN(  98)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXDLIN(  98)						this->drawTriangles(( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::_Vector::IntVector)(c9->buffer->o->__get((c9->oPos + (int)1))) ),( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get((c9->oPos + (int)2))) ),c9->buffer->o->__get((c9->oPos + (int)3)));
            					}
            					break;
            					case (int)11: {
HXLINE(  99)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE(  99)								data->oPos = (data->oPos + (int)2);
HXDLIN(  99)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE(  99)								data->iPos = (data->iPos + (int)1);
HXDLIN(  99)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE(  99)								data->oPos = (data->oPos + (int)4);
HXDLIN(  99)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  99)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  99)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE(  99)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE(  99)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE(  99)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE(  99)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE(  99)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE(  99)								data->fPos = (data->fPos + (int)5);
HXDLIN(  99)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE(  99)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE(  99)								data->oPos = (data->oPos + (int)2);
HXDLIN(  99)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE(  99)								data->oPos = (data->oPos + (int)4);
HXDLIN(  99)								data->iiPos = (data->iiPos + (int)2);
HXDLIN(  99)								data->ffPos = (data->ffPos + (int)1);
HXDLIN(  99)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE(  99)								data->oPos = (data->oPos + (int)4);
HXDLIN(  99)								data->iPos = (data->iPos + (int)1);
HXDLIN(  99)								data->fPos = (data->fPos + (int)2);
HXDLIN(  99)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE(  99)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE(  99)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE(  99)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE(  99)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
HXDLIN(  99)						this->endFill();
            					}
            					break;
            					case (int)12: {
HXLINE( 100)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 100)								data->oPos = (data->oPos + (int)2);
HXDLIN( 100)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 100)								data->iPos = (data->iPos + (int)1);
HXDLIN( 100)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 100)								data->oPos = (data->oPos + (int)4);
HXDLIN( 100)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 100)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 100)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 100)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 100)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 100)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 100)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 100)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 100)								data->fPos = (data->fPos + (int)5);
HXDLIN( 100)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 100)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 100)								data->oPos = (data->oPos + (int)2);
HXDLIN( 100)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 100)								data->oPos = (data->oPos + (int)4);
HXDLIN( 100)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 100)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 100)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 100)								data->oPos = (data->oPos + (int)4);
HXDLIN( 100)								data->iPos = (data->iPos + (int)1);
HXDLIN( 100)								data->fPos = (data->fPos + (int)2);
HXDLIN( 100)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 100)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 100)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 100)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 100)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 100)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXDLIN( 100)						this->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c10->buffer->o->__get(c10->oPos)) ),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get((c10->oPos + (int)1))) ),c10->buffer->b->__get(c10->bPos),c10->buffer->b->__get((c10->bPos + (int)1)));
            					}
            					break;
            					case (int)13: {
HXLINE( 101)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 101)								data->oPos = (data->oPos + (int)2);
HXDLIN( 101)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 101)								data->iPos = (data->iPos + (int)1);
HXDLIN( 101)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 101)								data->oPos = (data->oPos + (int)4);
HXDLIN( 101)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 101)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 101)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 101)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 101)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 101)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 101)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 101)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 101)								data->fPos = (data->fPos + (int)5);
HXDLIN( 101)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 101)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 101)								data->oPos = (data->oPos + (int)2);
HXDLIN( 101)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 101)								data->oPos = (data->oPos + (int)4);
HXDLIN( 101)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 101)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 101)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 101)								data->oPos = (data->oPos + (int)4);
HXDLIN( 101)								data->iPos = (data->iPos + (int)1);
HXDLIN( 101)								data->fPos = (data->fPos + (int)2);
HXDLIN( 101)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 101)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 101)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 101)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 101)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 101)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXDLIN( 101)						this->lineGradientStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->ii->__get(c11->iiPos).StaticCast< ::Array< int > >(),c11->buffer->ff->__get(c11->ffPos).StaticCast< ::Array< Float > >(),c11->buffer->ii->__get((c11->iiPos + (int)1)).StaticCast< ::Array< int > >(),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get((c11->oPos + (int)1))) ),c11->buffer->o->__get((c11->oPos + (int)2)),c11->buffer->o->__get((c11->oPos + (int)3)),c11->buffer->f->__get(c11->fPos));
            					}
            					break;
            					case (int)14: {
HXLINE( 102)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 102)								data->oPos = (data->oPos + (int)2);
HXDLIN( 102)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 102)								data->iPos = (data->iPos + (int)1);
HXDLIN( 102)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 102)								data->oPos = (data->oPos + (int)4);
HXDLIN( 102)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 102)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 102)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 102)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 102)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 102)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 102)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 102)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 102)								data->fPos = (data->fPos + (int)5);
HXDLIN( 102)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 102)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 102)								data->oPos = (data->oPos + (int)2);
HXDLIN( 102)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 102)								data->oPos = (data->oPos + (int)4);
HXDLIN( 102)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 102)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 102)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 102)								data->oPos = (data->oPos + (int)4);
HXDLIN( 102)								data->iPos = (data->iPos + (int)1);
HXDLIN( 102)								data->fPos = (data->fPos + (int)2);
HXDLIN( 102)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 102)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 102)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 102)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 102)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 102)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXDLIN( 102)						this->lineStyle(c12->buffer->o->__get(c12->oPos),c12->buffer->i->__get(c12->iPos),c12->buffer->f->__get(c12->fPos),c12->buffer->b->__get(c12->bPos),c12->buffer->o->__get((c12->oPos + (int)1)),c12->buffer->o->__get((c12->oPos + (int)2)),c12->buffer->o->__get((c12->oPos + (int)3)),c12->buffer->f->__get((c12->fPos + (int)1)));
            					}
            					break;
            					case (int)15: {
HXLINE( 103)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 103)								data->oPos = (data->oPos + (int)2);
HXDLIN( 103)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 103)								data->iPos = (data->iPos + (int)1);
HXDLIN( 103)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 103)								data->oPos = (data->oPos + (int)4);
HXDLIN( 103)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 103)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 103)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 103)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 103)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 103)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 103)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 103)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 103)								data->fPos = (data->fPos + (int)5);
HXDLIN( 103)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 103)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 103)								data->oPos = (data->oPos + (int)2);
HXDLIN( 103)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 103)								data->oPos = (data->oPos + (int)4);
HXDLIN( 103)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 103)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 103)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 103)								data->oPos = (data->oPos + (int)4);
HXDLIN( 103)								data->iPos = (data->iPos + (int)1);
HXDLIN( 103)								data->fPos = (data->fPos + (int)2);
HXDLIN( 103)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 103)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 103)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 103)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 103)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 103)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXDLIN( 103)						this->lineTo(c13->buffer->f->__get(c13->fPos),c13->buffer->f->__get((c13->fPos + (int)1)));
            					}
            					break;
            					case (int)16: {
HXLINE( 104)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 104)								data->oPos = (data->oPos + (int)2);
HXDLIN( 104)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 104)								data->iPos = (data->iPos + (int)1);
HXDLIN( 104)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 104)								data->oPos = (data->oPos + (int)4);
HXDLIN( 104)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 104)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 104)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 104)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 104)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 104)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 104)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 104)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 104)								data->fPos = (data->fPos + (int)5);
HXDLIN( 104)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 104)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 104)								data->oPos = (data->oPos + (int)2);
HXDLIN( 104)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 104)								data->oPos = (data->oPos + (int)4);
HXDLIN( 104)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 104)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 104)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 104)								data->oPos = (data->oPos + (int)4);
HXDLIN( 104)								data->iPos = (data->iPos + (int)1);
HXDLIN( 104)								data->fPos = (data->fPos + (int)2);
HXDLIN( 104)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 104)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 104)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 104)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 104)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 104)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXDLIN( 104)						this->moveTo(c14->buffer->f->__get(c14->fPos),c14->buffer->f->__get((c14->fPos + (int)1)));
            					}
            					break;
            					case (int)17: {
HXLINE( 105)						switch((int)(_hx_getEnumValueIndex(data->prev))){
            							case (int)0: {
HXLINE( 105)								data->oPos = (data->oPos + (int)2);
HXDLIN( 105)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)1: {
HXLINE( 105)								data->iPos = (data->iPos + (int)1);
HXDLIN( 105)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)2: {
HXLINE( 105)								data->oPos = (data->oPos + (int)4);
HXDLIN( 105)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 105)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 105)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)3: {
HXLINE( 105)								data->fPos = (data->fPos + (int)6);
            							}
            							break;
            							case (int)4: {
HXLINE( 105)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)5: {
HXLINE( 105)								data->fPos = (data->fPos + (int)3);
            							}
            							break;
            							case (int)6: {
HXLINE( 105)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)7: {
HXLINE( 105)								data->fPos = (data->fPos + (int)4);
            							}
            							break;
            							case (int)8: {
HXLINE( 105)								data->fPos = (data->fPos + (int)5);
HXDLIN( 105)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							case (int)10: {
HXLINE( 105)								data->oPos = (data->oPos + (int)4);
            							}
            							break;
            							case (int)11: {
            							}
            							break;
            							case (int)12: {
HXLINE( 105)								data->oPos = (data->oPos + (int)2);
HXDLIN( 105)								data->bPos = (data->bPos + (int)2);
            							}
            							break;
            							case (int)13: {
HXLINE( 105)								data->oPos = (data->oPos + (int)4);
HXDLIN( 105)								data->iiPos = (data->iiPos + (int)2);
HXDLIN( 105)								data->ffPos = (data->ffPos + (int)1);
HXDLIN( 105)								data->fPos = (data->fPos + (int)1);
            							}
            							break;
            							case (int)14: {
HXLINE( 105)								data->oPos = (data->oPos + (int)4);
HXDLIN( 105)								data->iPos = (data->iPos + (int)1);
HXDLIN( 105)								data->fPos = (data->fPos + (int)2);
HXDLIN( 105)								data->bPos = (data->bPos + (int)1);
            							}
            							break;
            							case (int)15: {
HXLINE( 105)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)16: {
HXLINE( 105)								data->fPos = (data->fPos + (int)2);
            							}
            							break;
            							case (int)17: {
HXLINE( 105)								data->oPos = (data->oPos + (int)1);
            							}
            							break;
            							default:{
            							}
            						}
HXLINE( 105)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_MATRIX_dyn();
HXDLIN( 105)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c15,"c") = data;
HXDLIN( 105)						this->overrideMatrix(( ( ::openfl::geom::Matrix)(c15->buffer->o->__get(c15->oPos)) ));
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE( 112)		data->destroy();
HXLINE( 113)		return other;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandBuffer_obj,append,return )

void DrawCommandBuffer_obj::beginBitmapFill( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,bool repeat,bool smooth){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_118_beginBitmapFill)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE( 120)		this->prepareWrite();
HXLINE( 122)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn());
HXLINE( 123)		this->o->push(bitmap);
HXLINE( 124)		this->o->push(matrix);
HXLINE( 125)		this->b->push(repeat);
HXLINE( 126)		this->b->push(smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,beginBitmapFill,(void))

void DrawCommandBuffer_obj::beginFill(int color,Float alpha){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_130_beginFill)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 132)		this->prepareWrite();
HXLINE( 134)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn());
HXLINE( 135)		this->i->push(color);
HXLINE( 136)		this->f->push(alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,beginFill,(void))

void DrawCommandBuffer_obj::beginGradientFill( ::Dynamic type,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_141_beginGradientFill)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE( 143)		this->prepareWrite();
HXLINE( 145)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn());
HXLINE( 146)		this->o->push(type);
HXLINE( 147)		this->ii->push(colors);
HXLINE( 148)		this->ff->push(alphas);
HXLINE( 149)		this->ii->push(ratios);
HXLINE( 150)		this->o->push(matrix);
HXLINE( 151)		this->o->push(spreadMethod);
HXLINE( 152)		this->o->push(interpolationMethod);
HXLINE( 153)		this->f->push(focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,beginGradientFill,(void))

void DrawCommandBuffer_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_158_clear)
            	HX_STACK_THIS(this)
HXLINE( 160)		this->types = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->types;
HXLINE( 162)		this->b = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->b;
HXLINE( 163)		this->i = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->i;
HXLINE( 164)		this->f = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->f;
HXLINE( 165)		this->o = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->o;
HXLINE( 166)		this->ff = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->ff;
HXLINE( 167)		this->ii = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->ii;
HXLINE( 169)		this->copyOnWrite = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,clear,(void))

 ::openfl::_internal::renderer::DrawCommandBuffer DrawCommandBuffer_obj::copy(){
            	HX_GC_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_174_copy)
            	HX_STACK_THIS(this)
HXLINE( 176)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandBuffer,copy) =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
HXLINE( 177)		copy->append(hx::ObjectPtr<OBJ_>(this));
HXLINE( 178)		return copy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,copy,return )

void DrawCommandBuffer_obj::cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_183_cubicCurveTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controlX1,"controlX1")
            	HX_STACK_ARG(controlY1,"controlY1")
            	HX_STACK_ARG(controlX2,"controlX2")
            	HX_STACK_ARG(controlY2,"controlY2")
            	HX_STACK_ARG(anchorX,"anchorX")
            	HX_STACK_ARG(anchorY,"anchorY")
HXLINE( 185)		this->prepareWrite();
HXLINE( 187)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn());
HXLINE( 188)		this->f->push(controlX1);
HXLINE( 189)		this->f->push(controlY1);
HXLINE( 190)		this->f->push(controlX2);
HXLINE( 191)		this->f->push(controlY2);
HXLINE( 192)		this->f->push(anchorX);
HXLINE( 193)		this->f->push(anchorY);
            	}


HX_DEFINE_DYNAMIC_FUNC6(DrawCommandBuffer_obj,cubicCurveTo,(void))

void DrawCommandBuffer_obj::curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_197_curveTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controlX,"controlX")
            	HX_STACK_ARG(controlY,"controlY")
            	HX_STACK_ARG(anchorX,"anchorX")
            	HX_STACK_ARG(anchorY,"anchorY")
HXLINE( 199)		this->prepareWrite();
HXLINE( 201)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn());
HXLINE( 202)		this->f->push(controlX);
HXLINE( 203)		this->f->push(controlY);
HXLINE( 204)		this->f->push(anchorX);
HXLINE( 205)		this->f->push(anchorY);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,curveTo,(void))

void DrawCommandBuffer_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_210_destroy)
            	HX_STACK_THIS(this)
HXLINE( 212)		this->clear();
HXLINE( 214)		this->types = null();
HXLINE( 216)		this->b = null();
HXLINE( 217)		this->i = null();
HXLINE( 218)		this->f = null();
HXLINE( 219)		this->o = null();
HXLINE( 220)		this->ff = null();
HXLINE( 221)		this->ii = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,destroy,(void))

void DrawCommandBuffer_obj::drawCircle(Float x,Float y,Float radius){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_226_drawCircle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
HXLINE( 228)		this->prepareWrite();
HXLINE( 230)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn());
HXLINE( 231)		this->f->push(x);
HXLINE( 232)		this->f->push(y);
HXLINE( 233)		this->f->push(radius);
            	}


HX_DEFINE_DYNAMIC_FUNC3(DrawCommandBuffer_obj,drawCircle,(void))

void DrawCommandBuffer_obj::drawEllipse(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_238_drawEllipse)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 240)		this->prepareWrite();
HXLINE( 242)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn());
HXLINE( 243)		this->f->push(x);
HXLINE( 244)		this->f->push(y);
HXLINE( 245)		this->f->push(width);
HXLINE( 246)		this->f->push(height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawEllipse,(void))

void DrawCommandBuffer_obj::drawRect(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_251_drawRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 253)		this->prepareWrite();
HXLINE( 255)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn());
HXLINE( 256)		this->f->push(x);
HXLINE( 257)		this->f->push(y);
HXLINE( 258)		this->f->push(width);
HXLINE( 259)		this->f->push(height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawRect,(void))

void DrawCommandBuffer_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_263_drawRoundRect)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(ellipseWidth,"ellipseWidth")
            	HX_STACK_ARG(ellipseHeight,"ellipseHeight")
HXLINE( 265)		this->prepareWrite();
HXLINE( 267)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn());
HXLINE( 268)		this->f->push(x);
HXLINE( 269)		this->f->push(y);
HXLINE( 270)		this->f->push(width);
HXLINE( 271)		this->f->push(height);
HXLINE( 272)		this->f->push(ellipseWidth);
HXLINE( 273)		this->o->push(ellipseHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC6(DrawCommandBuffer_obj,drawRoundRect,(void))

void DrawCommandBuffer_obj::drawTriangles( ::openfl::_Vector::FloatVector vertices, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector uvtData, ::Dynamic culling){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_278_drawTriangles)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(indices,"indices")
            	HX_STACK_ARG(uvtData,"uvtData")
            	HX_STACK_ARG(culling,"culling")
HXLINE( 280)		this->prepareWrite();
HXLINE( 282)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn());
HXLINE( 283)		this->o->push(vertices);
HXLINE( 284)		this->o->push(indices);
HXLINE( 285)		this->o->push(uvtData);
HXLINE( 286)		this->o->push(culling);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawTriangles,(void))

void DrawCommandBuffer_obj::endFill(){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_291_endFill)
            	HX_STACK_THIS(this)
HXLINE( 293)		this->prepareWrite();
HXLINE( 295)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,endFill,(void))

void DrawCommandBuffer_obj::lineBitmapStyle( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,bool repeat,bool smooth){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_300_lineBitmapStyle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE( 302)		this->prepareWrite();
HXLINE( 304)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn());
HXLINE( 305)		this->o->push(bitmap);
HXLINE( 306)		this->o->push(matrix);
HXLINE( 307)		this->b->push(repeat);
HXLINE( 308)		this->b->push(smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,lineBitmapStyle,(void))

void DrawCommandBuffer_obj::lineGradientStyle( ::Dynamic type,::Array< int > colors,::Array< Float > alphas,::Array< int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_313_lineGradientStyle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE( 315)		this->prepareWrite();
HXLINE( 317)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn());
HXLINE( 318)		this->o->push(type);
HXLINE( 319)		this->ii->push(colors);
HXLINE( 320)		this->ff->push(alphas);
HXLINE( 321)		this->ii->push(ratios);
HXLINE( 322)		this->o->push(matrix);
HXLINE( 323)		this->o->push(spreadMethod);
HXLINE( 324)		this->o->push(interpolationMethod);
HXLINE( 325)		this->f->push(focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,lineGradientStyle,(void))

void DrawCommandBuffer_obj::lineStyle( ::Dynamic thickness,int color,Float alpha,bool pixelHinting, ::Dynamic scaleMode, ::Dynamic caps, ::Dynamic joints,Float miterLimit){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_330_lineStyle)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thickness,"thickness")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
            	HX_STACK_ARG(pixelHinting,"pixelHinting")
            	HX_STACK_ARG(scaleMode,"scaleMode")
            	HX_STACK_ARG(caps,"caps")
            	HX_STACK_ARG(joints,"joints")
            	HX_STACK_ARG(miterLimit,"miterLimit")
HXLINE( 332)		this->prepareWrite();
HXLINE( 334)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn());
HXLINE( 335)		this->o->push(thickness);
HXLINE( 336)		this->i->push(color);
HXLINE( 337)		this->f->push(alpha);
HXLINE( 338)		this->b->push(pixelHinting);
HXLINE( 339)		this->o->push(scaleMode);
HXLINE( 340)		this->o->push(caps);
HXLINE( 341)		this->o->push(joints);
HXLINE( 342)		this->f->push(miterLimit);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,lineStyle,(void))

void DrawCommandBuffer_obj::lineTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_347_lineTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 349)		this->prepareWrite();
HXLINE( 351)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn());
HXLINE( 352)		this->f->push(x);
HXLINE( 353)		this->f->push(y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,lineTo,(void))

void DrawCommandBuffer_obj::moveTo(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_358_moveTo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 360)		this->prepareWrite();
HXLINE( 362)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn());
HXLINE( 363)		this->f->push(x);
HXLINE( 364)		this->f->push(y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,moveTo,(void))

void DrawCommandBuffer_obj::prepareWrite(){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_371_prepareWrite)
            	HX_STACK_THIS(this)
HXLINE( 371)		if (this->copyOnWrite) {
HXLINE( 373)			this->types = this->types->copy();
HXLINE( 374)			this->b = this->b->copy();
HXLINE( 375)			this->i = this->i->copy();
HXLINE( 376)			this->f = this->f->copy();
HXLINE( 377)			this->o = this->o->copy();
HXLINE( 378)			this->ff = this->ff->copy();
HXLINE( 379)			this->ii = this->ii->copy();
HXLINE( 381)			this->copyOnWrite = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,prepareWrite,(void))

void DrawCommandBuffer_obj::overrideMatrix( ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_388_overrideMatrix)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 390)		this->prepareWrite();
HXLINE( 392)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_MATRIX_dyn());
HXLINE( 393)		this->o->push(matrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandBuffer_obj,overrideMatrix,(void))

int DrawCommandBuffer_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_407_get_length)
            	HX_STACK_THIS(this)
HXLINE( 407)		return this->types->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,get_length,return )

 ::openfl::_internal::renderer::DrawCommandBuffer DrawCommandBuffer_obj::empty;


hx::ObjectPtr< DrawCommandBuffer_obj > DrawCommandBuffer_obj::__new() {
	hx::ObjectPtr< DrawCommandBuffer_obj > __this = new DrawCommandBuffer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DrawCommandBuffer_obj > DrawCommandBuffer_obj::__alloc(hx::Ctx *_hx_ctx) {
	DrawCommandBuffer_obj *__this = (DrawCommandBuffer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DrawCommandBuffer_obj), true, "openfl._internal.renderer.DrawCommandBuffer"));
	*(void **)__this = DrawCommandBuffer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DrawCommandBuffer_obj::DrawCommandBuffer_obj()
{
}

void DrawCommandBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DrawCommandBuffer);
	HX_MARK_MEMBER_NAME(types,"types");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(copyOnWrite,"copyOnWrite");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(ff,"ff");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(ii,"ii");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_END_CLASS();
}

void DrawCommandBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(types,"types");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(copyOnWrite,"copyOnWrite");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(ff,"ff");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(ii,"ii");
	HX_VISIT_MEMBER_NAME(o,"o");
}

hx::Val DrawCommandBuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f); }
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i); }
		if (HX_FIELD_EQ(inName,"o") ) { return hx::Val( o); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ff") ) { return hx::Val( ff); }
		if (HX_FIELD_EQ(inName,"ii") ) { return hx::Val( ii); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { return hx::Val( types); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn()); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return hx::Val( lineTo_dyn()); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curveTo") ) { return hx::Val( curveTo_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"endFill") ) { return hx::Val( endFill_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"beginFill") ) { return hx::Val( beginFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return hx::Val( lineStyle_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawCircle") ) { return hx::Val( drawCircle_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyOnWrite") ) { return hx::Val( copyOnWrite); }
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { return hx::Val( drawEllipse_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { return hx::Val( cubicCurveTo_dyn()); }
		if (HX_FIELD_EQ(inName,"prepareWrite") ) { return hx::Val( prepareWrite_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { return hx::Val( drawRoundRect_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"overrideMatrix") ) { return hx::Val( overrideMatrix_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"beginBitmapFill") ) { return hx::Val( beginBitmapFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineBitmapStyle") ) { return hx::Val( lineBitmapStyle_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return hx::Val( beginGradientFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineGradientStyle") ) { return hx::Val( lineGradientStyle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool DrawCommandBuffer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { outValue = empty; return true; }
	}
	return false;
}

hx::Val DrawCommandBuffer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ff") ) { ff=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ii") ) { ii=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyOnWrite") ) { copyOnWrite=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DrawCommandBuffer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { empty=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
	}
	return false;
}

void DrawCommandBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("copyOnWrite","\x0b","\x88","\xab","\xbc"));
	outFields->push(HX_HCSTRING("f","\x66","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ff","\x40","\x59","\x00","\x00"));
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("o","\x6f","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DrawCommandBuffer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,types),HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(DrawCommandBuffer_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(DrawCommandBuffer_obj,copyOnWrite),HX_HCSTRING("copyOnWrite","\x0b","\x88","\xab","\xbc")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(DrawCommandBuffer_obj,f),HX_HCSTRING("f","\x66","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,ff),HX_HCSTRING("ff","\x40","\x59","\x00","\x00")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(DrawCommandBuffer_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,ii),HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(DrawCommandBuffer_obj,o),HX_HCSTRING("o","\x6f","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DrawCommandBuffer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &DrawCommandBuffer_obj::empty,HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DrawCommandBuffer_obj_sMemberFields[] = {
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("copyOnWrite","\x0b","\x88","\xab","\xbc"),
	HX_HCSTRING("f","\x66","\x00","\x00","\x00"),
	HX_HCSTRING("ff","\x40","\x59","\x00","\x00"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00"),
	HX_HCSTRING("o","\x6f","\x00","\x00","\x00"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("beginBitmapFill","\x9b","\xc9","\x07","\x6a"),
	HX_HCSTRING("beginFill","\x4c","\xad","\x95","\x8c"),
	HX_HCSTRING("beginGradientFill","\x5c","\x3c","\x03","\x2e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawEllipse","\x3a","\x85","\xce","\x54"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("lineBitmapStyle","\x2e","\x3f","\x21","\x45"),
	HX_HCSTRING("lineGradientStyle","\x8d","\x24","\xf2","\xc1"),
	HX_HCSTRING("lineStyle","\x9d","\xa8","\x18","\xcb"),
	HX_HCSTRING("lineTo","\x8f","\x46","\xa0","\xec"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("prepareWrite","\xd8","\x61","\x09","\x44"),
	HX_HCSTRING("overrideMatrix","\xad","\x8d","\xa9","\xb9"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	::String(null()) };

static void DrawCommandBuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DrawCommandBuffer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DrawCommandBuffer_obj::empty,"empty");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DrawCommandBuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DrawCommandBuffer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DrawCommandBuffer_obj::empty,"empty");
};

#endif

hx::Class DrawCommandBuffer_obj::__mClass;

static ::String DrawCommandBuffer_obj_sStaticFields[] = {
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	::String(null())
};

void DrawCommandBuffer_obj::__register()
{
	hx::Object *dummy = new DrawCommandBuffer_obj;
	DrawCommandBuffer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.DrawCommandBuffer","\x2c","\xee","\x3f","\x7e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DrawCommandBuffer_obj::__GetStatic;
	__mClass->mSetStaticField = &DrawCommandBuffer_obj::__SetStatic;
	__mClass->mMarkFunc = DrawCommandBuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DrawCommandBuffer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DrawCommandBuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DrawCommandBuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DrawCommandBuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DrawCommandBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DrawCommandBuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DrawCommandBuffer_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d2863eb1aba9f5f0_28_boot)
HXLINE(  28)		empty =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
