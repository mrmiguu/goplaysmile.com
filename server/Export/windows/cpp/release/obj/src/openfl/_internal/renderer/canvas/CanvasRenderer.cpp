// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasMaskManager
#include <openfl/_internal/renderer/canvas/CanvasMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasRenderer
#include <openfl/_internal/renderer/canvas/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace canvas{

void CanvasRenderer_obj::__construct( ::openfl::display::Stage stage, ::lime::graphics::CanvasRenderContext context){
            	HX_STACK_FRAME("openfl._internal.renderer.canvas.CanvasRenderer","new",0x66327fe8,"openfl._internal.renderer.canvas.CanvasRenderer.new","openfl/_internal/renderer/canvas/CanvasRenderer.hx",19,0x1be544e6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stage,"stage")
            	HX_STACK_ARG(context,"context")
HXLINE(  21)		super::__construct(stage);
HXLINE(  23)		this->context = context;
HXLINE(  25)		this->renderSession =  ::openfl::_internal::renderer::RenderSession_obj::__new();
HXLINE(  26)		this->renderSession->context = context;
HXLINE(  27)		this->renderSession->roundPixels = true;
HXLINE(  28)		this->renderSession->renderer = hx::ObjectPtr<OBJ_>(this);
HXLINE(  30)		this->renderSession->maskManager =  ::openfl::_internal::renderer::canvas::CanvasMaskManager_obj::__new(this->renderSession);
            	}

Dynamic CanvasRenderer_obj::__CreateEmpty() { return new CanvasRenderer_obj; }

hx::ObjectPtr< CanvasRenderer_obj > CanvasRenderer_obj::__new( ::openfl::display::Stage stage, ::lime::graphics::CanvasRenderContext context)
{
	hx::ObjectPtr< CanvasRenderer_obj > _hx_result = new CanvasRenderer_obj();
	_hx_result->__construct(stage,context);
	return _hx_result;
}

Dynamic CanvasRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CanvasRenderer_obj > _hx_result = new CanvasRenderer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void CanvasRenderer_obj::clear(){
            	HX_STACK_FRAME("openfl._internal.renderer.canvas.CanvasRenderer","clear",0xe6eb1315,"openfl._internal.renderer.canvas.CanvasRenderer.clear","openfl/_internal/renderer/canvas/CanvasRenderer.hx",38,0x1be544e6)
            	HX_STACK_THIS(this)
HXLINE(  38)		HX_VARI( Int,_g) = (int)0;
HXDLIN(  38)		HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->stage->stage3Ds;
HXDLIN(  38)		while(true){
HXLINE(  38)			Int _hx_tmp = _g1->get_length();
HXDLIN(  38)			if (!((_g < _hx_tmp))) {
HXLINE(  38)				goto _hx_goto_0;
            			}
HXDLIN(  38)			HX_VARI(  ::openfl::display::Stage3D,stage3D) = _g1->get(_g).StaticCast<  ::openfl::display::Stage3D >();
HXDLIN(  38)			++_g;
HXLINE(  40)			stage3D->_hx___renderCanvas(this->stage,this->renderSession);
            		}
            		_hx_goto_0:;
            	}


void CanvasRenderer_obj::render(){
            	HX_STACK_FRAME("openfl._internal.renderer.canvas.CanvasRenderer","render",0x244720ce,"openfl._internal.renderer.canvas.CanvasRenderer.render","openfl/_internal/renderer/canvas/CanvasRenderer.hx",47,0x1be544e6)
            	HX_STACK_THIS(this)
HXLINE(  49)		this->renderSession->allowSmoothing = hx::IsNotEq( this->stage->quality,(int)2 );
HXLINE(  51)		this->context->setTransform((int)1,(int)0,(int)0,(int)1,(int)0,(int)0);
HXLINE(  52)		this->context->globalAlpha = (int)1;
HXLINE(  54)		Bool _hx_tmp;
HXDLIN(  54)		if (!(this->stage->_hx___transparent)) {
HXLINE(  54)			_hx_tmp = this->stage->_hx___clearBeforeRender;
            		}
            		else {
HXLINE(  54)			_hx_tmp = false;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  56)			this->context->fillStyle = this->stage->_hx___colorString;
HXLINE(  57)			Float _hx_tmp1 = (this->stage->stageWidth * this->stage->window->_hx___scale);
HXDLIN(  57)			Float _hx_tmp2 = (this->stage->stageHeight * this->stage->window->_hx___scale);
HXDLIN(  57)			this->context->fillRect((int)0,(int)0,_hx_tmp1,_hx_tmp2);
            		}
            		else {
HXLINE(  59)			Bool _hx_tmp3;
HXDLIN(  59)			if (this->stage->_hx___transparent) {
HXLINE(  59)				_hx_tmp3 = this->stage->_hx___clearBeforeRender;
            			}
            			else {
HXLINE(  59)				_hx_tmp3 = false;
            			}
HXDLIN(  59)			if (_hx_tmp3) {
HXLINE(  61)				Float _hx_tmp4 = (this->stage->stageWidth * this->stage->window->_hx___scale);
HXDLIN(  61)				Float _hx_tmp5 = (this->stage->stageHeight * this->stage->window->_hx___scale);
HXDLIN(  61)				this->context->clearRect((int)0,(int)0,_hx_tmp4,_hx_tmp5);
            			}
            		}
HXLINE(  65)		this->stage->_hx___renderCanvas(this->renderSession);
            	}



CanvasRenderer_obj::CanvasRenderer_obj()
{
}

void CanvasRenderer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CanvasRenderer);
	HX_MARK_MEMBER_NAME(context,"context");
	 ::openfl::_internal::renderer::AbstractRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CanvasRenderer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(context,"context");
	 ::openfl::_internal::renderer::AbstractRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val CanvasRenderer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return hx::Val( render_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { return hx::Val( context); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val CanvasRenderer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=inValue.Cast<  ::lime::graphics::CanvasRenderContext >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CanvasRenderer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("context","\xef","\x95","\x77","\x19"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CanvasRenderer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::CanvasRenderContext*/ ,(int)offsetof(CanvasRenderer_obj,context),HX_HCSTRING("context","\xef","\x95","\x77","\x19")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CanvasRenderer_obj_sStaticStorageInfo = 0;
#endif

static ::String CanvasRenderer_obj_sMemberFields[] = {
	HX_HCSTRING("context","\xef","\x95","\x77","\x19"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null()) };

static void CanvasRenderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CanvasRenderer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CanvasRenderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CanvasRenderer_obj::__mClass,"__mClass");
};

#endif

hx::Class CanvasRenderer_obj::__mClass;

void CanvasRenderer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.canvas.CanvasRenderer","\xf6","\xab","\xb2","\xdc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CanvasRenderer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CanvasRenderer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CanvasRenderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CanvasRenderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CanvasRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CanvasRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace canvas
