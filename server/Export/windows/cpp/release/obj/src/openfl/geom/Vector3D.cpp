// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

namespace openfl{
namespace geom{

void Vector3D_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float z = __o_z.Default(0);
Float w = __o_w.Default(0);
            	HX_STACK_FRAME("openfl.geom.Vector3D","new",0x722c67da,"openfl.geom.Vector3D.new","openfl/geom/Vector3D.hx",25,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
HXLINE(  27)		this->w = w;
HXLINE(  28)		this->x = x;
HXLINE(  29)		this->y = y;
HXLINE(  30)		this->z = z;
            	}

Dynamic Vector3D_obj::__CreateEmpty() { return new Vector3D_obj; }

hx::ObjectPtr< Vector3D_obj > Vector3D_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_z,hx::Null< Float >  __o_w)
{
	hx::ObjectPtr< Vector3D_obj > _hx_result = new Vector3D_obj();
	_hx_result->__construct(__o_x,__o_y,__o_z,__o_w);
	return _hx_result;
}

Dynamic Vector3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Vector3D_obj > _hx_result = new Vector3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

 ::openfl::geom::Vector3D Vector3D_obj::add( ::openfl::geom::Vector3D a){
            	HX_STACK_FRAME("openfl.geom.Vector3D","add",0x7222899b,"openfl.geom.Vector3D.add","openfl/geom/Vector3D.hx",37,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  37)		return  ::openfl::geom::Vector3D_obj::__new((this->x + a->x),(this->y + a->y),(this->z + a->z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,add,return )

 ::openfl::geom::Vector3D Vector3D_obj::clone(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","clone",0x532bfd57,"openfl.geom.Vector3D.clone","openfl/geom/Vector3D.hx",67,0xc7821076)
            	HX_STACK_THIS(this)
HXLINE(  67)		return  ::openfl::geom::Vector3D_obj::__new(this->x,this->y,this->z,this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,clone,return )

void Vector3D_obj::copyFrom( ::openfl::geom::Vector3D sourceVector3D){
            	HX_STACK_FRAME("openfl.geom.Vector3D","copyFrom",0x528f1a05,"openfl.geom.Vector3D.copyFrom","openfl/geom/Vector3D.hx",72,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceVector3D,"sourceVector3D")
HXLINE(  74)		this->x = sourceVector3D->x;
HXLINE(  75)		this->y = sourceVector3D->y;
HXLINE(  76)		this->z = sourceVector3D->z;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,copyFrom,(void))

 ::openfl::geom::Vector3D Vector3D_obj::crossProduct( ::openfl::geom::Vector3D a){
            	HX_STACK_FRAME("openfl.geom.Vector3D","crossProduct",0x872350d5,"openfl.geom.Vector3D.crossProduct","openfl/geom/Vector3D.hx",83,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  83)		return  ::openfl::geom::Vector3D_obj::__new(((this->y * a->z) - (this->z * a->y)),((this->z * a->x) - (this->x * a->z)),((this->x * a->y) - (this->y * a->x)),(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,crossProduct,return )

void Vector3D_obj::decrementBy( ::openfl::geom::Vector3D a){
            	HX_STACK_FRAME("openfl.geom.Vector3D","decrementBy",0xa34dbc44,"openfl.geom.Vector3D.decrementBy","openfl/geom/Vector3D.hx",88,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  90)		hx::SubEq(this->x,a->x);
HXLINE(  91)		hx::SubEq(this->y,a->y);
HXLINE(  92)		hx::SubEq(this->z,a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,decrementBy,(void))

Float Vector3D_obj::dotProduct( ::openfl::geom::Vector3D a){
            	HX_STACK_FRAME("openfl.geom.Vector3D","dotProduct",0x3a72d36c,"openfl.geom.Vector3D.dotProduct","openfl/geom/Vector3D.hx",110,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE( 110)		return (((this->x * a->x) + (this->y * a->y)) + (this->z * a->z));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,dotProduct,return )

Bool Vector3D_obj::equals( ::openfl::geom::Vector3D toCompare,hx::Null< Bool >  __o_allFour){
Bool allFour = __o_allFour.Default(false);
            	HX_STACK_FRAME("openfl.geom.Vector3D","equals",0x24f6bf05,"openfl.geom.Vector3D.equals","openfl/geom/Vector3D.hx",117,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toCompare,"toCompare")
            	HX_STACK_ARG(allFour,"allFour")
HXLINE( 117)		Bool _hx_tmp;
HXDLIN( 117)		Bool _hx_tmp1;
HXDLIN( 117)		if ((this->x == toCompare->x)) {
HXLINE( 117)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXLINE( 117)			_hx_tmp1 = false;
            		}
HXDLIN( 117)		if (_hx_tmp1) {
HXLINE( 117)			_hx_tmp = (this->z == toCompare->z);
            		}
            		else {
HXLINE( 117)			_hx_tmp = false;
            		}
HXDLIN( 117)		if (_hx_tmp) {
HXLINE( 117)			if (!(!(allFour))) {
HXLINE( 117)				return (this->w == toCompare->w);
            			}
            			else {
HXLINE( 117)				return true;
            			}
            		}
            		else {
HXLINE( 117)			return false;
            		}
HXDLIN( 117)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,equals,return )

void Vector3D_obj::incrementBy( ::openfl::geom::Vector3D a){
            	HX_STACK_FRAME("openfl.geom.Vector3D","incrementBy",0xea440b60,"openfl.geom.Vector3D.incrementBy","openfl/geom/Vector3D.hx",122,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE( 124)		hx::AddEq(this->x,a->x);
HXLINE( 125)		hx::AddEq(this->y,a->y);
HXLINE( 126)		hx::AddEq(this->z,a->z);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,incrementBy,(void))

Bool Vector3D_obj::nearEquals( ::openfl::geom::Vector3D toCompare,Float tolerance, ::Dynamic __o_allFour){
 ::Dynamic allFour = __o_allFour.Default(false);
            	HX_STACK_FRAME("openfl.geom.Vector3D","nearEquals",0xfaf41d0d,"openfl.geom.Vector3D.nearEquals","openfl/geom/Vector3D.hx",133,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toCompare,"toCompare")
            	HX_STACK_ARG(tolerance,"tolerance")
            	HX_STACK_ARG(allFour,"allFour")
HXLINE( 133)		Bool _hx_tmp;
HXDLIN( 133)		Bool _hx_tmp1;
HXDLIN( 133)		Float _hx_tmp2 = (this->x - toCompare->x);
HXDLIN( 133)		Float _hx_tmp3 = ::Math_obj::abs(_hx_tmp2);
HXDLIN( 133)		if ((_hx_tmp3 < tolerance)) {
HXLINE( 133)			Float _hx_tmp4 = (this->y - toCompare->y);
HXDLIN( 133)			Float _hx_tmp5 = ::Math_obj::abs(_hx_tmp4);
HXDLIN( 133)			_hx_tmp1 = (_hx_tmp5 < tolerance);
            		}
            		else {
HXLINE( 133)			_hx_tmp1 = false;
            		}
HXDLIN( 133)		if (_hx_tmp1) {
HXLINE( 133)			Float _hx_tmp6 = (this->z - toCompare->z);
HXDLIN( 133)			Float _hx_tmp7 = ::Math_obj::abs(_hx_tmp6);
HXDLIN( 133)			_hx_tmp = (_hx_tmp7 < tolerance);
            		}
            		else {
HXLINE( 133)			_hx_tmp = false;
            		}
HXDLIN( 133)		if (_hx_tmp) {
HXLINE( 133)			if (!(!(allFour))) {
HXLINE( 133)				Float _hx_tmp8 = (this->w - toCompare->w);
HXDLIN( 133)				Float _hx_tmp9 = ::Math_obj::abs(_hx_tmp8);
HXDLIN( 133)				return (_hx_tmp9 < tolerance);
            			}
            			else {
HXLINE( 133)				return true;
            			}
            		}
            		else {
HXLINE( 133)			return false;
            		}
HXDLIN( 133)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector3D_obj,nearEquals,return )

void Vector3D_obj::negate(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","negate",0xcc1d1288,"openfl.geom.Vector3D.negate","openfl/geom/Vector3D.hx",138,0xc7821076)
            	HX_STACK_THIS(this)
HXLINE( 140)		hx::MultEq(this->x,(int)-1);
HXLINE( 141)		hx::MultEq(this->y,(int)-1);
HXLINE( 142)		hx::MultEq(this->z,(int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,negate,(void))

Float Vector3D_obj::normalize(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","normalize",0x09bfa687,"openfl.geom.Vector3D.normalize","openfl/geom/Vector3D.hx",147,0xc7821076)
            	HX_STACK_THIS(this)
HXLINE( 149)		HX_VARI( Float,l) = this->get_length();
HXLINE( 151)		if ((l != (int)0)) {
HXLINE( 153)			hx::DivEq(this->x,l);
HXLINE( 154)			hx::DivEq(this->y,l);
HXLINE( 155)			hx::DivEq(this->z,l);
            		}
HXLINE( 159)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,normalize,return )

void Vector3D_obj::project(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","project",0xf43def53,"openfl.geom.Vector3D.project","openfl/geom/Vector3D.hx",164,0xc7821076)
            	HX_STACK_THIS(this)
HXLINE( 166)		hx::DivEq(this->x,this->w);
HXLINE( 167)		hx::DivEq(this->y,this->w);
HXLINE( 168)		hx::DivEq(this->z,this->w);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,project,(void))

void Vector3D_obj::scaleBy(Float s){
            	HX_STACK_FRAME("openfl.geom.Vector3D","scaleBy",0x635a1b7b,"openfl.geom.Vector3D.scaleBy","openfl/geom/Vector3D.hx",173,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 175)		hx::MultEq(this->x,s);
HXLINE( 176)		hx::MultEq(this->y,s);
HXLINE( 177)		hx::MultEq(this->z,s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,scaleBy,(void))

void Vector3D_obj::setTo(Float xa,Float ya,Float za){
            	HX_STACK_FRAME("openfl.geom.Vector3D","setTo",0x84f87bb7,"openfl.geom.Vector3D.setTo","openfl/geom/Vector3D.hx",182,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xa,"xa")
            	HX_STACK_ARG(ya,"ya")
            	HX_STACK_ARG(za,"za")
HXLINE( 184)		this->x = xa;
HXLINE( 185)		this->y = ya;
HXLINE( 186)		this->z = za;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Vector3D_obj,setTo,(void))

 ::openfl::geom::Vector3D Vector3D_obj::subtract( ::openfl::geom::Vector3D a){
            	HX_STACK_FRAME("openfl.geom.Vector3D","subtract",0x823f835a,"openfl.geom.Vector3D.subtract","openfl/geom/Vector3D.hx",193,0xc7821076)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE( 193)		return  ::openfl::geom::Vector3D_obj::__new((this->x - a->x),(this->y - a->y),(this->z - a->z),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Vector3D_obj,subtract,return )

::String Vector3D_obj::toString(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","toString",0xc29cdef2,"openfl.geom.Vector3D.toString","openfl/geom/Vector3D.hx",200,0xc7821076)
            	HX_STACK_THIS(this)
HXLINE( 200)		return ((((((HX_("Vector3D(",54,b9,2e,19) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(", ",74,26,00,00)) + this->z) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,toString,return )

Float Vector3D_obj::get_length(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","get_length",0x8c11b075,"openfl.geom.Vector3D.get_length","openfl/geom/Vector3D.hx",214,0xc7821076)
            	HX_STACK_THIS(this)
HXLINE( 214)		Float _hx_tmp = (((this->x * this->x) + (this->y * this->y)) + (this->z * this->z));
HXDLIN( 214)		return ::Math_obj::sqrt(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_length,return )

Float Vector3D_obj::get_lengthSquared(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","get_lengthSquared",0xa2b22932,"openfl.geom.Vector3D.get_lengthSquared","openfl/geom/Vector3D.hx",221,0xc7821076)
            	HX_STACK_THIS(this)
HXLINE( 221)		return (((this->x * this->x) + (this->y * this->y)) + (this->z * this->z));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_lengthSquared,return )

Float Vector3D_obj::angleBetween( ::openfl::geom::Vector3D a, ::openfl::geom::Vector3D b){
            	HX_STACK_FRAME("openfl.geom.Vector3D","angleBetween",0x8d2e8f7b,"openfl.geom.Vector3D.angleBetween","openfl/geom/Vector3D.hx",42,0xc7821076)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE(  44)		HX_VARI( Float,la) = a->get_length();
HXLINE(  45)		HX_VARI( Float,lb) = b->get_length();
HXLINE(  46)		HX_VARI( Float,dot) = a->dotProduct(b);
HXLINE(  48)		if ((la != (int)0)) {
HXLINE(  50)			hx::DivEq(dot,la);
            		}
HXLINE(  54)		if ((lb != (int)0)) {
HXLINE(  56)			hx::DivEq(dot,lb);
            		}
HXLINE(  60)		return ::Math_obj::acos(dot);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,angleBetween,return )

Float Vector3D_obj::distance( ::openfl::geom::Vector3D pt1, ::openfl::geom::Vector3D pt2){
            	HX_STACK_FRAME("openfl.geom.Vector3D","distance",0xf627a17b,"openfl.geom.Vector3D.distance","openfl/geom/Vector3D.hx",97,0xc7821076)
            	HX_STACK_ARG(pt1,"pt1")
            	HX_STACK_ARG(pt2,"pt2")
HXLINE(  99)		HX_VARI( Float,x) = (pt2->x - pt1->x);
HXLINE( 100)		HX_VARI( Float,y) = (pt2->y - pt1->y);
HXLINE( 101)		HX_VARI( Float,z) = (pt2->z - pt1->z);
HXLINE( 103)		return ::Math_obj::sqrt((((x * x) + (y * y)) + (z * z)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Vector3D_obj,distance,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_X_AXIS(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","get_X_AXIS",0xfabcdcb7,"openfl.geom.Vector3D.get_X_AXIS","openfl/geom/Vector3D.hx",228,0xc7821076)
HXLINE( 228)		return  ::openfl::geom::Vector3D_obj::__new((int)1,(int)0,(int)0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_X_AXIS,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_Y_AXIS(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","get_Y_AXIS",0x61183916,"openfl.geom.Vector3D.get_Y_AXIS","openfl/geom/Vector3D.hx",235,0xc7821076)
HXLINE( 235)		return  ::openfl::geom::Vector3D_obj::__new((int)0,(int)1,(int)0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_Y_AXIS,return )

 ::openfl::geom::Vector3D Vector3D_obj::get_Z_AXIS(){
            	HX_STACK_FRAME("openfl.geom.Vector3D","get_Z_AXIS",0xc7739575,"openfl.geom.Vector3D.get_Z_AXIS","openfl/geom/Vector3D.hx",242,0xc7821076)
HXLINE( 242)		return  ::openfl::geom::Vector3D_obj::__new((int)0,(int)0,(int)1,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Vector3D_obj,get_Z_AXIS,return )


Vector3D_obj::Vector3D_obj()
{
}

hx::Val Vector3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w); }
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		if (HX_FIELD_EQ(inName,"negate") ) { return hx::Val( negate_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"project") ) { return hx::Val( project_dyn()); }
		if (HX_FIELD_EQ(inName,"scaleBy") ) { return hx::Val( scaleBy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"subtract") ) { return hx::Val( subtract_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"normalize") ) { return hx::Val( normalize_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dotProduct") ) { return hx::Val( dotProduct_dyn()); }
		if (HX_FIELD_EQ(inName,"nearEquals") ) { return hx::Val( nearEquals_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decrementBy") ) { return hx::Val( decrementBy_dyn()); }
		if (HX_FIELD_EQ(inName,"incrementBy") ) { return hx::Val( incrementBy_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"crossProduct") ) { return hx::Val( crossProduct_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthSquared") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_lengthSquared()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_lengthSquared") ) { return hx::Val( get_lengthSquared_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Vector3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"X_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = get_X_AXIS(); return true; } }
		if (HX_FIELD_EQ(inName,"Y_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = get_Y_AXIS(); return true; } }
		if (HX_FIELD_EQ(inName,"Z_AXIS") ) { if (inCallProp == hx::paccAlways) { outValue = get_Z_AXIS(); return true; } }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"distance") ) { outValue = distance_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_X_AXIS") ) { outValue = get_X_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Y_AXIS") ) { outValue = get_Y_AXIS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_Z_AXIS") ) { outValue = get_Z_AXIS_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"angleBetween") ) { outValue = angleBetween_dyn(); return true; }
	}
	return false;
}

hx::Val Vector3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Vector3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("lengthSquared","\xe1","\x24","\x45","\x35"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("z","\x7a","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Vector3D_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Vector3D_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector3D_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector3D_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Vector3D_obj,z),HX_HCSTRING("z","\x7a","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Vector3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Vector3D_obj_sMemberFields[] = {
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("z","\x7a","\x00","\x00","\x00"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("crossProduct","\x8f","\xa7","\xc9","\x63"),
	HX_HCSTRING("decrementBy","\xca","\x1a","\x7a","\xad"),
	HX_HCSTRING("dotProduct","\xa6","\x27","\xf0","\x3d"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("incrementBy","\xe6","\x69","\x70","\xf4"),
	HX_HCSTRING("nearEquals","\x47","\x71","\x71","\xfe"),
	HX_HCSTRING("negate","\xc2","\x41","\x19","\x67"),
	HX_HCSTRING("normalize","\x8d","\x37","\xa1","\xab"),
	HX_HCSTRING("project","\xd9","\x12","\xeb","\xf5"),
	HX_HCSTRING("scaleBy","\x01","\x3f","\x07","\x65"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("subtract","\x14","\x75","\x11","\xf8"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_lengthSquared","\x38","\x30","\xb5","\x3b"),
	::String(null()) };

static void Vector3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Vector3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Vector3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Vector3D_obj::__mClass,"__mClass");
};

#endif

hx::Class Vector3D_obj::__mClass;

static ::String Vector3D_obj_sStaticFields[] = {
	HX_HCSTRING("angleBetween","\x35","\xe6","\xd4","\x69"),
	HX_HCSTRING("distance","\x35","\x93","\xf9","\x6b"),
	HX_HCSTRING("get_X_AXIS","\xf1","\x30","\x3a","\xfe"),
	HX_HCSTRING("get_Y_AXIS","\x50","\x8d","\x95","\x64"),
	HX_HCSTRING("get_Z_AXIS","\xaf","\xe9","\xf0","\xca"),
	::String(null())
};

void Vector3D_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Vector3D","\xe8","\x32","\xf9","\x44");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Vector3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Vector3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Vector3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Vector3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Vector3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Vector3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Vector3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Vector3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace geom
