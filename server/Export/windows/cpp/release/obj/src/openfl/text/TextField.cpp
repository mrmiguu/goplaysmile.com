// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeWindow
#include <lime/_backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_String_Void
#include <lime/app/_Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_DynamicTextSymbol
#include <openfl/_internal/symbols/DynamicTextSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif
#ifndef INCLUDED_openfl_text__TextFormatAlign_TextFormatAlign_Impl_
#include <openfl/text/_TextFormatAlign/TextFormatAlign_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_115_new,"openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",115,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_148_appendText,"openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",148,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_162_getCharBoundaries,"openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",162,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_191_getCharIndexAtPoint,"openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",191,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_238_getFirstCharInParagraph,"openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",238,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_266_getLineIndexAtPoint,"openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",266,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_293_getLineIndexOfChar,"openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",293,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_314_getLineLength,"openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",314,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_344_getLineMetrics,"openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",344,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_369_getLineOffset,"openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",369,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_390_getLineText,"openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",390,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_421_getParagraphLength,"openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",421,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_434_getTextFormat,"openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",434,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_478_replaceSelectedText,"openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",478,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_493_replaceText,"openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",493,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_547_setSelection,"openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",547,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_555_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",555,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_706_setTextFormat,"openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",706,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_732___caretBeginningOfLine,"openfl.text.TextField","__caretBeginningOfLine",0x4c500c69,"openfl.text.TextField.__caretBeginningOfLine","openfl/text/TextField.hx",732,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_745___caretEndOfLine,"openfl.text.TextField","__caretEndOfLine",0xeca90427,"openfl.text.TextField.__caretEndOfLine","openfl/text/TextField.hx",745,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_774___caretNextCharacter,"openfl.text.TextField","__caretNextCharacter",0xafbbedf7,"openfl.text.TextField.__caretNextCharacter","openfl/text/TextField.hx",774,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_783___caretNextLine,"openfl.text.TextField","__caretNextLine",0xd85e2866,"openfl.text.TextField.__caretNextLine","openfl/text/TextField.hx",783,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_812___caretPreviousCharacter,"openfl.text.TextField","__caretPreviousCharacter",0x656722b3,"openfl.text.TextField.__caretPreviousCharacter","openfl/text/TextField.hx",812,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_821___caretPreviousLine,"openfl.text.TextField","__caretPreviousLine",0x13772d2a,"openfl.text.TextField.__caretPreviousLine","openfl/text/TextField.hx",821,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_848___fromSymbol,"openfl.text.TextField","__fromSymbol",0x5dd0dda6,"openfl.text.TextField.__fromSymbol","openfl/text/TextField.hx",848,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_968___getAttributeMatch,"openfl.text.TextField","__getAttributeMatch",0x101a59fb,"openfl.text.TextField.__getAttributeMatch","openfl/text/TextField.hx",968,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_973___getBounds,"openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",973,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_988___getCharIndexOnDifferentLine,"openfl.text.TextField","__getCharIndexOnDifferentLine",0x6afd9f64,"openfl.text.TextField.__getCharIndexOnDifferentLine","openfl/text/TextField.hx",988,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1028___getCursor,"openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",1028,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1033___getPosition,"openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",1033,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1111___hitTest,"openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",1111,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1139___hitTestMask,"openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",1139,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1158___renderCairo,"openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",1158,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1168___renderCanvas,"openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",1168,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1205___renderDOM,"openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",1205,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1214___renderGL,"openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",1214,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1227___startCursorTimer,"openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",1227,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1236___startTextInput,"openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",1236,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1274___stopCursorTimer,"openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",1274,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1297___stopTextInput,"openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",1297,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1315___updateLayout,"openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",1315,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1355___updateText,"openfl.text.TextField","__updateText",0x315de09a,"openfl.text.TextField.__updateText","openfl/text/TextField.hx",1355,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1387___updateTransforms,"openfl.text.TextField","__updateTransforms",0x79c7d534,"openfl.text.TextField.__updateTransforms","openfl/text/TextField.hx",1387,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1404_get_antiAliasType,"openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",1404,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1417_set_antiAliasType,"openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",1417,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1424_get_autoSize,"openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",1424,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1429_set_autoSize,"openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",1429,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1445_get_background,"openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",1445,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1450_set_background,"openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",1450,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1465_get_backgroundColor,"openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",1465,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1470_set_backgroundColor,"openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",1470,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1485_get_border,"openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",1485,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1490_set_border,"openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",1490,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1505_get_borderColor,"openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",1505,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1510_set_borderColor,"openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",1510,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1523_get_bottomScrollV,"openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",1523,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1534_get_caretIndex,"openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",1534,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1541_get_defaultTextFormat,"openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",1541,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1546_set_defaultTextFormat,"openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",1546,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1560_get_displayAsPassword,"openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",1560,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1565_set_displayAsPassword,"openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",1565,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1584_get_embedFonts,"openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",1584,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1598_set_embedFonts,"openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",1598,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1605_get_gridFitType,"openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",1605,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1619_set_gridFitType,"openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",1619,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1624_get_height,"openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",1624,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1632_set_height,"openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",1632,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1651_get_htmlText,"openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",1651,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1656_set_htmlText,"openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",1656,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1907_get_length,"openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",1907,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1922_get_maxChars,"openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",1922,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1927_set_maxChars,"openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",1927,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1941_get_maxScrollH,"openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",1941,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1950_get_maxScrollV,"openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",1950,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1961_get_mouseWheelEnabled,"openfl.text.TextField","get_mouseWheelEnabled",0xdd79871e,"openfl.text.TextField.get_mouseWheelEnabled","openfl/text/TextField.hx",1961,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1968_set_mouseWheelEnabled,"openfl.text.TextField","set_mouseWheelEnabled",0x3182552a,"openfl.text.TextField.set_mouseWheelEnabled","openfl/text/TextField.hx",1968,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1975_get_multiline,"openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",1975,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1980_set_multiline,"openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",1980,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_1994_get_numLines,"openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",1994,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2005_get_restrict,"openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",2005,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2012_set_restrict,"openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",2012,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2019_get_scrollH,"openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",2019,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2024_set_scrollH,"openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",2024,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2044_get_scrollV,"openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",2044,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2049_set_scrollV,"openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",2049,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2069_get_selectable,"openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",2069,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2074_set_selectable,"openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",2074,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2097_get_selectionBeginIndex,"openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",2097,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2104_get_selectionEndIndex,"openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",2104,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2111_get_sharpness,"openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",2111,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2116_set_sharpness,"openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",2116,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2131_get_text,"openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",2131,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2136_set_text,"openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",2136,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2171_get_textColor,"openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",2171,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2176_set_textColor,"openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",2176,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2190_get_textWidth,"openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",2190,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2198_get_textHeight,"openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",2198,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2208_get_type,"openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",2208,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2213_set_type,"openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",2213,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2246_get_width,"openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",2246,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2254_set_width,"openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",2254,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2273_get_wordWrap,"openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",2273,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2278_set_wordWrap,"openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",2278,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2299_stage_onMouseMove,"openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",2299,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2321_stage_onMouseUp,"openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",2321,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2362_this_onAddedToStage,"openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",2362,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2369_this_onFocusIn,"openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",2369,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2380_this_onFocusOut,"openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",2380,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2385_this_onMouseDown,"openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",2385,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2403_window_onKeyDown,"openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",2403,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_2647_window_onTextInput,"openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",2647,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_44_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",44,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_45_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",45,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_46_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",46,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_47_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",47,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_48_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",48,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_49_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",49,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_50_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",50,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_51_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",51,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_52_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",52,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_53_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",53,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_54_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",54,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_55_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",55,0xccf02094)
HX_DEFINE_STACK_FRAME(_hx_pos_d001dbc361c2c159_56_boot,"openfl.text.TextField","boot",0x024a6e56,"openfl.text.TextField.boot","openfl/text/TextField.hx",56,0xccf02094)
namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_115_new)
            	HX_STACK_THIS(this)
HXLINE( 117)		super::__construct();
HXLINE( 119)		this->_hx___caretIndex = (int)-1;
HXLINE( 120)		this->_hx___displayAsPassword = false;
HXLINE( 121)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 122)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
HXLINE( 123)		this->_hx___layoutDirty = true;
HXLINE( 124)		this->_hx___offsetX = (int)0;
HXLINE( 125)		this->_hx___offsetY = (int)0;
HXLINE( 126)		this->_hx___tabEnabled = true;
HXLINE( 127)		this->_hx___mouseWheelEnabled = true;
HXLINE( 128)		this->_hx___text = HX_("",00,00,00,00);
HXLINE( 130)		if (hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat )) {
HXLINE( 132)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,HX_("Times New Roman",03,86,44,c3),(int)12,(int)0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),(int)3,(int)0,(int)0,(int)0,(int)0);
HXLINE( 133)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = (int)0;
HXLINE( 134)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 135)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = (int)0;
HXLINE( 136)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 140)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 141)		this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,this->_hx___textFormat,(int)0,(int)0));
HXLINE( 143)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

void *TextField_obj::_hx_vtable = 0;

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TextField_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x3f2b00af || inClassId==(int)0x6d9fc210;
	}
}

void TextField_obj::appendText(::String text){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_148_appendText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(text,"text")
HXLINE( 150)		bool _hx_tmp;
HXDLIN( 150)		if (hx::IsNotNull( text )) {
HXLINE( 150)			_hx_tmp = (text == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 150)			_hx_tmp = true;
            		}
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 150)			return;
            		}
HXLINE( 152)		this->_hx___dirty = true;
HXLINE( 153)		this->_hx___layoutDirty = true;
HXLINE( 155)		this->_hx___updateText((this->_hx___text + text));
HXLINE( 157)		this->_hx___textEngine->textFormatRanges->get((this->_hx___textEngine->textFormatRanges->get_length() - (int)1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___text.length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(int charIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_162_getCharBoundaries)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 164)		bool _hx_tmp;
HXDLIN( 164)		if ((charIndex >= (int)0)) {
HXLINE( 164)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 164)			_hx_tmp = true;
            		}
HXDLIN( 164)		if (_hx_tmp) {
HXLINE( 164)			return null();
            		}
HXLINE( 166)		this->_hx___updateLayout();
HXLINE( 168)		{
HXLINE( 168)			HX_VARI( int,_g) = (int)0;
HXDLIN( 168)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 168)			while((_g < _g1->get_length())){
HXLINE( 168)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 168)				_g = (_g + (int)1);
HXLINE( 170)				bool _hx_tmp1;
HXDLIN( 170)				if ((charIndex >= group->startIndex)) {
HXLINE( 170)					_hx_tmp1 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE( 170)					_hx_tmp1 = false;
            				}
HXDLIN( 170)				if (_hx_tmp1) {
HXLINE( 172)					HX_VARI( Float,x) = group->offsetX;
HXLINE( 174)					{
HXLINE( 174)						HX_VARI( int,_g3) = (int)0;
HXDLIN( 174)						HX_VARI( int,_g2) = (charIndex - group->startIndex);
HXDLIN( 174)						while((_g3 < _g2)){
HXLINE( 174)							_g3 = (_g3 + (int)1);
HXLINE( 176)							x = (x + group->advances->__get((_g3 - (int)1)));
            						}
            					}
HXLINE( 180)					return  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,x,group->offsetY,group->advances->__get((charIndex - group->startIndex)),(group->ascent + group->descent));
            				}
            			}
            		}
HXLINE( 186)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_191_getCharIndexAtPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 193)		bool _hx_tmp;
HXDLIN( 193)		bool _hx_tmp1;
HXDLIN( 193)		bool _hx_tmp2;
HXDLIN( 193)		if (!((x <= (int)2))) {
HXLINE( 193)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 193)			_hx_tmp2 = true;
            		}
HXDLIN( 193)		if (!(_hx_tmp2)) {
HXLINE( 193)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 193)			_hx_tmp1 = true;
            		}
HXDLIN( 193)		if (!(_hx_tmp1)) {
HXLINE( 193)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 193)			_hx_tmp = true;
            		}
HXDLIN( 193)		if (_hx_tmp) {
HXLINE( 193)			return (int)-1;
            		}
HXLINE( 195)		this->_hx___updateLayout();
HXLINE( 197)		x = (x + this->get_scrollH());
HXLINE( 199)		{
HXLINE( 199)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 199)			HX_VARI( int,_g) = (this->get_scrollV() - (int)1);
HXDLIN( 199)			while((_g1 < _g)){
HXLINE( 199)				_g1 = (_g1 + (int)1);
HXLINE( 201)				y = (y + this->_hx___textEngine->lineHeights->get((_g1 - (int)1)));
            			}
            		}
HXLINE( 205)		{
HXLINE( 205)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 205)			HX_VARI_NAME(  ::openfl::_Vector::ObjectVector,_g11,"_g1") = this->_hx___textEngine->layoutGroups;
HXDLIN( 205)			while((_g2 < _g11->get_length())){
HXLINE( 205)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 205)				_g2 = (_g2 + (int)1);
HXLINE( 207)				bool _hx_tmp3;
HXDLIN( 207)				if ((y >= group->offsetY)) {
HXLINE( 207)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 207)					_hx_tmp3 = false;
            				}
HXDLIN( 207)				if (_hx_tmp3) {
HXLINE( 209)					bool _hx_tmp4;
HXDLIN( 209)					if ((x >= group->offsetX)) {
HXLINE( 209)						_hx_tmp4 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 209)						_hx_tmp4 = false;
            					}
HXDLIN( 209)					if (_hx_tmp4) {
HXLINE( 211)						HX_VARI( Float,advance) = ((Float)0.0);
HXLINE( 213)						{
HXLINE( 213)							HX_VARI( int,_g3) = (int)0;
HXDLIN( 213)							HX_VARI_NAME( int,_g21,"_g2") = group->advances->length;
HXDLIN( 213)							while((_g3 < _g21)){
HXLINE( 213)								_g3 = (_g3 + (int)1);
HXDLIN( 213)								HX_VARI( int,i) = (_g3 - (int)1);
HXLINE( 215)								advance = (advance + group->advances->__get(i));
HXLINE( 217)								if ((x <= (group->offsetX + advance))) {
HXLINE( 219)									return (group->startIndex + i);
            								}
            							}
            						}
HXLINE( 225)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 233)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

int TextField_obj::getFirstCharInParagraph(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_238_getFirstCharInParagraph)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 240)		bool _hx_tmp;
HXDLIN( 240)		if ((charIndex >= (int)0)) {
HXLINE( 240)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 240)			_hx_tmp = true;
            		}
HXDLIN( 240)		if (_hx_tmp) {
HXLINE( 240)			return (int)0;
            		}
HXLINE( 242)		HX_VARI( int,index) = this->_hx___textEngine->getLineBreakIndex(null());
HXLINE( 243)		HX_VARI( int,startIndex) = (int)0;
HXLINE( 245)		while((index > (int)-1)){
HXLINE( 247)			if ((index <= charIndex)) {
HXLINE( 249)				startIndex = (index + (int)1);
            			}
            			else {
HXLINE( 251)				if ((index > charIndex)) {
HXLINE( 253)					goto _hx_goto_9;
            				}
            			}
HXLINE( 257)			index = this->_hx___textEngine->getLineBreakIndex((index + (int)1));
            		}
            		_hx_goto_9:;
HXLINE( 261)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_266_getLineIndexAtPoint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 268)		this->_hx___updateLayout();
HXLINE( 270)		bool _hx_tmp;
HXDLIN( 270)		bool _hx_tmp1;
HXDLIN( 270)		bool _hx_tmp2;
HXDLIN( 270)		if (!((x <= (int)2))) {
HXLINE( 270)			_hx_tmp2 = (x > (this->get_width() + (int)4));
            		}
            		else {
HXLINE( 270)			_hx_tmp2 = true;
            		}
HXDLIN( 270)		if (!(_hx_tmp2)) {
HXLINE( 270)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 270)			_hx_tmp1 = true;
            		}
HXDLIN( 270)		if (!(_hx_tmp1)) {
HXLINE( 270)			_hx_tmp = (y > (this->get_height() + (int)4));
            		}
            		else {
HXLINE( 270)			_hx_tmp = true;
            		}
HXDLIN( 270)		if (_hx_tmp) {
HXLINE( 270)			return (int)-1;
            		}
HXLINE( 272)		{
HXLINE( 272)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 272)			HX_VARI( int,_g) = (this->get_scrollV() - (int)1);
HXDLIN( 272)			while((_g1 < _g)){
HXLINE( 272)				_g1 = (_g1 + (int)1);
HXLINE( 274)				y = (y + this->_hx___textEngine->lineHeights->get((_g1 - (int)1)));
            			}
            		}
HXLINE( 278)		{
HXLINE( 278)			HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 278)			HX_VARI_NAME(  ::openfl::_Vector::ObjectVector,_g11,"_g1") = this->_hx___textEngine->layoutGroups;
HXDLIN( 278)			while((_g2 < _g11->get_length())){
HXLINE( 278)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g11->get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 278)				_g2 = (_g2 + (int)1);
HXLINE( 280)				bool _hx_tmp3;
HXDLIN( 280)				if ((y >= group->offsetY)) {
HXLINE( 280)					_hx_tmp3 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 280)					_hx_tmp3 = false;
            				}
HXDLIN( 280)				if (_hx_tmp3) {
HXLINE( 282)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 288)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

int TextField_obj::getLineIndexOfChar(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_293_getLineIndexOfChar)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 295)		bool _hx_tmp;
HXDLIN( 295)		if ((charIndex >= (int)0)) {
HXLINE( 295)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE( 295)			_hx_tmp = true;
            		}
HXDLIN( 295)		if (_hx_tmp) {
HXLINE( 295)			return (int)-1;
            		}
HXLINE( 297)		this->_hx___updateLayout();
HXLINE( 299)		{
HXLINE( 299)			HX_VARI( int,_g) = (int)0;
HXDLIN( 299)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 299)			while((_g < _g1->get_length())){
HXLINE( 299)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 299)				_g = (_g + (int)1);
HXLINE( 301)				bool _hx_tmp1;
HXDLIN( 301)				if ((group->startIndex <= charIndex)) {
HXLINE( 301)					_hx_tmp1 = (group->endIndex >= charIndex);
            				}
            				else {
HXLINE( 301)					_hx_tmp1 = false;
            				}
HXDLIN( 301)				if (_hx_tmp1) {
HXLINE( 303)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 309)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

int TextField_obj::getLineLength(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_314_getLineLength)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 316)		this->_hx___updateLayout();
HXLINE( 318)		bool _hx_tmp;
HXDLIN( 318)		if ((lineIndex >= (int)0)) {
HXLINE( 318)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 318)			_hx_tmp = true;
            		}
HXDLIN( 318)		if (_hx_tmp) {
HXLINE( 318)			return (int)0;
            		}
HXLINE( 320)		HX_VARI( int,startIndex) = (int)-1;
HXLINE( 321)		HX_VARI( int,endIndex) = (int)-1;
HXLINE( 323)		{
HXLINE( 323)			HX_VARI( int,_g) = (int)0;
HXDLIN( 323)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 323)			while((_g < _g1->get_length())){
HXLINE( 323)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 323)				_g = (_g + (int)1);
HXLINE( 325)				if ((group->lineIndex == lineIndex)) {
HXLINE( 327)					if ((startIndex == (int)-1)) {
HXLINE( 327)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 329)					if ((group->lineIndex == (lineIndex + (int)1))) {
HXLINE( 331)						endIndex = group->startIndex;
HXLINE( 332)						goto _hx_goto_16;
            					}
            				}
            			}
            			_hx_goto_16:;
            		}
HXLINE( 338)		if ((endIndex == (int)-1)) {
HXLINE( 338)			endIndex = this->_hx___text.length;
            		}
HXLINE( 339)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(int lineIndex){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_344_getLineMetrics)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 346)		this->_hx___updateLayout();
HXLINE( 348)		HX_VARI( Float,ascender) = this->_hx___textEngine->lineAscents->get(lineIndex);
HXLINE( 349)		HX_VARI( Float,descender) = this->_hx___textEngine->lineDescents->get(lineIndex);
HXLINE( 350)		HX_VARI( Float,leading) = this->_hx___textEngine->lineLeadings->get(lineIndex);
HXLINE( 351)		HX_VARI( Float,lineHeight) = this->_hx___textEngine->lineHeights->get(lineIndex);
HXLINE( 352)		HX_VARI( Float,lineWidth) = this->_hx___textEngine->lineWidths->get(lineIndex);
HXLINE( 356)		HX_VAR( Float,margin);
HXDLIN( 356)		 ::Dynamic _hx_switch_0 = this->_hx___textFormat->align;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 356)			margin = ((Float)(this->_hx___textEngine->width - lineWidth) / (Float)(int)2);
HXDLIN( 356)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)4) ){
HXLINE( 356)			margin = ((this->_hx___textEngine->width - lineWidth) - (int)2);
HXDLIN( 356)			goto _hx_goto_18;
            		}
            		if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ){
HXLINE( 356)			margin = (int)2;
HXDLIN( 356)			goto _hx_goto_18;
            		}
            		_hx_goto_18:;
HXLINE( 364)		return  ::openfl::text::TextLineMetrics_obj::__alloc( HX_CTX ,margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

int TextField_obj::getLineOffset(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_369_getLineOffset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 371)		this->_hx___updateLayout();
HXLINE( 373)		bool _hx_tmp;
HXDLIN( 373)		if ((lineIndex >= (int)0)) {
HXLINE( 373)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 373)			_hx_tmp = true;
            		}
HXDLIN( 373)		if (_hx_tmp) {
HXLINE( 373)			return (int)-1;
            		}
HXLINE( 375)		{
HXLINE( 375)			HX_VARI( int,_g) = (int)0;
HXDLIN( 375)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 375)			while((_g < _g1->get_length())){
HXLINE( 375)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 375)				_g = (_g + (int)1);
HXLINE( 377)				if ((group->lineIndex == lineIndex)) {
HXLINE( 379)					return group->startIndex;
            				}
            			}
            		}
HXLINE( 385)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_390_getLineText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 392)		this->_hx___updateLayout();
HXLINE( 394)		bool _hx_tmp;
HXDLIN( 394)		if ((lineIndex >= (int)0)) {
HXLINE( 394)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 394)			_hx_tmp = true;
            		}
HXDLIN( 394)		if (_hx_tmp) {
HXLINE( 394)			return null();
            		}
HXLINE( 396)		HX_VARI( int,startIndex) = (int)-1;
HXLINE( 397)		HX_VARI( int,endIndex) = (int)-1;
HXLINE( 399)		{
HXLINE( 399)			HX_VARI( int,_g) = (int)0;
HXDLIN( 399)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 399)			while((_g < _g1->get_length())){
HXLINE( 399)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 399)				_g = (_g + (int)1);
HXLINE( 401)				if ((group->lineIndex == lineIndex)) {
HXLINE( 403)					if ((startIndex == (int)-1)) {
HXLINE( 403)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 405)					if ((group->lineIndex == (lineIndex + (int)1))) {
HXLINE( 407)						endIndex = group->startIndex;
HXLINE( 408)						goto _hx_goto_22;
            					}
            				}
            			}
            			_hx_goto_22:;
            		}
HXLINE( 414)		if ((endIndex == (int)-1)) {
HXLINE( 414)			endIndex = this->_hx___text.length;
            		}
HXLINE( 416)		return this->_hx___textEngine->text.substring(startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

int TextField_obj::getParagraphLength(int charIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_421_getParagraphLength)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 423)		bool _hx_tmp;
HXDLIN( 423)		if ((charIndex >= (int)0)) {
HXLINE( 423)			_hx_tmp = (charIndex > (this->_hx___text.length - (int)1));
            		}
            		else {
HXLINE( 423)			_hx_tmp = true;
            		}
HXDLIN( 423)		if (_hx_tmp) {
HXLINE( 423)			return (int)0;
            		}
HXLINE( 425)		HX_VARI( int,startIndex) = this->getFirstCharInParagraph(charIndex);
HXLINE( 426)		HX_VARI( int,endIndex) = (this->_hx___textEngine->getLineBreakIndex(charIndex) + (int)1);
HXLINE( 428)		if ((endIndex == (int)0)) {
HXLINE( 428)			endIndex = this->_hx___text.length;
            		}
HXLINE( 429)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_434_getTextFormat)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 436)		HX_VARI(  ::openfl::text::TextFormat,format) = null();
HXLINE( 438)		{
HXLINE( 438)			HX_VARI( int,_g) = (int)0;
HXDLIN( 438)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->_hx___textEngine->textFormatRanges;
HXDLIN( 438)			while((_g < _g1->get_length())){
HXLINE( 438)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,group) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 438)				_g = (_g + (int)1);
HXLINE( 440)				bool _hx_tmp;
HXDLIN( 440)				bool _hx_tmp1;
HXDLIN( 440)				if ((group->start <= beginIndex)) {
HXLINE( 440)					_hx_tmp1 = (group->end >= beginIndex);
            				}
            				else {
HXLINE( 440)					_hx_tmp1 = false;
            				}
HXDLIN( 440)				if (!(_hx_tmp1)) {
HXLINE( 440)					if ((group->start <= endIndex)) {
HXLINE( 440)						_hx_tmp = (group->end >= endIndex);
            					}
            					else {
HXLINE( 440)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 440)					_hx_tmp = true;
            				}
HXDLIN( 440)				if (_hx_tmp) {
HXLINE( 442)					if (hx::IsNull( format )) {
HXLINE( 444)						format = group->format->clone();
            					}
            					else {
HXLINE( 448)						if ((group->format->font != format->font)) {
HXLINE( 448)							format->font = null();
            						}
HXLINE( 449)						if (hx::IsNotEq( group->format->size,format->size )) {
HXLINE( 449)							format->size = null();
            						}
HXLINE( 450)						if (hx::IsNotEq( group->format->color,format->color )) {
HXLINE( 450)							format->color = null();
            						}
HXLINE( 451)						if (hx::IsNotEq( group->format->bold,format->bold )) {
HXLINE( 451)							format->bold = null();
            						}
HXLINE( 452)						if (hx::IsNotEq( group->format->italic,format->italic )) {
HXLINE( 452)							format->italic = null();
            						}
HXLINE( 453)						if (hx::IsNotEq( group->format->underline,format->underline )) {
HXLINE( 453)							format->underline = null();
            						}
HXLINE( 454)						if ((group->format->url != format->url)) {
HXLINE( 454)							format->url = null();
            						}
HXLINE( 455)						if ((group->format->target != format->target)) {
HXLINE( 455)							format->target = null();
            						}
HXLINE( 456)						if (hx::IsNotEq( group->format->align,format->align )) {
HXLINE( 456)							format->align = null();
            						}
HXLINE( 457)						if (hx::IsNotEq( group->format->leftMargin,format->leftMargin )) {
HXLINE( 457)							format->leftMargin = null();
            						}
HXLINE( 458)						if (hx::IsNotEq( group->format->rightMargin,format->rightMargin )) {
HXLINE( 458)							format->rightMargin = null();
            						}
HXLINE( 459)						if (hx::IsNotEq( group->format->indent,format->indent )) {
HXLINE( 459)							format->indent = null();
            						}
HXLINE( 460)						if (hx::IsNotEq( group->format->leading,format->leading )) {
HXLINE( 460)							format->leading = null();
            						}
HXLINE( 461)						if (hx::IsNotEq( group->format->blockIndent,format->blockIndent )) {
HXLINE( 461)							format->blockIndent = null();
            						}
HXLINE( 462)						if (hx::IsNotEq( group->format->bullet,format->bullet )) {
HXLINE( 462)							format->bullet = null();
            						}
HXLINE( 463)						if (hx::IsNotEq( group->format->kerning,format->kerning )) {
HXLINE( 463)							format->kerning = null();
            						}
HXLINE( 464)						if (hx::IsNotEq( group->format->letterSpacing,format->letterSpacing )) {
HXLINE( 464)							format->letterSpacing = null();
            						}
HXLINE( 465)						if (hx::IsNotEq( group->format->tabStops,format->tabStops )) {
HXLINE( 465)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 473)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_478_replaceSelectedText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 480)		bool _hx_tmp;
HXDLIN( 480)		if ((value == HX_("",00,00,00,00))) {
HXLINE( 480)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE( 480)			_hx_tmp = false;
            		}
HXDLIN( 480)		if (_hx_tmp) {
HXLINE( 480)			return;
            		}
HXLINE( 482)		HX_VAR( int,startIndex);
HXDLIN( 482)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE( 482)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 482)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE( 483)		HX_VAR( int,endIndex);
HXDLIN( 483)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE( 483)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 483)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE( 485)		this->replaceText(startIndex,endIndex,value);
HXLINE( 487)		HX_VARI( int,i) = (startIndex + value.length);
HXLINE( 488)		this->setSelection(i,i);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(int beginIndex,int endIndex,::String newText){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_493_replaceText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
            	HX_STACK_ARG(newText,"newText")
HXLINE( 495)		bool _hx_tmp;
HXDLIN( 495)		bool _hx_tmp1;
HXDLIN( 495)		bool _hx_tmp2;
HXDLIN( 495)		if ((endIndex >= beginIndex)) {
HXLINE( 495)			_hx_tmp2 = (beginIndex < (int)0);
            		}
            		else {
HXLINE( 495)			_hx_tmp2 = true;
            		}
HXDLIN( 495)		if (!(_hx_tmp2)) {
HXLINE( 495)			_hx_tmp1 = (endIndex > this->_hx___text.length);
            		}
            		else {
HXLINE( 495)			_hx_tmp1 = true;
            		}
HXDLIN( 495)		if (!(_hx_tmp1)) {
HXLINE( 495)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE( 495)			_hx_tmp = true;
            		}
HXDLIN( 495)		if (_hx_tmp) {
HXLINE( 495)			return;
            		}
HXLINE( 497)		::String _hx_tmp3 = (this->_hx___text.substring((int)0,beginIndex) + newText);
HXDLIN( 497)		this->_hx___updateText((_hx_tmp3 + this->_hx___text.substring(endIndex,null())));
HXLINE( 499)		HX_VARI( int,offset) = (newText.length - (endIndex - beginIndex));
HXLINE( 501)		HX_VARI( int,i) = (int)0;
HXLINE( 502)		HX_VAR(  ::openfl::_internal::text::TextFormatRange,range);
HXLINE( 504)		while((i < this->_hx___textEngine->textFormatRanges->get_length())){
HXLINE( 506)			range = this->_hx___textEngine->textFormatRanges->get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 508)			bool _hx_tmp4;
HXDLIN( 508)			if ((range->start <= beginIndex)) {
HXLINE( 508)				_hx_tmp4 = (range->end >= endIndex);
            			}
            			else {
HXLINE( 508)				_hx_tmp4 = false;
            			}
HXDLIN( 508)			if (_hx_tmp4) {
HXLINE( 510)				range->end = (range->end + offset);
HXLINE( 511)				i = (i + (int)1);
            			}
            			else {
HXLINE( 513)				bool _hx_tmp5;
HXDLIN( 513)				if ((range->start >= beginIndex)) {
HXLINE( 513)					_hx_tmp5 = (range->end <= endIndex);
            				}
            				else {
HXLINE( 513)					_hx_tmp5 = false;
            				}
HXDLIN( 513)				if (_hx_tmp5) {
HXLINE( 515)					if ((i > (int)0)) {
HXLINE( 517)						this->_hx___textEngine->textFormatRanges->splice(i,(int)1);
            					}
            					else {
HXLINE( 521)						range->start = (int)0;
HXLINE( 522)						range->end = (int)0;
            					}
HXLINE( 526)					offset = (offset - (range->end - range->start));
            				}
            				else {
HXLINE( 528)					bool _hx_tmp6;
HXDLIN( 528)					if ((range->start > beginIndex)) {
HXLINE( 528)						_hx_tmp6 = (range->start <= endIndex);
            					}
            					else {
HXLINE( 528)						_hx_tmp6 = false;
            					}
HXDLIN( 528)					if (_hx_tmp6) {
HXLINE( 530)						range->start = (range->start + offset);
HXLINE( 531)						i = (i + (int)1);
            					}
            					else {
HXLINE( 535)						i = (i + (int)1);
            					}
            				}
            			}
            		}
HXLINE( 541)		this->_hx___dirty = true;
HXLINE( 542)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(int beginIndex,int endIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_547_setSelection)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 549)		this->_hx___selectionIndex = beginIndex;
HXLINE( 550)		this->_hx___caretIndex = endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_555_setTextFormat)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 557)		HX_VARI( int,max) = this->get_text().length;
HXLINE( 558)		HX_VAR(  ::openfl::_internal::text::TextFormatRange,range);
HXLINE( 560)		if ((beginIndex < (int)0)) {
HXLINE( 562)			beginIndex = (int)0;
HXLINE( 563)			endIndex = max;
            		}
            		else {
HXLINE( 565)			if ((endIndex < (int)0)) {
HXLINE( 567)				endIndex = (beginIndex + (int)1);
            			}
            		}
HXLINE( 571)		if ((endIndex > max)) {
HXLINE( 573)			endIndex = max;
            		}
HXLINE( 577)		if ((endIndex < beginIndex)) {
HXLINE( 577)			return;
            		}
HXLINE( 579)		bool _hx_tmp;
HXDLIN( 579)		if ((beginIndex == (int)0)) {
HXLINE( 579)			_hx_tmp = (endIndex == max);
            		}
            		else {
HXLINE( 579)			_hx_tmp = false;
            		}
HXDLIN( 579)		if (_hx_tmp) {
HXLINE( 581)			this->_hx___textFormat->_hx___merge(format);
HXLINE( 583)			if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE( 585)				this->_hx___textEngine->textFormatRanges->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
HXLINE( 587)				range = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 588)				range->format = this->_hx___textFormat;
HXLINE( 589)				range->start = (int)0;
HXLINE( 590)				range->end = max;
            			}
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            			int _hx_run( ::openfl::_internal::text::TextFormatRange a, ::openfl::_internal::text::TextFormatRange b){
            				HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_706_setTextFormat)
            				HX_STACK_ARG(a,"a")
            				HX_STACK_ARG(b,"b")
HXLINE( 708)				bool _hx_tmp4;
HXDLIN( 708)				if ((a->start >= b->start)) {
HXLINE( 708)					_hx_tmp4 = (a->end < b->end);
            				}
            				else {
HXLINE( 708)					_hx_tmp4 = true;
            				}
HXDLIN( 708)				if (_hx_tmp4) {
HXLINE( 710)					return (int)-1;
            				}
            				else {
HXLINE( 712)					bool _hx_tmp5;
HXDLIN( 712)					if ((a->start <= b->start)) {
HXLINE( 712)						_hx_tmp5 = (a->end > b->end);
            					}
            					else {
HXLINE( 712)						_hx_tmp5 = true;
            					}
HXDLIN( 712)					if (_hx_tmp5) {
HXLINE( 714)						return (int)1;
            					}
            				}
HXLINE( 718)				return (int)0;
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE( 596)			HX_VARI( int,index) = this->_hx___textEngine->textFormatRanges->get_length();
HXLINE( 597)			HX_VAR( int,searchIndex);
HXLINE( 599)			while((index > (int)0)){
HXLINE( 601)				index = (index - (int)1);
HXLINE( 602)				range = this->_hx___textEngine->textFormatRanges->get(index).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 604)				bool _hx_tmp1;
HXDLIN( 604)				if ((range->start == beginIndex)) {
HXLINE( 604)					_hx_tmp1 = (range->end == endIndex);
            				}
            				else {
HXLINE( 604)					_hx_tmp1 = false;
            				}
HXDLIN( 604)				if (_hx_tmp1) {
HXLINE( 606)					range->format = format->clone();
HXLINE( 607)					return;
            				}
HXLINE( 611)				bool _hx_tmp2;
HXDLIN( 611)				if ((range->start > beginIndex)) {
HXLINE( 611)					_hx_tmp2 = (range->end < endIndex);
            				}
            				else {
HXLINE( 611)					_hx_tmp2 = false;
            				}
HXDLIN( 611)				if (_hx_tmp2) {
HXLINE( 613)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(range,(int)0);
HXLINE( 615)					if ((searchIndex > (int)-1)) {
HXLINE( 617)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
            				}
            			}
HXLINE( 625)			HX_VARI(  ::openfl::_internal::text::TextFormatRange,prevRange) = null();
HXDLIN( 625)			HX_VARI(  ::openfl::_internal::text::TextFormatRange,nextRange) = null();
HXLINE( 627)			{
HXLINE( 627)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 627)				HX_VARI( int,_g) = this->_hx___textEngine->textFormatRanges->get_length();
HXDLIN( 627)				while((_g1 < _g)){
HXLINE( 627)					_g1 = (_g1 + (int)1);
HXLINE( 629)					range = this->_hx___textEngine->textFormatRanges->get((_g1 - (int)1)).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 631)					if ((beginIndex > (int)0)) {
HXLINE( 633)						bool _hx_tmp3;
HXDLIN( 633)						if (hx::IsNull( prevRange )) {
HXLINE( 633)							_hx_tmp3 = (range->end >= beginIndex);
            						}
            						else {
HXLINE( 633)							_hx_tmp3 = false;
            						}
HXDLIN( 633)						if (_hx_tmp3) {
HXLINE( 635)							prevRange = range;
            						}
            					}
HXLINE( 643)					if ((endIndex < max)) {
HXLINE( 645)						if ((range->start <= endIndex)) {
HXLINE( 647)							nextRange = range;
            						}
            					}
            				}
            			}
HXLINE( 657)			if (hx::IsEq( nextRange,prevRange )) {
HXLINE( 659)				 ::openfl::text::TextFormat nextRange1 = nextRange->format->clone();
HXDLIN( 659)				nextRange =  ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,nextRange1,nextRange->start,nextRange->end);
HXLINE( 660)				this->_hx___textEngine->textFormatRanges->push(nextRange);
            			}
HXLINE( 664)			if (hx::IsNotNull( prevRange )) {
HXLINE( 666)				prevRange->end = (beginIndex - (int)1);
HXLINE( 668)				if ((prevRange->end <= prevRange->start)) {
HXLINE( 670)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(prevRange,(int)0);
HXLINE( 672)					if ((searchIndex > (int)-1)) {
HXLINE( 674)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
            				}
            			}
HXLINE( 684)			if (hx::IsNotNull( nextRange )) {
HXLINE( 686)				nextRange->start = (endIndex + (int)1);
HXLINE( 688)				if ((nextRange->start >= nextRange->end)) {
HXLINE( 690)					searchIndex = this->_hx___textEngine->textFormatRanges->indexOf(nextRange,(int)0);
HXLINE( 692)					if ((searchIndex > (int)-1)) {
HXLINE( 694)						this->_hx___textEngine->textFormatRanges->splice(searchIndex,(int)1);
            					}
            				}
            			}
HXLINE( 704)			{
HXLINE( 704)				::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN( 704)				( ( ::openfl::_Vector::ObjectVector)(this1) )->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format->clone(),beginIndex,endIndex));
            			}
HXLINE( 706)			this->_hx___textEngine->textFormatRanges->sort( ::Dynamic(new _hx_Closure_0()));
            		}
HXLINE( 724)		this->_hx___dirty = true;
HXLINE( 725)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

void TextField_obj::_hx___caretBeginningOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_732___caretBeginningOfLine)
            	HX_STACK_THIS(this)
HXLINE( 732)		bool _hx_tmp;
HXDLIN( 732)		if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE( 732)			_hx_tmp = (this->_hx___caretIndex < this->_hx___selectionIndex);
            		}
            		else {
HXLINE( 732)			_hx_tmp = true;
            		}
HXDLIN( 732)		if (_hx_tmp) {
HXLINE( 734)			this->_hx___caretIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___caretIndex));
            		}
            		else {
HXLINE( 738)			this->_hx___selectionIndex = this->getLineOffset(this->getLineIndexOfChar(this->_hx___selectionIndex));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretBeginningOfLine,(void))

void TextField_obj::_hx___caretEndOfLine(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_745___caretEndOfLine)
            	HX_STACK_THIS(this)
HXLINE( 747)		HX_VAR( int,lineIndex);
HXLINE( 749)		if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE( 751)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
            		else {
HXLINE( 755)			lineIndex = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
            		}
HXLINE( 759)		if ((lineIndex < (this->_hx___textEngine->numLines - (int)1))) {
HXLINE( 761)			this->_hx___caretIndex = (this->getLineOffset((lineIndex + (int)1)) - (int)1);
            		}
            		else {
HXLINE( 765)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretEndOfLine,(void))

void TextField_obj::_hx___caretNextCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_774___caretNextCharacter)
            	HX_STACK_THIS(this)
HXLINE( 774)		if ((this->_hx___caretIndex < this->_hx___text.length)) {
HXLINE( 776)			this->_hx___caretIndex++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretNextCharacter,(void))

void TextField_obj::_hx___caretNextLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_783___caretNextLine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
            	HX_STACK_ARG(caretIndex,"caretIndex")
HXLINE( 785)		if (hx::IsNull( lineIndex )) {
HXLINE( 787)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 791)		if (hx::IsLess( lineIndex,(this->_hx___textEngine->numLines - (int)1) )) {
HXLINE( 793)			if (hx::IsNull( caretIndex )) {
HXLINE( 795)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 799)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex + (int)1));
            		}
            		else {
HXLINE( 803)			this->_hx___caretIndex = this->_hx___text.length;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretNextLine,(void))

void TextField_obj::_hx___caretPreviousCharacter(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_812___caretPreviousCharacter)
            	HX_STACK_THIS(this)
HXLINE( 812)		if ((this->_hx___caretIndex > (int)0)) {
HXLINE( 814)			this->_hx___caretIndex--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___caretPreviousCharacter,(void))

void TextField_obj::_hx___caretPreviousLine( ::Dynamic lineIndex, ::Dynamic caretIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_821___caretPreviousLine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
            	HX_STACK_ARG(caretIndex,"caretIndex")
HXLINE( 823)		if (hx::IsNull( lineIndex )) {
HXLINE( 825)			lineIndex = this->getLineIndexOfChar(this->_hx___caretIndex);
            		}
HXLINE( 829)		if (hx::IsGreater( lineIndex,(int)0 )) {
HXLINE( 831)			if (hx::IsNull( caretIndex )) {
HXLINE( 833)				caretIndex = this->_hx___caretIndex;
            			}
HXLINE( 837)			this->_hx___caretIndex = this->_hx___getCharIndexOnDifferentLine(caretIndex,(lineIndex - (int)1));
            		}
            		else {
HXLINE( 841)			this->_hx___caretIndex = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___caretPreviousLine,(void))

void TextField_obj::_hx___fromSymbol( ::openfl::_internal::swf::SWFLite swf, ::openfl::_internal::symbols::DynamicTextSymbol symbol){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_848___fromSymbol)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(swf,"swf")
            	HX_STACK_ARG(symbol,"symbol")
HXLINE( 850)		this->_hx___symbol = symbol;
HXLINE( 852)		this->set_width(symbol->width);
HXLINE( 853)		this->set_height(symbol->height);
HXLINE( 855)		this->_hx___offsetX = symbol->x;
HXLINE( 856)		this->_hx___offsetY = symbol->y;
HXLINE( 858)		this->set_multiline(symbol->multiline);
HXLINE( 859)		this->set_wordWrap(symbol->wordWrap);
HXLINE( 860)		this->set_displayAsPassword(symbol->password);
HXLINE( 862)		if (symbol->border) {
HXLINE( 864)			this->set_border(true);
HXLINE( 865)			this->set_background(true);
            		}
HXLINE( 869)		this->set_selectable(symbol->selectable);
HXLINE( 871)		if (symbol->input) {
HXLINE( 873)			this->set_type((int)1);
            		}
HXLINE( 877)		HX_VARI(  ::openfl::text::TextFormat,format) =  ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 878)		if (hx::IsNotNull( symbol->color )) {
HXLINE( 878)			format->color = ((int)symbol->color & (int)(int)16777215);
            		}
HXLINE( 879)		format->size = ::Math_obj::round(((Float)symbol->fontHeight / (Float)(int)20));
HXLINE( 881)		swf->symbols->get(symbol->fontID).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >();
HXLINE( 895)		format->font = symbol->fontName;
HXLINE( 897)		HX_VARI( bool,found) = false;
HXLINE( 899)		{
HXLINE( 899)			HX_VARI( ::String,_g) = format->font;
HXDLIN( 899)			if (hx::IsNull( _g )) {
HXLINE( 903)				found = true;
            			}
            			else {
HXLINE( 899)				::String _hx_switch_0 = _g;
            				if (  (_hx_switch_0==HX_("",00,00,00,00)) ||  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ||  (_hx_switch_0==HX_("_serif",be,66,15,76)) ||  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 903)					found = true;
HXDLIN( 903)					goto _hx_goto_42;
            				}
            				/* default */{
HXLINE( 907)					HX_VARI_NAME( int,_g1,"_g") = (int)0;
HXDLIN( 907)					HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = ::openfl::text::Font_obj::enumerateFonts(null());
HXDLIN( 907)					while((_g1 < _g11->length)){
HXLINE( 907)						HX_VARI(  ::openfl::text::Font,font) = _g11->__get(_g1).StaticCast<  ::openfl::text::Font >();
HXDLIN( 907)						_g1 = (_g1 + (int)1);
HXLINE( 909)						if ((font->name == format->font)) {
HXLINE( 911)							found = true;
HXLINE( 912)							goto _hx_goto_41;
            						}
            					}
            					_hx_goto_41:;
            				}
            				_hx_goto_42:;
            			}
            		}
HXLINE( 920)		if (found) {
HXLINE( 922)			this->set_embedFonts(true);
            		}
            		else {
HXLINE( 926)			::lime::utils::Log_obj::warn(((HX_("Could not find required font \"",97,15,e8,5b) + format->font) + HX_("\", it has not been embedded",4c,66,7a,0a)),hx::SourceInfo(HX_("TextField.hx",31,a8,83,a8),926,HX_("openfl.text.TextField",ca,a8,d5,ef),HX_("__fromSymbol",82,2f,b5,6a)));
            		}
HXLINE( 930)		if (hx::IsNotNull( symbol->align )) {
HXLINE( 932)			if ((symbol->align == HX_("center",d5,25,db,05))) {
HXLINE( 932)				format->align = (int)0;
            			}
            			else {
HXLINE( 933)				if ((symbol->align == HX_("right",dc,0b,64,e9))) {
HXLINE( 933)					format->align = (int)4;
            				}
            				else {
HXLINE( 934)					if ((symbol->align == HX_("justify",50,df,b5,83))) {
HXLINE( 934)						format->align = (int)2;
            					}
            				}
            			}
HXLINE( 936)			format->leftMargin = ::Std_obj::_hx_int(((Float)symbol->leftMargin / (Float)(int)20));
HXLINE( 937)			format->rightMargin = ::Std_obj::_hx_int(((Float)symbol->rightMargin / (Float)(int)20));
HXLINE( 938)			format->indent = ::Std_obj::_hx_int(((Float)symbol->indent / (Float)(int)20));
HXLINE( 939)			format->leading = ::Std_obj::_hx_int(((Float)symbol->leading / (Float)(int)20));
HXLINE( 941)			if (this->get_embedFonts()) {
HXLINE( 941)				format->leading = (format->leading + (int)4);
            			}
            		}
HXLINE( 945)		this->set_defaultTextFormat(format);
HXLINE( 947)		if (hx::IsNotNull( symbol->text )) {
HXLINE( 949)			if (symbol->html) {
HXLINE( 951)				this->set_htmlText(symbol->text);
            			}
            			else {
HXLINE( 955)				this->set_text(symbol->text);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___fromSymbol,(void))

::String TextField_obj::_hx___getAttributeMatch( ::EReg regex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_968___getAttributeMatch)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(regex,"regex")
HXLINE( 968)		if (hx::IsNotNull( regex->matched((int)2) )) {
HXLINE( 968)			return regex->matched((int)2);
            		}
            		else {
HXLINE( 968)			return regex->matched((int)3);
            		}
HXDLIN( 968)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___getAttributeMatch,return )

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_973___getBounds)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 975)		this->_hx___updateLayout();
HXLINE( 977)		HX_VARI(  ::openfl::geom::Rectangle,bounds) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 978)		bounds->copyFrom(this->_hx___textEngine->bounds);
HXLINE( 979)		bounds->x = (bounds->x + this->_hx___offsetX);
HXLINE( 980)		bounds->y = (bounds->y + this->_hx___offsetY);
HXLINE( 981)		bounds->_hx___transform(bounds,matrix);
HXLINE( 983)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
            	}


int TextField_obj::_hx___getCharIndexOnDifferentLine(int charIndex,int lineIndex){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_988___getCharIndexOnDifferentLine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 990)		bool _hx_tmp;
HXDLIN( 990)		if ((charIndex >= (int)0)) {
HXLINE( 990)			_hx_tmp = (charIndex > this->_hx___text.length);
            		}
            		else {
HXLINE( 990)			_hx_tmp = true;
            		}
HXDLIN( 990)		if (_hx_tmp) {
HXLINE( 990)			return (int)-1;
            		}
HXLINE( 991)		bool _hx_tmp1;
HXDLIN( 991)		if ((lineIndex >= (int)0)) {
HXLINE( 991)			_hx_tmp1 = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 991)			_hx_tmp1 = true;
            		}
HXDLIN( 991)		if (_hx_tmp1) {
HXLINE( 991)			return (int)-1;
            		}
HXLINE( 993)		HX_VARI(  ::Dynamic,x) = null();
HXDLIN( 993)		HX_VARI(  ::Dynamic,y) = null();
HXLINE( 995)		{
HXLINE( 995)			HX_VARI( int,_g) = (int)0;
HXDLIN( 995)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 995)			while((_g < _g1->get_length())){
HXLINE( 995)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 995)				_g = (_g + (int)1);
HXLINE( 997)				bool _hx_tmp2;
HXDLIN( 997)				if ((charIndex >= group->startIndex)) {
HXLINE( 997)					_hx_tmp2 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE( 997)					_hx_tmp2 = false;
            				}
HXDLIN( 997)				if (_hx_tmp2) {
HXLINE( 999)					x = group->offsetX;
HXLINE(1001)					{
HXLINE(1001)						HX_VARI( int,_g3) = (int)0;
HXDLIN(1001)						HX_VARI( int,_g2) = (charIndex - group->startIndex);
HXDLIN(1001)						while((_g3 < _g2)){
HXLINE(1001)							_g3 = (_g3 + (int)1);
HXLINE(1003)							x = (x + group->advances->__get((_g3 - (int)1)));
            						}
            					}
HXLINE(1007)					if (hx::IsNotNull( y )) {
HXLINE(1007)						return this->_hx___getPosition(x,y);
            					}
            				}
HXLINE(1011)				if ((group->lineIndex == lineIndex)) {
HXLINE(1013)					y = (group->offsetY + ((Float)group->height / (Float)(int)2));
HXLINE(1015)					if (hx::IsNotNull( x )) {
HXLINE(1015)						return this->_hx___getPosition(x,y);
            					}
            				}
            			}
            		}
HXLINE(1021)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getCharIndexOnDifferentLine,return )

 ::lime::ui::MouseCursor TextField_obj::_hx___getCursor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1028___getCursor)
            	HX_STACK_THIS(this)
HXLINE(1028)		if (this->_hx___textEngine->selectable) {
HXLINE(1028)			return ::lime::ui::MouseCursor_obj::TEXT_dyn();
            		}
            		else {
HXLINE(1028)			return null();
            		}
HXDLIN(1028)		return null();
            	}


int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1033___getPosition)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1035)		this->_hx___updateLayout();
HXLINE(1037)		x = (x + this->get_scrollH());
HXLINE(1039)		{
HXLINE(1039)			HX_VARI( int,_g1) = (int)0;
HXDLIN(1039)			HX_VARI( int,_g) = (this->get_scrollV() - (int)1);
HXDLIN(1039)			while((_g1 < _g)){
HXLINE(1039)				_g1 = (_g1 + (int)1);
HXLINE(1041)				y = (y + this->_hx___textEngine->lineHeights->get((_g1 - (int)1)));
            			}
            		}
HXLINE(1045)		if ((y > this->_hx___textEngine->textHeight)) {
HXLINE(1045)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE(1047)		HX_VARI( bool,firstGroup) = true;
HXLINE(1048)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,group);
HXDLIN(1048)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,nextGroup);
HXLINE(1050)		{
HXLINE(1050)			HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN(1050)			HX_VARI_NAME( int,_g2,"_g") = this->_hx___textEngine->layoutGroups->get_length();
HXDLIN(1050)			while((_g11 < _g2)){
HXLINE(1050)				_g11 = (_g11 + (int)1);
HXDLIN(1050)				HX_VARI( int,i) = (_g11 - (int)1);
HXLINE(1052)				group = this->_hx___textEngine->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1054)				if ((i < (this->_hx___textEngine->layoutGroups->get_length() - (int)1))) {
HXLINE(1056)					nextGroup = this->_hx___textEngine->layoutGroups->get((i + (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE(1060)					nextGroup = null();
            				}
HXLINE(1064)				if (firstGroup) {
HXLINE(1066)					if ((y < group->offsetY)) {
HXLINE(1066)						y = group->offsetY;
            					}
HXLINE(1067)					if ((x < group->offsetX)) {
HXLINE(1067)						x = group->offsetX;
            					}
HXLINE(1068)					firstGroup = false;
            				}
HXLINE(1072)				bool _hx_tmp;
HXDLIN(1072)				bool _hx_tmp1;
HXDLIN(1072)				if ((y >= group->offsetY)) {
HXLINE(1072)					_hx_tmp1 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE(1072)					_hx_tmp1 = false;
            				}
HXDLIN(1072)				if (!(_hx_tmp1)) {
HXLINE(1072)					_hx_tmp = hx::IsNull( nextGroup );
            				}
            				else {
HXLINE(1072)					_hx_tmp = true;
            				}
HXDLIN(1072)				if (_hx_tmp) {
HXLINE(1074)					bool _hx_tmp2;
HXDLIN(1074)					bool _hx_tmp3;
HXDLIN(1074)					if ((x >= group->offsetX)) {
HXLINE(1074)						_hx_tmp3 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE(1074)						_hx_tmp3 = false;
            					}
HXDLIN(1074)					if (!(_hx_tmp3)) {
HXLINE(1074)						if (hx::IsNotNull( nextGroup )) {
HXLINE(1074)							_hx_tmp2 = (nextGroup->lineIndex != group->lineIndex);
            						}
            						else {
HXLINE(1074)							_hx_tmp2 = true;
            						}
            					}
            					else {
HXLINE(1074)						_hx_tmp2 = true;
            					}
HXDLIN(1074)					if (_hx_tmp2) {
HXLINE(1076)						HX_VARI( Float,advance) = ((Float)0.0);
HXLINE(1078)						{
HXLINE(1078)							HX_VARI( int,_g3) = (int)0;
HXDLIN(1078)							HX_VARI_NAME( int,_g21,"_g2") = group->advances->length;
HXDLIN(1078)							while((_g3 < _g21)){
HXLINE(1078)								_g3 = (_g3 + (int)1);
HXDLIN(1078)								HX_VARI_NAME( int,i1,"i") = (_g3 - (int)1);
HXLINE(1080)								advance = (advance + group->advances->__get(i1));
HXLINE(1082)								if ((x <= (group->offsetX + advance))) {
HXLINE(1084)									if ((x <= ((group->offsetX + (advance - group->advances->__get(i1))) + ((Float)group->advances->__get(i1) / (Float)(int)2)))) {
HXLINE(1086)										return (group->startIndex + i1);
            									}
            									else {
HXLINE(1090)										if (((group->startIndex + i1) < group->endIndex)) {
HXLINE(1090)											return ((group->startIndex + i1) + (int)1);
            										}
            										else {
HXLINE(1090)											return group->endIndex;
            										}
            									}
            								}
            							}
            						}
HXLINE(1098)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE(1106)		return this->_hx___text.length;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

bool TextField_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1111___hitTest)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(stack,"stack")
            	HX_STACK_ARG(interactiveOnly,"interactiveOnly")
            	HX_STACK_ARG(hitObject,"hitObject")
HXLINE(1113)		bool _hx_tmp;
HXDLIN(1113)		bool _hx_tmp1;
HXDLIN(1113)		if (!(!(hitObject->get_visible()))) {
HXLINE(1113)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE(1113)			_hx_tmp1 = true;
            		}
HXDLIN(1113)		if (!(_hx_tmp1)) {
HXLINE(1113)			if (interactiveOnly) {
HXLINE(1113)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE(1113)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE(1113)			_hx_tmp = true;
            		}
HXDLIN(1113)		if (_hx_tmp) {
HXLINE(1113)			return false;
            		}
HXLINE(1114)		bool _hx_tmp2;
HXDLIN(1114)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE(1114)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE(1114)			_hx_tmp2 = false;
            		}
HXDLIN(1114)		if (_hx_tmp2) {
HXLINE(1114)			return false;
            		}
HXLINE(1116)		this->_hx___getRenderTransform();
HXLINE(1117)		this->_hx___updateLayout();
HXLINE(1119)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___renderTransform;
HXDLIN(1119)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1119)		HX_VAR( Float,px);
HXDLIN(1119)		if ((norm == (int)0)) {
HXLINE(1119)			px = -(_this->tx);
            		}
            		else {
HXLINE(1119)			px = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(1120)		HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___renderTransform;
HXDLIN(1120)		HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(1120)		HX_VAR( Float,py);
HXDLIN(1120)		if ((norm1 == (int)0)) {
HXLINE(1120)			py = -(_this1->ty);
            		}
            		else {
HXLINE(1120)			py = (((Float)((Float)1.0) / (Float)norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(1122)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1124)			if (hx::IsNotNull( stack )) {
HXLINE(1126)				stack->push(hitObject);
            			}
HXLINE(1130)			return true;
            		}
HXLINE(1134)		return false;
            	}


bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1139___hitTestMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1141)		this->_hx___getRenderTransform();
HXLINE(1142)		this->_hx___updateLayout();
HXLINE(1144)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___renderTransform;
HXDLIN(1144)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1144)		HX_VAR( Float,px);
HXDLIN(1144)		if ((norm == (int)0)) {
HXLINE(1144)			px = -(_this->tx);
            		}
            		else {
HXLINE(1144)			px = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE(1145)		HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___renderTransform;
HXDLIN(1145)		HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN(1145)		HX_VAR( Float,py);
HXDLIN(1145)		if ((norm1 == (int)0)) {
HXLINE(1145)			py = -(_this1->ty);
            		}
            		else {
HXLINE(1145)			py = (((Float)((Float)1.0) / (Float)norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE(1147)		if (this->_hx___textEngine->bounds->contains(px,py)) {
HXLINE(1149)			return true;
            		}
HXLINE(1153)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1158___renderCairo)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1161)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1162)		this->super::_hx___renderCairo(renderSession);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1168___renderCanvas)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1170)		 ::openfl::geom::Matrix transform = this->_hx___worldTransform;
HXLINE(1172)		bool _hx_tmp;
HXDLIN(1172)		if (hx::IsEq( this->_hx___textEngine->antiAliasType,(int)0 )) {
HXLINE(1172)			_hx_tmp = hx::IsEq( this->_hx___textEngine->gridFitType,(int)1 );
            		}
            		else {
HXLINE(1172)			_hx_tmp = false;
            		}
HXDLIN(1172)		if (_hx_tmp) {
HXLINE(1174)			HX_VARI( bool,smoothingEnabled) = renderSession->context->imageSmoothingEnabled;
HXLINE(1176)			if (smoothingEnabled) {
HXLINE(1178)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),false,hx::paccDynamic);
HXLINE(1180)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),false,hx::paccDynamic);
HXLINE(1181)				renderSession->context->imageSmoothingEnabled = false;
            			}
HXLINE(1185)			this->super::_hx___renderCanvas(renderSession);
HXLINE(1187)			if (smoothingEnabled) {
HXLINE(1189)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),true,hx::paccDynamic);
HXLINE(1191)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),true,hx::paccDynamic);
HXLINE(1192)				renderSession->context->imageSmoothingEnabled = true;
            			}
            		}
            		else {
HXLINE(1198)			this->super::_hx___renderCanvas(renderSession);
            		}
            	}


void TextField_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1205___renderDOM)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


void TextField_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1214___renderGL)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1219)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession,this->_hx___worldTransform);
HXLINE(1222)		this->super::_hx___renderGL(renderSession);
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1227___startCursorTimer)
            	HX_STACK_THIS(this)
HXLINE(1229)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),(int)600);
HXLINE(1230)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE(1231)		this->_hx___dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1236___startTextInput)
            	HX_STACK_THIS(this)
HXLINE(1238)		if ((this->_hx___caretIndex < (int)0)) {
HXLINE(1240)			this->_hx___caretIndex = this->_hx___text.length;
HXLINE(1241)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE(1245)		if (hx::IsNotNull( this->stage )) {
HXLINE(1249)			this->stage->window->backend->setEnableTextEvents(true);
HXLINE(1251)			if (!(this->_hx___inputEnabled)) {
HXLINE(1253)				this->stage->window->backend->setEnableTextEvents(true);
HXLINE(1255)				if (!(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()))) {
HXLINE(1257)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE(1258)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE(1262)				this->_hx___inputEnabled = true;
HXLINE(1263)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1274___stopCursorTimer)
            	HX_STACK_THIS(this)
HXLINE(1276)		if (hx::IsNotNull( this->_hx___cursorTimer )) {
HXLINE(1278)			this->_hx___cursorTimer->stop();
HXLINE(1279)			this->_hx___cursorTimer = null();
            		}
HXLINE(1283)		if (this->_hx___showCursor) {
HXLINE(1285)			this->_hx___showCursor = false;
HXLINE(1286)			this->_hx___dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1297___stopTextInput)
            	HX_STACK_THIS(this)
HXLINE(1297)		bool _hx_tmp;
HXDLIN(1297)		if (this->_hx___inputEnabled) {
HXLINE(1297)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXLINE(1297)			_hx_tmp = false;
            		}
HXDLIN(1297)		if (_hx_tmp) {
HXLINE(1299)			this->stage->window->backend->setEnableTextEvents(false);
HXLINE(1300)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE(1301)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE(1303)			this->_hx___inputEnabled = false;
HXLINE(1304)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1315___updateLayout)
            	HX_STACK_THIS(this)
HXLINE(1315)		if (this->_hx___layoutDirty) {
HXLINE(1317)			HX_VARI( Float,cacheWidth) = this->_hx___textEngine->width;
HXLINE(1320)			this->_hx___textEngine->update();
HXLINE(1322)			if (hx::IsNotEq( this->_hx___textEngine->autoSize,(int)2 )) {
HXLINE(1324)				if ((this->_hx___textEngine->width != cacheWidth)) {
HXLINE(1326)					 ::Dynamic _hx_switch_0 = this->_hx___textEngine->autoSize;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE(1334)						HX_VARI(  ::openfl::text::TextField,_g) = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1334)						_g->set_x((_g->get_x() + ((Float)(cacheWidth - this->_hx___textEngine->width) / (Float)(int)2)));
HXDLIN(1334)						goto _hx_goto_64;
            					}
            					if (  (_hx_switch_0==(int)3) ){
HXLINE(1330)						HX_VARI_NAME(  ::openfl::text::TextField,_g1,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1330)						_g1->set_x((_g1->get_x() + (cacheWidth - this->_hx___textEngine->width)));
HXDLIN(1330)						goto _hx_goto_64;
            					}
            					/* default */{
            					}
            					_hx_goto_64:;
            				}
HXLINE(1344)				this->_hx___textEngine->getBounds();
            			}
HXLINE(1348)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

void TextField_obj::_hx___updateText(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1355___updateText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1357)		this->_hx___text = value;
HXLINE(1359)		if ((this->_hx___text.length < this->_hx___caretIndex)) {
HXLINE(1361)			this->_hx___selectionIndex = (this->_hx___caretIndex = this->_hx___text.length);
            		}
HXLINE(1365)		if (!(this->_hx___displayAsPassword)) {
HXLINE(1367)			this->_hx___textEngine->text = this->_hx___text;
            		}
            		else {
HXLINE(1371)			HX_VARI( int,length) = this->get_text().length;
HXLINE(1372)			HX_VARI( ::String,mask) = HX_("",00,00,00,00);
HXLINE(1374)			{
HXLINE(1374)				HX_VARI( int,_g1) = (int)0;
HXDLIN(1374)				while((_g1 < length)){
HXLINE(1374)					_g1 = (_g1 + (int)1);
HXLINE(1376)					mask = (mask + HX_("*",2a,00,00,00));
            				}
            			}
HXLINE(1380)			this->_hx___textEngine->text = mask;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,_hx___updateText,(void))

void TextField_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1387___updateTransforms)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(overrideTransform,"overrideTransform")
HXLINE(1389)		this->super::_hx___updateTransforms(overrideTransform);
HXLINE(1390)		{
HXLINE(1390)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___renderTransform;
HXDLIN(1390)			HX_VARI( Float,px) = this->_hx___offsetX;
HXDLIN(1390)			HX_VARI( Float,py) = this->_hx___offsetY;
HXDLIN(1390)			_this->tx = (((px * _this->a) + (py * _this->c)) + _this->tx);
HXDLIN(1390)			_this->ty = (((px * _this->b) + (py * _this->d)) + _this->ty);
            		}
            	}


 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1404_get_antiAliasType)
            	HX_STACK_THIS(this)
HXLINE(1404)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1417_set_antiAliasType)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1417)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1424_get_autoSize)
            	HX_STACK_THIS(this)
HXLINE(1424)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1429_set_autoSize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1431)		if (hx::IsNotEq( value,this->_hx___textEngine->autoSize )) {
HXLINE(1433)			this->_hx___dirty = true;
HXLINE(1434)			this->_hx___layoutDirty = true;
            		}
HXLINE(1438)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

bool TextField_obj::get_background(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1445_get_background)
            	HX_STACK_THIS(this)
HXLINE(1445)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

bool TextField_obj::set_background(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1450_set_background)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1452)		if ((value != this->_hx___textEngine->background)) {
HXLINE(1454)			this->_hx___dirty = true;
            		}
HXLINE(1458)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

int TextField_obj::get_backgroundColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1465_get_backgroundColor)
            	HX_STACK_THIS(this)
HXLINE(1465)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

int TextField_obj::set_backgroundColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1470_set_backgroundColor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1472)		if ((value != this->_hx___textEngine->backgroundColor)) {
HXLINE(1474)			this->_hx___dirty = true;
            		}
HXLINE(1478)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

bool TextField_obj::get_border(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1485_get_border)
            	HX_STACK_THIS(this)
HXLINE(1485)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

bool TextField_obj::set_border(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1490_set_border)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1492)		if ((value != this->_hx___textEngine->border)) {
HXLINE(1494)			this->_hx___dirty = true;
            		}
HXLINE(1498)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

int TextField_obj::get_borderColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1505_get_borderColor)
            	HX_STACK_THIS(this)
HXLINE(1505)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

int TextField_obj::set_borderColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1510_set_borderColor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1512)		if ((value != this->_hx___textEngine->borderColor)) {
HXLINE(1514)			this->_hx___dirty = true;
            		}
HXLINE(1518)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

int TextField_obj::get_bottomScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1523_get_bottomScrollV)
            	HX_STACK_THIS(this)
HXLINE(1525)		this->_hx___updateLayout();
HXLINE(1527)		return this->_hx___textEngine->bottomScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

int TextField_obj::get_caretIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1534_get_caretIndex)
            	HX_STACK_THIS(this)
HXLINE(1534)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1541_get_defaultTextFormat)
            	HX_STACK_THIS(this)
HXLINE(1541)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1546_set_defaultTextFormat)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1548)		this->_hx___textFormat->_hx___merge(value);
HXLINE(1550)		this->_hx___layoutDirty = true;
HXLINE(1551)		this->_hx___dirty = true;
HXLINE(1553)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

bool TextField_obj::get_displayAsPassword(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1560_get_displayAsPassword)
            	HX_STACK_THIS(this)
HXLINE(1560)		return this->_hx___displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

bool TextField_obj::set_displayAsPassword(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1565_set_displayAsPassword)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1567)		if ((value != this->_hx___displayAsPassword)) {
HXLINE(1569)			this->_hx___dirty = true;
HXLINE(1570)			this->_hx___layoutDirty = true;
HXLINE(1572)			this->_hx___displayAsPassword = value;
HXLINE(1573)			this->_hx___updateText(this->_hx___text);
            		}
HXLINE(1577)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

bool TextField_obj::get_embedFonts(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1584_get_embedFonts)
            	HX_STACK_THIS(this)
HXLINE(1584)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

bool TextField_obj::set_embedFonts(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1598_set_embedFonts)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1598)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1605_get_gridFitType)
            	HX_STACK_THIS(this)
HXLINE(1605)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1619_set_gridFitType)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1619)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1624_get_height)
            	HX_STACK_THIS(this)
HXLINE(1626)		this->_hx___updateLayout();
HXLINE(1627)		return (this->_hx___textEngine->height * ::Math_obj::abs(this->get_scaleY()));
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1632_set_height)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1634)		if ((value != this->_hx___textEngine->height)) {
HXLINE(1636)			if (!(this->_hx___transformDirty)) {
HXLINE(1636)				this->_hx___transformDirty = true;
HXDLIN(1636)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1637)			this->_hx___dirty = true;
HXLINE(1638)			this->_hx___layoutDirty = true;
HXLINE(1640)			this->_hx___textEngine->height = value;
            		}
HXLINE(1644)		return (this->_hx___textEngine->height * ::Math_obj::abs(this->get_scaleY()));
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1651_get_htmlText)
            	HX_STACK_THIS(this)
HXLINE(1651)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_1656_set_htmlText)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1658)		bool _hx_tmp;
HXDLIN(1658)		if (!(!(this->_hx___isHTML))) {
HXLINE(1658)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(1658)			_hx_tmp = true;
            		}
HXDLIN(1658)		if (_hx_tmp) {
HXLINE(1660)			this->_hx___dirty = true;
HXLINE(1661)			this->_hx___layoutDirty = true;
            		}
HXLINE(1665)		this->_hx___isHTML = true;
HXLINE(1667)		{
HXLINE(1669)			value = ::openfl::text::TextField_obj::_hx___regexBreakTag->replace(value,HX_("\n",0a,00,00,00));
HXLINE(1670)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)0).StaticCast<  ::EReg >()->replace(value,HX_("\"",22,00,00,00));
HXLINE(1671)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)1).StaticCast<  ::EReg >()->replace(value,HX_("'",27,00,00,00));
HXLINE(1672)			value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)2).StaticCast<  ::EReg >()->replace(value,HX_("&",26,00,00,00));
HXLINE(1676)			HX_VARI( ::Array< ::String >,segments) = value.split(HX_("<",3c,00,00,00));
HXLINE(1678)			if ((segments->length == (int)1)) {
HXLINE(1680)				value = ::openfl::text::TextField_obj::_hx___regexHTMLTag->replace(value,HX_("",00,00,00,00));
HXLINE(1682)				if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE(1684)					this->_hx___textEngine->textFormatRanges->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            				}
HXLINE(1688)				value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)3).StaticCast<  ::EReg >()->replace(value,HX_("<",3c,00,00,00));
HXLINE(1689)				value = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)4).StaticCast<  ::EReg >()->replace(value,HX_(">",3e,00,00,00));
HXLINE(1691)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1692)				range->format = this->_hx___textFormat;
HXLINE(1693)				range->start = (int)0;
HXLINE(1694)				range->end = value.length;
HXLINE(1696)				this->_hx___updateText(value);
HXLINE(1698)				return value;
            			}
            			else {
HXLINE(1702)				this->_hx___textEngine->textFormatRanges->splice((int)0,this->_hx___textEngine->textFormatRanges->get_length());
HXLINE(1704)				value = HX_("",00,00,00,00);
HXLINE(1705)				HX_VAR( ::String,segment);
HXLINE(1707)				{
HXLINE(1707)					HX_VARI( int,_g1) = (int)0;
HXDLIN(1707)					HX_VARI( int,_g) = segments->length;
HXDLIN(1707)					while((_g1 < _g)){
HXLINE(1707)						_g1 = (_g1 + (int)1);
HXDLIN(1707)						HX_VARI( int,i) = (_g1 - (int)1);
HXLINE(1709)						segment = segments->__get(i);
HXLINE(1710)						segment = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)3).StaticCast<  ::EReg >()->replace(segment,HX_("<",3c,00,00,00));
HXLINE(1711)						segment = ::openfl::text::TextField_obj::_hx___regexEntities->__get((int)4).StaticCast<  ::EReg >()->replace(segment,HX_(">",3e,00,00,00));
HXLINE(1712)						segments[i] = segment;
            					}
            				}
HXLINE(1716)				HX_VARI( ::Array< ::Dynamic>,formatStack) = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->_hx___textFormat->clone());
HXLINE(1717)				HX_VAR( ::String,sub);
HXLINE(1718)				HX_VARI( bool,noLineBreak) = false;
HXLINE(1720)				{
HXLINE(1720)					HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN(1720)					while((_g2 < segments->length)){
HXLINE(1720)						HX_VARI_NAME( ::String,segment1,"segment") = segments->__get(_g2);
HXDLIN(1720)						_g2 = (_g2 + (int)1);
HXLINE(1722)						if ((segment1 == HX_("",00,00,00,00))) {
HXLINE(1722)							continue;
            						}
HXLINE(1724)						HX_VARI( bool,isClosingTag) = (segment1.substr((int)0,(int)1) == HX_("/",2f,00,00,00));
HXLINE(1725)						HX_VARI( int,tagEndIndex) = segment1.indexOf(HX_(">",3e,00,00,00),null());
HXLINE(1726)						HX_VARI( int,start) = (tagEndIndex + (int)1);
HXLINE(1727)						HX_VARI( int,spaceIndex) = segment1.indexOf(HX_(" ",20,00,00,00),null());
HXLINE(1728)						int tagName;
HXDLIN(1728)						if (isClosingTag) {
HXLINE(1728)							tagName = (int)1;
            						}
            						else {
HXLINE(1728)							tagName = (int)0;
            						}
HXDLIN(1728)						 ::Dynamic tagName1;
HXDLIN(1728)						bool tagName2;
HXDLIN(1728)						if ((spaceIndex > (int)-1)) {
HXLINE(1728)							tagName2 = (spaceIndex < tagEndIndex);
            						}
            						else {
HXLINE(1728)							tagName2 = false;
            						}
HXDLIN(1728)						if (tagName2) {
HXLINE(1728)							tagName1 = spaceIndex;
            						}
            						else {
HXLINE(1728)							tagName1 = tagEndIndex;
            						}
HXDLIN(1728)						HX_VARI_NAME( ::String,tagName3,"tagName") = segment1.substring(tagName,tagName1);
HXLINE(1729)						HX_VAR(  ::openfl::text::TextFormat,format);
HXLINE(1731)						if (isClosingTag) {
HXLINE(1733)							formatStack->pop().StaticCast<  ::openfl::text::TextFormat >();
HXLINE(1734)							format = formatStack->__get((formatStack->length - (int)1)).StaticCast<  ::openfl::text::TextFormat >()->clone();
HXLINE(1736)							bool _hx_tmp1;
HXDLIN(1736)							if ((tagName3.toLowerCase() == HX_("p",70,00,00,00))) {
HXLINE(1736)								_hx_tmp1 = (this->_hx___textEngine->textFormatRanges->get_length() > (int)0);
            							}
            							else {
HXLINE(1736)								_hx_tmp1 = false;
            							}
HXDLIN(1736)							if (_hx_tmp1) {
HXLINE(1738)								value = (value + HX_("\n",0a,00,00,00));
HXLINE(1739)								noLineBreak = true;
            							}
HXLINE(1743)							if ((start < segment1.length)) {
HXLINE(1745)								sub = segment1.substr(start,null());
HXLINE(1746)								this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value.length,(value.length + sub.length)));
HXLINE(1747)								value = (value + sub);
HXLINE(1748)								noLineBreak = false;
            							}
            						}
            						else {
HXLINE(1754)							format = formatStack->__get((formatStack->length - (int)1)).StaticCast<  ::openfl::text::TextFormat >()->clone();
HXLINE(1756)							if ((tagEndIndex > (int)-1)) {
HXLINE(1758)								::String _hx_switch_0 = tagName3.toLowerCase();
            								if (  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE(1808)									format->bold = true;
HXDLIN(1808)									goto _hx_goto_96;
            								}
            								if (  (_hx_switch_0==HX_("em",68,58,00,00)) ||  (_hx_switch_0==HX_("i",69,00,00,00)) ){
HXLINE(1816)									format->italic = true;
HXDLIN(1816)									goto _hx_goto_96;
            								}
            								if (  (_hx_switch_0==HX_("font",cf,5d,c0,43)) ){
HXLINE(1776)									if (::openfl::text::TextField_obj::_hx___regexFace->match(segment1)) {
HXLINE(1778)										format->font = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexFace);
            									}
HXLINE(1782)									if (::openfl::text::TextField_obj::_hx___regexColor->match(segment1)) {
HXLINE(1784)										format->color = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexColor)));
            									}
HXLINE(1788)									if (::openfl::text::TextField_obj::_hx___regexSize->match(segment1)) {
HXLINE(1790)										HX_VARI( ::String,sizeAttr) = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexSize);
HXLINE(1791)										HX_VARI(  ::Dynamic,firstChar) = sizeAttr.charCodeAt((int)0);
HXLINE(1793)										bool _hx_tmp2;
HXDLIN(1793)										if (hx::IsNotEq( firstChar,(int)43 )) {
HXLINE(1793)											_hx_tmp2 = hx::IsEq( firstChar,(int)45 );
            										}
            										else {
HXLINE(1793)											_hx_tmp2 = true;
            										}
HXDLIN(1793)										if (_hx_tmp2) {
HXLINE(1795)											HX_VAR(  ::openfl::text::TextFormat,parentFormat);
HXDLIN(1795)											if ((formatStack->length >= (int)2)) {
HXLINE(1795)												parentFormat = formatStack->__get((formatStack->length - (int)2)).StaticCast<  ::openfl::text::TextFormat >();
            											}
            											else {
HXLINE(1795)												parentFormat = this->_hx___textFormat;
            											}
HXLINE(1796)											HX_VARI_NAME(  ::Dynamic,parentFormat1,"parentFormat") = parentFormat->size;
HXDLIN(1796)											format->size = (parentFormat1 + ::Std_obj::parseInt(sizeAttr));
            										}
            										else {
HXLINE(1800)											format->size = ::Std_obj::parseInt(sizeAttr);
            										}
            									}
HXLINE(1774)									goto _hx_goto_96;
            								}
            								if (  (_hx_switch_0==HX_("p",70,00,00,00)) ){
HXLINE(1762)									bool _hx_tmp3;
HXDLIN(1762)									if ((::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges) > (int)0)) {
HXLINE(1762)										_hx_tmp3 = !(noLineBreak);
            									}
            									else {
HXLINE(1762)										_hx_tmp3 = false;
            									}
HXDLIN(1762)									if (_hx_tmp3) {
HXLINE(1764)										value = (value + HX_("\n",0a,00,00,00));
            									}
HXLINE(1768)									if (::openfl::text::TextField_obj::_hx___regexAlign->match(segment1)) {
HXLINE(1770)										format->align = ::openfl::text::_TextFormatAlign::TextFormatAlign_Impl__obj::fromString(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexAlign).toLowerCase());
            									}
HXLINE(1760)									goto _hx_goto_96;
            								}
            								if (  (_hx_switch_0==HX_("textformat",a4,9b,ea,ff)) ){
HXLINE(1820)									if (::openfl::text::TextField_obj::_hx___regexBlockIndent->match(segment1)) {
HXLINE(1822)										format->blockIndent = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexBlockIndent));
            									}
HXLINE(1826)									if (::openfl::text::TextField_obj::_hx___regexIndent->match(segment1)) {
HXLINE(1828)										format->indent = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexIndent));
            									}
HXLINE(1832)									if (::openfl::text::TextField_obj::_hx___regexLeading->match(segment1)) {
HXLINE(1834)										format->leading = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexLeading));
            									}
HXLINE(1838)									if (::openfl::text::TextField_obj::_hx___regexLeftMargin->match(segment1)) {
HXLINE(1840)										format->leftMargin = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexLeftMargin));
            									}
HXLINE(1844)									if (::openfl::text::TextField_obj::_hx___regexRightMargin->match(segment1)) {
HXLINE(1846)										format->rightMargin = ::Std_obj::parseInt(this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexRightMargin));
            									}
HXLINE(1850)									if (::openfl::text::TextField_obj::_hx___regexTabStops->match(segment1)) {
HXLINE(1852)										HX_VARI( ::Array< ::String >,values) = this->_hx___getAttributeMatch(::openfl::text::TextField_obj::_hx___regexTabStops).split(HX_(" ",20,00,00,00));
HXLINE(1853)										HX_VARI( ::Array< ::Dynamic>,tabStops) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1855)										{
HXLINE(1855)											HX_VARI_NAME( int,_g11,"_g1") = (int)0;
HXDLIN(1855)											while((_g11 < values->length)){
HXLINE(1855)												HX_VARI( ::String,stop) = values->__get(_g11);
HXDLIN(1855)												_g11 = (_g11 + (int)1);
HXLINE(1857)												tabStops->push(::Std_obj::parseInt(stop));
            											}
            										}
HXLINE(1861)										format->tabStops = tabStops;
            									}
HXLINE(1818)									goto _hx_goto_96;
            								}
            								if (  (_hx_switch_0==HX_("u",75,00,00,00)) ){
HXLINE(1812)									format->underline = true;
HXDLIN(1812)									goto _hx_goto_96;
            								}
            								_hx_goto_96:;
HXLINE(1867)								formatStack->push(format);
HXLINE(1869)								if ((start < segment1.length)) {
HXLINE(1871)									sub = segment1.substring(start,null());
HXLINE(1872)									this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value.length,(value.length + sub.length)));
HXLINE(1873)									value = (value + sub);
HXLINE(1874)									noLineBreak = false;
            								}
            							}
            							else {
HXLINE(1880)								this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,format,value.length,(value.length + segment1.length)));
HXLINE(1881)								value = (value + segment1);
HXLINE(1882)								noLineBreak = false;
            							}
            						}
            					}
            				}
HXLINE(1890)				if ((this->_hx___textEngine->textFormatRanges->get_length() == (int)0)) {
HXLINE(1892)					this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__alloc( HX_CTX ,formatStack->__get((int)0).StaticCast<  ::openfl::text::TextFormat >(),(int)0,(int)0));
            				}
            			}
            		}
HXLINE(1900)		this->_hx___updateText(value);
HXLINE(1902)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

int TextField_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1907_get_length)
            	HX_STACK_THIS(this)
HXLINE(1909)		if (hx::IsNotNull( this->_hx___text )) {
HXLINE(1911)			return this->_hx___text.length;
            		}
HXLINE(1915)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

int TextField_obj::get_maxChars(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1922_get_maxChars)
            	HX_STACK_THIS(this)
HXLINE(1922)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

int TextField_obj::set_maxChars(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1927_set_maxChars)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1929)		if ((value != this->_hx___textEngine->maxChars)) {
HXLINE(1931)			this->_hx___dirty = true;
HXLINE(1932)			this->_hx___layoutDirty = true;
            		}
HXLINE(1936)		return (this->_hx___textEngine->maxChars = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

int TextField_obj::get_maxScrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1941_get_maxScrollH)
            	HX_STACK_THIS(this)
HXLINE(1943)		this->_hx___updateLayout();
HXLINE(1945)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

int TextField_obj::get_maxScrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1950_get_maxScrollV)
            	HX_STACK_THIS(this)
HXLINE(1952)		this->_hx___updateLayout();
HXLINE(1954)		return this->_hx___textEngine->maxScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

bool TextField_obj::get_mouseWheelEnabled(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1961_get_mouseWheelEnabled)
            	HX_STACK_THIS(this)
HXLINE(1961)		return this->_hx___mouseWheelEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_mouseWheelEnabled,return )

bool TextField_obj::set_mouseWheelEnabled(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1968_set_mouseWheelEnabled)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1968)		return (this->_hx___mouseWheelEnabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_mouseWheelEnabled,return )

bool TextField_obj::get_multiline(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1975_get_multiline)
            	HX_STACK_THIS(this)
HXLINE(1975)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

bool TextField_obj::set_multiline(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1980_set_multiline)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1982)		if ((value != this->_hx___textEngine->multiline)) {
HXLINE(1984)			this->_hx___dirty = true;
HXLINE(1985)			this->_hx___layoutDirty = true;
            		}
HXLINE(1989)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

int TextField_obj::get_numLines(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_1994_get_numLines)
            	HX_STACK_THIS(this)
HXLINE(1996)		this->_hx___updateLayout();
HXLINE(1998)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2005_get_restrict)
            	HX_STACK_THIS(this)
HXLINE(2005)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2012_set_restrict)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2012)		return (this->_hx___textEngine->restrict = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

int TextField_obj::get_scrollH(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2019_get_scrollH)
            	HX_STACK_THIS(this)
HXLINE(2019)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

int TextField_obj::set_scrollH(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2024_set_scrollH)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2026)		this->_hx___updateLayout();
HXLINE(2028)		if ((value > this->_hx___textEngine->maxScrollH)) {
HXLINE(2028)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(2029)		if ((value < (int)0)) {
HXLINE(2029)			value = (int)0;
            		}
HXLINE(2031)		if ((value != this->_hx___textEngine->scrollH)) {
HXLINE(2033)			this->_hx___dirty = true;
            		}
HXLINE(2037)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

int TextField_obj::get_scrollV(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2044_get_scrollV)
            	HX_STACK_THIS(this)
HXLINE(2044)		return this->_hx___textEngine->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

int TextField_obj::set_scrollV(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2049_set_scrollV)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2051)		this->_hx___updateLayout();
HXLINE(2053)		if ((value > this->_hx___textEngine->maxScrollV)) {
HXLINE(2053)			value = this->_hx___textEngine->maxScrollV;
            		}
HXLINE(2054)		if ((value < (int)1)) {
HXLINE(2054)			value = (int)1;
            		}
HXLINE(2056)		if ((value != this->_hx___textEngine->scrollV)) {
HXLINE(2058)			this->_hx___dirty = true;
            		}
HXLINE(2062)		return (this->_hx___textEngine->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

bool TextField_obj::get_selectable(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2069_get_selectable)
            	HX_STACK_THIS(this)
HXLINE(2069)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

bool TextField_obj::set_selectable(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2074_set_selectable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2076)		bool _hx_tmp;
HXDLIN(2076)		if ((value != this->_hx___textEngine->selectable)) {
HXLINE(2076)			_hx_tmp = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(2076)			_hx_tmp = false;
            		}
HXDLIN(2076)		if (_hx_tmp) {
HXLINE(2078)			bool _hx_tmp1;
HXDLIN(2078)			if (hx::IsNotNull( this->stage )) {
HXLINE(2078)				_hx_tmp1 = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(2078)				_hx_tmp1 = false;
            			}
HXDLIN(2078)			if (_hx_tmp1) {
HXLINE(2080)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(2082)				if (!(value)) {
HXLINE(2084)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(2090)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

int TextField_obj::get_selectionBeginIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2097_get_selectionBeginIndex)
            	HX_STACK_THIS(this)
HXLINE(2097)		return ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

int TextField_obj::get_selectionEndIndex(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2104_get_selectionEndIndex)
            	HX_STACK_THIS(this)
HXLINE(2104)		return ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2111_get_sharpness)
            	HX_STACK_THIS(this)
HXLINE(2111)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2116_set_sharpness)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2118)		if ((value != this->_hx___textEngine->sharpness)) {
HXLINE(2120)			this->_hx___dirty = true;
            		}
HXLINE(2124)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

::String TextField_obj::get_text(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2131_get_text)
            	HX_STACK_THIS(this)
HXLINE(2131)		return this->_hx___text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2136_set_text)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2138)		bool _hx_tmp;
HXDLIN(2138)		if (!(this->_hx___isHTML)) {
HXLINE(2138)			_hx_tmp = (this->_hx___text != value);
            		}
            		else {
HXLINE(2138)			_hx_tmp = true;
            		}
HXDLIN(2138)		if (_hx_tmp) {
HXLINE(2140)			this->_hx___dirty = true;
HXLINE(2141)			this->_hx___layoutDirty = true;
            		}
            		else {
HXLINE(2145)			return value;
            		}
HXLINE(2149)		if ((this->_hx___textEngine->textFormatRanges->get_length() > (int)1)) {
HXLINE(2151)			this->_hx___textEngine->textFormatRanges->splice((int)1,(this->_hx___textEngine->textFormatRanges->get_length() - (int)1));
            		}
HXLINE(2155)		HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = this->_hx___textEngine->textFormatRanges->get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(2156)		range->format = this->_hx___textFormat;
HXLINE(2157)		range->start = (int)0;
HXLINE(2158)		range->end = value.length;
HXLINE(2160)		this->_hx___isHTML = false;
HXLINE(2162)		this->_hx___updateText(value);
HXLINE(2164)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

int TextField_obj::get_textColor(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2171_get_textColor)
            	HX_STACK_THIS(this)
HXLINE(2171)		return this->_hx___textFormat->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

int TextField_obj::set_textColor(int value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2176_set_textColor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2178)		if (hx::IsNotEq( value,this->_hx___textFormat->color )) {
HXLINE(2178)			this->_hx___dirty = true;
            		}
HXLINE(2180)		{
HXLINE(2180)			HX_VARI( int,_g) = (int)0;
HXDLIN(2180)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->_hx___textEngine->textFormatRanges;
HXDLIN(2180)			while((_g < _g1->get_length())){
HXLINE(2180)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(2180)				_g = (_g + (int)1);
HXLINE(2182)				range->format->color = value;
            			}
            		}
HXLINE(2186)		return (this->_hx___textFormat->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2190_get_textWidth)
            	HX_STACK_THIS(this)
HXLINE(2192)		this->_hx___updateLayout();
HXLINE(2193)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2198_get_textHeight)
            	HX_STACK_THIS(this)
HXLINE(2200)		this->_hx___updateLayout();
HXLINE(2201)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2208_get_type)
            	HX_STACK_THIS(this)
HXLINE(2208)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2213_set_type)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2215)		if (hx::IsNotEq( value,this->_hx___textEngine->type )) {
HXLINE(2217)			if (hx::IsEq( value,(int)1 )) {
HXLINE(2219)				this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE(2220)				this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE(2221)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(2223)				this->this_onFocusIn(null());
HXLINE(2224)				this->_hx___textEngine->_hx___useIntAdvances = true;
            			}
            			else {
HXLINE(2228)				this->removeEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null());
HXLINE(2229)				this->removeEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null());
HXLINE(2230)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(2232)				this->_hx___stopTextInput();
HXLINE(2233)				this->_hx___textEngine->_hx___useIntAdvances = null();
            			}
HXLINE(2237)			this->_hx___dirty = true;
            		}
HXLINE(2241)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2246_get_width)
            	HX_STACK_THIS(this)
HXLINE(2248)		this->_hx___updateLayout();
HXLINE(2249)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2254_set_width)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2256)		if ((value != this->_hx___textEngine->width)) {
HXLINE(2258)			if (!(this->_hx___transformDirty)) {
HXLINE(2258)				this->_hx___transformDirty = true;
HXDLIN(2258)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(2259)			this->_hx___dirty = true;
HXLINE(2260)			this->_hx___layoutDirty = true;
HXLINE(2262)			this->_hx___textEngine->width = value;
            		}
HXLINE(2266)		return (this->_hx___textEngine->width * ::Math_obj::abs(this->_hx___scaleX));
            	}


bool TextField_obj::get_wordWrap(){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2273_get_wordWrap)
            	HX_STACK_THIS(this)
HXLINE(2273)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

bool TextField_obj::set_wordWrap(bool value){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2278_set_wordWrap)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2280)		if ((value != this->_hx___textEngine->wordWrap)) {
HXLINE(2282)			this->_hx___dirty = true;
HXLINE(2283)			this->_hx___layoutDirty = true;
            		}
HXLINE(2287)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2299_stage_onMouseMove)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(2301)		if (hx::IsNull( this->stage )) {
HXLINE(2301)			return;
            		}
HXLINE(2303)		bool _hx_tmp;
HXDLIN(2303)		if (this->_hx___textEngine->selectable) {
HXLINE(2303)			_hx_tmp = (this->_hx___selectionIndex >= (int)0);
            		}
            		else {
HXLINE(2303)			_hx_tmp = false;
            		}
HXDLIN(2303)		if (_hx_tmp) {
HXLINE(2305)			this->_hx___updateLayout();
HXLINE(2307)			HX_VARI( Float,position) = this->get_mouseX();
HXDLIN(2307)			HX_VARI_NAME( int,position1,"position") = this->_hx___getPosition(position,this->get_mouseY());
HXLINE(2309)			if ((position1 != this->_hx___caretIndex)) {
HXLINE(2311)				this->_hx___caretIndex = position1;
HXLINE(2312)				this->_hx___dirty = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2321_stage_onMouseUp)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(2323)		if (hx::IsNull( this->stage )) {
HXLINE(2323)			return;
            		}
HXLINE(2325)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(2326)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(2328)		if (hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(2330)			this->_hx___getWorldTransform();
HXLINE(2331)			this->_hx___updateLayout();
HXLINE(2336)			HX_VARI( Float,upPos) = this->get_mouseX();
HXDLIN(2336)			HX_VARI_NAME( int,upPos1,"upPos") = this->_hx___getPosition(upPos,this->get_mouseY());
HXLINE(2337)			HX_VAR( int,leftPos);
HXLINE(2338)			HX_VAR( int,rightPos);
HXLINE(2340)			leftPos = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___selectionIndex,upPos1));
HXLINE(2341)			rightPos = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___selectionIndex,upPos1));
HXLINE(2343)			this->_hx___selectionIndex = leftPos;
HXLINE(2344)			this->_hx___caretIndex = rightPos;
HXLINE(2346)			if (this->_hx___inputEnabled) {
HXLINE(2348)				this->this_onFocusIn(null());
HXLINE(2350)				this->_hx___stopCursorTimer();
HXLINE(2351)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2362_this_onAddedToStage)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(2362)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2369_this_onFocusIn)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(2369)		bool _hx_tmp;
HXDLIN(2369)		bool _hx_tmp1;
HXDLIN(2369)		bool _hx_tmp2;
HXDLIN(2369)		if (this->get_selectable()) {
HXLINE(2369)			_hx_tmp2 = hx::IsEq( this->get_type(),(int)1 );
            		}
            		else {
HXLINE(2369)			_hx_tmp2 = false;
            		}
HXDLIN(2369)		if (_hx_tmp2) {
HXLINE(2369)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXLINE(2369)			_hx_tmp1 = false;
            		}
HXDLIN(2369)		if (_hx_tmp1) {
HXLINE(2369)			_hx_tmp = hx::IsEq( this->stage->get_focus(),hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(2369)			_hx_tmp = false;
            		}
HXDLIN(2369)		if (_hx_tmp) {
HXLINE(2371)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2380_this_onFocusOut)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(2380)		this->_hx___stopTextInput();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_2385_this_onMouseDown)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(2387)		if (!(this->get_selectable())) {
HXLINE(2387)			return;
            		}
HXLINE(2389)		this->_hx___updateLayout();
HXLINE(2391)		Float _hx_tmp = this->get_mouseX();
HXDLIN(2391)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp,this->get_mouseY());
HXLINE(2392)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2393)		this->_hx___dirty = true;
HXLINE(2395)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(2396)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::window_onKeyDown(int key,int modifier){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2403_window_onKeyDown)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(modifier,"modifier")
HXLINE(2403)		switch((int)(key)){
            			case (int)8: {
HXLINE(2416)				bool _hx_tmp;
HXDLIN(2416)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2416)					_hx_tmp = (this->_hx___caretIndex > (int)0);
            				}
            				else {
HXLINE(2416)					_hx_tmp = false;
            				}
HXDLIN(2416)				if (_hx_tmp) {
HXLINE(2418)					this->_hx___selectionIndex = (this->_hx___caretIndex - (int)1);
            				}
HXLINE(2422)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2424)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2425)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2427)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)97: {
HXLINE(2633)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2635)					this->_hx___caretIndex = this->_hx___text.length;
HXLINE(2636)					this->_hx___selectionIndex = (int)0;
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(2584)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2586)					::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(2608)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2610)					HX_VARI( ::String,text) = ::lime::_hx_system::Clipboard_obj::get_text();
HXLINE(2612)					if (hx::IsNotNull( text )) {
HXLINE(2614)						this->replaceSelectedText(text);
            					}
            					else {
HXLINE(2618)						this->replaceSelectedText(HX_("",00,00,00,00));
            					}
HXLINE(2622)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(2626)					::Dynamic this1 = this->_hx___textEngine->textFormatRanges;
HXDLIN(2626)					( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(this1,(::openfl::_Vector::IVector_obj::get_length(this->_hx___textEngine->textFormatRanges) - (int)1))) )->end = this->_hx___text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(2592)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_ctrlKey(modifier)) {
HXLINE(2594)					::lime::_hx_system::Clipboard_obj::set_text(this->_hx___text.substring(this->_hx___caretIndex,this->_hx___selectionIndex));
HXLINE(2596)					if ((this->_hx___caretIndex != this->_hx___selectionIndex)) {
HXLINE(2598)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2599)						this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(2433)				bool _hx_tmp1;
HXDLIN(2433)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2433)					_hx_tmp1 = (this->_hx___caretIndex < this->_hx___text.length);
            				}
            				else {
HXLINE(2433)					_hx_tmp1 = false;
            				}
HXDLIN(2433)				if (_hx_tmp1) {
HXLINE(2435)					this->_hx___selectionIndex = (this->_hx___caretIndex + (int)1);
            				}
HXLINE(2439)				if ((this->_hx___selectionIndex != this->_hx___caretIndex)) {
HXLINE(2441)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(2442)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(2444)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741898: {
HXLINE(2572)				this->_hx___caretBeginningOfLine();
HXLINE(2573)				this->_hx___stopCursorTimer();
HXLINE(2574)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741901: {
HXLINE(2578)				this->_hx___caretEndOfLine();
HXLINE(2579)				this->_hx___stopCursorTimer();
HXLINE(2580)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741903: {
HXLINE(2485)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2487)					this->_hx___caretEndOfLine();
HXLINE(2489)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2491)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2495)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2497)						this->_hx___caretNextCharacter();
            					}
            					else {
HXLINE(2501)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2503)							this->_hx___caretNextCharacter();
            						}
            						else {
HXLINE(2507)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2511)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2515)				this->_hx___stopCursorTimer();
HXLINE(2516)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741904: {
HXLINE(2450)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_metaKey(modifier)) {
HXLINE(2452)					this->_hx___caretBeginningOfLine();
HXLINE(2454)					if (!(::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier))) {
HXLINE(2456)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
            				else {
HXLINE(2460)					if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2462)						this->_hx___caretPreviousCharacter();
            					}
            					else {
HXLINE(2466)						if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2468)							this->_hx___caretPreviousCharacter();
            						}
            						else {
HXLINE(2472)							this->_hx___caretIndex = ::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex));
            						}
HXLINE(2476)						this->_hx___selectionIndex = this->_hx___caretIndex;
            					}
            				}
HXLINE(2480)				this->_hx___stopCursorTimer();
HXLINE(2481)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741905: {
HXLINE(2520)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2522)					this->_hx___caretNextLine(null(),null());
            				}
            				else {
HXLINE(2526)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2528)						this->_hx___caretNextLine(null(),null());
            					}
            					else {
HXLINE(2532)						HX_VARI( int,lineIndex) = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2533)						this->_hx___caretNextLine(lineIndex,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2537)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2541)				this->_hx___stopCursorTimer();
HXLINE(2542)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741906: {
HXLINE(2546)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(2548)					this->_hx___caretPreviousLine(null(),null());
            				}
            				else {
HXLINE(2552)					if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(2554)						this->_hx___caretPreviousLine(null(),null());
            					}
            					else {
HXLINE(2558)						HX_VARI_NAME( int,lineIndex1,"lineIndex") = this->getLineIndexOfChar(::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
HXLINE(2559)						this->_hx___caretPreviousLine(lineIndex1,::Std_obj::_hx_int(::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex)));
            					}
HXLINE(2563)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(2567)				this->_hx___stopCursorTimer();
HXLINE(2568)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)13: case (int)1073741912: {
HXLINE(2407)				if (this->_hx___textEngine->multiline) {
HXLINE(2409)					this->replaceSelectedText(HX_("\n",0a,00,00,00));
HXLINE(2410)					this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_2647_window_onTextInput)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(2649)		this->replaceSelectedText(value);
HXLINE(2651)		this->dispatchEvent( ::openfl::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;

 ::EReg TextField_obj::_hx___regexAlign;

 ::EReg TextField_obj::_hx___regexColor;

 ::EReg TextField_obj::_hx___regexBlockIndent;

 ::EReg TextField_obj::_hx___regexBreakTag;

::Array< ::Dynamic> TextField_obj::_hx___regexEntities;

 ::EReg TextField_obj::_hx___regexFace;

 ::EReg TextField_obj::_hx___regexHTMLTag;

 ::EReg TextField_obj::_hx___regexIndent;

 ::EReg TextField_obj::_hx___regexLeading;

 ::EReg TextField_obj::_hx___regexLeftMargin;

 ::EReg TextField_obj::_hx___regexRightMargin;

 ::EReg TextField_obj::_hx___regexTabStops;

 ::EReg TextField_obj::_hx___regexSize;


hx::ObjectPtr< TextField_obj > TextField_obj::__new() {
	hx::ObjectPtr< TextField_obj > __this = new TextField_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< TextField_obj > TextField_obj::__alloc(hx::Ctx *_hx_ctx) {
	TextField_obj *__this = (TextField_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextField_obj), true, "openfl.text.TextField"));
	*(void **)__this = TextField_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_MARK_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_MARK_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_MARK_MEMBER_NAME(_hx___text,"__text");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___displayAsPassword,"__displayAsPassword");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___mouseWheelEnabled,"__mouseWheelEnabled");
	HX_VISIT_MEMBER_NAME(_hx___offsetX,"__offsetX");
	HX_VISIT_MEMBER_NAME(_hx___offsetY,"__offsetY");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___symbol,"__symbol");
	HX_VISIT_MEMBER_NAME(_hx___text,"__text");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_text()); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_type()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_border()); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"__text") ) { return hx::Val( _hx___text); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollH()); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollV()); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_autoSize()); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_htmlText()); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxChars()); }
		if (HX_FIELD_EQ(inName,"numLines") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_numLines()); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_restrict()); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_wordWrap()); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML); }
		if (HX_FIELD_EQ(inName,"__symbol") ) { return hx::Val( _hx___symbol); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn()); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn()); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn()); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_multiline()); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_sharpness()); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textColor()); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textWidth()); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { return hx::Val( _hx___offsetX); }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { return hx::Val( _hx___offsetY); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_background()); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_caretIndex()); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_embedFonts()); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxScrollH()); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxScrollV()); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectable()); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textHeight()); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn()); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_borderColor()); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gridFitType()); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromSymbol") ) { return hx::Val( _hx___fromSymbol_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateText") ) { return hx::Val( _hx___updateText_dyn()); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn()); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn()); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn()); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn()); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn()); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_antiAliasType()); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottomScrollV()); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn()); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn()); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn()); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn()); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn()); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn()); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn()); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn()); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_backgroundColor()); }
		if (HX_FIELD_EQ(inName,"__caretNextLine") ) { return hx::Val( _hx___caretNextLine_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn()); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn()); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex); }
		if (HX_FIELD_EQ(inName,"__caretEndOfLine") ) { return hx::Val( _hx___caretEndOfLine_dyn()); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_defaultTextFormat()); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_displayAsPassword()); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mouseWheelEnabled()); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectionEndIndex()); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn()); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn()); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn()); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn()); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectionBeginIndex()); }
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { return hx::Val( _hx___displayAsPassword); }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { return hx::Val( _hx___mouseWheelEnabled); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn()); }
		if (HX_FIELD_EQ(inName,"__caretPreviousLine") ) { return hx::Val( _hx___caretPreviousLine_dyn()); }
		if (HX_FIELD_EQ(inName,"__getAttributeMatch") ) { return hx::Val( _hx___getAttributeMatch_dyn()); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__caretNextCharacter") ) { return hx::Val( _hx___caretNextCharacter_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn()); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseWheelEnabled") ) { return hx::Val( get_mouseWheelEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"set_mouseWheelEnabled") ) { return hx::Val( set_mouseWheelEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__caretBeginningOfLine") ) { return hx::Val( _hx___caretBeginningOfLine_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__caretPreviousCharacter") ) { return hx::Val( _hx___caretPreviousCharacter_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"__getCharIndexOnDifferentLine") ) { return hx::Val( _hx___getCharIndexOnDifferentLine_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__regexFace") ) { outValue = _hx___regexFace; return true; }
		if (HX_FIELD_EQ(inName,"__regexSize") ) { outValue = _hx___regexSize; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__regexAlign") ) { outValue = _hx___regexAlign; return true; }
		if (HX_FIELD_EQ(inName,"__regexColor") ) { outValue = _hx___regexColor; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__regexIndent") ) { outValue = _hx___regexIndent; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__regexHTMLTag") ) { outValue = _hx___regexHTMLTag; return true; }
		if (HX_FIELD_EQ(inName,"__regexLeading") ) { outValue = _hx___regexLeading; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__regexBreakTag") ) { outValue = _hx___regexBreakTag; return true; }
		if (HX_FIELD_EQ(inName,"__regexEntities") ) { outValue = _hx___regexEntities; return true; }
		if (HX_FIELD_EQ(inName,"__regexTabStops") ) { outValue = _hx___regexTabStops; return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__regexLeftMargin") ) { outValue = _hx___regexLeftMargin; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__regexBlockIndent") ) { outValue = _hx___regexBlockIndent; return true; }
		if (HX_FIELD_EQ(inName,"__regexRightMargin") ) { outValue = _hx___regexRightMargin; return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = _hx___defaultTextFormat; return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue) ); }
		if (HX_FIELD_EQ(inName,"__text") ) { _hx___text=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue) ); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__symbol") ) { _hx___symbol=inValue.Cast<  ::openfl::_internal::symbols::DynamicTextSymbol >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue) ); }
		if (HX_FIELD_EQ(inName,"__offsetX") ) { _hx___offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offsetY") ) { _hx___offsetY=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue) ); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue) ); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue) ); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue) ); }
		if (HX_FIELD_EQ(inName,"mouseWheelEnabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mouseWheelEnabled(inValue) ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__displayAsPassword") ) { _hx___displayAsPassword=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mouseWheelEnabled") ) { _hx___mouseWheelEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"__regexFace") ) { _hx___regexFace=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexSize") ) { _hx___regexSize=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__regexAlign") ) { _hx___regexAlign=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexColor") ) { _hx___regexColor=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__regexIndent") ) { _hx___regexIndent=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__regexHTMLTag") ) { _hx___regexHTMLTag=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexLeading") ) { _hx___regexLeading=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__regexBreakTag") ) { _hx___regexBreakTag=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexEntities") ) { _hx___regexEntities=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexTabStops") ) { _hx___regexTabStops=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__regexLeftMargin") ) { _hx___regexLeftMargin=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__regexBlockIndent") ) { _hx___regexBlockIndent=ioValue.Cast<  ::EReg >(); return true; }
		if (HX_FIELD_EQ(inName,"__regexRightMargin") ) { _hx___regexRightMargin=ioValue.Cast<  ::EReg >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("defaultTextFormat","\xe5","\xc7","\xe0","\x0a"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("htmlText","\xb8","\x1f","\x38","\x10"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("mouseWheelEnabled","\xeb","\x16","\x54","\x65"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"));
	outFields->push(HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"));
	outFields->push(HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"));
	outFields->push(HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"));
	outFields->push(HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"));
	outFields->push(HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"));
	outFields->push(HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"));
	outFields->push(HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"));
	outFields->push(HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"));
	outFields->push(HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___displayAsPassword),HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___mouseWheelEnabled),HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetX),HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58")},
	{hx::fsFloat,(int)offsetof(TextField_obj,_hx___offsetY),HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::_internal::symbols::DynamicTextSymbol*/ ,(int)offsetof(TextField_obj,_hx___symbol),HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97")},
	{hx::fsString,(int)offsetof(TextField_obj,_hx___text),HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb")},
	{hx::fsObject /*::openfl::_internal::text::TextEngine*/ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexAlign,HX_HCSTRING("__regexAlign","\x9e","\x21","\xd1","\x2d")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexColor,HX_HCSTRING("__regexColor","\x3c","\x3c","\x9c","\x56")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexBlockIndent,HX_HCSTRING("__regexBlockIndent","\x32","\x61","\xa3","\xa8")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexBreakTag,HX_HCSTRING("__regexBreakTag","\xa2","\xf1","\x6b","\xe6")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &TextField_obj::_hx___regexEntities,HX_HCSTRING("__regexEntities","\x08","\x59","\x3f","\x8c")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexFace,HX_HCSTRING("__regexFace","\xe4","\xc7","\x66","\x12")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexHTMLTag,HX_HCSTRING("__regexHTMLTag","\xe8","\x74","\xf4","\x76")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexIndent,HX_HCSTRING("__regexIndent","\x73","\xbf","\x84","\x3f")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexLeading,HX_HCSTRING("__regexLeading","\xdf","\x25","\x4c","\x7d")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexLeftMargin,HX_HCSTRING("__regexLeftMargin","\x1c","\x6e","\x33","\xf3")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexRightMargin,HX_HCSTRING("__regexRightMargin","\xc3","\x30","\xd7","\x98")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexTabStops,HX_HCSTRING("__regexTabStops","\x63","\x56","\x64","\xec")},
	{hx::fsObject /*::EReg*/ ,(void *) &TextField_obj::_hx___regexSize,HX_HCSTRING("__regexSize","\x08","\xb4","\x04","\x1b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__displayAsPassword","\xef","\xf3","\x86","\x9d"),
	HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"),
	HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"),
	HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"),
	HX_HCSTRING("__mouseWheelEnabled","\xcb","\x3f","\x44","\x18"),
	HX_HCSTRING("__offsetX","\x45","\x5a","\xb3","\x58"),
	HX_HCSTRING("__offsetY","\x46","\x5a","\xb3","\x58"),
	HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__symbol","\x78","\x1a","\x0d","\x97"),
	HX_HCSTRING("__text","\xcd","\x2f","\xf2","\xfb"),
	HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("appendText","\xa7","\xcf","\x05","\x5b"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("getFirstCharInParagraph","\xf9","\x5c","\x3d","\x08"),
	HX_HCSTRING("getLineIndexAtPoint","\x35","\xdc","\x50","\x98"),
	HX_HCSTRING("getLineIndexOfChar","\xb5","\x68","\x99","\xa1"),
	HX_HCSTRING("getLineLength","\x30","\xec","\x21","\xd0"),
	HX_HCSTRING("getLineMetrics","\xb9","\xab","\xc6","\xf2"),
	HX_HCSTRING("getLineOffset","\xdd","\xee","\x59","\x91"),
	HX_HCSTRING("getLineText","\x77","\xdd","\x16","\xb0"),
	HX_HCSTRING("getParagraphLength","\xfe","\x0e","\x4e","\xc4"),
	HX_HCSTRING("getTextFormat","\xfa","\x6b","\xf1","\x90"),
	HX_HCSTRING("replaceSelectedText","\xfc","\xfe","\x33","\xbb"),
	HX_HCSTRING("replaceText","\x01","\x6b","\x95","\x61"),
	HX_HCSTRING("setSelection","\x4a","\xb8","\x6a","\xb2"),
	HX_HCSTRING("setTextFormat","\x06","\x4e","\xf7","\xd5"),
	HX_HCSTRING("__caretBeginningOfLine","\x45","\xc9","\x47","\xfd"),
	HX_HCSTRING("__caretEndOfLine","\x03","\x74","\xb1","\x5c"),
	HX_HCSTRING("__caretNextCharacter","\xd3","\x7b","\x4f","\xea"),
	HX_HCSTRING("__caretNextLine","\x0a","\x68","\xad","\x0d"),
	HX_HCSTRING("__caretPreviousCharacter","\x8f","\xce","\x6c","\x11"),
	HX_HCSTRING("__caretPreviousLine","\xce","\x0e","\x89","\x48"),
	HX_HCSTRING("__fromSymbol","\x82","\x2f","\xb5","\x6a"),
	HX_HCSTRING("__getAttributeMatch","\x9f","\x3b","\x2c","\x45"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCharIndexOnDifferentLine","\x08","\x76","\x0f","\x0a"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getPosition","\x3f","\xa4","\x66","\x39"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__startCursorTimer","\xed","\x46","\xa3","\x83"),
	HX_HCSTRING("__startTextInput","\x7b","\xae","\x85","\xaa"),
	HX_HCSTRING("__stopCursorTimer","\x0d","\xcd","\x6c","\x26"),
	HX_HCSTRING("__stopTextInput","\x9b","\x6c","\xcb","\xa1"),
	HX_HCSTRING("__updateLayout","\xb3","\xd8","\x3c","\x79"),
	HX_HCSTRING("__updateText","\x76","\x32","\x42","\x3e"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_antiAliasType","\xbf","\xcf","\x6a","\xee"),
	HX_HCSTRING("set_antiAliasType","\xcb","\xa7","\xd8","\x11"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_borderColor","\x6e","\xf4","\xb6","\x97"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_caretIndex","\xd8","\x3e","\x51","\x53"),
	HX_HCSTRING("get_defaultTextFormat","\xbc","\xca","\x8e","\x89"),
	HX_HCSTRING("set_defaultTextFormat","\xc8","\x98","\x97","\xdd"),
	HX_HCSTRING("get_displayAsPassword","\xe6","\xcd","\x44","\x69"),
	HX_HCSTRING("set_displayAsPassword","\xf2","\x9b","\x4d","\xbd"),
	HX_HCSTRING("get_embedFonts","\x74","\x4f","\xd7","\x04"),
	HX_HCSTRING("set_embedFonts","\xe8","\x37","\xf7","\x24"),
	HX_HCSTRING("get_gridFitType","\x9c","\xaa","\xf5","\x74"),
	HX_HCSTRING("set_gridFitType","\xa8","\x27","\xc1","\x70"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_htmlText","\xc1","\xd3","\x51","\xc5"),
	HX_HCSTRING("set_htmlText","\x35","\xf7","\x4a","\xda"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxChars","\xa2","\xa3","\xea","\xa4"),
	HX_HCSTRING("set_maxChars","\x16","\xc7","\xe3","\xb9"),
	HX_HCSTRING("get_maxScrollH","\xa0","\x35","\xf2","\x10"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("get_mouseWheelEnabled","\xc2","\x19","\x02","\xe4"),
	HX_HCSTRING("set_mouseWheelEnabled","\xce","\xe7","\x0a","\x38"),
	HX_HCSTRING("get_multiline","\xc4","\xa6","\x75","\x5f"),
	HX_HCSTRING("set_multiline","\xd0","\x88","\x7b","\xa4"),
	HX_HCSTRING("get_numLines","\xe2","\xa5","\x2b","\xe7"),
	HX_HCSTRING("get_restrict","\x45","\x7f","\xb8","\xa6"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollH","\xb2","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollH","\xbe","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_selectable","\xdf","\x3e","\x20","\x3a"),
	HX_HCSTRING("set_selectable","\x53","\x27","\x40","\x5a"),
	HX_HCSTRING("get_selectionBeginIndex","\x2c","\x26","\x6d","\xdf"),
	HX_HCSTRING("get_selectionEndIndex","\x7a","\x10","\xf0","\xc9"),
	HX_HCSTRING("get_sharpness","\x58","\xf6","\x88","\xdc"),
	HX_HCSTRING("set_sharpness","\x64","\xd8","\x8e","\x21"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_textColor","\x4d","\xd5","\xad","\xa4"),
	HX_HCSTRING("set_textColor","\x59","\xb7","\xb3","\xe9"),
	HX_HCSTRING("get_textWidth","\xf0","\x19","\xb4","\x24"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("stage_onMouseMove","\x76","\xbc","\x61","\xde"),
	HX_HCSTRING("stage_onMouseUp","\x80","\xac","\x07","\xd1"),
	HX_HCSTRING("this_onAddedToStage","\x23","\x9e","\xce","\x72"),
	HX_HCSTRING("this_onFocusIn","\x1d","\x62","\xfb","\xdc"),
	HX_HCSTRING("this_onFocusOut","\x56","\x0b","\xff","\x7e"),
	HX_HCSTRING("this_onMouseDown","\x67","\x5d","\xaa","\x6d"),
	HX_HCSTRING("window_onKeyDown","\xf3","\x7d","\x3b","\xd1"),
	HX_HCSTRING("window_onTextInput","\xef","\xa0","\x6a","\xc0"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexAlign,"__regexAlign");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexColor,"__regexColor");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexBlockIndent,"__regexBlockIndent");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexBreakTag,"__regexBreakTag");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexEntities,"__regexEntities");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexFace,"__regexFace");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexHTMLTag,"__regexHTMLTag");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexIndent,"__regexIndent");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexLeading,"__regexLeading");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexLeftMargin,"__regexLeftMargin");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexRightMargin,"__regexRightMargin");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexTabStops,"__regexTabStops");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___regexSize,"__regexSize");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexAlign,"__regexAlign");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexColor,"__regexColor");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexBlockIndent,"__regexBlockIndent");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexBreakTag,"__regexBreakTag");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexEntities,"__regexEntities");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexFace,"__regexFace");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexHTMLTag,"__regexHTMLTag");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexIndent,"__regexIndent");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexLeading,"__regexLeading");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexLeftMargin,"__regexLeftMargin");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexRightMargin,"__regexRightMargin");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexTabStops,"__regexTabStops");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___regexSize,"__regexSize");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd"),
	HX_HCSTRING("__regexAlign","\x9e","\x21","\xd1","\x2d"),
	HX_HCSTRING("__regexColor","\x3c","\x3c","\x9c","\x56"),
	HX_HCSTRING("__regexBlockIndent","\x32","\x61","\xa3","\xa8"),
	HX_HCSTRING("__regexBreakTag","\xa2","\xf1","\x6b","\xe6"),
	HX_HCSTRING("__regexEntities","\x08","\x59","\x3f","\x8c"),
	HX_HCSTRING("__regexFace","\xe4","\xc7","\x66","\x12"),
	HX_HCSTRING("__regexHTMLTag","\xe8","\x74","\xf4","\x76"),
	HX_HCSTRING("__regexIndent","\x73","\xbf","\x84","\x3f"),
	HX_HCSTRING("__regexLeading","\xdf","\x25","\x4c","\x7d"),
	HX_HCSTRING("__regexLeftMargin","\x1c","\x6e","\x33","\xf3"),
	HX_HCSTRING("__regexRightMargin","\xc3","\x30","\xd7","\x98"),
	HX_HCSTRING("__regexTabStops","\x63","\x56","\x64","\xec"),
	HX_HCSTRING("__regexSize","\x08","\xb4","\x04","\x1b"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Object *dummy = new TextField_obj;
	TextField_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.TextField","\xca","\xa8","\xd5","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextField_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_44_boot)
HXLINE(  44)		_hx___regexAlign =  ::EReg_obj::__alloc( HX_CTX ,HX_("align=(\"([^\"]+)\"|'([^']+)')",46,80,3f,0e),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_45_boot)
HXLINE(  45)		_hx___regexColor =  ::EReg_obj::__alloc( HX_CTX ,HX_("color=(\"#([^\"]+)\"|'#([^']+)')",36,15,0f,76),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_46_boot)
HXLINE(  46)		_hx___regexBlockIndent =  ::EReg_obj::__alloc( HX_CTX ,HX_("blockindent=(\"([^\"]+)\"|'([^']+)')",fa,c9,96,24),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_47_boot)
HXLINE(  47)		_hx___regexBreakTag =  ::EReg_obj::__alloc( HX_CTX ,HX_("<br\\s*/?>",47,ed,43,f6),HX_("gi",22,5a,00,00));
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_48_boot)
HXLINE(  48)			 ::EReg _hx_tmp =  ::EReg_obj::__alloc( HX_CTX ,HX_("&quot;",2c,d9,81,8f),HX_("g",67,00,00,00));
HXDLIN(  48)			 ::EReg _hx_tmp1 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&apos;",22,7f,ca,55),HX_("g",67,00,00,00));
HXDLIN(  48)			 ::EReg _hx_tmp2 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&amp;",dd,d4,aa,21),HX_("g",67,00,00,00));
HXDLIN(  48)			 ::EReg _hx_tmp3 =  ::EReg_obj::__alloc( HX_CTX ,HX_("&lt;",4d,74,70,19),HX_("g",67,00,00,00));
HXDLIN(  48)			return ::Array_obj< ::Dynamic>::__new(5)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2,_hx_tmp2)->init(3,_hx_tmp3)->init(4, ::EReg_obj::__alloc( HX_CTX ,HX_("&gt;",08,a9,6c,19),HX_("g",67,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_d001dbc361c2c159_48_boot)
HXLINE(  48)		_hx___regexEntities =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_49_boot)
HXLINE(  49)		_hx___regexFace =  ::EReg_obj::__alloc( HX_CTX ,HX_("face=(\"([^\"]+)\"|'([^']+)')",1e,00,2b,89),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_50_boot)
HXLINE(  50)		_hx___regexHTMLTag =  ::EReg_obj::__alloc( HX_CTX ,HX_("<.*?>",97,b4,92,aa),HX_("g",67,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_51_boot)
HXLINE(  51)		_hx___regexIndent =  ::EReg_obj::__alloc( HX_CTX ,HX_(" indent=(\"([^\"]+)\"|'([^']+)')",4d,db,5b,9f),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_52_boot)
HXLINE(  52)		_hx___regexLeading =  ::EReg_obj::__alloc( HX_CTX ,HX_("leading=(\"([^\"]+)\"|'([^']+)')",07,25,07,ae),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_53_boot)
HXLINE(  53)		_hx___regexLeftMargin =  ::EReg_obj::__alloc( HX_CTX ,HX_("leftmargin=(\"([^\"]+)\"|'([^']+)')",f6,e4,c9,11),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_54_boot)
HXLINE(  54)		_hx___regexRightMargin =  ::EReg_obj::__alloc( HX_CTX ,HX_("rightmargin=(\"([^\"]+)\"|'([^']+)')",4b,8e,21,c0),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_55_boot)
HXLINE(  55)		_hx___regexTabStops =  ::EReg_obj::__alloc( HX_CTX ,HX_("tabstops=(\"([^\"]+)\"|'([^']+)')",7d,fe,73,09),HX_("i",69,00,00,00));
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_d001dbc361c2c159_56_boot)
HXLINE(  56)		_hx___regexSize =  ::EReg_obj::__alloc( HX_CTX ,HX_("size=(\"([^\"]+)\"|'([^']+)')",42,27,be,87),HX_("i",69,00,00,00));
            	}
}

} // end namespace openfl
} // end namespace text
