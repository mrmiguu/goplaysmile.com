// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_filters_GlowFilter
#include <openfl/filters/GlowFilter.h>
#endif
#ifndef INCLUDED_openfl_filters__GlowFilter_GlowShader
#include <openfl/filters/_GlowFilter/GlowShader.h>
#endif

namespace openfl{
namespace filters{

void GlowFilter_obj::__construct(hx::Null< Int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< Int >  __o_quality,hx::Null< Bool >  __o_inner,hx::Null< Bool >  __o_knockout){
Int color = __o_color.Default(16711680);
Float alpha = __o_alpha.Default(1);
Float blurX = __o_blurX.Default(6);
Float blurY = __o_blurY.Default(6);
Float strength = __o_strength.Default(2);
Int quality = __o_quality.Default(1);
Bool inner = __o_inner.Default(false);
Bool knockout = __o_knockout.Default(false);
            	HX_STACK_FRAME("openfl.filters.GlowFilter","new",0xf734d428,"openfl.filters.GlowFilter.new","openfl/filters/GlowFilter.hx",27,0x5f568606)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
            	HX_STACK_ARG(blurX,"blurX")
            	HX_STACK_ARG(blurY,"blurY")
            	HX_STACK_ARG(strength,"strength")
            	HX_STACK_ARG(quality,"quality")
            	HX_STACK_ARG(inner,"inner")
            	HX_STACK_ARG(knockout,"knockout")
HXLINE(  29)		super::__construct();
HXLINE(  31)		this->color = color;
HXLINE(  32)		this->alpha = alpha;
HXLINE(  33)		this->blurX = blurX;
HXLINE(  34)		this->blurY = blurY;
HXLINE(  35)		this->strength = strength;
HXLINE(  36)		this->set_quality(quality);
HXLINE(  37)		this->inner = inner;
HXLINE(  38)		this->set_knockout(knockout);
HXLINE(  40)		this->_hx___cacheObject = true;
            	}

Dynamic GlowFilter_obj::__CreateEmpty() { return new GlowFilter_obj; }

hx::ObjectPtr< GlowFilter_obj > GlowFilter_obj::__new(hx::Null< Int >  __o_color,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_blurX,hx::Null< Float >  __o_blurY,hx::Null< Float >  __o_strength,hx::Null< Int >  __o_quality,hx::Null< Bool >  __o_inner,hx::Null< Bool >  __o_knockout)
{
	hx::ObjectPtr< GlowFilter_obj > _hx_result = new GlowFilter_obj();
	_hx_result->__construct(__o_color,__o_alpha,__o_blurX,__o_blurY,__o_strength,__o_quality,__o_inner,__o_knockout);
	return _hx_result;
}

Dynamic GlowFilter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GlowFilter_obj > _hx_result = new GlowFilter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

 ::openfl::filters::BitmapFilter GlowFilter_obj::clone(){
            	HX_STACK_FRAME("openfl.filters.GlowFilter","clone",0x7c629925,"openfl.filters.GlowFilter.clone","openfl/filters/GlowFilter.hx",47,0x5f568606)
            	HX_STACK_THIS(this)
HXLINE(  47)		return  ::openfl::filters::GlowFilter_obj::__new(this->color,this->alpha,this->blurX,this->blurY,this->strength,this->quality,this->inner,this->knockout);
            	}


 ::openfl::display::Shader GlowFilter_obj::_hx___initShader( ::openfl::_internal::renderer::RenderSession renderSession,Int pass){
            	HX_STACK_FRAME("openfl.filters.GlowFilter","__initShader",0x188dd8ad,"openfl.filters.GlowFilter.__initShader","openfl/filters/GlowFilter.hx",52,0x5f568606)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(pass,"pass")
HXLINE(  54)		HX_VARI(  ::openfl::display::ShaderData,data) = ::openfl::filters::GlowFilter_obj::_hx___glowShader->get_data();
HXLINE(  56)		Bool _hx_tmp = (pass <= this->horizontalPasses);
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  58)			HX_VARI( Float,scale) = ::Math_obj::pow(((Float)0.5),((int)pass >> (int)(int)1));
HXLINE(  59)			 ::Dynamic _hx_tmp1 =  ::Dynamic( ::Dynamic(data->__Field(HX_("uRadius",a7,8a,da,e6),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN(  59)			Float _hx_tmp2 = (this->blurX * scale);
HXDLIN(  59)			_hx_tmp1->__SetItem((int)0,_hx_tmp2);
HXLINE(  60)			 ::Dynamic( ::Dynamic(data->__Field(HX_("uRadius",a7,8a,da,e6),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic))->__SetItem((int)1,(int)0);
            		}
            		else {
HXLINE(  64)			Int _hx_tmp3 = ((int)(pass - this->horizontalPasses) >> (int)(int)1);
HXDLIN(  64)			HX_VARI_NAME( Float,scale1,"scale") = ::Math_obj::pow(((Float)0.5),_hx_tmp3);
HXLINE(  65)			 ::Dynamic( ::Dynamic(data->__Field(HX_("uRadius",a7,8a,da,e6),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic))->__SetItem((int)0,(int)0);
HXLINE(  66)			 ::Dynamic _hx_tmp4 =  ::Dynamic( ::Dynamic(data->__Field(HX_("uRadius",a7,8a,da,e6),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN(  66)			Float _hx_tmp5 = (this->blurY * scale1);
HXDLIN(  66)			_hx_tmp4->__SetItem((int)1,_hx_tmp5);
            		}
HXLINE(  70)		 ::Dynamic _hx_tmp6 =  ::Dynamic( ::Dynamic(data->__Field(HX_("uColor",ae,18,4b,a5),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN(  70)		Int _hx_tmp7 = ((int)((int)this->color >> (int)(int)16) & (int)(int)255);
HXDLIN(  70)		_hx_tmp6->__SetItem((int)0,((Float)_hx_tmp7 / (Float)(int)255));
HXLINE(  71)		 ::Dynamic _hx_tmp8 =  ::Dynamic( ::Dynamic(data->__Field(HX_("uColor",ae,18,4b,a5),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN(  71)		Int _hx_tmp9 = ((int)((int)this->color >> (int)(int)8) & (int)(int)255);
HXDLIN(  71)		_hx_tmp8->__SetItem((int)1,((Float)_hx_tmp9 / (Float)(int)255));
HXLINE(  72)		 ::Dynamic _hx_tmp10 =  ::Dynamic( ::Dynamic(data->__Field(HX_("uColor",ae,18,4b,a5),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic));
HXDLIN(  72)		Float _hx_tmp11 = ((Float)((int)this->color & (int)(int)255) / (Float)(int)255);
HXDLIN(  72)		_hx_tmp10->__SetItem((int)2,_hx_tmp11);
HXLINE(  73)		 ::Dynamic( ::Dynamic(data->__Field(HX_("uColor",ae,18,4b,a5),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic))->__SetItem((int)3,this->alpha);
HXLINE(  75)		return ::openfl::filters::GlowFilter_obj::_hx___glowShader;
            	}


Bool GlowFilter_obj::set_knockout(Bool value){
            	HX_STACK_FRAME("openfl.filters.GlowFilter","set_knockout",0xf84cc4af,"openfl.filters.GlowFilter.set_knockout","openfl/filters/GlowFilter.hx",89,0x5f568606)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  89)		return (this->knockout = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GlowFilter_obj,set_knockout,return )

Int GlowFilter_obj::set_quality(Int value){
            	HX_STACK_FRAME("openfl.filters.GlowFilter","set_quality",0xb56977aa,"openfl.filters.GlowFilter.set_quality","openfl/filters/GlowFilter.hx",94,0x5f568606)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(  98)		Int _hx_tmp;
HXDLIN(  98)		Bool _hx_tmp1 = (this->blurX <= (int)0);
HXDLIN(  98)		if (_hx_tmp1) {
HXLINE(  98)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(  98)			Float _hx_tmp2 = (this->blurX * ((Float)value / (Float)(int)4));
HXDLIN(  98)			Int _hx_tmp3 = ::Math_obj::round(_hx_tmp2);
HXDLIN(  98)			_hx_tmp = (_hx_tmp3 + (int)1);
            		}
HXDLIN(  98)		this->horizontalPasses = _hx_tmp;
HXLINE(  99)		Int _hx_tmp4;
HXDLIN(  99)		Bool _hx_tmp5 = (this->blurY <= (int)0);
HXDLIN(  99)		if (_hx_tmp5) {
HXLINE(  99)			_hx_tmp4 = (int)0;
            		}
            		else {
HXLINE(  99)			Float _hx_tmp6 = (this->blurY * ((Float)value / (Float)(int)4));
HXDLIN(  99)			Int _hx_tmp7 = ::Math_obj::round(_hx_tmp6);
HXDLIN(  99)			_hx_tmp4 = (_hx_tmp7 + (int)1);
            		}
HXDLIN(  99)		this->verticalPasses = _hx_tmp4;
HXLINE( 101)		this->_hx___numPasses = (this->horizontalPasses + this->verticalPasses);
HXLINE( 103)		return (this->quality = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(GlowFilter_obj,set_quality,return )

 ::openfl::filters::_GlowFilter::GlowShader GlowFilter_obj::_hx___glowShader;


GlowFilter_obj::GlowFilter_obj()
{
}

hx::Val GlowFilter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		if (HX_FIELD_EQ(inName,"blurX") ) { return hx::Val( blurX); }
		if (HX_FIELD_EQ(inName,"blurY") ) { return hx::Val( blurY); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color); }
		if (HX_FIELD_EQ(inName,"inner") ) { return hx::Val( inner); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { return hx::Val( quality); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"knockout") ) { return hx::Val( knockout); }
		if (HX_FIELD_EQ(inName,"strength") ) { return hx::Val( strength); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"set_quality") ) { return hx::Val( set_quality_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__initShader") ) { return hx::Val( _hx___initShader_dyn()); }
		if (HX_FIELD_EQ(inName,"set_knockout") ) { return hx::Val( set_knockout_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"verticalPasses") ) { return hx::Val( verticalPasses); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"horizontalPasses") ) { return hx::Val( horizontalPasses); }
	}
	return super::__Field(inName,inCallProp);
}

bool GlowFilter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__glowShader") ) { outValue = _hx___glowShader; return true; }
	}
	return false;
}

hx::Val GlowFilter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blurX") ) { blurX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blurY") ) { blurY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inner") ) { inner=inValue.Cast< Bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_quality(inValue) );quality=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"knockout") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_knockout(inValue) );knockout=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strength") ) { strength=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"verticalPasses") ) { verticalPasses=inValue.Cast< Int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"horizontalPasses") ) { horizontalPasses=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool GlowFilter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__glowShader") ) { _hx___glowShader=ioValue.Cast<  ::openfl::filters::_GlowFilter::GlowShader >(); return true; }
	}
	return false;
}

void GlowFilter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"));
	outFields->push(HX_HCSTRING("knockout","\xfa","\xa9","\xa5","\x6f"));
	outFields->push(HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"));
	outFields->push(HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e"));
	outFields->push(HX_HCSTRING("horizontalPasses","\x83","\x07","\xcd","\x96"));
	outFields->push(HX_HCSTRING("verticalPasses","\x95","\xc0","\xb5","\xb8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GlowFilter_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(GlowFilter_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsFloat,(int)offsetof(GlowFilter_obj,blurX),HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5")},
	{hx::fsFloat,(int)offsetof(GlowFilter_obj,blurY),HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5")},
	{hx::fsInt,(int)offsetof(GlowFilter_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsBool,(int)offsetof(GlowFilter_obj,inner),HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe")},
	{hx::fsBool,(int)offsetof(GlowFilter_obj,knockout),HX_HCSTRING("knockout","\xfa","\xa9","\xa5","\x6f")},
	{hx::fsInt,(int)offsetof(GlowFilter_obj,quality),HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44")},
	{hx::fsFloat,(int)offsetof(GlowFilter_obj,strength),HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e")},
	{hx::fsInt,(int)offsetof(GlowFilter_obj,horizontalPasses),HX_HCSTRING("horizontalPasses","\x83","\x07","\xcd","\x96")},
	{hx::fsInt,(int)offsetof(GlowFilter_obj,verticalPasses),HX_HCSTRING("verticalPasses","\x95","\xc0","\xb5","\xb8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo GlowFilter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::filters::_GlowFilter::GlowShader*/ ,(void *) &GlowFilter_obj::_hx___glowShader,HX_HCSTRING("__glowShader","\xb2","\xe4","\x70","\x07")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String GlowFilter_obj_sMemberFields[] = {
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("blurX","\xd1","\x0f","\x01","\xb5"),
	HX_HCSTRING("blurY","\xd2","\x0f","\x01","\xb5"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("inner","\x96","\x31","\x1c","\xbe"),
	HX_HCSTRING("knockout","\xfa","\xa9","\xa5","\x6f"),
	HX_HCSTRING("quality","\xbf","\x04","\x4c","\x44"),
	HX_HCSTRING("strength","\x81","\xd2","\x8e","\x8e"),
	HX_HCSTRING("horizontalPasses","\x83","\x07","\xcd","\x96"),
	HX_HCSTRING("verticalPasses","\x95","\xc0","\xb5","\xb8"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("__initShader","\x75","\x95","\xf9","\x59"),
	HX_HCSTRING("set_knockout","\x77","\x81","\xb8","\x39"),
	HX_HCSTRING("set_quality","\xe2","\x6b","\xb3","\xd4"),
	::String(null()) };

static void GlowFilter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GlowFilter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GlowFilter_obj::_hx___glowShader,"__glowShader");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GlowFilter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GlowFilter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GlowFilter_obj::_hx___glowShader,"__glowShader");
};

#endif

hx::Class GlowFilter_obj::__mClass;

static ::String GlowFilter_obj_sStaticFields[] = {
	HX_HCSTRING("__glowShader","\xb2","\xe4","\x70","\x07"),
	::String(null())
};

void GlowFilter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters.GlowFilter","\x36","\xe0","\x65","\x68");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GlowFilter_obj::__GetStatic;
	__mClass->mSetStaticField = &GlowFilter_obj::__SetStatic;
	__mClass->mMarkFunc = GlowFilter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GlowFilter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GlowFilter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GlowFilter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GlowFilter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GlowFilter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GlowFilter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GlowFilter_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.filters.GlowFilter","boot",0x4f1dcf6a,"openfl.filters.GlowFilter.boot","openfl/filters/GlowFilter.hx",12,0x5f568606)
HXLINE(  12)		_hx___glowShader =  ::openfl::filters::_GlowFilter::GlowShader_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace filters
