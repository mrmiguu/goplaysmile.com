// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl_display_DirectRenderer
#include <openfl/display/DirectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLView
#include <openfl/display/OpenGLView.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ea3b26280d7ee2f2_35_new,"openfl.display.OpenGLView","new",0xbc210f50,"openfl.display.OpenGLView.new","openfl/display/OpenGLView.hx",35,0x7a9fe7de)
HX_DEFINE_STACK_FRAME(_hx_pos_ea3b26280d7ee2f2_84___renderCanvas,"openfl.display.OpenGLView","__renderCanvas",0x35af22fe,"openfl.display.OpenGLView.__renderCanvas","openfl/display/OpenGLView.hx",84,0x7a9fe7de)
HX_DEFINE_STACK_FRAME(_hx_pos_ea3b26280d7ee2f2_100___renderDOM,"openfl.display.OpenGLView","__renderDOM",0x0611a49c,"openfl.display.OpenGLView.__renderDOM","openfl/display/OpenGLView.hx",100,0x7a9fe7de)
HX_DEFINE_STACK_FRAME(_hx_pos_ea3b26280d7ee2f2_178___renderGL,"openfl.display.OpenGLView","__renderGL",0x34d59d2b,"openfl.display.OpenGLView.__renderGL","openfl/display/OpenGLView.hx",178,0x7a9fe7de)
HX_DEFINE_STACK_FRAME(_hx_pos_ea3b26280d7ee2f2_249_get_isSupported,"openfl.display.OpenGLView","get_isSupported",0x72941b6b,"openfl.display.OpenGLView.get_isSupported","openfl/display/OpenGLView.hx",249,0x7a9fe7de)
HX_DEFINE_STACK_FRAME(_hx_pos_ea3b26280d7ee2f2_24_boot,"openfl.display.OpenGLView","boot",0xd8e55742,"openfl.display.OpenGLView.boot","openfl/display/OpenGLView.hx",24,0x7a9fe7de)
HX_DEFINE_STACK_FRAME(_hx_pos_ea3b26280d7ee2f2_25_boot,"openfl.display.OpenGLView","boot",0xd8e55742,"openfl.display.OpenGLView.boot","openfl/display/OpenGLView.hx",25,0x7a9fe7de)
namespace openfl{
namespace display{

void OpenGLView_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ea3b26280d7ee2f2_35_new)
            	HX_STACK_THIS(this)
HXLINE(  35)		super::__construct(HX_("OpenGLView",94,0e,ac,6e));
            	}

Dynamic OpenGLView_obj::__CreateEmpty() { return new OpenGLView_obj; }

void *OpenGLView_obj::_hx_vtable = 0;

Dynamic OpenGLView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< OpenGLView_obj > _hx_result = new OpenGLView_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OpenGLView_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x19c29573) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x19c29573;
		} else {
			return inClassId==(int)0x1b123bf8;
		}
	} else {
		return inClassId==(int)0x6d019862 || inClassId==(int)0x7fd42766;
	}
}

void OpenGLView_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_ea3b26280d7ee2f2_84___renderCanvas)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


void OpenGLView_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACKFRAME(&_hx_pos_ea3b26280d7ee2f2_100___renderDOM)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


void OpenGLView_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_ea3b26280d7ee2f2_178___renderGL)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 178)		bool _hx_tmp;
HXDLIN( 178)		if (hx::IsNotNull( this->stage )) {
HXLINE( 178)			_hx_tmp = this->_hx___renderable;
            		}
            		else {
HXLINE( 178)			_hx_tmp = false;
            		}
HXDLIN( 178)		if (_hx_tmp) {
HXLINE( 180)			HX_VARI(  ::openfl::geom::Rectangle,rect) = null();
HXLINE( 182)			if (hx::IsNull( this->_hx___scrollRect )) {
HXLINE( 184)				rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,this->stage->stageWidth,this->stage->stageHeight);
            			}
            			else {
HXLINE( 188)				rect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(this->get_x() + this->_hx___scrollRect->x),(this->get_y() + this->_hx___scrollRect->y),this->_hx___scrollRect->width,this->_hx___scrollRect->height);
            			}
HXLINE( 192)			renderSession->shaderManager->setShader(null());
HXLINE( 193)			renderSession->blendModeManager->setBlendMode(null());
HXLINE( 195)			if (hx::IsNotNull( this->_hx___render )) {
HXLINE( 195)				this->_hx___render(rect);
            			}
            		}
            	}


::String OpenGLView_obj::CONTEXT_LOST;

::String OpenGLView_obj::CONTEXT_RESTORED;

bool OpenGLView_obj::get_isSupported(){
            	HX_STACKFRAME(&_hx_pos_ea3b26280d7ee2f2_249_get_isSupported)
HXLINE( 249)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(OpenGLView_obj,get_isSupported,return )


hx::ObjectPtr< OpenGLView_obj > OpenGLView_obj::__new() {
	hx::ObjectPtr< OpenGLView_obj > __this = new OpenGLView_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< OpenGLView_obj > OpenGLView_obj::__alloc(hx::Ctx *_hx_ctx) {
	OpenGLView_obj *__this = (OpenGLView_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(OpenGLView_obj), true, "openfl.display.OpenGLView"));
	*(void **)__this = OpenGLView_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

OpenGLView_obj::OpenGLView_obj()
{
}

hx::Val OpenGLView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__added") ) { return hx::Val( _hx___added); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__initialized") ) { return hx::Val( _hx___initialized); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool OpenGLView_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"isSupported") ) { if (inCallProp == hx::paccAlways) { outValue = get_isSupported(); return true; } }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_isSupported") ) { outValue = get_isSupported_dyn(); return true; }
	}
	return false;
}

hx::Val OpenGLView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__added") ) { _hx___added=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__initialized") ) { _hx___initialized=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OpenGLView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__added","\xa0","\x2d","\xa2","\x86"));
	outFields->push(HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo OpenGLView_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(OpenGLView_obj,_hx___added),HX_HCSTRING("__added","\xa0","\x2d","\xa2","\x86")},
	{hx::fsBool,(int)offsetof(OpenGLView_obj,_hx___initialized),HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo OpenGLView_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &OpenGLView_obj::CONTEXT_LOST,HX_HCSTRING("CONTEXT_LOST","\x94","\x35","\x21","\xf9")},
	{hx::fsString,(void *) &OpenGLView_obj::CONTEXT_RESTORED,HX_HCSTRING("CONTEXT_RESTORED","\x06","\xe9","\x7b","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String OpenGLView_obj_sMemberFields[] = {
	HX_HCSTRING("__added","\xa0","\x2d","\xa2","\x86"),
	HX_HCSTRING("__initialized","\xf4","\x35","\x88","\x7f"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	::String(null()) };

static void OpenGLView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(OpenGLView_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(OpenGLView_obj::CONTEXT_LOST,"CONTEXT_LOST");
	HX_MARK_MEMBER_NAME(OpenGLView_obj::CONTEXT_RESTORED,"CONTEXT_RESTORED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void OpenGLView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(OpenGLView_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(OpenGLView_obj::CONTEXT_LOST,"CONTEXT_LOST");
	HX_VISIT_MEMBER_NAME(OpenGLView_obj::CONTEXT_RESTORED,"CONTEXT_RESTORED");
};

#endif

hx::Class OpenGLView_obj::__mClass;

static ::String OpenGLView_obj_sStaticFields[] = {
	HX_HCSTRING("CONTEXT_LOST","\x94","\x35","\x21","\xf9"),
	HX_HCSTRING("CONTEXT_RESTORED","\x06","\xe9","\x7b","\xfd"),
	HX_HCSTRING("get_isSupported","\x7b","\x34","\x6c","\xb4"),
	::String(null())
};

void OpenGLView_obj::__register()
{
	hx::Object *dummy = new OpenGLView_obj;
	OpenGLView_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.OpenGLView","\x5e","\x67","\x7b","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OpenGLView_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = OpenGLView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(OpenGLView_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(OpenGLView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< OpenGLView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = OpenGLView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OpenGLView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OpenGLView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void OpenGLView_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ea3b26280d7ee2f2_24_boot)
HXLINE(  24)		CONTEXT_LOST = HX_("glcontextlost",4e,21,17,07);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ea3b26280d7ee2f2_25_boot)
HXLINE(  25)		CONTEXT_RESTORED = HX_("glcontextrestored",c0,71,0a,02);
            	}
}

} // end namespace openfl
} // end namespace display
