// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphPosition
#include <lime/text/GlyphPosition.h>
#endif
#ifndef INCLUDED_lime_text_TextLayout
#include <lime/text/TextLayout.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_126_new,"openfl._internal.text.TextEngine","new",0xcc80cb52,"openfl._internal.text.TextEngine.new","openfl/_internal/text/TextEngine.hx",126,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_201_getBounds,"openfl._internal.text.TextEngine","getBounds",0x5ce2cc1d,"openfl._internal.text.TextEngine.getBounds","openfl/_internal/text/TextEngine.hx",201,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_475_getLine,"openfl._internal.text.TextEngine","getLine",0xf060239c,"openfl._internal.text.TextEngine.getLine","openfl/_internal/text/TextEngine.hx",475,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_496_getLineBreakIndex,"openfl._internal.text.TextEngine","getLineBreakIndex",0x0741948f,"openfl._internal.text.TextEngine.getLineBreakIndex","openfl/_internal/text/TextEngine.hx",496,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_509_getLineMeasurements,"openfl._internal.text.TextEngine","getLineMeasurements",0x203f1eb3,"openfl._internal.text.TextEngine.getLineMeasurements","openfl/_internal/text/TextEngine.hx",509,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_640_getLayoutGroups,"openfl._internal.text.TextEngine","getLayoutGroups",0xa3099646,"openfl._internal.text.TextEngine.getLayoutGroups","openfl/_internal/text/TextEngine.hx",640,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1123_setTextAlignment,"openfl._internal.text.TextEngine","setTextAlignment",0xb5caa542,"openfl._internal.text.TextEngine.setTextAlignment","openfl/_internal/text/TextEngine.hx",1123,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_1225_update,"openfl._internal.text.TextEngine","update",0x7da66e57,"openfl._internal.text.TextEngine.update","openfl/_internal/text/TextEngine.hx",1225,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_169_findFont,"openfl._internal.text.TextEngine","findFont",0x253a8276,"openfl._internal.text.TextEngine.findFont","openfl/_internal/text/TextEngine.hx",169,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_211_getFormatHeight,"openfl._internal.text.TextEngine","getFormatHeight",0xaafdc226,"openfl._internal.text.TextEngine.getFormatHeight","openfl/_internal/text/TextEngine.hx",211,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_248_getFont,"openfl._internal.text.TextEngine","getFont",0xec6d6977,"openfl._internal.text.TextEngine.getFont","openfl/_internal/text/TextEngine.hx",248,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_270_getFontInstance,"openfl._internal.text.TextEngine","getFontInstance",0xe749142c,"openfl._internal.text.TextEngine.getFontInstance","openfl/_internal/text/TextEngine.hx",270,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_51_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",51,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_52_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",52,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_53_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",53,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_54_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",54,0xdff93b7f)
HX_DEFINE_STACK_FRAME(_hx_pos_fa7d844c6c93a0ee_56_boot,"openfl._internal.text.TextEngine","boot",0x1c4a1d00,"openfl._internal.text.TextEngine.boot","openfl/_internal/text/TextEngine.hx",56,0xdff93b7f)
namespace openfl{
namespace _internal{
namespace text{

void TextEngine_obj::__construct( ::openfl::text::TextField textField){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_126_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(textField,"textField")
HXLINE( 128)		this->textField = textField;
HXLINE( 130)		this->width = (int)100;
HXLINE( 131)		this->height = (int)100;
HXLINE( 132)		this->text = HX_("",00,00,00,00);
HXLINE( 134)		this->bounds =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,(int)0);
HXLINE( 136)		this->type = (int)0;
HXLINE( 137)		this->autoSize = (int)2;
HXLINE( 138)		this->embedFonts = false;
HXLINE( 139)		this->selectable = true;
HXLINE( 140)		this->borderColor = (int)0;
HXLINE( 141)		this->border = false;
HXLINE( 142)		this->backgroundColor = (int)16777215;
HXLINE( 143)		this->background = false;
HXLINE( 144)		this->gridFitType = (int)1;
HXLINE( 145)		this->maxChars = (int)0;
HXLINE( 146)		this->multiline = false;
HXLINE( 147)		this->sharpness = (int)0;
HXLINE( 148)		this->scrollH = (int)0;
HXLINE( 149)		this->scrollV = (int)1;
HXLINE( 150)		this->wordWrap = false;
HXLINE( 152)		int length = null();
HXDLIN( 152)		bool fixed = null();
HXDLIN( 152)		this->lineAscents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length,fixed,null());
HXLINE( 153)		int length1 = null();
HXDLIN( 153)		bool fixed1 = null();
HXDLIN( 153)		this->lineBreaks =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,length1,fixed1,null());
HXLINE( 154)		int length2 = null();
HXDLIN( 154)		bool fixed2 = null();
HXDLIN( 154)		this->lineDescents =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length2,fixed2,null());
HXLINE( 155)		int length3 = null();
HXDLIN( 155)		bool fixed3 = null();
HXDLIN( 155)		this->lineLeadings =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length3,fixed3,null());
HXLINE( 156)		int length4 = null();
HXDLIN( 156)		bool fixed4 = null();
HXDLIN( 156)		this->lineHeights =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length4,fixed4,null());
HXLINE( 157)		int length5 = null();
HXDLIN( 157)		bool fixed5 = null();
HXDLIN( 157)		this->lineWidths =  ::openfl::_Vector::FloatVector_obj::__alloc( HX_CTX ,length5,fixed5,null());
HXLINE( 158)		int length6 = null();
HXDLIN( 158)		bool fixed6 = null();
HXDLIN( 158)		this->layoutGroups =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length6,fixed6,null());
HXLINE( 159)		int length7 = null();
HXDLIN( 159)		bool fixed7 = null();
HXDLIN( 159)		this->textFormatRanges =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,length7,fixed7,null());
            	}

Dynamic TextEngine_obj::__CreateEmpty() { return new TextEngine_obj; }

void *TextEngine_obj::_hx_vtable = 0;

Dynamic TextEngine_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextEngine_obj > _hx_result = new TextEngine_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool TextEngine_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x278047a0;
}

void TextEngine_obj::getBounds(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_201_getBounds)
            	HX_STACK_THIS(this)
HXLINE( 203)		HX_VAR( int,padding);
HXDLIN( 203)		if (this->border) {
HXLINE( 203)			padding = (int)1;
            		}
            		else {
HXLINE( 203)			padding = (int)0;
            		}
HXLINE( 205)		this->bounds->width = (this->width + padding);
HXLINE( 206)		this->bounds->height = (this->height + padding);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getBounds,(void))

::String TextEngine_obj::getLine(int index){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_475_getLine)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 477)		bool _hx_tmp;
HXDLIN( 477)		if ((index >= (int)0)) {
HXLINE( 477)			_hx_tmp = (index > (this->lineBreaks->get_length() + (int)1));
            		}
            		else {
HXLINE( 477)			_hx_tmp = true;
            		}
HXDLIN( 477)		if (_hx_tmp) {
HXLINE( 479)			return null();
            		}
HXLINE( 483)		if ((this->lineBreaks->get_length() == (int)0)) {
HXLINE( 485)			return this->text;
            		}
            		else {
HXLINE( 489)			int _hx_tmp1;
HXDLIN( 489)			if ((index > (int)0)) {
HXLINE( 489)				_hx_tmp1 = this->lineBreaks->get((index - (int)1));
            			}
            			else {
HXLINE( 489)				_hx_tmp1 = (int)0;
            			}
HXDLIN( 489)			return this->text.substring(_hx_tmp1,this->lineBreaks->get(index));
            		}
HXLINE( 483)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLine,return )

int TextEngine_obj::getLineBreakIndex(hx::Null< int >  __o_startIndex){
int startIndex = __o_startIndex.Default(0);
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_496_getLineBreakIndex)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(startIndex,"startIndex")
HXLINE( 498)		HX_VARI( int,cr) = this->text.indexOf(HX_("\n",0a,00,00,00),startIndex);
HXLINE( 499)		HX_VARI( int,lf) = this->text.indexOf(HX_("\r",0d,00,00,00),startIndex);
HXLINE( 501)		if ((cr == (int)-1)) {
HXLINE( 501)			return lf;
            		}
HXLINE( 502)		if ((lf == (int)-1)) {
HXLINE( 502)			return cr;
            		}
HXLINE( 504)		if ((cr < lf)) {
HXLINE( 504)			return cr;
            		}
            		else {
HXLINE( 504)			return lf;
            		}
HXDLIN( 504)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getLineBreakIndex,return )

void TextEngine_obj::getLineMeasurements(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_509_getLineMeasurements)
            	HX_STACK_THIS(this)
HXLINE( 511)		this->lineAscents->set_length((int)0);
HXLINE( 512)		this->lineDescents->set_length((int)0);
HXLINE( 513)		this->lineLeadings->set_length((int)0);
HXLINE( 514)		this->lineHeights->set_length((int)0);
HXLINE( 515)		this->lineWidths->set_length((int)0);
HXLINE( 517)		HX_VARI( Float,currentLineAscent) = ((Float)0.0);
HXLINE( 518)		HX_VARI( Float,currentLineDescent) = ((Float)0.0);
HXLINE( 519)		HX_VARI(  ::Dynamic,currentLineLeading) = null();
HXLINE( 520)		HX_VARI( Float,currentLineHeight) = ((Float)0.0);
HXLINE( 521)		HX_VARI( Float,currentLineWidth) = ((Float)0.0);
HXLINE( 523)		this->textWidth = (int)0;
HXLINE( 524)		this->textHeight = (int)0;
HXLINE( 525)		this->numLines = (int)1;
HXLINE( 526)		this->bottomScrollV = (int)0;
HXLINE( 527)		this->maxScrollH = (int)0;
HXLINE( 529)		{
HXLINE( 529)			HX_VARI( int,_g) = (int)0;
HXDLIN( 529)			HX_VARI(  ::openfl::_Vector::ObjectVector,_g1) = this->layoutGroups;
HXDLIN( 529)			while((_g < _g1->get_length())){
HXLINE( 529)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 529)				_g = (_g + (int)1);
HXLINE( 531)				while((group->lineIndex > (this->numLines - (int)1))){
HXLINE( 533)					this->lineAscents->push(currentLineAscent);
HXLINE( 534)					this->lineDescents->push(currentLineDescent);
HXLINE( 535)					{
HXLINE( 535)						Float _hx_tmp;
HXDLIN( 535)						if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 535)							_hx_tmp = currentLineLeading;
            						}
            						else {
HXLINE( 535)							_hx_tmp = (int)0;
            						}
HXDLIN( 535)						this->lineLeadings->push(_hx_tmp);
            					}
HXLINE( 536)					this->lineHeights->push(currentLineHeight);
HXLINE( 537)					this->lineWidths->push(currentLineWidth);
HXLINE( 539)					currentLineAscent = (int)0;
HXLINE( 540)					currentLineDescent = (int)0;
HXLINE( 541)					currentLineLeading = null();
HXLINE( 542)					currentLineHeight = (int)0;
HXLINE( 543)					currentLineWidth = (int)0;
HXLINE( 545)					this->numLines++;
HXLINE( 547)					if ((this->textHeight <= (this->height - (int)2))) {
HXLINE( 549)						this->bottomScrollV++;
            					}
            				}
HXLINE( 555)				currentLineAscent = ::Math_obj::max(currentLineAscent,group->ascent);
HXLINE( 556)				currentLineDescent = ::Math_obj::max(currentLineDescent,group->descent);
HXLINE( 558)				if (hx::IsNull( currentLineLeading )) {
HXLINE( 560)					currentLineLeading = group->leading;
            				}
            				else {
HXLINE( 564)					currentLineLeading = ::Std_obj::_hx_int(::Math_obj::max(currentLineLeading,group->leading));
            				}
HXLINE( 568)				currentLineHeight = ::Math_obj::max(currentLineHeight,group->height);
HXLINE( 569)				currentLineWidth = ((group->offsetX - (int)2) + group->width);
HXLINE( 571)				if ((currentLineWidth > this->textWidth)) {
HXLINE( 573)					this->textWidth = currentLineWidth;
            				}
HXLINE( 577)				this->textHeight = (((group->offsetY - (int)2) + group->ascent) + group->descent);
            			}
            		}
HXLINE( 581)		this->lineAscents->push(currentLineAscent);
HXLINE( 582)		this->lineDescents->push(currentLineDescent);
HXLINE( 583)		{
HXLINE( 583)			Float _hx_tmp1;
HXDLIN( 583)			if (hx::IsNotNull( currentLineLeading )) {
HXLINE( 583)				_hx_tmp1 = currentLineLeading;
            			}
            			else {
HXLINE( 583)				_hx_tmp1 = (int)0;
            			}
HXDLIN( 583)			this->lineLeadings->push(_hx_tmp1);
            		}
HXLINE( 584)		this->lineHeights->push(currentLineHeight);
HXLINE( 585)		this->lineWidths->push(currentLineWidth);
HXLINE( 587)		if ((this->numLines == (int)1)) {
HXLINE( 589)			this->bottomScrollV = (int)1;
HXLINE( 591)			if (hx::IsGreater( currentLineLeading,(int)0 )) {
HXLINE( 593)				 ::openfl::_internal::text::TextEngine _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 593)				_hx_tmp2->textHeight = (_hx_tmp2->textHeight + currentLineLeading);
            			}
            		}
            		else {
HXLINE( 597)			if ((this->textHeight <= (this->height - (int)2))) {
HXLINE( 599)				this->bottomScrollV++;
            			}
            		}
HXLINE( 603)		if (hx::IsNotEq( this->autoSize,(int)2 )) {
HXLINE( 605)			 ::Dynamic _hx_switch_0 = this->autoSize;
            			if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)3) ){
HXLINE( 609)				if (!(this->wordWrap)) {
HXLINE( 611)					this->width = (this->textWidth + (int)4);
            				}
HXLINE( 615)				this->height = (this->textHeight + (int)4);
HXLINE( 616)				this->bottomScrollV = this->numLines;
HXLINE( 607)				goto _hx_goto_6;
            			}
            			/* default */{
            			}
            			_hx_goto_6:;
            		}
HXLINE( 625)		if ((this->textWidth > (this->width - (int)4))) {
HXLINE( 627)			this->maxScrollH = ::Std_obj::_hx_int(((this->textWidth - this->width) + (int)4));
            		}
            		else {
HXLINE( 631)			this->maxScrollH = (int)0;
            		}
HXLINE( 635)		this->maxScrollV = ((this->numLines - this->bottomScrollV) + (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLineMeasurements,(void))

void TextEngine_obj::getLayoutGroups(){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_640_getLayoutGroups)
            	HX_STACK_THIS(this)
HXLINE( 640)		HX_VARI(  ::openfl::_internal::text::TextEngine,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 642)		this->layoutGroups->set_length((int)0);
HXLINE( 644)		HX_VARI( int,rangeIndex) = (int)-1;
HXLINE( 645)		HX_VARI(  ::openfl::_internal::text::TextFormatRange,formatRange) = null();
HXLINE( 646)		HX_VARI(  ::lime::text::Font,font) = null();
HXLINE( 648)		HX_VARI(  ::openfl::text::TextFormat,currentFormat) = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 650)		HX_VARI( int,leading) = (int)0;
HXLINE( 651)		HX_VARI( Float,ascent) = ((Float)0.0);
HXLINE( 652)		HX_VARI( Float,descent) = ((Float)0.0);
HXLINE( 654)		HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,layoutGroup) = null();
HXDLIN( 654)		HX_VARI( ::Array< Float >,advances) = null();
HXLINE( 655)		HX_VAR( Float,widthValue);
HXDLIN( 655)		HX_VARI( Float,heightValue) = ((Float)0.0);
HXLINE( 657)		HX_VARI( int,previousSpaceIndex) = (int)0;
HXDLIN( 657)		HX_VARI( int,previousBreakIndex) = (int)0;
HXLINE( 658)		HX_VARI( int,spaceIndex) = this->text.indexOf(HX_(" ",20,00,00,00),null());
HXLINE( 659)		HX_VARI( int,breakIndex) = this->getLineBreakIndex(null());
HXLINE( 661)		HX_VARI( Float,marginRight) = ((Float)0.0);
HXLINE( 662)		HX_VARI( Float,offsetX) = ((Float)2.0);
HXLINE( 663)		HX_VARI( Float,offsetY) = ((Float)2.0);
HXLINE( 664)		HX_VARI( int,textIndex) = (int)0;
HXLINE( 665)		HX_VARI( int,lineIndex) = (int)0;
HXLINE( 666)		HX_VARI(  ::openfl::text::TextFormat,lineFormat) = null();
HXLINE( 841)		if (((int)-1 < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE( 841)			rangeIndex = (int)0;
HXDLIN( 841)			formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,(int)0)) );
HXDLIN( 841)			currentFormat->_hx___merge(formatRange->format);
HXDLIN( 841)			font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN( 841)			if (hx::IsNotNull( font )) {
HXLINE( 841)				HX_VARI_NAME( int,ascent1,"ascent") = font->get_ascender();
HXDLIN( 841)				Float ascent2 = ((Float)ascent1 / (Float)font->get_unitsPerEM());
HXDLIN( 841)				ascent = (ascent2 * currentFormat->size);
HXDLIN( 841)				HX_VARI_NAME( int,descent1,"descent") = font->get_descender();
HXDLIN( 841)				Float descent2 = ((Float)descent1 / (Float)font->get_unitsPerEM());
HXDLIN( 841)				descent = ::Math_obj::abs((descent2 * currentFormat->size));
HXDLIN( 841)				leading = currentFormat->leading;
HXDLIN( 841)				heightValue = ((ascent + descent) + leading);
            			}
            			else {
HXLINE( 841)				ascent = currentFormat->size;
HXDLIN( 841)				descent = (currentFormat->size * ((Float)0.185));
HXDLIN( 841)				leading = currentFormat->leading;
HXDLIN( 841)				heightValue = ((ascent + descent) + leading);
            			}
            		}
HXLINE( 843)		lineFormat = formatRange->format;
HXLINE( 844)		HX_VAR( bool,wrap);
HXLINE( 845)		HX_VARI( int,maxLoops) = this->text.length;
HXLINE( 846)		if (this->multiline) {
HXLINE( 846)			maxLoops = (maxLoops + (int)1);
            		}
HXLINE( 848)		while((textIndex < maxLoops)){
HXLINE( 850)			bool _hx_tmp;
HXDLIN( 850)			bool _hx_tmp1;
HXDLIN( 850)			if ((breakIndex > (int)-1)) {
HXLINE( 850)				if ((spaceIndex != (int)-1)) {
HXLINE( 850)					_hx_tmp1 = (breakIndex < spaceIndex);
            				}
            				else {
HXLINE( 850)					_hx_tmp1 = true;
            				}
            			}
            			else {
HXLINE( 850)				_hx_tmp1 = false;
            			}
HXDLIN( 850)			if (_hx_tmp1) {
HXLINE( 850)				_hx_tmp = (formatRange->end >= breakIndex);
            			}
            			else {
HXLINE( 850)				_hx_tmp = false;
            			}
HXDLIN( 850)			if (_hx_tmp) {
HXLINE( 852)				layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,breakIndex);
HXLINE( 853)				::String text = this->text;
HXDLIN( 853)				HX_VARI_NAME( ::Array< Float >,advances1,"advances") = ::Array_obj< Float >::__new(0);
HXDLIN( 853)				if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE( 853)					_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            				}
HXDLIN( 853)				_gthis->_hx___textLayout->set_text(null());
HXDLIN( 853)				_gthis->_hx___textLayout->set_font(font);
HXDLIN( 853)				if (hx::IsNotNull( formatRange->format->size )) {
HXLINE( 853)					_gthis->_hx___textLayout->set_size(formatRange->format->size);
            				}
HXDLIN( 853)				HX_VARI_NAME(  ::lime::text::TextLayout,_gthis1,"_gthis") = _gthis->_hx___textLayout;
HXDLIN( 853)				_gthis1->set_text(text.substring(textIndex,breakIndex));
HXDLIN( 853)				{
HXLINE( 853)					HX_VARI( int,_g) = (int)0;
HXDLIN( 853)					HX_VARI( ::Array< ::Dynamic>,_g1) = _gthis->_hx___textLayout->get_positions();
HXDLIN( 853)					while((_g < _g1->length)){
HXLINE( 853)						HX_VARI(  ::lime::text::GlyphPosition,position) = _g1->__get(_g).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 853)						_g = (_g + (int)1);
HXDLIN( 853)						advances1->push(position->advance->x);
            					}
            				}
HXDLIN( 853)				layoutGroup->advances = advances1;
HXLINE( 854)				layoutGroup->offsetX = offsetX;
HXLINE( 855)				layoutGroup->ascent = ascent;
HXLINE( 856)				layoutGroup->descent = descent;
HXLINE( 857)				layoutGroup->leading = leading;
HXLINE( 858)				layoutGroup->lineIndex = lineIndex;
HXLINE( 859)				layoutGroup->offsetY = offsetY;
HXLINE( 860)				HX_VARI_NAME( ::Array< Float >,advances2,"advances") = layoutGroup->advances;
HXDLIN( 860)				HX_VARI( Float,width) = ((Float)0.0);
HXDLIN( 860)				{
HXLINE( 860)					HX_VARI_NAME( int,_g2,"_g") = (int)0;
HXDLIN( 860)					while((_g2 < advances2->length)){
HXLINE( 860)						HX_VARI( Float,advance) = advances2->__get(_g2);
HXDLIN( 860)						_g2 = (_g2 + (int)1);
HXDLIN( 860)						width = (width + advance);
            					}
            				}
HXDLIN( 860)				layoutGroup->width = width;
HXLINE( 861)				layoutGroup->height = heightValue;
HXLINE( 862)				this->layoutGroups->push(layoutGroup);
HXLINE( 864)				offsetY = (offsetY + heightValue);
HXLINE( 865)				offsetX = (int)2;
HXLINE( 867)				if ((formatRange->end == breakIndex)) {
HXLINE( 869)					if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE( 869)						rangeIndex = (rangeIndex + (int)1);
HXDLIN( 869)						formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN( 869)						currentFormat->_hx___merge(formatRange->format);
HXDLIN( 869)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN( 869)						if (hx::IsNotNull( font )) {
HXLINE( 869)							HX_VARI_NAME( int,ascent3,"ascent") = font->get_ascender();
HXDLIN( 869)							Float ascent4 = ((Float)ascent3 / (Float)font->get_unitsPerEM());
HXDLIN( 869)							ascent = (ascent4 * currentFormat->size);
HXDLIN( 869)							HX_VARI_NAME( int,descent3,"descent") = font->get_descender();
HXDLIN( 869)							Float descent4 = ((Float)descent3 / (Float)font->get_unitsPerEM());
HXDLIN( 869)							descent = ::Math_obj::abs((descent4 * currentFormat->size));
HXDLIN( 869)							leading = currentFormat->leading;
HXDLIN( 869)							heightValue = ((ascent + descent) + leading);
            						}
            						else {
HXLINE( 869)							ascent = currentFormat->size;
HXDLIN( 869)							descent = (currentFormat->size * ((Float)0.185));
HXDLIN( 869)							leading = currentFormat->leading;
HXDLIN( 869)							heightValue = ((ascent + descent) + leading);
            						}
            					}
HXLINE( 870)					lineFormat = formatRange->format;
            				}
HXLINE( 874)				textIndex = (breakIndex + (int)1);
HXLINE( 875)				previousBreakIndex = breakIndex;
HXLINE( 876)				breakIndex = this->getLineBreakIndex(textIndex);
HXLINE( 877)				lineIndex = (lineIndex + (int)1);
HXLINE( 878)				layoutGroup = null();
            			}
            			else {
HXLINE( 880)				bool _hx_tmp2;
HXDLIN( 880)				bool _hx_tmp3;
HXDLIN( 880)				if ((formatRange->end >= spaceIndex)) {
HXLINE( 880)					_hx_tmp3 = (spaceIndex > (int)-1);
            				}
            				else {
HXLINE( 880)					_hx_tmp3 = false;
            				}
HXDLIN( 880)				if (_hx_tmp3) {
HXLINE( 880)					_hx_tmp2 = (textIndex < formatRange->end);
            				}
            				else {
HXLINE( 880)					_hx_tmp2 = false;
            				}
HXDLIN( 880)				if (_hx_tmp2) {
HXLINE( 882)					bool _hx_tmp4;
HXDLIN( 882)					bool _hx_tmp5;
HXDLIN( 882)					bool _hx_tmp6;
HXDLIN( 882)					bool _hx_tmp7;
HXDLIN( 882)					if (hx::IsNotNull( layoutGroup )) {
HXLINE( 882)						_hx_tmp7 = (previousSpaceIndex != previousBreakIndex);
            					}
            					else {
HXLINE( 882)						_hx_tmp7 = false;
            					}
HXDLIN( 882)					if (_hx_tmp7) {
HXLINE( 882)						_hx_tmp6 = (previousSpaceIndex == (textIndex - (int)1));
            					}
            					else {
HXLINE( 882)						_hx_tmp6 = false;
            					}
HXDLIN( 882)					if (_hx_tmp6) {
HXLINE( 882)						_hx_tmp5 = (textIndex == formatRange->start);
            					}
            					else {
HXLINE( 882)						_hx_tmp5 = false;
            					}
HXDLIN( 882)					if (_hx_tmp5) {
HXLINE( 882)						_hx_tmp4 = (spaceIndex <= formatRange->end);
            					}
            					else {
HXLINE( 882)						_hx_tmp4 = false;
            					}
HXDLIN( 882)					if (_hx_tmp4) {
HXLINE( 885)						layoutGroup->endIndex = textIndex;
HXLINE( 886)						 ::openfl::_internal::text::TextLayoutGroup layoutGroup1 = layoutGroup;
HXDLIN( 886)						layoutGroup1->width = (layoutGroup1->width + layoutGroup->advances->__get((layoutGroup->advances->length - (int)1)));
            					}
HXLINE( 889)					layoutGroup = null();
HXLINE( 890)					wrap = false;
HXLINE( 892)					while((textIndex != formatRange->end)){
HXLINE( 895)						if ((spaceIndex == (int)-1)) {
HXLINE( 895)							spaceIndex = formatRange->end;
            						}
HXLINE( 897)						::String text1 = this->text;
HXDLIN( 897)						HX_VARI_NAME( ::Array< Float >,advances3,"advances") = ::Array_obj< Float >::__new(0);
HXDLIN( 897)						if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE( 897)							_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            						}
HXDLIN( 897)						_gthis->_hx___textLayout->set_text(null());
HXDLIN( 897)						_gthis->_hx___textLayout->set_font(font);
HXDLIN( 897)						if (hx::IsNotNull( formatRange->format->size )) {
HXLINE( 897)							_gthis->_hx___textLayout->set_size(formatRange->format->size);
            						}
HXDLIN( 897)						HX_VARI_NAME(  ::lime::text::TextLayout,_gthis2,"_gthis") = _gthis->_hx___textLayout;
HXDLIN( 897)						_gthis2->set_text(text1.substring(textIndex,(spaceIndex + (int)1)));
HXDLIN( 897)						{
HXLINE( 897)							HX_VARI_NAME( int,_g3,"_g") = (int)0;
HXDLIN( 897)							HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN( 897)							while((_g3 < _g11->length)){
HXLINE( 897)								HX_VARI_NAME(  ::lime::text::GlyphPosition,position1,"position") = _g11->__get(_g3).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 897)								_g3 = (_g3 + (int)1);
HXDLIN( 897)								advances3->push(position1->advance->x);
            							}
            						}
HXDLIN( 897)						advances = advances3;
HXLINE( 898)						HX_VARI( Float,spaceWidth) = advances3->__get((advances3->length - (int)1));
HXLINE( 899)						HX_VARI_NAME( Float,width1,"width") = ((Float)0.0);
HXDLIN( 899)						{
HXLINE( 899)							HX_VARI_NAME( int,_g4,"_g") = (int)0;
HXDLIN( 899)							while((_g4 < advances3->length)){
HXLINE( 899)								HX_VARI_NAME( Float,advance1,"advance") = advances3->__get(_g4);
HXDLIN( 899)								_g4 = (_g4 + (int)1);
HXDLIN( 899)								width1 = (width1 + advance1);
            							}
            						}
HXDLIN( 899)						widthValue = (width1 - spaceWidth);
HXLINE( 901)						if (this->wordWrap) {
HXLINE( 903)							if (((offsetX + widthValue) > (this->width - (int)2))) {
HXLINE( 905)								wrap = true;
            							}
            						}
HXLINE( 911)						if (wrap) {
HXLINE( 913)							offsetY = (offsetY + heightValue);
HXLINE( 915)							HX_VARI( int,i) = (this->layoutGroups->get_length() - (int)1);
HXLINE( 916)							HX_VARI( int,offsetCount) = (int)0;
HXLINE( 918)							while(true){
HXLINE( 920)								layoutGroup = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE( 922)								bool _hx_tmp8;
HXDLIN( 922)								if ((i > (int)0)) {
HXLINE( 922)									_hx_tmp8 = (layoutGroup->startIndex > previousSpaceIndex);
            								}
            								else {
HXLINE( 922)									_hx_tmp8 = false;
            								}
HXDLIN( 922)								if (_hx_tmp8) {
HXLINE( 924)									offsetCount = (offsetCount + (int)1);
            								}
            								else {
HXLINE( 928)									goto _hx_goto_14;
            								}
HXLINE( 932)								i = (i - (int)1);
            							}
            							_hx_goto_14:;
HXLINE( 936)							lineIndex = (lineIndex + (int)1);
HXLINE( 938)							offsetX = (int)2;
HXLINE( 940)							if ((offsetCount > (int)0)) {
HXLINE( 942)								HX_VARI( Float,bumpX) = this->layoutGroups->get((this->layoutGroups->get_length() - offsetCount)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >()->offsetX;
HXLINE( 944)								{
HXLINE( 944)									HX_VARI_NAME( int,_g12,"_g1") = (this->layoutGroups->get_length() - offsetCount);
HXDLIN( 944)									HX_VARI_NAME( int,_g5,"_g") = this->layoutGroups->get_length();
HXDLIN( 944)									while((_g12 < _g5)){
HXLINE( 944)										_g12 = (_g12 + (int)1);
HXLINE( 946)										layoutGroup = this->layoutGroups->get((_g12 - (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE( 947)										 ::openfl::_internal::text::TextLayoutGroup layoutGroup2 = layoutGroup;
HXDLIN( 947)										layoutGroup2->offsetX = (layoutGroup2->offsetX - bumpX);
HXLINE( 948)										layoutGroup->offsetY = offsetY;
HXLINE( 949)										layoutGroup->lineIndex = lineIndex;
HXLINE( 950)										offsetX = (offsetX + layoutGroup->width);
            									}
            								}
            							}
HXLINE( 956)							layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,spaceIndex);
HXLINE( 957)							layoutGroup->advances = advances3;
HXLINE( 958)							layoutGroup->offsetX = offsetX;
HXLINE( 959)							layoutGroup->ascent = ascent;
HXLINE( 960)							layoutGroup->descent = descent;
HXLINE( 961)							layoutGroup->leading = leading;
HXLINE( 962)							layoutGroup->lineIndex = lineIndex;
HXLINE( 963)							layoutGroup->offsetY = offsetY;
HXLINE( 964)							layoutGroup->width = widthValue;
HXLINE( 965)							layoutGroup->height = heightValue;
HXLINE( 966)							this->layoutGroups->push(layoutGroup);
HXLINE( 968)							offsetX = (widthValue + spaceWidth);
HXLINE( 969)							marginRight = spaceWidth;
HXLINE( 971)							wrap = false;
            						}
            						else {
HXLINE( 975)							bool _hx_tmp9;
HXDLIN( 975)							if ((formatRange->start == previousSpaceIndex)) {
HXLINE( 975)								_hx_tmp9 = ((textIndex - (int)1) == previousSpaceIndex);
            							}
            							else {
HXLINE( 975)								_hx_tmp9 = false;
            							}
HXDLIN( 975)							if (_hx_tmp9) {
HXLINE( 978)								::String text2 = this->text;
HXDLIN( 978)								HX_VARI_NAME( ::Array< Float >,advances4,"advances") = ::Array_obj< Float >::__new(0);
HXDLIN( 978)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE( 978)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN( 978)								_gthis->_hx___textLayout->set_text(null());
HXDLIN( 978)								_gthis->_hx___textLayout->set_font(font);
HXDLIN( 978)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE( 978)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN( 978)								HX_VARI_NAME(  ::lime::text::TextLayout,_gthis3,"_gthis") = _gthis->_hx___textLayout;
HXDLIN( 978)								_gthis3->set_text(text2.substring(previousSpaceIndex,textIndex));
HXDLIN( 978)								{
HXLINE( 978)									HX_VARI_NAME( int,_g6,"_g") = (int)0;
HXDLIN( 978)									HX_VARI_NAME( ::Array< ::Dynamic>,_g13,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN( 978)									while((_g6 < _g13->length)){
HXLINE( 978)										HX_VARI_NAME(  ::lime::text::GlyphPosition,position2,"position") = _g13->__get(_g6).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN( 978)										_g6 = (_g6 + (int)1);
HXDLIN( 978)										advances4->push(position2->advance->x);
            									}
            								}
HXDLIN( 978)								advances = advances4->concat(advances3);
HXLINE( 979)								widthValue = (widthValue + advances->__get((int)0));
HXLINE( 980)								offsetX = (offsetX - advances->__get((int)0));
HXLINE( 982)								textIndex = previousSpaceIndex;
            							}
HXLINE( 986)							bool _hx_tmp10;
HXDLIN( 986)							if (hx::IsNotNull( layoutGroup )) {
HXLINE( 986)								_hx_tmp10 = (textIndex == spaceIndex);
            							}
            							else {
HXLINE( 986)								_hx_tmp10 = false;
            							}
HXDLIN( 986)							if (_hx_tmp10) {
HXLINE( 988)								if (hx::IsNotEq( formatRange->format->align,(int)2 )) {
HXLINE( 990)									layoutGroup->endIndex = spaceIndex;
            								}
HXLINE( 994)								marginRight = (marginRight + spaceWidth);
            							}
            							else {
HXLINE( 996)								bool _hx_tmp11;
HXDLIN( 996)								if (hx::IsNotNull( layoutGroup )) {
HXLINE( 996)									_hx_tmp11 = hx::IsEq( lineFormat->align,(int)2 );
            								}
            								else {
HXLINE( 996)									_hx_tmp11 = true;
            								}
HXDLIN( 996)								if (_hx_tmp11) {
HXLINE( 998)									layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,spaceIndex);
HXLINE( 999)									layoutGroup->advances = advances;
HXLINE(1000)									layoutGroup->offsetX = offsetX;
HXLINE(1001)									layoutGroup->ascent = ascent;
HXLINE(1002)									layoutGroup->descent = descent;
HXLINE(1003)									layoutGroup->leading = leading;
HXLINE(1004)									layoutGroup->lineIndex = lineIndex;
HXLINE(1005)									layoutGroup->offsetY = offsetY;
HXLINE(1006)									layoutGroup->width = widthValue;
HXLINE(1007)									layoutGroup->height = heightValue;
HXLINE(1008)									this->layoutGroups->push(layoutGroup);
HXLINE(1010)									marginRight = spaceWidth;
            								}
            								else {
HXLINE(1014)									layoutGroup->endIndex = spaceIndex;
HXLINE(1015)									layoutGroup->advances = layoutGroup->advances->concat(advances);
HXLINE(1018)									HX_VARI_NAME( ::Array< Float >,advances5,"advances") = layoutGroup->advances;
HXDLIN(1018)									HX_VARI_NAME( Float,width2,"width") = ((Float)0.0);
HXDLIN(1018)									{
HXLINE(1018)										HX_VARI_NAME( int,_g7,"_g") = (int)0;
HXDLIN(1018)										while((_g7 < advances5->length)){
HXLINE(1018)											HX_VARI_NAME( Float,advance2,"advance") = advances5->__get(_g7);
HXDLIN(1018)											_g7 = (_g7 + (int)1);
HXDLIN(1018)											width2 = (width2 + advance2);
            										}
            									}
HXDLIN(1018)									layoutGroup->width = width2;
HXLINE(1021)									marginRight = spaceWidth;
            								}
            							}
HXLINE(1025)							offsetX = (offsetX + (widthValue + spaceWidth));
            						}
HXLINE(1029)						textIndex = (spaceIndex + (int)1);
HXLINE(1031)						previousSpaceIndex = spaceIndex;
HXLINE(1032)						HX_VARI( int,nextSpaceIndex) = this->text.indexOf(HX_(" ",20,00,00,00),(previousSpaceIndex + (int)1));
HXLINE(1036)						bool _hx_tmp12;
HXDLIN(1036)						bool _hx_tmp13;
HXDLIN(1036)						if ((previousSpaceIndex != breakIndex)) {
HXLINE(1036)							_hx_tmp13 = (breakIndex > (int)-1);
            						}
            						else {
HXLINE(1036)							_hx_tmp13 = false;
            						}
HXDLIN(1036)						if (_hx_tmp13) {
HXLINE(1036)							if ((nextSpaceIndex != (int)-1)) {
HXLINE(1036)								_hx_tmp12 = (nextSpaceIndex > breakIndex);
            							}
            							else {
HXLINE(1036)								_hx_tmp12 = true;
            							}
            						}
            						else {
HXLINE(1036)							_hx_tmp12 = false;
            						}
HXDLIN(1036)						if (_hx_tmp12) {
HXLINE(1038)							spaceIndex = breakIndex;
            						}
            						else {
HXLINE(1042)							if ((breakIndex == previousSpaceIndex)) {
HXLINE(1044)								textIndex = breakIndex;
            							}
HXLINE(1048)							spaceIndex = nextSpaceIndex;
            						}
HXLINE(1052)						if ((formatRange->end <= previousSpaceIndex)) {
HXLINE(1054)							layoutGroup = null();
HXLINE(1055)							if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1055)								rangeIndex = (rangeIndex + (int)1);
HXDLIN(1055)								formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1055)								currentFormat->_hx___merge(formatRange->format);
HXDLIN(1055)								font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1055)								if (hx::IsNotNull( font )) {
HXLINE(1055)									HX_VARI_NAME( int,ascent5,"ascent") = font->get_ascender();
HXDLIN(1055)									Float ascent6 = ((Float)ascent5 / (Float)font->get_unitsPerEM());
HXDLIN(1055)									ascent = (ascent6 * currentFormat->size);
HXDLIN(1055)									HX_VARI_NAME( int,descent5,"descent") = font->get_descender();
HXDLIN(1055)									Float descent6 = ((Float)descent5 / (Float)font->get_unitsPerEM());
HXDLIN(1055)									descent = ::Math_obj::abs((descent6 * currentFormat->size));
HXDLIN(1055)									leading = currentFormat->leading;
HXDLIN(1055)									heightValue = ((ascent + descent) + leading);
            								}
            								else {
HXLINE(1055)									ascent = currentFormat->size;
HXDLIN(1055)									descent = (currentFormat->size * ((Float)0.185));
HXDLIN(1055)									leading = currentFormat->leading;
HXDLIN(1055)									heightValue = ((ascent + descent) + leading);
            								}
            							}
            						}
HXLINE(1059)						bool _hx_tmp14;
HXDLIN(1059)						bool _hx_tmp15;
HXDLIN(1059)						bool _hx_tmp16;
HXDLIN(1059)						bool _hx_tmp17;
HXDLIN(1059)						if ((spaceIndex > breakIndex)) {
HXLINE(1059)							_hx_tmp17 = (breakIndex > (int)-1);
            						}
            						else {
HXLINE(1059)							_hx_tmp17 = false;
            						}
HXDLIN(1059)						if (!(_hx_tmp17)) {
HXLINE(1059)							_hx_tmp16 = (textIndex > this->text.length);
            						}
            						else {
HXLINE(1059)							_hx_tmp16 = true;
            						}
HXDLIN(1059)						if (!(_hx_tmp16)) {
HXLINE(1059)							_hx_tmp15 = (spaceIndex > formatRange->end);
            						}
            						else {
HXLINE(1059)							_hx_tmp15 = true;
            						}
HXDLIN(1059)						if (!(_hx_tmp15)) {
HXLINE(1059)							if ((spaceIndex == (int)-1)) {
HXLINE(1059)								_hx_tmp14 = (breakIndex > (int)-1);
            							}
            							else {
HXLINE(1059)								_hx_tmp14 = false;
            							}
            						}
            						else {
HXLINE(1059)							_hx_tmp14 = true;
            						}
HXDLIN(1059)						if (_hx_tmp14) {
HXLINE(1061)							goto _hx_goto_11;
            						}
            					}
            					_hx_goto_11:;
            				}
            				else {
HXLINE(1069)					if ((textIndex > formatRange->end)) {
HXLINE(1071)						goto _hx_goto_8;
            					}
            					else {
HXLINE(1073)						bool _hx_tmp18;
HXDLIN(1073)						if ((textIndex >= formatRange->end)) {
HXLINE(1073)							_hx_tmp18 = (textIndex == this->text.length);
            						}
            						else {
HXLINE(1073)							_hx_tmp18 = true;
            						}
HXDLIN(1073)						if (_hx_tmp18) {
HXLINE(1075)							if (hx::IsNull( layoutGroup )) {
HXLINE(1077)								layoutGroup =  ::openfl::_internal::text::TextLayoutGroup_obj::__alloc( HX_CTX ,formatRange->format,textIndex,formatRange->end);
HXLINE(1078)								::String text3 = this->text;
HXDLIN(1078)								int endIndex = formatRange->end;
HXDLIN(1078)								HX_VARI_NAME( ::Array< Float >,advances6,"advances") = ::Array_obj< Float >::__new(0);
HXDLIN(1078)								if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1078)									_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            								}
HXDLIN(1078)								_gthis->_hx___textLayout->set_text(null());
HXDLIN(1078)								_gthis->_hx___textLayout->set_font(font);
HXDLIN(1078)								if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1078)									_gthis->_hx___textLayout->set_size(formatRange->format->size);
            								}
HXDLIN(1078)								HX_VARI_NAME(  ::lime::text::TextLayout,_gthis4,"_gthis") = _gthis->_hx___textLayout;
HXDLIN(1078)								_gthis4->set_text(text3.substring(textIndex,endIndex));
HXDLIN(1078)								{
HXLINE(1078)									HX_VARI_NAME( int,_g8,"_g") = (int)0;
HXDLIN(1078)									HX_VARI_NAME( ::Array< ::Dynamic>,_g14,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN(1078)									while((_g8 < _g14->length)){
HXLINE(1078)										HX_VARI_NAME(  ::lime::text::GlyphPosition,position3,"position") = _g14->__get(_g8).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1078)										_g8 = (_g8 + (int)1);
HXDLIN(1078)										advances6->push(position3->advance->x);
            									}
            								}
HXDLIN(1078)								layoutGroup->advances = advances6;
HXLINE(1079)								layoutGroup->offsetX = offsetX;
HXLINE(1080)								layoutGroup->ascent = ascent;
HXLINE(1081)								layoutGroup->descent = descent;
HXLINE(1082)								layoutGroup->leading = leading;
HXLINE(1083)								layoutGroup->lineIndex = lineIndex;
HXLINE(1084)								layoutGroup->offsetY = offsetY;
HXLINE(1085)								HX_VARI_NAME( ::Array< Float >,advances7,"advances") = layoutGroup->advances;
HXDLIN(1085)								HX_VARI_NAME( Float,width3,"width") = ((Float)0.0);
HXDLIN(1085)								{
HXLINE(1085)									HX_VARI_NAME( int,_g9,"_g") = (int)0;
HXDLIN(1085)									while((_g9 < advances7->length)){
HXLINE(1085)										HX_VARI_NAME( Float,advance3,"advance") = advances7->__get(_g9);
HXDLIN(1085)										_g9 = (_g9 + (int)1);
HXDLIN(1085)										width3 = (width3 + advance3);
            									}
            								}
HXDLIN(1085)								layoutGroup->width = width3;
HXLINE(1086)								layoutGroup->height = heightValue;
HXLINE(1087)								this->layoutGroups->push(layoutGroup);
HXLINE(1089)								offsetX = (offsetX + layoutGroup->width);
            							}
            							else {
HXLINE(1091)								if ((layoutGroup->startIndex != layoutGroup->endIndex)) {
HXLINE(1093)									::String text4 = this->text;
HXDLIN(1093)									int endIndex1 = formatRange->end;
HXDLIN(1093)									HX_VARI_NAME( ::Array< Float >,advances8,"advances") = ::Array_obj< Float >::__new(0);
HXDLIN(1093)									if (hx::IsNull( _gthis->_hx___textLayout )) {
HXLINE(1093)										_gthis->_hx___textLayout =  ::lime::text::TextLayout_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            									}
HXDLIN(1093)									_gthis->_hx___textLayout->set_text(null());
HXDLIN(1093)									_gthis->_hx___textLayout->set_font(font);
HXDLIN(1093)									if (hx::IsNotNull( formatRange->format->size )) {
HXLINE(1093)										_gthis->_hx___textLayout->set_size(formatRange->format->size);
            									}
HXDLIN(1093)									HX_VARI_NAME(  ::lime::text::TextLayout,_gthis5,"_gthis") = _gthis->_hx___textLayout;
HXDLIN(1093)									_gthis5->set_text(text4.substring(textIndex,endIndex1));
HXDLIN(1093)									{
HXLINE(1093)										HX_VARI_NAME( int,_g10,"_g") = (int)0;
HXDLIN(1093)										HX_VARI_NAME( ::Array< ::Dynamic>,_g15,"_g1") = _gthis->_hx___textLayout->get_positions();
HXDLIN(1093)										while((_g10 < _g15->length)){
HXLINE(1093)											HX_VARI_NAME(  ::lime::text::GlyphPosition,position4,"position") = _g15->__get(_g10).StaticCast<  ::lime::text::GlyphPosition >();
HXDLIN(1093)											_g10 = (_g10 + (int)1);
HXDLIN(1093)											advances8->push(position4->advance->x);
            										}
            									}
HXDLIN(1093)									advances = advances8;
HXLINE(1094)									HX_VARI_NAME( Float,width4,"width") = ((Float)0.0);
HXDLIN(1094)									{
HXLINE(1094)										HX_VARI_NAME( int,_g16,"_g") = (int)0;
HXDLIN(1094)										while((_g16 < advances8->length)){
HXLINE(1094)											HX_VARI_NAME( Float,advance4,"advance") = advances8->__get(_g16);
HXDLIN(1094)											_g16 = (_g16 + (int)1);
HXDLIN(1094)											width4 = (width4 + advance4);
            										}
            									}
HXDLIN(1094)									widthValue = width4;
HXLINE(1095)									layoutGroup->advances = layoutGroup->advances->concat(advances8);
HXLINE(1096)									 ::openfl::_internal::text::TextLayoutGroup layoutGroup3 = layoutGroup;
HXDLIN(1096)									layoutGroup3->width = (layoutGroup3->width + (marginRight + widthValue));
HXLINE(1097)									layoutGroup->endIndex = formatRange->end;
HXLINE(1099)									offsetX = (offsetX + widthValue);
            								}
            							}
HXLINE(1103)							textIndex = formatRange->end;
            						}
            					}
HXLINE(1107)					if ((rangeIndex < (::openfl::_Vector::IVector_obj::get_length(_gthis->textFormatRanges) - (int)1))) {
HXLINE(1107)						rangeIndex = (rangeIndex + (int)1);
HXDLIN(1107)						formatRange = ( ( ::openfl::_internal::text::TextFormatRange)(::openfl::_Vector::IVector_obj::get(_gthis->textFormatRanges,rangeIndex)) );
HXDLIN(1107)						currentFormat->_hx___merge(formatRange->format);
HXDLIN(1107)						font = ::openfl::_internal::text::TextEngine_obj::getFontInstance(currentFormat);
HXDLIN(1107)						if (hx::IsNotNull( font )) {
HXLINE(1107)							HX_VARI_NAME( int,ascent7,"ascent") = font->get_ascender();
HXDLIN(1107)							Float ascent8 = ((Float)ascent7 / (Float)font->get_unitsPerEM());
HXDLIN(1107)							ascent = (ascent8 * currentFormat->size);
HXDLIN(1107)							HX_VARI_NAME( int,descent7,"descent") = font->get_descender();
HXDLIN(1107)							Float descent8 = ((Float)descent7 / (Float)font->get_unitsPerEM());
HXDLIN(1107)							descent = ::Math_obj::abs((descent8 * currentFormat->size));
HXDLIN(1107)							leading = currentFormat->leading;
HXDLIN(1107)							heightValue = ((ascent + descent) + leading);
            						}
            						else {
HXLINE(1107)							ascent = currentFormat->size;
HXDLIN(1107)							descent = (currentFormat->size * ((Float)0.185));
HXDLIN(1107)							leading = currentFormat->leading;
HXDLIN(1107)							heightValue = ((ascent + descent) + leading);
            						}
            					}
HXLINE(1109)					if ((textIndex == formatRange->end)) {
HXLINE(1112)						goto _hx_goto_8;
            					}
            				}
            			}
            		}
            		_hx_goto_8:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,getLayoutGroups,(void))

void TextEngine_obj::setTextAlignment(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1123_setTextAlignment)
            	HX_STACK_THIS(this)
HXLINE(1125)		HX_VARI( int,lineIndex) = (int)-1;
HXLINE(1126)		HX_VARI( Float,offsetX) = ((Float)0.0);
HXLINE(1127)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,group);
HXDLIN(1127)		HX_VAR( int,lineLength);
HXLINE(1129)		{
HXLINE(1129)			HX_VARI( int,_g1) = (int)0;
HXDLIN(1129)			HX_VARI( int,_g) = this->layoutGroups->get_length();
HXDLIN(1129)			while((_g1 < _g)){
HXLINE(1129)				_g1 = (_g1 + (int)1);
HXDLIN(1129)				HX_VARI( int,i) = (_g1 - (int)1);
HXLINE(1131)				group = this->layoutGroups->get(i).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE(1133)				if ((group->lineIndex != lineIndex)) {
HXLINE(1135)					lineIndex = group->lineIndex;
HXLINE(1137)					 ::Dynamic _hx_switch_0 = group->format->align;
            					if (  (_hx_switch_0==(int)0) ){
HXLINE(1141)						Float _hx_tmp = ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) );
HXDLIN(1141)						if ((_hx_tmp < (this->width - (int)4))) {
HXLINE(1143)							HX_VARI_NAME( Float,offsetX1,"offsetX") = (this->width - (int)4);
HXDLIN(1143)							offsetX = ::Math_obj::round(((Float)(offsetX1 - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )) / (Float)(int)2));
            						}
            						else {
HXLINE(1147)							offsetX = (int)0;
            						}
HXLINE(1141)						goto _hx_goto_24;
            					}
            					if (  (_hx_switch_0==(int)2) ){
HXLINE(1165)						Float _hx_tmp1 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) );
HXDLIN(1165)						if ((_hx_tmp1 < (this->width - (int)4))) {
HXLINE(1167)							lineLength = (int)1;
HXLINE(1169)							{
HXLINE(1169)								HX_VARI( int,_g3) = (i + (int)1);
HXDLIN(1169)								HX_VARI( int,_g2) = ::openfl::_Vector::IVector_obj::get_length(this->layoutGroups);
HXDLIN(1169)								while((_g3 < _g2)){
HXLINE(1169)									_g3 = (_g3 + (int)1);
HXLINE(1171)									if ((( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(_g3 - (int)1))) )->lineIndex == lineIndex)) {
HXLINE(1173)										lineLength = (lineLength + (int)1);
            									}
            									else {
HXLINE(1177)										goto _hx_goto_25;
            									}
            								}
            								_hx_goto_25:;
            							}
HXLINE(1183)							if ((lineLength > (int)1)) {
HXLINE(1185)								group = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,((i + lineLength) - (int)1))) );
HXLINE(1187)								HX_VARI( ::String,endChar) = this->text.charAt(group->endIndex);
HXLINE(1188)								bool _hx_tmp2;
HXDLIN(1188)								bool _hx_tmp3;
HXDLIN(1188)								if ((group->endIndex < this->text.length)) {
HXLINE(1188)									_hx_tmp3 = (endChar != HX_("\n",0a,00,00,00));
            								}
            								else {
HXLINE(1188)									_hx_tmp3 = false;
            								}
HXDLIN(1188)								if (_hx_tmp3) {
HXLINE(1188)									_hx_tmp2 = (endChar != HX_("\r",0d,00,00,00));
            								}
            								else {
HXLINE(1188)									_hx_tmp2 = false;
            								}
HXDLIN(1188)								if (_hx_tmp2) {
HXLINE(1190)									HX_VARI_NAME( Float,offsetX2,"offsetX") = (this->width - (int)4);
HXDLIN(1190)									offsetX = ((Float)(offsetX2 - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )) / (Float)(lineLength - (int)1));
HXLINE(1192)									{
HXLINE(1192)										HX_VARI_NAME( int,_g31,"_g3") = (int)1;
HXDLIN(1192)										HX_VARI_NAME( int,_g21,"_g2") = lineLength;
HXDLIN(1192)										while((_g31 < _g21)){
HXLINE(1192)											_g31 = (_g31 + (int)1);
HXDLIN(1192)											HX_VARI( int,j) = (_g31 - (int)1);
HXLINE(1194)											 ::openfl::_internal::text::TextLayoutGroup _hx_tmp4 = ( ( ::openfl::_internal::text::TextLayoutGroup)(::openfl::_Vector::IVector_obj::get(this->layoutGroups,(i + j))) );
HXDLIN(1194)											_hx_tmp4->offsetX = (_hx_tmp4->offsetX + (offsetX * j));
            										}
            									}
            								}
            							}
            						}
HXLINE(1204)						offsetX = (int)0;
HXLINE(1163)						goto _hx_goto_24;
            					}
            					if (  (_hx_switch_0==(int)4) ){
HXLINE(1153)						Float _hx_tmp5 = ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) );
HXDLIN(1153)						if ((_hx_tmp5 < (this->width - (int)4))) {
HXLINE(1155)							HX_VARI_NAME( Float,offsetX3,"offsetX") = (this->width - (int)4);
HXDLIN(1155)							offsetX = ::Math_obj::round((offsetX3 - ( (Float)(::openfl::_Vector::IVector_obj::get(this->lineWidths,lineIndex)) )));
            						}
            						else {
HXLINE(1159)							offsetX = (int)0;
            						}
HXLINE(1153)						goto _hx_goto_24;
            					}
            					/* default */{
HXLINE(1208)						offsetX = (int)0;
            					}
            					_hx_goto_24:;
            				}
HXLINE(1214)				if ((offsetX > (int)0)) {
HXLINE(1216)					 ::openfl::_internal::text::TextLayoutGroup group1 = group;
HXDLIN(1216)					group1->offsetX = (group1->offsetX + offsetX);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,setTextAlignment,(void))

void TextEngine_obj::update(){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_1225_update)
            	HX_STACK_THIS(this)
HXLINE(1227)		bool _hx_tmp;
HXDLIN(1227)		bool _hx_tmp1;
HXDLIN(1227)		if (hx::IsNotNull( this->text )) {
HXLINE(1227)			if (!(this->multiline)) {
HXLINE(1227)				_hx_tmp1 = (::StringTools_obj::trim(this->text) == HX_("",00,00,00,00));
            			}
            			else {
HXLINE(1227)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE(1227)			_hx_tmp1 = true;
            		}
HXDLIN(1227)		if (!(_hx_tmp1)) {
HXLINE(1227)			_hx_tmp = (this->textFormatRanges->get_length() == (int)0);
            		}
            		else {
HXLINE(1227)			_hx_tmp = true;
            		}
HXDLIN(1227)		if (_hx_tmp) {
HXLINE(1229)			this->lineAscents->set_length((int)0);
HXLINE(1230)			this->lineBreaks->set_length((int)0);
HXLINE(1231)			this->lineDescents->set_length((int)0);
HXLINE(1232)			this->lineLeadings->set_length((int)0);
HXLINE(1233)			this->lineHeights->set_length((int)0);
HXLINE(1234)			this->lineWidths->set_length((int)0);
HXLINE(1235)			this->layoutGroups->set_length((int)0);
HXLINE(1237)			this->textWidth = (int)0;
HXLINE(1238)			this->textHeight = (int)0;
HXLINE(1239)			this->numLines = (int)1;
HXLINE(1240)			this->maxScrollH = (int)0;
HXLINE(1241)			this->maxScrollV = (int)1;
HXLINE(1242)			this->bottomScrollV = (int)1;
            		}
            		else {
HXLINE(1246)			this->getLayoutGroups();
HXLINE(1247)			this->getLineMeasurements();
HXLINE(1248)			this->setTextAlignment();
            		}
HXLINE(1252)		this->getBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextEngine_obj,update,(void))

int TextEngine_obj::UTF8_TAB;

int TextEngine_obj::UTF8_ENDLINE;

int TextEngine_obj::UTF8_SPACE;

int TextEngine_obj::UTF8_HYPHEN;

 ::haxe::ds::StringMap TextEngine_obj::_hx___defaultFonts;

 ::openfl::text::Font TextEngine_obj::findFont(::String name){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_169_findFont)
            	HX_STACK_ARG(name,"name")
HXLINE( 173)		{
HXLINE( 173)			HX_VARI( int,_g) = (int)0;
HXDLIN( 173)			HX_VARI( ::Array< ::Dynamic>,_g1) = ::openfl::text::Font_obj::_hx___registeredFonts;
HXDLIN( 173)			while((_g < _g1->length)){
HXLINE( 173)				HX_VARI(  ::openfl::text::Font,registeredFont) = _g1->__get(_g).StaticCast<  ::openfl::text::Font >();
HXDLIN( 173)				_g = (_g + (int)1);
HXLINE( 175)				if (hx::IsNull( registeredFont )) {
HXLINE( 175)					continue;
            				}
HXLINE( 177)				bool _hx_tmp;
HXDLIN( 177)				if ((registeredFont->name != name)) {
HXLINE( 177)					if (hx::IsNotNull( registeredFont->_hx___fontPath )) {
HXLINE( 177)						if ((registeredFont->_hx___fontPath != name)) {
HXLINE( 177)							_hx_tmp = (registeredFont->_hx___fontPathWithoutDirectory == name);
            						}
            						else {
HXLINE( 177)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE( 177)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 177)					_hx_tmp = true;
            				}
HXDLIN( 177)				if (_hx_tmp) {
HXLINE( 179)					return registeredFont;
            				}
            			}
            		}
HXLINE( 185)		HX_VARI(  ::openfl::text::Font,font) = ::openfl::text::Font_obj::fromFile(name);
HXLINE( 187)		if (hx::IsNotNull( font )) {
HXLINE( 189)			::openfl::text::Font_obj::_hx___registeredFonts->push(font);
HXLINE( 190)			return font;
            		}
HXLINE( 196)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,findFont,return )

Float TextEngine_obj::getFormatHeight( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_211_getFormatHeight)
            	HX_STACK_ARG(format,"format")
HXLINE( 213)		HX_VAR( Float,ascent);
HXDLIN( 213)		HX_VAR( Float,descent);
HXDLIN( 213)		HX_VAR(  ::Dynamic,leading);
HXLINE( 225)		HX_VARI(  ::openfl::text::Font,font) = ::openfl::_internal::text::TextEngine_obj::getFontInstance(format);
HXLINE( 227)		if (hx::IsNotNull( font )) {
HXLINE( 229)			HX_VARI_NAME( int,ascent1,"ascent") = font->get_ascender();
HXDLIN( 229)			Float ascent2 = ((Float)ascent1 / (Float)font->get_unitsPerEM());
HXDLIN( 229)			ascent = (ascent2 * format->size);
HXLINE( 230)			HX_VARI_NAME( int,descent1,"descent") = font->get_descender();
HXDLIN( 230)			Float descent2 = ((Float)descent1 / (Float)font->get_unitsPerEM());
HXDLIN( 230)			descent = ::Math_obj::abs((descent2 * format->size));
HXLINE( 231)			leading = format->leading;
            		}
            		else {
HXLINE( 235)			ascent = format->size;
HXLINE( 236)			descent = (format->size * ((Float)0.185));
HXLINE( 237)			leading = format->leading;
            		}
HXLINE( 243)		return ((ascent + descent) + leading);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFormatHeight,return )

::String TextEngine_obj::getFont( ::openfl::text::TextFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_248_getFont)
            	HX_STACK_ARG(format,"format")
HXLINE( 250)		HX_VAR( ::String,font);
HXDLIN( 250)		if (format->italic) {
HXLINE( 250)			font = HX_("italic ",30,e3,44,91);
            		}
            		else {
HXLINE( 250)			font = HX_("normal ",19,70,da,2b);
            		}
HXLINE( 251)		font = (font + HX_("normal ",19,70,da,2b));
HXLINE( 252)		::String font1;
HXDLIN( 252)		if (format->bold) {
HXLINE( 252)			font1 = HX_("bold ",fb,d2,f5,b6);
            		}
            		else {
HXLINE( 252)			font1 = HX_("normal ",19,70,da,2b);
            		}
HXDLIN( 252)		font = (font + font1);
HXLINE( 253)		font = (font + (format->size + HX_("px",08,62,00,00)));
HXLINE( 254)		font = (font + ((HX_("/",2f,00,00,00) + ((format->size + format->leading) + (int)6)) + HX_("px ",18,65,55,00)));
HXLINE( 256)		::String font2;
HXDLIN( 256)		::String _hx_switch_0 = format->font;
            		if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 256)			font2 = HX_("sans-serif",c3,60,fb,08);
HXDLIN( 256)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 256)			font2 = HX_("serif",7d,1f,2e,7a);
HXDLIN( 256)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 256)			font2 = HX_("monospace",c3,d1,e5,5e);
HXDLIN( 256)			goto _hx_goto_32;
            		}
            		/* default */{
HXLINE( 256)			font2 = ((HX_("'",27,00,00,00) +  ::EReg_obj::__alloc( HX_CTX ,HX_("^[\\s'\"]+(.*)[\\s'\"]+$",eb,e4,eb,f5),HX_("",00,00,00,00))->replace(format->font,HX_("$1",8d,1f,00,00))) + HX_("'",27,00,00,00));
            		}
            		_hx_goto_32:;
HXDLIN( 256)		font = (font + (HX_("",00,00,00,00) + font2));
HXLINE( 265)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFont,return )

 ::openfl::text::Font TextEngine_obj::getFontInstance( ::openfl::text::TextFormat format){
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_270_getFontInstance)
            	HX_STACK_ARG(format,"format")
HXLINE( 274)		HX_VARI(  ::openfl::text::Font,instance) = null();
HXLINE( 275)		HX_VARI( ::Array< ::String >,fontList) = null();
HXLINE( 277)		bool _hx_tmp;
HXDLIN( 277)		if (hx::IsNotNull( format )) {
HXLINE( 277)			_hx_tmp = hx::IsNotNull( format->font );
            		}
            		else {
HXLINE( 277)			_hx_tmp = false;
            		}
HXDLIN( 277)		if (_hx_tmp) {
HXLINE( 279)			if (::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->exists(format->font)) {
HXLINE( 281)				return ::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->get(format->font).StaticCast<  ::openfl::text::Font >();
            			}
HXLINE( 285)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(format->font);
HXLINE( 286)			if (hx::IsNotNull( instance )) {
HXLINE( 286)				return instance;
            			}
HXLINE( 288)			HX_VARI( ::String,systemFontDirectory) = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 290)			::String _hx_switch_0 = format->font;
            			if (  (_hx_switch_0==HX_("_sans",32,a0,5e,ff)) ){
HXLINE( 295)				if (format->bold) {
HXLINE( 297)					if (format->italic) {
HXLINE( 299)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbi.ttf",73,0e,91,06)));
            					}
            					else {
HXLINE( 303)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arialbd.ttf",ee,27,90,25)));
            					}
            				}
            				else {
HXLINE( 309)					if (format->italic) {
HXLINE( 311)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/ariali.ttf",2d,c9,3e,6e)));
            					}
            					else {
HXLINE( 315)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/arial.ttf",2c,34,8e,d8)));
            					}
            				}
HXLINE( 295)				goto _hx_goto_34;
            			}
            			if (  (_hx_switch_0==HX_("_serif",be,66,15,76)) ){
HXLINE( 330)				goto _hx_goto_34;
            			}
            			if (  (_hx_switch_0==HX_("_typewriter",0c,5e,52,94)) ){
HXLINE( 337)				if (format->bold) {
HXLINE( 339)					if (format->italic) {
HXLINE( 341)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbi.ttf",77,1e,b8,e7)));
            					}
            					else {
HXLINE( 345)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/courbd.ttf",f2,37,b7,06)));
            					}
            				}
            				else {
HXLINE( 351)					if (format->italic) {
HXLINE( 353)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/couri.ttf",a9,a5,b8,d7)));
            					}
            					else {
HXLINE( 357)						fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory + HX_("/cour.ttf",30,7b,d2,6a)));
            					}
            				}
HXLINE( 337)				goto _hx_goto_34;
            			}
            			/* default */{
HXLINE( 374)				fontList = ::Array_obj< ::String >::__new(1)->init(0,((systemFontDirectory + HX_("/",2f,00,00,00)) + format->font));
            			}
            			_hx_goto_34:;
HXLINE( 391)			if (hx::IsNotNull( fontList )) {
HXLINE( 393)				HX_VARI( int,_g1) = (int)0;
HXDLIN( 393)				while((_g1 < fontList->length)){
HXLINE( 393)					HX_VARI( ::String,font) = fontList->__get(_g1);
HXDLIN( 393)					_g1 = (_g1 + (int)1);
HXLINE( 395)					instance = ::openfl::_internal::text::TextEngine_obj::findFont(font);
HXLINE( 397)					if (hx::IsNotNull( instance )) {
HXLINE( 399)						::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 400)						return instance;
            					}
            				}
            			}
HXLINE( 408)			instance = ::openfl::_internal::text::TextEngine_obj::findFont(HX_("_serif",be,66,15,76));
HXLINE( 409)			if (hx::IsNotNull( instance )) {
HXLINE( 409)				return instance;
            			}
            		}
HXLINE( 413)		HX_VARI_NAME( ::String,systemFontDirectory1,"systemFontDirectory") = ::lime::_hx_system::System_obj::get_fontsDirectory();
HXLINE( 416)		if (format->bold) {
HXLINE( 418)			if (format->italic) {
HXLINE( 420)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbi.ttf",36,79,1a,28)));
            			}
            			else {
HXLINE( 424)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesbd.ttf",b1,92,19,47)));
            			}
            		}
            		else {
HXLINE( 430)			if (format->italic) {
HXLINE( 432)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/timesi.ttf",ca,27,e8,a0)));
            			}
            			else {
HXLINE( 436)				fontList = ::Array_obj< ::String >::__new(1)->init(0,(systemFontDirectory1 + HX_("/times.ttf",2f,58,44,c5)));
            			}
            		}
HXLINE( 453)		{
HXLINE( 453)			HX_VARI( int,_g) = (int)0;
HXDLIN( 453)			while((_g < fontList->length)){
HXLINE( 453)				HX_VARI_NAME( ::String,font1,"font") = fontList->__get(_g);
HXDLIN( 453)				_g = (_g + (int)1);
HXLINE( 455)				instance = ::openfl::_internal::text::TextEngine_obj::findFont(font1);
HXLINE( 457)				if (hx::IsNotNull( instance )) {
HXLINE( 459)					::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,instance);
HXLINE( 460)					return instance;
            				}
            			}
            		}
HXLINE( 466)		::openfl::_internal::text::TextEngine_obj::_hx___defaultFonts->set(format->font,null());
HXLINE( 470)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TextEngine_obj,getFontInstance,return )


hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__new( ::openfl::text::TextField textField) {
	hx::ObjectPtr< TextEngine_obj > __this = new TextEngine_obj();
	__this->__construct(textField);
	return __this;
}

hx::ObjectPtr< TextEngine_obj > TextEngine_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::text::TextField textField) {
	TextEngine_obj *__this = (TextEngine_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEngine_obj), true, "openfl._internal.text.TextEngine"));
	*(void **)__this = TextEngine_obj::_hx_vtable;
	__this->__construct(textField);
	return __this;
}

TextEngine_obj::TextEngine_obj()
{
}

void TextEngine_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextEngine);
	HX_MARK_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_MARK_MEMBER_NAME(autoSize,"autoSize");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(border,"border");
	HX_MARK_MEMBER_NAME(borderColor,"borderColor");
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(bounds,"bounds");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(embedFonts,"embedFonts");
	HX_MARK_MEMBER_NAME(gridFitType,"gridFitType");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_MARK_MEMBER_NAME(lineAscents,"lineAscents");
	HX_MARK_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_MARK_MEMBER_NAME(lineDescents,"lineDescents");
	HX_MARK_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_MARK_MEMBER_NAME(lineHeights,"lineHeights");
	HX_MARK_MEMBER_NAME(lineWidths,"lineWidths");
	HX_MARK_MEMBER_NAME(maxChars,"maxChars");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(multiline,"multiline");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(restrict,"restrict");
	HX_MARK_MEMBER_NAME(scrollH,"scrollH");
	HX_MARK_MEMBER_NAME(scrollV,"scrollV");
	HX_MARK_MEMBER_NAME(selectable,"selectable");
	HX_MARK_MEMBER_NAME(sharpness,"sharpness");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(wordWrap,"wordWrap");
	HX_MARK_MEMBER_NAME(textField,"textField");
	HX_MARK_MEMBER_NAME(_hx___cursorPosition,"__cursorPosition");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_MARK_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_MARK_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_MARK_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_MARK_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_MARK_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_MARK_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_MARK_MEMBER_NAME(_hx___font,"__font");
	HX_MARK_END_CLASS();
}

void TextEngine_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(antiAliasType,"antiAliasType");
	HX_VISIT_MEMBER_NAME(autoSize,"autoSize");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(border,"border");
	HX_VISIT_MEMBER_NAME(borderColor,"borderColor");
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(bounds,"bounds");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(embedFonts,"embedFonts");
	HX_VISIT_MEMBER_NAME(gridFitType,"gridFitType");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(layoutGroups,"layoutGroups");
	HX_VISIT_MEMBER_NAME(lineAscents,"lineAscents");
	HX_VISIT_MEMBER_NAME(lineBreaks,"lineBreaks");
	HX_VISIT_MEMBER_NAME(lineDescents,"lineDescents");
	HX_VISIT_MEMBER_NAME(lineLeadings,"lineLeadings");
	HX_VISIT_MEMBER_NAME(lineHeights,"lineHeights");
	HX_VISIT_MEMBER_NAME(lineWidths,"lineWidths");
	HX_VISIT_MEMBER_NAME(maxChars,"maxChars");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(multiline,"multiline");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(restrict,"restrict");
	HX_VISIT_MEMBER_NAME(scrollH,"scrollH");
	HX_VISIT_MEMBER_NAME(scrollV,"scrollV");
	HX_VISIT_MEMBER_NAME(selectable,"selectable");
	HX_VISIT_MEMBER_NAME(sharpness,"sharpness");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textFormatRanges,"textFormatRanges");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(wordWrap,"wordWrap");
	HX_VISIT_MEMBER_NAME(textField,"textField");
	HX_VISIT_MEMBER_NAME(_hx___cursorPosition,"__cursorPosition");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___hasFocus,"__hasFocus");
	HX_VISIT_MEMBER_NAME(_hx___isKeyDown,"__isKeyDown");
	HX_VISIT_MEMBER_NAME(_hx___measuredHeight,"__measuredHeight");
	HX_VISIT_MEMBER_NAME(_hx___measuredWidth,"__measuredWidth");
	HX_VISIT_MEMBER_NAME(_hx___selectionStart,"__selectionStart");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	HX_VISIT_MEMBER_NAME(_hx___textLayout,"__textLayout");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___useIntAdvances,"__useIntAdvances");
	HX_VISIT_MEMBER_NAME(_hx___cairoFont,"__cairoFont");
	HX_VISIT_MEMBER_NAME(_hx___font,"__font");
}

hx::Val TextEngine_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return hx::Val( text); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { return hx::Val( border); }
		if (HX_FIELD_EQ(inName,"bounds") ) { return hx::Val( bounds); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"__font") ) { return hx::Val( _hx___font); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { return hx::Val( scrollH); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { return hx::Val( scrollV); }
		if (HX_FIELD_EQ(inName,"getLine") ) { return hx::Val( getLine_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { return hx::Val( autoSize); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { return hx::Val( maxChars); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( numLines); }
		if (HX_FIELD_EQ(inName,"restrict") ) { return hx::Val( restrict); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { return hx::Val( wordWrap); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { return hx::Val( multiline); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { return hx::Val( sharpness); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( textWidth); }
		if (HX_FIELD_EQ(inName,"textField") ) { return hx::Val( textField); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( caretIndex); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { return hx::Val( embedFonts); }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { return hx::Val( lineBreaks); }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { return hx::Val( lineWidths); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( maxScrollH); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( maxScrollV); }
		if (HX_FIELD_EQ(inName,"selectable") ) { return hx::Val( selectable); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( textHeight); }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { return hx::Val( _hx___hasFocus); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { return hx::Val( borderColor); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { return hx::Val( gridFitType); }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { return hx::Val( lineAscents); }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { return hx::Val( lineHeights); }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { return hx::Val( _hx___isKeyDown); }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { return hx::Val( _hx___cairoFont); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { return hx::Val( layoutGroups); }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { return hx::Val( lineDescents); }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { return hx::Val( lineLeadings); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat); }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { return hx::Val( _hx___textLayout); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { return hx::Val( antiAliasType); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( bottomScrollV); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor); }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { return hx::Val( _hx___measuredWidth); }
		if (HX_FIELD_EQ(inName,"getLayoutGroups") ) { return hx::Val( getLayoutGroups_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { return hx::Val( textFormatRanges); }
		if (HX_FIELD_EQ(inName,"__cursorPosition") ) { return hx::Val( _hx___cursorPosition); }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { return hx::Val( _hx___measuredHeight); }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { return hx::Val( _hx___selectionStart); }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { return hx::Val( _hx___useIntAdvances); }
		if (HX_FIELD_EQ(inName,"setTextAlignment") ) { return hx::Val( setTextAlignment_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getLineBreakIndex") ) { return hx::Val( getLineBreakIndex_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getLineMeasurements") ) { return hx::Val( getLineMeasurements_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextEngine_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"findFont") ) { outValue = findFont_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { outValue = _hx___defaultFonts; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getFormatHeight") ) { outValue = getFormatHeight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFontInstance") ) { outValue = getFontInstance_dyn(); return true; }
	}
	return false;
}

hx::Val TextEngine_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { border=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__font") ) { _hx___font=inValue.Cast<  ::openfl::text::Font >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { scrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollV") ) { scrollV=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { autoSize=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxChars") ) { maxChars=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { restrict=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { wordWrap=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { multiline=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sharpness") ) { sharpness=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textField") ) { textField=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { embedFonts=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineBreaks") ) { lineBreaks=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineWidths") ) { lineWidths=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { selectable=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__hasFocus") ) { _hx___hasFocus=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { borderColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { gridFitType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineAscents") ) { lineAscents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineHeights") ) { lineHeights=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isKeyDown") ) { _hx___isKeyDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairoFont") ) { _hx___cairoFont=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"layoutGroups") ) { layoutGroups=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineDescents") ) { lineDescents=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lineLeadings") ) { lineLeadings=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textLayout") ) { _hx___textLayout=inValue.Cast<  ::lime::text::TextLayout >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { antiAliasType=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredWidth") ) { _hx___measuredWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"textFormatRanges") ) { textFormatRanges=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorPosition") ) { _hx___cursorPosition=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__measuredHeight") ) { _hx___measuredHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__selectionStart") ) { _hx___selectionStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__useIntAdvances") ) { _hx___useIntAdvances=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextEngine_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"__defaultFonts") ) { _hx___defaultFonts=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void TextEngine_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"));
	outFields->push(HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"));
	outFields->push(HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"));
	outFields->push(HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"));
	outFields->push(HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"));
	outFields->push(HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"));
	outFields->push(HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"));
	outFields->push(HX_HCSTRING("__cursorPosition","\xbf","\x3c","\xe0","\x7d"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"));
	outFields->push(HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"));
	outFields->push(HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"));
	outFields->push(HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"));
	outFields->push(HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	outFields->push(HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"));
	outFields->push(HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"));
	outFields->push(HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextEngine_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,antiAliasType),HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,autoSize),HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,border),HX_HCSTRING("border","\xec","\x4c","\x1a","\x64")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,borderColor),HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextEngine_obj,bounds),HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,embedFonts),HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,gridFitType),HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,layoutGroups),HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineAscents),HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(TextEngine_obj,lineBreaks),HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineDescents),HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineLeadings),HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineHeights),HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(TextEngine_obj,lineWidths),HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxChars),HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,multiline),HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsString,(int)offsetof(TextEngine_obj,restrict),HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollH),HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,scrollV),HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,selectable),HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,sharpness),HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b")},
	{hx::fsString,(int)offsetof(TextEngine_obj,text),HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(TextEngine_obj,textFormatRanges),HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(TextEngine_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,wordWrap),HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(TextEngine_obj,textField),HX_HCSTRING("textField","\xcd","\x24","\x81","\x99")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___cursorPosition),HX_HCSTRING("__cursorPosition","\xbf","\x3c","\xe0","\x7d")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextEngine_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___hasFocus),HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___isKeyDown),HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredHeight),HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___measuredWidth),HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02")},
	{hx::fsInt,(int)offsetof(TextEngine_obj,_hx___selectionStart),HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43")},
	{hx::fsBool,(int)offsetof(TextEngine_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextEngine_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{hx::fsObject /*::lime::text::TextLayout*/ ,(int)offsetof(TextEngine_obj,_hx___textLayout),HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(TextEngine_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___useIntAdvances),HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(TextEngine_obj,_hx___cairoFont),HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28")},
	{hx::fsObject /*::openfl::text::Font*/ ,(int)offsetof(TextEngine_obj,_hx___font),HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextEngine_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_TAB,HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_ENDLINE,HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_SPACE,HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7")},
	{hx::fsInt,(void *) &TextEngine_obj::UTF8_HYPHEN,HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &TextEngine_obj::_hx___defaultFonts,HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextEngine_obj_sMemberFields[] = {
	HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"),
	HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"),
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"),
	HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"),
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"),
	HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("layoutGroups","\x9e","\xa2","\x6c","\x37"),
	HX_HCSTRING("lineAscents","\x45","\x0c","\xc2","\x3e"),
	HX_HCSTRING("lineBreaks","\xe8","\xfd","\x5b","\xea"),
	HX_HCSTRING("lineDescents","\x0d","\xad","\x64","\x49"),
	HX_HCSTRING("lineLeadings","\x01","\x23","\x97","\x76"),
	HX_HCSTRING("lineHeights","\x18","\x99","\x8e","\x3e"),
	HX_HCSTRING("lineWidths","\xc1","\x8a","\xa4","\x20"),
	HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"),
	HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"),
	HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"),
	HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"),
	HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textFormatRanges","\xfa","\x0e","\x49","\xa2"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"),
	HX_HCSTRING("textField","\xcd","\x24","\x81","\x99"),
	HX_HCSTRING("__cursorPosition","\xbf","\x3c","\xe0","\x7d"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__hasFocus","\x3e","\x1d","\x1a","\x34"),
	HX_HCSTRING("__isKeyDown","\xb7","\x2f","\x72","\xce"),
	HX_HCSTRING("__measuredHeight","\xed","\xb6","\x23","\x42"),
	HX_HCSTRING("__measuredWidth","\xc0","\x49","\xec","\x02"),
	HX_HCSTRING("__selectionStart","\x96","\xe3","\xb9","\x43"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("__textLayout","\x57","\xaa","\x3c","\xc8"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__useIntAdvances","\xd9","\x17","\x72","\x7d"),
	HX_HCSTRING("__cairoFont","\x57","\xe7","\xb5","\x28"),
	HX_HCSTRING("__font","\xef","\xc0","\xb8","\xf2"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getLine","\xaa","\xc7","\x35","\x1a"),
	HX_HCSTRING("getLineBreakIndex","\x1d","\x16","\x36","\x36"),
	HX_HCSTRING("getLineMeasurements","\xc1","\x9f","\x81","\x56"),
	HX_HCSTRING("getLayoutGroups","\x54","\xf8","\x56","\x5a"),
	HX_HCSTRING("setTextAlignment","\x74","\x0f","\x33","\x62"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void TextEngine_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_MARK_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_MARK_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextEngine_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextEngine_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_TAB,"UTF8_TAB");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_ENDLINE,"UTF8_ENDLINE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_SPACE,"UTF8_SPACE");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::UTF8_HYPHEN,"UTF8_HYPHEN");
	HX_VISIT_MEMBER_NAME(TextEngine_obj::_hx___defaultFonts,"__defaultFonts");
};

#endif

hx::Class TextEngine_obj::__mClass;

static ::String TextEngine_obj_sStaticFields[] = {
	HX_HCSTRING("UTF8_TAB","\x07","\xd5","\x41","\x1d"),
	HX_HCSTRING("UTF8_ENDLINE","\x01","\x29","\x41","\xcf"),
	HX_HCSTRING("UTF8_SPACE","\xf8","\x7b","\xa9","\xc7"),
	HX_HCSTRING("UTF8_HYPHEN","\x60","\x3c","\x3f","\xbf"),
	HX_HCSTRING("__defaultFonts","\x63","\x76","\xad","\xda"),
	HX_HCSTRING("findFont","\xa8","\x6a","\x54","\x96"),
	HX_HCSTRING("getFormatHeight","\x34","\x24","\x4b","\x62"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getFontInstance","\x3a","\x76","\x96","\x9e"),
	::String(null())
};

void TextEngine_obj::__register()
{
	hx::Object *dummy = new TextEngine_obj;
	TextEngine_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.text.TextEngine","\x60","\x7a","\x88","\xa0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextEngine_obj::__GetStatic;
	__mClass->mSetStaticField = &TextEngine_obj::__SetStatic;
	__mClass->mMarkFunc = TextEngine_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextEngine_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextEngine_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextEngine_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextEngine_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextEngine_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextEngine_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TextEngine_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_51_boot)
HXLINE(  51)		UTF8_TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_52_boot)
HXLINE(  52)		UTF8_ENDLINE = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_53_boot)
HXLINE(  53)		UTF8_SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_54_boot)
HXLINE(  54)		UTF8_HYPHEN = (int)45;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_fa7d844c6c93a0ee_56_boot)
HXLINE(  56)		_hx___defaultFonts =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace text
