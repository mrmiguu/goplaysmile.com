// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math_color__RGBA_RGBA_Impl_
#include <lime/math/color/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

namespace lime{
namespace math{
namespace color{
namespace _RGBA{

void RGBA_Impl__obj::__construct() { }

Dynamic RGBA_Impl__obj::__CreateEmpty() { return new RGBA_Impl__obj; }

hx::ObjectPtr< RGBA_Impl__obj > RGBA_Impl__obj::__new()
{
	hx::ObjectPtr< RGBA_Impl__obj > _hx_result = new RGBA_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic RGBA_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RGBA_Impl__obj > _hx_result = new RGBA_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

void RGBA_Impl__obj::__init__(){
            	HX_STACK_FRAME("::lime::math::color::_RGBA::RGBA_Impl__obj","__init__",0x22e181e5,"::lime::math::color::_RGBA::RGBA_Impl__obj.__init__","lime/math/color/RGBA.hx",25,0x1583b2d1)
HXLINE(  27)		HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)256,(int)7);
HXDLIN(  27)		::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16 = this1;
HXLINE(  29)		{
HXLINE(  29)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  29)			while((_g < (int)256)){
HXLINE(  29)				HX_VARI( Int,i) = _g++;
HXLINE(  31)				{
HXLINE(  31)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  31)					HX_VARI( Int,val) = ::Math_obj::ceil((i * ((Float)257.00392156862745)));
HXDLIN(  31)					{
HXLINE(  31)						Int _hx_tmp = this2->byteOffset;
HXDLIN(  31)						::__hxcpp_memory_set_ui32(this2->buffer->b,(_hx_tmp + (i * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE(  35)		HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)510,(int)4);
HXDLIN(  35)		::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp = this3;
HXLINE(  37)		{
HXLINE(  37)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN(  37)			while((_g1 < (int)255)){
HXLINE(  37)				HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE(  39)				{
HXLINE(  39)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  39)					{
HXLINE(  39)						Int byteOffset = (this4->byteOffset + i1);
HXDLIN(  39)						::__hxcpp_memory_set_byte(this4->buffer->b,byteOffset,i1);
            					}
            				}
            			}
            		}
HXLINE(  43)		{
HXLINE(  43)			HX_VARI_NAME( Int,_g11,"_g1") = (int)255;
HXDLIN(  43)			HX_VARI_NAME( Int,_g2,"_g") = (int)511;
HXDLIN(  43)			while((_g11 < _g2)){
HXLINE(  43)				HX_VARI_NAME( Int,i2,"i") = _g11++;
HXLINE(  45)				{
HXLINE(  45)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  45)					{
HXLINE(  45)						Int byteOffset1 = (this5->byteOffset + i2);
HXDLIN(  45)						::__hxcpp_memory_set_byte(this5->buffer->b,byteOffset1,(int)255);
            					}
            				}
            			}
            		}
            	}


 ::lime::utils::ArrayBufferView RGBA_Impl__obj::_hx___alpha16;

 ::lime::utils::ArrayBufferView RGBA_Impl__obj::_hx___clamp;

Int RGBA_Impl__obj::a16;

Float RGBA_Impl__obj::unmult;

Int RGBA_Impl__obj::_new(hx::Null< Int >  __o_rgba){
Int rgba = __o_rgba.Default(0);
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","_new",0x71261268,"lime.math.color._RGBA.RGBA_Impl_._new","lime/math/color/RGBA.hx",52,0x1583b2d1)
            	HX_STACK_ARG(rgba,"rgba")
HXLINE(  52)		HX_VARI_NAME( Int,this1,"this") = rgba;
HXDLIN(  52)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,_new,return )

Int RGBA_Impl__obj::create(Int r,Int g,Int b,Int a){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","create",0x7b94f3c3,"lime.math.color._RGBA.RGBA_Impl_.create","lime/math/color/RGBA.hx",59,0x1583b2d1)
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(a,"a")
HXLINE(  61)		HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN(  61)		HX_VARI( Int,rgba) = this1;
HXLINE(  62)		rgba = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)a & (int)(int)255));
HXLINE(  63)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(RGBA_Impl__obj,create,return )

void RGBA_Impl__obj::multiplyAlpha(Int this1){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","multiplyAlpha",0xa2d79cb3,"lime.math.color._RGBA.RGBA_Impl_.multiplyAlpha","lime/math/color/RGBA.hx",70,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  70)		if ((((int)this1 & (int)(int)255) == (int)0)) {
HXLINE(  72)			Bool _hx_tmp = (this1 != (int)0);
HXDLIN(  72)			if (_hx_tmp) {
HXLINE(  74)				this1 = (int)0;
            			}
            		}
            		else {
HXLINE(  78)			if ((((int)this1 & (int)(int)255) != (int)255)) {
HXLINE(  80)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  80)				Int byteOffset = (this2->byteOffset + (((int)this1 & (int)(int)255) * (int)4));
HXDLIN(  80)				 ::Dynamic _hx_tmp1 = ::__hxcpp_memory_get_ui32(this2->buffer->b,byteOffset);
HXDLIN(  80)				::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp1;
HXLINE(  81)				{
HXLINE(  81)					Int _hx_tmp2 = ((int)((int)((int)((int)((int)(((int)hx::UShr(this1,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(this1,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(this1,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN(  81)					Int _hx_tmp3 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN(  81)					this1 = ((int)_hx_tmp2 | (int)_hx_tmp3);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,multiplyAlpha,(void))

void RGBA_Impl__obj::readUInt8(Int this1, ::lime::utils::ArrayBufferView data,Int offset,hx::Null< Int >  __o_format,hx::Null< Bool >  __o_premultiplied){
Int format = __o_format.Default(0);
Bool premultiplied = __o_premultiplied.Default(false);
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","readUInt8",0x2e6105e1,"lime.math.color._RGBA.RGBA_Impl_.readUInt8","lime/math/color/RGBA.hx",88,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(premultiplied,"premultiplied")
HXLINE(  90)		switch((int)(format)){
            			case (int)0: {
HXLINE(  98)				Int byteOffset = (data->byteOffset + offset);
HXDLIN(  98)				Int _hx_tmp = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN(  98)				Int r = ((int)_hx_tmp & (int)(int)255);
HXDLIN(  98)				Int byteOffset1 = (data->byteOffset + (offset + (int)1));
HXDLIN(  98)				Int _hx_tmp1 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN(  98)				Int g = ((int)_hx_tmp1 & (int)(int)255);
HXDLIN(  98)				Int byteOffset2 = (data->byteOffset + (offset + (int)2));
HXDLIN(  98)				Int _hx_tmp2 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN(  98)				Int b = ((int)_hx_tmp2 & (int)(int)255);
HXDLIN(  98)				Int byteOffset3 = (data->byteOffset + (offset + (int)3));
HXDLIN(  98)				Int _hx_tmp3 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN(  98)				this1 = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp3 & (int)(int)255) & (int)(int)255));
            			}
            			break;
            			case (int)1: {
HXLINE( 102)				Int byteOffset4 = (data->byteOffset + (offset + (int)1));
HXDLIN( 102)				Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN( 102)				Int r1 = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN( 102)				Int byteOffset5 = (data->byteOffset + (offset + (int)2));
HXDLIN( 102)				Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN( 102)				Int g1 = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN( 102)				Int byteOffset6 = (data->byteOffset + (offset + (int)3));
HXDLIN( 102)				Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN( 102)				Int b1 = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN( 102)				Int byteOffset7 = (data->byteOffset + offset);
HXDLIN( 102)				Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN( 102)				this1 = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp7 & (int)(int)255) & (int)(int)255));
            			}
            			break;
            			case (int)2: {
HXLINE(  94)				Int byteOffset8 = (data->byteOffset + (offset + (int)2));
HXDLIN(  94)				Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN(  94)				Int r2 = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN(  94)				Int byteOffset9 = (data->byteOffset + (offset + (int)1));
HXDLIN(  94)				Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN(  94)				Int g2 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN(  94)				Int byteOffset10 = (data->byteOffset + offset);
HXDLIN(  94)				Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN(  94)				Int b2 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN(  94)				Int byteOffset11 = (data->byteOffset + (offset + (int)3));
HXDLIN(  94)				Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN(  94)				this1 = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp11 & (int)(int)255) & (int)(int)255));
            			}
            			break;
            		}
HXLINE( 106)		if (premultiplied) {
HXLINE( 108)			Bool _hx_tmp12;
HXDLIN( 108)			if ((((int)this1 & (int)(int)255) != (int)0)) {
HXLINE( 108)				_hx_tmp12 = (((int)this1 & (int)(int)255) != (int)255);
            			}
            			else {
HXLINE( 108)				_hx_tmp12 = false;
            			}
HXDLIN( 108)			if (_hx_tmp12) {
HXLINE( 108)				::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)this1 & (int)(int)255));
HXDLIN( 108)				{
HXLINE( 108)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 108)					Float _hx_tmp13 = (((int)hx::UShr(this1,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 108)					Int idx = ::Math_obj::round(_hx_tmp13);
HXDLIN( 108)					Int byteOffset12 = (this2->byteOffset + idx);
HXDLIN( 108)					Int _hx_tmp14 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset12);
HXDLIN( 108)					Int r3 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 108)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 108)					Float _hx_tmp15 = (((int)hx::UShr(this1,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 108)					Int idx1 = ::Math_obj::round(_hx_tmp15);
HXDLIN( 108)					Int byteOffset13 = (this3->byteOffset + idx1);
HXDLIN( 108)					Int _hx_tmp16 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset13);
HXDLIN( 108)					Int g3 = ((int)_hx_tmp16 & (int)(int)255);
HXDLIN( 108)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 108)					Float _hx_tmp17 = (((int)hx::UShr(this1,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 108)					Int idx2 = ::Math_obj::round(_hx_tmp17);
HXDLIN( 108)					Int byteOffset14 = (this4->byteOffset + idx2);
HXDLIN( 108)					Int _hx_tmp18 = ::__hxcpp_memory_get_byte(this4->buffer->b,byteOffset14);
HXDLIN( 108)					Int _hx_tmp19 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp18 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 108)					Int _hx_tmp20 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 108)					this1 = ((int)_hx_tmp19 | (int)_hx_tmp20);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(RGBA_Impl__obj,readUInt8,(void))

void RGBA_Impl__obj::set(Int this1,Int r,Int g,Int b,Int a){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","set",0x5fd95c7b,"lime.math.color._RGBA.RGBA_Impl_.set","lime/math/color/RGBA.hx",117,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(a,"a")
HXLINE( 117)		this1 = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)a & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(RGBA_Impl__obj,set,(void))

void RGBA_Impl__obj::unmultiplyAlpha(Int this1){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","unmultiplyAlpha",0xc3e2eafa,"lime.math.color._RGBA.RGBA_Impl_.unmultiplyAlpha","lime/math/color/RGBA.hx",124,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 124)		Bool _hx_tmp;
HXDLIN( 124)		if ((((int)this1 & (int)(int)255) != (int)0)) {
HXLINE( 124)			_hx_tmp = (((int)this1 & (int)(int)255) != (int)255);
            		}
            		else {
HXLINE( 124)			_hx_tmp = false;
            		}
HXDLIN( 124)		if (_hx_tmp) {
HXLINE( 126)			::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)this1 & (int)(int)255));
HXLINE( 127)			{
HXLINE( 127)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 127)				Float _hx_tmp1 = (((int)hx::UShr(this1,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 127)				Int idx = ::Math_obj::round(_hx_tmp1);
HXDLIN( 127)				Int byteOffset = (this2->byteOffset + idx);
HXDLIN( 127)				Int _hx_tmp2 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset);
HXDLIN( 127)				Int r = ((int)_hx_tmp2 & (int)(int)255);
HXDLIN( 127)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 127)				Float _hx_tmp3 = (((int)hx::UShr(this1,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 127)				Int idx1 = ::Math_obj::round(_hx_tmp3);
HXDLIN( 127)				Int byteOffset1 = (this3->byteOffset + idx1);
HXDLIN( 127)				Int _hx_tmp4 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset1);
HXDLIN( 127)				Int g = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN( 127)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 127)				Float _hx_tmp5 = (((int)hx::UShr(this1,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 127)				Int idx2 = ::Math_obj::round(_hx_tmp5);
HXDLIN( 127)				Int byteOffset2 = (this4->byteOffset + idx2);
HXDLIN( 127)				Int _hx_tmp6 = ::__hxcpp_memory_get_byte(this4->buffer->b,byteOffset2);
HXDLIN( 127)				Int _hx_tmp7 = ((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp6 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 127)				Int _hx_tmp8 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 127)				this1 = ((int)_hx_tmp7 | (int)_hx_tmp8);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,unmultiplyAlpha,(void))

void RGBA_Impl__obj::writeUInt8(Int this1, ::lime::utils::ArrayBufferView data,Int offset,hx::Null< Int >  __o_format,hx::Null< Bool >  __o_premultiplied){
Int format = __o_format.Default(0);
Bool premultiplied = __o_premultiplied.Default(false);
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","writeUInt8",0x77314666,"lime.math.color._RGBA.RGBA_Impl_.writeUInt8","lime/math/color/RGBA.hx",134,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(premultiplied,"premultiplied")
HXLINE( 136)		if (premultiplied) {
HXLINE( 138)			if ((((int)this1 & (int)(int)255) == (int)0)) {
HXLINE( 138)				Bool _hx_tmp = (this1 != (int)0);
HXDLIN( 138)				if (_hx_tmp) {
HXLINE( 138)					this1 = (int)0;
            				}
            			}
            			else {
HXLINE( 138)				if ((((int)this1 & (int)(int)255) != (int)255)) {
HXLINE( 138)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 138)					Int byteOffset = (this2->byteOffset + (((int)this1 & (int)(int)255) * (int)4));
HXDLIN( 138)					 ::Dynamic _hx_tmp1 = ::__hxcpp_memory_get_ui32(this2->buffer->b,byteOffset);
HXDLIN( 138)					::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp1;
HXDLIN( 138)					{
HXLINE( 138)						Int _hx_tmp2 = ((int)((int)((int)((int)((int)(((int)hx::UShr(this1,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(this1,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(this1,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 138)						Int _hx_tmp3 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 138)						this1 = ((int)_hx_tmp2 | (int)_hx_tmp3);
            					}
            				}
            			}
            		}
HXLINE( 142)		switch((int)(format)){
            			case (int)0: {
HXLINE( 153)				{
HXLINE( 153)					HX_VARI( Int,val) = ((int)hx::UShr(this1,(int)24) & (int)(int)255);
HXDLIN( 153)					{
HXLINE( 153)						Int byteOffset1 = (data->byteOffset + offset);
HXDLIN( 153)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset1,val);
            					}
            				}
HXLINE( 154)				{
HXLINE( 154)					HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(this1,(int)16) & (int)(int)255);
HXDLIN( 154)					{
HXLINE( 154)						Int byteOffset2 = (data->byteOffset + (offset + (int)1));
HXDLIN( 154)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset2,val1);
            					}
            				}
HXLINE( 155)				{
HXLINE( 155)					HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(this1,(int)8) & (int)(int)255);
HXDLIN( 155)					{
HXLINE( 155)						Int byteOffset3 = (data->byteOffset + (offset + (int)2));
HXDLIN( 155)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset3,val2);
            					}
            				}
HXLINE( 156)				{
HXLINE( 156)					HX_VARI_NAME( Int,val3,"val") = ((int)this1 & (int)(int)255);
HXDLIN( 156)					{
HXLINE( 156)						Int byteOffset4 = (data->byteOffset + (offset + (int)3));
HXDLIN( 156)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset4,val3);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 160)				{
HXLINE( 160)					HX_VARI_NAME( Int,val4,"val") = ((int)this1 & (int)(int)255);
HXDLIN( 160)					{
HXLINE( 160)						Int byteOffset5 = (data->byteOffset + offset);
HXDLIN( 160)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset5,val4);
            					}
            				}
HXLINE( 161)				{
HXLINE( 161)					HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(this1,(int)24) & (int)(int)255);
HXDLIN( 161)					{
HXLINE( 161)						Int byteOffset6 = (data->byteOffset + (offset + (int)1));
HXDLIN( 161)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset6,val5);
            					}
            				}
HXLINE( 162)				{
HXLINE( 162)					HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(this1,(int)16) & (int)(int)255);
HXDLIN( 162)					{
HXLINE( 162)						Int byteOffset7 = (data->byteOffset + (offset + (int)2));
HXDLIN( 162)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset7,val6);
            					}
            				}
HXLINE( 163)				{
HXLINE( 163)					HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(this1,(int)8) & (int)(int)255);
HXDLIN( 163)					{
HXLINE( 163)						Int byteOffset8 = (data->byteOffset + (offset + (int)3));
HXDLIN( 163)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset8,val7);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 146)				{
HXLINE( 146)					HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(this1,(int)8) & (int)(int)255);
HXDLIN( 146)					{
HXLINE( 146)						Int byteOffset9 = (data->byteOffset + offset);
HXDLIN( 146)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset9,val8);
            					}
            				}
HXLINE( 147)				{
HXLINE( 147)					HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(this1,(int)16) & (int)(int)255);
HXDLIN( 147)					{
HXLINE( 147)						Int byteOffset10 = (data->byteOffset + (offset + (int)1));
HXDLIN( 147)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset10,val9);
            					}
            				}
HXLINE( 148)				{
HXLINE( 148)					HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(this1,(int)24) & (int)(int)255);
HXDLIN( 148)					{
HXLINE( 148)						Int byteOffset11 = (data->byteOffset + (offset + (int)2));
HXDLIN( 148)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset11,val10);
            					}
            				}
HXLINE( 149)				{
HXLINE( 149)					HX_VARI_NAME( Int,val11,"val") = ((int)this1 & (int)(int)255);
HXDLIN( 149)					{
HXLINE( 149)						Int byteOffset12 = (data->byteOffset + (offset + (int)3));
HXDLIN( 149)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset12,val11);
            					}
            				}
            			}
            			break;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(RGBA_Impl__obj,writeUInt8,(void))

Int RGBA_Impl__obj::_hx___fromARGB(Int argb){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","__fromARGB",0x9559671d,"lime.math.color._RGBA.RGBA_Impl_.__fromARGB","lime/math/color/RGBA.hx",172,0x1583b2d1)
            	HX_STACK_ARG(argb,"argb")
HXLINE( 172)		HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 172)		HX_VARI( Int,rgba) = this1;
HXDLIN( 172)		rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 172)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,_hx___fromARGB,return )

Int RGBA_Impl__obj::_hx___fromBGRA(Int bgra){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","__fromBGRA",0x95fa4e85,"lime.math.color._RGBA.RGBA_Impl_.__fromBGRA","lime/math/color/RGBA.hx",179,0x1583b2d1)
            	HX_STACK_ARG(bgra,"bgra")
HXLINE( 179)		HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 179)		HX_VARI( Int,rgba) = this1;
HXDLIN( 179)		rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 179)		return rgba;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,_hx___fromBGRA,return )

Int RGBA_Impl__obj::get_a(Int this1){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","get_a",0x25770e51,"lime.math.color._RGBA.RGBA_Impl_.get_a","lime/math/color/RGBA.hx",193,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 193)		return ((int)this1 & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,get_a,return )

Int RGBA_Impl__obj::set_a(Int this1,Int value){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","set_a",0x0e46045d,"lime.math.color._RGBA.RGBA_Impl_.set_a","lime/math/color/RGBA.hx",198,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 200)		Int _hx_tmp = ((int)((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(this1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(this1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 200)		this1 = ((int)_hx_tmp | (int)((int)value & (int)(int)255));
HXLINE( 201)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGBA_Impl__obj,set_a,return )

Int RGBA_Impl__obj::get_b(Int this1){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","get_b",0x25770e52,"lime.math.color._RGBA.RGBA_Impl_.get_b","lime/math/color/RGBA.hx",208,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 208)		return ((int)hx::UShr(this1,(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,get_b,return )

Int RGBA_Impl__obj::set_b(Int this1,Int value){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","set_b",0x0e46045e,"lime.math.color._RGBA.RGBA_Impl_.set_b","lime/math/color/RGBA.hx",213,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 215)		Int _hx_tmp = ((int)((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(this1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value & (int)(int)255) << (int)(int)8));
HXDLIN( 215)		Int _hx_tmp1 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 215)		this1 = ((int)_hx_tmp | (int)_hx_tmp1);
HXLINE( 216)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGBA_Impl__obj,set_b,return )

Int RGBA_Impl__obj::get_g(Int this1){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","get_g",0x25770e57,"lime.math.color._RGBA.RGBA_Impl_.get_g","lime/math/color/RGBA.hx",223,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 223)		return ((int)hx::UShr(this1,(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,get_g,return )

Int RGBA_Impl__obj::set_g(Int this1,Int value){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","set_g",0x0e460463,"lime.math.color._RGBA.RGBA_Impl_.set_g","lime/math/color/RGBA.hx",228,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 230)		Int _hx_tmp = ((int)((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(this1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 230)		Int _hx_tmp1 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 230)		this1 = ((int)_hx_tmp | (int)_hx_tmp1);
HXLINE( 231)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGBA_Impl__obj,set_g,return )

Int RGBA_Impl__obj::get_r(Int this1){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","get_r",0x25770e62,"lime.math.color._RGBA.RGBA_Impl_.get_r","lime/math/color/RGBA.hx",238,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 238)		return ((int)hx::UShr(this1,(int)24) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(RGBA_Impl__obj,get_r,return )

Int RGBA_Impl__obj::set_r(Int this1,Int value){
            	HX_STACK_FRAME("lime.math.color._RGBA.RGBA_Impl_","set_r",0x0e46046e,"lime.math.color._RGBA.RGBA_Impl_.set_r","lime/math/color/RGBA.hx",243,0x1583b2d1)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 245)		Int _hx_tmp = ((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(this1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(this1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 245)		Int _hx_tmp1 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 245)		this1 = ((int)_hx_tmp | (int)_hx_tmp1);
HXLINE( 246)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(RGBA_Impl__obj,set_r,return )


RGBA_Impl__obj::RGBA_Impl__obj()
{
}

bool RGBA_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_a") ) { outValue = get_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_a") ) { outValue = set_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_b") ) { outValue = get_b_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_b") ) { outValue = set_b_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_g") ) { outValue = get_g_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_g") ) { outValue = set_g_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_r") ) { outValue = get_r_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_r") ) { outValue = set_r_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readUInt8") ) { outValue = readUInt8_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeUInt8") ) { outValue = writeUInt8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__fromARGB") ) { outValue = _hx___fromARGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__fromBGRA") ) { outValue = _hx___fromBGRA_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *RGBA_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo RGBA_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(void *) &RGBA_Impl__obj::_hx___alpha16,HX_HCSTRING("__alpha16","\xa3","\x36","\x64","\x33")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(void *) &RGBA_Impl__obj::_hx___clamp,HX_HCSTRING("__clamp","\xdb","\xcb","\xb6","\xb2")},
	{hx::fsInt,(void *) &RGBA_Impl__obj::a16,HX_HCSTRING("a16","\x86","\xc5","\x49","\x00")},
	{hx::fsFloat,(void *) &RGBA_Impl__obj::unmult,HX_HCSTRING("unmult","\xc9","\x6e","\x3a","\x66")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void RGBA_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::_hx___alpha16,"__alpha16");
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::_hx___clamp,"__clamp");
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::a16,"a16");
	HX_MARK_MEMBER_NAME(RGBA_Impl__obj::unmult,"unmult");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RGBA_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::_hx___alpha16,"__alpha16");
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::_hx___clamp,"__clamp");
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::a16,"a16");
	HX_VISIT_MEMBER_NAME(RGBA_Impl__obj::unmult,"unmult");
};

#endif

hx::Class RGBA_Impl__obj::__mClass;

static ::String RGBA_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("__alpha16","\xa3","\x36","\x64","\x33"),
	HX_HCSTRING("__clamp","\xdb","\xcb","\xb6","\xb2"),
	HX_HCSTRING("a16","\x86","\xc5","\x49","\x00"),
	HX_HCSTRING("unmult","\xc9","\x6e","\x3a","\x66"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("readUInt8","\x48","\x9c","\x5d","\x5f"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("writeUInt8","\x1f","\x4a","\x38","\x23"),
	HX_HCSTRING("__fromARGB","\xd6","\x6a","\x60","\x41"),
	HX_HCSTRING("__fromBGRA","\x3e","\x52","\x01","\x42"),
	HX_HCSTRING("get_a","\x38","\xa5","\x60","\x91"),
	HX_HCSTRING("set_a","\x44","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_b","\x39","\xa5","\x60","\x91"),
	HX_HCSTRING("set_b","\x45","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_g","\x3e","\xa5","\x60","\x91"),
	HX_HCSTRING("set_g","\x4a","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_r","\x49","\xa5","\x60","\x91"),
	HX_HCSTRING("set_r","\x55","\x9b","\x2f","\x7a"),
	::String(null())
};

void RGBA_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math.color._RGBA.RGBA_Impl_","\xc7","\x80","\x1c","\x24");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RGBA_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RGBA_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(RGBA_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< RGBA_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RGBA_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RGBA_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RGBA_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void RGBA_Impl__obj::__boot()
{
}

} // end namespace lime
} // end namespace math
} // end namespace color
} // end namespace _RGBA
