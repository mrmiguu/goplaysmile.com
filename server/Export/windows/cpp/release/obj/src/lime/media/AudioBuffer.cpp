// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_media_AudioBuffer
#include <lime/app/Promise_lime_media_AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_codecs_vorbis_VorbisFile
#include <lime/media/codecs/vorbis/VorbisFile.h>
#endif
#ifndef INCLUDED_lime_media_codecs_vorbis_VorbisInfo
#include <lime/media/codecs/vorbis/VorbisInfo.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

namespace lime{
namespace media{

void AudioBuffer_obj::__construct(){
            	HX_STACK_FRAME("lime.media.AudioBuffer","new",0x18eea6a5,"lime.media.AudioBuffer.new","lime/media/AudioBuffer.hx",54,0xf6fabaad)
            	HX_STACK_THIS(this)
            	}

Dynamic AudioBuffer_obj::__CreateEmpty() { return new AudioBuffer_obj; }

hx::ObjectPtr< AudioBuffer_obj > AudioBuffer_obj::__new()
{
	hx::ObjectPtr< AudioBuffer_obj > _hx_result = new AudioBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AudioBuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioBuffer_obj > _hx_result = new AudioBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

void AudioBuffer_obj::dispose(){
            	HX_STACK_FRAME("lime.media.AudioBuffer","dispose",0xa3b05d64,"lime.media.AudioBuffer.dispose","lime/media/AudioBuffer.hx",61,0xf6fabaad)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioBuffer_obj,dispose,(void))

 ::Dynamic AudioBuffer_obj::get_src(){
            	HX_STACK_FRAME("lime.media.AudioBuffer","get_src",0x0f304c40,"lime.media.AudioBuffer.get_src","lime/media/AudioBuffer.hx",449,0xf6fabaad)
            	HX_STACK_THIS(this)
HXLINE( 449)		return this->_hx___srcVorbisFile;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioBuffer_obj,get_src,return )

 ::Dynamic AudioBuffer_obj::set_src( ::Dynamic value){
            	HX_STACK_FRAME("lime.media.AudioBuffer","set_src",0x0231dd4c,"lime.media.AudioBuffer.set_src","lime/media/AudioBuffer.hx",482,0xf6fabaad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 482)		return (this->_hx___srcVorbisFile = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,set_src,return )

 ::lime::media::AudioBuffer AudioBuffer_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.media.AudioBuffer","fromBytes",0x20c94aa6,"lime.media.AudioBuffer.fromBytes","lime/media/AudioBuffer.hx",89,0xf6fabaad)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(  91)		Bool _hx_tmp = hx::IsNull( bytes );
HXDLIN(  91)		if (_hx_tmp) {
HXLINE(  91)			return null();
            		}
HXLINE( 100)		HX_VARI(  ::lime::media::AudioBuffer,audioBuffer) =  ::lime::media::AudioBuffer_obj::__new();
HXLINE( 101)		HX_VARI(  ::haxe::io::Bytes,buffer) = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN( 101)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 101)		Bool _hx_tmp1 = hx::IsNotNull( buffer );
HXDLIN( 101)		if (_hx_tmp1) {
HXLINE( 101)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 101)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE( 101)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 101)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN( 101)			{
HXLINE( 101)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 101)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 101)				if ((bufferByteLength < (int)0)) {
HXLINE( 101)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 101)			_this->buffer = buffer;
HXDLIN( 101)			_this->byteOffset = (int)0;
HXDLIN( 101)			_this->byteLength = bufferByteLength;
HXDLIN( 101)			Float _hx_tmp2 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN( 101)			_this->length = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 101)			this1 = _this;
            		}
            		else {
HXLINE( 101)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 101)		audioBuffer->data = this1;
HXLINE( 103)		 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(bytes);
HXDLIN( 103)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_audio_load(_hx_tmp3,hx::DynamicPtr(audioBuffer))) );
HXDLIN( 103)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,fromBytes,return )

 ::lime::media::AudioBuffer AudioBuffer_obj::fromFile(::String path){
            	HX_STACK_FRAME("lime.media.AudioBuffer","fromFile",0x1084eca1,"lime.media.AudioBuffer.fromFile","lime/media/AudioBuffer.hx",128,0xf6fabaad)
            	HX_STACK_ARG(path,"path")
HXLINE( 130)		Bool _hx_tmp = hx::IsNull( path );
HXDLIN( 130)		if (_hx_tmp) {
HXLINE( 130)			return null();
            		}
HXLINE( 179)		HX_VARI(  ::lime::media::AudioBuffer,audioBuffer) =  ::lime::media::AudioBuffer_obj::__new();
HXLINE( 180)		HX_VARI(  ::haxe::io::Bytes,buffer) = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN( 180)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 180)		Bool _hx_tmp1 = hx::IsNotNull( buffer );
HXDLIN( 180)		if (_hx_tmp1) {
HXLINE( 180)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 180)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE( 180)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 180)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN( 180)			{
HXLINE( 180)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 180)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 180)				if ((bufferByteLength < (int)0)) {
HXLINE( 180)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 180)			_this->buffer = buffer;
HXDLIN( 180)			_this->byteOffset = (int)0;
HXDLIN( 180)			_this->byteLength = bufferByteLength;
HXDLIN( 180)			Float _hx_tmp2 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN( 180)			_this->length = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 180)			this1 = _this;
            		}
            		else {
HXLINE( 180)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 180)		audioBuffer->data = this1;
HXLINE( 182)		 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(path);
HXDLIN( 182)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_audio_load(_hx_tmp3,hx::DynamicPtr(audioBuffer))) );
HXDLIN( 182)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,fromFile,return )

 ::lime::media::AudioBuffer AudioBuffer_obj::fromFiles(::Array< ::String > paths){
            	HX_STACK_FRAME("lime.media.AudioBuffer","fromFiles",0x63ca20b2,"lime.media.AudioBuffer.fromFiles","lime/media/AudioBuffer.hx",211,0xf6fabaad)
            	HX_STACK_ARG(paths,"paths")
HXLINE( 221)		HX_VARI(  ::lime::media::AudioBuffer,buffer) = null();
HXLINE( 223)		{
HXLINE( 223)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 223)			while((_g < paths->length)){
HXLINE( 223)				HX_VARI( ::String,path) = paths->__get(_g);
HXDLIN( 223)				++_g;
HXLINE( 225)				buffer = ::lime::media::AudioBuffer_obj::fromFile(path);
HXLINE( 226)				Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN( 226)				if (_hx_tmp) {
HXLINE( 226)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE( 230)		return buffer;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,fromFiles,return )

void AudioBuffer_obj::fromURL(::String url, ::Dynamic handler){
            	HX_STACK_FRAME("lime.media.AudioBuffer","fromURL",0x4067bcea,"lime.media.AudioBuffer.fromURL","lime/media/AudioBuffer.hx",249,0xf6fabaad)
            	HX_STACK_ARG(url,"url")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 249)		Bool _hx_tmp;
HXDLIN( 249)		Bool _hx_tmp1;
HXDLIN( 249)		Bool _hx_tmp2 = hx::IsNotNull( url );
HXDLIN( 249)		if (_hx_tmp2) {
HXLINE( 249)			Int _hx_tmp3 = url.indexOf(HX_("http://",52,75,cd,5a),null());
HXDLIN( 249)			_hx_tmp1 = (_hx_tmp3 == (int)-1);
            		}
            		else {
HXLINE( 249)			_hx_tmp1 = false;
            		}
HXDLIN( 249)		if (_hx_tmp1) {
HXLINE( 249)			Int _hx_tmp4 = url.indexOf(HX_("https://",cf,b4,ae,3e),null());
HXDLIN( 249)			_hx_tmp = (_hx_tmp4 == (int)-1);
            		}
            		else {
HXLINE( 249)			_hx_tmp = false;
            		}
HXDLIN( 249)		if (_hx_tmp) {
HXLINE( 251)			 ::lime::media::AudioBuffer _hx_tmp5 = ::lime::media::AudioBuffer_obj::fromFile(url);
HXDLIN( 251)			handler(_hx_tmp5);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AudioBuffer_obj,fromURL,(void))

 ::lime::media::AudioBuffer AudioBuffer_obj::fromVorbisFile( ::lime::media::codecs::vorbis::VorbisFile vorbisFile){
            	HX_STACK_FRAME("lime.media.AudioBuffer","fromVorbisFile",0x6dde6b54,"lime.media.AudioBuffer.fromVorbisFile","lime/media/AudioBuffer.hx",291,0xf6fabaad)
            	HX_STACK_ARG(vorbisFile,"vorbisFile")
HXLINE( 293)		Bool _hx_tmp = hx::IsNull( vorbisFile );
HXDLIN( 293)		if (_hx_tmp) {
HXLINE( 293)			return null();
            		}
HXLINE( 295)		HX_VARI(  ::lime::media::codecs::vorbis::VorbisInfo,info) = vorbisFile->info(null());
HXLINE( 297)		HX_VARI(  ::lime::media::AudioBuffer,audioBuffer) =  ::lime::media::AudioBuffer_obj::__new();
HXLINE( 298)		audioBuffer->channels = info->channels;
HXLINE( 299)		audioBuffer->sampleRate = info->rate;
HXLINE( 300)		audioBuffer->bitsPerSample = (int)16;
HXLINE( 301)		audioBuffer->_hx___srcVorbisFile = vorbisFile;
HXLINE( 303)		return audioBuffer;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,fromVorbisFile,return )

 ::lime::app::Future AudioBuffer_obj::loadFromFile(::String path){
            	HX_STACK_FRAME("lime.media.AudioBuffer","loadFromFile",0x735d4267,"lime.media.AudioBuffer.loadFromFile","lime/media/AudioBuffer.hx",318,0xf6fabaad)
            	HX_STACK_ARG(path,"path")
HXLINE( 320)		HX_VARI(  ::lime::app::Promise_lime_media_AudioBuffer,promise) =  ::lime::app::Promise_lime_media_AudioBuffer_obj::__new();
HXLINE( 322)		HX_VARI(  ::lime::media::AudioBuffer,audioBuffer) = ::lime::media::AudioBuffer_obj::fromFile(path);
HXLINE( 324)		Bool _hx_tmp = hx::IsNotNull( audioBuffer );
HXDLIN( 324)		if (_hx_tmp) {
HXLINE( 364)			promise->complete(audioBuffer);
            		}
            		else {
HXLINE( 370)			promise->error(null());
            		}
HXLINE( 374)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,loadFromFile,return )

 ::lime::app::Future AudioBuffer_obj::loadFromFiles(::Array< ::String > paths){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,paths) HXARGC(0)
            		 ::lime::media::AudioBuffer _hx_run(){
            			HX_STACK_FRAME("lime.media.AudioBuffer","loadFromFiles",0x7e3cd82c,"lime.media.AudioBuffer.loadFromFiles","lime/media/AudioBuffer.hx",411,0xf6fabaad)
HXLINE( 411)			return ::lime::media::AudioBuffer_obj::fromFiles(paths);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACK_FRAME("lime.media.AudioBuffer","loadFromFiles",0x7e3cd82c,"lime.media.AudioBuffer.loadFromFiles","lime/media/AudioBuffer.hx",379,0xf6fabaad)
            	HX_STACK_ARG(paths,"paths")
HXLINE( 381)		HX_VARI(  ::lime::app::Promise_lime_media_AudioBuffer,promise) =  ::lime::app::Promise_lime_media_AudioBuffer_obj::__new();
HXLINE( 411)		promise->completeWith( ::lime::app::Future_obj::__new( ::Dynamic(new _hx_Closure_0(paths)),true));
HXLINE( 415)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,loadFromFiles,return )


AudioBuffer_obj::AudioBuffer_obj()
{
}

void AudioBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioBuffer);
	HX_MARK_MEMBER_NAME(bitsPerSample,"bitsPerSample");
	HX_MARK_MEMBER_NAME(channels,"channels");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(sampleRate,"sampleRate");
	HX_MARK_MEMBER_NAME(_hx___srcAudio,"__srcAudio");
	HX_MARK_MEMBER_NAME(_hx___srcBuffer,"__srcBuffer");
	HX_MARK_MEMBER_NAME(_hx___srcCustom,"__srcCustom");
	HX_MARK_MEMBER_NAME(_hx___srcFMODSound,"__srcFMODSound");
	HX_MARK_MEMBER_NAME(_hx___srcHowl,"__srcHowl");
	HX_MARK_MEMBER_NAME(_hx___srcSound,"__srcSound");
	HX_MARK_MEMBER_NAME(_hx___srcVorbisFile,"__srcVorbisFile");
	HX_MARK_END_CLASS();
}

void AudioBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bitsPerSample,"bitsPerSample");
	HX_VISIT_MEMBER_NAME(channels,"channels");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(sampleRate,"sampleRate");
	HX_VISIT_MEMBER_NAME(_hx___srcAudio,"__srcAudio");
	HX_VISIT_MEMBER_NAME(_hx___srcBuffer,"__srcBuffer");
	HX_VISIT_MEMBER_NAME(_hx___srcCustom,"__srcCustom");
	HX_VISIT_MEMBER_NAME(_hx___srcFMODSound,"__srcFMODSound");
	HX_VISIT_MEMBER_NAME(_hx___srcHowl,"__srcHowl");
	HX_VISIT_MEMBER_NAME(_hx___srcSound,"__srcSound");
	HX_VISIT_MEMBER_NAME(_hx___srcVorbisFile,"__srcVorbisFile");
}

hx::Val AudioBuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_src()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"get_src") ) { return hx::Val( get_src_dyn()); }
		if (HX_FIELD_EQ(inName,"set_src") ) { return hx::Val( set_src_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { return hx::Val( channels); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__srcHowl") ) { return hx::Val( _hx___srcHowl); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { return hx::Val( sampleRate); }
		if (HX_FIELD_EQ(inName,"__srcAudio") ) { return hx::Val( _hx___srcAudio); }
		if (HX_FIELD_EQ(inName,"__srcSound") ) { return hx::Val( _hx___srcSound); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__srcBuffer") ) { return hx::Val( _hx___srcBuffer); }
		if (HX_FIELD_EQ(inName,"__srcCustom") ) { return hx::Val( _hx___srcCustom); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bitsPerSample") ) { return hx::Val( bitsPerSample); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__srcFMODSound") ) { return hx::Val( _hx___srcFMODSound); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__srcVorbisFile") ) { return hx::Val( _hx___srcVorbisFile); }
	}
	return super::__Field(inName,inCallProp);
}

bool AudioBuffer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"fromURL") ) { outValue = fromURL_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromFiles") ) { outValue = fromFiles_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromFiles") ) { outValue = loadFromFiles_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fromVorbisFile") ) { outValue = fromVorbisFile_dyn(); return true; }
	}
	return false;
}

hx::Val AudioBuffer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_src(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { channels=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__srcHowl") ) { _hx___srcHowl=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { sampleRate=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__srcAudio") ) { _hx___srcAudio=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__srcSound") ) { _hx___srcSound=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__srcBuffer") ) { _hx___srcBuffer=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__srcCustom") ) { _hx___srcCustom=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bitsPerSample") ) { bitsPerSample=inValue.Cast< Int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__srcFMODSound") ) { _hx___srcFMODSound=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__srcVorbisFile") ) { _hx___srcVorbisFile=inValue.Cast<  ::lime::media::codecs::vorbis::VorbisFile >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bitsPerSample","\x01","\x01","\x36","\xc4"));
	outFields->push(HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	outFields->push(HX_HCSTRING("__srcAudio","\x72","\x3a","\x73","\x29"));
	outFields->push(HX_HCSTRING("__srcBuffer","\xe4","\x63","\x0b","\x83"));
	outFields->push(HX_HCSTRING("__srcCustom","\x95","\x2e","\x09","\xf2"));
	outFields->push(HX_HCSTRING("__srcFMODSound","\xcf","\x14","\x24","\x65"));
	outFields->push(HX_HCSTRING("__srcHowl","\xc0","\x38","\xb9","\xf4"));
	outFields->push(HX_HCSTRING("__srcSound","\x6b","\x4e","\xbf","\x82"));
	outFields->push(HX_HCSTRING("__srcVorbisFile","\x53","\x8c","\xee","\xce"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AudioBuffer_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(AudioBuffer_obj,bitsPerSample),HX_HCSTRING("bitsPerSample","\x01","\x01","\x36","\xc4")},
	{hx::fsInt,(int)offsetof(AudioBuffer_obj,channels),HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(AudioBuffer_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsInt,(int)offsetof(AudioBuffer_obj,sampleRate),HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AudioBuffer_obj,_hx___srcAudio),HX_HCSTRING("__srcAudio","\x72","\x3a","\x73","\x29")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AudioBuffer_obj,_hx___srcBuffer),HX_HCSTRING("__srcBuffer","\xe4","\x63","\x0b","\x83")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AudioBuffer_obj,_hx___srcCustom),HX_HCSTRING("__srcCustom","\x95","\x2e","\x09","\xf2")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AudioBuffer_obj,_hx___srcFMODSound),HX_HCSTRING("__srcFMODSound","\xcf","\x14","\x24","\x65")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AudioBuffer_obj,_hx___srcHowl),HX_HCSTRING("__srcHowl","\xc0","\x38","\xb9","\xf4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AudioBuffer_obj,_hx___srcSound),HX_HCSTRING("__srcSound","\x6b","\x4e","\xbf","\x82")},
	{hx::fsObject /*::lime::media::codecs::vorbis::VorbisFile*/ ,(int)offsetof(AudioBuffer_obj,_hx___srcVorbisFile),HX_HCSTRING("__srcVorbisFile","\x53","\x8c","\xee","\xce")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AudioBuffer_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioBuffer_obj_sMemberFields[] = {
	HX_HCSTRING("bitsPerSample","\x01","\x01","\x36","\xc4"),
	HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"),
	HX_HCSTRING("__srcAudio","\x72","\x3a","\x73","\x29"),
	HX_HCSTRING("__srcBuffer","\xe4","\x63","\x0b","\x83"),
	HX_HCSTRING("__srcCustom","\x95","\x2e","\x09","\xf2"),
	HX_HCSTRING("__srcFMODSound","\xcf","\x14","\x24","\x65"),
	HX_HCSTRING("__srcHowl","\xc0","\x38","\xb9","\xf4"),
	HX_HCSTRING("__srcSound","\x6b","\x4e","\xbf","\x82"),
	HX_HCSTRING("__srcVorbisFile","\x53","\x8c","\xee","\xce"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("get_src","\x7b","\x6f","\xcc","\x26"),
	HX_HCSTRING("set_src","\x87","\x00","\xce","\x19"),
	::String(null()) };

static void AudioBuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AudioBuffer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AudioBuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AudioBuffer_obj::__mClass,"__mClass");
};

#endif

hx::Class AudioBuffer_obj::__mClass;

static ::String AudioBuffer_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromFiles","\xad","\xc8","\x21","\xb5"),
	HX_HCSTRING("fromURL","\x25","\xe0","\x03","\x58"),
	HX_HCSTRING("fromVorbisFile","\x79","\xf5","\xfc","\xd5"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	HX_HCSTRING("loadFromFiles","\xa7","\x99","\x87","\x37"),
	::String(null())
};

void AudioBuffer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.media.AudioBuffer","\x33","\x70","\x4b","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AudioBuffer_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AudioBuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AudioBuffer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AudioBuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AudioBuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AudioBuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioBuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace media
