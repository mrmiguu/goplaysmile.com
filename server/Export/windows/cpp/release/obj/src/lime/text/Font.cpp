// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_text_Font
#include <lime/app/Promise_lime_text_Font.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphMetrics
#include <lime/text/GlyphMetrics.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_57_new,"lime.text.Font","new",0x97494f29,"lime.text.Font.new","lime/text/Font.hx",57,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_74_decompose,"lime.text.Font","decompose",0x6e29ff3a,"lime.text.Font.decompose","lime/text/Font.hx",74,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_156_getGlyph,"lime.text.Font","getGlyph",0x5bf955cd,"lime.text.Font.getGlyph","lime/text/Font.hx",156,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_168_getGlyphs,"lime.text.Font","getGlyphs",0x1e31be06,"lime.text.Font.getGlyphs","lime/text/Font.hx",168,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_176_getGlyphMetrics,"lime.text.Font","getGlyphMetrics",0x8c9677f6,"lime.text.Font.getGlyphMetrics","lime/text/Font.hx",176,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_195_renderGlyph,"lime.text.Font","renderGlyph",0xe6e51a3f,"lime.text.Font.renderGlyph","lime/text/Font.hx",195,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_393_renderGlyphs,"lime.text.Font","renderGlyphs",0x2191dd54,"lime.text.Font.renderGlyphs","lime/text/Font.hx",393,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_397___fromBytes,"lime.text.Font","__fromBytes",0x257c2b4a,"lime.text.Font.__fromBytes","lime/text/Font.hx",397,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_418___fromFile,"lime.text.Font","__fromFile",0x6331ec7d,"lime.text.Font.__fromFile","lime/text/Font.hx",418,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_463___loadFromName,"lime.text.Font","__loadFromName",0x6b610412,"lime.text.Font.__loadFromName","lime/text/Font.hx",463,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_554___setSize,"lime.text.Font","__setSize",0x86a86dec,"lime.text.Font.__setSize","lime/text/Font.hx",554,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_570_get_ascender,"lime.text.Font","get_ascender",0x190d2c57,"lime.text.Font.get_ascender","lime/text/Font.hx",570,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_581_get_descender,"lime.text.Font","get_descender",0xcf2c6cf7,"lime.text.Font.get_descender","lime/text/Font.hx",581,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_592_get_height,"lime.text.Font","get_height",0x11455407,"lime.text.Font.get_height","lime/text/Font.hx",592,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_603_get_numGlyphs,"lime.text.Font","get_numGlyphs",0x835f4c0d,"lime.text.Font.get_numGlyphs","lime/text/Font.hx",603,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_614_get_underlinePosition,"lime.text.Font","get_underlinePosition",0xf48b45b5,"lime.text.Font.get_underlinePosition","lime/text/Font.hx",614,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_625_get_underlineThickness,"lime.text.Font","get_underlineThickness",0x8f66b6e8,"lime.text.Font.get_underlineThickness","lime/text/Font.hx",625,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_636_get_unitsPerEM,"lime.text.Font","get_unitsPerEM",0x81c292b6,"lime.text.Font.get_unitsPerEM","lime/text/Font.hx",636,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_91_fromBytes,"lime.text.Font","fromBytes",0x65a32e2a,"lime.text.Font.fromBytes","lime/text/Font.hx",91,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_107_fromFile,"lime.text.Font","fromFile",0x07a4e59d,"lime.text.Font.fromFile","lime/text/Font.hx",107,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_125_loadFromBytes,"lime.text.Font","loadFromBytes",0x5727f7a4,"lime.text.Font.loadFromBytes","lime/text/Font.hx",125,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_132_loadFromFile,"lime.text.Font","loadFromFile",0x5ed36963,"lime.text.Font.loadFromFile","lime/text/Font.hx",132,0x3be57807)
HX_DEFINE_STACK_FRAME(_hx_pos_51012fd6257f8a4a_146_loadFromName,"lime.text.Font","loadFromName",0x64170d32,"lime.text.Font.loadFromName","lime/text/Font.hx",146,0x3be57807)
namespace lime{
namespace text{

void Font_obj::__construct(::String name){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_57_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(  59)		if (hx::IsNotNull( name )) {
HXLINE(  61)			this->name = name;
            		}
HXLINE(  65)		if (hx::IsNotNull( this->_hx___fontPath )) {
HXLINE(  67)			this->_hx___fromFile(this->_hx___fontPath);
            		}
            	}

Dynamic Font_obj::__CreateEmpty() { return new Font_obj; }

void *Font_obj::_hx_vtable = 0;

Dynamic Font_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Font_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6aed2e71;
}

 ::Dynamic Font_obj::decompose(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_74_decompose)
            	HX_STACK_THIS(this)
HXLINE(  78)		if (hx::IsNull( this->src )) {
HXLINE(  78)			HX_STACK_DO_THROW(HX_("Uninitialized font handle.",3a,84,ab,29));
            		}
HXLINE(  80)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_outline_decompose(hx::DynamicPtr(this->src),(int)20480)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,decompose,return )

int Font_obj::getGlyph(::String character){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_156_getGlyph)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(character,"character")
HXLINE( 156)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_glyph_index(hx::DynamicPtr(this->src),character);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyph,return )

::Array< int > Font_obj::getGlyphs(::String __o_characters){
::String characters = __o_characters.Default(HX_HCSTRING("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ","\xc1","\xf6","\x34","\x50"));
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_168_getGlyphs)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(characters,"characters")
HXLINE( 168)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_glyph_indices(hx::DynamicPtr(this->src),characters)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyphs,return )

 ::lime::text::GlyphMetrics Font_obj::getGlyphMetrics(int glyph){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_176_getGlyphMetrics)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(glyph,"glyph")
HXLINE( 179)		HX_VARI(  ::Dynamic,value) = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_glyph_metrics(hx::DynamicPtr(this->src),glyph)) );
HXLINE( 180)		HX_VARI(  ::lime::text::GlyphMetrics,metrics) =  ::lime::text::GlyphMetrics_obj::__alloc( HX_CTX );
HXLINE( 182)		metrics->advance =  ::lime::math::Vector2_obj::__alloc( HX_CTX , ::Dynamic(value->__Field(HX_("horizontalAdvance",fe,57,3e,ce),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("verticalAdvance",ac,8e,f7,57),hx::paccDynamic)));
HXLINE( 183)		metrics->height = ( (int)(value->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic)) );
HXLINE( 184)		metrics->horizontalBearing =  ::lime::math::Vector2_obj::__alloc( HX_CTX , ::Dynamic(value->__Field(HX_("horizontalBearingX",ae,21,22,6c),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("horizontalBearingY",af,21,22,6c),hx::paccDynamic)));
HXLINE( 185)		metrics->verticalBearing =  ::lime::math::Vector2_obj::__alloc( HX_CTX , ::Dynamic(value->__Field(HX_("verticalBearingX",40,c3,78,64),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("verticalBearingY",41,c3,78,64),hx::paccDynamic)));
HXLINE( 187)		return metrics;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyphMetrics,return )

 ::lime::graphics::Image Font_obj::renderGlyph(int glyph,int fontSize){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_195_renderGlyph)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(glyph,"glyph")
            	HX_STACK_ARG(fontSize,"fontSize")
HXLINE( 199)		this->_hx___setSize(fontSize);
HXLINE( 201)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((int)0);
HXLINE( 206)		if (::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_render_glyph(hx::DynamicPtr(this->src),glyph,hx::DynamicPtr(bytes))) {
HXLINE( 209)			HX_VARI( int,width) = ((int)((int)((int)bytes->b->__get((int)4) | (int)((int)bytes->b->__get((int)5) << (int)(int)8)) | (int)((int)bytes->b->__get((int)6) << (int)(int)16)) | (int)((int)bytes->b->__get((int)7) << (int)(int)24));
HXLINE( 210)			HX_VARI( int,height) = ((int)((int)((int)bytes->b->__get((int)8) | (int)((int)bytes->b->__get((int)9) << (int)(int)8)) | (int)((int)bytes->b->__get((int)10) << (int)(int)16)) | (int)((int)bytes->b->__get((int)11) << (int)(int)24));
HXLINE( 211)			HX_VARI( int,x) = ((int)((int)((int)bytes->b->__get((int)12) | (int)((int)bytes->b->__get((int)13) << (int)(int)8)) | (int)((int)bytes->b->__get((int)14) << (int)(int)16)) | (int)((int)bytes->b->__get((int)15) << (int)(int)24));
HXLINE( 212)			HX_VARI( int,y) = ((int)((int)((int)bytes->b->__get((int)16) | (int)((int)bytes->b->__get((int)17) << (int)(int)8)) | (int)((int)bytes->b->__get((int)18) << (int)(int)16)) | (int)((int)bytes->b->__get((int)19) << (int)(int)24));
HXLINE( 214)			HX_VARI(  ::haxe::io::Bytes,data) = bytes->sub((int)20,(width * height));
HXLINE( 217)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 217)			if (hx::IsNotNull( data )) {
HXLINE( 217)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)4);
HXDLIN( 217)				if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE( 217)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 217)				HX_VARI( int,bufferByteLength) = data->length;
HXDLIN( 217)				{
HXLINE( 217)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 217)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 217)					if ((bufferByteLength < (int)0)) {
HXLINE( 217)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN( 217)				_this->buffer = data;
HXDLIN( 217)				_this->byteOffset = (int)0;
HXDLIN( 217)				_this->byteLength = bufferByteLength;
HXDLIN( 217)				_this->length = ::Std_obj::_hx_int(((Float)bufferByteLength / (Float)_this->bytesPerElement));
HXDLIN( 217)				this1 = _this;
            			}
            			else {
HXLINE( 217)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXLINE( 218)			HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__alloc( HX_CTX , ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,width,height,(int)1,null()),(int)0,(int)0,width,height,null(),null());
HXLINE( 219)			image->x = x;
HXLINE( 220)			image->y = y;
HXLINE( 222)			return image;
            		}
HXLINE( 228)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Font_obj,renderGlyph,return )

 ::haxe::ds::IntMap Font_obj::renderGlyphs(::Array< int > glyphs,int fontSize){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_393_renderGlyphs)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(glyphs,"glyphs")
            	HX_STACK_ARG(fontSize,"fontSize")
HXLINE( 393)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Font_obj,renderGlyphs,return )

void Font_obj::_hx___fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_397___fromBytes)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 399)		this->_hx___fontPath = null();
HXLINE( 403)		this->_hx___fontPathWithoutDirectory = null();
HXLINE( 405)		this->src = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_load(hx::DynamicPtr(bytes))) );
HXLINE( 407)		bool _hx_tmp;
HXDLIN( 407)		if (hx::IsNotNull( this->src )) {
HXLINE( 407)			_hx_tmp = hx::IsNull( this->name );
            		}
            		else {
HXLINE( 407)			_hx_tmp = false;
            		}
HXDLIN( 407)		if (_hx_tmp) {
HXLINE( 409)			this->name = ( (::String)(( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_family_name(hx::DynamicPtr(this->src))) )) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromBytes,(void))

void Font_obj::_hx___fromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_418___fromFile)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
HXLINE( 420)		this->_hx___fontPath = path;
HXLINE( 424)		this->_hx___fontPathWithoutDirectory = ::haxe::io::Path_obj::withoutDirectory(this->_hx___fontPath);
HXLINE( 426)		this->src = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_load(hx::DynamicPtr(this->_hx___fontPath))) );
HXLINE( 428)		bool _hx_tmp;
HXDLIN( 428)		if (hx::IsNotNull( this->src )) {
HXLINE( 428)			_hx_tmp = hx::IsNull( this->name );
            		}
            		else {
HXLINE( 428)			_hx_tmp = false;
            		}
HXDLIN( 428)		if (_hx_tmp) {
HXLINE( 430)			this->name = ( (::String)(( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_family_name(hx::DynamicPtr(this->src))) )) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromFile,(void))

 ::lime::app::Future Font_obj::_hx___loadFromName(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_463___loadFromName)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 465)		HX_VARI(  ::lime::app::Promise_lime_text_Font,promise) =  ::lime::app::Promise_lime_text_Font_obj::__alloc( HX_CTX );
HXLINE( 542)		promise->error(HX_("",00,00,00,00));
HXLINE( 546)		return promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___loadFromName,return )

void Font_obj::_hx___setSize(int size){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_554___setSize)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
HXLINE( 554)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_set_size(hx::DynamicPtr(this->src),size);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___setSize,(void))

int Font_obj::get_ascender(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_570_get_ascender)
            	HX_STACK_THIS(this)
HXLINE( 570)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_ascender(hx::DynamicPtr(this->src));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_ascender,return )

int Font_obj::get_descender(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_581_get_descender)
            	HX_STACK_THIS(this)
HXLINE( 581)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_descender(hx::DynamicPtr(this->src));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_descender,return )

int Font_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_592_get_height)
            	HX_STACK_THIS(this)
HXLINE( 592)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_height(hx::DynamicPtr(this->src));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_height,return )

int Font_obj::get_numGlyphs(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_603_get_numGlyphs)
            	HX_STACK_THIS(this)
HXLINE( 603)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_num_glyphs(hx::DynamicPtr(this->src));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_numGlyphs,return )

int Font_obj::get_underlinePosition(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_614_get_underlinePosition)
            	HX_STACK_THIS(this)
HXLINE( 614)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_underline_position(hx::DynamicPtr(this->src));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_underlinePosition,return )

int Font_obj::get_underlineThickness(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_625_get_underlineThickness)
            	HX_STACK_THIS(this)
HXLINE( 625)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_underline_thickness(hx::DynamicPtr(this->src));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_underlineThickness,return )

int Font_obj::get_unitsPerEM(){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_636_get_unitsPerEM)
            	HX_STACK_THIS(this)
HXLINE( 636)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_font_get_units_per_em(hx::DynamicPtr(this->src));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_unitsPerEM,return )

 ::lime::text::Font Font_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_91_fromBytes)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(  93)		if (hx::IsNull( bytes )) {
HXLINE(  93)			return null();
            		}
HXLINE(  95)		HX_VARI(  ::lime::text::Font,font) =  ::lime::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE(  96)		font->_hx___fromBytes(bytes);
HXLINE(  99)		if (hx::IsNotNull( font->src )) {
HXLINE(  99)			return font;
            		}
            		else {
HXLINE(  99)			return null();
            		}
HXDLIN(  99)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromBytes,return )

 ::lime::text::Font Font_obj::fromFile(::String path){
            	HX_GC_STACKFRAME(&_hx_pos_51012fd6257f8a4a_107_fromFile)
            	HX_STACK_ARG(path,"path")
HXLINE( 109)		if (hx::IsNull( path )) {
HXLINE( 109)			return null();
            		}
HXLINE( 111)		HX_VARI(  ::lime::text::Font,font) =  ::lime::text::Font_obj::__alloc( HX_CTX ,null());
HXLINE( 112)		font->_hx___fromFile(path);
HXLINE( 115)		if (hx::IsNotNull( font->src )) {
HXLINE( 115)			return font;
            		}
            		else {
HXLINE( 115)			return null();
            		}
HXDLIN( 115)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromFile,return )

 ::lime::app::Future Font_obj::loadFromBytes( ::haxe::io::Bytes bytes){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_125_loadFromBytes)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 125)		return ::lime::app::Future_obj::withValue(::lime::text::Font_obj::fromBytes(bytes));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromBytes,return )

 ::lime::app::Future Font_obj::loadFromFile(::String path){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_132_loadFromFile)
            	HX_STACK_ARG(path,"path")
HXLINE( 132)		return ::lime::app::Future_obj::withValue(::lime::text::Font_obj::fromFile(path));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromFile,return )

 ::lime::app::Future Font_obj::loadFromName(::String path){
            	HX_STACKFRAME(&_hx_pos_51012fd6257f8a4a_146_loadFromName)
            	HX_STACK_ARG(path,"path")
HXLINE( 146)		return ::lime::app::Future_obj::withError(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,loadFromName,return )


hx::ObjectPtr< Font_obj > Font_obj::__new(::String name) {
	hx::ObjectPtr< Font_obj > __this = new Font_obj();
	__this->__construct(name);
	return __this;
}

hx::ObjectPtr< Font_obj > Font_obj::__alloc(hx::Ctx *_hx_ctx,::String name) {
	Font_obj *__this = (Font_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Font_obj), true, "lime.text.Font"));
	*(void **)__this = Font_obj::_hx_vtable;
	__this->__construct(name);
	return __this;
}

Font_obj::Font_obj()
{
}

void Font_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Font);
	HX_MARK_MEMBER_NAME(ascender,"ascender");
	HX_MARK_MEMBER_NAME(descender,"descender");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(numGlyphs,"numGlyphs");
	HX_MARK_MEMBER_NAME(src,"src");
	HX_MARK_MEMBER_NAME(underlinePosition,"underlinePosition");
	HX_MARK_MEMBER_NAME(underlineThickness,"underlineThickness");
	HX_MARK_MEMBER_NAME(unitsPerEM,"unitsPerEM");
	HX_MARK_MEMBER_NAME(_hx___fontPath,"__fontPath");
	HX_MARK_MEMBER_NAME(_hx___fontPathWithoutDirectory,"__fontPathWithoutDirectory");
	HX_MARK_END_CLASS();
}

void Font_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ascender,"ascender");
	HX_VISIT_MEMBER_NAME(descender,"descender");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(numGlyphs,"numGlyphs");
	HX_VISIT_MEMBER_NAME(src,"src");
	HX_VISIT_MEMBER_NAME(underlinePosition,"underlinePosition");
	HX_VISIT_MEMBER_NAME(underlineThickness,"underlineThickness");
	HX_VISIT_MEMBER_NAME(unitsPerEM,"unitsPerEM");
	HX_VISIT_MEMBER_NAME(_hx___fontPath,"__fontPath");
	HX_VISIT_MEMBER_NAME(_hx___fontPathWithoutDirectory,"__fontPathWithoutDirectory");
}

hx::Val Font_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { return hx::Val( src); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( inCallProp == hx::paccAlways ? get_height() : height); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ascender") ) { return hx::Val( inCallProp == hx::paccAlways ? get_ascender() : ascender); }
		if (HX_FIELD_EQ(inName,"getGlyph") ) { return hx::Val( getGlyph_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"descender") ) { return hx::Val( inCallProp == hx::paccAlways ? get_descender() : descender); }
		if (HX_FIELD_EQ(inName,"numGlyphs") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numGlyphs() : numGlyphs); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn()); }
		if (HX_FIELD_EQ(inName,"getGlyphs") ) { return hx::Val( getGlyphs_dyn()); }
		if (HX_FIELD_EQ(inName,"__setSize") ) { return hx::Val( _hx___setSize_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unitsPerEM") ) { return hx::Val( inCallProp == hx::paccAlways ? get_unitsPerEM() : unitsPerEM); }
		if (HX_FIELD_EQ(inName,"__fontPath") ) { return hx::Val( _hx___fontPath); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"renderGlyph") ) { return hx::Val( renderGlyph_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderGlyphs") ) { return hx::Val( renderGlyphs_dyn()); }
		if (HX_FIELD_EQ(inName,"get_ascender") ) { return hx::Val( get_ascender_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_descender") ) { return hx::Val( get_descender_dyn()); }
		if (HX_FIELD_EQ(inName,"get_numGlyphs") ) { return hx::Val( get_numGlyphs_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__loadFromName") ) { return hx::Val( _hx___loadFromName_dyn()); }
		if (HX_FIELD_EQ(inName,"get_unitsPerEM") ) { return hx::Val( get_unitsPerEM_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getGlyphMetrics") ) { return hx::Val( getGlyphMetrics_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"underlinePosition") ) { return hx::Val( inCallProp == hx::paccAlways ? get_underlinePosition() : underlinePosition); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"underlineThickness") ) { return hx::Val( inCallProp == hx::paccAlways ? get_underlineThickness() : underlineThickness); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_underlinePosition") ) { return hx::Val( get_underlinePosition_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_underlineThickness") ) { return hx::Val( get_underlineThickness_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__fontPathWithoutDirectory") ) { return hx::Val( _hx___fontPathWithoutDirectory); }
	}
	return super::__Field(inName,inCallProp);
}

bool Font_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFromName") ) { outValue = loadFromName_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
	}
	return false;
}

hx::Val Font_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { src=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ascender") ) { ascender=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"descender") ) { descender=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numGlyphs") ) { numGlyphs=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unitsPerEM") ) { unitsPerEM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fontPath") ) { _hx___fontPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"underlinePosition") ) { underlinePosition=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"underlineThickness") ) { underlineThickness=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__fontPathWithoutDirectory") ) { _hx___fontPathWithoutDirectory=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Font_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("ascender","\x37","\x98","\x10","\x60"));
	outFields->push(HX_HCSTRING("descender","\x17","\x65","\x27","\xab"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	outFields->push(HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96"));
	outFields->push(HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91"));
	outFields->push(HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21"));
	outFields->push(HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70"));
	outFields->push(HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Font_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Font_obj,ascender),HX_HCSTRING("ascender","\x37","\x98","\x10","\x60")},
	{hx::fsInt,(int)offsetof(Font_obj,descender),HX_HCSTRING("descender","\x17","\x65","\x27","\xab")},
	{hx::fsInt,(int)offsetof(Font_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsString,(int)offsetof(Font_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(Font_obj,numGlyphs),HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Font_obj,src),HX_HCSTRING("src","\xe4","\xa6","\x57","\x00")},
	{hx::fsInt,(int)offsetof(Font_obj,underlinePosition),HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96")},
	{hx::fsInt,(int)offsetof(Font_obj,underlineThickness),HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91")},
	{hx::fsInt,(int)offsetof(Font_obj,unitsPerEM),HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21")},
	{hx::fsString,(int)offsetof(Font_obj,_hx___fontPath),HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70")},
	{hx::fsString,(int)offsetof(Font_obj,_hx___fontPathWithoutDirectory),HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Font_obj_sStaticStorageInfo = 0;
#endif

static ::String Font_obj_sMemberFields[] = {
	HX_HCSTRING("ascender","\x37","\x98","\x10","\x60"),
	HX_HCSTRING("descender","\x17","\x65","\x27","\xab"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f"),
	HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"),
	HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96"),
	HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91"),
	HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21"),
	HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70"),
	HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("getGlyph","\x36","\x0d","\xdc","\xf5"),
	HX_HCSTRING("getGlyphs","\x7d","\x82","\xaf","\x2a"),
	HX_HCSTRING("getGlyphMetrics","\xad","\x6f","\x39","\x58"),
	HX_HCSTRING("renderGlyph","\x76","\x2a","\xb6","\x61"),
	HX_HCSTRING("renderGlyphs","\x3d","\xfd","\xae","\x1d"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__loadFromName","\x3b","\xb0","\xf4","\x80"),
	HX_HCSTRING("__setSize","\x63","\x32","\x26","\x93"),
	HX_HCSTRING("get_ascender","\x40","\x4c","\x2a","\x15"),
	HX_HCSTRING("get_descender","\xee","\x38","\x8b","\x6c"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_numGlyphs","\x04","\x18","\xbe","\x20"),
	HX_HCSTRING("get_underlinePosition","\xac","\x60","\x19","\x15"),
	HX_HCSTRING("get_underlineThickness","\x11","\x34","\x30","\xeb"),
	HX_HCSTRING("get_unitsPerEM","\xdf","\x3e","\x56","\x97"),
	::String(null()) };

static void Font_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Font_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Font_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Font_obj::__mClass,"__mClass");
};

#endif

hx::Class Font_obj::__mClass;

static ::String Font_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	HX_HCSTRING("loadFromName","\x1b","\x2d","\x34","\x60"),
	::String(null())
};

void Font_obj::__register()
{
	hx::Object *dummy = new Font_obj;
	Font_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text.Font","\xb7","\x86","\x7e","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Font_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Font_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Font_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Font_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Font_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Font_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Font_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Font_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace text
