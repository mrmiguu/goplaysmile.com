// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math_color__ARGB_ARGB_Impl_
#include <lime/math/color/_ARGB/ARGB_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_color__RGBA_RGBA_Impl_
#include <lime/math/color/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

namespace lime{
namespace math{
namespace color{
namespace _ARGB{

void ARGB_Impl__obj::__construct() { }

Dynamic ARGB_Impl__obj::__CreateEmpty() { return new ARGB_Impl__obj; }

hx::ObjectPtr< ARGB_Impl__obj > ARGB_Impl__obj::__new()
{
	hx::ObjectPtr< ARGB_Impl__obj > _hx_result = new ARGB_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ARGB_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ARGB_Impl__obj > _hx_result = new ARGB_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int ARGB_Impl__obj::a16;

Float ARGB_Impl__obj::unmult;

Int ARGB_Impl__obj::_new(hx::Null< Int >  __o_argb){
Int argb = __o_argb.Default(0);
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","_new",0xd22d5968,"lime.math.color._ARGB.ARGB_Impl_._new","lime/math/color/ARGB.hx",21,0x9a2de539)
            	HX_STACK_ARG(argb,"argb")
HXLINE(  21)		HX_VARI_NAME( Int,this1,"this") = argb;
HXDLIN(  21)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,_new,return )

Int ARGB_Impl__obj::create(Int a,Int r,Int g,Int b){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","create",0xa23bfac3,"lime.math.color._ARGB.ARGB_Impl_.create","lime/math/color/ARGB.hx",28,0x9a2de539)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(b,"b")
HXLINE(  30)		HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN(  30)		HX_VARI( Int,argb) = this1;
HXLINE(  31)		argb = ((int)((int)((int)((int)((int)a & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
HXLINE(  32)		return argb;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ARGB_Impl__obj,create,return )

void ARGB_Impl__obj::multiplyAlpha(Int this1){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","multiplyAlpha",0x102f75b3,"lime.math.color._ARGB.ARGB_Impl_.multiplyAlpha","lime/math/color/ARGB.hx",39,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  39)		if ((((int)hx::UShr(this1,(int)24) & (int)(int)255) == (int)0)) {
HXLINE(  41)			this1 = (int)0;
            		}
            		else {
HXLINE(  43)			if ((((int)hx::UShr(this1,(int)24) & (int)(int)255) != (int)255)) {
HXLINE(  45)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  45)				Int byteOffset = (this2->byteOffset + (((int)hx::UShr(this1,(int)24) & (int)(int)255) * (int)4));
HXDLIN(  45)				 ::Dynamic _hx_tmp = ::__hxcpp_memory_get_ui32(this2->buffer->b,byteOffset);
HXDLIN(  45)				::lime::math::color::_ARGB::ARGB_Impl__obj::a16 = _hx_tmp;
HXLINE(  46)				{
HXLINE(  46)					Int r = ((int)(((int)hx::UShr(this1,(int)16) & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::a16) >> (int)(int)16);
HXDLIN(  46)					Int g = ((int)(((int)hx::UShr(this1,(int)8) & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::a16) >> (int)(int)16);
HXDLIN(  46)					Int b = ((int)(((int)this1 & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::a16) >> (int)(int)16);
HXDLIN(  46)					Int _hx_tmp1 = ((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16));
HXDLIN(  46)					this1 = ((int)((int)_hx_tmp1 | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,multiplyAlpha,(void))

void ARGB_Impl__obj::readUInt8(Int this1, ::lime::utils::ArrayBufferView data,Int offset,hx::Null< Int >  __o_format,hx::Null< Bool >  __o_premultiplied){
Int format = __o_format.Default(0);
Bool premultiplied = __o_premultiplied.Default(false);
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","readUInt8",0x0a985ee1,"lime.math.color._ARGB.ARGB_Impl_.readUInt8","lime/math/color/ARGB.hx",53,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(premultiplied,"premultiplied")
HXLINE(  55)		switch((int)(format)){
            			case (int)0: {
HXLINE(  63)				Int byteOffset = (data->byteOffset + (offset + (int)1));
HXDLIN(  63)				Int _hx_tmp = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN(  63)				Int a = ((int)_hx_tmp & (int)(int)255);
HXDLIN(  63)				Int byteOffset1 = (data->byteOffset + (offset + (int)2));
HXDLIN(  63)				Int _hx_tmp1 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN(  63)				Int r = ((int)_hx_tmp1 & (int)(int)255);
HXDLIN(  63)				Int byteOffset2 = (data->byteOffset + (offset + (int)3));
HXDLIN(  63)				Int _hx_tmp2 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN(  63)				Int g = ((int)_hx_tmp2 & (int)(int)255);
HXDLIN(  63)				Int byteOffset3 = (data->byteOffset + offset);
HXDLIN(  63)				Int _hx_tmp3 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN(  63)				this1 = ((int)((int)((int)((int)((int)a & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp3 & (int)(int)255) & (int)(int)255));
            			}
            			break;
            			case (int)1: {
HXLINE(  67)				Int byteOffset4 = (data->byteOffset + (offset + (int)2));
HXDLIN(  67)				Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN(  67)				Int a1 = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN(  67)				Int byteOffset5 = (data->byteOffset + (offset + (int)3));
HXDLIN(  67)				Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN(  67)				Int r1 = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN(  67)				Int byteOffset6 = (data->byteOffset + offset);
HXDLIN(  67)				Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN(  67)				Int g1 = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN(  67)				Int byteOffset7 = (data->byteOffset + (offset + (int)1));
HXDLIN(  67)				Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN(  67)				this1 = ((int)((int)((int)((int)((int)a1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)r1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp7 & (int)(int)255) & (int)(int)255));
            			}
            			break;
            			case (int)2: {
HXLINE(  59)				Int byteOffset8 = (data->byteOffset + (offset + (int)1));
HXDLIN(  59)				Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN(  59)				Int a2 = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN(  59)				Int byteOffset9 = (data->byteOffset + offset);
HXDLIN(  59)				Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN(  59)				Int r2 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN(  59)				Int byteOffset10 = (data->byteOffset + (offset + (int)3));
HXDLIN(  59)				Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN(  59)				Int g2 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN(  59)				Int byteOffset11 = (data->byteOffset + (offset + (int)2));
HXDLIN(  59)				Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN(  59)				this1 = ((int)((int)((int)((int)((int)a2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)r2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp11 & (int)(int)255) & (int)(int)255));
            			}
            			break;
            		}
HXLINE(  71)		if (premultiplied) {
HXLINE(  73)			Bool _hx_tmp12;
HXDLIN(  73)			if ((((int)hx::UShr(this1,(int)24) & (int)(int)255) != (int)0)) {
HXLINE(  73)				_hx_tmp12 = (((int)hx::UShr(this1,(int)24) & (int)(int)255) != (int)255);
            			}
            			else {
HXLINE(  73)				_hx_tmp12 = false;
            			}
HXDLIN(  73)			if (_hx_tmp12) {
HXLINE(  73)				::lime::math::color::_ARGB::ARGB_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)hx::UShr(this1,(int)24) & (int)(int)255));
HXDLIN(  73)				{
HXLINE(  73)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  73)					Float _hx_tmp13 = (((int)hx::UShr(this1,(int)16) & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::unmult);
HXDLIN(  73)					Int idx = ::Math_obj::floor(_hx_tmp13);
HXDLIN(  73)					Int byteOffset12 = (this2->byteOffset + idx);
HXDLIN(  73)					Int _hx_tmp14 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset12);
HXDLIN(  73)					Int r3 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN(  73)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  73)					Float _hx_tmp15 = (((int)hx::UShr(this1,(int)8) & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::unmult);
HXDLIN(  73)					Int idx1 = ::Math_obj::floor(_hx_tmp15);
HXDLIN(  73)					Int byteOffset13 = (this3->byteOffset + idx1);
HXDLIN(  73)					Int _hx_tmp16 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset13);
HXDLIN(  73)					Int g3 = ((int)_hx_tmp16 & (int)(int)255);
HXDLIN(  73)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  73)					Float _hx_tmp17 = (((int)this1 & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::unmult);
HXDLIN(  73)					Int idx2 = ::Math_obj::floor(_hx_tmp17);
HXDLIN(  73)					Int byteOffset14 = (this4->byteOffset + idx2);
HXDLIN(  73)					Int _hx_tmp18 = ::__hxcpp_memory_get_byte(this4->buffer->b,byteOffset14);
HXDLIN(  73)					Int b = ((int)_hx_tmp18 & (int)(int)255);
HXDLIN(  73)					Int _hx_tmp19 = ((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)r3 & (int)(int)255) << (int)(int)16));
HXDLIN(  73)					this1 = ((int)((int)_hx_tmp19 | (int)((int)((int)g3 & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ARGB_Impl__obj,readUInt8,(void))

void ARGB_Impl__obj::set(Int this1,Int a,Int r,Int g,Int b){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","set",0x0597f57b,"lime.math.color._ARGB.ARGB_Impl_.set","lime/math/color/ARGB.hx",82,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(b,"b")
HXLINE(  82)		this1 = ((int)((int)((int)((int)((int)a & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ARGB_Impl__obj,set,(void))

void ARGB_Impl__obj::unmultiplyAlpha(Int this1){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","unmultiplyAlpha",0x19a303fa,"lime.math.color._ARGB.ARGB_Impl_.unmultiplyAlpha","lime/math/color/ARGB.hx",89,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  89)		Bool _hx_tmp;
HXDLIN(  89)		if ((((int)hx::UShr(this1,(int)24) & (int)(int)255) != (int)0)) {
HXLINE(  89)			_hx_tmp = (((int)hx::UShr(this1,(int)24) & (int)(int)255) != (int)255);
            		}
            		else {
HXLINE(  89)			_hx_tmp = false;
            		}
HXDLIN(  89)		if (_hx_tmp) {
HXLINE(  91)			::lime::math::color::_ARGB::ARGB_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)hx::UShr(this1,(int)24) & (int)(int)255));
HXLINE(  92)			{
HXLINE(  92)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)				Float _hx_tmp1 = (((int)hx::UShr(this1,(int)16) & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::unmult);
HXDLIN(  92)				Int idx = ::Math_obj::floor(_hx_tmp1);
HXDLIN(  92)				Int byteOffset = (this2->byteOffset + idx);
HXDLIN(  92)				Int _hx_tmp2 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset);
HXDLIN(  92)				Int r = ((int)_hx_tmp2 & (int)(int)255);
HXDLIN(  92)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)				Float _hx_tmp3 = (((int)hx::UShr(this1,(int)8) & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::unmult);
HXDLIN(  92)				Int idx1 = ::Math_obj::floor(_hx_tmp3);
HXDLIN(  92)				Int byteOffset1 = (this3->byteOffset + idx1);
HXDLIN(  92)				Int _hx_tmp4 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset1);
HXDLIN(  92)				Int g = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN(  92)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  92)				Float _hx_tmp5 = (((int)this1 & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::unmult);
HXDLIN(  92)				Int idx2 = ::Math_obj::floor(_hx_tmp5);
HXDLIN(  92)				Int byteOffset2 = (this4->byteOffset + idx2);
HXDLIN(  92)				Int _hx_tmp6 = ::__hxcpp_memory_get_byte(this4->buffer->b,byteOffset2);
HXDLIN(  92)				Int b = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN(  92)				Int _hx_tmp7 = ((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16));
HXDLIN(  92)				this1 = ((int)((int)_hx_tmp7 | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,unmultiplyAlpha,(void))

void ARGB_Impl__obj::writeUInt8(Int this1, ::lime::utils::ArrayBufferView data,Int offset,hx::Null< Int >  __o_format,hx::Null< Bool >  __o_premultiplied){
Int format = __o_format.Default(0);
Bool premultiplied = __o_premultiplied.Default(false);
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","writeUInt8",0x4b67cd66,"lime.math.color._ARGB.ARGB_Impl_.writeUInt8","lime/math/color/ARGB.hx",99,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(premultiplied,"premultiplied")
HXLINE( 101)		if (premultiplied) {
HXLINE( 103)			if ((((int)hx::UShr(this1,(int)24) & (int)(int)255) == (int)0)) {
HXLINE( 103)				this1 = (int)0;
            			}
            			else {
HXLINE( 103)				if ((((int)hx::UShr(this1,(int)24) & (int)(int)255) != (int)255)) {
HXLINE( 103)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 103)					Int byteOffset = (this2->byteOffset + (((int)hx::UShr(this1,(int)24) & (int)(int)255) * (int)4));
HXDLIN( 103)					 ::Dynamic _hx_tmp = ::__hxcpp_memory_get_ui32(this2->buffer->b,byteOffset);
HXDLIN( 103)					::lime::math::color::_ARGB::ARGB_Impl__obj::a16 = _hx_tmp;
HXDLIN( 103)					{
HXLINE( 103)						Int r = ((int)(((int)hx::UShr(this1,(int)16) & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::a16) >> (int)(int)16);
HXDLIN( 103)						Int g = ((int)(((int)hx::UShr(this1,(int)8) & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::a16) >> (int)(int)16);
HXDLIN( 103)						Int b = ((int)(((int)this1 & (int)(int)255) * ::lime::math::color::_ARGB::ARGB_Impl__obj::a16) >> (int)(int)16);
HXDLIN( 103)						Int _hx_tmp1 = ((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)r & (int)(int)255) << (int)(int)16));
HXDLIN( 103)						this1 = ((int)((int)_hx_tmp1 | (int)((int)((int)g & (int)(int)255) << (int)(int)8)) | (int)((int)b & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 107)		switch((int)(format)){
            			case (int)0: {
HXLINE( 118)				{
HXLINE( 118)					HX_VARI( Int,val) = ((int)hx::UShr(this1,(int)16) & (int)(int)255);
HXDLIN( 118)					{
HXLINE( 118)						Int byteOffset1 = (data->byteOffset + offset);
HXDLIN( 118)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset1,val);
            					}
            				}
HXLINE( 119)				{
HXLINE( 119)					HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(this1,(int)8) & (int)(int)255);
HXDLIN( 119)					{
HXLINE( 119)						Int byteOffset2 = (data->byteOffset + (offset + (int)1));
HXDLIN( 119)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset2,val1);
            					}
            				}
HXLINE( 120)				{
HXLINE( 120)					HX_VARI_NAME( Int,val2,"val") = ((int)this1 & (int)(int)255);
HXDLIN( 120)					{
HXLINE( 120)						Int byteOffset3 = (data->byteOffset + (offset + (int)2));
HXDLIN( 120)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset3,val2);
            					}
            				}
HXLINE( 121)				{
HXLINE( 121)					HX_VARI_NAME( Int,val3,"val") = ((int)hx::UShr(this1,(int)24) & (int)(int)255);
HXDLIN( 121)					{
HXLINE( 121)						Int byteOffset4 = (data->byteOffset + (offset + (int)3));
HXDLIN( 121)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset4,val3);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 125)				{
HXLINE( 125)					HX_VARI_NAME( Int,val4,"val") = ((int)hx::UShr(this1,(int)24) & (int)(int)255);
HXDLIN( 125)					{
HXLINE( 125)						Int byteOffset5 = (data->byteOffset + offset);
HXDLIN( 125)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset5,val4);
            					}
            				}
HXLINE( 126)				{
HXLINE( 126)					HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(this1,(int)16) & (int)(int)255);
HXDLIN( 126)					{
HXLINE( 126)						Int byteOffset6 = (data->byteOffset + (offset + (int)1));
HXDLIN( 126)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset6,val5);
            					}
            				}
HXLINE( 127)				{
HXLINE( 127)					HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(this1,(int)8) & (int)(int)255);
HXDLIN( 127)					{
HXLINE( 127)						Int byteOffset7 = (data->byteOffset + (offset + (int)2));
HXDLIN( 127)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset7,val6);
            					}
            				}
HXLINE( 128)				{
HXLINE( 128)					HX_VARI_NAME( Int,val7,"val") = ((int)this1 & (int)(int)255);
HXDLIN( 128)					{
HXLINE( 128)						Int byteOffset8 = (data->byteOffset + (offset + (int)3));
HXDLIN( 128)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset8,val7);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 111)				{
HXLINE( 111)					HX_VARI_NAME( Int,val8,"val") = ((int)this1 & (int)(int)255);
HXDLIN( 111)					{
HXLINE( 111)						Int byteOffset9 = (data->byteOffset + offset);
HXDLIN( 111)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset9,val8);
            					}
            				}
HXLINE( 112)				{
HXLINE( 112)					HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(this1,(int)8) & (int)(int)255);
HXDLIN( 112)					{
HXLINE( 112)						Int byteOffset10 = (data->byteOffset + (offset + (int)1));
HXDLIN( 112)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset10,val9);
            					}
            				}
HXLINE( 113)				{
HXLINE( 113)					HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(this1,(int)16) & (int)(int)255);
HXDLIN( 113)					{
HXLINE( 113)						Int byteOffset11 = (data->byteOffset + (offset + (int)2));
HXDLIN( 113)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset11,val10);
            					}
            				}
HXLINE( 114)				{
HXLINE( 114)					HX_VARI_NAME( Int,val11,"val") = ((int)hx::UShr(this1,(int)24) & (int)(int)255);
HXDLIN( 114)					{
HXLINE( 114)						Int byteOffset12 = (data->byteOffset + (offset + (int)3));
HXDLIN( 114)						::__hxcpp_memory_set_byte(data->buffer->b,byteOffset12,val11);
            					}
            				}
            			}
            			break;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ARGB_Impl__obj,writeUInt8,(void))

Int ARGB_Impl__obj::_hx___fromBGRA(Int bgra){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","__fromBGRA",0x6a30d585,"lime.math.color._ARGB.ARGB_Impl_.__fromBGRA","lime/math/color/ARGB.hx",137,0x9a2de539)
            	HX_STACK_ARG(bgra,"bgra")
HXLINE( 137)		HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 137)		HX_VARI( Int,argb) = this1;
HXDLIN( 137)		argb = ((int)((int)((int)((int)((int)((int)bgra & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 137)		return argb;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,_hx___fromBGRA,return )

Int ARGB_Impl__obj::_hx___fromRGBA(Int rgba){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","__fromRGBA",0x74c43185,"lime.math.color._ARGB.ARGB_Impl_.__fromRGBA","lime/math/color/ARGB.hx",144,0x9a2de539)
            	HX_STACK_ARG(rgba,"rgba")
HXLINE( 144)		HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 144)		HX_VARI( Int,argb) = this1;
HXDLIN( 144)		argb = ((int)((int)((int)((int)((int)((int)rgba & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(rgba,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(rgba,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(rgba,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 144)		return argb;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,_hx___fromRGBA,return )

Int ARGB_Impl__obj::get_a(Int this1){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","get_a",0xaacde751,"lime.math.color._ARGB.ARGB_Impl_.get_a","lime/math/color/ARGB.hx",158,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 158)		return ((int)hx::UShr(this1,(int)24) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,get_a,return )

Int ARGB_Impl__obj::set_a(Int this1,Int value){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","set_a",0x939cdd5d,"lime.math.color._ARGB.ARGB_Impl_.set_a","lime/math/color/ARGB.hx",164,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 166)		Int _hx_tmp = ((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(this1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(this1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 166)		Int _hx_tmp1 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 166)		this1 = ((int)_hx_tmp | (int)_hx_tmp1);
HXLINE( 167)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ARGB_Impl__obj,set_a,return )

Int ARGB_Impl__obj::get_b(Int this1){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","get_b",0xaacde752,"lime.math.color._ARGB.ARGB_Impl_.get_b","lime/math/color/ARGB.hx",174,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 174)		return ((int)this1 & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,get_b,return )

Int ARGB_Impl__obj::set_b(Int this1,Int value){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","set_b",0x939cdd5e,"lime.math.color._ARGB.ARGB_Impl_.set_b","lime/math/color/ARGB.hx",179,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 181)		Int _hx_tmp = ((int)((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(this1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(this1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 181)		this1 = ((int)_hx_tmp | (int)((int)value & (int)(int)255));
HXLINE( 182)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ARGB_Impl__obj,set_b,return )

Int ARGB_Impl__obj::get_g(Int this1){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","get_g",0xaacde757,"lime.math.color._ARGB.ARGB_Impl_.get_g","lime/math/color/ARGB.hx",189,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 189)		return ((int)hx::UShr(this1,(int)8) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,get_g,return )

Int ARGB_Impl__obj::set_g(Int this1,Int value){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","set_g",0x939cdd63,"lime.math.color._ARGB.ARGB_Impl_.set_g","lime/math/color/ARGB.hx",194,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 196)		Int _hx_tmp = ((int)((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(this1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value & (int)(int)255) << (int)(int)8));
HXDLIN( 196)		Int _hx_tmp1 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 196)		this1 = ((int)_hx_tmp | (int)_hx_tmp1);
HXLINE( 197)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ARGB_Impl__obj,set_g,return )

Int ARGB_Impl__obj::get_r(Int this1){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","get_r",0xaacde762,"lime.math.color._ARGB.ARGB_Impl_.get_r","lime/math/color/ARGB.hx",204,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 204)		return ((int)hx::UShr(this1,(int)16) & (int)(int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ARGB_Impl__obj,get_r,return )

Int ARGB_Impl__obj::set_r(Int this1,Int value){
            	HX_STACK_FRAME("lime.math.color._ARGB.ARGB_Impl_","set_r",0x939cdd6e,"lime.math.color._ARGB.ARGB_Impl_.set_r","lime/math/color/ARGB.hx",209,0x9a2de539)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 211)		Int _hx_tmp = ((int)((int)((int)((int)((int)hx::UShr(this1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(this1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 211)		Int _hx_tmp1 = ((int)((int)this1 & (int)(int)255) & (int)(int)255);
HXDLIN( 211)		this1 = ((int)_hx_tmp | (int)_hx_tmp1);
HXLINE( 212)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ARGB_Impl__obj,set_r,return )


ARGB_Impl__obj::ARGB_Impl__obj()
{
}

bool ARGB_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"get_a") ) { outValue = get_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_a") ) { outValue = set_a_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_b") ) { outValue = get_b_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_b") ) { outValue = set_b_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_g") ) { outValue = get_g_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_g") ) { outValue = set_g_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_r") ) { outValue = get_r_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_r") ) { outValue = set_r_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readUInt8") ) { outValue = readUInt8_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"writeUInt8") ) { outValue = writeUInt8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__fromBGRA") ) { outValue = _hx___fromBGRA_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__fromRGBA") ) { outValue = _hx___fromRGBA_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ARGB_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo ARGB_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ARGB_Impl__obj::a16,HX_HCSTRING("a16","\x86","\xc5","\x49","\x00")},
	{hx::fsFloat,(void *) &ARGB_Impl__obj::unmult,HX_HCSTRING("unmult","\xc9","\x6e","\x3a","\x66")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ARGB_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ARGB_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ARGB_Impl__obj::a16,"a16");
	HX_MARK_MEMBER_NAME(ARGB_Impl__obj::unmult,"unmult");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ARGB_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ARGB_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ARGB_Impl__obj::a16,"a16");
	HX_VISIT_MEMBER_NAME(ARGB_Impl__obj::unmult,"unmult");
};

#endif

hx::Class ARGB_Impl__obj::__mClass;

static ::String ARGB_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("a16","\x86","\xc5","\x49","\x00"),
	HX_HCSTRING("unmult","\xc9","\x6e","\x3a","\x66"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("readUInt8","\x48","\x9c","\x5d","\x5f"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("writeUInt8","\x1f","\x4a","\x38","\x23"),
	HX_HCSTRING("__fromBGRA","\x3e","\x52","\x01","\x42"),
	HX_HCSTRING("__fromRGBA","\x3e","\xae","\x94","\x4c"),
	HX_HCSTRING("get_a","\x38","\xa5","\x60","\x91"),
	HX_HCSTRING("set_a","\x44","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_b","\x39","\xa5","\x60","\x91"),
	HX_HCSTRING("set_b","\x45","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_g","\x3e","\xa5","\x60","\x91"),
	HX_HCSTRING("set_g","\x4a","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_r","\x49","\xa5","\x60","\x91"),
	HX_HCSTRING("set_r","\x55","\x9b","\x2f","\x7a"),
	::String(null())
};

void ARGB_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math.color._ARGB.ARGB_Impl_","\xc7","\x99","\x5a","\xce");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ARGB_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ARGB_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ARGB_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ARGB_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ARGB_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ARGB_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ARGB_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace math
} // end namespace color
} // end namespace _ARGB
