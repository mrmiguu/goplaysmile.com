// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_16__new,"lime.math._Matrix4.Matrix4_Impl_","_new",0x84b003e9,"lime.math._Matrix4.Matrix4_Impl_._new","lime/math/Matrix4.hx",16,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_31_append,"lime.math._Matrix4.Matrix4_Impl_","append",0x0e638262,"lime.math._Matrix4.Matrix4_Impl_.append","lime/math/Matrix4.hx",31,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_65_appendRotation,"lime.math._Matrix4.Matrix4_Impl_","appendRotation",0xe357adc0,"lime.math._Matrix4.Matrix4_Impl_.appendRotation","lime/math/Matrix4.hx",65,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_83_appendScale,"lime.math._Matrix4.Matrix4_Impl_","appendScale",0x8a9ad8c8,"lime.math._Matrix4.Matrix4_Impl_.appendScale","lime/math/Matrix4.hx",83,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_88_appendTranslation,"lime.math._Matrix4.Matrix4_Impl_","appendTranslation",0xe6447daf,"lime.math._Matrix4.Matrix4_Impl_.appendTranslation","lime/math/Matrix4.hx",88,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_99_clone,"lime.math._Matrix4.Matrix4_Impl_","clone",0xe1a2dbd5,"lime.math._Matrix4.Matrix4_Impl_.clone","lime/math/Matrix4.hx",99,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_106_copyColumnFrom,"lime.math._Matrix4.Matrix4_Impl_","copyColumnFrom",0x5224fffd,"lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom","lime/math/Matrix4.hx",106,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_138_copyColumnTo,"lime.math._Matrix4.Matrix4_Impl_","copyColumnTo",0xcc64e54e,"lime.math._Matrix4.Matrix4_Impl_.copyColumnTo","lime/math/Matrix4.hx",138,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_170_copyFrom,"lime.math._Matrix4.Matrix4_Impl_","copyFrom",0xc27fde47,"lime.math._Matrix4.Matrix4_Impl_.copyFrom","lime/math/Matrix4.hx",170,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_174_copythisFrom,"lime.math._Matrix4.Matrix4_Impl_","copythisFrom",0x28530e25,"lime.math._Matrix4.Matrix4_Impl_.copythisFrom","lime/math/Matrix4.hx",174,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_189_copythisTo,"lime.math._Matrix4.Matrix4_Impl_","copythisTo",0xe75f9976,"lime.math._Matrix4.Matrix4_Impl_.copythisTo","lime/math/Matrix4.hx",189,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_206_copyRowFrom,"lime.math._Matrix4.Matrix4_Impl_","copyRowFrom",0xc4e0b7e7,"lime.math._Matrix4.Matrix4_Impl_.copyRowFrom","lime/math/Matrix4.hx",206,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_240_create2D,"lime.math._Matrix4.Matrix4_Impl_","create2D",0x26131c56,"lime.math._Matrix4.Matrix4_Impl_.create2D","lime/math/Matrix4.hx",240,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_258_createABCD,"lime.math._Matrix4.Matrix4_Impl_","createABCD",0x303c4746,"lime.math._Matrix4.Matrix4_Impl_.createABCD","lime/math/Matrix4.hx",258,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_268_createOrtho,"lime.math._Matrix4.Matrix4_Impl_","createOrtho",0x33fdc114,"lime.math._Matrix4.Matrix4_Impl_.createOrtho","lime/math/Matrix4.hx",268,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_286_copyRowTo,"lime.math._Matrix4.Matrix4_Impl_","copyRowTo",0x543beeb8,"lime.math._Matrix4.Matrix4_Impl_.copyRowTo","lime/math/Matrix4.hx",286,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_322_copyToMatrix4,"lime.math._Matrix4.Matrix4_Impl_","copyToMatrix4",0x1032009b,"lime.math._Matrix4.Matrix4_Impl_.copyToMatrix4","lime/math/Matrix4.hx",322,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_426_deltaTransformVector,"lime.math._Matrix4.Matrix4_Impl_","deltaTransformVector",0x66f080bf,"lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector","lime/math/Matrix4.hx",426,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_439_identity,"lime.math._Matrix4.Matrix4_Impl_","identity",0xb34e17c6,"lime.math._Matrix4.Matrix4_Impl_.identity","lime/math/Matrix4.hx",439,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_461_interpolate,"lime.math._Matrix4.Matrix4_Impl_","interpolate",0xf4884739,"lime.math._Matrix4.Matrix4_Impl_.interpolate","lime/math/Matrix4.hx",461,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_478_interpolateTo,"lime.math._Matrix4.Matrix4_Impl_","interpolateTo",0x5c939114,"lime.math._Matrix4.Matrix4_Impl_.interpolateTo","lime/math/Matrix4.hx",478,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_487_invert,"lime.math._Matrix4.Matrix4_Impl_","invert",0x1e68879e,"lime.math._Matrix4.Matrix4_Impl_.invert","lime/math/Matrix4.hx",487,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_525_pointAt,"lime.math._Matrix4.Matrix4_Impl_","pointAt",0x903e77db,"lime.math._Matrix4.Matrix4_Impl_.pointAt","lime/math/Matrix4.hx",525,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_592_prepend,"lime.math._Matrix4.Matrix4_Impl_","prepend",0x76fd6d86,"lime.math._Matrix4.Matrix4_Impl_.prepend","lime/math/Matrix4.hx",592,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_626_prependRotation,"lime.math._Matrix4.Matrix4_Impl_","prependRotation",0x52475ce4,"lime.math._Matrix4.Matrix4_Impl_.prependRotation","lime/math/Matrix4.hx",626,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_644_prependScale,"lime.math._Matrix4.Matrix4_Impl_","prependScale",0x9a060b24,"lime.math._Matrix4.Matrix4_Impl_.prependScale","lime/math/Matrix4.hx",644,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_649_prependTranslation,"lime.math._Matrix4.Matrix4_Impl_","prependTranslation",0xfad7dd0b,"lime.math._Matrix4.Matrix4_Impl_.prependTranslation","lime/math/Matrix4.hx",649,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_742_transformVector,"lime.math._Matrix4.Matrix4_Impl_","transformVector",0x3cbf39c7,"lime.math._Matrix4.Matrix4_Impl_.transformVector","lime/math/Matrix4.hx",742,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_755_transformVectors,"lime.math._Matrix4.Matrix4_Impl_","transformVectors",0xea9354cc,"lime.math._Matrix4.Matrix4_Impl_.transformVectors","lime/math/Matrix4.hx",755,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_774_transpose,"lime.math._Matrix4.Matrix4_Impl_","transpose",0x2d08b4f1,"lime.math._Matrix4.Matrix4_Impl_.transpose","lime/math/Matrix4.hx",774,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_792_getAxisRotation,"lime.math._Matrix4.Matrix4_Impl_","getAxisRotation",0x61f6832d,"lime.math._Matrix4.Matrix4_Impl_.getAxisRotation","lime/math/Matrix4.hx",792,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_833_get_determinant,"lime.math._Matrix4.Matrix4_Impl_","get_determinant",0x5d0323a4,"lime.math._Matrix4.Matrix4_Impl_.get_determinant","lime/math/Matrix4.hx",833,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_845_get_position,"lime.math._Matrix4.Matrix4_Impl_","get_position",0x55830b3a,"lime.math._Matrix4.Matrix4_Impl_.get_position","lime/math/Matrix4.hx",845,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_850_set_position,"lime.math._Matrix4.Matrix4_Impl_","set_position",0x6a7c2eae,"lime.math._Matrix4.Matrix4_Impl_.set_position","lime/math/Matrix4.hx",850,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_862_get,"lime.math._Matrix4.Matrix4_Impl_","get",0x10b0bb0e,"lime.math._Matrix4.Matrix4_Impl_.get","lime/math/Matrix4.hx",862,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_867_set,"lime.math._Matrix4.Matrix4_Impl_","set",0x10b9d61a,"lime.math._Matrix4.Matrix4_Impl_.set","lime/math/Matrix4.hx",867,0xeb65dbd8)
HX_DEFINE_STACK_FRAME(_hx_pos_a8b6e1b1a7c59cb4_10_boot,"lime.math._Matrix4.Matrix4_Impl_","boot",0x86ac72ba,"lime.math._Matrix4.Matrix4_Impl_.boot","lime/math/Matrix4.hx",10,0xeb65dbd8)
static const Float _hx_array_data_cbf9fee6_42[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
namespace lime{
namespace math{
namespace _Matrix4{

void Matrix4_Impl__obj::__construct() { }

Dynamic Matrix4_Impl__obj::__CreateEmpty() { return new Matrix4_Impl__obj; }

void *Matrix4_Impl__obj::_hx_vtable = 0;

Dynamic Matrix4_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix4_Impl__obj > _hx_result = new Matrix4_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Matrix4_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71ea7962;
}

::Array< Float > Matrix4_Impl__obj::_hx___identity;

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::_new( ::lime::utils::ArrayBufferView data){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_16__new)
            	HX_STACK_ARG(data,"data")
HXLINE(  16)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXLINE(  18)		bool _hx_tmp;
HXDLIN(  18)		if (hx::IsNotNull( data )) {
HXLINE(  18)			_hx_tmp = (data->length == (int)16);
            		}
            		else {
HXLINE(  18)			_hx_tmp = false;
            		}
HXDLIN(  18)		if (_hx_tmp) {
HXLINE(  20)			this1 = data;
            		}
            		else {
HXLINE(  24)			HX_VARI( ::cpp::VirtualArray,array) = ::lime::math::_Matrix4::Matrix4_Impl__obj::_hx___identity;
HXDLIN(  24)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(  24)			if (hx::IsNotNull( array )) {
HXLINE(  24)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN(  24)				_this->byteOffset = (int)0;
HXDLIN(  24)				_this->length = array->get_length();
HXDLIN(  24)				_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  24)				_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  24)				_this->copyFromArray(array,null());
HXDLIN(  24)				this2 = _this;
            			}
            			else {
HXLINE(  24)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN(  24)			this1 = this2;
            		}
HXLINE(  16)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,_new,return )

void Matrix4_Impl__obj::append( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView lhs){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_31_append)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(lhs,"lhs")
HXLINE(  33)		HX_VARI( Float,m111) = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN(  33)		HX_VARI( Float,m121) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN(  33)		HX_VARI( Float,m131) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN(  33)		HX_VARI( Float,m141) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN(  33)		HX_VARI( Float,m112) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN(  33)		HX_VARI( Float,m122) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN(  33)		HX_VARI( Float,m132) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN(  33)		HX_VARI( Float,m142) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN(  33)		HX_VARI( Float,m113) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN(  33)		HX_VARI( Float,m123) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN(  33)		HX_VARI( Float,m133) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN(  33)		HX_VARI( Float,m143) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN(  33)		HX_VARI( Float,m114) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN(  33)		HX_VARI( Float,m124) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN(  33)		HX_VARI( Float,m134) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN(  33)		HX_VARI( Float,m144) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXDLIN(  33)		HX_VARI( Float,m211) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)0);
HXDLIN(  33)		HX_VARI( Float,m221) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)4);
HXDLIN(  33)		HX_VARI( Float,m231) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)8);
HXDLIN(  33)		HX_VARI( Float,m241) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)12);
HXDLIN(  33)		HX_VARI( Float,m212) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)1);
HXDLIN(  33)		HX_VARI( Float,m222) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)5);
HXDLIN(  33)		HX_VARI( Float,m232) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)9);
HXDLIN(  33)		HX_VARI( Float,m242) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)13);
HXDLIN(  33)		HX_VARI( Float,m213) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)2);
HXDLIN(  33)		HX_VARI( Float,m223) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)6);
HXDLIN(  33)		HX_VARI( Float,m233) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)10);
HXDLIN(  33)		HX_VARI( Float,m243) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)14);
HXDLIN(  33)		HX_VARI( Float,m214) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)3);
HXDLIN(  33)		HX_VARI( Float,m224) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)7);
HXDLIN(  33)		HX_VARI( Float,m234) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)11);
HXDLIN(  33)		HX_VARI( Float,m244) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)15);
HXLINE(  42)		::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
HXLINE(  43)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
HXLINE(  44)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
HXLINE(  45)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
HXLINE(  47)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
HXLINE(  48)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
HXLINE(  49)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
HXLINE(  50)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
HXLINE(  52)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
HXLINE(  53)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
HXLINE(  54)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
HXLINE(  55)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
HXLINE(  57)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
HXLINE(  58)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
HXLINE(  59)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
HXLINE(  60)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,append,(void))

void Matrix4_Impl__obj::appendRotation( ::lime::utils::ArrayBufferView this1,Float degrees, ::lime::math::Vector4 axis, ::lime::math::Vector4 pivotPoint){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_65_appendRotation)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE(  67)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::getAxisRotation(axis->x,axis->y,axis->z,degrees);
HXLINE(  69)		if (hx::IsNotNull( pivotPoint )) {
HXLINE(  72)			::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(m,pivotPoint->x,pivotPoint->y,pivotPoint->z);
            		}
HXLINE(  76)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendRotation,(void))

void Matrix4_Impl__obj::appendScale( ::lime::utils::ArrayBufferView this1,Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_83_appendScale)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE(  83)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN(  83)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(  83)		if (hx::IsNotNull( array )) {
HXLINE(  83)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN(  83)			_this->byteOffset = (int)0;
HXDLIN(  83)			_this->length = array->get_length();
HXDLIN(  83)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN(  83)			_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN(  83)			_this->copyFromArray(array,null());
HXDLIN(  83)			this2 = _this;
            		}
            		else {
HXLINE(  83)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  83)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this1,::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendScale,(void))

void Matrix4_Impl__obj::appendTranslation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_88_appendTranslation)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(  90)		{
HXLINE(  90)			HX_VARI( Float,val) = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)) + x);
HXDLIN(  90)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val);
            		}
HXLINE(  91)		{
HXLINE(  91)			HX_VARI_NAME( Float,val1,"val") = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)) + y);
HXDLIN(  91)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val1);
            		}
HXLINE(  92)		{
HXLINE(  92)			HX_VARI_NAME( Float,val2,"val") = (::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)) + z);
HXDLIN(  92)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val2);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendTranslation,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::clone( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_99_clone)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  99)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(  99)		if (hx::IsNotNull( this1 )) {
HXLINE(  99)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN(  99)			HX_VARI(  ::haxe::io::Bytes,srcData) = this1->buffer;
HXDLIN(  99)			HX_VARI( int,srcLength) = this1->length;
HXDLIN(  99)			HX_VARI( int,srcByteOffset) = this1->byteOffset;
HXDLIN(  99)			if ((this1->type == _this->type)) {
HXLINE(  99)				HX_VARI( int,cloneLength) = (srcData->length - srcByteOffset);
HXDLIN(  99)				_this->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  99)				_this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            			}
            			else {
HXLINE(  99)				HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            			}
HXDLIN(  99)			_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  99)			_this->byteOffset = (int)0;
HXDLIN(  99)			_this->length = srcLength;
HXDLIN(  99)			this2 = _this;
            		}
            		else {
HXLINE(  99)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  99)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,clone,return )

void Matrix4_Impl__obj::copyColumnFrom( ::lime::utils::ArrayBufferView this1,int column, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_106_copyColumnFrom)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector,"vector")
HXLINE( 106)		switch((int)(column)){
            			case (int)0: {
HXLINE( 109)				::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,vector->x);
HXLINE( 110)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),vector->y);
HXLINE( 111)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),vector->z);
HXLINE( 112)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),vector->w);
            			}
            			break;
            			case (int)1: {
HXLINE( 114)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),vector->x);
HXLINE( 115)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),vector->y);
HXLINE( 116)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),vector->z);
HXLINE( 117)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),vector->w);
            			}
            			break;
            			case (int)2: {
HXLINE( 119)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),vector->x);
HXLINE( 120)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),vector->y);
HXLINE( 121)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),vector->z);
HXLINE( 122)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),vector->w);
            			}
            			break;
            			case (int)3: {
HXLINE( 124)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),vector->x);
HXLINE( 125)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),vector->y);
HXLINE( 126)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),vector->z);
HXLINE( 127)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),vector->w);
            			}
            			break;
            			default:{
HXLINE( 129)				HX_STACK_DO_THROW(((HX_("Error, Column ",ce,33,bf,79) + column) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyColumnFrom,(void))

void Matrix4_Impl__obj::copyColumnTo( ::lime::utils::ArrayBufferView this1,int column, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_138_copyColumnTo)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector,"vector")
HXLINE( 138)		switch((int)(column)){
            			case (int)0: {
HXLINE( 141)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXLINE( 142)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXLINE( 143)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXLINE( 144)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
            			}
            			break;
            			case (int)1: {
HXLINE( 146)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXLINE( 147)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXLINE( 148)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE( 149)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
            			}
            			break;
            			case (int)2: {
HXLINE( 151)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXLINE( 152)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXLINE( 153)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 154)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
            			}
            			break;
            			case (int)3: {
HXLINE( 156)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXLINE( 157)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXLINE( 158)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 159)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
            			}
            			break;
            			default:{
HXLINE( 161)				HX_STACK_DO_THROW(((HX_("Error, Column ",ce,33,bf,79) + column) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyColumnTo,(void))

void Matrix4_Impl__obj::copyFrom( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView other){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_170_copyFrom)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 170)		if (hx::IsNotNull( other )) {
HXLINE( 170)			this1->buffer->blit(((int)0 * this1->bytesPerElement),other->buffer,other->byteOffset,other->byteLength);
            		}
            		else {
HXLINE( 170)			HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,copyFrom,(void))

void Matrix4_Impl__obj::copythisFrom( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView array,hx::Null< int >  __o_index,hx::Null< bool >  __o_transposeValues){
int index = __o_index.Default(0);
bool transposeValues = __o_transposeValues.Default(false);
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_174_copythisFrom)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transposeValues,"transposeValues")
HXLINE( 176)		if (transposeValues) {
HXLINE( 177)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
HXLINE( 180)		{
HXLINE( 180)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 180)			HX_VARI( int,_g) = (array->length - index);
HXDLIN( 180)			while((_g1 < _g)){
HXLINE( 180)				_g1 = (_g1 + (int)1);
HXDLIN( 180)				HX_VARI( int,c) = (_g1 - (int)1);
HXLINE( 181)				{
HXLINE( 181)					HX_VARI( Float,val) = ::__hxcpp_memory_get_float(array->buffer->b,(array->byteOffset + ((c + index) * (int)4)));
HXDLIN( 181)					::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (c * (int)4)),val);
            				}
            			}
            		}
HXLINE( 183)		if (transposeValues) {
HXLINE( 184)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,copythisFrom,(void))

void Matrix4_Impl__obj::copythisTo( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView array,hx::Null< int >  __o_index,hx::Null< bool >  __o_transposeValues){
int index = __o_index.Default(0);
bool transposeValues = __o_transposeValues.Default(false);
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_189_copythisTo)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transposeValues,"transposeValues")
HXLINE( 191)		if (transposeValues) {
HXLINE( 192)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
HXLINE( 195)		{
HXLINE( 195)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 195)			HX_VARI( int,_g) = this1->length;
HXDLIN( 195)			while((_g1 < _g)){
HXLINE( 195)				_g1 = (_g1 + (int)1);
HXDLIN( 195)				HX_VARI( int,c) = (_g1 - (int)1);
HXLINE( 196)				{
HXLINE( 196)					HX_VARI( Float,val) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (c * (int)4)));
HXDLIN( 196)					::__hxcpp_memory_set_float(array->buffer->b,(array->byteOffset + ((c + index) * (int)4)),val);
            				}
            			}
            		}
HXLINE( 198)		if (transposeValues) {
HXLINE( 199)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,copythisTo,(void))

void Matrix4_Impl__obj::copyRowFrom( ::lime::utils::ArrayBufferView this1,int row, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_206_copyRowFrom)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector,"vector")
HXLINE( 206)		switch((int)(row)){
            			case (int)0: {
HXLINE( 209)				::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,vector->x);
HXLINE( 210)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),vector->y);
HXLINE( 211)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),vector->z);
HXLINE( 212)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),vector->w);
            			}
            			break;
            			case (int)1: {
HXLINE( 215)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),vector->x);
HXLINE( 216)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),vector->y);
HXLINE( 217)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),vector->z);
HXLINE( 218)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),vector->w);
            			}
            			break;
            			case (int)2: {
HXLINE( 221)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),vector->x);
HXLINE( 222)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),vector->y);
HXLINE( 223)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),vector->z);
HXLINE( 224)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),vector->w);
            			}
            			break;
            			case (int)3: {
HXLINE( 227)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),vector->x);
HXLINE( 228)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),vector->y);
HXLINE( 229)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),vector->z);
HXLINE( 230)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),vector->w);
            			}
            			break;
            			default:{
HXLINE( 233)				HX_STACK_DO_THROW(((HX_("Error, Row ",02,fb,19,d9) + row) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyRowFrom,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::create2D(Float x,Float y,hx::Null< Float >  __o_scale,hx::Null< Float >  __o_rotation){
Float scale = __o_scale.Default(1);
Float rotation = __o_rotation.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_240_create2D)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(rotation,"rotation")
HXLINE( 242)		HX_VARI( Float,theta) = ((Float)(rotation * ::Math_obj::PI) / (Float)((Float)180.0));
HXLINE( 243)		HX_VARI( Float,c) = ::Math_obj::cos(theta);
HXLINE( 244)		HX_VARI( Float,s) = ::Math_obj::sin(theta);
HXLINE( 246)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,(c * scale))->init(1,(-(s) * scale))->init(2,(int)0)->init(3,(int)0)->init(4,(s * scale))->init(5,(c * scale))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,x)->init(13,y)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 246)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 246)		if (hx::IsNotNull( array )) {
HXLINE( 246)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 246)			_this->byteOffset = (int)0;
HXDLIN( 246)			_this->length = array->get_length();
HXDLIN( 246)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 246)			_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 246)			_this->copyFromArray(array,null());
HXDLIN( 246)			this1 = _this;
            		}
            		else {
HXLINE( 246)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 246)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,create2D,return )

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::createABCD(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_258_createABCD)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 258)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,a)->init(1,b)->init(2,(int)0)->init(3,(int)0)->init(4,c)->init(5,d)->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,tx)->init(13,ty)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 258)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 258)		if (hx::IsNotNull( array )) {
HXLINE( 258)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 258)			_this->byteOffset = (int)0;
HXDLIN( 258)			_this->length = array->get_length();
HXDLIN( 258)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 258)			_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 258)			_this->copyFromArray(array,null());
HXDLIN( 258)			this1 = _this;
            		}
            		else {
HXLINE( 258)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 258)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix4_Impl__obj,createABCD,return )

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::createOrtho(Float x0,Float x1,Float y0,Float y1,Float zNear,Float zFar){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_268_createOrtho)
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(zNear,"zNear")
            	HX_STACK_ARG(zFar,"zFar")
HXLINE( 270)		HX_VARI( Float,sx) = ((Float)((Float)1.0) / (Float)(x1 - x0));
HXLINE( 271)		HX_VARI( Float,sy) = ((Float)((Float)1.0) / (Float)(y1 - y0));
HXLINE( 272)		HX_VARI( Float,sz) = ((Float)((Float)1.0) / (Float)(zFar - zNear));
HXLINE( 274)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,(((Float)2.0) * sx))->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(((Float)2.0) * sy))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(((Float)-2.0) * sz))->init(11,(int)0)->init(12,(-((x0 + x1)) * sx))->init(13,(-((y0 + y1)) * sy))->init(14,(-((zNear + zFar)) * sz))->init(15,(int)1);
HXDLIN( 274)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 274)		if (hx::IsNotNull( array )) {
HXLINE( 274)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 274)			_this->byteOffset = (int)0;
HXDLIN( 274)			_this->length = array->get_length();
HXDLIN( 274)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 274)			_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 274)			_this->copyFromArray(array,null());
HXDLIN( 274)			this1 = _this;
            		}
            		else {
HXLINE( 274)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 274)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix4_Impl__obj,createOrtho,return )

void Matrix4_Impl__obj::copyRowTo( ::lime::utils::ArrayBufferView this1,int row, ::lime::math::Vector4 vector){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_286_copyRowTo)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector,"vector")
HXLINE( 286)		switch((int)(row)){
            			case (int)0: {
HXLINE( 289)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXLINE( 290)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXLINE( 291)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXLINE( 292)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
            			}
            			break;
            			case (int)1: {
HXLINE( 295)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXLINE( 296)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXLINE( 297)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXLINE( 298)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
            			}
            			break;
            			case (int)2: {
HXLINE( 301)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXLINE( 302)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE( 303)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 304)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
            			}
            			break;
            			case (int)3: {
HXLINE( 307)				vector->x = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXLINE( 308)				vector->y = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXLINE( 309)				vector->z = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXLINE( 310)				vector->w = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
            			}
            			break;
            			default:{
HXLINE( 313)				HX_STACK_DO_THROW(((HX_("Error, Row ",02,fb,19,d9) + row) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyRowTo,(void))

void Matrix4_Impl__obj::copyToMatrix4( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView other){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_322_copyToMatrix4)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 322)		HX_VARI(  ::lime::utils::ArrayBufferView,_this) = other;
HXDLIN( 322)		if (hx::IsNotNull( this1 )) {
HXLINE( 322)			_this->buffer->blit(((int)0 * _this->bytesPerElement),this1->buffer,this1->byteOffset,this1->byteLength);
            		}
            		else {
HXLINE( 322)			HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,copyToMatrix4,(void))

 ::lime::math::Vector4 Matrix4_Impl__obj::deltaTransformVector( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 v){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_426_deltaTransformVector)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(v,"v")
HXLINE( 428)		HX_VARI( Float,x) = v->x;
HXDLIN( 428)		HX_VARI( Float,y) = v->y;
HXDLIN( 428)		HX_VARI( Float,z) = v->z;
HXLINE( 431)		Float _hx_tmp = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 431)		Float _hx_tmp1 = (_hx_tmp + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 431)		Float _hx_tmp2 = (_hx_tmp1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 431)		Float _hx_tmp3 = (_hx_tmp2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12)));
HXLINE( 432)		Float _hx_tmp4 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 432)		Float _hx_tmp5 = (_hx_tmp4 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 432)		Float _hx_tmp6 = (_hx_tmp5 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 432)		Float _hx_tmp7 = (_hx_tmp6 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28)));
HXLINE( 433)		Float _hx_tmp8 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 433)		Float _hx_tmp9 = (_hx_tmp8 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 433)		Float _hx_tmp10 = (_hx_tmp9 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXLINE( 430)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp7,(_hx_tmp10 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44))),(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,deltaTransformVector,return )

void Matrix4_Impl__obj::identity( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_439_identity)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 441)		::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,(int)1);
HXLINE( 442)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),(int)0);
HXLINE( 443)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),(int)0);
HXLINE( 444)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),(int)0);
HXLINE( 445)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),(int)0);
HXLINE( 446)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),(int)1);
HXLINE( 447)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),(int)0);
HXLINE( 448)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),(int)0);
HXLINE( 449)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),(int)0);
HXLINE( 450)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),(int)0);
HXLINE( 451)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),(int)1);
HXLINE( 452)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),(int)0);
HXLINE( 453)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),(int)0);
HXLINE( 454)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),(int)0);
HXLINE( 455)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),(int)0);
HXLINE( 456)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,identity,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::interpolate( ::lime::utils::ArrayBufferView thisMat, ::lime::utils::ArrayBufferView toMat,Float percent){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_461_interpolate)
            	HX_STACK_ARG(thisMat,"thisMat")
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 463)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 465)		{
HXLINE( 465)			HX_VARI( int,_g) = (int)0;
HXDLIN( 465)			while((_g < (int)16)){
HXLINE( 465)				_g = (_g + (int)1);
HXDLIN( 465)				HX_VARI( int,i) = (_g - (int)1);
HXLINE( 467)				Float _hx_tmp = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(thisMat,i);
HXDLIN( 467)				Float _hx_tmp1 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(toMat,i);
HXDLIN( 467)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,i,(_hx_tmp + ((_hx_tmp1 - ::lime::math::_Matrix4::Matrix4_Impl__obj::get(thisMat,i)) * percent)));
            			}
            		}
HXLINE( 471)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,interpolate,return )

void Matrix4_Impl__obj::interpolateTo( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView toMat,Float percent){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_478_interpolateTo)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 478)		HX_VARI( int,_g) = (int)0;
HXDLIN( 478)		while((_g < (int)16)){
HXLINE( 478)			_g = (_g + (int)1);
HXDLIN( 478)			HX_VARI( int,i) = (_g - (int)1);
HXLINE( 480)			{
HXLINE( 480)				HX_VARI( Float,val) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (i * (int)4)));
HXDLIN( 480)				HX_VARI_NAME( Float,val1,"val") = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(toMat,i);
HXDLIN( 480)				HX_VARI_NAME( Float,val2,"val") = (val + ((val1 - ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (i * (int)4)))) * percent));
HXDLIN( 480)				::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (i * (int)4)),val2);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,interpolateTo,(void))

bool Matrix4_Impl__obj::invert( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_487_invert)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 489)		HX_VARI( Float,d) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get_determinant(this1);
HXLINE( 490)		HX_VARI( bool,invertable) = (::Math_obj::abs(d) > ((Float)0.00000000001));
HXLINE( 492)		if (invertable) {
HXLINE( 494)			d = ((Float)(int)1 / (Float)d);
HXLINE( 496)			HX_VARI( Float,m11) = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 496)			HX_VARI( Float,m21) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 496)			HX_VARI( Float,m31) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 496)			HX_VARI( Float,m41) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXLINE( 497)			HX_VARI( Float,m12) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN( 497)			HX_VARI( Float,m22) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN( 497)			HX_VARI( Float,m32) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN( 497)			HX_VARI( Float,m42) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXLINE( 498)			HX_VARI( Float,m13) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 498)			HX_VARI( Float,m23) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 498)			HX_VARI( Float,m33) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN( 498)			HX_VARI( Float,m43) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 499)			HX_VARI( Float,m14) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN( 499)			HX_VARI( Float,m24) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN( 499)			HX_VARI( Float,m34) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN( 499)			HX_VARI( Float,m44) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXLINE( 501)			::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,(d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24))))));
HXLINE( 502)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),(-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14))))));
HXLINE( 503)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),(d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 504)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),(-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 505)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),(-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24))))));
HXLINE( 506)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),(d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14))))));
HXLINE( 507)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),(-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 508)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),(d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 509)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),(d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24))))));
HXLINE( 510)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),(-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14))))));
HXLINE( 511)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),(d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14))))));
HXLINE( 512)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),(-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14))))));
HXLINE( 513)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),(-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23))))));
HXLINE( 514)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),(d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13))))));
HXLINE( 515)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),(-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13))))));
HXLINE( 516)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),(d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13))))));
            		}
HXLINE( 520)		return invertable;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,invert,return )

void Matrix4_Impl__obj::pointAt( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 pos, ::lime::math::Vector4 at, ::lime::math::Vector4 up){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_525_pointAt)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(at,"at")
            	HX_STACK_ARG(up,"up")
HXLINE( 527)		if (hx::IsNull( at )) {
HXLINE( 529)			at =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)-1,null());
            		}
HXLINE( 533)		if (hx::IsNull( up )) {
HXLINE( 535)			up =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)0,(int)-1,(int)0,null());
            		}
HXLINE( 539)		HX_VARI(  ::lime::math::Vector4,dir) =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(at->x - pos->x),(at->y - pos->y),(at->z - pos->z),null());
HXLINE( 540)		HX_VARI(  ::lime::math::Vector4,vup) =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,up->x,up->y,up->z,up->w);
HXLINE( 541)		HX_VAR(  ::lime::math::Vector4,right);
HXLINE( 543)		{
HXLINE( 543)			HX_VARI( Float,l) = ::Math_obj::sqrt((((dir->x * dir->x) + (dir->y * dir->y)) + (dir->z * dir->z)));
HXDLIN( 543)			if ((l != (int)0)) {
HXLINE( 543)				dir->x = ((Float)dir->x / (Float)l);
HXDLIN( 543)				dir->y = ((Float)dir->y / (Float)l);
HXDLIN( 543)				dir->z = ((Float)dir->z / (Float)l);
            			}
            		}
HXLINE( 544)		{
HXLINE( 544)			HX_VARI_NAME( Float,l1,"l") = ::Math_obj::sqrt((((vup->x * vup->x) + (vup->y * vup->y)) + (vup->z * vup->z)));
HXDLIN( 544)			if ((l1 != (int)0)) {
HXLINE( 544)				 ::lime::math::Vector4 vup1 = vup;
HXDLIN( 544)				vup1->x = ((Float)vup1->x / (Float)l1);
HXDLIN( 544)				 ::lime::math::Vector4 vup2 = vup;
HXDLIN( 544)				vup2->y = ((Float)vup2->y / (Float)l1);
HXDLIN( 544)				 ::lime::math::Vector4 vup3 = vup;
HXDLIN( 544)				vup3->z = ((Float)vup3->z / (Float)l1);
            			}
            		}
HXLINE( 546)		HX_VARI(  ::lime::math::Vector4,dir2) =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,dir->x,dir->y,dir->z,dir->w);
HXLINE( 547)		{
HXLINE( 547)			HX_VARI( Float,s) = (((vup->x * dir->x) + (vup->y * dir->y)) + (vup->z * dir->z));
HXDLIN( 547)			dir2->x = (dir2->x * s);
HXDLIN( 547)			dir2->y = (dir2->y * s);
HXDLIN( 547)			dir2->z = (dir2->z * s);
            		}
HXLINE( 549)		vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(vup->x - dir2->x),(vup->y - dir2->y),(vup->z - dir2->z),null());
HXLINE( 551)		if ((::Math_obj::sqrt((((vup->x * vup->x) + (vup->y * vup->y)) + (vup->z * vup->z))) > (int)0)) {
HXLINE( 553)			HX_VARI_NAME( Float,l2,"l") = ::Math_obj::sqrt((((vup->x * vup->x) + (vup->y * vup->y)) + (vup->z * vup->z)));
HXDLIN( 553)			if ((l2 != (int)0)) {
HXLINE( 553)				 ::lime::math::Vector4 vup4 = vup;
HXDLIN( 553)				vup4->x = ((Float)vup4->x / (Float)l2);
HXDLIN( 553)				 ::lime::math::Vector4 vup5 = vup;
HXDLIN( 553)				vup5->y = ((Float)vup5->y / (Float)l2);
HXDLIN( 553)				 ::lime::math::Vector4 vup6 = vup;
HXDLIN( 553)				vup6->z = ((Float)vup6->z / (Float)l2);
            			}
            		}
            		else {
HXLINE( 557)			if ((dir->x != (int)0)) {
HXLINE( 559)				vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,-(dir->y),dir->x,(int)0,null());
            			}
            			else {
HXLINE( 563)				vup =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,(int)1,(int)0,(int)0,null());
            			}
            		}
HXLINE( 569)		right =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,((vup->y * dir->z) - (vup->z * dir->y)),((vup->z * dir->x) - (vup->x * dir->z)),((vup->x * dir->y) - (vup->y * dir->x)),(int)1);
HXLINE( 570)		{
HXLINE( 570)			HX_VARI_NAME( Float,l3,"l") = ::Math_obj::sqrt((((right->x * right->x) + (right->y * right->y)) + (right->z * right->z)));
HXDLIN( 570)			if ((l3 != (int)0)) {
HXLINE( 570)				right->x = ((Float)right->x / (Float)l3);
HXDLIN( 570)				right->y = ((Float)right->y / (Float)l3);
HXDLIN( 570)				right->z = ((Float)right->z / (Float)l3);
            			}
            		}
HXLINE( 572)		::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,right->x);
HXLINE( 573)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),right->y);
HXLINE( 574)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),right->z);
HXLINE( 575)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),((Float)0.0));
HXLINE( 576)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),vup->x);
HXLINE( 577)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),vup->y);
HXLINE( 578)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),vup->z);
HXLINE( 579)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),((Float)0.0));
HXLINE( 580)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),dir->x);
HXLINE( 581)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),dir->y);
HXLINE( 582)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),dir->z);
HXLINE( 583)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),((Float)0.0));
HXLINE( 584)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),pos->x);
HXLINE( 585)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),pos->y);
HXLINE( 586)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),pos->z);
HXLINE( 587)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),((Float)1.0));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,pointAt,(void))

void Matrix4_Impl__obj::prepend( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView rhs){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_592_prepend)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(rhs,"rhs")
HXLINE( 594)		HX_VARI( Float,m111) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)0);
HXDLIN( 594)		HX_VARI( Float,m121) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)4);
HXDLIN( 594)		HX_VARI( Float,m131) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)8);
HXDLIN( 594)		HX_VARI( Float,m141) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)12);
HXDLIN( 594)		HX_VARI( Float,m112) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)1);
HXDLIN( 594)		HX_VARI( Float,m122) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)5);
HXDLIN( 594)		HX_VARI( Float,m132) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)9);
HXDLIN( 594)		HX_VARI( Float,m142) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)13);
HXDLIN( 594)		HX_VARI( Float,m113) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)2);
HXDLIN( 594)		HX_VARI( Float,m123) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)6);
HXDLIN( 594)		HX_VARI( Float,m133) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)10);
HXDLIN( 594)		HX_VARI( Float,m143) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)14);
HXDLIN( 594)		HX_VARI( Float,m114) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)3);
HXDLIN( 594)		HX_VARI( Float,m124) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)7);
HXDLIN( 594)		HX_VARI( Float,m134) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)11);
HXDLIN( 594)		HX_VARI( Float,m144) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)15);
HXDLIN( 594)		HX_VARI( Float,m211) = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 594)		HX_VARI( Float,m221) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 594)		HX_VARI( Float,m231) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 594)		HX_VARI( Float,m241) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 594)		HX_VARI( Float,m212) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4));
HXDLIN( 594)		HX_VARI( Float,m222) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20));
HXDLIN( 594)		HX_VARI( Float,m232) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36));
HXDLIN( 594)		HX_VARI( Float,m242) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN( 594)		HX_VARI( Float,m213) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 594)		HX_VARI( Float,m223) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 594)		HX_VARI( Float,m233) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN( 594)		HX_VARI( Float,m243) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN( 594)		HX_VARI( Float,m214) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12));
HXDLIN( 594)		HX_VARI( Float,m224) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28));
HXDLIN( 594)		HX_VARI( Float,m234) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44));
HXDLIN( 594)		HX_VARI( Float,m244) = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60));
HXLINE( 603)		::__hxcpp_memory_set_float(this1->buffer->b,this1->byteOffset,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
HXLINE( 604)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
HXLINE( 605)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
HXLINE( 606)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
HXLINE( 608)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
HXLINE( 609)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)20),((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
HXLINE( 610)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
HXLINE( 611)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
HXLINE( 613)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
HXLINE( 614)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
HXLINE( 615)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)40),((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
HXLINE( 616)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
HXLINE( 618)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
HXLINE( 619)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
HXLINE( 620)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
HXLINE( 621)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)60),((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,prepend,(void))

void Matrix4_Impl__obj::prependRotation( ::lime::utils::ArrayBufferView this1,Float degrees, ::lime::math::Vector4 axis, ::lime::math::Vector4 pivotPoint){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_626_prependRotation)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE( 628)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::getAxisRotation(axis->x,axis->y,axis->z,degrees);
HXLINE( 630)		if (hx::IsNotNull( pivotPoint )) {
HXLINE( 633)			::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(m,pivotPoint->x,pivotPoint->y,pivotPoint->z);
            		}
HXLINE( 637)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependRotation,(void))

void Matrix4_Impl__obj::prependScale( ::lime::utils::ArrayBufferView this1,Float xScale,Float yScale,Float zScale){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_644_prependScale)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE( 644)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 644)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 644)		if (hx::IsNotNull( array )) {
HXLINE( 644)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 644)			_this->byteOffset = (int)0;
HXDLIN( 644)			_this->length = array->get_length();
HXDLIN( 644)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 644)			_this->buffer = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 644)			_this->copyFromArray(array,null());
HXDLIN( 644)			this2 = _this;
            		}
            		else {
HXLINE( 644)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 644)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependScale,(void))

void Matrix4_Impl__obj::prependTranslation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_649_prependTranslation)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 651)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 652)		::lime::math::_Matrix4::Matrix4_Impl__obj::set_position(m, ::lime::math::Vector4_obj::__alloc( HX_CTX ,x,y,z,null()));
HXLINE( 653)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependTranslation,(void))

 ::lime::math::Vector4 Matrix4_Impl__obj::transformVector( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 v){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_742_transformVector)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(v,"v")
HXLINE( 744)		HX_VARI( Float,x) = v->x;
HXDLIN( 744)		HX_VARI( Float,y) = v->y;
HXDLIN( 744)		HX_VARI( Float,z) = v->z;
HXLINE( 747)		Float _hx_tmp = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 747)		Float _hx_tmp1 = (_hx_tmp + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 747)		Float _hx_tmp2 = (_hx_tmp1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 747)		Float _hx_tmp3 = (_hx_tmp2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)));
HXLINE( 748)		Float _hx_tmp4 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 748)		Float _hx_tmp5 = (_hx_tmp4 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 748)		Float _hx_tmp6 = (_hx_tmp5 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 748)		Float _hx_tmp7 = (_hx_tmp6 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXLINE( 749)		Float _hx_tmp8 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 749)		Float _hx_tmp9 = (_hx_tmp8 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 749)		Float _hx_tmp10 = (_hx_tmp9 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXDLIN( 749)		Float _hx_tmp11 = (_hx_tmp10 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)));
HXLINE( 750)		Float _hx_tmp12 = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12)));
HXDLIN( 750)		Float _hx_tmp13 = (_hx_tmp12 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))));
HXDLIN( 750)		Float _hx_tmp14 = (_hx_tmp13 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44))));
HXLINE( 746)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp3,_hx_tmp7,_hx_tmp11,(_hx_tmp14 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,transformVector,return )

void Matrix4_Impl__obj::transformVectors( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView ain, ::lime::utils::ArrayBufferView aout){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_755_transformVectors)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(ain,"ain")
            	HX_STACK_ARG(aout,"aout")
HXLINE( 757)		HX_VARI( int,i) = (int)0;
HXLINE( 759)		while(((i + (int)3) <= ain->length)){
HXLINE( 761)			HX_VARI( Float,x) = ::__hxcpp_memory_get_float(ain->buffer->b,(ain->byteOffset + (i * (int)4)));
HXDLIN( 761)			HX_VARI( Float,y) = ::__hxcpp_memory_get_float(ain->buffer->b,(ain->byteOffset + ((i + (int)1) * (int)4)));
HXDLIN( 761)			HX_VARI( Float,z) = ::__hxcpp_memory_get_float(ain->buffer->b,(ain->byteOffset + ((i + (int)2) * (int)4)));
HXLINE( 763)			{
HXLINE( 763)				HX_VARI( Float,val) = (x * ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset));
HXDLIN( 763)				HX_VARI_NAME( Float,val1,"val") = (val + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16))));
HXDLIN( 763)				HX_VARI_NAME( Float,val2,"val") = (val1 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32))));
HXDLIN( 763)				HX_VARI_NAME( Float,val3,"val") = (val2 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48)));
HXDLIN( 763)				::__hxcpp_memory_set_float(aout->buffer->b,(aout->byteOffset + (i * (int)4)),val3);
            			}
HXLINE( 764)			{
HXLINE( 764)				HX_VARI_NAME( Float,val4,"val") = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4)));
HXDLIN( 764)				HX_VARI_NAME( Float,val5,"val") = (val4 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 764)				HX_VARI_NAME( Float,val6,"val") = (val5 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 764)				HX_VARI_NAME( Float,val7,"val") = (val6 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 764)				::__hxcpp_memory_set_float(aout->buffer->b,(aout->byteOffset + ((i + (int)1) * (int)4)),val7);
            			}
HXLINE( 765)			{
HXLINE( 765)				HX_VARI_NAME( Float,val8,"val") = (x * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8)));
HXDLIN( 765)				HX_VARI_NAME( Float,val9,"val") = (val8 + (y * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24))));
HXDLIN( 765)				HX_VARI_NAME( Float,val10,"val") = (val9 + (z * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40))));
HXDLIN( 765)				HX_VARI_NAME( Float,val11,"val") = (val10 + ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)));
HXDLIN( 765)				::__hxcpp_memory_set_float(aout->buffer->b,(aout->byteOffset + ((i + (int)2) * (int)4)),val11);
            			}
HXLINE( 767)			i = (i + (int)3);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,transformVectors,(void))

void Matrix4_Impl__obj::transpose( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_774_transpose)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 776)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 776)		if (hx::IsNotNull( this1 )) {
HXLINE( 776)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 776)			HX_VARI(  ::haxe::io::Bytes,srcData) = this1->buffer;
HXDLIN( 776)			HX_VARI( int,srcLength) = this1->length;
HXDLIN( 776)			HX_VARI( int,srcByteOffset) = this1->byteOffset;
HXDLIN( 776)			if ((this1->type == _this->type)) {
HXLINE( 776)				HX_VARI( int,cloneLength) = (srcData->length - srcByteOffset);
HXDLIN( 776)				_this->buffer = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 776)				_this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            			}
            			else {
HXLINE( 776)				HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            			}
HXDLIN( 776)			_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 776)			_this->byteOffset = (int)0;
HXDLIN( 776)			_this->length = srcLength;
HXDLIN( 776)			this2 = _this;
            		}
            		else {
HXLINE( 776)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 776)		HX_VARI(  ::lime::utils::ArrayBufferView,othis) = this2;
HXLINE( 777)		{
HXLINE( 777)			HX_VARI( Float,val) = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)16));
HXDLIN( 777)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),val);
            		}
HXLINE( 778)		{
HXLINE( 778)			HX_VARI_NAME( Float,val1,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)32));
HXDLIN( 778)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)8),val1);
            		}
HXLINE( 779)		{
HXLINE( 779)			HX_VARI_NAME( Float,val2,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)48));
HXDLIN( 779)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)12),val2);
            		}
HXLINE( 780)		{
HXLINE( 780)			HX_VARI_NAME( Float,val3,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)4));
HXDLIN( 780)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)16),val3);
            		}
HXLINE( 781)		{
HXLINE( 781)			HX_VARI_NAME( Float,val4,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)36));
HXDLIN( 781)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)24),val4);
            		}
HXLINE( 782)		{
HXLINE( 782)			HX_VARI_NAME( Float,val5,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)52));
HXDLIN( 782)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)28),val5);
            		}
HXLINE( 783)		{
HXLINE( 783)			HX_VARI_NAME( Float,val6,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)8));
HXDLIN( 783)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)32),val6);
            		}
HXLINE( 784)		{
HXLINE( 784)			HX_VARI_NAME( Float,val7,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)24));
HXDLIN( 784)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)36),val7);
            		}
HXLINE( 785)		{
HXLINE( 785)			HX_VARI_NAME( Float,val8,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)56));
HXDLIN( 785)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)44),val8);
            		}
HXLINE( 786)		{
HXLINE( 786)			HX_VARI_NAME( Float,val9,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)12));
HXDLIN( 786)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val9);
            		}
HXLINE( 787)		{
HXLINE( 787)			HX_VARI_NAME( Float,val10,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)28));
HXDLIN( 787)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val10);
            		}
HXLINE( 788)		{
HXLINE( 788)			HX_VARI_NAME( Float,val11,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,(othis->byteOffset + (int)44));
HXDLIN( 788)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val11);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,transpose,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::getAxisRotation(Float x,Float y,Float z,Float degrees){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_792_getAxisRotation)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(degrees,"degrees")
HXLINE( 794)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 796)		HX_VARI(  ::lime::math::Vector4,a1) =  ::lime::math::Vector4_obj::__alloc( HX_CTX ,x,y,z,null());
HXLINE( 797)		HX_VARI( Float,rad) = (-(degrees) * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 798)		HX_VARI( Float,c) = ::Math_obj::cos(rad);
HXLINE( 799)		HX_VARI( Float,s) = ::Math_obj::sin(rad);
HXLINE( 800)		HX_VARI( Float,t) = (((Float)1.0) - c);
HXLINE( 802)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)0,(c + ((a1->x * a1->x) * t)));
HXLINE( 803)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)5,(c + ((a1->y * a1->y) * t)));
HXLINE( 804)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)10,(c + ((a1->z * a1->z) * t)));
HXLINE( 806)		HX_VARI( Float,tmp1) = ((a1->x * a1->y) * t);
HXLINE( 807)		HX_VARI( Float,tmp2) = (a1->z * s);
HXLINE( 808)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)4,(tmp1 + tmp2));
HXLINE( 809)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)1,(tmp1 - tmp2));
HXLINE( 810)		tmp1 = ((a1->x * a1->z) * t);
HXLINE( 811)		tmp2 = (a1->y * s);
HXLINE( 812)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)8,(tmp1 - tmp2));
HXLINE( 813)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)2,(tmp1 + tmp2));
HXLINE( 814)		tmp1 = ((a1->y * a1->z) * t);
HXLINE( 815)		tmp2 = (a1->x * s);
HXLINE( 816)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)9,(tmp1 + tmp2));
HXLINE( 817)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)6,(tmp1 - tmp2));
HXLINE( 819)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,getAxisRotation,return )

Float Matrix4_Impl__obj::get_determinant( ::lime::utils::ArrayBufferView this1){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_833_get_determinant)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 833)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 833)		Float _hx_tmp1 = (_hx_tmp * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20)));
HXDLIN( 833)		Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 833)		Float _hx_tmp3 = (_hx_tmp1 - (_hx_tmp2 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN( 833)		Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXDLIN( 833)		Float _hx_tmp5 = (_hx_tmp4 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN( 833)		Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXDLIN( 833)		Float _hx_tmp7 = (_hx_tmp3 * (_hx_tmp5 - (_hx_tmp6 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)))));
HXLINE( 834)		Float _hx_tmp8 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 834)		Float _hx_tmp9 = (_hx_tmp8 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36)));
HXDLIN( 834)		Float _hx_tmp10 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 834)		Float _hx_tmp11 = (_hx_tmp9 - (_hx_tmp10 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN( 834)		Float _hx_tmp12 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 834)		Float _hx_tmp13 = (_hx_tmp12 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN( 834)		Float _hx_tmp14 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 833)		Float _hx_tmp15 = (_hx_tmp7 - (_hx_tmp11 * (_hx_tmp13 - (_hx_tmp14 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))))));
HXLINE( 835)		Float _hx_tmp16 = ::__hxcpp_memory_get_float(this1->buffer->b,this1->byteOffset);
HXDLIN( 835)		Float _hx_tmp17 = (_hx_tmp16 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 835)		Float _hx_tmp18 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 835)		Float _hx_tmp19 = (_hx_tmp17 - (_hx_tmp18 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)4))));
HXDLIN( 835)		Float _hx_tmp20 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXDLIN( 835)		Float _hx_tmp21 = (_hx_tmp20 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)));
HXDLIN( 835)		Float _hx_tmp22 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 833)		Float _hx_tmp23 = (_hx_tmp15 + (_hx_tmp19 * (_hx_tmp21 - (_hx_tmp22 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28))))));
HXLINE( 836)		Float _hx_tmp24 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 836)		Float _hx_tmp25 = (_hx_tmp24 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36)));
HXDLIN( 836)		Float _hx_tmp26 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 836)		Float _hx_tmp27 = (_hx_tmp25 - (_hx_tmp26 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 836)		Float _hx_tmp28 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 836)		Float _hx_tmp29 = (_hx_tmp28 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)60)));
HXDLIN( 836)		Float _hx_tmp30 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56));
HXLINE( 833)		Float _hx_tmp31 = (_hx_tmp23 + (_hx_tmp27 * (_hx_tmp29 - (_hx_tmp30 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
HXLINE( 837)		Float _hx_tmp32 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)16));
HXDLIN( 837)		Float _hx_tmp33 = (_hx_tmp32 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 837)		Float _hx_tmp34 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 837)		Float _hx_tmp35 = (_hx_tmp33 - (_hx_tmp34 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)20))));
HXDLIN( 837)		Float _hx_tmp36 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 837)		Float _hx_tmp37 = (_hx_tmp36 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)44)));
HXDLIN( 837)		Float _hx_tmp38 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)40));
HXLINE( 833)		Float _hx_tmp39 = (_hx_tmp31 - (_hx_tmp35 * (_hx_tmp37 - (_hx_tmp38 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
HXLINE( 838)		Float _hx_tmp40 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)32));
HXDLIN( 838)		Float _hx_tmp41 = (_hx_tmp40 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52)));
HXDLIN( 838)		Float _hx_tmp42 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 838)		Float _hx_tmp43 = (_hx_tmp41 - (_hx_tmp42 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)36))));
HXDLIN( 838)		Float _hx_tmp44 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)8));
HXDLIN( 838)		Float _hx_tmp45 = (_hx_tmp44 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)28)));
HXDLIN( 838)		Float _hx_tmp46 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)24));
HXLINE( 833)		return (_hx_tmp39 + (_hx_tmp43 * (_hx_tmp45 - (_hx_tmp46 * ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)12))))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,get_determinant,return )

 ::lime::math::Vector4 Matrix4_Impl__obj::get_position( ::lime::utils::ArrayBufferView this1){
            	HX_GC_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_845_get_position)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 845)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)48));
HXDLIN( 845)		Float _hx_tmp1 = ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)52));
HXDLIN( 845)		return  ::lime::math::Vector4_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (int)56)),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,get_position,return )

 ::lime::math::Vector4 Matrix4_Impl__obj::set_position( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 val){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_850_set_position)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(val,"val")
HXLINE( 852)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)48),val->x);
HXLINE( 853)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)52),val->y);
HXLINE( 854)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)56),val->z);
HXLINE( 855)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,set_position,return )

Float Matrix4_Impl__obj::get( ::lime::utils::ArrayBufferView this1,int index){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_862_get)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 862)		return ::__hxcpp_memory_get_float(this1->buffer->b,(this1->byteOffset + (index * (int)4)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,get,return )

Float Matrix4_Impl__obj::set( ::lime::utils::ArrayBufferView this1,int index,Float value){
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_867_set)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(value,"value")
HXLINE( 869)		::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (index * (int)4)),value);
HXLINE( 870)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,set,return )


Matrix4_Impl__obj::Matrix4_Impl__obj()
{
}

bool Matrix4_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { outValue = append_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointAt") ) { outValue = pointAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prepend") ) { outValue = prepend_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { outValue = copyFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"identity") ) { outValue = identity_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { outValue = copyRowTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transpose") ) { outValue = transpose_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copythisTo") ) { outValue = copythisTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createABCD") ) { outValue = createABCD_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"appendScale") ) { outValue = appendScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { outValue = copyRowFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { outValue = copyColumnTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copythisFrom") ) { outValue = copythisFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prependScale") ) { outValue = prependScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_position") ) { outValue = get_position_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_position") ) { outValue = set_position_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyToMatrix4") ) { outValue = copyToMatrix4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { outValue = interpolateTo_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { outValue = appendRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { outValue = copyColumnFrom_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"prependRotation") ) { outValue = prependRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transformVector") ) { outValue = transformVector_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getAxisRotation") ) { outValue = getAxisRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { outValue = get_determinant_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { outValue = transformVectors_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { outValue = appendTranslation_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { outValue = prependTranslation_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { outValue = deltaTransformVector_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Matrix4_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Matrix4_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(void *) &Matrix4_Impl__obj::_hx___identity,HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Matrix4_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix4_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix4_Impl__obj::_hx___identity,"__identity");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix4_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix4_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix4_Impl__obj::_hx___identity,"__identity");
};

#endif

hx::Class Matrix4_Impl__obj::__mClass;

static ::String Matrix4_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("appendRotation","\x38","\x45","\xe8","\xcb"),
	HX_HCSTRING("appendScale","\x50","\x66","\x45","\xb5"),
	HX_HCSTRING("appendTranslation","\x37","\xe1","\x3d","\xd6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copythisFrom","\x9d","\x57","\xe4","\x52"),
	HX_HCSTRING("copythisTo","\xee","\x14","\x01","\x0a"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("create2D","\xce","\x49","\xf4","\x2b"),
	HX_HCSTRING("createABCD","\xbe","\xc2","\xdd","\x52"),
	HX_HCSTRING("createOrtho","\x9c","\x4e","\xa8","\x5e"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("copyToMatrix4","\x23","\x00","\xc1","\x24"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("interpolateTo","\x9c","\x90","\x22","\x71"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("pointAt","\x63","\xa1","\x21","\x51"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformVectors","\x44","\xba","\x12","\x8a"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("getAxisRotation","\xb5","\x74","\xea","\xf7"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null())
};

void Matrix4_Impl__obj::__register()
{
	hx::Object *dummy = new Matrix4_Impl__obj;
	Matrix4_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math._Matrix4.Matrix4_Impl_","\xe6","\xfe","\xf9","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix4_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix4_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix4_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Matrix4_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix4_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix4_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix4_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix4_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a8b6e1b1a7c59cb4_10_boot)
HXLINE(  10)		_hx___identity = ::Array_obj< Float >::fromData( _hx_array_data_cbf9fee6_42,16);
            	}
}

} // end namespace lime
} // end namespace math
} // end namespace _Matrix4
