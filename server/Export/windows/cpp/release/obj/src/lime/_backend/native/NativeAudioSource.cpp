// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeAudioSource
#include <lime/_backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_codecs_vorbis_VorbisFile
#include <lime/media/codecs/vorbis/VorbisFile.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

namespace lime{
namespace _backend{
namespace native{

void NativeAudioSource_obj::__construct( ::lime::media::AudioSource parent){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","new",0xf98b6a15,"lime._backend.native.NativeAudioSource.new","lime/_backend/native/NativeAudioSource.hx",46,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
HXLINE(  48)		this->parent = parent;
HXLINE(  50)		this->position =  ::lime::math::Vector4_obj::__new(null(),null(),null(),null());
            	}

Dynamic NativeAudioSource_obj::__CreateEmpty() { return new NativeAudioSource_obj; }

hx::ObjectPtr< NativeAudioSource_obj > NativeAudioSource_obj::__new( ::lime::media::AudioSource parent)
{
	hx::ObjectPtr< NativeAudioSource_obj > _hx_result = new NativeAudioSource_obj();
	_hx_result->__construct(parent);
	return _hx_result;
}

Dynamic NativeAudioSource_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeAudioSource_obj > _hx_result = new NativeAudioSource_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void NativeAudioSource_obj::dispose(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","dispose",0xa24b98d4,"lime._backend.native.NativeAudioSource.dispose","lime/_backend/native/NativeAudioSource.hx",58,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE(  58)		Bool _hx_tmp = hx::IsNotNull( this->handle );
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  60)			::lime::media::openal::AL_obj::deleteSource(this->handle);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,dispose,(void))

void NativeAudioSource_obj::init(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","init",0x5d2a1fbb,"lime._backend.native.NativeAudioSource.init","lime/_backend/native/NativeAudioSource.hx",67,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE(  69)		this->dataLength = (int)0;
HXLINE(  70)		this->format = (int)0;
HXLINE(  72)		Bool _hx_tmp = (this->parent->buffer->channels == (int)1);
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  74)			Bool _hx_tmp1 = (this->parent->buffer->bitsPerSample == (int)8);
HXDLIN(  74)			if (_hx_tmp1) {
HXLINE(  76)				this->format = (int)4352;
            			}
            			else {
HXLINE(  78)				Bool _hx_tmp2 = (this->parent->buffer->bitsPerSample == (int)16);
HXDLIN(  78)				if (_hx_tmp2) {
HXLINE(  80)					this->format = (int)4353;
            				}
            			}
            		}
            		else {
HXLINE(  84)			Bool _hx_tmp3 = (this->parent->buffer->channels == (int)2);
HXDLIN(  84)			if (_hx_tmp3) {
HXLINE(  86)				Bool _hx_tmp4 = (this->parent->buffer->bitsPerSample == (int)8);
HXDLIN(  86)				if (_hx_tmp4) {
HXLINE(  88)					this->format = (int)4354;
            				}
            				else {
HXLINE(  90)					Bool _hx_tmp5 = (this->parent->buffer->bitsPerSample == (int)16);
HXDLIN(  90)					if (_hx_tmp5) {
HXLINE(  92)						this->format = (int)4355;
            					}
            				}
            			}
            		}
HXLINE(  98)		Bool _hx_tmp6 = hx::IsNotNull( this->parent->buffer->_hx___srcVorbisFile );
HXDLIN(  98)		if (_hx_tmp6) {
HXLINE( 100)			this->stream = true;
HXLINE( 103)			HX_VARI(  ::cpp::Int64Struct,x) = this->parent->buffer->_hx___srcVorbisFile->pcmTotal(null());
HXDLIN( 103)			Int _hx_tmp7 = _hx_int64_high(x);
HXDLIN( 103)			Int _hx_tmp8 = _hx_int64_low(x);
HXDLIN( 103)			if ((_hx_tmp7 != ((int)_hx_tmp8 >> (int)(int)31))) {
HXLINE( 103)				HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            			}
HXDLIN( 103)			Int _hx_tmp9 = _hx_int64_low(x);
HXDLIN( 103)			Float _hx_tmp10 = ((_hx_tmp9 * this->parent->buffer->channels) * ((Float)this->parent->buffer->bitsPerSample / (Float)(int)8));
HXDLIN( 103)			this->dataLength = ::Std_obj::_hx_int(_hx_tmp10);
HXLINE( 105)			this->buffers = ::cpp::VirtualArray_obj::__new();
HXLINE( 107)			{
HXLINE( 107)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 107)				HX_VARI( Int,_g) = ::lime::_backend::native::NativeAudioSource_obj::STREAM_NUM_BUFFERS;
HXDLIN( 107)				while((_g1 < _g)){
HXLINE( 107)					++_g1;
HXLINE( 109)					 ::Dynamic _hx_tmp11 = ::lime::media::openal::AL_obj::genBuffer();
HXDLIN( 109)					this->buffers->push(_hx_tmp11);
            				}
            			}
HXLINE( 113)			this->handle = ::lime::media::openal::AL_obj::genSource();
            		}
            		else {
HXLINE( 117)			Bool _hx_tmp12 = hx::IsNull( this->parent->buffer->_hx___srcBuffer );
HXDLIN( 117)			if (_hx_tmp12) {
HXLINE( 119)				this->parent->buffer->_hx___srcBuffer = ::lime::media::openal::AL_obj::genBuffer();
HXLINE( 120)				::lime::media::openal::AL_obj::bufferData(this->parent->buffer->_hx___srcBuffer,this->format,this->parent->buffer->data,this->parent->buffer->data->length,this->parent->buffer->sampleRate);
            			}
HXLINE( 124)			this->dataLength = this->parent->buffer->data->length;
HXLINE( 126)			this->handle = ::lime::media::openal::AL_obj::genSource();
HXLINE( 127)			::lime::media::openal::AL_obj::sourcei(this->handle,(int)4105,this->parent->buffer->_hx___srcBuffer);
            		}
HXLINE( 131)		Float _hx_tmp13 = ((Float)(this->dataLength * (int)8) / (Float)(this->parent->buffer->channels * this->parent->buffer->bitsPerSample));
HXDLIN( 131)		this->samples = ::Std_obj::_hx_int(_hx_tmp13);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,init,(void))

void NativeAudioSource_obj::play(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","play",0x61c9129f,"lime._backend.native.NativeAudioSource.play","lime/_backend/native/NativeAudioSource.hx",136,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 138)		Bool _hx_tmp;
HXDLIN( 138)		if (!(this->playing)) {
HXLINE( 138)			_hx_tmp = hx::IsNull( this->handle );
            		}
            		else {
HXLINE( 138)			_hx_tmp = true;
            		}
HXDLIN( 138)		if (_hx_tmp) {
HXLINE( 140)			return;
            		}
HXLINE( 144)		this->playing = true;
HXLINE( 146)		Bool _hx_tmp1 = this->stream;
HXDLIN( 146)		if (_hx_tmp1) {
HXLINE( 148)			Int _hx_tmp2 = this->getCurrentTime();
HXDLIN( 148)			this->setCurrentTime(_hx_tmp2);
HXLINE( 150)			this->streamTimer =  ::haxe::Timer_obj::__new(::lime::_backend::native::NativeAudioSource_obj::STREAM_TIMER_FREQUENCY);
HXLINE( 151)			this->streamTimer->run = this->streamTimer_onRun_dyn();
            		}
            		else {
HXLINE( 155)			HX_VARI( Int,time) = this->getCurrentTime();
HXLINE( 157)			::lime::media::openal::AL_obj::sourcePlay(this->handle);
HXLINE( 159)			this->setCurrentTime(time);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,play,(void))

void NativeAudioSource_obj::pause(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","pause",0x26f107eb,"lime._backend.native.NativeAudioSource.pause","lime/_backend/native/NativeAudioSource.hx",166,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 168)		this->playing = false;
HXLINE( 169)		::lime::media::openal::AL_obj::sourcePause(this->handle);
HXLINE( 171)		Bool _hx_tmp = hx::IsNotNull( this->streamTimer );
HXDLIN( 171)		if (_hx_tmp) {
HXLINE( 173)			this->streamTimer->stop();
            		}
HXLINE( 177)		Bool _hx_tmp1 = hx::IsNotNull( this->timer );
HXDLIN( 177)		if (_hx_tmp1) {
HXLINE( 179)			this->timer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,pause,(void))

 ::lime::utils::ArrayBufferView NativeAudioSource_obj::readVorbisFileBuffer( ::lime::media::codecs::vorbis::VorbisFile vorbisFile,Int length){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","readVorbisFileBuffer",0x14c96ff0,"lime._backend.native.NativeAudioSource.readVorbisFileBuffer","lime/_backend/native/NativeAudioSource.hx",186,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vorbisFile,"vorbisFile")
            	HX_STACK_ARG(length,"length")
HXLINE( 188)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 188)		Bool _hx_tmp = hx::IsNotNull( length );
HXDLIN( 188)		if (_hx_tmp) {
HXLINE( 188)			this1 =  ::lime::utils::ArrayBufferView_obj::__new(length,(int)4);
            		}
            		else {
HXLINE( 188)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 188)		HX_VARI(  ::lime::utils::ArrayBufferView,buffer) = this1;
HXLINE( 189)		HX_VARI( Int,read) = (int)0;
HXDLIN( 189)		HX_VARI( Int,total) = (int)0;
HXDLIN( 189)		HX_VAR( Int,readMax);
HXLINE( 191)		while((total < length)){
HXLINE( 193)			readMax = (int)4096;
HXLINE( 195)			if (((int)4096 > (length - total))) {
HXLINE( 197)				readMax = (length - total);
            			}
HXLINE( 201)			read = vorbisFile->read(buffer->buffer,total,readMax,null(),null(),null());
HXLINE( 203)			if ((read > (int)0)) {
HXLINE( 205)				hx::AddEq(total,read);
            			}
            			else {
HXLINE( 209)				goto _hx_goto_1;
            			}
            		}
            		_hx_goto_1:;
HXLINE( 215)		return buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeAudioSource_obj,readVorbisFileBuffer,return )

void NativeAudioSource_obj::refillBuffers(::cpp::VirtualArray buffers){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","refillBuffers",0x24bcf452,"lime._backend.native.NativeAudioSource.refillBuffers","lime/_backend/native/NativeAudioSource.hx",220,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffers,"buffers")
HXLINE( 224)		HX_VARI(  ::lime::media::codecs::vorbis::VorbisFile,vorbisFile) = null();
HXLINE( 225)		HX_VARI( Int,position) = (int)0;
HXLINE( 227)		Bool _hx_tmp = hx::IsNull( buffers );
HXDLIN( 227)		if (_hx_tmp) {
HXLINE( 229)			HX_VARI( Int,buffersProcessed) = ( (Int)(::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4118)) );
HXLINE( 231)			if ((buffersProcessed > (int)0)) {
HXLINE( 233)				vorbisFile = this->parent->buffer->_hx___srcVorbisFile;
HXLINE( 234)				HX_VARI(  ::cpp::Int64Struct,x) = vorbisFile->pcmTell();
HXDLIN( 234)				Int _hx_tmp1 = _hx_int64_high(x);
HXDLIN( 234)				Int _hx_tmp2 = _hx_int64_low(x);
HXDLIN( 234)				if ((_hx_tmp1 != ((int)_hx_tmp2 >> (int)(int)31))) {
HXLINE( 234)					HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            				}
HXDLIN( 234)				position = _hx_int64_low(x);
HXLINE( 236)				Bool _hx_tmp3 = (position < this->dataLength);
HXDLIN( 236)				if (_hx_tmp3) {
HXLINE( 238)					buffers = ::lime::media::openal::AL_obj::sourceUnqueueBuffers(this->handle,buffersProcessed);
            				}
            			}
            		}
HXLINE( 246)		Bool _hx_tmp4 = hx::IsNotNull( buffers );
HXDLIN( 246)		if (_hx_tmp4) {
HXLINE( 248)			Bool _hx_tmp5 = hx::IsNull( vorbisFile );
HXDLIN( 248)			if (_hx_tmp5) {
HXLINE( 250)				vorbisFile = this->parent->buffer->_hx___srcVorbisFile;
HXLINE( 251)				HX_VARI_NAME(  ::cpp::Int64Struct,x1,"x") = vorbisFile->pcmTell();
HXDLIN( 251)				Int _hx_tmp6 = _hx_int64_high(x1);
HXDLIN( 251)				Int _hx_tmp7 = _hx_int64_low(x1);
HXDLIN( 251)				if ((_hx_tmp6 != ((int)_hx_tmp7 >> (int)(int)31))) {
HXLINE( 251)					HX_STACK_DO_THROW(HX_("Overflow",62,9f,ed,1a));
            				}
HXDLIN( 251)				position = _hx_int64_low(x1);
            			}
HXLINE( 255)			HX_VARI( Int,numBuffers) = (int)0;
HXLINE( 256)			HX_VAR(  ::lime::utils::ArrayBufferView,data);
HXLINE( 258)			{
HXLINE( 258)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 258)				while((_g < buffers->get_length())){
HXLINE( 258)					HX_VARI(  ::Dynamic,buffer) = buffers->__get(_g);
HXDLIN( 258)					++_g;
HXLINE( 260)					Bool _hx_tmp8 = ((this->dataLength - position) >= ::lime::_backend::native::NativeAudioSource_obj::STREAM_BUFFER_SIZE);
HXDLIN( 260)					if (_hx_tmp8) {
HXLINE( 262)						data = this->readVorbisFileBuffer(vorbisFile,::lime::_backend::native::NativeAudioSource_obj::STREAM_BUFFER_SIZE);
HXLINE( 263)						::lime::media::openal::AL_obj::bufferData(buffer,this->format,data,data->length,this->parent->buffer->sampleRate);
HXLINE( 264)						hx::AddEq(position,::lime::_backend::native::NativeAudioSource_obj::STREAM_BUFFER_SIZE);
HXLINE( 265)						++numBuffers;
            					}
            					else {
HXLINE( 267)						Bool _hx_tmp9 = (position < this->dataLength);
HXDLIN( 267)						if (_hx_tmp9) {
HXLINE( 269)							Int _hx_tmp10 = (this->dataLength - position);
HXDLIN( 269)							data = this->readVorbisFileBuffer(vorbisFile,_hx_tmp10);
HXLINE( 270)							::lime::media::openal::AL_obj::bufferData(buffer,this->format,data,data->length,this->parent->buffer->sampleRate);
HXLINE( 271)							++numBuffers;
HXLINE( 272)							goto _hx_goto_2;
            						}
            					}
            				}
            				_hx_goto_2:;
            			}
HXLINE( 278)			::lime::media::openal::AL_obj::sourceQueueBuffers(this->handle,numBuffers,buffers);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,refillBuffers,(void))

void NativeAudioSource_obj::stop(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","stop",0x63cad4ad,"lime._backend.native.NativeAudioSource.stop","lime/_backend/native/NativeAudioSource.hx",287,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 289)		this->playing = false;
HXLINE( 290)		::lime::media::openal::AL_obj::sourceStop(this->handle);
HXLINE( 292)		Bool _hx_tmp = hx::IsNotNull( this->streamTimer );
HXDLIN( 292)		if (_hx_tmp) {
HXLINE( 294)			this->streamTimer->stop();
            		}
HXLINE( 298)		Bool _hx_tmp1 = hx::IsNotNull( this->timer );
HXDLIN( 298)		if (_hx_tmp1) {
HXLINE( 300)			this->timer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,stop,(void))

void NativeAudioSource_obj::streamTimer_onRun(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","streamTimer_onRun",0xa82f4407,"lime._backend.native.NativeAudioSource.streamTimer_onRun","lime/_backend/native/NativeAudioSource.hx",316,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 316)		this->refillBuffers(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,streamTimer_onRun,(void))

void NativeAudioSource_obj::timer_onRun(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","timer_onRun",0x4c90fae7,"lime._backend.native.NativeAudioSource.timer_onRun","lime/_backend/native/NativeAudioSource.hx",321,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 323)		this->playing = false;
HXLINE( 325)		Bool _hx_tmp = (this->loops > (int)0);
HXDLIN( 325)		if (_hx_tmp) {
HXLINE( 327)			this->loops--;
HXLINE( 328)			this->setCurrentTime((int)0);
HXLINE( 329)			this->play();
HXLINE( 330)			return;
            		}
            		else {
HXLINE( 334)			::lime::media::openal::AL_obj::sourceStop(this->handle);
HXLINE( 335)			this->timer->stop();
            		}
HXLINE( 339)		this->completed = true;
HXLINE( 340)		this->parent->onComplete->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,timer_onRun,(void))

Int NativeAudioSource_obj::getCurrentTime(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getCurrentTime",0x2632805b,"lime._backend.native.NativeAudioSource.getCurrentTime","lime/_backend/native/NativeAudioSource.hx",354,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 354)		Bool _hx_tmp = this->completed;
HXDLIN( 354)		if (_hx_tmp) {
HXLINE( 356)			return this->getLength();
            		}
            		else {
HXLINE( 358)			Bool _hx_tmp1 = this->stream;
HXDLIN( 358)			if (_hx_tmp1) {
HXLINE( 360)				Float _hx_tmp2 = this->parent->buffer->_hx___srcVorbisFile->timeTell();
HXDLIN( 360)				Int _hx_tmp3 = ::Std_obj::_hx_int((_hx_tmp2 * (int)1000));
HXDLIN( 360)				Float _hx_tmp4 = ::lime::media::openal::AL_obj::getSourcef(this->handle,(int)4132);
HXDLIN( 360)				Int _hx_tmp5 = ::Std_obj::_hx_int((_hx_tmp4 * (int)1000));
HXDLIN( 360)				HX_VARI( Int,time) = ((_hx_tmp3 + _hx_tmp5) - this->parent->offset);
HXLINE( 361)				if ((time < (int)0)) {
HXLINE( 361)					return (int)0;
            				}
HXLINE( 362)				return time;
            			}
            			else {
HXLINE( 366)				HX_VARI( Int,offset) = ( (Int)(::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4134)) );
HXLINE( 370)				Float _hx_tmp6 = (((Float)this->samples / (Float)this->parent->buffer->sampleRate) * ((Float)offset / (Float)this->dataLength));
HXDLIN( 370)				Int _hx_tmp7 = ::Std_obj::_hx_int((_hx_tmp6 * (int)1000));
HXDLIN( 370)				HX_VARI_NAME( Int,time1,"time") = (_hx_tmp7 - this->parent->offset);
HXLINE( 373)				if ((time1 < (int)0)) {
HXLINE( 373)					return (int)0;
            				}
HXLINE( 374)				return time1;
            			}
            		}
HXLINE( 354)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getCurrentTime,return )

Int NativeAudioSource_obj::setCurrentTime(Int value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setCurrentTime",0x465268cf,"lime._backend.native.NativeAudioSource.setCurrentTime","lime/_backend/native/NativeAudioSource.hx",381,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 383)		Bool _hx_tmp = this->stream;
HXDLIN( 383)		if (_hx_tmp) {
HXLINE( 385)			::lime::media::openal::AL_obj::sourceStop(this->handle);
HXLINE( 387)			Float _hx_tmp1 = ((Float)(value + this->parent->offset) / (Float)(int)1000);
HXDLIN( 387)			this->parent->buffer->_hx___srcVorbisFile->timeSeekPage(_hx_tmp1);
HXLINE( 388)			::lime::media::openal::AL_obj::sourceUnqueueBuffers(this->handle,::lime::_backend::native::NativeAudioSource_obj::STREAM_NUM_BUFFERS);
HXLINE( 389)			this->refillBuffers(this->buffers);
HXLINE( 391)			Bool _hx_tmp2 = this->playing;
HXDLIN( 391)			if (_hx_tmp2) {
HXLINE( 391)				::lime::media::openal::AL_obj::sourcePlay(this->handle);
            			}
            		}
            		else {
HXLINE( 393)			Bool _hx_tmp3 = hx::IsNotNull( this->parent->buffer );
HXDLIN( 393)			if (_hx_tmp3) {
HXLINE( 395)				::lime::media::openal::AL_obj::sourceRewind(this->handle);
HXLINE( 396)				Bool _hx_tmp4 = this->playing;
HXDLIN( 396)				if (_hx_tmp4) {
HXLINE( 396)					::lime::media::openal::AL_obj::sourcePlay(this->handle);
            				}
HXLINE( 399)				HX_VARI( Float,secondOffset) = ((Float)(value + this->parent->offset) / (Float)(int)1000);
HXLINE( 400)				HX_VARI( Float,totalSeconds) = ((Float)this->samples / (Float)this->parent->buffer->sampleRate);
HXLINE( 402)				Bool _hx_tmp5 = (secondOffset < (int)0);
HXDLIN( 402)				if (_hx_tmp5) {
HXLINE( 402)					secondOffset = (int)0;
            				}
HXLINE( 403)				Bool _hx_tmp6 = (secondOffset > totalSeconds);
HXDLIN( 403)				if (_hx_tmp6) {
HXLINE( 403)					secondOffset = totalSeconds;
            				}
HXLINE( 406)				Float _hx_tmp7 = (this->dataLength * ((Float)secondOffset / (Float)totalSeconds));
HXDLIN( 406)				HX_VARI( Int,totalOffset) = ::Std_obj::_hx_int(_hx_tmp7);
HXLINE( 407)				HX_VARI( Int,currentOffset) = ( (Int)(::lime::media::openal::AL_obj::getSourcei(this->handle,(int)4134)) );
HXLINE( 409)				 ::Dynamic _hx_tmp8 = this->handle;
HXDLIN( 409)				::lime::media::openal::AL_obj::sourcei(_hx_tmp8,(int)4134,(totalOffset - currentOffset));
            			}
            		}
HXLINE( 413)		Bool _hx_tmp9 = this->playing;
HXDLIN( 413)		if (_hx_tmp9) {
HXLINE( 415)			Bool _hx_tmp10 = hx::IsNotNull( this->timer );
HXDLIN( 415)			if (_hx_tmp10) {
HXLINE( 417)				this->timer->stop();
            			}
HXLINE( 421)			Int _hx_tmp11 = this->getLength();
HXDLIN( 421)			HX_VARI( Int,timeRemaining) = (_hx_tmp11 - value);
HXLINE( 423)			if ((timeRemaining > (int)0)) {
HXLINE( 425)				this->completed = false;
HXLINE( 426)				this->timer =  ::haxe::Timer_obj::__new(timeRemaining);
HXLINE( 427)				this->timer->run = this->timer_onRun_dyn();
            			}
            			else {
HXLINE( 431)				this->completed = true;
            			}
            		}
HXLINE( 437)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setCurrentTime,return )

Float NativeAudioSource_obj::getGain(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getGain",0xfde0b86a,"lime._backend.native.NativeAudioSource.getGain","lime/_backend/native/NativeAudioSource.hx",444,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 444)		return ::lime::media::openal::AL_obj::getSourcef(this->handle,(int)4106);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getGain,return )

Float NativeAudioSource_obj::setGain(Float value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setGain",0xf0e24976,"lime._backend.native.NativeAudioSource.setGain","lime/_backend/native/NativeAudioSource.hx",449,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 451)		::lime::media::openal::AL_obj::sourcef(this->handle,(int)4106,value);
HXLINE( 452)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setGain,return )

Int NativeAudioSource_obj::getLength(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getLength",0x127b6d91,"lime._backend.native.NativeAudioSource.getLength","lime/_backend/native/NativeAudioSource.hx",457,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 459)		Bool _hx_tmp = hx::IsNotNull( this->length );
HXDLIN( 459)		if (_hx_tmp) {
HXLINE( 461)			return this->length;
            		}
HXLINE( 465)		Float _hx_tmp1 = (((Float)this->samples / (Float)this->parent->buffer->sampleRate) * (int)1000);
HXDLIN( 465)		Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 465)		return (_hx_tmp2 - this->parent->offset);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getLength,return )

Int NativeAudioSource_obj::setLength(Int value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setLength",0xf5cc599d,"lime._backend.native.NativeAudioSource.setLength","lime/_backend/native/NativeAudioSource.hx",470,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 472)		Bool _hx_tmp;
HXDLIN( 472)		if (this->playing) {
HXLINE( 472)			_hx_tmp = hx::IsNotEq( this->length,value );
            		}
            		else {
HXLINE( 472)			_hx_tmp = false;
            		}
HXDLIN( 472)		if (_hx_tmp) {
HXLINE( 474)			Bool _hx_tmp1 = hx::IsNotNull( this->timer );
HXDLIN( 474)			if (_hx_tmp1) {
HXLINE( 476)				this->timer->stop();
            			}
HXLINE( 480)			Int _hx_tmp2 = this->getCurrentTime();
HXDLIN( 480)			HX_VARI( Int,timeRemaining) = (value - _hx_tmp2);
HXLINE( 482)			if ((timeRemaining > (int)0)) {
HXLINE( 484)				this->timer =  ::haxe::Timer_obj::__new(timeRemaining);
HXLINE( 485)				this->timer->run = this->timer_onRun_dyn();
            			}
            		}
HXLINE( 491)		return (this->length = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setLength,return )

Int NativeAudioSource_obj::getLoops(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getLoops",0x11071744,"lime._backend.native.NativeAudioSource.getLoops","lime/_backend/native/NativeAudioSource.hx",498,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 498)		return this->loops;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getLoops,return )

Int NativeAudioSource_obj::setLoops(Int value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setLoops",0xbf6470b8,"lime._backend.native.NativeAudioSource.setLoops","lime/_backend/native/NativeAudioSource.hx",505,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 505)		return (this->loops = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setLoops,return )

 ::lime::math::Vector4 NativeAudioSource_obj::getPosition(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getPosition",0xe5963a14,"lime._backend.native.NativeAudioSource.getPosition","lime/_backend/native/NativeAudioSource.hx",510,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 512)		HX_VARI( ::Array< Float >,value) = ::lime::media::openal::AL_obj::getSource3f(this->handle,(int)4100);
HXLINE( 513)		this->position->x = value->__get((int)0);
HXLINE( 514)		this->position->y = value->__get((int)1);
HXLINE( 515)		this->position->z = value->__get((int)2);
HXLINE( 516)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getPosition,return )

 ::lime::math::Vector4 NativeAudioSource_obj::setPosition( ::lime::math::Vector4 value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setPosition",0xf0034120,"lime._backend.native.NativeAudioSource.setPosition","lime/_backend/native/NativeAudioSource.hx",521,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 523)		this->position->x = value->x;
HXLINE( 524)		this->position->y = value->y;
HXLINE( 525)		this->position->z = value->z;
HXLINE( 526)		this->position->w = value->w;
HXLINE( 528)		::lime::media::openal::AL_obj::distanceModel((int)0);
HXLINE( 529)		::lime::media::openal::AL_obj::source3f(this->handle,(int)4100,this->position->x,this->position->y,this->position->z);
HXLINE( 531)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setPosition,return )

Int NativeAudioSource_obj::STREAM_BUFFER_SIZE;

Int NativeAudioSource_obj::STREAM_NUM_BUFFERS;

Int NativeAudioSource_obj::STREAM_TIMER_FREQUENCY;


NativeAudioSource_obj::NativeAudioSource_obj()
{
}

void NativeAudioSource_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeAudioSource);
	HX_MARK_MEMBER_NAME(buffers,"buffers");
	HX_MARK_MEMBER_NAME(completed,"completed");
	HX_MARK_MEMBER_NAME(dataLength,"dataLength");
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(loops,"loops");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(playing,"playing");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(samples,"samples");
	HX_MARK_MEMBER_NAME(stream,"stream");
	HX_MARK_MEMBER_NAME(streamTimer,"streamTimer");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_END_CLASS();
}

void NativeAudioSource_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffers,"buffers");
	HX_VISIT_MEMBER_NAME(completed,"completed");
	HX_VISIT_MEMBER_NAME(dataLength,"dataLength");
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(loops,"loops");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(playing,"playing");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(samples,"samples");
	HX_VISIT_MEMBER_NAME(stream,"stream");
	HX_VISIT_MEMBER_NAME(streamTimer,"streamTimer");
	HX_VISIT_MEMBER_NAME(timer,"timer");
}

hx::Val NativeAudioSource_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn()); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { return hx::Val( loops); }
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format); }
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"stream") ) { return hx::Val( stream); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buffers") ) { return hx::Val( buffers); }
		if (HX_FIELD_EQ(inName,"playing") ) { return hx::Val( playing); }
		if (HX_FIELD_EQ(inName,"samples") ) { return hx::Val( samples); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"getGain") ) { return hx::Val( getGain_dyn()); }
		if (HX_FIELD_EQ(inName,"setGain") ) { return hx::Val( setGain_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position); }
		if (HX_FIELD_EQ(inName,"getLoops") ) { return hx::Val( getLoops_dyn()); }
		if (HX_FIELD_EQ(inName,"setLoops") ) { return hx::Val( setLoops_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { return hx::Val( completed); }
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn()); }
		if (HX_FIELD_EQ(inName,"setLength") ) { return hx::Val( setLength_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataLength") ) { return hx::Val( dataLength); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"streamTimer") ) { return hx::Val( streamTimer); }
		if (HX_FIELD_EQ(inName,"timer_onRun") ) { return hx::Val( timer_onRun_dyn()); }
		if (HX_FIELD_EQ(inName,"getPosition") ) { return hx::Val( getPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"refillBuffers") ) { return hx::Val( refillBuffers_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCurrentTime") ) { return hx::Val( getCurrentTime_dyn()); }
		if (HX_FIELD_EQ(inName,"setCurrentTime") ) { return hx::Val( setCurrentTime_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"streamTimer_onRun") ) { return hx::Val( streamTimer_onRun_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"readVorbisFileBuffer") ) { return hx::Val( readVorbisFileBuffer_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool NativeAudioSource_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"STREAM_BUFFER_SIZE") ) { outValue = STREAM_BUFFER_SIZE; return true; }
		if (HX_FIELD_EQ(inName,"STREAM_NUM_BUFFERS") ) { outValue = STREAM_NUM_BUFFERS; return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"STREAM_TIMER_FREQUENCY") ) { outValue = STREAM_TIMER_FREQUENCY; return true; }
	}
	return false;
}

hx::Val NativeAudioSource_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { loops=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::lime::media::AudioSource >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stream") ) { stream=inValue.Cast< Bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"buffers") ) { buffers=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playing") ) { playing=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"samples") ) { samples=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::lime::math::Vector4 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { completed=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataLength") ) { dataLength=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"streamTimer") ) { streamTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool NativeAudioSource_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"STREAM_BUFFER_SIZE") ) { STREAM_BUFFER_SIZE=ioValue.Cast< Int >(); return true; }
		if (HX_FIELD_EQ(inName,"STREAM_NUM_BUFFERS") ) { STREAM_NUM_BUFFERS=ioValue.Cast< Int >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"STREAM_TIMER_FREQUENCY") ) { STREAM_TIMER_FREQUENCY=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void NativeAudioSource_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1"));
	outFields->push(HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"));
	outFields->push(HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a"));
	outFields->push(HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"));
	outFields->push(HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83"));
	outFields->push(HX_HCSTRING("stream","\x80","\x14","\x2d","\x11"));
	outFields->push(HX_HCSTRING("streamTimer","\x25","\xcb","\xfb","\x7f"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeAudioSource_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(NativeAudioSource_obj,buffers),HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1")},
	{hx::fsBool,(int)offsetof(NativeAudioSource_obj,completed),HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,dataLength),HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,format),HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeAudioSource_obj,handle),HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeAudioSource_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,loops),HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78")},
	{hx::fsObject /*::lime::media::AudioSource*/ ,(int)offsetof(NativeAudioSource_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsBool,(int)offsetof(NativeAudioSource_obj,playing),HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a")},
	{hx::fsObject /*::lime::math::Vector4*/ ,(int)offsetof(NativeAudioSource_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,samples),HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83")},
	{hx::fsBool,(int)offsetof(NativeAudioSource_obj,stream),HX_HCSTRING("stream","\x80","\x14","\x2d","\x11")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(NativeAudioSource_obj,streamTimer),HX_HCSTRING("streamTimer","\x25","\xcb","\xfb","\x7f")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(NativeAudioSource_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo NativeAudioSource_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &NativeAudioSource_obj::STREAM_BUFFER_SIZE,HX_HCSTRING("STREAM_BUFFER_SIZE","\x21","\xaa","\x29","\xff")},
	{hx::fsInt,(void *) &NativeAudioSource_obj::STREAM_NUM_BUFFERS,HX_HCSTRING("STREAM_NUM_BUFFERS","\x7b","\x0f","\xd0","\xac")},
	{hx::fsInt,(void *) &NativeAudioSource_obj::STREAM_TIMER_FREQUENCY,HX_HCSTRING("STREAM_TIMER_FREQUENCY","\x23","\x49","\x97","\x07")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String NativeAudioSource_obj_sMemberFields[] = {
	HX_HCSTRING("buffers","\x73","\xa3","\x90","\xb1"),
	HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"),
	HX_HCSTRING("dataLength","\xb0","\x5a","\xa9","\x8a"),
	HX_HCSTRING("format","\x37","\x8f","\x8e","\xfd"),
	HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("samples","\x09","\xc5","\xc9","\x83"),
	HX_HCSTRING("stream","\x80","\x14","\x2d","\x11"),
	HX_HCSTRING("streamTimer","\x25","\xcb","\xfb","\x7f"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("readVorbisFileBuffer","\x45","\x45","\x75","\x21"),
	HX_HCSTRING("refillBuffers","\x5d","\x46","\x6a","\xd5"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("streamTimer_onRun","\x92","\xf7","\x55","\xe4"),
	HX_HCSTRING("timer_onRun","\x32","\x24","\xe9","\x57"),
	HX_HCSTRING("getCurrentTime","\xf0","\xf7","\x2c","\x0d"),
	HX_HCSTRING("setCurrentTime","\x64","\xe0","\x4c","\x2d"),
	HX_HCSTRING("getGain","\x35","\xa0","\xe1","\x16"),
	HX_HCSTRING("setGain","\x41","\x31","\xe3","\x09"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("setLength","\x28","\x0a","\xaf","\xfe"),
	HX_HCSTRING("getLoops","\x19","\x01","\xd1","\xd8"),
	HX_HCSTRING("setLoops","\x8d","\x5a","\x2e","\x87"),
	HX_HCSTRING("getPosition","\x5f","\x63","\xee","\xf0"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	::String(null()) };

static void NativeAudioSource_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::STREAM_BUFFER_SIZE,"STREAM_BUFFER_SIZE");
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::STREAM_NUM_BUFFERS,"STREAM_NUM_BUFFERS");
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::STREAM_TIMER_FREQUENCY,"STREAM_TIMER_FREQUENCY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeAudioSource_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::STREAM_BUFFER_SIZE,"STREAM_BUFFER_SIZE");
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::STREAM_NUM_BUFFERS,"STREAM_NUM_BUFFERS");
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::STREAM_TIMER_FREQUENCY,"STREAM_TIMER_FREQUENCY");
};

#endif

hx::Class NativeAudioSource_obj::__mClass;

static ::String NativeAudioSource_obj_sStaticFields[] = {
	HX_HCSTRING("STREAM_BUFFER_SIZE","\x21","\xaa","\x29","\xff"),
	HX_HCSTRING("STREAM_NUM_BUFFERS","\x7b","\x0f","\xd0","\xac"),
	HX_HCSTRING("STREAM_TIMER_FREQUENCY","\x23","\x49","\x97","\x07"),
	::String(null())
};

void NativeAudioSource_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._backend.native.NativeAudioSource","\xa3","\xbb","\x85","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NativeAudioSource_obj::__GetStatic;
	__mClass->mSetStaticField = &NativeAudioSource_obj::__SetStatic;
	__mClass->mMarkFunc = NativeAudioSource_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(NativeAudioSource_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeAudioSource_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeAudioSource_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeAudioSource_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeAudioSource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeAudioSource_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NativeAudioSource_obj::__boot()
{
{
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","boot",0x588a68dd,"lime._backend.native.NativeAudioSource.boot","lime/_backend/native/NativeAudioSource.hx",26,0xbddaa99c)
HXLINE(  26)		STREAM_BUFFER_SIZE = (int)48000;
            	}
{
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","boot",0x588a68dd,"lime._backend.native.NativeAudioSource.boot","lime/_backend/native/NativeAudioSource.hx",27,0xbddaa99c)
HXLINE(  27)		STREAM_NUM_BUFFERS = (int)3;
            	}
{
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","boot",0x588a68dd,"lime._backend.native.NativeAudioSource.boot","lime/_backend/native/NativeAudioSource.hx",28,0xbddaa99c)
HXLINE(  28)		STREAM_TIMER_FREQUENCY = (int)100;
            	}
}

} // end namespace lime
} // end namespace _backend
} // end namespace native
