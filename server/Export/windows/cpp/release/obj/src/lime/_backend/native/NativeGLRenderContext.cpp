// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLRenderbuffer
#include <lime/graphics/opengl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLShader
#include <lime/graphics/opengl/GLShader.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_system__CFFIPointer_CFFIPointer_Impl_
#include <lime/system/_CFFIPointer/CFFIPointer_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_30_new,"lime._backend.native.NativeGLRenderContext","new",0x501c8638,"lime._backend.native.NativeGLRenderContext.new","lime/_backend/native/NativeGLRenderContext.hx",30,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_397_activeTexture,"lime._backend.native.NativeGLRenderContext","activeTexture",0x2df1878d,"lime._backend.native.NativeGLRenderContext.activeTexture","lime/_backend/native/NativeGLRenderContext.hx",397,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_403_attachShader,"lime._backend.native.NativeGLRenderContext","attachShader",0x0f459ff2,"lime._backend.native.NativeGLRenderContext.attachShader","lime/_backend/native/NativeGLRenderContext.hx",403,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_416_bindAttribLocation,"lime._backend.native.NativeGLRenderContext","bindAttribLocation",0xed1e4364,"lime._backend.native.NativeGLRenderContext.bindAttribLocation","lime/_backend/native/NativeGLRenderContext.hx",416,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_425_bindBuffer,"lime._backend.native.NativeGLRenderContext","bindBuffer",0x9f36c7c5,"lime._backend.native.NativeGLRenderContext.bindBuffer","lime/_backend/native/NativeGLRenderContext.hx",425,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_434_bindFramebuffer,"lime._backend.native.NativeGLRenderContext","bindFramebuffer",0xb64fe008,"lime._backend.native.NativeGLRenderContext.bindFramebuffer","lime/_backend/native/NativeGLRenderContext.hx",434,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_443_bindRenderbuffer,"lime._backend.native.NativeGLRenderContext","bindRenderbuffer",0x5620395b,"lime._backend.native.NativeGLRenderContext.bindRenderbuffer","lime/_backend/native/NativeGLRenderContext.hx",443,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_452_bindTexture,"lime._backend.native.NativeGLRenderContext","bindTexture",0x9e082a76,"lime._backend.native.NativeGLRenderContext.bindTexture","lime/_backend/native/NativeGLRenderContext.hx",452,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_461_blendColor,"lime._backend.native.NativeGLRenderContext","blendColor",0x892c687a,"lime._backend.native.NativeGLRenderContext.blendColor","lime/_backend/native/NativeGLRenderContext.hx",461,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_470_blendEquation,"lime._backend.native.NativeGLRenderContext","blendEquation",0xd9f50cd5,"lime._backend.native.NativeGLRenderContext.blendEquation","lime/_backend/native/NativeGLRenderContext.hx",470,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_479_blendEquationSeparate,"lime._backend.native.NativeGLRenderContext","blendEquationSeparate",0x0b8b4558,"lime._backend.native.NativeGLRenderContext.blendEquationSeparate","lime/_backend/native/NativeGLRenderContext.hx",479,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_488_blendFunc,"lime._backend.native.NativeGLRenderContext","blendFunc",0x2076a40d,"lime._backend.native.NativeGLRenderContext.blendFunc","lime/_backend/native/NativeGLRenderContext.hx",488,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_497_blendFuncSeparate,"lime._backend.native.NativeGLRenderContext","blendFuncSeparate",0xc4cad490,"lime._backend.native.NativeGLRenderContext.blendFuncSeparate","lime/_backend/native/NativeGLRenderContext.hx",497,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_506_bufferData,"lime._backend.native.NativeGLRenderContext","bufferData",0x39ebf472,"lime._backend.native.NativeGLRenderContext.bufferData","lime/_backend/native/NativeGLRenderContext.hx",506,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_517_bufferSubData,"lime._backend.native.NativeGLRenderContext","bufferSubData",0x1d2c6a82,"lime._backend.native.NativeGLRenderContext.bufferSubData","lime/_backend/native/NativeGLRenderContext.hx",517,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_528_checkFramebufferStatus,"lime._backend.native.NativeGLRenderContext","checkFramebufferStatus",0x44fc773f,"lime._backend.native.NativeGLRenderContext.checkFramebufferStatus","lime/_backend/native/NativeGLRenderContext.hx",528,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_539_clear,"lime._backend.native.NativeGLRenderContext","clear",0xa41f4d65,"lime._backend.native.NativeGLRenderContext.clear","lime/_backend/native/NativeGLRenderContext.hx",539,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_548_clearColor,"lime._backend.native.NativeGLRenderContext","clearColor",0xc5dee5be,"lime._backend.native.NativeGLRenderContext.clearColor","lime/_backend/native/NativeGLRenderContext.hx",548,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_557_clearDepth,"lime._backend.native.NativeGLRenderContext","clearDepth",0x52ac655e,"lime._backend.native.NativeGLRenderContext.clearDepth","lime/_backend/native/NativeGLRenderContext.hx",557,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_566_clearStencil,"lime._backend.native.NativeGLRenderContext","clearStencil",0xb8503f17,"lime._backend.native.NativeGLRenderContext.clearStencil","lime/_backend/native/NativeGLRenderContext.hx",566,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_575_colorMask,"lime._backend.native.NativeGLRenderContext","colorMask",0x3c9e73c7,"lime._backend.native.NativeGLRenderContext.colorMask","lime/_backend/native/NativeGLRenderContext.hx",575,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_584_compileShader,"lime._backend.native.NativeGLRenderContext","compileShader",0xb1f9e4d0,"lime._backend.native.NativeGLRenderContext.compileShader","lime/_backend/native/NativeGLRenderContext.hx",584,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_590_compressedTexImage2D,"lime._backend.native.NativeGLRenderContext","compressedTexImage2D",0xbfcb0fcf,"lime._backend.native.NativeGLRenderContext.compressedTexImage2D","lime/_backend/native/NativeGLRenderContext.hx",590,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_602_compressedTexSubImage2D,"lime._backend.native.NativeGLRenderContext","compressedTexSubImage2D",0x325d67ab,"lime._backend.native.NativeGLRenderContext.compressedTexSubImage2D","lime/_backend/native/NativeGLRenderContext.hx",602,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_617_copyTexImage2D,"lime._backend.native.NativeGLRenderContext","copyTexImage2D",0x6bb4ba03,"lime._backend.native.NativeGLRenderContext.copyTexImage2D","lime/_backend/native/NativeGLRenderContext.hx",617,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_626_copyTexSubImage2D,"lime._backend.native.NativeGLRenderContext","copyTexSubImage2D",0x9eb915f7,"lime._backend.native.NativeGLRenderContext.copyTexSubImage2D","lime/_backend/native/NativeGLRenderContext.hx",626,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_635_createBuffer,"lime._backend.native.NativeGLRenderContext","createBuffer",0x4fb7cc44,"lime._backend.native.NativeGLRenderContext.createBuffer","lime/_backend/native/NativeGLRenderContext.hx",635,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_646_createFramebuffer,"lime._backend.native.NativeGLRenderContext","createFramebuffer",0xc6f32f29,"lime._backend.native.NativeGLRenderContext.createFramebuffer","lime/_backend/native/NativeGLRenderContext.hx",646,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_657_createProgram,"lime._backend.native.NativeGLRenderContext","createProgram",0xb38396c0,"lime._backend.native.NativeGLRenderContext.createProgram","lime/_backend/native/NativeGLRenderContext.hx",657,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_668_createRenderbuffer,"lime._backend.native.NativeGLRenderContext","createRenderbuffer",0xd462271a,"lime._backend.native.NativeGLRenderContext.createRenderbuffer","lime/_backend/native/NativeGLRenderContext.hx",668,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_679_createShader,"lime._backend.native.NativeGLRenderContext","createShader",0x9c43ce69,"lime._backend.native.NativeGLRenderContext.createShader","lime/_backend/native/NativeGLRenderContext.hx",679,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_690_createTexture,"lime._backend.native.NativeGLRenderContext","createTexture",0x5e6b1517,"lime._backend.native.NativeGLRenderContext.createTexture","lime/_backend/native/NativeGLRenderContext.hx",690,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_701_cullFace,"lime._backend.native.NativeGLRenderContext","cullFace",0x1ccf0297,"lime._backend.native.NativeGLRenderContext.cullFace","lime/_backend/native/NativeGLRenderContext.hx",701,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_707_deleteBuffer,"lime._backend.native.NativeGLRenderContext","deleteBuffer",0x93fab2b3,"lime._backend.native.NativeGLRenderContext.deleteBuffer","lime/_backend/native/NativeGLRenderContext.hx",707,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_717_deleteFramebuffer,"lime._backend.native.NativeGLRenderContext","deleteFramebuffer",0x4a0b965a,"lime._backend.native.NativeGLRenderContext.deleteFramebuffer","lime/_backend/native/NativeGLRenderContext.hx",717,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_727_deleteProgram,"lime._backend.native.NativeGLRenderContext","deleteProgram",0x29ca5171,"lime._backend.native.NativeGLRenderContext.deleteProgram","lime/_backend/native/NativeGLRenderContext.hx",727,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_737_deleteRenderbuffer,"lime._backend.native.NativeGLRenderContext","deleteRenderbuffer",0x06a40ac9,"lime._backend.native.NativeGLRenderContext.deleteRenderbuffer","lime/_backend/native/NativeGLRenderContext.hx",737,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_747_deleteShader,"lime._backend.native.NativeGLRenderContext","deleteShader",0xe086b4d8,"lime._backend.native.NativeGLRenderContext.deleteShader","lime/_backend/native/NativeGLRenderContext.hx",747,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_757_deleteTexture,"lime._backend.native.NativeGLRenderContext","deleteTexture",0xd4b1cfc8,"lime._backend.native.NativeGLRenderContext.deleteTexture","lime/_backend/native/NativeGLRenderContext.hx",757,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_770_depthFunc,"lime._backend.native.NativeGLRenderContext","depthFunc",0xb322edbf,"lime._backend.native.NativeGLRenderContext.depthFunc","lime/_backend/native/NativeGLRenderContext.hx",770,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_779_depthMask,"lime._backend.native.NativeGLRenderContext","depthMask",0xb7b44367,"lime._backend.native.NativeGLRenderContext.depthMask","lime/_backend/native/NativeGLRenderContext.hx",779,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_788_depthRange,"lime._backend.native.NativeGLRenderContext","depthRange",0xe703cee2,"lime._backend.native.NativeGLRenderContext.depthRange","lime/_backend/native/NativeGLRenderContext.hx",788,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_797_detachShader,"lime._backend.native.NativeGLRenderContext","detachShader",0x477ba000,"lime._backend.native.NativeGLRenderContext.detachShader","lime/_backend/native/NativeGLRenderContext.hx",797,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_806_disable,"lime._backend.native.NativeGLRenderContext","disable",0x6aacebc0,"lime._backend.native.NativeGLRenderContext.disable","lime/_backend/native/NativeGLRenderContext.hx",806,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_815_disableVertexAttribArray,"lime._backend.native.NativeGLRenderContext","disableVertexAttribArray",0xb250550b,"lime._backend.native.NativeGLRenderContext.disableVertexAttribArray","lime/_backend/native/NativeGLRenderContext.hx",815,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_824_drawArrays,"lime._backend.native.NativeGLRenderContext","drawArrays",0xa02c2906,"lime._backend.native.NativeGLRenderContext.drawArrays","lime/_backend/native/NativeGLRenderContext.hx",824,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_833_drawElements,"lime._backend.native.NativeGLRenderContext","drawElements",0xb6859183,"lime._backend.native.NativeGLRenderContext.drawElements","lime/_backend/native/NativeGLRenderContext.hx",833,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_842_enable,"lime._backend.native.NativeGLRenderContext","enable",0xe8242fab,"lime._backend.native.NativeGLRenderContext.enable","lime/_backend/native/NativeGLRenderContext.hx",842,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_851_enableVertexAttribArray,"lime._backend.native.NativeGLRenderContext","enableVertexAttribArray",0xa839f8c0,"lime._backend.native.NativeGLRenderContext.enableVertexAttribArray","lime/_backend/native/NativeGLRenderContext.hx",851,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_860_finish,"lime._backend.native.NativeGLRenderContext","finish",0x761bc17b,"lime._backend.native.NativeGLRenderContext.finish","lime/_backend/native/NativeGLRenderContext.hx",860,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_869_flush,"lime._backend.native.NativeGLRenderContext","flush",0x5e5f3e9c,"lime._backend.native.NativeGLRenderContext.flush","lime/_backend/native/NativeGLRenderContext.hx",869,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_878_framebufferRenderbuffer,"lime._backend.native.NativeGLRenderContext","framebufferRenderbuffer",0x32928f3b,"lime._backend.native.NativeGLRenderContext.framebufferRenderbuffer","lime/_backend/native/NativeGLRenderContext.hx",878,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_887_framebufferTexture2D,"lime._backend.native.NativeGLRenderContext","framebufferTexture2D",0xbf8f9de8,"lime._backend.native.NativeGLRenderContext.framebufferTexture2D","lime/_backend/native/NativeGLRenderContext.hx",887,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_896_frontFace,"lime._backend.native.NativeGLRenderContext","frontFace",0x999ba9be,"lime._backend.native.NativeGLRenderContext.frontFace","lime/_backend/native/NativeGLRenderContext.hx",896,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_905_generateMipmap,"lime._backend.native.NativeGLRenderContext","generateMipmap",0xe24bbfc5,"lime._backend.native.NativeGLRenderContext.generateMipmap","lime/_backend/native/NativeGLRenderContext.hx",905,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_915_getActiveAttrib,"lime._backend.native.NativeGLRenderContext","getActiveAttrib",0x3210a53e,"lime._backend.native.NativeGLRenderContext.getActiveAttrib","lime/_backend/native/NativeGLRenderContext.hx",915,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_927_getActiveUniform,"lime._backend.native.NativeGLRenderContext","getActiveUniform",0x18b6b8c0,"lime._backend.native.NativeGLRenderContext.getActiveUniform","lime/_backend/native/NativeGLRenderContext.hx",927,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_938_getAttachedShaders,"lime._backend.native.NativeGLRenderContext","getAttachedShaders",0x6264cbdc,"lime._backend.native.NativeGLRenderContext.getAttachedShaders","lime/_backend/native/NativeGLRenderContext.hx",938,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_949_getAttribLocation,"lime._backend.native.NativeGLRenderContext","getAttribLocation",0x571a5aad,"lime._backend.native.NativeGLRenderContext.getAttribLocation","lime/_backend/native/NativeGLRenderContext.hx",949,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_960_getBufferParameter,"lime._backend.native.NativeGLRenderContext","getBufferParameter",0xe3a1f5bb,"lime._backend.native.NativeGLRenderContext.getBufferParameter","lime/_backend/native/NativeGLRenderContext.hx",960,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_968_getContextAttributes,"lime._backend.native.NativeGLRenderContext","getContextAttributes",0x494f1158,"lime._backend.native.NativeGLRenderContext.getContextAttributes","lime/_backend/native/NativeGLRenderContext.hx",968,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_985_getError,"lime._backend.native.NativeGLRenderContext","getError",0x439df67a,"lime._backend.native.NativeGLRenderContext.getError","lime/_backend/native/NativeGLRenderContext.hx",985,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_999_getExtension,"lime._backend.native.NativeGLRenderContext","getExtension",0x5134ff31,"lime._backend.native.NativeGLRenderContext.getExtension","lime/_backend/native/NativeGLRenderContext.hx",999,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1010_getFramebufferAttachmentParameter,"lime._backend.native.NativeGLRenderContext","getFramebufferAttachmentParameter",0xabff2f67,"lime._backend.native.NativeGLRenderContext.getFramebufferAttachmentParameter","lime/_backend/native/NativeGLRenderContext.hx",1010,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1021_getParameter,"lime._backend.native.NativeGLRenderContext","getParameter",0xb4d4a15b,"lime._backend.native.NativeGLRenderContext.getParameter","lime/_backend/native/NativeGLRenderContext.hx",1021,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1032_getProgramInfoLog,"lime._backend.native.NativeGLRenderContext","getProgramInfoLog",0xc7fd31a0,"lime._backend.native.NativeGLRenderContext.getProgramInfoLog","lime/_backend/native/NativeGLRenderContext.hx",1032,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1043_getProgramParameter,"lime._backend.native.NativeGLRenderContext","getProgramParameter",0xd798a913,"lime._backend.native.NativeGLRenderContext.getProgramParameter","lime/_backend/native/NativeGLRenderContext.hx",1043,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1054_getRenderbufferParameter,"lime._backend.native.NativeGLRenderContext","getRenderbufferParameter",0xa4b3aca5,"lime._backend.native.NativeGLRenderContext.getRenderbufferParameter","lime/_backend/native/NativeGLRenderContext.hx",1054,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1065_getShaderInfoLog,"lime._backend.native.NativeGLRenderContext","getShaderInfoLog",0x353140c3,"lime._backend.native.NativeGLRenderContext.getShaderInfoLog","lime/_backend/native/NativeGLRenderContext.hx",1065,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1076_getShaderParameter,"lime._backend.native.NativeGLRenderContext","getShaderParameter",0x054906f6,"lime._backend.native.NativeGLRenderContext.getShaderParameter","lime/_backend/native/NativeGLRenderContext.hx",1076,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1088_getShaderPrecisionFormat,"lime._backend.native.NativeGLRenderContext","getShaderPrecisionFormat",0x36aba422,"lime._backend.native.NativeGLRenderContext.getShaderPrecisionFormat","lime/_backend/native/NativeGLRenderContext.hx",1088,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1099_getShaderSource,"lime._backend.native.NativeGLRenderContext","getShaderSource",0x93f2bd6e,"lime._backend.native.NativeGLRenderContext.getShaderSource","lime/_backend/native/NativeGLRenderContext.hx",1099,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1107_getSupportedExtensions,"lime._backend.native.NativeGLRenderContext","getSupportedExtensions",0xdbf4ca14,"lime._backend.native.NativeGLRenderContext.getSupportedExtensions","lime/_backend/native/NativeGLRenderContext.hx",1107,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1123_getTexParameter,"lime._backend.native.NativeGLRenderContext","getTexParameter",0xa1c1b250,"lime._backend.native.NativeGLRenderContext.getTexParameter","lime/_backend/native/NativeGLRenderContext.hx",1123,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1134_getUniform,"lime._backend.native.NativeGLRenderContext","getUniform",0xab3dfc66,"lime._backend.native.NativeGLRenderContext.getUniform","lime/_backend/native/NativeGLRenderContext.hx",1134,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1145_getUniformLocation,"lime._backend.native.NativeGLRenderContext","getUniformLocation",0x1ec1fcbb,"lime._backend.native.NativeGLRenderContext.getUniformLocation","lime/_backend/native/NativeGLRenderContext.hx",1145,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1156_getVertexAttrib,"lime._backend.native.NativeGLRenderContext","getVertexAttrib",0x720a495c,"lime._backend.native.NativeGLRenderContext.getVertexAttrib","lime/_backend/native/NativeGLRenderContext.hx",1156,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1167_getVertexAttribOffset,"lime._backend.native.NativeGLRenderContext","getVertexAttribOffset",0xbaf1c20f,"lime._backend.native.NativeGLRenderContext.getVertexAttribOffset","lime/_backend/native/NativeGLRenderContext.hx",1167,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1178_hint,"lime._backend.native.NativeGLRenderContext","hint",0xc4e4a4af,"lime._backend.native.NativeGLRenderContext.hint","lime/_backend/native/NativeGLRenderContext.hx",1178,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1187_isBuffer,"lime._backend.native.NativeGLRenderContext","isBuffer",0x999b73b2,"lime._backend.native.NativeGLRenderContext.isBuffer","lime/_backend/native/NativeGLRenderContext.hx",1187,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1197_isContextLost,"lime._backend.native.NativeGLRenderContext","isContextLost",0x05275381,"lime._backend.native.NativeGLRenderContext.isContextLost","lime/_backend/native/NativeGLRenderContext.hx",1197,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1205_isEnabled,"lime._backend.native.NativeGLRenderContext","isEnabled",0x9b0a298f,"lime._backend.native.NativeGLRenderContext.isEnabled","lime/_backend/native/NativeGLRenderContext.hx",1205,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1216_isFramebuffer,"lime._backend.native.NativeGLRenderContext","isFramebuffer",0x5ab3d8fb,"lime._backend.native.NativeGLRenderContext.isFramebuffer","lime/_backend/native/NativeGLRenderContext.hx",1216,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1227_isProgram,"lime._backend.native.NativeGLRenderContext","isProgram",0x10d26f92,"lime._backend.native.NativeGLRenderContext.isProgram","lime/_backend/native/NativeGLRenderContext.hx",1227,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1238_isRenderbuffer,"lime._backend.native.NativeGLRenderContext","isRenderbuffer",0x89361508,"lime._backend.native.NativeGLRenderContext.isRenderbuffer","lime/_backend/native/NativeGLRenderContext.hx",1238,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1249_isShader,"lime._backend.native.NativeGLRenderContext","isShader",0xe62775d7,"lime._backend.native.NativeGLRenderContext.isShader","lime/_backend/native/NativeGLRenderContext.hx",1249,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1260_isTexture,"lime._backend.native.NativeGLRenderContext","isTexture",0xbbb9ede9,"lime._backend.native.NativeGLRenderContext.isTexture","lime/_backend/native/NativeGLRenderContext.hx",1260,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1271_lineWidth,"lime._backend.native.NativeGLRenderContext","lineWidth",0x2a38614a,"lime._backend.native.NativeGLRenderContext.lineWidth","lime/_backend/native/NativeGLRenderContext.hx",1271,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1280_linkProgram,"lime._backend.native.NativeGLRenderContext","linkProgram",0x8c31fb82,"lime._backend.native.NativeGLRenderContext.linkProgram","lime/_backend/native/NativeGLRenderContext.hx",1280,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1289_pixelStorei,"lime._backend.native.NativeGLRenderContext","pixelStorei",0x837e8266,"lime._backend.native.NativeGLRenderContext.pixelStorei","lime/_backend/native/NativeGLRenderContext.hx",1289,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1298_polygonOffset,"lime._backend.native.NativeGLRenderContext","polygonOffset",0x3d949985,"lime._backend.native.NativeGLRenderContext.polygonOffset","lime/_backend/native/NativeGLRenderContext.hx",1298,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1304_readPixels,"lime._backend.native.NativeGLRenderContext","readPixels",0x2c9e084b,"lime._backend.native.NativeGLRenderContext.readPixels","lime/_backend/native/NativeGLRenderContext.hx",1304,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1319_renderbufferStorage,"lime._backend.native.NativeGLRenderContext","renderbufferStorage",0xc86c86dd,"lime._backend.native.NativeGLRenderContext.renderbufferStorage","lime/_backend/native/NativeGLRenderContext.hx",1319,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1328_sampleCoverage,"lime._backend.native.NativeGLRenderContext","sampleCoverage",0xc2bf515a,"lime._backend.native.NativeGLRenderContext.sampleCoverage","lime/_backend/native/NativeGLRenderContext.hx",1328,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1337_scissor,"lime._backend.native.NativeGLRenderContext","scissor",0xbe3ba9f4,"lime._backend.native.NativeGLRenderContext.scissor","lime/_backend/native/NativeGLRenderContext.hx",1337,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1346_shaderSource,"lime._backend.native.NativeGLRenderContext","shaderSource",0xfee81d08,"lime._backend.native.NativeGLRenderContext.shaderSource","lime/_backend/native/NativeGLRenderContext.hx",1346,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1355_stencilFunc,"lime._backend.native.NativeGLRenderContext","stencilFunc",0x4374d138,"lime._backend.native.NativeGLRenderContext.stencilFunc","lime/_backend/native/NativeGLRenderContext.hx",1355,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1364_stencilFuncSeparate,"lime._backend.native.NativeGLRenderContext","stencilFuncSeparate",0xf3caa4bb,"lime._backend.native.NativeGLRenderContext.stencilFuncSeparate","lime/_backend/native/NativeGLRenderContext.hx",1364,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1373_stencilMask,"lime._backend.native.NativeGLRenderContext","stencilMask",0x480626e0,"lime._backend.native.NativeGLRenderContext.stencilMask","lime/_backend/native/NativeGLRenderContext.hx",1373,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1382_stencilMaskSeparate,"lime._backend.native.NativeGLRenderContext","stencilMaskSeparate",0x07a5e263,"lime._backend.native.NativeGLRenderContext.stencilMaskSeparate","lime/_backend/native/NativeGLRenderContext.hx",1382,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1391_stencilOp,"lime._backend.native.NativeGLRenderContext","stencilOp",0x6fc72215,"lime._backend.native.NativeGLRenderContext.stencilOp","lime/_backend/native/NativeGLRenderContext.hx",1391,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1400_stencilOpSeparate,"lime._backend.native.NativeGLRenderContext","stencilOpSeparate",0x4d549a98,"lime._backend.native.NativeGLRenderContext.stencilOpSeparate","lime/_backend/native/NativeGLRenderContext.hx",1400,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1406_texImage2D,"lime._backend.native.NativeGLRenderContext","texImage2D",0x5fdfb1ee,"lime._backend.native.NativeGLRenderContext.texImage2D","lime/_backend/native/NativeGLRenderContext.hx",1406,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1421_texParameterf,"lime._backend.native.NativeGLRenderContext","texParameterf",0x13789b3c,"lime._backend.native.NativeGLRenderContext.texParameterf","lime/_backend/native/NativeGLRenderContext.hx",1421,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1430_texParameteri,"lime._backend.native.NativeGLRenderContext","texParameteri",0x13789b3f,"lime._backend.native.NativeGLRenderContext.texParameteri","lime/_backend/native/NativeGLRenderContext.hx",1430,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1436_texSubImage2D,"lime._backend.native.NativeGLRenderContext","texSubImage2D",0xffd7a2ec,"lime._backend.native.NativeGLRenderContext.texSubImage2D","lime/_backend/native/NativeGLRenderContext.hx",1436,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1451_uniform1f,"lime._backend.native.NativeGLRenderContext","uniform1f",0x20b8c921,"lime._backend.native.NativeGLRenderContext.uniform1f","lime/_backend/native/NativeGLRenderContext.hx",1451,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1460_uniform1fv,"lime._backend.native.NativeGLRenderContext","uniform1fv",0x80f73435,"lime._backend.native.NativeGLRenderContext.uniform1fv","lime/_backend/native/NativeGLRenderContext.hx",1460,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1471_uniform1i,"lime._backend.native.NativeGLRenderContext","uniform1i",0x20b8c924,"lime._backend.native.NativeGLRenderContext.uniform1i","lime/_backend/native/NativeGLRenderContext.hx",1471,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1480_uniform1iv,"lime._backend.native.NativeGLRenderContext","uniform1iv",0x80f736d2,"lime._backend.native.NativeGLRenderContext.uniform1iv","lime/_backend/native/NativeGLRenderContext.hx",1480,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1491_uniform2f,"lime._backend.native.NativeGLRenderContext","uniform2f",0x20b8ca00,"lime._backend.native.NativeGLRenderContext.uniform2f","lime/_backend/native/NativeGLRenderContext.hx",1491,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1500_uniform2fv,"lime._backend.native.NativeGLRenderContext","uniform2fv",0x80f7f676,"lime._backend.native.NativeGLRenderContext.uniform2fv","lime/_backend/native/NativeGLRenderContext.hx",1500,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1511_uniform2i,"lime._backend.native.NativeGLRenderContext","uniform2i",0x20b8ca03,"lime._backend.native.NativeGLRenderContext.uniform2i","lime/_backend/native/NativeGLRenderContext.hx",1511,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1520_uniform2iv,"lime._backend.native.NativeGLRenderContext","uniform2iv",0x80f7f913,"lime._backend.native.NativeGLRenderContext.uniform2iv","lime/_backend/native/NativeGLRenderContext.hx",1520,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1531_uniform3f,"lime._backend.native.NativeGLRenderContext","uniform3f",0x20b8cadf,"lime._backend.native.NativeGLRenderContext.uniform3f","lime/_backend/native/NativeGLRenderContext.hx",1531,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1540_uniform3fv,"lime._backend.native.NativeGLRenderContext","uniform3fv",0x80f8b8b7,"lime._backend.native.NativeGLRenderContext.uniform3fv","lime/_backend/native/NativeGLRenderContext.hx",1540,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1551_uniform3i,"lime._backend.native.NativeGLRenderContext","uniform3i",0x20b8cae2,"lime._backend.native.NativeGLRenderContext.uniform3i","lime/_backend/native/NativeGLRenderContext.hx",1551,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1560_uniform3iv,"lime._backend.native.NativeGLRenderContext","uniform3iv",0x80f8bb54,"lime._backend.native.NativeGLRenderContext.uniform3iv","lime/_backend/native/NativeGLRenderContext.hx",1560,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1571_uniform4f,"lime._backend.native.NativeGLRenderContext","uniform4f",0x20b8cbbe,"lime._backend.native.NativeGLRenderContext.uniform4f","lime/_backend/native/NativeGLRenderContext.hx",1571,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1580_uniform4fv,"lime._backend.native.NativeGLRenderContext","uniform4fv",0x80f97af8,"lime._backend.native.NativeGLRenderContext.uniform4fv","lime/_backend/native/NativeGLRenderContext.hx",1580,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1591_uniform4i,"lime._backend.native.NativeGLRenderContext","uniform4i",0x20b8cbc1,"lime._backend.native.NativeGLRenderContext.uniform4i","lime/_backend/native/NativeGLRenderContext.hx",1591,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1600_uniform4iv,"lime._backend.native.NativeGLRenderContext","uniform4iv",0x80f97d95,"lime._backend.native.NativeGLRenderContext.uniform4iv","lime/_backend/native/NativeGLRenderContext.hx",1600,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1611_uniformMatrix2fv,"lime._backend.native.NativeGLRenderContext","uniformMatrix2fv",0x06c20db5,"lime._backend.native.NativeGLRenderContext.uniformMatrix2fv","lime/_backend/native/NativeGLRenderContext.hx",1611,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1622_uniformMatrix3fv,"lime._backend.native.NativeGLRenderContext","uniformMatrix3fv",0x06c2cff6,"lime._backend.native.NativeGLRenderContext.uniformMatrix3fv","lime/_backend/native/NativeGLRenderContext.hx",1622,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1633_uniformMatrix4fv,"lime._backend.native.NativeGLRenderContext","uniformMatrix4fv",0x06c39237,"lime._backend.native.NativeGLRenderContext.uniformMatrix4fv","lime/_backend/native/NativeGLRenderContext.hx",1633,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1648_useProgram,"lime._backend.native.NativeGLRenderContext","useProgram",0x9d24a225,"lime._backend.native.NativeGLRenderContext.useProgram","lime/_backend/native/NativeGLRenderContext.hx",1648,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1662_validateProgram,"lime._backend.native.NativeGLRenderContext","validateProgram",0xbdfd9a66,"lime._backend.native.NativeGLRenderContext.validateProgram","lime/_backend/native/NativeGLRenderContext.hx",1662,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1671_vertexAttrib1f,"lime._backend.native.NativeGLRenderContext","vertexAttrib1f",0xdaf47d8b,"lime._backend.native.NativeGLRenderContext.vertexAttrib1f","lime/_backend/native/NativeGLRenderContext.hx",1671,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1680_vertexAttrib1fv,"lime._backend.native.NativeGLRenderContext","vertexAttrib1fv",0xbaf95c8b,"lime._backend.native.NativeGLRenderContext.vertexAttrib1fv","lime/_backend/native/NativeGLRenderContext.hx",1680,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1691_vertexAttrib2f,"lime._backend.native.NativeGLRenderContext","vertexAttrib2f",0xdaf47e6a,"lime._backend.native.NativeGLRenderContext.vertexAttrib2f","lime/_backend/native/NativeGLRenderContext.hx",1691,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1700_vertexAttrib2fv,"lime._backend.native.NativeGLRenderContext","vertexAttrib2fv",0xbafa1ecc,"lime._backend.native.NativeGLRenderContext.vertexAttrib2fv","lime/_backend/native/NativeGLRenderContext.hx",1700,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1711_vertexAttrib3f,"lime._backend.native.NativeGLRenderContext","vertexAttrib3f",0xdaf47f49,"lime._backend.native.NativeGLRenderContext.vertexAttrib3f","lime/_backend/native/NativeGLRenderContext.hx",1711,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1720_vertexAttrib3fv,"lime._backend.native.NativeGLRenderContext","vertexAttrib3fv",0xbafae10d,"lime._backend.native.NativeGLRenderContext.vertexAttrib3fv","lime/_backend/native/NativeGLRenderContext.hx",1720,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1731_vertexAttrib4f,"lime._backend.native.NativeGLRenderContext","vertexAttrib4f",0xdaf48028,"lime._backend.native.NativeGLRenderContext.vertexAttrib4f","lime/_backend/native/NativeGLRenderContext.hx",1731,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1740_vertexAttrib4fv,"lime._backend.native.NativeGLRenderContext","vertexAttrib4fv",0xbafba34e,"lime._backend.native.NativeGLRenderContext.vertexAttrib4fv","lime/_backend/native/NativeGLRenderContext.hx",1740,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1751_vertexAttribPointer,"lime._backend.native.NativeGLRenderContext","vertexAttribPointer",0x80b1ea67,"lime._backend.native.NativeGLRenderContext.vertexAttribPointer","lime/_backend/native/NativeGLRenderContext.hx",1751,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1760_viewport,"lime._backend.native.NativeGLRenderContext","viewport",0x0d42678e,"lime._backend.native.NativeGLRenderContext.viewport","lime/_backend/native/NativeGLRenderContext.hx",1760,0x396c0759)
HX_DEFINE_STACK_FRAME(_hx_pos_91221e281a1e85bc_1766_get_version,"lime._backend.native.NativeGLRenderContext","get_version",0x05a29507,"lime._backend.native.NativeGLRenderContext.get_version","lime/_backend/native/NativeGLRenderContext.hx",1766,0x396c0759)
namespace lime{
namespace _backend{
namespace native{

void NativeGLRenderContext_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_30_new)
            	HX_STACK_THIS(this)
HXLINE( 380)		this->BROWSER_DEFAULT_WEBGL = (int)37444;
HXLINE( 379)		this->UNPACK_COLORSPACE_CONVERSION_WEBGL = (int)37443;
HXLINE( 378)		this->CONTEXT_LOST_WEBGL = (int)37442;
HXLINE( 377)		this->UNPACK_PREMULTIPLY_ALPHA_WEBGL = (int)37441;
HXLINE( 376)		this->UNPACK_FLIP_Y_WEBGL = (int)37440;
HXLINE( 374)		this->INVALID_FRAMEBUFFER_OPERATION = (int)1286;
HXLINE( 372)		this->MAX_RENDERBUFFER_SIZE = (int)34024;
HXLINE( 371)		this->RENDERBUFFER_BINDING = (int)36007;
HXLINE( 370)		this->FRAMEBUFFER_BINDING = (int)36006;
HXLINE( 368)		this->FRAMEBUFFER_UNSUPPORTED = (int)36061;
HXLINE( 367)		this->FRAMEBUFFER_INCOMPLETE_DIMENSIONS = (int)36057;
HXLINE( 366)		this->FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = (int)36055;
HXLINE( 365)		this->FRAMEBUFFER_INCOMPLETE_ATTACHMENT = (int)36054;
HXLINE( 364)		this->FRAMEBUFFER_COMPLETE = (int)36053;
HXLINE( 362)		this->NONE = (int)0;
HXLINE( 360)		this->DEPTH_STENCIL_ATTACHMENT = (int)33306;
HXLINE( 359)		this->STENCIL_ATTACHMENT = (int)36128;
HXLINE( 358)		this->DEPTH_ATTACHMENT = (int)36096;
HXLINE( 357)		this->COLOR_ATTACHMENT0 = (int)36064;
HXLINE( 355)		this->FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = (int)36051;
HXLINE( 354)		this->FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = (int)36050;
HXLINE( 353)		this->FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = (int)36049;
HXLINE( 352)		this->FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = (int)36048;
HXLINE( 350)		this->RENDERBUFFER_STENCIL_SIZE = (int)36181;
HXLINE( 349)		this->RENDERBUFFER_DEPTH_SIZE = (int)36180;
HXLINE( 348)		this->RENDERBUFFER_ALPHA_SIZE = (int)36179;
HXLINE( 347)		this->RENDERBUFFER_BLUE_SIZE = (int)36178;
HXLINE( 346)		this->RENDERBUFFER_GREEN_SIZE = (int)36177;
HXLINE( 345)		this->RENDERBUFFER_RED_SIZE = (int)36176;
HXLINE( 344)		this->RENDERBUFFER_INTERNAL_FORMAT = (int)36164;
HXLINE( 343)		this->RENDERBUFFER_HEIGHT = (int)36163;
HXLINE( 342)		this->RENDERBUFFER_WIDTH = (int)36162;
HXLINE( 340)		this->DEPTH_STENCIL = (int)34041;
HXLINE( 339)		this->STENCIL_INDEX8 = (int)36168;
HXLINE( 338)		this->STENCIL_INDEX = (int)6401;
HXLINE( 337)		this->DEPTH_COMPONENT16 = (int)33189;
HXLINE( 336)		this->RGB565 = (int)36194;
HXLINE( 335)		this->RGB5_A1 = (int)32855;
HXLINE( 334)		this->RGBA4 = (int)32854;
HXLINE( 332)		this->RENDERBUFFER = (int)36161;
HXLINE( 331)		this->FRAMEBUFFER = (int)36160;
HXLINE( 329)		this->HIGH_INT = (int)36341;
HXLINE( 328)		this->MEDIUM_INT = (int)36340;
HXLINE( 327)		this->LOW_INT = (int)36339;
HXLINE( 326)		this->HIGH_FLOAT = (int)36338;
HXLINE( 325)		this->MEDIUM_FLOAT = (int)36337;
HXLINE( 324)		this->LOW_FLOAT = (int)36336;
HXLINE( 322)		this->COMPILE_STATUS = (int)35713;
HXLINE( 320)		this->POINT_SPRITE = (int)34913;
HXLINE( 319)		this->VERTEX_PROGRAM_POINT_SIZE = (int)34370;
HXLINE( 317)		this->VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = (int)34975;
HXLINE( 316)		this->VERTEX_ATTRIB_ARRAY_POINTER = (int)34373;
HXLINE( 315)		this->VERTEX_ATTRIB_ARRAY_NORMALIZED = (int)34922;
HXLINE( 314)		this->VERTEX_ATTRIB_ARRAY_TYPE = (int)34341;
HXLINE( 313)		this->VERTEX_ATTRIB_ARRAY_STRIDE = (int)34340;
HXLINE( 312)		this->VERTEX_ATTRIB_ARRAY_SIZE = (int)34339;
HXLINE( 311)		this->VERTEX_ATTRIB_ARRAY_ENABLED = (int)34338;
HXLINE( 309)		this->SAMPLER_CUBE = (int)35680;
HXLINE( 308)		this->SAMPLER_2D = (int)35678;
HXLINE( 307)		this->FLOAT_MAT4 = (int)35676;
HXLINE( 306)		this->FLOAT_MAT3 = (int)35675;
HXLINE( 305)		this->FLOAT_MAT2 = (int)35674;
HXLINE( 304)		this->BOOL_VEC4 = (int)35673;
HXLINE( 303)		this->BOOL_VEC3 = (int)35672;
HXLINE( 302)		this->BOOL_VEC2 = (int)35671;
HXLINE( 301)		this->BOOL = (int)35670;
HXLINE( 300)		this->INT_VEC4 = (int)35669;
HXLINE( 299)		this->INT_VEC3 = (int)35668;
HXLINE( 298)		this->INT_VEC2 = (int)35667;
HXLINE( 297)		this->FLOAT_VEC4 = (int)35666;
HXLINE( 296)		this->FLOAT_VEC3 = (int)35665;
HXLINE( 295)		this->FLOAT_VEC2 = (int)35664;
HXLINE( 293)		this->MIRRORED_REPEAT = (int)33648;
HXLINE( 292)		this->CLAMP_TO_EDGE = (int)33071;
HXLINE( 291)		this->REPEAT = (int)10497;
HXLINE( 289)		this->ACTIVE_TEXTURE = (int)34016;
HXLINE( 288)		this->TEXTURE31 = (int)34015;
HXLINE( 287)		this->TEXTURE30 = (int)34014;
HXLINE( 286)		this->TEXTURE29 = (int)34013;
HXLINE( 285)		this->TEXTURE28 = (int)34012;
HXLINE( 284)		this->TEXTURE27 = (int)34011;
HXLINE( 283)		this->TEXTURE26 = (int)34010;
HXLINE( 282)		this->TEXTURE25 = (int)34009;
HXLINE( 281)		this->TEXTURE24 = (int)34008;
HXLINE( 280)		this->TEXTURE23 = (int)34007;
HXLINE( 279)		this->TEXTURE22 = (int)34006;
HXLINE( 278)		this->TEXTURE21 = (int)34005;
HXLINE( 277)		this->TEXTURE20 = (int)34004;
HXLINE( 276)		this->TEXTURE19 = (int)34003;
HXLINE( 275)		this->TEXTURE18 = (int)34002;
HXLINE( 274)		this->TEXTURE17 = (int)34001;
HXLINE( 273)		this->TEXTURE16 = (int)34000;
HXLINE( 272)		this->TEXTURE15 = (int)33999;
HXLINE( 271)		this->TEXTURE14 = (int)33998;
HXLINE( 270)		this->TEXTURE13 = (int)33997;
HXLINE( 269)		this->TEXTURE12 = (int)33996;
HXLINE( 268)		this->TEXTURE11 = (int)33995;
HXLINE( 267)		this->TEXTURE10 = (int)33994;
HXLINE( 266)		this->TEXTURE9 = (int)33993;
HXLINE( 265)		this->TEXTURE8 = (int)33992;
HXLINE( 264)		this->TEXTURE7 = (int)33991;
HXLINE( 263)		this->TEXTURE6 = (int)33990;
HXLINE( 262)		this->TEXTURE5 = (int)33989;
HXLINE( 261)		this->TEXTURE4 = (int)33988;
HXLINE( 260)		this->TEXTURE3 = (int)33987;
HXLINE( 259)		this->TEXTURE2 = (int)33986;
HXLINE( 258)		this->TEXTURE1 = (int)33985;
HXLINE( 257)		this->TEXTURE0 = (int)33984;
HXLINE( 255)		this->MAX_CUBE_MAP_TEXTURE_SIZE = (int)34076;
HXLINE( 254)		this->TEXTURE_CUBE_MAP_NEGATIVE_Z = (int)34074;
HXLINE( 253)		this->TEXTURE_CUBE_MAP_POSITIVE_Z = (int)34073;
HXLINE( 252)		this->TEXTURE_CUBE_MAP_NEGATIVE_Y = (int)34072;
HXLINE( 251)		this->TEXTURE_CUBE_MAP_POSITIVE_Y = (int)34071;
HXLINE( 250)		this->TEXTURE_CUBE_MAP_NEGATIVE_X = (int)34070;
HXLINE( 249)		this->TEXTURE_CUBE_MAP_POSITIVE_X = (int)34069;
HXLINE( 248)		this->TEXTURE_BINDING_CUBE_MAP = (int)34068;
HXLINE( 247)		this->TEXTURE_CUBE_MAP = (int)34067;
HXLINE( 245)		this->TEXTURE = (int)5890;
HXLINE( 244)		this->TEXTURE_2D = (int)3553;
HXLINE( 242)		this->TEXTURE_WRAP_T = (int)10243;
HXLINE( 241)		this->TEXTURE_WRAP_S = (int)10242;
HXLINE( 240)		this->TEXTURE_MIN_FILTER = (int)10241;
HXLINE( 239)		this->TEXTURE_MAG_FILTER = (int)10240;
HXLINE( 237)		this->LINEAR_MIPMAP_LINEAR = (int)9987;
HXLINE( 236)		this->NEAREST_MIPMAP_LINEAR = (int)9986;
HXLINE( 235)		this->LINEAR_MIPMAP_NEAREST = (int)9985;
HXLINE( 234)		this->NEAREST_MIPMAP_NEAREST = (int)9984;
HXLINE( 232)		this->LINEAR = (int)9729;
HXLINE( 231)		this->NEAREST = (int)9728;
HXLINE( 229)		this->VERSION = (int)7938;
HXLINE( 228)		this->RENDERER = (int)7937;
HXLINE( 227)		this->VENDOR = (int)7936;
HXLINE( 225)		this->DECR_WRAP = (int)34056;
HXLINE( 224)		this->INCR_WRAP = (int)34055;
HXLINE( 223)		this->INVERT = (int)5386;
HXLINE( 222)		this->DECR = (int)7683;
HXLINE( 221)		this->INCR = (int)7682;
HXLINE( 220)		this->REPLACE = (int)7681;
HXLINE( 219)		this->KEEP = (int)7680;
HXLINE( 217)		this->ALWAYS = (int)519;
HXLINE( 216)		this->GEQUAL = (int)518;
HXLINE( 215)		this->NOTEQUAL = (int)517;
HXLINE( 214)		this->GREATER = (int)516;
HXLINE( 213)		this->LEQUAL = (int)515;
HXLINE( 212)		this->EQUAL = (int)514;
HXLINE( 211)		this->LESS = (int)513;
HXLINE( 210)		this->NEVER = (int)512;
HXLINE( 208)		this->CURRENT_PROGRAM = (int)35725;
HXLINE( 207)		this->SHADING_LANGUAGE_VERSION = (int)35724;
HXLINE( 206)		this->ACTIVE_ATTRIBUTES = (int)35721;
HXLINE( 205)		this->ACTIVE_UNIFORMS = (int)35718;
HXLINE( 204)		this->ATTACHED_SHADERS = (int)35717;
HXLINE( 203)		this->VALIDATE_STATUS = (int)35715;
HXLINE( 202)		this->LINK_STATUS = (int)35714;
HXLINE( 201)		this->DELETE_STATUS = (int)35712;
HXLINE( 200)		this->SHADER_TYPE = (int)35663;
HXLINE( 199)		this->MAX_FRAGMENT_UNIFORM_VECTORS = (int)36349;
HXLINE( 198)		this->MAX_TEXTURE_IMAGE_UNITS = (int)34930;
HXLINE( 197)		this->MAX_VERTEX_TEXTURE_IMAGE_UNITS = (int)35660;
HXLINE( 196)		this->MAX_COMBINED_TEXTURE_IMAGE_UNITS = (int)35661;
HXLINE( 195)		this->MAX_VARYING_VECTORS = (int)36348;
HXLINE( 194)		this->MAX_VERTEX_UNIFORM_VECTORS = (int)36347;
HXLINE( 193)		this->MAX_VERTEX_ATTRIBS = (int)34921;
HXLINE( 192)		this->VERTEX_SHADER = (int)35633;
HXLINE( 191)		this->FRAGMENT_SHADER = (int)35632;
HXLINE( 189)		this->UNSIGNED_SHORT_5_6_5 = (int)33635;
HXLINE( 188)		this->UNSIGNED_SHORT_5_5_5_1 = (int)32820;
HXLINE( 187)		this->UNSIGNED_SHORT_4_4_4_4 = (int)32819;
HXLINE( 185)		this->LUMINANCE_ALPHA = (int)6410;
HXLINE( 184)		this->LUMINANCE = (int)6409;
HXLINE( 183)		this->BGRA_EXT = (int)32993;
HXLINE( 182)		this->BGR_EXT = (int)32992;
HXLINE( 181)		this->RGBA = (int)6408;
HXLINE( 180)		this->RGB = (int)6407;
HXLINE( 179)		this->ALPHA = (int)6406;
HXLINE( 178)		this->DEPTH_COMPONENT = (int)6402;
HXLINE( 176)		this->FLOAT = (int)5126;
HXLINE( 175)		this->UNSIGNED_INT = (int)5125;
HXLINE( 174)		this->INT = (int)5124;
HXLINE( 173)		this->UNSIGNED_SHORT = (int)5123;
HXLINE( 172)		this->SHORT = (int)5122;
HXLINE( 171)		this->UNSIGNED_BYTE = (int)5121;
HXLINE( 170)		this->BYTE = (int)5120;
HXLINE( 168)		this->GENERATE_MIPMAP_HINT = (int)33170;
HXLINE( 166)		this->NICEST = (int)4354;
HXLINE( 165)		this->FASTEST = (int)4353;
HXLINE( 164)		this->DONT_CARE = (int)4352;
HXLINE( 162)		this->COMPRESSED_TEXTURE_FORMATS = (int)34467;
HXLINE( 160)		this->SAMPLE_COVERAGE_INVERT = (int)32939;
HXLINE( 159)		this->SAMPLE_COVERAGE_VALUE = (int)32938;
HXLINE( 158)		this->SAMPLES = (int)32937;
HXLINE( 157)		this->SAMPLE_BUFFERS = (int)32936;
HXLINE( 156)		this->TEXTURE_BINDING_2D = (int)32873;
HXLINE( 155)		this->POLYGON_OFFSET_FACTOR = (int)32824;
HXLINE( 153)		this->POLYGON_OFFSET_UNITS = (int)10752;
HXLINE( 152)		this->STENCIL_BITS = (int)3415;
HXLINE( 151)		this->DEPTH_BITS = (int)3414;
HXLINE( 150)		this->ALPHA_BITS = (int)3413;
HXLINE( 149)		this->BLUE_BITS = (int)3412;
HXLINE( 148)		this->GREEN_BITS = (int)3411;
HXLINE( 147)		this->RED_BITS = (int)3410;
HXLINE( 146)		this->SUBPIXEL_BITS = (int)3408;
HXLINE( 145)		this->MAX_VIEWPORT_DIMS = (int)3386;
HXLINE( 144)		this->MAX_TEXTURE_SIZE = (int)3379;
HXLINE( 143)		this->PACK_ALIGNMENT = (int)3333;
HXLINE( 142)		this->UNPACK_ALIGNMENT = (int)3317;
HXLINE( 141)		this->COLOR_WRITEMASK = (int)3107;
HXLINE( 140)		this->COLOR_CLEAR_VALUE = (int)3106;
HXLINE( 138)		this->SCISSOR_BOX = (int)3088;
HXLINE( 137)		this->VIEWPORT = (int)2978;
HXLINE( 136)		this->STENCIL_BACK_WRITEMASK = (int)36005;
HXLINE( 135)		this->STENCIL_BACK_VALUE_MASK = (int)36004;
HXLINE( 134)		this->STENCIL_BACK_REF = (int)36003;
HXLINE( 133)		this->STENCIL_BACK_PASS_DEPTH_PASS = (int)34819;
HXLINE( 132)		this->STENCIL_BACK_PASS_DEPTH_FAIL = (int)34818;
HXLINE( 131)		this->STENCIL_BACK_FAIL = (int)34817;
HXLINE( 130)		this->STENCIL_BACK_FUNC = (int)34816;
HXLINE( 129)		this->STENCIL_WRITEMASK = (int)2968;
HXLINE( 128)		this->STENCIL_VALUE_MASK = (int)2963;
HXLINE( 127)		this->STENCIL_REF = (int)2967;
HXLINE( 126)		this->STENCIL_PASS_DEPTH_PASS = (int)2966;
HXLINE( 125)		this->STENCIL_PASS_DEPTH_FAIL = (int)2965;
HXLINE( 124)		this->STENCIL_FAIL = (int)2964;
HXLINE( 123)		this->STENCIL_FUNC = (int)2962;
HXLINE( 122)		this->STENCIL_CLEAR_VALUE = (int)2961;
HXLINE( 121)		this->DEPTH_FUNC = (int)2932;
HXLINE( 120)		this->DEPTH_CLEAR_VALUE = (int)2931;
HXLINE( 119)		this->DEPTH_WRITEMASK = (int)2930;
HXLINE( 118)		this->DEPTH_RANGE = (int)2928;
HXLINE( 117)		this->FRONT_FACE = (int)2886;
HXLINE( 116)		this->CULL_FACE_MODE = (int)2885;
HXLINE( 115)		this->ALIASED_LINE_WIDTH_RANGE = (int)33902;
HXLINE( 114)		this->ALIASED_POINT_SIZE_RANGE = (int)33901;
HXLINE( 113)		this->LINE_WIDTH = (int)2849;
HXLINE( 111)		this->CCW = (int)2305;
HXLINE( 110)		this->CW = (int)2304;
HXLINE( 108)		this->OUT_OF_MEMORY = (int)1285;
HXLINE( 107)		this->INVALID_OPERATION = (int)1282;
HXLINE( 106)		this->INVALID_VALUE = (int)1281;
HXLINE( 105)		this->INVALID_ENUM = (int)1280;
HXLINE( 104)		this->NO_ERROR = (int)0;
HXLINE( 102)		this->SAMPLE_COVERAGE = (int)32928;
HXLINE( 101)		this->SAMPLE_ALPHA_TO_COVERAGE = (int)32926;
HXLINE( 100)		this->POLYGON_OFFSET_FILL = (int)32823;
HXLINE(  99)		this->SCISSOR_TEST = (int)3089;
HXLINE(  98)		this->DEPTH_TEST = (int)2929;
HXLINE(  97)		this->STENCIL_TEST = (int)2960;
HXLINE(  96)		this->DITHER = (int)3024;
HXLINE(  95)		this->BLEND = (int)3042;
HXLINE(  94)		this->CULL_FACE = (int)2884;
HXLINE(  92)		this->FRONT_AND_BACK = (int)1032;
HXLINE(  91)		this->BACK = (int)1029;
HXLINE(  90)		this->FRONT = (int)1028;
HXLINE(  88)		this->CURRENT_VERTEX_ATTRIB = (int)34342;
HXLINE(  86)		this->BUFFER_USAGE = (int)34661;
HXLINE(  85)		this->BUFFER_SIZE = (int)34660;
HXLINE(  83)		this->DYNAMIC_DRAW = (int)35048;
HXLINE(  82)		this->STATIC_DRAW = (int)35044;
HXLINE(  81)		this->STREAM_DRAW = (int)35040;
HXLINE(  79)		this->ELEMENT_ARRAY_BUFFER_BINDING = (int)34965;
HXLINE(  78)		this->ARRAY_BUFFER_BINDING = (int)34964;
HXLINE(  77)		this->ELEMENT_ARRAY_BUFFER = (int)34963;
HXLINE(  76)		this->ARRAY_BUFFER = (int)34962;
HXLINE(  74)		this->BLEND_COLOR = (int)32773;
HXLINE(  73)		this->ONE_MINUS_CONSTANT_ALPHA = (int)32772;
HXLINE(  72)		this->CONSTANT_ALPHA = (int)32771;
HXLINE(  71)		this->ONE_MINUS_CONSTANT_COLOR = (int)32770;
HXLINE(  70)		this->CONSTANT_COLOR = (int)32769;
HXLINE(  69)		this->BLEND_SRC_ALPHA = (int)32971;
HXLINE(  68)		this->BLEND_DST_ALPHA = (int)32970;
HXLINE(  67)		this->BLEND_SRC_RGB = (int)32969;
HXLINE(  66)		this->BLEND_DST_RGB = (int)32968;
HXLINE(  64)		this->FUNC_REVERSE_SUBTRACT = (int)32779;
HXLINE(  63)		this->FUNC_SUBTRACT = (int)32778;
HXLINE(  61)		this->BLEND_EQUATION_ALPHA = (int)34877;
HXLINE(  60)		this->BLEND_EQUATION_RGB = (int)32777;
HXLINE(  59)		this->BLEND_EQUATION = (int)32777;
HXLINE(  58)		this->FUNC_ADD = (int)32774;
HXLINE(  56)		this->SRC_ALPHA_SATURATE = (int)776;
HXLINE(  55)		this->ONE_MINUS_DST_COLOR = (int)775;
HXLINE(  54)		this->DST_COLOR = (int)774;
HXLINE(  52)		this->ONE_MINUS_DST_ALPHA = (int)773;
HXLINE(  51)		this->DST_ALPHA = (int)772;
HXLINE(  50)		this->ONE_MINUS_SRC_ALPHA = (int)771;
HXLINE(  49)		this->SRC_ALPHA = (int)770;
HXLINE(  48)		this->ONE_MINUS_SRC_COLOR = (int)769;
HXLINE(  47)		this->SRC_COLOR = (int)768;
HXLINE(  46)		this->ONE = (int)1;
HXLINE(  45)		this->ZERO = (int)0;
HXLINE(  43)		this->TRIANGLE_FAN = (int)6;
HXLINE(  42)		this->TRIANGLE_STRIP = (int)5;
HXLINE(  41)		this->TRIANGLES = (int)4;
HXLINE(  40)		this->LINE_STRIP = (int)3;
HXLINE(  39)		this->LINE_LOOP = (int)2;
HXLINE(  38)		this->LINES = (int)1;
HXLINE(  37)		this->POINTS = (int)0;
HXLINE(  35)		this->COLOR_BUFFER_BIT = (int)16384;
HXLINE(  34)		this->STENCIL_BUFFER_BIT = (int)1024;
HXLINE(  33)		this->DEPTH_BUFFER_BIT = (int)256;
            	}

Dynamic NativeGLRenderContext_obj::__CreateEmpty() { return new NativeGLRenderContext_obj; }

void *NativeGLRenderContext_obj::_hx_vtable = 0;

Dynamic NativeGLRenderContext_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeGLRenderContext_obj > _hx_result = new NativeGLRenderContext_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NativeGLRenderContext_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2375b35c;
}

void NativeGLRenderContext_obj::activeTexture(int texture){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_397_activeTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
HXLINE( 397)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_active_texture(texture);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,activeTexture,(void))

void NativeGLRenderContext_obj::attachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_403_attachShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(shader,"shader")
HXLINE( 406)		program->attach(shader);
HXLINE( 407)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_attach_shader(hx::DynamicPtr(program->id),hx::DynamicPtr(shader->id));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,attachShader,(void))

void NativeGLRenderContext_obj::bindAttribLocation( ::lime::graphics::opengl::GLProgram program,int index,::String name){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_416_bindAttribLocation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(name,"name")
HXLINE( 416)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_bind_attrib_location(hx::DynamicPtr(program->id),index,name);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,bindAttribLocation,(void))

void NativeGLRenderContext_obj::bindBuffer(int target, ::lime::graphics::opengl::GLBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_425_bindBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 425)		 ::Dynamic buffer1;
HXDLIN( 425)		if (hx::IsNull( buffer )) {
HXLINE( 425)			buffer1 = null();
            		}
            		else {
HXLINE( 425)			buffer1 = buffer->id;
            		}
HXDLIN( 425)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_bind_buffer(target,hx::DynamicPtr(buffer1));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,bindBuffer,(void))

void NativeGLRenderContext_obj::bindFramebuffer(int target, ::lime::graphics::opengl::GLFramebuffer framebuffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_434_bindFramebuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(framebuffer,"framebuffer")
HXLINE( 434)		 ::Dynamic framebuffer1;
HXDLIN( 434)		if (hx::IsNull( framebuffer )) {
HXLINE( 434)			framebuffer1 = null();
            		}
            		else {
HXLINE( 434)			framebuffer1 = framebuffer->id;
            		}
HXDLIN( 434)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_bind_framebuffer(target,hx::DynamicPtr(framebuffer1));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,bindFramebuffer,(void))

void NativeGLRenderContext_obj::bindRenderbuffer(int target, ::lime::graphics::opengl::GLRenderbuffer renderbuffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_443_bindRenderbuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(renderbuffer,"renderbuffer")
HXLINE( 443)		 ::Dynamic renderbuffer1;
HXDLIN( 443)		if (hx::IsNull( renderbuffer )) {
HXLINE( 443)			renderbuffer1 = null();
            		}
            		else {
HXLINE( 443)			renderbuffer1 = renderbuffer->id;
            		}
HXDLIN( 443)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_bind_renderbuffer(target,hx::DynamicPtr(renderbuffer1));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,bindRenderbuffer,(void))

void NativeGLRenderContext_obj::bindTexture(int target, ::lime::graphics::opengl::GLTexture texture){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_452_bindTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(texture,"texture")
HXLINE( 452)		 ::Dynamic texture1;
HXDLIN( 452)		if (hx::IsNull( texture )) {
HXLINE( 452)			texture1 = null();
            		}
            		else {
HXLINE( 452)			texture1 = texture->id;
            		}
HXDLIN( 452)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_bind_texture(target,hx::DynamicPtr(texture1));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,bindTexture,(void))

void NativeGLRenderContext_obj::blendColor(Float red,Float green,Float blue,Float alpha){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_461_blendColor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 461)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_blend_color(red,green,blue,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,blendColor,(void))

void NativeGLRenderContext_obj::blendEquation(int mode){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_470_blendEquation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
HXLINE( 470)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_blend_equation(mode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,blendEquation,(void))

void NativeGLRenderContext_obj::blendEquationSeparate(int modeRGB,int modeAlpha){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_479_blendEquationSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(modeRGB,"modeRGB")
            	HX_STACK_ARG(modeAlpha,"modeAlpha")
HXLINE( 479)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_blend_equation_separate(modeRGB,modeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,blendEquationSeparate,(void))

void NativeGLRenderContext_obj::blendFunc(int sfactor,int dfactor){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_488_blendFunc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sfactor,"sfactor")
            	HX_STACK_ARG(dfactor,"dfactor")
HXLINE( 488)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_blend_func(sfactor,dfactor);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,blendFunc,(void))

void NativeGLRenderContext_obj::blendFuncSeparate(int srcRGB,int dstRGB,int srcAlpha,int dstAlpha){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_497_blendFuncSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(srcRGB,"srcRGB")
            	HX_STACK_ARG(dstRGB,"dstRGB")
            	HX_STACK_ARG(srcAlpha,"srcAlpha")
            	HX_STACK_ARG(dstAlpha,"dstAlpha")
HXLINE( 497)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_blend_func_separate(srcRGB,dstRGB,srcAlpha,dstAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,blendFuncSeparate,(void))

void NativeGLRenderContext_obj::bufferData(int target, ::lime::utils::ArrayBufferView data,int usage){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_506_bufferData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(usage,"usage")
HXLINE( 506)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_buffer_data(target,hx::DynamicPtr(data->buffer),data->byteOffset,data->byteLength,usage);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,bufferData,(void))

void NativeGLRenderContext_obj::bufferSubData(int target,int offset, ::lime::utils::ArrayBufferView data){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_517_bufferSubData)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(data,"data")
HXLINE( 517)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_buffer_sub_data(target,offset,hx::DynamicPtr(data->buffer),data->byteOffset,data->byteLength);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,bufferSubData,(void))

int NativeGLRenderContext_obj::checkFramebufferStatus(int target){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_528_checkFramebufferStatus)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
HXLINE( 528)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_check_framebuffer_status(target);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,checkFramebufferStatus,return )

void NativeGLRenderContext_obj::clear(int mask){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_539_clear)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
HXLINE( 539)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_clear(mask);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,clear,(void))

void NativeGLRenderContext_obj::clearColor(Float red,Float green,Float blue,Float alpha){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_548_clearColor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 548)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_clear_color(red,green,blue,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,clearColor,(void))

void NativeGLRenderContext_obj::clearDepth(Float depth){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_557_clearDepth)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(depth,"depth")
HXLINE( 557)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_clear_depth(depth);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,clearDepth,(void))

void NativeGLRenderContext_obj::clearStencil(int s){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_566_clearStencil)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 566)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_clear_stencil(s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,clearStencil,(void))

void NativeGLRenderContext_obj::colorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_575_colorMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(red,"red")
            	HX_STACK_ARG(green,"green")
            	HX_STACK_ARG(blue,"blue")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 575)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_color_mask(red,green,blue,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,colorMask,(void))

void NativeGLRenderContext_obj::compileShader( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_584_compileShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE( 584)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_compile_shader(hx::DynamicPtr(shader->id));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,compileShader,(void))

void NativeGLRenderContext_obj::compressedTexImage2D(int target,int level,int internalformat,int width,int height,int border, ::lime::utils::ArrayBufferView data){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_590_compressedTexImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(internalformat,"internalformat")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(border,"border")
            	HX_STACK_ARG(data,"data")
HXLINE( 593)		HX_VAR(  ::haxe::io::Bytes,buffer);
HXDLIN( 593)		if (hx::IsNull( data )) {
HXLINE( 593)			buffer = null();
            		}
            		else {
HXLINE( 593)			buffer = data->buffer;
            		}
HXLINE( 594)		{
HXLINE( 594)			int byteOffset;
HXDLIN( 594)			if (hx::IsNull( data )) {
HXLINE( 594)				byteOffset = (int)0;
            			}
            			else {
HXLINE( 594)				byteOffset = data->byteOffset;
            			}
HXDLIN( 594)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_compressed_tex_image_2d(target,level,internalformat,width,height,border,hx::DynamicPtr(buffer),byteOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(NativeGLRenderContext_obj,compressedTexImage2D,(void))

void NativeGLRenderContext_obj::compressedTexSubImage2D(int target,int level,int xoffset,int yoffset,int width,int height,int format, ::lime::utils::ArrayBufferView data){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_602_compressedTexSubImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(xoffset,"xoffset")
            	HX_STACK_ARG(yoffset,"yoffset")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(data,"data")
HXLINE( 605)		HX_VAR(  ::haxe::io::Bytes,buffer);
HXDLIN( 605)		if (hx::IsNull( data )) {
HXLINE( 605)			buffer = null();
            		}
            		else {
HXLINE( 605)			buffer = data->buffer;
            		}
HXLINE( 606)		{
HXLINE( 606)			int byteOffset;
HXDLIN( 606)			if (hx::IsNull( data )) {
HXLINE( 606)				byteOffset = (int)0;
            			}
            			else {
HXLINE( 606)				byteOffset = data->byteOffset;
            			}
HXDLIN( 606)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_compressed_tex_sub_image_2d(target,level,xoffset,yoffset,width,height,format,hx::DynamicPtr(buffer),byteOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC8(NativeGLRenderContext_obj,compressedTexSubImage2D,(void))

void NativeGLRenderContext_obj::copyTexImage2D(int target,int level,int internalformat,int x,int y,int width,int height,int border){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_617_copyTexImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(internalformat,"internalformat")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(border,"border")
HXLINE( 617)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_copy_tex_image_2d(target,level,internalformat,x,y,width,height,border);
            	}


HX_DEFINE_DYNAMIC_FUNC8(NativeGLRenderContext_obj,copyTexImage2D,(void))

void NativeGLRenderContext_obj::copyTexSubImage2D(int target,int level,int xoffset,int yoffset,int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_626_copyTexSubImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(xoffset,"xoffset")
            	HX_STACK_ARG(yoffset,"yoffset")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 626)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_copy_tex_sub_image_2d(target,level,xoffset,yoffset,x,y,width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC8(NativeGLRenderContext_obj,copyTexSubImage2D,(void))

 ::lime::graphics::opengl::GLBuffer NativeGLRenderContext_obj::createBuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_635_createBuffer)
            	HX_STACK_THIS(this)
HXLINE( 635)		int _hx_tmp = this->get_version();
HXDLIN( 635)		return  ::lime::graphics::opengl::GLBuffer_obj::__alloc( HX_CTX ,_hx_tmp,( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_create_buffer()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,createBuffer,return )

 ::lime::graphics::opengl::GLFramebuffer NativeGLRenderContext_obj::createFramebuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_646_createFramebuffer)
            	HX_STACK_THIS(this)
HXLINE( 646)		int _hx_tmp = this->get_version();
HXDLIN( 646)		return  ::lime::graphics::opengl::GLFramebuffer_obj::__alloc( HX_CTX ,_hx_tmp,( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_create_framebuffer()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,createFramebuffer,return )

 ::lime::graphics::opengl::GLProgram NativeGLRenderContext_obj::createProgram(){
            	HX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_657_createProgram)
            	HX_STACK_THIS(this)
HXLINE( 657)		int _hx_tmp = this->get_version();
HXDLIN( 657)		return  ::lime::graphics::opengl::GLProgram_obj::__alloc( HX_CTX ,_hx_tmp,( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_create_program()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,createProgram,return )

 ::lime::graphics::opengl::GLRenderbuffer NativeGLRenderContext_obj::createRenderbuffer(){
            	HX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_668_createRenderbuffer)
            	HX_STACK_THIS(this)
HXLINE( 668)		int _hx_tmp = this->get_version();
HXDLIN( 668)		return  ::lime::graphics::opengl::GLRenderbuffer_obj::__alloc( HX_CTX ,_hx_tmp,( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_create_render_buffer()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,createRenderbuffer,return )

 ::lime::graphics::opengl::GLShader NativeGLRenderContext_obj::createShader(int type){
            	HX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_679_createShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 679)		int _hx_tmp = this->get_version();
HXDLIN( 679)		return  ::lime::graphics::opengl::GLShader_obj::__alloc( HX_CTX ,_hx_tmp,( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_create_shader(type)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,createShader,return )

 ::lime::graphics::opengl::GLTexture NativeGLRenderContext_obj::createTexture(){
            	HX_GC_STACKFRAME(&_hx_pos_91221e281a1e85bc_690_createTexture)
            	HX_STACK_THIS(this)
HXLINE( 690)		int _hx_tmp = this->get_version();
HXDLIN( 690)		return  ::lime::graphics::opengl::GLTexture_obj::__alloc( HX_CTX ,_hx_tmp,( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_create_texture()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,createTexture,return )

void NativeGLRenderContext_obj::cullFace(int mode){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_701_cullFace)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
HXLINE( 701)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_cull_face(mode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,cullFace,(void))

void NativeGLRenderContext_obj::deleteBuffer( ::lime::graphics::opengl::GLBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_707_deleteBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 710)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_delete_buffer(hx::DynamicPtr(buffer->id));
HXLINE( 711)		buffer->invalidate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,deleteBuffer,(void))

void NativeGLRenderContext_obj::deleteFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_717_deleteFramebuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(framebuffer,"framebuffer")
HXLINE( 720)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_delete_framebuffer(hx::DynamicPtr(framebuffer->id));
HXLINE( 721)		framebuffer->invalidate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,deleteFramebuffer,(void))

void NativeGLRenderContext_obj::deleteProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_727_deleteProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE( 730)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_delete_program(hx::DynamicPtr(program->id));
HXLINE( 731)		program->invalidate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,deleteProgram,(void))

void NativeGLRenderContext_obj::deleteRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_737_deleteRenderbuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderbuffer,"renderbuffer")
HXLINE( 740)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_delete_render_buffer(hx::DynamicPtr(renderbuffer->id));
HXLINE( 741)		renderbuffer->invalidate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,deleteRenderbuffer,(void))

void NativeGLRenderContext_obj::deleteShader( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_747_deleteShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE( 750)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_delete_shader(hx::DynamicPtr(shader->id));
HXLINE( 751)		shader->invalidate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,deleteShader,(void))

void NativeGLRenderContext_obj::deleteTexture( ::lime::graphics::opengl::GLTexture texture){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_757_deleteTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
HXLINE( 760)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_delete_texture(hx::DynamicPtr(texture->id));
HXLINE( 761)		texture->invalidate();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,deleteTexture,(void))

void NativeGLRenderContext_obj::depthFunc(int func){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_770_depthFunc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
HXLINE( 770)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_depth_func(func);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,depthFunc,(void))

void NativeGLRenderContext_obj::depthMask(bool flag){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_779_depthMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(flag,"flag")
HXLINE( 779)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_depth_mask(flag);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,depthMask,(void))

void NativeGLRenderContext_obj::depthRange(Float zNear,Float zFar){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_788_depthRange)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(zNear,"zNear")
            	HX_STACK_ARG(zFar,"zFar")
HXLINE( 788)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_depth_range(zNear,zFar);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,depthRange,(void))

void NativeGLRenderContext_obj::detachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_797_detachShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(shader,"shader")
HXLINE( 797)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_detach_shader(hx::DynamicPtr(program->id),hx::DynamicPtr(shader->id));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,detachShader,(void))

void NativeGLRenderContext_obj::disable(int cap){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_806_disable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cap,"cap")
HXLINE( 806)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_disable(cap);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,disable,(void))

void NativeGLRenderContext_obj::disableVertexAttribArray(int index){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_815_disableVertexAttribArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 815)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_disable_vertex_attrib_array(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,disableVertexAttribArray,(void))

void NativeGLRenderContext_obj::drawArrays(int mode,int first,int count){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_824_drawArrays)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
            	HX_STACK_ARG(first,"first")
            	HX_STACK_ARG(count,"count")
HXLINE( 824)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_draw_arrays(mode,first,count);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,drawArrays,(void))

void NativeGLRenderContext_obj::drawElements(int mode,int count,int type,int offset){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_833_drawElements)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
            	HX_STACK_ARG(count,"count")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 833)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_draw_elements(mode,count,type,offset);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,drawElements,(void))

void NativeGLRenderContext_obj::enable(int cap){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_842_enable)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cap,"cap")
HXLINE( 842)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_enable(cap);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,enable,(void))

void NativeGLRenderContext_obj::enableVertexAttribArray(int index){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_851_enableVertexAttribArray)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 851)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_enable_vertex_attrib_array(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,enableVertexAttribArray,(void))

void NativeGLRenderContext_obj::finish(){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_860_finish)
            	HX_STACK_THIS(this)
HXLINE( 860)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_finish();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,finish,(void))

void NativeGLRenderContext_obj::flush(){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_869_flush)
            	HX_STACK_THIS(this)
HXLINE( 869)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_flush();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,flush,(void))

void NativeGLRenderContext_obj::framebufferRenderbuffer(int target,int attachment,int renderbuffertarget, ::lime::graphics::opengl::GLRenderbuffer renderbuffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_878_framebufferRenderbuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(attachment,"attachment")
            	HX_STACK_ARG(renderbuffertarget,"renderbuffertarget")
            	HX_STACK_ARG(renderbuffer,"renderbuffer")
HXLINE( 878)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_framebuffer_renderbuffer(target,attachment,renderbuffertarget,hx::DynamicPtr(renderbuffer->id));
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,framebufferRenderbuffer,(void))

void NativeGLRenderContext_obj::framebufferTexture2D(int target,int attachment,int textarget, ::lime::graphics::opengl::GLTexture texture,int level){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_887_framebufferTexture2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(attachment,"attachment")
            	HX_STACK_ARG(textarget,"textarget")
            	HX_STACK_ARG(texture,"texture")
            	HX_STACK_ARG(level,"level")
HXLINE( 887)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_framebuffer_texture2D(target,attachment,textarget,hx::DynamicPtr(texture->id),level);
            	}


HX_DEFINE_DYNAMIC_FUNC5(NativeGLRenderContext_obj,framebufferTexture2D,(void))

void NativeGLRenderContext_obj::frontFace(int mode){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_896_frontFace)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
HXLINE( 896)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_front_face(mode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,frontFace,(void))

void NativeGLRenderContext_obj::generateMipmap(int target){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_905_generateMipmap)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
HXLINE( 905)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_generate_mipmap(target);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,generateMipmap,(void))

 ::Dynamic NativeGLRenderContext_obj::getActiveAttrib( ::lime::graphics::opengl::GLProgram program,int index){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_915_getActiveAttrib)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(index,"index")
HXLINE( 915)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_active_attrib(hx::DynamicPtr(program->id),index)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getActiveAttrib,return )

 ::Dynamic NativeGLRenderContext_obj::getActiveUniform( ::lime::graphics::opengl::GLProgram program,int index){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_927_getActiveUniform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(index,"index")
HXLINE( 927)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_active_uniform(hx::DynamicPtr(program->id),index)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getActiveUniform,return )

::Array< ::Dynamic> NativeGLRenderContext_obj::getAttachedShaders( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_938_getAttachedShaders)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE( 938)		return program->getShaders();
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,getAttachedShaders,return )

int NativeGLRenderContext_obj::getAttribLocation( ::lime::graphics::opengl::GLProgram program,::String name){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_949_getAttribLocation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(name,"name")
HXLINE( 949)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_attrib_location(hx::DynamicPtr(program->id),name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getAttribLocation,return )

int NativeGLRenderContext_obj::getBufferParameter(int target,int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_960_getBufferParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
HXLINE( 960)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_buffer_parameter(target,pname);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getBufferParameter,return )

 ::Dynamic NativeGLRenderContext_obj::getContextAttributes(){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_968_getContextAttributes)
            	HX_STACK_THIS(this)
HXLINE( 971)		HX_VARI(  ::Dynamic,base) = ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_context_attributes()) );
HXLINE( 972)		base->__SetField(HX_("premultipliedAlpha",28,8e,5c,1a),false,hx::paccDynamic);
HXLINE( 973)		base->__SetField(HX_("preserveDrawingBuffer",92,bb,1e,4b),false,hx::paccDynamic);
HXLINE( 974)		return base;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,getContextAttributes,return )

int NativeGLRenderContext_obj::getError(){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_985_getError)
            	HX_STACK_THIS(this)
HXLINE( 985)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_error();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,getError,return )

 ::Dynamic NativeGLRenderContext_obj::getExtension(::String name){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_999_getExtension)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE( 999)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_extension(name)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,getExtension,return )

int NativeGLRenderContext_obj::getFramebufferAttachmentParameter(int target,int attachment,int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1010_getFramebufferAttachmentParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(attachment,"attachment")
            	HX_STACK_ARG(pname,"pname")
HXLINE(1010)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_framebuffer_attachment_parameter(target,attachment,pname);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,getFramebufferAttachmentParameter,return )

 ::Dynamic NativeGLRenderContext_obj::getParameter(int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1021_getParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pname,"pname")
HXLINE(1021)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_parameter(pname)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,getParameter,return )

::String NativeGLRenderContext_obj::getProgramInfoLog( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1032_getProgramInfoLog)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE(1032)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_program_info_log(hx::DynamicPtr(program->id))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,getProgramInfoLog,return )

int NativeGLRenderContext_obj::getProgramParameter( ::lime::graphics::opengl::GLProgram program,int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1043_getProgramParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(pname,"pname")
HXLINE(1043)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_program_parameter(hx::DynamicPtr(program->id),pname);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getProgramParameter,return )

int NativeGLRenderContext_obj::getRenderbufferParameter(int target,int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1054_getRenderbufferParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
HXLINE(1054)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_render_buffer_parameter(target,pname);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getRenderbufferParameter,return )

::String NativeGLRenderContext_obj::getShaderInfoLog( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1065_getShaderInfoLog)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE(1065)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_shader_info_log(hx::DynamicPtr(shader->id))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,getShaderInfoLog,return )

int NativeGLRenderContext_obj::getShaderParameter( ::lime::graphics::opengl::GLShader shader,int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1076_getShaderParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
            	HX_STACK_ARG(pname,"pname")
HXLINE(1076)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_shader_parameter(hx::DynamicPtr(shader->id),pname);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getShaderParameter,return )

 ::Dynamic NativeGLRenderContext_obj::getShaderPrecisionFormat(int shadertype,int precisiontype){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1088_getShaderPrecisionFormat)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shadertype,"shadertype")
            	HX_STACK_ARG(precisiontype,"precisiontype")
HXLINE(1088)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_shader_precision_format(shadertype,precisiontype)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getShaderPrecisionFormat,return )

::String NativeGLRenderContext_obj::getShaderSource( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1099_getShaderSource)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE(1099)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_shader_source(hx::DynamicPtr(shader->id))) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,getShaderSource,return )

::Array< ::String > NativeGLRenderContext_obj::getSupportedExtensions(){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1107_getSupportedExtensions)
            	HX_STACK_THIS(this)
HXLINE(1110)		HX_VARI( ::Array< ::String >,result) = ::Array_obj< ::String >::__new();
HXLINE(1111)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_supported_extensions(hx::DynamicPtr(result));
HXLINE(1112)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,getSupportedExtensions,return )

int NativeGLRenderContext_obj::getTexParameter(int target,int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1123_getTexParameter)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
HXLINE(1123)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_tex_parameter(target,pname);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getTexParameter,return )

 ::Dynamic NativeGLRenderContext_obj::getUniform( ::lime::graphics::opengl::GLProgram program,int location){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1134_getUniform)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(location,"location")
HXLINE(1134)		return ( ( ::Dynamic)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_uniform(hx::DynamicPtr(program->id),location)) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getUniform,return )

int NativeGLRenderContext_obj::getUniformLocation( ::lime::graphics::opengl::GLProgram program,::String name){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1145_getUniformLocation)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
            	HX_STACK_ARG(name,"name")
HXLINE(1145)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_uniform_location(hx::DynamicPtr(program->id),name);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getUniformLocation,return )

int NativeGLRenderContext_obj::getVertexAttrib(int index,int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1156_getVertexAttrib)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(pname,"pname")
HXLINE(1156)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_vertex_attrib(index,pname);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getVertexAttrib,return )

int NativeGLRenderContext_obj::getVertexAttribOffset(int index,int pname){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1167_getVertexAttribOffset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(pname,"pname")
HXLINE(1167)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_get_vertex_attrib_offset(index,pname);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,getVertexAttribOffset,return )

void NativeGLRenderContext_obj::hint(int target,int mode){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1178_hint)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(mode,"mode")
HXLINE(1178)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_hint(target,mode);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,hint,(void))

bool NativeGLRenderContext_obj::isBuffer( ::lime::graphics::opengl::GLBuffer buffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1187_isBuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE(1187)		bool _hx_tmp;
HXDLIN(1187)		if (hx::IsNotNull( buffer )) {
HXLINE(1187)			_hx_tmp = (::lime::_hx_system::_CFFIPointer::CFFIPointer_Impl__obj::get(buffer->id) > (int)0);
            		}
            		else {
HXLINE(1187)			_hx_tmp = false;
            		}
HXDLIN(1187)		if (_hx_tmp) {
HXLINE(1187)			return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_is_buffer(hx::DynamicPtr(buffer->id));
            		}
            		else {
HXLINE(1187)			return false;
            		}
HXDLIN(1187)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,isBuffer,return )

bool NativeGLRenderContext_obj::isContextLost(){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1197_isContextLost)
            	HX_STACK_THIS(this)
HXLINE(1197)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,isContextLost,return )

bool NativeGLRenderContext_obj::isEnabled(int cap){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1205_isEnabled)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cap,"cap")
HXLINE(1205)		return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_is_enabled(cap);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,isEnabled,return )

bool NativeGLRenderContext_obj::isFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1216_isFramebuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(framebuffer,"framebuffer")
HXLINE(1216)		bool _hx_tmp;
HXDLIN(1216)		if (hx::IsNotNull( framebuffer )) {
HXLINE(1216)			_hx_tmp = (::lime::_hx_system::_CFFIPointer::CFFIPointer_Impl__obj::get(framebuffer->id) > (int)0);
            		}
            		else {
HXLINE(1216)			_hx_tmp = false;
            		}
HXDLIN(1216)		if (_hx_tmp) {
HXLINE(1216)			return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_is_framebuffer(hx::DynamicPtr(framebuffer->id));
            		}
            		else {
HXLINE(1216)			return false;
            		}
HXDLIN(1216)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,isFramebuffer,return )

bool NativeGLRenderContext_obj::isProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1227_isProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE(1227)		bool _hx_tmp;
HXDLIN(1227)		if (hx::IsNotNull( program )) {
HXLINE(1227)			_hx_tmp = (::lime::_hx_system::_CFFIPointer::CFFIPointer_Impl__obj::get(program->id) > (int)0);
            		}
            		else {
HXLINE(1227)			_hx_tmp = false;
            		}
HXDLIN(1227)		if (_hx_tmp) {
HXLINE(1227)			return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_is_program(hx::DynamicPtr(program->id));
            		}
            		else {
HXLINE(1227)			return false;
            		}
HXDLIN(1227)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,isProgram,return )

bool NativeGLRenderContext_obj::isRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1238_isRenderbuffer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderbuffer,"renderbuffer")
HXLINE(1238)		bool _hx_tmp;
HXDLIN(1238)		if (hx::IsNotNull( renderbuffer )) {
HXLINE(1238)			_hx_tmp = (::lime::_hx_system::_CFFIPointer::CFFIPointer_Impl__obj::get(renderbuffer->id) > (int)0);
            		}
            		else {
HXLINE(1238)			_hx_tmp = false;
            		}
HXDLIN(1238)		if (_hx_tmp) {
HXLINE(1238)			return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_is_renderbuffer(hx::DynamicPtr(renderbuffer->id));
            		}
            		else {
HXLINE(1238)			return false;
            		}
HXDLIN(1238)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,isRenderbuffer,return )

bool NativeGLRenderContext_obj::isShader( ::lime::graphics::opengl::GLShader shader){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1249_isShader)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE(1249)		bool _hx_tmp;
HXDLIN(1249)		if (hx::IsNotNull( shader )) {
HXLINE(1249)			_hx_tmp = (::lime::_hx_system::_CFFIPointer::CFFIPointer_Impl__obj::get(shader->id) > (int)0);
            		}
            		else {
HXLINE(1249)			_hx_tmp = false;
            		}
HXDLIN(1249)		if (_hx_tmp) {
HXLINE(1249)			return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_is_shader(hx::DynamicPtr(shader->id));
            		}
            		else {
HXLINE(1249)			return false;
            		}
HXDLIN(1249)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,isShader,return )

bool NativeGLRenderContext_obj::isTexture( ::lime::graphics::opengl::GLTexture texture){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1260_isTexture)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
HXLINE(1260)		bool _hx_tmp;
HXDLIN(1260)		if (hx::IsNotNull( texture )) {
HXLINE(1260)			_hx_tmp = (::lime::_hx_system::_CFFIPointer::CFFIPointer_Impl__obj::get(texture->id) > (int)0);
            		}
            		else {
HXLINE(1260)			_hx_tmp = false;
            		}
HXDLIN(1260)		if (_hx_tmp) {
HXLINE(1260)			return ::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_is_texture(hx::DynamicPtr(texture->id));
            		}
            		else {
HXLINE(1260)			return false;
            		}
HXDLIN(1260)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,isTexture,return )

void NativeGLRenderContext_obj::lineWidth(Float width){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1271_lineWidth)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
HXLINE(1271)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_line_width(width);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,lineWidth,(void))

void NativeGLRenderContext_obj::linkProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1280_linkProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE(1280)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_link_program(hx::DynamicPtr(program->id));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,linkProgram,(void))

void NativeGLRenderContext_obj::pixelStorei(int pname,int param){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1289_pixelStorei)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pname,"pname")
            	HX_STACK_ARG(param,"param")
HXLINE(1289)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_pixel_storei(pname,param);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,pixelStorei,(void))

void NativeGLRenderContext_obj::polygonOffset(Float factor,Float units){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1298_polygonOffset)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(factor,"factor")
            	HX_STACK_ARG(units,"units")
HXLINE(1298)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_polygon_offset(factor,units);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,polygonOffset,(void))

void NativeGLRenderContext_obj::readPixels(int x,int y,int width,int height,int format,int type, ::lime::utils::ArrayBufferView pixels){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1304_readPixels)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(pixels,"pixels")
HXLINE(1307)		HX_VAR(  ::haxe::io::Bytes,buffer);
HXDLIN(1307)		if (hx::IsNull( pixels )) {
HXLINE(1307)			buffer = null();
            		}
            		else {
HXLINE(1307)			buffer = pixels->buffer;
            		}
HXLINE(1308)		{
HXLINE(1308)			int byteOffset;
HXDLIN(1308)			if (hx::IsNull( pixels )) {
HXLINE(1308)				byteOffset = (int)0;
            			}
            			else {
HXLINE(1308)				byteOffset = pixels->byteOffset;
            			}
HXDLIN(1308)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_read_pixels(x,y,width,height,format,type,hx::DynamicPtr(buffer),byteOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC7(NativeGLRenderContext_obj,readPixels,(void))

void NativeGLRenderContext_obj::renderbufferStorage(int target,int internalformat,int width,int height){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1319_renderbufferStorage)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(internalformat,"internalformat")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1319)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_renderbuffer_storage(target,internalformat,width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,renderbufferStorage,(void))

void NativeGLRenderContext_obj::sampleCoverage(Float value,bool invert){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1328_sampleCoverage)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
            	HX_STACK_ARG(invert,"invert")
HXLINE(1328)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_sample_coverage(value,invert);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,sampleCoverage,(void))

void NativeGLRenderContext_obj::scissor(int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1337_scissor)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1337)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_scissor(x,y,width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,scissor,(void))

void NativeGLRenderContext_obj::shaderSource( ::lime::graphics::opengl::GLShader shader,::String source){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1346_shaderSource)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
            	HX_STACK_ARG(source,"source")
HXLINE(1346)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_shader_source(hx::DynamicPtr(shader->id),source);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,shaderSource,(void))

void NativeGLRenderContext_obj::stencilFunc(int func,int ref,int mask){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1355_stencilFunc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(ref,"ref")
            	HX_STACK_ARG(mask,"mask")
HXLINE(1355)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_stencil_func(func,ref,mask);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,stencilFunc,(void))

void NativeGLRenderContext_obj::stencilFuncSeparate(int face,int func,int ref,int mask){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1364_stencilFuncSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(face,"face")
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(ref,"ref")
            	HX_STACK_ARG(mask,"mask")
HXLINE(1364)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_stencil_func_separate(face,func,ref,mask);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,stencilFuncSeparate,(void))

void NativeGLRenderContext_obj::stencilMask(int mask){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1373_stencilMask)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
HXLINE(1373)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_stencil_mask(mask);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,stencilMask,(void))

void NativeGLRenderContext_obj::stencilMaskSeparate(int face,int mask){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1382_stencilMaskSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(face,"face")
            	HX_STACK_ARG(mask,"mask")
HXLINE(1382)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_stencil_mask_separate(face,mask);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,stencilMaskSeparate,(void))

void NativeGLRenderContext_obj::stencilOp(int fail,int zfail,int zpass){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1391_stencilOp)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fail,"fail")
            	HX_STACK_ARG(zfail,"zfail")
            	HX_STACK_ARG(zpass,"zpass")
HXLINE(1391)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_stencil_op(fail,zfail,zpass);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,stencilOp,(void))

void NativeGLRenderContext_obj::stencilOpSeparate(int face,int fail,int zfail,int zpass){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1400_stencilOpSeparate)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(face,"face")
            	HX_STACK_ARG(fail,"fail")
            	HX_STACK_ARG(zfail,"zfail")
            	HX_STACK_ARG(zpass,"zpass")
HXLINE(1400)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_stencil_op_separate(face,fail,zfail,zpass);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,stencilOpSeparate,(void))

void NativeGLRenderContext_obj::texImage2D(int target,int level,int internalformat,int width,int height,int border,int format,int type, ::lime::utils::ArrayBufferView pixels){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1406_texImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(internalformat,"internalformat")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(border,"border")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(pixels,"pixels")
HXLINE(1409)		HX_VAR(  ::haxe::io::Bytes,buffer);
HXDLIN(1409)		if (hx::IsNull( pixels )) {
HXLINE(1409)			buffer = null();
            		}
            		else {
HXLINE(1409)			buffer = pixels->buffer;
            		}
HXLINE(1410)		{
HXLINE(1410)			int byteOffset;
HXDLIN(1410)			if (hx::IsNull( pixels )) {
HXLINE(1410)				byteOffset = (int)0;
            			}
            			else {
HXLINE(1410)				byteOffset = pixels->byteOffset;
            			}
HXDLIN(1410)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_tex_image_2d(target,level,internalformat,width,height,border,format,type,hx::DynamicPtr(buffer),byteOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC9(NativeGLRenderContext_obj,texImage2D,(void))

void NativeGLRenderContext_obj::texParameterf(int target,int pname,Float param){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1421_texParameterf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
            	HX_STACK_ARG(param,"param")
HXLINE(1421)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_tex_parameterf(target,pname,param);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,texParameterf,(void))

void NativeGLRenderContext_obj::texParameteri(int target,int pname,int param){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1430_texParameteri)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(pname,"pname")
            	HX_STACK_ARG(param,"param")
HXLINE(1430)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_tex_parameteri(target,pname,param);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,texParameteri,(void))

void NativeGLRenderContext_obj::texSubImage2D(int target,int level,int xoffset,int yoffset,int width,int height,int format,int type, ::lime::utils::ArrayBufferView pixels){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1436_texSubImage2D)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(target,"target")
            	HX_STACK_ARG(level,"level")
            	HX_STACK_ARG(xoffset,"xoffset")
            	HX_STACK_ARG(yoffset,"yoffset")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(pixels,"pixels")
HXLINE(1439)		HX_VAR(  ::haxe::io::Bytes,buffer);
HXDLIN(1439)		if (hx::IsNull( pixels )) {
HXLINE(1439)			buffer = null();
            		}
            		else {
HXLINE(1439)			buffer = pixels->buffer;
            		}
HXLINE(1440)		{
HXLINE(1440)			int byteOffset;
HXDLIN(1440)			if (hx::IsNull( pixels )) {
HXLINE(1440)				byteOffset = (int)0;
            			}
            			else {
HXLINE(1440)				byteOffset = pixels->byteOffset;
            			}
HXDLIN(1440)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_tex_sub_image_2d(target,level,xoffset,yoffset,width,height,format,type,hx::DynamicPtr(buffer),byteOffset);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC9(NativeGLRenderContext_obj,texSubImage2D,(void))

void NativeGLRenderContext_obj::uniform1f(int location,Float x){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1451_uniform1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
HXLINE(1451)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform1f(location,x);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform1f,(void))

void NativeGLRenderContext_obj::uniform1fv(int location, ::lime::utils::ArrayBufferView x){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1460_uniform1fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
HXLINE(1460)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform1fv(location,hx::DynamicPtr(x->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform1fv,(void))

void NativeGLRenderContext_obj::uniform1i(int location,int x){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1471_uniform1i)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
HXLINE(1471)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform1i(location,x);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform1i,(void))

void NativeGLRenderContext_obj::uniform1iv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1480_uniform1iv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
HXLINE(1480)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform1iv(location,hx::DynamicPtr(v->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform1iv,(void))

void NativeGLRenderContext_obj::uniform2f(int location,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1491_uniform2f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1491)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform2f(location,x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,uniform2f,(void))

void NativeGLRenderContext_obj::uniform2fv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1500_uniform2fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
HXLINE(1500)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform2fv(location,hx::DynamicPtr(v->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform2fv,(void))

void NativeGLRenderContext_obj::uniform2i(int location,int x,int y){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1511_uniform2i)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1511)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform2i(location,x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,uniform2i,(void))

void NativeGLRenderContext_obj::uniform2iv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1520_uniform2iv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
HXLINE(1520)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform2iv(location,hx::DynamicPtr(v->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform2iv,(void))

void NativeGLRenderContext_obj::uniform3f(int location,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1531_uniform3f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(1531)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform3f(location,x,y,z);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,uniform3f,(void))

void NativeGLRenderContext_obj::uniform3fv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1540_uniform3fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
HXLINE(1540)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform3fv(location,hx::DynamicPtr(v->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform3fv,(void))

void NativeGLRenderContext_obj::uniform3i(int location,int x,int y,int z){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1551_uniform3i)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(1551)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform3i(location,x,y,z);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,uniform3i,(void))

void NativeGLRenderContext_obj::uniform3iv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1560_uniform3iv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
HXLINE(1560)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform3iv(location,hx::DynamicPtr(v->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform3iv,(void))

void NativeGLRenderContext_obj::uniform4f(int location,Float x,Float y,Float z,Float w){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1571_uniform4f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
HXLINE(1571)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform4f(location,x,y,z,w);
            	}


HX_DEFINE_DYNAMIC_FUNC5(NativeGLRenderContext_obj,uniform4f,(void))

void NativeGLRenderContext_obj::uniform4fv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1580_uniform4fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
HXLINE(1580)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform4fv(location,hx::DynamicPtr(v->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform4fv,(void))

void NativeGLRenderContext_obj::uniform4i(int location,int x,int y,int z,int w){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1591_uniform4i)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
HXLINE(1591)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform4i(location,x,y,z,w);
            	}


HX_DEFINE_DYNAMIC_FUNC5(NativeGLRenderContext_obj,uniform4i,(void))

void NativeGLRenderContext_obj::uniform4iv(int location, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1600_uniform4iv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(v,"v")
HXLINE(1600)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform4iv(location,hx::DynamicPtr(v->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,uniform4iv,(void))

void NativeGLRenderContext_obj::uniformMatrix2fv(int location,bool transpose, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1611_uniformMatrix2fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(transpose,"transpose")
            	HX_STACK_ARG(v,"v")
HXLINE(1611)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform_matrix(location,transpose,hx::DynamicPtr(v->buffer),(int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,uniformMatrix2fv,(void))

void NativeGLRenderContext_obj::uniformMatrix3fv(int location,bool transpose, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1622_uniformMatrix3fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(transpose,"transpose")
            	HX_STACK_ARG(v,"v")
HXLINE(1622)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform_matrix(location,transpose,hx::DynamicPtr(v->buffer),(int)3);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,uniformMatrix3fv,(void))

void NativeGLRenderContext_obj::uniformMatrix4fv(int location,bool transpose, ::lime::utils::ArrayBufferView v){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1633_uniformMatrix4fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(location,"location")
            	HX_STACK_ARG(transpose,"transpose")
            	HX_STACK_ARG(v,"v")
HXLINE(1633)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_uniform_matrix(location,transpose,hx::DynamicPtr(v->buffer),(int)4);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,uniformMatrix4fv,(void))

void NativeGLRenderContext_obj::useProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1648_useProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE(1650)		this->_hx___currentProgram = program;
HXLINE(1653)		{
HXLINE(1653)			 ::Dynamic program1;
HXDLIN(1653)			if (hx::IsNull( program )) {
HXLINE(1653)				program1 = null();
            			}
            			else {
HXLINE(1653)				program1 = program->id;
            			}
HXDLIN(1653)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_use_program(hx::DynamicPtr(program1));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,useProgram,(void))

void NativeGLRenderContext_obj::validateProgram( ::lime::graphics::opengl::GLProgram program){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1662_validateProgram)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program,"program")
HXLINE(1662)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_validate_program(hx::DynamicPtr(program->id));
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeGLRenderContext_obj,validateProgram,(void))

void NativeGLRenderContext_obj::vertexAttrib1f(int indx,Float x){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1671_vertexAttrib1f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(x,"x")
HXLINE(1671)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib1f(indx,x);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,vertexAttrib1f,(void))

void NativeGLRenderContext_obj::vertexAttrib1fv(int indx, ::lime::utils::ArrayBufferView values){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1680_vertexAttrib1fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(values,"values")
HXLINE(1680)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib1fv(indx,hx::DynamicPtr(values->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,vertexAttrib1fv,(void))

void NativeGLRenderContext_obj::vertexAttrib2f(int indx,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1691_vertexAttrib2f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1691)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib2f(indx,x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeGLRenderContext_obj,vertexAttrib2f,(void))

void NativeGLRenderContext_obj::vertexAttrib2fv(int indx, ::lime::utils::ArrayBufferView values){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1700_vertexAttrib2fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(values,"values")
HXLINE(1700)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib2fv(indx,hx::DynamicPtr(values->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,vertexAttrib2fv,(void))

void NativeGLRenderContext_obj::vertexAttrib3f(int indx,Float x,Float y,Float z){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1711_vertexAttrib3f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(1711)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib3f(indx,x,y,z);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,vertexAttrib3f,(void))

void NativeGLRenderContext_obj::vertexAttrib3fv(int indx, ::lime::utils::ArrayBufferView values){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1720_vertexAttrib3fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(values,"values")
HXLINE(1720)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib3fv(indx,hx::DynamicPtr(values->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,vertexAttrib3fv,(void))

void NativeGLRenderContext_obj::vertexAttrib4f(int indx,Float x,Float y,Float z,Float w){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1731_vertexAttrib4f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(w,"w")
HXLINE(1731)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib4f(indx,x,y,z,w);
            	}


HX_DEFINE_DYNAMIC_FUNC5(NativeGLRenderContext_obj,vertexAttrib4f,(void))

void NativeGLRenderContext_obj::vertexAttrib4fv(int indx, ::lime::utils::ArrayBufferView values){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1740_vertexAttrib4fv)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(values,"values")
HXLINE(1740)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib4fv(indx,hx::DynamicPtr(values->buffer));
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeGLRenderContext_obj,vertexAttrib4fv,(void))

void NativeGLRenderContext_obj::vertexAttribPointer(int indx,int size,int type,bool normalized,int stride,int offset){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1751_vertexAttribPointer)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(indx,"indx")
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(normalized,"normalized")
            	HX_STACK_ARG(stride,"stride")
            	HX_STACK_ARG(offset,"offset")
HXLINE(1751)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_vertex_attrib_pointer(indx,size,type,normalized,stride,offset);
            	}


HX_DEFINE_DYNAMIC_FUNC6(NativeGLRenderContext_obj,vertexAttribPointer,(void))

void NativeGLRenderContext_obj::viewport(int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1760_viewport)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1760)		::lime::_backend::native::NativeCFFI_obj::cffi_lime_gl_viewport(x,y,width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeGLRenderContext_obj,viewport,(void))

int NativeGLRenderContext_obj::get_version(){
            	HX_STACKFRAME(&_hx_pos_91221e281a1e85bc_1766_get_version)
            	HX_STACK_THIS(this)
HXLINE(1766)		return (int)2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeGLRenderContext_obj,get_version,return )


hx::ObjectPtr< NativeGLRenderContext_obj > NativeGLRenderContext_obj::__new() {
	hx::ObjectPtr< NativeGLRenderContext_obj > __this = new NativeGLRenderContext_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< NativeGLRenderContext_obj > NativeGLRenderContext_obj::__alloc(hx::Ctx *_hx_ctx) {
	NativeGLRenderContext_obj *__this = (NativeGLRenderContext_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(NativeGLRenderContext_obj), true, "lime._backend.native.NativeGLRenderContext"));
	*(void **)__this = NativeGLRenderContext_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

NativeGLRenderContext_obj::NativeGLRenderContext_obj()
{
}

void NativeGLRenderContext_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeGLRenderContext);
	HX_MARK_MEMBER_NAME(DEPTH_BUFFER_BIT,"DEPTH_BUFFER_BIT");
	HX_MARK_MEMBER_NAME(STENCIL_BUFFER_BIT,"STENCIL_BUFFER_BIT");
	HX_MARK_MEMBER_NAME(COLOR_BUFFER_BIT,"COLOR_BUFFER_BIT");
	HX_MARK_MEMBER_NAME(POINTS,"POINTS");
	HX_MARK_MEMBER_NAME(LINES,"LINES");
	HX_MARK_MEMBER_NAME(LINE_LOOP,"LINE_LOOP");
	HX_MARK_MEMBER_NAME(LINE_STRIP,"LINE_STRIP");
	HX_MARK_MEMBER_NAME(TRIANGLES,"TRIANGLES");
	HX_MARK_MEMBER_NAME(TRIANGLE_STRIP,"TRIANGLE_STRIP");
	HX_MARK_MEMBER_NAME(TRIANGLE_FAN,"TRIANGLE_FAN");
	HX_MARK_MEMBER_NAME(ZERO,"ZERO");
	HX_MARK_MEMBER_NAME(ONE,"ONE");
	HX_MARK_MEMBER_NAME(SRC_COLOR,"SRC_COLOR");
	HX_MARK_MEMBER_NAME(ONE_MINUS_SRC_COLOR,"ONE_MINUS_SRC_COLOR");
	HX_MARK_MEMBER_NAME(SRC_ALPHA,"SRC_ALPHA");
	HX_MARK_MEMBER_NAME(ONE_MINUS_SRC_ALPHA,"ONE_MINUS_SRC_ALPHA");
	HX_MARK_MEMBER_NAME(DST_ALPHA,"DST_ALPHA");
	HX_MARK_MEMBER_NAME(ONE_MINUS_DST_ALPHA,"ONE_MINUS_DST_ALPHA");
	HX_MARK_MEMBER_NAME(DST_COLOR,"DST_COLOR");
	HX_MARK_MEMBER_NAME(ONE_MINUS_DST_COLOR,"ONE_MINUS_DST_COLOR");
	HX_MARK_MEMBER_NAME(SRC_ALPHA_SATURATE,"SRC_ALPHA_SATURATE");
	HX_MARK_MEMBER_NAME(FUNC_ADD,"FUNC_ADD");
	HX_MARK_MEMBER_NAME(BLEND_EQUATION,"BLEND_EQUATION");
	HX_MARK_MEMBER_NAME(BLEND_EQUATION_RGB,"BLEND_EQUATION_RGB");
	HX_MARK_MEMBER_NAME(BLEND_EQUATION_ALPHA,"BLEND_EQUATION_ALPHA");
	HX_MARK_MEMBER_NAME(FUNC_SUBTRACT,"FUNC_SUBTRACT");
	HX_MARK_MEMBER_NAME(FUNC_REVERSE_SUBTRACT,"FUNC_REVERSE_SUBTRACT");
	HX_MARK_MEMBER_NAME(BLEND_DST_RGB,"BLEND_DST_RGB");
	HX_MARK_MEMBER_NAME(BLEND_SRC_RGB,"BLEND_SRC_RGB");
	HX_MARK_MEMBER_NAME(BLEND_DST_ALPHA,"BLEND_DST_ALPHA");
	HX_MARK_MEMBER_NAME(BLEND_SRC_ALPHA,"BLEND_SRC_ALPHA");
	HX_MARK_MEMBER_NAME(CONSTANT_COLOR,"CONSTANT_COLOR");
	HX_MARK_MEMBER_NAME(ONE_MINUS_CONSTANT_COLOR,"ONE_MINUS_CONSTANT_COLOR");
	HX_MARK_MEMBER_NAME(CONSTANT_ALPHA,"CONSTANT_ALPHA");
	HX_MARK_MEMBER_NAME(ONE_MINUS_CONSTANT_ALPHA,"ONE_MINUS_CONSTANT_ALPHA");
	HX_MARK_MEMBER_NAME(BLEND_COLOR,"BLEND_COLOR");
	HX_MARK_MEMBER_NAME(ARRAY_BUFFER,"ARRAY_BUFFER");
	HX_MARK_MEMBER_NAME(ELEMENT_ARRAY_BUFFER,"ELEMENT_ARRAY_BUFFER");
	HX_MARK_MEMBER_NAME(ARRAY_BUFFER_BINDING,"ARRAY_BUFFER_BINDING");
	HX_MARK_MEMBER_NAME(ELEMENT_ARRAY_BUFFER_BINDING,"ELEMENT_ARRAY_BUFFER_BINDING");
	HX_MARK_MEMBER_NAME(STREAM_DRAW,"STREAM_DRAW");
	HX_MARK_MEMBER_NAME(STATIC_DRAW,"STATIC_DRAW");
	HX_MARK_MEMBER_NAME(DYNAMIC_DRAW,"DYNAMIC_DRAW");
	HX_MARK_MEMBER_NAME(BUFFER_SIZE,"BUFFER_SIZE");
	HX_MARK_MEMBER_NAME(BUFFER_USAGE,"BUFFER_USAGE");
	HX_MARK_MEMBER_NAME(CURRENT_VERTEX_ATTRIB,"CURRENT_VERTEX_ATTRIB");
	HX_MARK_MEMBER_NAME(FRONT,"FRONT");
	HX_MARK_MEMBER_NAME(BACK,"BACK");
	HX_MARK_MEMBER_NAME(FRONT_AND_BACK,"FRONT_AND_BACK");
	HX_MARK_MEMBER_NAME(CULL_FACE,"CULL_FACE");
	HX_MARK_MEMBER_NAME(BLEND,"BLEND");
	HX_MARK_MEMBER_NAME(DITHER,"DITHER");
	HX_MARK_MEMBER_NAME(STENCIL_TEST,"STENCIL_TEST");
	HX_MARK_MEMBER_NAME(DEPTH_TEST,"DEPTH_TEST");
	HX_MARK_MEMBER_NAME(SCISSOR_TEST,"SCISSOR_TEST");
	HX_MARK_MEMBER_NAME(POLYGON_OFFSET_FILL,"POLYGON_OFFSET_FILL");
	HX_MARK_MEMBER_NAME(SAMPLE_ALPHA_TO_COVERAGE,"SAMPLE_ALPHA_TO_COVERAGE");
	HX_MARK_MEMBER_NAME(SAMPLE_COVERAGE,"SAMPLE_COVERAGE");
	HX_MARK_MEMBER_NAME(NO_ERROR,"NO_ERROR");
	HX_MARK_MEMBER_NAME(INVALID_ENUM,"INVALID_ENUM");
	HX_MARK_MEMBER_NAME(INVALID_VALUE,"INVALID_VALUE");
	HX_MARK_MEMBER_NAME(INVALID_OPERATION,"INVALID_OPERATION");
	HX_MARK_MEMBER_NAME(OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_MARK_MEMBER_NAME(CW,"CW");
	HX_MARK_MEMBER_NAME(CCW,"CCW");
	HX_MARK_MEMBER_NAME(LINE_WIDTH,"LINE_WIDTH");
	HX_MARK_MEMBER_NAME(ALIASED_POINT_SIZE_RANGE,"ALIASED_POINT_SIZE_RANGE");
	HX_MARK_MEMBER_NAME(ALIASED_LINE_WIDTH_RANGE,"ALIASED_LINE_WIDTH_RANGE");
	HX_MARK_MEMBER_NAME(CULL_FACE_MODE,"CULL_FACE_MODE");
	HX_MARK_MEMBER_NAME(FRONT_FACE,"FRONT_FACE");
	HX_MARK_MEMBER_NAME(DEPTH_RANGE,"DEPTH_RANGE");
	HX_MARK_MEMBER_NAME(DEPTH_WRITEMASK,"DEPTH_WRITEMASK");
	HX_MARK_MEMBER_NAME(DEPTH_CLEAR_VALUE,"DEPTH_CLEAR_VALUE");
	HX_MARK_MEMBER_NAME(DEPTH_FUNC,"DEPTH_FUNC");
	HX_MARK_MEMBER_NAME(STENCIL_CLEAR_VALUE,"STENCIL_CLEAR_VALUE");
	HX_MARK_MEMBER_NAME(STENCIL_FUNC,"STENCIL_FUNC");
	HX_MARK_MEMBER_NAME(STENCIL_FAIL,"STENCIL_FAIL");
	HX_MARK_MEMBER_NAME(STENCIL_PASS_DEPTH_FAIL,"STENCIL_PASS_DEPTH_FAIL");
	HX_MARK_MEMBER_NAME(STENCIL_PASS_DEPTH_PASS,"STENCIL_PASS_DEPTH_PASS");
	HX_MARK_MEMBER_NAME(STENCIL_REF,"STENCIL_REF");
	HX_MARK_MEMBER_NAME(STENCIL_VALUE_MASK,"STENCIL_VALUE_MASK");
	HX_MARK_MEMBER_NAME(STENCIL_WRITEMASK,"STENCIL_WRITEMASK");
	HX_MARK_MEMBER_NAME(STENCIL_BACK_FUNC,"STENCIL_BACK_FUNC");
	HX_MARK_MEMBER_NAME(STENCIL_BACK_FAIL,"STENCIL_BACK_FAIL");
	HX_MARK_MEMBER_NAME(STENCIL_BACK_PASS_DEPTH_FAIL,"STENCIL_BACK_PASS_DEPTH_FAIL");
	HX_MARK_MEMBER_NAME(STENCIL_BACK_PASS_DEPTH_PASS,"STENCIL_BACK_PASS_DEPTH_PASS");
	HX_MARK_MEMBER_NAME(STENCIL_BACK_REF,"STENCIL_BACK_REF");
	HX_MARK_MEMBER_NAME(STENCIL_BACK_VALUE_MASK,"STENCIL_BACK_VALUE_MASK");
	HX_MARK_MEMBER_NAME(STENCIL_BACK_WRITEMASK,"STENCIL_BACK_WRITEMASK");
	HX_MARK_MEMBER_NAME(VIEWPORT,"VIEWPORT");
	HX_MARK_MEMBER_NAME(SCISSOR_BOX,"SCISSOR_BOX");
	HX_MARK_MEMBER_NAME(COLOR_CLEAR_VALUE,"COLOR_CLEAR_VALUE");
	HX_MARK_MEMBER_NAME(COLOR_WRITEMASK,"COLOR_WRITEMASK");
	HX_MARK_MEMBER_NAME(UNPACK_ALIGNMENT,"UNPACK_ALIGNMENT");
	HX_MARK_MEMBER_NAME(PACK_ALIGNMENT,"PACK_ALIGNMENT");
	HX_MARK_MEMBER_NAME(MAX_TEXTURE_SIZE,"MAX_TEXTURE_SIZE");
	HX_MARK_MEMBER_NAME(MAX_VIEWPORT_DIMS,"MAX_VIEWPORT_DIMS");
	HX_MARK_MEMBER_NAME(SUBPIXEL_BITS,"SUBPIXEL_BITS");
	HX_MARK_MEMBER_NAME(RED_BITS,"RED_BITS");
	HX_MARK_MEMBER_NAME(GREEN_BITS,"GREEN_BITS");
	HX_MARK_MEMBER_NAME(BLUE_BITS,"BLUE_BITS");
	HX_MARK_MEMBER_NAME(ALPHA_BITS,"ALPHA_BITS");
	HX_MARK_MEMBER_NAME(DEPTH_BITS,"DEPTH_BITS");
	HX_MARK_MEMBER_NAME(STENCIL_BITS,"STENCIL_BITS");
	HX_MARK_MEMBER_NAME(POLYGON_OFFSET_UNITS,"POLYGON_OFFSET_UNITS");
	HX_MARK_MEMBER_NAME(POLYGON_OFFSET_FACTOR,"POLYGON_OFFSET_FACTOR");
	HX_MARK_MEMBER_NAME(TEXTURE_BINDING_2D,"TEXTURE_BINDING_2D");
	HX_MARK_MEMBER_NAME(SAMPLE_BUFFERS,"SAMPLE_BUFFERS");
	HX_MARK_MEMBER_NAME(SAMPLES,"SAMPLES");
	HX_MARK_MEMBER_NAME(SAMPLE_COVERAGE_VALUE,"SAMPLE_COVERAGE_VALUE");
	HX_MARK_MEMBER_NAME(SAMPLE_COVERAGE_INVERT,"SAMPLE_COVERAGE_INVERT");
	HX_MARK_MEMBER_NAME(COMPRESSED_TEXTURE_FORMATS,"COMPRESSED_TEXTURE_FORMATS");
	HX_MARK_MEMBER_NAME(DONT_CARE,"DONT_CARE");
	HX_MARK_MEMBER_NAME(FASTEST,"FASTEST");
	HX_MARK_MEMBER_NAME(NICEST,"NICEST");
	HX_MARK_MEMBER_NAME(GENERATE_MIPMAP_HINT,"GENERATE_MIPMAP_HINT");
	HX_MARK_MEMBER_NAME(BYTE,"BYTE");
	HX_MARK_MEMBER_NAME(UNSIGNED_BYTE,"UNSIGNED_BYTE");
	HX_MARK_MEMBER_NAME(SHORT,"SHORT");
	HX_MARK_MEMBER_NAME(UNSIGNED_SHORT,"UNSIGNED_SHORT");
	HX_MARK_MEMBER_NAME(INT,"INT");
	HX_MARK_MEMBER_NAME(UNSIGNED_INT,"UNSIGNED_INT");
	HX_MARK_MEMBER_NAME(FLOAT,"FLOAT");
	HX_MARK_MEMBER_NAME(DEPTH_COMPONENT,"DEPTH_COMPONENT");
	HX_MARK_MEMBER_NAME(ALPHA,"ALPHA");
	HX_MARK_MEMBER_NAME(RGB,"RGB");
	HX_MARK_MEMBER_NAME(RGBA,"RGBA");
	HX_MARK_MEMBER_NAME(BGR_EXT,"BGR_EXT");
	HX_MARK_MEMBER_NAME(BGRA_EXT,"BGRA_EXT");
	HX_MARK_MEMBER_NAME(LUMINANCE,"LUMINANCE");
	HX_MARK_MEMBER_NAME(LUMINANCE_ALPHA,"LUMINANCE_ALPHA");
	HX_MARK_MEMBER_NAME(UNSIGNED_SHORT_4_4_4_4,"UNSIGNED_SHORT_4_4_4_4");
	HX_MARK_MEMBER_NAME(UNSIGNED_SHORT_5_5_5_1,"UNSIGNED_SHORT_5_5_5_1");
	HX_MARK_MEMBER_NAME(UNSIGNED_SHORT_5_6_5,"UNSIGNED_SHORT_5_6_5");
	HX_MARK_MEMBER_NAME(FRAGMENT_SHADER,"FRAGMENT_SHADER");
	HX_MARK_MEMBER_NAME(VERTEX_SHADER,"VERTEX_SHADER");
	HX_MARK_MEMBER_NAME(MAX_VERTEX_ATTRIBS,"MAX_VERTEX_ATTRIBS");
	HX_MARK_MEMBER_NAME(MAX_VERTEX_UNIFORM_VECTORS,"MAX_VERTEX_UNIFORM_VECTORS");
	HX_MARK_MEMBER_NAME(MAX_VARYING_VECTORS,"MAX_VARYING_VECTORS");
	HX_MARK_MEMBER_NAME(MAX_COMBINED_TEXTURE_IMAGE_UNITS,"MAX_COMBINED_TEXTURE_IMAGE_UNITS");
	HX_MARK_MEMBER_NAME(MAX_VERTEX_TEXTURE_IMAGE_UNITS,"MAX_VERTEX_TEXTURE_IMAGE_UNITS");
	HX_MARK_MEMBER_NAME(MAX_TEXTURE_IMAGE_UNITS,"MAX_TEXTURE_IMAGE_UNITS");
	HX_MARK_MEMBER_NAME(MAX_FRAGMENT_UNIFORM_VECTORS,"MAX_FRAGMENT_UNIFORM_VECTORS");
	HX_MARK_MEMBER_NAME(SHADER_TYPE,"SHADER_TYPE");
	HX_MARK_MEMBER_NAME(DELETE_STATUS,"DELETE_STATUS");
	HX_MARK_MEMBER_NAME(LINK_STATUS,"LINK_STATUS");
	HX_MARK_MEMBER_NAME(VALIDATE_STATUS,"VALIDATE_STATUS");
	HX_MARK_MEMBER_NAME(ATTACHED_SHADERS,"ATTACHED_SHADERS");
	HX_MARK_MEMBER_NAME(ACTIVE_UNIFORMS,"ACTIVE_UNIFORMS");
	HX_MARK_MEMBER_NAME(ACTIVE_ATTRIBUTES,"ACTIVE_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(SHADING_LANGUAGE_VERSION,"SHADING_LANGUAGE_VERSION");
	HX_MARK_MEMBER_NAME(CURRENT_PROGRAM,"CURRENT_PROGRAM");
	HX_MARK_MEMBER_NAME(NEVER,"NEVER");
	HX_MARK_MEMBER_NAME(LESS,"LESS");
	HX_MARK_MEMBER_NAME(EQUAL,"EQUAL");
	HX_MARK_MEMBER_NAME(LEQUAL,"LEQUAL");
	HX_MARK_MEMBER_NAME(GREATER,"GREATER");
	HX_MARK_MEMBER_NAME(NOTEQUAL,"NOTEQUAL");
	HX_MARK_MEMBER_NAME(GEQUAL,"GEQUAL");
	HX_MARK_MEMBER_NAME(ALWAYS,"ALWAYS");
	HX_MARK_MEMBER_NAME(KEEP,"KEEP");
	HX_MARK_MEMBER_NAME(REPLACE,"REPLACE");
	HX_MARK_MEMBER_NAME(INCR,"INCR");
	HX_MARK_MEMBER_NAME(DECR,"DECR");
	HX_MARK_MEMBER_NAME(INVERT,"INVERT");
	HX_MARK_MEMBER_NAME(INCR_WRAP,"INCR_WRAP");
	HX_MARK_MEMBER_NAME(DECR_WRAP,"DECR_WRAP");
	HX_MARK_MEMBER_NAME(VENDOR,"VENDOR");
	HX_MARK_MEMBER_NAME(RENDERER,"RENDERER");
	HX_MARK_MEMBER_NAME(VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(NEAREST,"NEAREST");
	HX_MARK_MEMBER_NAME(LINEAR,"LINEAR");
	HX_MARK_MEMBER_NAME(NEAREST_MIPMAP_NEAREST,"NEAREST_MIPMAP_NEAREST");
	HX_MARK_MEMBER_NAME(LINEAR_MIPMAP_NEAREST,"LINEAR_MIPMAP_NEAREST");
	HX_MARK_MEMBER_NAME(NEAREST_MIPMAP_LINEAR,"NEAREST_MIPMAP_LINEAR");
	HX_MARK_MEMBER_NAME(LINEAR_MIPMAP_LINEAR,"LINEAR_MIPMAP_LINEAR");
	HX_MARK_MEMBER_NAME(TEXTURE_MAG_FILTER,"TEXTURE_MAG_FILTER");
	HX_MARK_MEMBER_NAME(TEXTURE_MIN_FILTER,"TEXTURE_MIN_FILTER");
	HX_MARK_MEMBER_NAME(TEXTURE_WRAP_S,"TEXTURE_WRAP_S");
	HX_MARK_MEMBER_NAME(TEXTURE_WRAP_T,"TEXTURE_WRAP_T");
	HX_MARK_MEMBER_NAME(TEXTURE_2D,"TEXTURE_2D");
	HX_MARK_MEMBER_NAME(TEXTURE,"TEXTURE");
	HX_MARK_MEMBER_NAME(TEXTURE_CUBE_MAP,"TEXTURE_CUBE_MAP");
	HX_MARK_MEMBER_NAME(TEXTURE_BINDING_CUBE_MAP,"TEXTURE_BINDING_CUBE_MAP");
	HX_MARK_MEMBER_NAME(TEXTURE_CUBE_MAP_POSITIVE_X,"TEXTURE_CUBE_MAP_POSITIVE_X");
	HX_MARK_MEMBER_NAME(TEXTURE_CUBE_MAP_NEGATIVE_X,"TEXTURE_CUBE_MAP_NEGATIVE_X");
	HX_MARK_MEMBER_NAME(TEXTURE_CUBE_MAP_POSITIVE_Y,"TEXTURE_CUBE_MAP_POSITIVE_Y");
	HX_MARK_MEMBER_NAME(TEXTURE_CUBE_MAP_NEGATIVE_Y,"TEXTURE_CUBE_MAP_NEGATIVE_Y");
	HX_MARK_MEMBER_NAME(TEXTURE_CUBE_MAP_POSITIVE_Z,"TEXTURE_CUBE_MAP_POSITIVE_Z");
	HX_MARK_MEMBER_NAME(TEXTURE_CUBE_MAP_NEGATIVE_Z,"TEXTURE_CUBE_MAP_NEGATIVE_Z");
	HX_MARK_MEMBER_NAME(MAX_CUBE_MAP_TEXTURE_SIZE,"MAX_CUBE_MAP_TEXTURE_SIZE");
	HX_MARK_MEMBER_NAME(TEXTURE0,"TEXTURE0");
	HX_MARK_MEMBER_NAME(TEXTURE1,"TEXTURE1");
	HX_MARK_MEMBER_NAME(TEXTURE2,"TEXTURE2");
	HX_MARK_MEMBER_NAME(TEXTURE3,"TEXTURE3");
	HX_MARK_MEMBER_NAME(TEXTURE4,"TEXTURE4");
	HX_MARK_MEMBER_NAME(TEXTURE5,"TEXTURE5");
	HX_MARK_MEMBER_NAME(TEXTURE6,"TEXTURE6");
	HX_MARK_MEMBER_NAME(TEXTURE7,"TEXTURE7");
	HX_MARK_MEMBER_NAME(TEXTURE8,"TEXTURE8");
	HX_MARK_MEMBER_NAME(TEXTURE9,"TEXTURE9");
	HX_MARK_MEMBER_NAME(TEXTURE10,"TEXTURE10");
	HX_MARK_MEMBER_NAME(TEXTURE11,"TEXTURE11");
	HX_MARK_MEMBER_NAME(TEXTURE12,"TEXTURE12");
	HX_MARK_MEMBER_NAME(TEXTURE13,"TEXTURE13");
	HX_MARK_MEMBER_NAME(TEXTURE14,"TEXTURE14");
	HX_MARK_MEMBER_NAME(TEXTURE15,"TEXTURE15");
	HX_MARK_MEMBER_NAME(TEXTURE16,"TEXTURE16");
	HX_MARK_MEMBER_NAME(TEXTURE17,"TEXTURE17");
	HX_MARK_MEMBER_NAME(TEXTURE18,"TEXTURE18");
	HX_MARK_MEMBER_NAME(TEXTURE19,"TEXTURE19");
	HX_MARK_MEMBER_NAME(TEXTURE20,"TEXTURE20");
	HX_MARK_MEMBER_NAME(TEXTURE21,"TEXTURE21");
	HX_MARK_MEMBER_NAME(TEXTURE22,"TEXTURE22");
	HX_MARK_MEMBER_NAME(TEXTURE23,"TEXTURE23");
	HX_MARK_MEMBER_NAME(TEXTURE24,"TEXTURE24");
	HX_MARK_MEMBER_NAME(TEXTURE25,"TEXTURE25");
	HX_MARK_MEMBER_NAME(TEXTURE26,"TEXTURE26");
	HX_MARK_MEMBER_NAME(TEXTURE27,"TEXTURE27");
	HX_MARK_MEMBER_NAME(TEXTURE28,"TEXTURE28");
	HX_MARK_MEMBER_NAME(TEXTURE29,"TEXTURE29");
	HX_MARK_MEMBER_NAME(TEXTURE30,"TEXTURE30");
	HX_MARK_MEMBER_NAME(TEXTURE31,"TEXTURE31");
	HX_MARK_MEMBER_NAME(ACTIVE_TEXTURE,"ACTIVE_TEXTURE");
	HX_MARK_MEMBER_NAME(REPEAT,"REPEAT");
	HX_MARK_MEMBER_NAME(CLAMP_TO_EDGE,"CLAMP_TO_EDGE");
	HX_MARK_MEMBER_NAME(MIRRORED_REPEAT,"MIRRORED_REPEAT");
	HX_MARK_MEMBER_NAME(FLOAT_VEC2,"FLOAT_VEC2");
	HX_MARK_MEMBER_NAME(FLOAT_VEC3,"FLOAT_VEC3");
	HX_MARK_MEMBER_NAME(FLOAT_VEC4,"FLOAT_VEC4");
	HX_MARK_MEMBER_NAME(INT_VEC2,"INT_VEC2");
	HX_MARK_MEMBER_NAME(INT_VEC3,"INT_VEC3");
	HX_MARK_MEMBER_NAME(INT_VEC4,"INT_VEC4");
	HX_MARK_MEMBER_NAME(BOOL,"BOOL");
	HX_MARK_MEMBER_NAME(BOOL_VEC2,"BOOL_VEC2");
	HX_MARK_MEMBER_NAME(BOOL_VEC3,"BOOL_VEC3");
	HX_MARK_MEMBER_NAME(BOOL_VEC4,"BOOL_VEC4");
	HX_MARK_MEMBER_NAME(FLOAT_MAT2,"FLOAT_MAT2");
	HX_MARK_MEMBER_NAME(FLOAT_MAT3,"FLOAT_MAT3");
	HX_MARK_MEMBER_NAME(FLOAT_MAT4,"FLOAT_MAT4");
	HX_MARK_MEMBER_NAME(SAMPLER_2D,"SAMPLER_2D");
	HX_MARK_MEMBER_NAME(SAMPLER_CUBE,"SAMPLER_CUBE");
	HX_MARK_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_ENABLED,"VERTEX_ATTRIB_ARRAY_ENABLED");
	HX_MARK_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_SIZE,"VERTEX_ATTRIB_ARRAY_SIZE");
	HX_MARK_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_STRIDE,"VERTEX_ATTRIB_ARRAY_STRIDE");
	HX_MARK_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_TYPE,"VERTEX_ATTRIB_ARRAY_TYPE");
	HX_MARK_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_NORMALIZED,"VERTEX_ATTRIB_ARRAY_NORMALIZED");
	HX_MARK_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_POINTER,"VERTEX_ATTRIB_ARRAY_POINTER");
	HX_MARK_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING");
	HX_MARK_MEMBER_NAME(VERTEX_PROGRAM_POINT_SIZE,"VERTEX_PROGRAM_POINT_SIZE");
	HX_MARK_MEMBER_NAME(POINT_SPRITE,"POINT_SPRITE");
	HX_MARK_MEMBER_NAME(COMPILE_STATUS,"COMPILE_STATUS");
	HX_MARK_MEMBER_NAME(LOW_FLOAT,"LOW_FLOAT");
	HX_MARK_MEMBER_NAME(MEDIUM_FLOAT,"MEDIUM_FLOAT");
	HX_MARK_MEMBER_NAME(HIGH_FLOAT,"HIGH_FLOAT");
	HX_MARK_MEMBER_NAME(LOW_INT,"LOW_INT");
	HX_MARK_MEMBER_NAME(MEDIUM_INT,"MEDIUM_INT");
	HX_MARK_MEMBER_NAME(HIGH_INT,"HIGH_INT");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER,"FRAMEBUFFER");
	HX_MARK_MEMBER_NAME(RENDERBUFFER,"RENDERBUFFER");
	HX_MARK_MEMBER_NAME(RGBA4,"RGBA4");
	HX_MARK_MEMBER_NAME(RGB5_A1,"RGB5_A1");
	HX_MARK_MEMBER_NAME(RGB565,"RGB565");
	HX_MARK_MEMBER_NAME(DEPTH_COMPONENT16,"DEPTH_COMPONENT16");
	HX_MARK_MEMBER_NAME(STENCIL_INDEX,"STENCIL_INDEX");
	HX_MARK_MEMBER_NAME(STENCIL_INDEX8,"STENCIL_INDEX8");
	HX_MARK_MEMBER_NAME(DEPTH_STENCIL,"DEPTH_STENCIL");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_WIDTH,"RENDERBUFFER_WIDTH");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_HEIGHT,"RENDERBUFFER_HEIGHT");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_INTERNAL_FORMAT,"RENDERBUFFER_INTERNAL_FORMAT");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_RED_SIZE,"RENDERBUFFER_RED_SIZE");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_GREEN_SIZE,"RENDERBUFFER_GREEN_SIZE");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_BLUE_SIZE,"RENDERBUFFER_BLUE_SIZE");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_ALPHA_SIZE,"RENDERBUFFER_ALPHA_SIZE");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_DEPTH_SIZE,"RENDERBUFFER_DEPTH_SIZE");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_STENCIL_SIZE,"RENDERBUFFER_STENCIL_SIZE");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE");
	HX_MARK_MEMBER_NAME(COLOR_ATTACHMENT0,"COLOR_ATTACHMENT0");
	HX_MARK_MEMBER_NAME(DEPTH_ATTACHMENT,"DEPTH_ATTACHMENT");
	HX_MARK_MEMBER_NAME(STENCIL_ATTACHMENT,"STENCIL_ATTACHMENT");
	HX_MARK_MEMBER_NAME(DEPTH_STENCIL_ATTACHMENT,"DEPTH_STENCIL_ATTACHMENT");
	HX_MARK_MEMBER_NAME(NONE,"NONE");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_COMPLETE,"FRAMEBUFFER_COMPLETE");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_INCOMPLETE_ATTACHMENT,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_INCOMPLETE_DIMENSIONS,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_UNSUPPORTED,"FRAMEBUFFER_UNSUPPORTED");
	HX_MARK_MEMBER_NAME(FRAMEBUFFER_BINDING,"FRAMEBUFFER_BINDING");
	HX_MARK_MEMBER_NAME(RENDERBUFFER_BINDING,"RENDERBUFFER_BINDING");
	HX_MARK_MEMBER_NAME(MAX_RENDERBUFFER_SIZE,"MAX_RENDERBUFFER_SIZE");
	HX_MARK_MEMBER_NAME(INVALID_FRAMEBUFFER_OPERATION,"INVALID_FRAMEBUFFER_OPERATION");
	HX_MARK_MEMBER_NAME(UNPACK_FLIP_Y_WEBGL,"UNPACK_FLIP_Y_WEBGL");
	HX_MARK_MEMBER_NAME(UNPACK_PREMULTIPLY_ALPHA_WEBGL,"UNPACK_PREMULTIPLY_ALPHA_WEBGL");
	HX_MARK_MEMBER_NAME(CONTEXT_LOST_WEBGL,"CONTEXT_LOST_WEBGL");
	HX_MARK_MEMBER_NAME(UNPACK_COLORSPACE_CONVERSION_WEBGL,"UNPACK_COLORSPACE_CONVERSION_WEBGL");
	HX_MARK_MEMBER_NAME(BROWSER_DEFAULT_WEBGL,"BROWSER_DEFAULT_WEBGL");
	HX_MARK_MEMBER_NAME(version,"version");
	HX_MARK_MEMBER_NAME(_hx___currentProgram,"__currentProgram");
	HX_MARK_END_CLASS();
}

void NativeGLRenderContext_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(DEPTH_BUFFER_BIT,"DEPTH_BUFFER_BIT");
	HX_VISIT_MEMBER_NAME(STENCIL_BUFFER_BIT,"STENCIL_BUFFER_BIT");
	HX_VISIT_MEMBER_NAME(COLOR_BUFFER_BIT,"COLOR_BUFFER_BIT");
	HX_VISIT_MEMBER_NAME(POINTS,"POINTS");
	HX_VISIT_MEMBER_NAME(LINES,"LINES");
	HX_VISIT_MEMBER_NAME(LINE_LOOP,"LINE_LOOP");
	HX_VISIT_MEMBER_NAME(LINE_STRIP,"LINE_STRIP");
	HX_VISIT_MEMBER_NAME(TRIANGLES,"TRIANGLES");
	HX_VISIT_MEMBER_NAME(TRIANGLE_STRIP,"TRIANGLE_STRIP");
	HX_VISIT_MEMBER_NAME(TRIANGLE_FAN,"TRIANGLE_FAN");
	HX_VISIT_MEMBER_NAME(ZERO,"ZERO");
	HX_VISIT_MEMBER_NAME(ONE,"ONE");
	HX_VISIT_MEMBER_NAME(SRC_COLOR,"SRC_COLOR");
	HX_VISIT_MEMBER_NAME(ONE_MINUS_SRC_COLOR,"ONE_MINUS_SRC_COLOR");
	HX_VISIT_MEMBER_NAME(SRC_ALPHA,"SRC_ALPHA");
	HX_VISIT_MEMBER_NAME(ONE_MINUS_SRC_ALPHA,"ONE_MINUS_SRC_ALPHA");
	HX_VISIT_MEMBER_NAME(DST_ALPHA,"DST_ALPHA");
	HX_VISIT_MEMBER_NAME(ONE_MINUS_DST_ALPHA,"ONE_MINUS_DST_ALPHA");
	HX_VISIT_MEMBER_NAME(DST_COLOR,"DST_COLOR");
	HX_VISIT_MEMBER_NAME(ONE_MINUS_DST_COLOR,"ONE_MINUS_DST_COLOR");
	HX_VISIT_MEMBER_NAME(SRC_ALPHA_SATURATE,"SRC_ALPHA_SATURATE");
	HX_VISIT_MEMBER_NAME(FUNC_ADD,"FUNC_ADD");
	HX_VISIT_MEMBER_NAME(BLEND_EQUATION,"BLEND_EQUATION");
	HX_VISIT_MEMBER_NAME(BLEND_EQUATION_RGB,"BLEND_EQUATION_RGB");
	HX_VISIT_MEMBER_NAME(BLEND_EQUATION_ALPHA,"BLEND_EQUATION_ALPHA");
	HX_VISIT_MEMBER_NAME(FUNC_SUBTRACT,"FUNC_SUBTRACT");
	HX_VISIT_MEMBER_NAME(FUNC_REVERSE_SUBTRACT,"FUNC_REVERSE_SUBTRACT");
	HX_VISIT_MEMBER_NAME(BLEND_DST_RGB,"BLEND_DST_RGB");
	HX_VISIT_MEMBER_NAME(BLEND_SRC_RGB,"BLEND_SRC_RGB");
	HX_VISIT_MEMBER_NAME(BLEND_DST_ALPHA,"BLEND_DST_ALPHA");
	HX_VISIT_MEMBER_NAME(BLEND_SRC_ALPHA,"BLEND_SRC_ALPHA");
	HX_VISIT_MEMBER_NAME(CONSTANT_COLOR,"CONSTANT_COLOR");
	HX_VISIT_MEMBER_NAME(ONE_MINUS_CONSTANT_COLOR,"ONE_MINUS_CONSTANT_COLOR");
	HX_VISIT_MEMBER_NAME(CONSTANT_ALPHA,"CONSTANT_ALPHA");
	HX_VISIT_MEMBER_NAME(ONE_MINUS_CONSTANT_ALPHA,"ONE_MINUS_CONSTANT_ALPHA");
	HX_VISIT_MEMBER_NAME(BLEND_COLOR,"BLEND_COLOR");
	HX_VISIT_MEMBER_NAME(ARRAY_BUFFER,"ARRAY_BUFFER");
	HX_VISIT_MEMBER_NAME(ELEMENT_ARRAY_BUFFER,"ELEMENT_ARRAY_BUFFER");
	HX_VISIT_MEMBER_NAME(ARRAY_BUFFER_BINDING,"ARRAY_BUFFER_BINDING");
	HX_VISIT_MEMBER_NAME(ELEMENT_ARRAY_BUFFER_BINDING,"ELEMENT_ARRAY_BUFFER_BINDING");
	HX_VISIT_MEMBER_NAME(STREAM_DRAW,"STREAM_DRAW");
	HX_VISIT_MEMBER_NAME(STATIC_DRAW,"STATIC_DRAW");
	HX_VISIT_MEMBER_NAME(DYNAMIC_DRAW,"DYNAMIC_DRAW");
	HX_VISIT_MEMBER_NAME(BUFFER_SIZE,"BUFFER_SIZE");
	HX_VISIT_MEMBER_NAME(BUFFER_USAGE,"BUFFER_USAGE");
	HX_VISIT_MEMBER_NAME(CURRENT_VERTEX_ATTRIB,"CURRENT_VERTEX_ATTRIB");
	HX_VISIT_MEMBER_NAME(FRONT,"FRONT");
	HX_VISIT_MEMBER_NAME(BACK,"BACK");
	HX_VISIT_MEMBER_NAME(FRONT_AND_BACK,"FRONT_AND_BACK");
	HX_VISIT_MEMBER_NAME(CULL_FACE,"CULL_FACE");
	HX_VISIT_MEMBER_NAME(BLEND,"BLEND");
	HX_VISIT_MEMBER_NAME(DITHER,"DITHER");
	HX_VISIT_MEMBER_NAME(STENCIL_TEST,"STENCIL_TEST");
	HX_VISIT_MEMBER_NAME(DEPTH_TEST,"DEPTH_TEST");
	HX_VISIT_MEMBER_NAME(SCISSOR_TEST,"SCISSOR_TEST");
	HX_VISIT_MEMBER_NAME(POLYGON_OFFSET_FILL,"POLYGON_OFFSET_FILL");
	HX_VISIT_MEMBER_NAME(SAMPLE_ALPHA_TO_COVERAGE,"SAMPLE_ALPHA_TO_COVERAGE");
	HX_VISIT_MEMBER_NAME(SAMPLE_COVERAGE,"SAMPLE_COVERAGE");
	HX_VISIT_MEMBER_NAME(NO_ERROR,"NO_ERROR");
	HX_VISIT_MEMBER_NAME(INVALID_ENUM,"INVALID_ENUM");
	HX_VISIT_MEMBER_NAME(INVALID_VALUE,"INVALID_VALUE");
	HX_VISIT_MEMBER_NAME(INVALID_OPERATION,"INVALID_OPERATION");
	HX_VISIT_MEMBER_NAME(OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_VISIT_MEMBER_NAME(CW,"CW");
	HX_VISIT_MEMBER_NAME(CCW,"CCW");
	HX_VISIT_MEMBER_NAME(LINE_WIDTH,"LINE_WIDTH");
	HX_VISIT_MEMBER_NAME(ALIASED_POINT_SIZE_RANGE,"ALIASED_POINT_SIZE_RANGE");
	HX_VISIT_MEMBER_NAME(ALIASED_LINE_WIDTH_RANGE,"ALIASED_LINE_WIDTH_RANGE");
	HX_VISIT_MEMBER_NAME(CULL_FACE_MODE,"CULL_FACE_MODE");
	HX_VISIT_MEMBER_NAME(FRONT_FACE,"FRONT_FACE");
	HX_VISIT_MEMBER_NAME(DEPTH_RANGE,"DEPTH_RANGE");
	HX_VISIT_MEMBER_NAME(DEPTH_WRITEMASK,"DEPTH_WRITEMASK");
	HX_VISIT_MEMBER_NAME(DEPTH_CLEAR_VALUE,"DEPTH_CLEAR_VALUE");
	HX_VISIT_MEMBER_NAME(DEPTH_FUNC,"DEPTH_FUNC");
	HX_VISIT_MEMBER_NAME(STENCIL_CLEAR_VALUE,"STENCIL_CLEAR_VALUE");
	HX_VISIT_MEMBER_NAME(STENCIL_FUNC,"STENCIL_FUNC");
	HX_VISIT_MEMBER_NAME(STENCIL_FAIL,"STENCIL_FAIL");
	HX_VISIT_MEMBER_NAME(STENCIL_PASS_DEPTH_FAIL,"STENCIL_PASS_DEPTH_FAIL");
	HX_VISIT_MEMBER_NAME(STENCIL_PASS_DEPTH_PASS,"STENCIL_PASS_DEPTH_PASS");
	HX_VISIT_MEMBER_NAME(STENCIL_REF,"STENCIL_REF");
	HX_VISIT_MEMBER_NAME(STENCIL_VALUE_MASK,"STENCIL_VALUE_MASK");
	HX_VISIT_MEMBER_NAME(STENCIL_WRITEMASK,"STENCIL_WRITEMASK");
	HX_VISIT_MEMBER_NAME(STENCIL_BACK_FUNC,"STENCIL_BACK_FUNC");
	HX_VISIT_MEMBER_NAME(STENCIL_BACK_FAIL,"STENCIL_BACK_FAIL");
	HX_VISIT_MEMBER_NAME(STENCIL_BACK_PASS_DEPTH_FAIL,"STENCIL_BACK_PASS_DEPTH_FAIL");
	HX_VISIT_MEMBER_NAME(STENCIL_BACK_PASS_DEPTH_PASS,"STENCIL_BACK_PASS_DEPTH_PASS");
	HX_VISIT_MEMBER_NAME(STENCIL_BACK_REF,"STENCIL_BACK_REF");
	HX_VISIT_MEMBER_NAME(STENCIL_BACK_VALUE_MASK,"STENCIL_BACK_VALUE_MASK");
	HX_VISIT_MEMBER_NAME(STENCIL_BACK_WRITEMASK,"STENCIL_BACK_WRITEMASK");
	HX_VISIT_MEMBER_NAME(VIEWPORT,"VIEWPORT");
	HX_VISIT_MEMBER_NAME(SCISSOR_BOX,"SCISSOR_BOX");
	HX_VISIT_MEMBER_NAME(COLOR_CLEAR_VALUE,"COLOR_CLEAR_VALUE");
	HX_VISIT_MEMBER_NAME(COLOR_WRITEMASK,"COLOR_WRITEMASK");
	HX_VISIT_MEMBER_NAME(UNPACK_ALIGNMENT,"UNPACK_ALIGNMENT");
	HX_VISIT_MEMBER_NAME(PACK_ALIGNMENT,"PACK_ALIGNMENT");
	HX_VISIT_MEMBER_NAME(MAX_TEXTURE_SIZE,"MAX_TEXTURE_SIZE");
	HX_VISIT_MEMBER_NAME(MAX_VIEWPORT_DIMS,"MAX_VIEWPORT_DIMS");
	HX_VISIT_MEMBER_NAME(SUBPIXEL_BITS,"SUBPIXEL_BITS");
	HX_VISIT_MEMBER_NAME(RED_BITS,"RED_BITS");
	HX_VISIT_MEMBER_NAME(GREEN_BITS,"GREEN_BITS");
	HX_VISIT_MEMBER_NAME(BLUE_BITS,"BLUE_BITS");
	HX_VISIT_MEMBER_NAME(ALPHA_BITS,"ALPHA_BITS");
	HX_VISIT_MEMBER_NAME(DEPTH_BITS,"DEPTH_BITS");
	HX_VISIT_MEMBER_NAME(STENCIL_BITS,"STENCIL_BITS");
	HX_VISIT_MEMBER_NAME(POLYGON_OFFSET_UNITS,"POLYGON_OFFSET_UNITS");
	HX_VISIT_MEMBER_NAME(POLYGON_OFFSET_FACTOR,"POLYGON_OFFSET_FACTOR");
	HX_VISIT_MEMBER_NAME(TEXTURE_BINDING_2D,"TEXTURE_BINDING_2D");
	HX_VISIT_MEMBER_NAME(SAMPLE_BUFFERS,"SAMPLE_BUFFERS");
	HX_VISIT_MEMBER_NAME(SAMPLES,"SAMPLES");
	HX_VISIT_MEMBER_NAME(SAMPLE_COVERAGE_VALUE,"SAMPLE_COVERAGE_VALUE");
	HX_VISIT_MEMBER_NAME(SAMPLE_COVERAGE_INVERT,"SAMPLE_COVERAGE_INVERT");
	HX_VISIT_MEMBER_NAME(COMPRESSED_TEXTURE_FORMATS,"COMPRESSED_TEXTURE_FORMATS");
	HX_VISIT_MEMBER_NAME(DONT_CARE,"DONT_CARE");
	HX_VISIT_MEMBER_NAME(FASTEST,"FASTEST");
	HX_VISIT_MEMBER_NAME(NICEST,"NICEST");
	HX_VISIT_MEMBER_NAME(GENERATE_MIPMAP_HINT,"GENERATE_MIPMAP_HINT");
	HX_VISIT_MEMBER_NAME(BYTE,"BYTE");
	HX_VISIT_MEMBER_NAME(UNSIGNED_BYTE,"UNSIGNED_BYTE");
	HX_VISIT_MEMBER_NAME(SHORT,"SHORT");
	HX_VISIT_MEMBER_NAME(UNSIGNED_SHORT,"UNSIGNED_SHORT");
	HX_VISIT_MEMBER_NAME(INT,"INT");
	HX_VISIT_MEMBER_NAME(UNSIGNED_INT,"UNSIGNED_INT");
	HX_VISIT_MEMBER_NAME(FLOAT,"FLOAT");
	HX_VISIT_MEMBER_NAME(DEPTH_COMPONENT,"DEPTH_COMPONENT");
	HX_VISIT_MEMBER_NAME(ALPHA,"ALPHA");
	HX_VISIT_MEMBER_NAME(RGB,"RGB");
	HX_VISIT_MEMBER_NAME(RGBA,"RGBA");
	HX_VISIT_MEMBER_NAME(BGR_EXT,"BGR_EXT");
	HX_VISIT_MEMBER_NAME(BGRA_EXT,"BGRA_EXT");
	HX_VISIT_MEMBER_NAME(LUMINANCE,"LUMINANCE");
	HX_VISIT_MEMBER_NAME(LUMINANCE_ALPHA,"LUMINANCE_ALPHA");
	HX_VISIT_MEMBER_NAME(UNSIGNED_SHORT_4_4_4_4,"UNSIGNED_SHORT_4_4_4_4");
	HX_VISIT_MEMBER_NAME(UNSIGNED_SHORT_5_5_5_1,"UNSIGNED_SHORT_5_5_5_1");
	HX_VISIT_MEMBER_NAME(UNSIGNED_SHORT_5_6_5,"UNSIGNED_SHORT_5_6_5");
	HX_VISIT_MEMBER_NAME(FRAGMENT_SHADER,"FRAGMENT_SHADER");
	HX_VISIT_MEMBER_NAME(VERTEX_SHADER,"VERTEX_SHADER");
	HX_VISIT_MEMBER_NAME(MAX_VERTEX_ATTRIBS,"MAX_VERTEX_ATTRIBS");
	HX_VISIT_MEMBER_NAME(MAX_VERTEX_UNIFORM_VECTORS,"MAX_VERTEX_UNIFORM_VECTORS");
	HX_VISIT_MEMBER_NAME(MAX_VARYING_VECTORS,"MAX_VARYING_VECTORS");
	HX_VISIT_MEMBER_NAME(MAX_COMBINED_TEXTURE_IMAGE_UNITS,"MAX_COMBINED_TEXTURE_IMAGE_UNITS");
	HX_VISIT_MEMBER_NAME(MAX_VERTEX_TEXTURE_IMAGE_UNITS,"MAX_VERTEX_TEXTURE_IMAGE_UNITS");
	HX_VISIT_MEMBER_NAME(MAX_TEXTURE_IMAGE_UNITS,"MAX_TEXTURE_IMAGE_UNITS");
	HX_VISIT_MEMBER_NAME(MAX_FRAGMENT_UNIFORM_VECTORS,"MAX_FRAGMENT_UNIFORM_VECTORS");
	HX_VISIT_MEMBER_NAME(SHADER_TYPE,"SHADER_TYPE");
	HX_VISIT_MEMBER_NAME(DELETE_STATUS,"DELETE_STATUS");
	HX_VISIT_MEMBER_NAME(LINK_STATUS,"LINK_STATUS");
	HX_VISIT_MEMBER_NAME(VALIDATE_STATUS,"VALIDATE_STATUS");
	HX_VISIT_MEMBER_NAME(ATTACHED_SHADERS,"ATTACHED_SHADERS");
	HX_VISIT_MEMBER_NAME(ACTIVE_UNIFORMS,"ACTIVE_UNIFORMS");
	HX_VISIT_MEMBER_NAME(ACTIVE_ATTRIBUTES,"ACTIVE_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(SHADING_LANGUAGE_VERSION,"SHADING_LANGUAGE_VERSION");
	HX_VISIT_MEMBER_NAME(CURRENT_PROGRAM,"CURRENT_PROGRAM");
	HX_VISIT_MEMBER_NAME(NEVER,"NEVER");
	HX_VISIT_MEMBER_NAME(LESS,"LESS");
	HX_VISIT_MEMBER_NAME(EQUAL,"EQUAL");
	HX_VISIT_MEMBER_NAME(LEQUAL,"LEQUAL");
	HX_VISIT_MEMBER_NAME(GREATER,"GREATER");
	HX_VISIT_MEMBER_NAME(NOTEQUAL,"NOTEQUAL");
	HX_VISIT_MEMBER_NAME(GEQUAL,"GEQUAL");
	HX_VISIT_MEMBER_NAME(ALWAYS,"ALWAYS");
	HX_VISIT_MEMBER_NAME(KEEP,"KEEP");
	HX_VISIT_MEMBER_NAME(REPLACE,"REPLACE");
	HX_VISIT_MEMBER_NAME(INCR,"INCR");
	HX_VISIT_MEMBER_NAME(DECR,"DECR");
	HX_VISIT_MEMBER_NAME(INVERT,"INVERT");
	HX_VISIT_MEMBER_NAME(INCR_WRAP,"INCR_WRAP");
	HX_VISIT_MEMBER_NAME(DECR_WRAP,"DECR_WRAP");
	HX_VISIT_MEMBER_NAME(VENDOR,"VENDOR");
	HX_VISIT_MEMBER_NAME(RENDERER,"RENDERER");
	HX_VISIT_MEMBER_NAME(VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(NEAREST,"NEAREST");
	HX_VISIT_MEMBER_NAME(LINEAR,"LINEAR");
	HX_VISIT_MEMBER_NAME(NEAREST_MIPMAP_NEAREST,"NEAREST_MIPMAP_NEAREST");
	HX_VISIT_MEMBER_NAME(LINEAR_MIPMAP_NEAREST,"LINEAR_MIPMAP_NEAREST");
	HX_VISIT_MEMBER_NAME(NEAREST_MIPMAP_LINEAR,"NEAREST_MIPMAP_LINEAR");
	HX_VISIT_MEMBER_NAME(LINEAR_MIPMAP_LINEAR,"LINEAR_MIPMAP_LINEAR");
	HX_VISIT_MEMBER_NAME(TEXTURE_MAG_FILTER,"TEXTURE_MAG_FILTER");
	HX_VISIT_MEMBER_NAME(TEXTURE_MIN_FILTER,"TEXTURE_MIN_FILTER");
	HX_VISIT_MEMBER_NAME(TEXTURE_WRAP_S,"TEXTURE_WRAP_S");
	HX_VISIT_MEMBER_NAME(TEXTURE_WRAP_T,"TEXTURE_WRAP_T");
	HX_VISIT_MEMBER_NAME(TEXTURE_2D,"TEXTURE_2D");
	HX_VISIT_MEMBER_NAME(TEXTURE,"TEXTURE");
	HX_VISIT_MEMBER_NAME(TEXTURE_CUBE_MAP,"TEXTURE_CUBE_MAP");
	HX_VISIT_MEMBER_NAME(TEXTURE_BINDING_CUBE_MAP,"TEXTURE_BINDING_CUBE_MAP");
	HX_VISIT_MEMBER_NAME(TEXTURE_CUBE_MAP_POSITIVE_X,"TEXTURE_CUBE_MAP_POSITIVE_X");
	HX_VISIT_MEMBER_NAME(TEXTURE_CUBE_MAP_NEGATIVE_X,"TEXTURE_CUBE_MAP_NEGATIVE_X");
	HX_VISIT_MEMBER_NAME(TEXTURE_CUBE_MAP_POSITIVE_Y,"TEXTURE_CUBE_MAP_POSITIVE_Y");
	HX_VISIT_MEMBER_NAME(TEXTURE_CUBE_MAP_NEGATIVE_Y,"TEXTURE_CUBE_MAP_NEGATIVE_Y");
	HX_VISIT_MEMBER_NAME(TEXTURE_CUBE_MAP_POSITIVE_Z,"TEXTURE_CUBE_MAP_POSITIVE_Z");
	HX_VISIT_MEMBER_NAME(TEXTURE_CUBE_MAP_NEGATIVE_Z,"TEXTURE_CUBE_MAP_NEGATIVE_Z");
	HX_VISIT_MEMBER_NAME(MAX_CUBE_MAP_TEXTURE_SIZE,"MAX_CUBE_MAP_TEXTURE_SIZE");
	HX_VISIT_MEMBER_NAME(TEXTURE0,"TEXTURE0");
	HX_VISIT_MEMBER_NAME(TEXTURE1,"TEXTURE1");
	HX_VISIT_MEMBER_NAME(TEXTURE2,"TEXTURE2");
	HX_VISIT_MEMBER_NAME(TEXTURE3,"TEXTURE3");
	HX_VISIT_MEMBER_NAME(TEXTURE4,"TEXTURE4");
	HX_VISIT_MEMBER_NAME(TEXTURE5,"TEXTURE5");
	HX_VISIT_MEMBER_NAME(TEXTURE6,"TEXTURE6");
	HX_VISIT_MEMBER_NAME(TEXTURE7,"TEXTURE7");
	HX_VISIT_MEMBER_NAME(TEXTURE8,"TEXTURE8");
	HX_VISIT_MEMBER_NAME(TEXTURE9,"TEXTURE9");
	HX_VISIT_MEMBER_NAME(TEXTURE10,"TEXTURE10");
	HX_VISIT_MEMBER_NAME(TEXTURE11,"TEXTURE11");
	HX_VISIT_MEMBER_NAME(TEXTURE12,"TEXTURE12");
	HX_VISIT_MEMBER_NAME(TEXTURE13,"TEXTURE13");
	HX_VISIT_MEMBER_NAME(TEXTURE14,"TEXTURE14");
	HX_VISIT_MEMBER_NAME(TEXTURE15,"TEXTURE15");
	HX_VISIT_MEMBER_NAME(TEXTURE16,"TEXTURE16");
	HX_VISIT_MEMBER_NAME(TEXTURE17,"TEXTURE17");
	HX_VISIT_MEMBER_NAME(TEXTURE18,"TEXTURE18");
	HX_VISIT_MEMBER_NAME(TEXTURE19,"TEXTURE19");
	HX_VISIT_MEMBER_NAME(TEXTURE20,"TEXTURE20");
	HX_VISIT_MEMBER_NAME(TEXTURE21,"TEXTURE21");
	HX_VISIT_MEMBER_NAME(TEXTURE22,"TEXTURE22");
	HX_VISIT_MEMBER_NAME(TEXTURE23,"TEXTURE23");
	HX_VISIT_MEMBER_NAME(TEXTURE24,"TEXTURE24");
	HX_VISIT_MEMBER_NAME(TEXTURE25,"TEXTURE25");
	HX_VISIT_MEMBER_NAME(TEXTURE26,"TEXTURE26");
	HX_VISIT_MEMBER_NAME(TEXTURE27,"TEXTURE27");
	HX_VISIT_MEMBER_NAME(TEXTURE28,"TEXTURE28");
	HX_VISIT_MEMBER_NAME(TEXTURE29,"TEXTURE29");
	HX_VISIT_MEMBER_NAME(TEXTURE30,"TEXTURE30");
	HX_VISIT_MEMBER_NAME(TEXTURE31,"TEXTURE31");
	HX_VISIT_MEMBER_NAME(ACTIVE_TEXTURE,"ACTIVE_TEXTURE");
	HX_VISIT_MEMBER_NAME(REPEAT,"REPEAT");
	HX_VISIT_MEMBER_NAME(CLAMP_TO_EDGE,"CLAMP_TO_EDGE");
	HX_VISIT_MEMBER_NAME(MIRRORED_REPEAT,"MIRRORED_REPEAT");
	HX_VISIT_MEMBER_NAME(FLOAT_VEC2,"FLOAT_VEC2");
	HX_VISIT_MEMBER_NAME(FLOAT_VEC3,"FLOAT_VEC3");
	HX_VISIT_MEMBER_NAME(FLOAT_VEC4,"FLOAT_VEC4");
	HX_VISIT_MEMBER_NAME(INT_VEC2,"INT_VEC2");
	HX_VISIT_MEMBER_NAME(INT_VEC3,"INT_VEC3");
	HX_VISIT_MEMBER_NAME(INT_VEC4,"INT_VEC4");
	HX_VISIT_MEMBER_NAME(BOOL,"BOOL");
	HX_VISIT_MEMBER_NAME(BOOL_VEC2,"BOOL_VEC2");
	HX_VISIT_MEMBER_NAME(BOOL_VEC3,"BOOL_VEC3");
	HX_VISIT_MEMBER_NAME(BOOL_VEC4,"BOOL_VEC4");
	HX_VISIT_MEMBER_NAME(FLOAT_MAT2,"FLOAT_MAT2");
	HX_VISIT_MEMBER_NAME(FLOAT_MAT3,"FLOAT_MAT3");
	HX_VISIT_MEMBER_NAME(FLOAT_MAT4,"FLOAT_MAT4");
	HX_VISIT_MEMBER_NAME(SAMPLER_2D,"SAMPLER_2D");
	HX_VISIT_MEMBER_NAME(SAMPLER_CUBE,"SAMPLER_CUBE");
	HX_VISIT_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_ENABLED,"VERTEX_ATTRIB_ARRAY_ENABLED");
	HX_VISIT_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_SIZE,"VERTEX_ATTRIB_ARRAY_SIZE");
	HX_VISIT_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_STRIDE,"VERTEX_ATTRIB_ARRAY_STRIDE");
	HX_VISIT_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_TYPE,"VERTEX_ATTRIB_ARRAY_TYPE");
	HX_VISIT_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_NORMALIZED,"VERTEX_ATTRIB_ARRAY_NORMALIZED");
	HX_VISIT_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_POINTER,"VERTEX_ATTRIB_ARRAY_POINTER");
	HX_VISIT_MEMBER_NAME(VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING");
	HX_VISIT_MEMBER_NAME(VERTEX_PROGRAM_POINT_SIZE,"VERTEX_PROGRAM_POINT_SIZE");
	HX_VISIT_MEMBER_NAME(POINT_SPRITE,"POINT_SPRITE");
	HX_VISIT_MEMBER_NAME(COMPILE_STATUS,"COMPILE_STATUS");
	HX_VISIT_MEMBER_NAME(LOW_FLOAT,"LOW_FLOAT");
	HX_VISIT_MEMBER_NAME(MEDIUM_FLOAT,"MEDIUM_FLOAT");
	HX_VISIT_MEMBER_NAME(HIGH_FLOAT,"HIGH_FLOAT");
	HX_VISIT_MEMBER_NAME(LOW_INT,"LOW_INT");
	HX_VISIT_MEMBER_NAME(MEDIUM_INT,"MEDIUM_INT");
	HX_VISIT_MEMBER_NAME(HIGH_INT,"HIGH_INT");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER,"FRAMEBUFFER");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER,"RENDERBUFFER");
	HX_VISIT_MEMBER_NAME(RGBA4,"RGBA4");
	HX_VISIT_MEMBER_NAME(RGB5_A1,"RGB5_A1");
	HX_VISIT_MEMBER_NAME(RGB565,"RGB565");
	HX_VISIT_MEMBER_NAME(DEPTH_COMPONENT16,"DEPTH_COMPONENT16");
	HX_VISIT_MEMBER_NAME(STENCIL_INDEX,"STENCIL_INDEX");
	HX_VISIT_MEMBER_NAME(STENCIL_INDEX8,"STENCIL_INDEX8");
	HX_VISIT_MEMBER_NAME(DEPTH_STENCIL,"DEPTH_STENCIL");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_WIDTH,"RENDERBUFFER_WIDTH");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_HEIGHT,"RENDERBUFFER_HEIGHT");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_INTERNAL_FORMAT,"RENDERBUFFER_INTERNAL_FORMAT");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_RED_SIZE,"RENDERBUFFER_RED_SIZE");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_GREEN_SIZE,"RENDERBUFFER_GREEN_SIZE");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_BLUE_SIZE,"RENDERBUFFER_BLUE_SIZE");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_ALPHA_SIZE,"RENDERBUFFER_ALPHA_SIZE");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_DEPTH_SIZE,"RENDERBUFFER_DEPTH_SIZE");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_STENCIL_SIZE,"RENDERBUFFER_STENCIL_SIZE");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE");
	HX_VISIT_MEMBER_NAME(COLOR_ATTACHMENT0,"COLOR_ATTACHMENT0");
	HX_VISIT_MEMBER_NAME(DEPTH_ATTACHMENT,"DEPTH_ATTACHMENT");
	HX_VISIT_MEMBER_NAME(STENCIL_ATTACHMENT,"STENCIL_ATTACHMENT");
	HX_VISIT_MEMBER_NAME(DEPTH_STENCIL_ATTACHMENT,"DEPTH_STENCIL_ATTACHMENT");
	HX_VISIT_MEMBER_NAME(NONE,"NONE");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_COMPLETE,"FRAMEBUFFER_COMPLETE");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_INCOMPLETE_ATTACHMENT,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_INCOMPLETE_DIMENSIONS,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_UNSUPPORTED,"FRAMEBUFFER_UNSUPPORTED");
	HX_VISIT_MEMBER_NAME(FRAMEBUFFER_BINDING,"FRAMEBUFFER_BINDING");
	HX_VISIT_MEMBER_NAME(RENDERBUFFER_BINDING,"RENDERBUFFER_BINDING");
	HX_VISIT_MEMBER_NAME(MAX_RENDERBUFFER_SIZE,"MAX_RENDERBUFFER_SIZE");
	HX_VISIT_MEMBER_NAME(INVALID_FRAMEBUFFER_OPERATION,"INVALID_FRAMEBUFFER_OPERATION");
	HX_VISIT_MEMBER_NAME(UNPACK_FLIP_Y_WEBGL,"UNPACK_FLIP_Y_WEBGL");
	HX_VISIT_MEMBER_NAME(UNPACK_PREMULTIPLY_ALPHA_WEBGL,"UNPACK_PREMULTIPLY_ALPHA_WEBGL");
	HX_VISIT_MEMBER_NAME(CONTEXT_LOST_WEBGL,"CONTEXT_LOST_WEBGL");
	HX_VISIT_MEMBER_NAME(UNPACK_COLORSPACE_CONVERSION_WEBGL,"UNPACK_COLORSPACE_CONVERSION_WEBGL");
	HX_VISIT_MEMBER_NAME(BROWSER_DEFAULT_WEBGL,"BROWSER_DEFAULT_WEBGL");
	HX_VISIT_MEMBER_NAME(version,"version");
	HX_VISIT_MEMBER_NAME(_hx___currentProgram,"__currentProgram");
}

hx::Val NativeGLRenderContext_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"CW") ) { return hx::Val( CW); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ONE") ) { return hx::Val( ONE); }
		if (HX_FIELD_EQ(inName,"CCW") ) { return hx::Val( CCW); }
		if (HX_FIELD_EQ(inName,"INT") ) { return hx::Val( INT); }
		if (HX_FIELD_EQ(inName,"RGB") ) { return hx::Val( RGB); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ZERO") ) { return hx::Val( ZERO); }
		if (HX_FIELD_EQ(inName,"BACK") ) { return hx::Val( BACK); }
		if (HX_FIELD_EQ(inName,"BYTE") ) { return hx::Val( BYTE); }
		if (HX_FIELD_EQ(inName,"RGBA") ) { return hx::Val( RGBA); }
		if (HX_FIELD_EQ(inName,"LESS") ) { return hx::Val( LESS); }
		if (HX_FIELD_EQ(inName,"KEEP") ) { return hx::Val( KEEP); }
		if (HX_FIELD_EQ(inName,"INCR") ) { return hx::Val( INCR); }
		if (HX_FIELD_EQ(inName,"DECR") ) { return hx::Val( DECR); }
		if (HX_FIELD_EQ(inName,"BOOL") ) { return hx::Val( BOOL); }
		if (HX_FIELD_EQ(inName,"NONE") ) { return hx::Val( NONE); }
		if (HX_FIELD_EQ(inName,"hint") ) { return hx::Val( hint_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"LINES") ) { return hx::Val( LINES); }
		if (HX_FIELD_EQ(inName,"FRONT") ) { return hx::Val( FRONT); }
		if (HX_FIELD_EQ(inName,"BLEND") ) { return hx::Val( BLEND); }
		if (HX_FIELD_EQ(inName,"SHORT") ) { return hx::Val( SHORT); }
		if (HX_FIELD_EQ(inName,"FLOAT") ) { return hx::Val( FLOAT); }
		if (HX_FIELD_EQ(inName,"ALPHA") ) { return hx::Val( ALPHA); }
		if (HX_FIELD_EQ(inName,"NEVER") ) { return hx::Val( NEVER); }
		if (HX_FIELD_EQ(inName,"EQUAL") ) { return hx::Val( EQUAL); }
		if (HX_FIELD_EQ(inName,"RGBA4") ) { return hx::Val( RGBA4); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"POINTS") ) { return hx::Val( POINTS); }
		if (HX_FIELD_EQ(inName,"DITHER") ) { return hx::Val( DITHER); }
		if (HX_FIELD_EQ(inName,"NICEST") ) { return hx::Val( NICEST); }
		if (HX_FIELD_EQ(inName,"LEQUAL") ) { return hx::Val( LEQUAL); }
		if (HX_FIELD_EQ(inName,"GEQUAL") ) { return hx::Val( GEQUAL); }
		if (HX_FIELD_EQ(inName,"ALWAYS") ) { return hx::Val( ALWAYS); }
		if (HX_FIELD_EQ(inName,"INVERT") ) { return hx::Val( INVERT); }
		if (HX_FIELD_EQ(inName,"VENDOR") ) { return hx::Val( VENDOR); }
		if (HX_FIELD_EQ(inName,"LINEAR") ) { return hx::Val( LINEAR); }
		if (HX_FIELD_EQ(inName,"REPEAT") ) { return hx::Val( REPEAT); }
		if (HX_FIELD_EQ(inName,"RGB565") ) { return hx::Val( RGB565); }
		if (HX_FIELD_EQ(inName,"enable") ) { return hx::Val( enable_dyn()); }
		if (HX_FIELD_EQ(inName,"finish") ) { return hx::Val( finish_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"SAMPLES") ) { return hx::Val( SAMPLES); }
		if (HX_FIELD_EQ(inName,"FASTEST") ) { return hx::Val( FASTEST); }
		if (HX_FIELD_EQ(inName,"BGR_EXT") ) { return hx::Val( BGR_EXT); }
		if (HX_FIELD_EQ(inName,"GREATER") ) { return hx::Val( GREATER); }
		if (HX_FIELD_EQ(inName,"REPLACE") ) { return hx::Val( REPLACE); }
		if (HX_FIELD_EQ(inName,"VERSION") ) { return hx::Val( VERSION); }
		if (HX_FIELD_EQ(inName,"NEAREST") ) { return hx::Val( NEAREST); }
		if (HX_FIELD_EQ(inName,"TEXTURE") ) { return hx::Val( TEXTURE); }
		if (HX_FIELD_EQ(inName,"LOW_INT") ) { return hx::Val( LOW_INT); }
		if (HX_FIELD_EQ(inName,"RGB5_A1") ) { return hx::Val( RGB5_A1); }
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( inCallProp == hx::paccAlways ? get_version() : version); }
		if (HX_FIELD_EQ(inName,"disable") ) { return hx::Val( disable_dyn()); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return hx::Val( scissor_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"FUNC_ADD") ) { return hx::Val( FUNC_ADD); }
		if (HX_FIELD_EQ(inName,"NO_ERROR") ) { return hx::Val( NO_ERROR); }
		if (HX_FIELD_EQ(inName,"VIEWPORT") ) { return hx::Val( VIEWPORT); }
		if (HX_FIELD_EQ(inName,"RED_BITS") ) { return hx::Val( RED_BITS); }
		if (HX_FIELD_EQ(inName,"BGRA_EXT") ) { return hx::Val( BGRA_EXT); }
		if (HX_FIELD_EQ(inName,"NOTEQUAL") ) { return hx::Val( NOTEQUAL); }
		if (HX_FIELD_EQ(inName,"RENDERER") ) { return hx::Val( RENDERER); }
		if (HX_FIELD_EQ(inName,"TEXTURE0") ) { return hx::Val( TEXTURE0); }
		if (HX_FIELD_EQ(inName,"TEXTURE1") ) { return hx::Val( TEXTURE1); }
		if (HX_FIELD_EQ(inName,"TEXTURE2") ) { return hx::Val( TEXTURE2); }
		if (HX_FIELD_EQ(inName,"TEXTURE3") ) { return hx::Val( TEXTURE3); }
		if (HX_FIELD_EQ(inName,"TEXTURE4") ) { return hx::Val( TEXTURE4); }
		if (HX_FIELD_EQ(inName,"TEXTURE5") ) { return hx::Val( TEXTURE5); }
		if (HX_FIELD_EQ(inName,"TEXTURE6") ) { return hx::Val( TEXTURE6); }
		if (HX_FIELD_EQ(inName,"TEXTURE7") ) { return hx::Val( TEXTURE7); }
		if (HX_FIELD_EQ(inName,"TEXTURE8") ) { return hx::Val( TEXTURE8); }
		if (HX_FIELD_EQ(inName,"TEXTURE9") ) { return hx::Val( TEXTURE9); }
		if (HX_FIELD_EQ(inName,"INT_VEC2") ) { return hx::Val( INT_VEC2); }
		if (HX_FIELD_EQ(inName,"INT_VEC3") ) { return hx::Val( INT_VEC3); }
		if (HX_FIELD_EQ(inName,"INT_VEC4") ) { return hx::Val( INT_VEC4); }
		if (HX_FIELD_EQ(inName,"HIGH_INT") ) { return hx::Val( HIGH_INT); }
		if (HX_FIELD_EQ(inName,"cullFace") ) { return hx::Val( cullFace_dyn()); }
		if (HX_FIELD_EQ(inName,"getError") ) { return hx::Val( getError_dyn()); }
		if (HX_FIELD_EQ(inName,"isBuffer") ) { return hx::Val( isBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"isShader") ) { return hx::Val( isShader_dyn()); }
		if (HX_FIELD_EQ(inName,"viewport") ) { return hx::Val( viewport_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"LINE_LOOP") ) { return hx::Val( LINE_LOOP); }
		if (HX_FIELD_EQ(inName,"TRIANGLES") ) { return hx::Val( TRIANGLES); }
		if (HX_FIELD_EQ(inName,"SRC_COLOR") ) { return hx::Val( SRC_COLOR); }
		if (HX_FIELD_EQ(inName,"SRC_ALPHA") ) { return hx::Val( SRC_ALPHA); }
		if (HX_FIELD_EQ(inName,"DST_ALPHA") ) { return hx::Val( DST_ALPHA); }
		if (HX_FIELD_EQ(inName,"DST_COLOR") ) { return hx::Val( DST_COLOR); }
		if (HX_FIELD_EQ(inName,"CULL_FACE") ) { return hx::Val( CULL_FACE); }
		if (HX_FIELD_EQ(inName,"BLUE_BITS") ) { return hx::Val( BLUE_BITS); }
		if (HX_FIELD_EQ(inName,"DONT_CARE") ) { return hx::Val( DONT_CARE); }
		if (HX_FIELD_EQ(inName,"LUMINANCE") ) { return hx::Val( LUMINANCE); }
		if (HX_FIELD_EQ(inName,"INCR_WRAP") ) { return hx::Val( INCR_WRAP); }
		if (HX_FIELD_EQ(inName,"DECR_WRAP") ) { return hx::Val( DECR_WRAP); }
		if (HX_FIELD_EQ(inName,"TEXTURE10") ) { return hx::Val( TEXTURE10); }
		if (HX_FIELD_EQ(inName,"TEXTURE11") ) { return hx::Val( TEXTURE11); }
		if (HX_FIELD_EQ(inName,"TEXTURE12") ) { return hx::Val( TEXTURE12); }
		if (HX_FIELD_EQ(inName,"TEXTURE13") ) { return hx::Val( TEXTURE13); }
		if (HX_FIELD_EQ(inName,"TEXTURE14") ) { return hx::Val( TEXTURE14); }
		if (HX_FIELD_EQ(inName,"TEXTURE15") ) { return hx::Val( TEXTURE15); }
		if (HX_FIELD_EQ(inName,"TEXTURE16") ) { return hx::Val( TEXTURE16); }
		if (HX_FIELD_EQ(inName,"TEXTURE17") ) { return hx::Val( TEXTURE17); }
		if (HX_FIELD_EQ(inName,"TEXTURE18") ) { return hx::Val( TEXTURE18); }
		if (HX_FIELD_EQ(inName,"TEXTURE19") ) { return hx::Val( TEXTURE19); }
		if (HX_FIELD_EQ(inName,"TEXTURE20") ) { return hx::Val( TEXTURE20); }
		if (HX_FIELD_EQ(inName,"TEXTURE21") ) { return hx::Val( TEXTURE21); }
		if (HX_FIELD_EQ(inName,"TEXTURE22") ) { return hx::Val( TEXTURE22); }
		if (HX_FIELD_EQ(inName,"TEXTURE23") ) { return hx::Val( TEXTURE23); }
		if (HX_FIELD_EQ(inName,"TEXTURE24") ) { return hx::Val( TEXTURE24); }
		if (HX_FIELD_EQ(inName,"TEXTURE25") ) { return hx::Val( TEXTURE25); }
		if (HX_FIELD_EQ(inName,"TEXTURE26") ) { return hx::Val( TEXTURE26); }
		if (HX_FIELD_EQ(inName,"TEXTURE27") ) { return hx::Val( TEXTURE27); }
		if (HX_FIELD_EQ(inName,"TEXTURE28") ) { return hx::Val( TEXTURE28); }
		if (HX_FIELD_EQ(inName,"TEXTURE29") ) { return hx::Val( TEXTURE29); }
		if (HX_FIELD_EQ(inName,"TEXTURE30") ) { return hx::Val( TEXTURE30); }
		if (HX_FIELD_EQ(inName,"TEXTURE31") ) { return hx::Val( TEXTURE31); }
		if (HX_FIELD_EQ(inName,"BOOL_VEC2") ) { return hx::Val( BOOL_VEC2); }
		if (HX_FIELD_EQ(inName,"BOOL_VEC3") ) { return hx::Val( BOOL_VEC3); }
		if (HX_FIELD_EQ(inName,"BOOL_VEC4") ) { return hx::Val( BOOL_VEC4); }
		if (HX_FIELD_EQ(inName,"LOW_FLOAT") ) { return hx::Val( LOW_FLOAT); }
		if (HX_FIELD_EQ(inName,"blendFunc") ) { return hx::Val( blendFunc_dyn()); }
		if (HX_FIELD_EQ(inName,"colorMask") ) { return hx::Val( colorMask_dyn()); }
		if (HX_FIELD_EQ(inName,"depthFunc") ) { return hx::Val( depthFunc_dyn()); }
		if (HX_FIELD_EQ(inName,"depthMask") ) { return hx::Val( depthMask_dyn()); }
		if (HX_FIELD_EQ(inName,"frontFace") ) { return hx::Val( frontFace_dyn()); }
		if (HX_FIELD_EQ(inName,"isEnabled") ) { return hx::Val( isEnabled_dyn()); }
		if (HX_FIELD_EQ(inName,"isProgram") ) { return hx::Val( isProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"isTexture") ) { return hx::Val( isTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"lineWidth") ) { return hx::Val( lineWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilOp") ) { return hx::Val( stencilOp_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform1f") ) { return hx::Val( uniform1f_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform1i") ) { return hx::Val( uniform1i_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform2f") ) { return hx::Val( uniform2f_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform2i") ) { return hx::Val( uniform2i_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform3f") ) { return hx::Val( uniform3f_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform3i") ) { return hx::Val( uniform3i_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform4f") ) { return hx::Val( uniform4f_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform4i") ) { return hx::Val( uniform4i_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"LINE_STRIP") ) { return hx::Val( LINE_STRIP); }
		if (HX_FIELD_EQ(inName,"DEPTH_TEST") ) { return hx::Val( DEPTH_TEST); }
		if (HX_FIELD_EQ(inName,"LINE_WIDTH") ) { return hx::Val( LINE_WIDTH); }
		if (HX_FIELD_EQ(inName,"FRONT_FACE") ) { return hx::Val( FRONT_FACE); }
		if (HX_FIELD_EQ(inName,"DEPTH_FUNC") ) { return hx::Val( DEPTH_FUNC); }
		if (HX_FIELD_EQ(inName,"GREEN_BITS") ) { return hx::Val( GREEN_BITS); }
		if (HX_FIELD_EQ(inName,"ALPHA_BITS") ) { return hx::Val( ALPHA_BITS); }
		if (HX_FIELD_EQ(inName,"DEPTH_BITS") ) { return hx::Val( DEPTH_BITS); }
		if (HX_FIELD_EQ(inName,"TEXTURE_2D") ) { return hx::Val( TEXTURE_2D); }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC2") ) { return hx::Val( FLOAT_VEC2); }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC3") ) { return hx::Val( FLOAT_VEC3); }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC4") ) { return hx::Val( FLOAT_VEC4); }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT2") ) { return hx::Val( FLOAT_MAT2); }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT3") ) { return hx::Val( FLOAT_MAT3); }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT4") ) { return hx::Val( FLOAT_MAT4); }
		if (HX_FIELD_EQ(inName,"SAMPLER_2D") ) { return hx::Val( SAMPLER_2D); }
		if (HX_FIELD_EQ(inName,"HIGH_FLOAT") ) { return hx::Val( HIGH_FLOAT); }
		if (HX_FIELD_EQ(inName,"MEDIUM_INT") ) { return hx::Val( MEDIUM_INT); }
		if (HX_FIELD_EQ(inName,"bindBuffer") ) { return hx::Val( bindBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"blendColor") ) { return hx::Val( blendColor_dyn()); }
		if (HX_FIELD_EQ(inName,"bufferData") ) { return hx::Val( bufferData_dyn()); }
		if (HX_FIELD_EQ(inName,"clearColor") ) { return hx::Val( clearColor_dyn()); }
		if (HX_FIELD_EQ(inName,"clearDepth") ) { return hx::Val( clearDepth_dyn()); }
		if (HX_FIELD_EQ(inName,"depthRange") ) { return hx::Val( depthRange_dyn()); }
		if (HX_FIELD_EQ(inName,"drawArrays") ) { return hx::Val( drawArrays_dyn()); }
		if (HX_FIELD_EQ(inName,"getUniform") ) { return hx::Val( getUniform_dyn()); }
		if (HX_FIELD_EQ(inName,"readPixels") ) { return hx::Val( readPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"texImage2D") ) { return hx::Val( texImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform1fv") ) { return hx::Val( uniform1fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform1iv") ) { return hx::Val( uniform1iv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform2fv") ) { return hx::Val( uniform2fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform2iv") ) { return hx::Val( uniform2iv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform3fv") ) { return hx::Val( uniform3fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform3iv") ) { return hx::Val( uniform3iv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform4fv") ) { return hx::Val( uniform4fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform4iv") ) { return hx::Val( uniform4iv_dyn()); }
		if (HX_FIELD_EQ(inName,"useProgram") ) { return hx::Val( useProgram_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BLEND_COLOR") ) { return hx::Val( BLEND_COLOR); }
		if (HX_FIELD_EQ(inName,"STREAM_DRAW") ) { return hx::Val( STREAM_DRAW); }
		if (HX_FIELD_EQ(inName,"STATIC_DRAW") ) { return hx::Val( STATIC_DRAW); }
		if (HX_FIELD_EQ(inName,"BUFFER_SIZE") ) { return hx::Val( BUFFER_SIZE); }
		if (HX_FIELD_EQ(inName,"DEPTH_RANGE") ) { return hx::Val( DEPTH_RANGE); }
		if (HX_FIELD_EQ(inName,"STENCIL_REF") ) { return hx::Val( STENCIL_REF); }
		if (HX_FIELD_EQ(inName,"SCISSOR_BOX") ) { return hx::Val( SCISSOR_BOX); }
		if (HX_FIELD_EQ(inName,"SHADER_TYPE") ) { return hx::Val( SHADER_TYPE); }
		if (HX_FIELD_EQ(inName,"LINK_STATUS") ) { return hx::Val( LINK_STATUS); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER") ) { return hx::Val( FRAMEBUFFER); }
		if (HX_FIELD_EQ(inName,"bindTexture") ) { return hx::Val( bindTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"linkProgram") ) { return hx::Val( linkProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"pixelStorei") ) { return hx::Val( pixelStorei_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilFunc") ) { return hx::Val( stencilFunc_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilMask") ) { return hx::Val( stencilMask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_version") ) { return hx::Val( get_version_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"TRIANGLE_FAN") ) { return hx::Val( TRIANGLE_FAN); }
		if (HX_FIELD_EQ(inName,"ARRAY_BUFFER") ) { return hx::Val( ARRAY_BUFFER); }
		if (HX_FIELD_EQ(inName,"DYNAMIC_DRAW") ) { return hx::Val( DYNAMIC_DRAW); }
		if (HX_FIELD_EQ(inName,"BUFFER_USAGE") ) { return hx::Val( BUFFER_USAGE); }
		if (HX_FIELD_EQ(inName,"STENCIL_TEST") ) { return hx::Val( STENCIL_TEST); }
		if (HX_FIELD_EQ(inName,"SCISSOR_TEST") ) { return hx::Val( SCISSOR_TEST); }
		if (HX_FIELD_EQ(inName,"INVALID_ENUM") ) { return hx::Val( INVALID_ENUM); }
		if (HX_FIELD_EQ(inName,"STENCIL_FUNC") ) { return hx::Val( STENCIL_FUNC); }
		if (HX_FIELD_EQ(inName,"STENCIL_FAIL") ) { return hx::Val( STENCIL_FAIL); }
		if (HX_FIELD_EQ(inName,"STENCIL_BITS") ) { return hx::Val( STENCIL_BITS); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_INT") ) { return hx::Val( UNSIGNED_INT); }
		if (HX_FIELD_EQ(inName,"SAMPLER_CUBE") ) { return hx::Val( SAMPLER_CUBE); }
		if (HX_FIELD_EQ(inName,"POINT_SPRITE") ) { return hx::Val( POINT_SPRITE); }
		if (HX_FIELD_EQ(inName,"MEDIUM_FLOAT") ) { return hx::Val( MEDIUM_FLOAT); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER") ) { return hx::Val( RENDERBUFFER); }
		if (HX_FIELD_EQ(inName,"attachShader") ) { return hx::Val( attachShader_dyn()); }
		if (HX_FIELD_EQ(inName,"clearStencil") ) { return hx::Val( clearStencil_dyn()); }
		if (HX_FIELD_EQ(inName,"createBuffer") ) { return hx::Val( createBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"createShader") ) { return hx::Val( createShader_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteBuffer") ) { return hx::Val( deleteBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteShader") ) { return hx::Val( deleteShader_dyn()); }
		if (HX_FIELD_EQ(inName,"detachShader") ) { return hx::Val( detachShader_dyn()); }
		if (HX_FIELD_EQ(inName,"drawElements") ) { return hx::Val( drawElements_dyn()); }
		if (HX_FIELD_EQ(inName,"getExtension") ) { return hx::Val( getExtension_dyn()); }
		if (HX_FIELD_EQ(inName,"getParameter") ) { return hx::Val( getParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"shaderSource") ) { return hx::Val( shaderSource_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"FUNC_SUBTRACT") ) { return hx::Val( FUNC_SUBTRACT); }
		if (HX_FIELD_EQ(inName,"BLEND_DST_RGB") ) { return hx::Val( BLEND_DST_RGB); }
		if (HX_FIELD_EQ(inName,"BLEND_SRC_RGB") ) { return hx::Val( BLEND_SRC_RGB); }
		if (HX_FIELD_EQ(inName,"INVALID_VALUE") ) { return hx::Val( INVALID_VALUE); }
		if (HX_FIELD_EQ(inName,"OUT_OF_MEMORY") ) { return hx::Val( OUT_OF_MEMORY); }
		if (HX_FIELD_EQ(inName,"SUBPIXEL_BITS") ) { return hx::Val( SUBPIXEL_BITS); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_BYTE") ) { return hx::Val( UNSIGNED_BYTE); }
		if (HX_FIELD_EQ(inName,"VERTEX_SHADER") ) { return hx::Val( VERTEX_SHADER); }
		if (HX_FIELD_EQ(inName,"DELETE_STATUS") ) { return hx::Val( DELETE_STATUS); }
		if (HX_FIELD_EQ(inName,"CLAMP_TO_EDGE") ) { return hx::Val( CLAMP_TO_EDGE); }
		if (HX_FIELD_EQ(inName,"STENCIL_INDEX") ) { return hx::Val( STENCIL_INDEX); }
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL") ) { return hx::Val( DEPTH_STENCIL); }
		if (HX_FIELD_EQ(inName,"activeTexture") ) { return hx::Val( activeTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"blendEquation") ) { return hx::Val( blendEquation_dyn()); }
		if (HX_FIELD_EQ(inName,"bufferSubData") ) { return hx::Val( bufferSubData_dyn()); }
		if (HX_FIELD_EQ(inName,"compileShader") ) { return hx::Val( compileShader_dyn()); }
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteProgram") ) { return hx::Val( deleteProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteTexture") ) { return hx::Val( deleteTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"isContextLost") ) { return hx::Val( isContextLost_dyn()); }
		if (HX_FIELD_EQ(inName,"isFramebuffer") ) { return hx::Val( isFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"polygonOffset") ) { return hx::Val( polygonOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"texParameterf") ) { return hx::Val( texParameterf_dyn()); }
		if (HX_FIELD_EQ(inName,"texParameteri") ) { return hx::Val( texParameteri_dyn()); }
		if (HX_FIELD_EQ(inName,"texSubImage2D") ) { return hx::Val( texSubImage2D_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"TRIANGLE_STRIP") ) { return hx::Val( TRIANGLE_STRIP); }
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION") ) { return hx::Val( BLEND_EQUATION); }
		if (HX_FIELD_EQ(inName,"CONSTANT_COLOR") ) { return hx::Val( CONSTANT_COLOR); }
		if (HX_FIELD_EQ(inName,"CONSTANT_ALPHA") ) { return hx::Val( CONSTANT_ALPHA); }
		if (HX_FIELD_EQ(inName,"FRONT_AND_BACK") ) { return hx::Val( FRONT_AND_BACK); }
		if (HX_FIELD_EQ(inName,"CULL_FACE_MODE") ) { return hx::Val( CULL_FACE_MODE); }
		if (HX_FIELD_EQ(inName,"PACK_ALIGNMENT") ) { return hx::Val( PACK_ALIGNMENT); }
		if (HX_FIELD_EQ(inName,"SAMPLE_BUFFERS") ) { return hx::Val( SAMPLE_BUFFERS); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT") ) { return hx::Val( UNSIGNED_SHORT); }
		if (HX_FIELD_EQ(inName,"TEXTURE_WRAP_S") ) { return hx::Val( TEXTURE_WRAP_S); }
		if (HX_FIELD_EQ(inName,"TEXTURE_WRAP_T") ) { return hx::Val( TEXTURE_WRAP_T); }
		if (HX_FIELD_EQ(inName,"ACTIVE_TEXTURE") ) { return hx::Val( ACTIVE_TEXTURE); }
		if (HX_FIELD_EQ(inName,"COMPILE_STATUS") ) { return hx::Val( COMPILE_STATUS); }
		if (HX_FIELD_EQ(inName,"STENCIL_INDEX8") ) { return hx::Val( STENCIL_INDEX8); }
		if (HX_FIELD_EQ(inName,"copyTexImage2D") ) { return hx::Val( copyTexImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"generateMipmap") ) { return hx::Val( generateMipmap_dyn()); }
		if (HX_FIELD_EQ(inName,"isRenderbuffer") ) { return hx::Val( isRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"sampleCoverage") ) { return hx::Val( sampleCoverage_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib1f") ) { return hx::Val( vertexAttrib1f_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib2f") ) { return hx::Val( vertexAttrib2f_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib3f") ) { return hx::Val( vertexAttrib3f_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib4f") ) { return hx::Val( vertexAttrib4f_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"BLEND_DST_ALPHA") ) { return hx::Val( BLEND_DST_ALPHA); }
		if (HX_FIELD_EQ(inName,"BLEND_SRC_ALPHA") ) { return hx::Val( BLEND_SRC_ALPHA); }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE") ) { return hx::Val( SAMPLE_COVERAGE); }
		if (HX_FIELD_EQ(inName,"DEPTH_WRITEMASK") ) { return hx::Val( DEPTH_WRITEMASK); }
		if (HX_FIELD_EQ(inName,"COLOR_WRITEMASK") ) { return hx::Val( COLOR_WRITEMASK); }
		if (HX_FIELD_EQ(inName,"DEPTH_COMPONENT") ) { return hx::Val( DEPTH_COMPONENT); }
		if (HX_FIELD_EQ(inName,"LUMINANCE_ALPHA") ) { return hx::Val( LUMINANCE_ALPHA); }
		if (HX_FIELD_EQ(inName,"FRAGMENT_SHADER") ) { return hx::Val( FRAGMENT_SHADER); }
		if (HX_FIELD_EQ(inName,"VALIDATE_STATUS") ) { return hx::Val( VALIDATE_STATUS); }
		if (HX_FIELD_EQ(inName,"ACTIVE_UNIFORMS") ) { return hx::Val( ACTIVE_UNIFORMS); }
		if (HX_FIELD_EQ(inName,"CURRENT_PROGRAM") ) { return hx::Val( CURRENT_PROGRAM); }
		if (HX_FIELD_EQ(inName,"MIRRORED_REPEAT") ) { return hx::Val( MIRRORED_REPEAT); }
		if (HX_FIELD_EQ(inName,"bindFramebuffer") ) { return hx::Val( bindFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getActiveAttrib") ) { return hx::Val( getActiveAttrib_dyn()); }
		if (HX_FIELD_EQ(inName,"getShaderSource") ) { return hx::Val( getShaderSource_dyn()); }
		if (HX_FIELD_EQ(inName,"getTexParameter") ) { return hx::Val( getTexParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"getVertexAttrib") ) { return hx::Val( getVertexAttrib_dyn()); }
		if (HX_FIELD_EQ(inName,"validateProgram") ) { return hx::Val( validateProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib1fv") ) { return hx::Val( vertexAttrib1fv_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib2fv") ) { return hx::Val( vertexAttrib2fv_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib3fv") ) { return hx::Val( vertexAttrib3fv_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttrib4fv") ) { return hx::Val( vertexAttrib4fv_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"DEPTH_BUFFER_BIT") ) { return hx::Val( DEPTH_BUFFER_BIT); }
		if (HX_FIELD_EQ(inName,"COLOR_BUFFER_BIT") ) { return hx::Val( COLOR_BUFFER_BIT); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_REF") ) { return hx::Val( STENCIL_BACK_REF); }
		if (HX_FIELD_EQ(inName,"UNPACK_ALIGNMENT") ) { return hx::Val( UNPACK_ALIGNMENT); }
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_SIZE") ) { return hx::Val( MAX_TEXTURE_SIZE); }
		if (HX_FIELD_EQ(inName,"ATTACHED_SHADERS") ) { return hx::Val( ATTACHED_SHADERS); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP") ) { return hx::Val( TEXTURE_CUBE_MAP); }
		if (HX_FIELD_EQ(inName,"DEPTH_ATTACHMENT") ) { return hx::Val( DEPTH_ATTACHMENT); }
		if (HX_FIELD_EQ(inName,"__currentProgram") ) { return hx::Val( _hx___currentProgram); }
		if (HX_FIELD_EQ(inName,"bindRenderbuffer") ) { return hx::Val( bindRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getActiveUniform") ) { return hx::Val( getActiveUniform_dyn()); }
		if (HX_FIELD_EQ(inName,"getShaderInfoLog") ) { return hx::Val( getShaderInfoLog_dyn()); }
		if (HX_FIELD_EQ(inName,"uniformMatrix2fv") ) { return hx::Val( uniformMatrix2fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniformMatrix3fv") ) { return hx::Val( uniformMatrix3fv_dyn()); }
		if (HX_FIELD_EQ(inName,"uniformMatrix4fv") ) { return hx::Val( uniformMatrix4fv_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"INVALID_OPERATION") ) { return hx::Val( INVALID_OPERATION); }
		if (HX_FIELD_EQ(inName,"DEPTH_CLEAR_VALUE") ) { return hx::Val( DEPTH_CLEAR_VALUE); }
		if (HX_FIELD_EQ(inName,"STENCIL_WRITEMASK") ) { return hx::Val( STENCIL_WRITEMASK); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_FUNC") ) { return hx::Val( STENCIL_BACK_FUNC); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_FAIL") ) { return hx::Val( STENCIL_BACK_FAIL); }
		if (HX_FIELD_EQ(inName,"COLOR_CLEAR_VALUE") ) { return hx::Val( COLOR_CLEAR_VALUE); }
		if (HX_FIELD_EQ(inName,"MAX_VIEWPORT_DIMS") ) { return hx::Val( MAX_VIEWPORT_DIMS); }
		if (HX_FIELD_EQ(inName,"ACTIVE_ATTRIBUTES") ) { return hx::Val( ACTIVE_ATTRIBUTES); }
		if (HX_FIELD_EQ(inName,"DEPTH_COMPONENT16") ) { return hx::Val( DEPTH_COMPONENT16); }
		if (HX_FIELD_EQ(inName,"COLOR_ATTACHMENT0") ) { return hx::Val( COLOR_ATTACHMENT0); }
		if (HX_FIELD_EQ(inName,"blendFuncSeparate") ) { return hx::Val( blendFuncSeparate_dyn()); }
		if (HX_FIELD_EQ(inName,"copyTexSubImage2D") ) { return hx::Val( copyTexSubImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"createFramebuffer") ) { return hx::Val( createFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteFramebuffer") ) { return hx::Val( deleteFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getAttribLocation") ) { return hx::Val( getAttribLocation_dyn()); }
		if (HX_FIELD_EQ(inName,"getProgramInfoLog") ) { return hx::Val( getProgramInfoLog_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilOpSeparate") ) { return hx::Val( stencilOpSeparate_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"STENCIL_BUFFER_BIT") ) { return hx::Val( STENCIL_BUFFER_BIT); }
		if (HX_FIELD_EQ(inName,"SRC_ALPHA_SATURATE") ) { return hx::Val( SRC_ALPHA_SATURATE); }
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION_RGB") ) { return hx::Val( BLEND_EQUATION_RGB); }
		if (HX_FIELD_EQ(inName,"STENCIL_VALUE_MASK") ) { return hx::Val( STENCIL_VALUE_MASK); }
		if (HX_FIELD_EQ(inName,"TEXTURE_BINDING_2D") ) { return hx::Val( TEXTURE_BINDING_2D); }
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_ATTRIBS") ) { return hx::Val( MAX_VERTEX_ATTRIBS); }
		if (HX_FIELD_EQ(inName,"TEXTURE_MAG_FILTER") ) { return hx::Val( TEXTURE_MAG_FILTER); }
		if (HX_FIELD_EQ(inName,"TEXTURE_MIN_FILTER") ) { return hx::Val( TEXTURE_MIN_FILTER); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_WIDTH") ) { return hx::Val( RENDERBUFFER_WIDTH); }
		if (HX_FIELD_EQ(inName,"STENCIL_ATTACHMENT") ) { return hx::Val( STENCIL_ATTACHMENT); }
		if (HX_FIELD_EQ(inName,"CONTEXT_LOST_WEBGL") ) { return hx::Val( CONTEXT_LOST_WEBGL); }
		if (HX_FIELD_EQ(inName,"bindAttribLocation") ) { return hx::Val( bindAttribLocation_dyn()); }
		if (HX_FIELD_EQ(inName,"createRenderbuffer") ) { return hx::Val( createRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"deleteRenderbuffer") ) { return hx::Val( deleteRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getAttachedShaders") ) { return hx::Val( getAttachedShaders_dyn()); }
		if (HX_FIELD_EQ(inName,"getBufferParameter") ) { return hx::Val( getBufferParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"getShaderParameter") ) { return hx::Val( getShaderParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"getUniformLocation") ) { return hx::Val( getUniformLocation_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"ONE_MINUS_SRC_COLOR") ) { return hx::Val( ONE_MINUS_SRC_COLOR); }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_SRC_ALPHA") ) { return hx::Val( ONE_MINUS_SRC_ALPHA); }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_DST_ALPHA") ) { return hx::Val( ONE_MINUS_DST_ALPHA); }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_DST_COLOR") ) { return hx::Val( ONE_MINUS_DST_COLOR); }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_FILL") ) { return hx::Val( POLYGON_OFFSET_FILL); }
		if (HX_FIELD_EQ(inName,"STENCIL_CLEAR_VALUE") ) { return hx::Val( STENCIL_CLEAR_VALUE); }
		if (HX_FIELD_EQ(inName,"MAX_VARYING_VECTORS") ) { return hx::Val( MAX_VARYING_VECTORS); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_HEIGHT") ) { return hx::Val( RENDERBUFFER_HEIGHT); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_BINDING") ) { return hx::Val( FRAMEBUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"UNPACK_FLIP_Y_WEBGL") ) { return hx::Val( UNPACK_FLIP_Y_WEBGL); }
		if (HX_FIELD_EQ(inName,"getProgramParameter") ) { return hx::Val( getProgramParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"renderbufferStorage") ) { return hx::Val( renderbufferStorage_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilFuncSeparate") ) { return hx::Val( stencilFuncSeparate_dyn()); }
		if (HX_FIELD_EQ(inName,"stencilMaskSeparate") ) { return hx::Val( stencilMaskSeparate_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexAttribPointer") ) { return hx::Val( vertexAttribPointer_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION_ALPHA") ) { return hx::Val( BLEND_EQUATION_ALPHA); }
		if (HX_FIELD_EQ(inName,"ELEMENT_ARRAY_BUFFER") ) { return hx::Val( ELEMENT_ARRAY_BUFFER); }
		if (HX_FIELD_EQ(inName,"ARRAY_BUFFER_BINDING") ) { return hx::Val( ARRAY_BUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_UNITS") ) { return hx::Val( POLYGON_OFFSET_UNITS); }
		if (HX_FIELD_EQ(inName,"GENERATE_MIPMAP_HINT") ) { return hx::Val( GENERATE_MIPMAP_HINT); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_5_6_5") ) { return hx::Val( UNSIGNED_SHORT_5_6_5); }
		if (HX_FIELD_EQ(inName,"LINEAR_MIPMAP_LINEAR") ) { return hx::Val( LINEAR_MIPMAP_LINEAR); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_COMPLETE") ) { return hx::Val( FRAMEBUFFER_COMPLETE); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_BINDING") ) { return hx::Val( RENDERBUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"compressedTexImage2D") ) { return hx::Val( compressedTexImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"framebufferTexture2D") ) { return hx::Val( framebufferTexture2D_dyn()); }
		if (HX_FIELD_EQ(inName,"getContextAttributes") ) { return hx::Val( getContextAttributes_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"FUNC_REVERSE_SUBTRACT") ) { return hx::Val( FUNC_REVERSE_SUBTRACT); }
		if (HX_FIELD_EQ(inName,"CURRENT_VERTEX_ATTRIB") ) { return hx::Val( CURRENT_VERTEX_ATTRIB); }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_FACTOR") ) { return hx::Val( POLYGON_OFFSET_FACTOR); }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE_VALUE") ) { return hx::Val( SAMPLE_COVERAGE_VALUE); }
		if (HX_FIELD_EQ(inName,"LINEAR_MIPMAP_NEAREST") ) { return hx::Val( LINEAR_MIPMAP_NEAREST); }
		if (HX_FIELD_EQ(inName,"NEAREST_MIPMAP_LINEAR") ) { return hx::Val( NEAREST_MIPMAP_LINEAR); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_RED_SIZE") ) { return hx::Val( RENDERBUFFER_RED_SIZE); }
		if (HX_FIELD_EQ(inName,"MAX_RENDERBUFFER_SIZE") ) { return hx::Val( MAX_RENDERBUFFER_SIZE); }
		if (HX_FIELD_EQ(inName,"BROWSER_DEFAULT_WEBGL") ) { return hx::Val( BROWSER_DEFAULT_WEBGL); }
		if (HX_FIELD_EQ(inName,"blendEquationSeparate") ) { return hx::Val( blendEquationSeparate_dyn()); }
		if (HX_FIELD_EQ(inName,"getVertexAttribOffset") ) { return hx::Val( getVertexAttribOffset_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_WRITEMASK") ) { return hx::Val( STENCIL_BACK_WRITEMASK); }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE_INVERT") ) { return hx::Val( SAMPLE_COVERAGE_INVERT); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_4_4_4_4") ) { return hx::Val( UNSIGNED_SHORT_4_4_4_4); }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_5_5_5_1") ) { return hx::Val( UNSIGNED_SHORT_5_5_5_1); }
		if (HX_FIELD_EQ(inName,"NEAREST_MIPMAP_NEAREST") ) { return hx::Val( NEAREST_MIPMAP_NEAREST); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_BLUE_SIZE") ) { return hx::Val( RENDERBUFFER_BLUE_SIZE); }
		if (HX_FIELD_EQ(inName,"checkFramebufferStatus") ) { return hx::Val( checkFramebufferStatus_dyn()); }
		if (HX_FIELD_EQ(inName,"getSupportedExtensions") ) { return hx::Val( getSupportedExtensions_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"STENCIL_PASS_DEPTH_FAIL") ) { return hx::Val( STENCIL_PASS_DEPTH_FAIL); }
		if (HX_FIELD_EQ(inName,"STENCIL_PASS_DEPTH_PASS") ) { return hx::Val( STENCIL_PASS_DEPTH_PASS); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_VALUE_MASK") ) { return hx::Val( STENCIL_BACK_VALUE_MASK); }
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_IMAGE_UNITS") ) { return hx::Val( MAX_TEXTURE_IMAGE_UNITS); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_GREEN_SIZE") ) { return hx::Val( RENDERBUFFER_GREEN_SIZE); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_ALPHA_SIZE") ) { return hx::Val( RENDERBUFFER_ALPHA_SIZE); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_DEPTH_SIZE") ) { return hx::Val( RENDERBUFFER_DEPTH_SIZE); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_UNSUPPORTED") ) { return hx::Val( FRAMEBUFFER_UNSUPPORTED); }
		if (HX_FIELD_EQ(inName,"compressedTexSubImage2D") ) { return hx::Val( compressedTexSubImage2D_dyn()); }
		if (HX_FIELD_EQ(inName,"enableVertexAttribArray") ) { return hx::Val( enableVertexAttribArray_dyn()); }
		if (HX_FIELD_EQ(inName,"framebufferRenderbuffer") ) { return hx::Val( framebufferRenderbuffer_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"ONE_MINUS_CONSTANT_COLOR") ) { return hx::Val( ONE_MINUS_CONSTANT_COLOR); }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_CONSTANT_ALPHA") ) { return hx::Val( ONE_MINUS_CONSTANT_ALPHA); }
		if (HX_FIELD_EQ(inName,"SAMPLE_ALPHA_TO_COVERAGE") ) { return hx::Val( SAMPLE_ALPHA_TO_COVERAGE); }
		if (HX_FIELD_EQ(inName,"ALIASED_POINT_SIZE_RANGE") ) { return hx::Val( ALIASED_POINT_SIZE_RANGE); }
		if (HX_FIELD_EQ(inName,"ALIASED_LINE_WIDTH_RANGE") ) { return hx::Val( ALIASED_LINE_WIDTH_RANGE); }
		if (HX_FIELD_EQ(inName,"SHADING_LANGUAGE_VERSION") ) { return hx::Val( SHADING_LANGUAGE_VERSION); }
		if (HX_FIELD_EQ(inName,"TEXTURE_BINDING_CUBE_MAP") ) { return hx::Val( TEXTURE_BINDING_CUBE_MAP); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_SIZE") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_SIZE); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_TYPE") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_TYPE); }
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL_ATTACHMENT") ) { return hx::Val( DEPTH_STENCIL_ATTACHMENT); }
		if (HX_FIELD_EQ(inName,"disableVertexAttribArray") ) { return hx::Val( disableVertexAttribArray_dyn()); }
		if (HX_FIELD_EQ(inName,"getRenderbufferParameter") ) { return hx::Val( getRenderbufferParameter_dyn()); }
		if (HX_FIELD_EQ(inName,"getShaderPrecisionFormat") ) { return hx::Val( getShaderPrecisionFormat_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"MAX_CUBE_MAP_TEXTURE_SIZE") ) { return hx::Val( MAX_CUBE_MAP_TEXTURE_SIZE); }
		if (HX_FIELD_EQ(inName,"VERTEX_PROGRAM_POINT_SIZE") ) { return hx::Val( VERTEX_PROGRAM_POINT_SIZE); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_STENCIL_SIZE") ) { return hx::Val( RENDERBUFFER_STENCIL_SIZE); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"COMPRESSED_TEXTURE_FORMATS") ) { return hx::Val( COMPRESSED_TEXTURE_FORMATS); }
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_UNIFORM_VECTORS") ) { return hx::Val( MAX_VERTEX_UNIFORM_VECTORS); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_STRIDE") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_STRIDE); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_X") ) { return hx::Val( TEXTURE_CUBE_MAP_POSITIVE_X); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_X") ) { return hx::Val( TEXTURE_CUBE_MAP_NEGATIVE_X); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_Y") ) { return hx::Val( TEXTURE_CUBE_MAP_POSITIVE_Y); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_Y") ) { return hx::Val( TEXTURE_CUBE_MAP_NEGATIVE_Y); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_Z") ) { return hx::Val( TEXTURE_CUBE_MAP_POSITIVE_Z); }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_Z") ) { return hx::Val( TEXTURE_CUBE_MAP_NEGATIVE_Z); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_ENABLED") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_ENABLED); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_POINTER") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_POINTER); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"ELEMENT_ARRAY_BUFFER_BINDING") ) { return hx::Val( ELEMENT_ARRAY_BUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_PASS_DEPTH_FAIL") ) { return hx::Val( STENCIL_BACK_PASS_DEPTH_FAIL); }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_PASS_DEPTH_PASS") ) { return hx::Val( STENCIL_BACK_PASS_DEPTH_PASS); }
		if (HX_FIELD_EQ(inName,"MAX_FRAGMENT_UNIFORM_VECTORS") ) { return hx::Val( MAX_FRAGMENT_UNIFORM_VECTORS); }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_INTERNAL_FORMAT") ) { return hx::Val( RENDERBUFFER_INTERNAL_FORMAT); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"INVALID_FRAMEBUFFER_OPERATION") ) { return hx::Val( INVALID_FRAMEBUFFER_OPERATION); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_TEXTURE_IMAGE_UNITS") ) { return hx::Val( MAX_VERTEX_TEXTURE_IMAGE_UNITS); }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_NORMALIZED") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_NORMALIZED); }
		if (HX_FIELD_EQ(inName,"UNPACK_PREMULTIPLY_ALPHA_WEBGL") ) { return hx::Val( UNPACK_PREMULTIPLY_ALPHA_WEBGL); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"MAX_COMBINED_TEXTURE_IMAGE_UNITS") ) { return hx::Val( MAX_COMBINED_TEXTURE_IMAGE_UNITS); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT") ) { return hx::Val( FRAMEBUFFER_INCOMPLETE_ATTACHMENT); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS") ) { return hx::Val( FRAMEBUFFER_INCOMPLETE_DIMENSIONS); }
		if (HX_FIELD_EQ(inName,"getFramebufferAttachmentParameter") ) { return hx::Val( getFramebufferAttachmentParameter_dyn()); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING") ) { return hx::Val( VERTEX_ATTRIB_ARRAY_BUFFER_BINDING); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE") ) { return hx::Val( FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE); }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME") ) { return hx::Val( FRAMEBUFFER_ATTACHMENT_OBJECT_NAME); }
		if (HX_FIELD_EQ(inName,"UNPACK_COLORSPACE_CONVERSION_WEBGL") ) { return hx::Val( UNPACK_COLORSPACE_CONVERSION_WEBGL); }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL") ) { return hx::Val( FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL); }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT") ) { return hx::Val( FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT); }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE") ) { return hx::Val( FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NativeGLRenderContext_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"CW") ) { CW=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ONE") ) { ONE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CCW") ) { CCW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INT") ) { INT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGB") ) { RGB=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ZERO") ) { ZERO=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BACK") ) { BACK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BYTE") ) { BYTE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGBA") ) { RGBA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LESS") ) { LESS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"KEEP") ) { KEEP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INCR") ) { INCR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DECR") ) { DECR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL") ) { BOOL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NONE") ) { NONE=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"LINES") ) { LINES=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRONT") ) { FRONT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND") ) { BLEND=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SHORT") ) { SHORT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT") ) { FLOAT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALPHA") ) { ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NEVER") ) { NEVER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"EQUAL") ) { EQUAL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGBA4") ) { RGBA4=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"POINTS") ) { POINTS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DITHER") ) { DITHER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NICEST") ) { NICEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LEQUAL") ) { LEQUAL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GEQUAL") ) { GEQUAL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALWAYS") ) { ALWAYS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INVERT") ) { INVERT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VENDOR") ) { VENDOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINEAR") ) { LINEAR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"REPEAT") ) { REPEAT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGB565") ) { RGB565=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"SAMPLES") ) { SAMPLES=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FASTEST") ) { FASTEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BGR_EXT") ) { BGR_EXT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GREATER") ) { GREATER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"REPLACE") ) { REPLACE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERSION") ) { VERSION=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NEAREST") ) { NEAREST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE") ) { TEXTURE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LOW_INT") ) { LOW_INT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RGB5_A1") ) { RGB5_A1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"FUNC_ADD") ) { FUNC_ADD=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NO_ERROR") ) { NO_ERROR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VIEWPORT") ) { VIEWPORT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RED_BITS") ) { RED_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BGRA_EXT") ) { BGRA_EXT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NOTEQUAL") ) { NOTEQUAL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERER") ) { RENDERER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE0") ) { TEXTURE0=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE1") ) { TEXTURE1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE2") ) { TEXTURE2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE3") ) { TEXTURE3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE4") ) { TEXTURE4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE5") ) { TEXTURE5=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE6") ) { TEXTURE6=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE7") ) { TEXTURE7=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE8") ) { TEXTURE8=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE9") ) { TEXTURE9=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INT_VEC2") ) { INT_VEC2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INT_VEC3") ) { INT_VEC3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INT_VEC4") ) { INT_VEC4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"HIGH_INT") ) { HIGH_INT=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"LINE_LOOP") ) { LINE_LOOP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TRIANGLES") ) { TRIANGLES=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SRC_COLOR") ) { SRC_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SRC_ALPHA") ) { SRC_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DST_ALPHA") ) { DST_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DST_COLOR") ) { DST_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CULL_FACE") ) { CULL_FACE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLUE_BITS") ) { BLUE_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DONT_CARE") ) { DONT_CARE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LUMINANCE") ) { LUMINANCE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INCR_WRAP") ) { INCR_WRAP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DECR_WRAP") ) { DECR_WRAP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE10") ) { TEXTURE10=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE11") ) { TEXTURE11=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE12") ) { TEXTURE12=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE13") ) { TEXTURE13=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE14") ) { TEXTURE14=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE15") ) { TEXTURE15=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE16") ) { TEXTURE16=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE17") ) { TEXTURE17=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE18") ) { TEXTURE18=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE19") ) { TEXTURE19=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE20") ) { TEXTURE20=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE21") ) { TEXTURE21=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE22") ) { TEXTURE22=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE23") ) { TEXTURE23=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE24") ) { TEXTURE24=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE25") ) { TEXTURE25=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE26") ) { TEXTURE26=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE27") ) { TEXTURE27=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE28") ) { TEXTURE28=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE29") ) { TEXTURE29=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE30") ) { TEXTURE30=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE31") ) { TEXTURE31=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL_VEC2") ) { BOOL_VEC2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL_VEC3") ) { BOOL_VEC3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BOOL_VEC4") ) { BOOL_VEC4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LOW_FLOAT") ) { LOW_FLOAT=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"LINE_STRIP") ) { LINE_STRIP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_TEST") ) { DEPTH_TEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINE_WIDTH") ) { LINE_WIDTH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRONT_FACE") ) { FRONT_FACE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_FUNC") ) { DEPTH_FUNC=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GREEN_BITS") ) { GREEN_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALPHA_BITS") ) { ALPHA_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_BITS") ) { DEPTH_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_2D") ) { TEXTURE_2D=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC2") ) { FLOAT_VEC2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC3") ) { FLOAT_VEC3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_VEC4") ) { FLOAT_VEC4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT2") ) { FLOAT_MAT2=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT3") ) { FLOAT_MAT3=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FLOAT_MAT4") ) { FLOAT_MAT4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLER_2D") ) { SAMPLER_2D=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"HIGH_FLOAT") ) { HIGH_FLOAT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MEDIUM_INT") ) { MEDIUM_INT=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BLEND_COLOR") ) { BLEND_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STREAM_DRAW") ) { STREAM_DRAW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STATIC_DRAW") ) { STATIC_DRAW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BUFFER_SIZE") ) { BUFFER_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_RANGE") ) { DEPTH_RANGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_REF") ) { STENCIL_REF=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SCISSOR_BOX") ) { SCISSOR_BOX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SHADER_TYPE") ) { SHADER_TYPE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINK_STATUS") ) { LINK_STATUS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER") ) { FRAMEBUFFER=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"TRIANGLE_FAN") ) { TRIANGLE_FAN=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ARRAY_BUFFER") ) { ARRAY_BUFFER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DYNAMIC_DRAW") ) { DYNAMIC_DRAW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BUFFER_USAGE") ) { BUFFER_USAGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_TEST") ) { STENCIL_TEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SCISSOR_TEST") ) { SCISSOR_TEST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INVALID_ENUM") ) { INVALID_ENUM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_FUNC") ) { STENCIL_FUNC=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_FAIL") ) { STENCIL_FAIL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BITS") ) { STENCIL_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_INT") ) { UNSIGNED_INT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLER_CUBE") ) { SAMPLER_CUBE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"POINT_SPRITE") ) { POINT_SPRITE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MEDIUM_FLOAT") ) { MEDIUM_FLOAT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER") ) { RENDERBUFFER=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"FUNC_SUBTRACT") ) { FUNC_SUBTRACT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_DST_RGB") ) { BLEND_DST_RGB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_SRC_RGB") ) { BLEND_SRC_RGB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"INVALID_VALUE") ) { INVALID_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"OUT_OF_MEMORY") ) { OUT_OF_MEMORY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SUBPIXEL_BITS") ) { SUBPIXEL_BITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_BYTE") ) { UNSIGNED_BYTE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_SHADER") ) { VERTEX_SHADER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DELETE_STATUS") ) { DELETE_STATUS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CLAMP_TO_EDGE") ) { CLAMP_TO_EDGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_INDEX") ) { STENCIL_INDEX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL") ) { DEPTH_STENCIL=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"TRIANGLE_STRIP") ) { TRIANGLE_STRIP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION") ) { BLEND_EQUATION=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONSTANT_COLOR") ) { CONSTANT_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONSTANT_ALPHA") ) { CONSTANT_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRONT_AND_BACK") ) { FRONT_AND_BACK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CULL_FACE_MODE") ) { CULL_FACE_MODE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"PACK_ALIGNMENT") ) { PACK_ALIGNMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_BUFFERS") ) { SAMPLE_BUFFERS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT") ) { UNSIGNED_SHORT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_WRAP_S") ) { TEXTURE_WRAP_S=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_WRAP_T") ) { TEXTURE_WRAP_T=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ACTIVE_TEXTURE") ) { ACTIVE_TEXTURE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COMPILE_STATUS") ) { COMPILE_STATUS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_INDEX8") ) { STENCIL_INDEX8=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"BLEND_DST_ALPHA") ) { BLEND_DST_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_SRC_ALPHA") ) { BLEND_SRC_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE") ) { SAMPLE_COVERAGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_WRITEMASK") ) { DEPTH_WRITEMASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLOR_WRITEMASK") ) { COLOR_WRITEMASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_COMPONENT") ) { DEPTH_COMPONENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LUMINANCE_ALPHA") ) { LUMINANCE_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAGMENT_SHADER") ) { FRAGMENT_SHADER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VALIDATE_STATUS") ) { VALIDATE_STATUS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ACTIVE_UNIFORMS") ) { ACTIVE_UNIFORMS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CURRENT_PROGRAM") ) { CURRENT_PROGRAM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MIRRORED_REPEAT") ) { MIRRORED_REPEAT=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"DEPTH_BUFFER_BIT") ) { DEPTH_BUFFER_BIT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLOR_BUFFER_BIT") ) { COLOR_BUFFER_BIT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_REF") ) { STENCIL_BACK_REF=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNPACK_ALIGNMENT") ) { UNPACK_ALIGNMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_SIZE") ) { MAX_TEXTURE_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ATTACHED_SHADERS") ) { ATTACHED_SHADERS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP") ) { TEXTURE_CUBE_MAP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_ATTACHMENT") ) { DEPTH_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__currentProgram") ) { _hx___currentProgram=inValue.Cast<  ::lime::graphics::opengl::GLProgram >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"INVALID_OPERATION") ) { INVALID_OPERATION=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_CLEAR_VALUE") ) { DEPTH_CLEAR_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_WRITEMASK") ) { STENCIL_WRITEMASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_FUNC") ) { STENCIL_BACK_FUNC=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_FAIL") ) { STENCIL_BACK_FAIL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLOR_CLEAR_VALUE") ) { COLOR_CLEAR_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_VIEWPORT_DIMS") ) { MAX_VIEWPORT_DIMS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ACTIVE_ATTRIBUTES") ) { ACTIVE_ATTRIBUTES=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_COMPONENT16") ) { DEPTH_COMPONENT16=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"COLOR_ATTACHMENT0") ) { COLOR_ATTACHMENT0=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"STENCIL_BUFFER_BIT") ) { STENCIL_BUFFER_BIT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SRC_ALPHA_SATURATE") ) { SRC_ALPHA_SATURATE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION_RGB") ) { BLEND_EQUATION_RGB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_VALUE_MASK") ) { STENCIL_VALUE_MASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_BINDING_2D") ) { TEXTURE_BINDING_2D=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_ATTRIBS") ) { MAX_VERTEX_ATTRIBS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_MAG_FILTER") ) { TEXTURE_MAG_FILTER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_MIN_FILTER") ) { TEXTURE_MIN_FILTER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_WIDTH") ) { RENDERBUFFER_WIDTH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_ATTACHMENT") ) { STENCIL_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTEXT_LOST_WEBGL") ) { CONTEXT_LOST_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"ONE_MINUS_SRC_COLOR") ) { ONE_MINUS_SRC_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_SRC_ALPHA") ) { ONE_MINUS_SRC_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_DST_ALPHA") ) { ONE_MINUS_DST_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_DST_COLOR") ) { ONE_MINUS_DST_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_FILL") ) { POLYGON_OFFSET_FILL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_CLEAR_VALUE") ) { STENCIL_CLEAR_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_VARYING_VECTORS") ) { MAX_VARYING_VECTORS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_HEIGHT") ) { RENDERBUFFER_HEIGHT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_BINDING") ) { FRAMEBUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNPACK_FLIP_Y_WEBGL") ) { UNPACK_FLIP_Y_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"BLEND_EQUATION_ALPHA") ) { BLEND_EQUATION_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ELEMENT_ARRAY_BUFFER") ) { ELEMENT_ARRAY_BUFFER=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ARRAY_BUFFER_BINDING") ) { ARRAY_BUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_UNITS") ) { POLYGON_OFFSET_UNITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GENERATE_MIPMAP_HINT") ) { GENERATE_MIPMAP_HINT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_5_6_5") ) { UNSIGNED_SHORT_5_6_5=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINEAR_MIPMAP_LINEAR") ) { LINEAR_MIPMAP_LINEAR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_COMPLETE") ) { FRAMEBUFFER_COMPLETE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_BINDING") ) { RENDERBUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"FUNC_REVERSE_SUBTRACT") ) { FUNC_REVERSE_SUBTRACT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CURRENT_VERTEX_ATTRIB") ) { CURRENT_VERTEX_ATTRIB=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"POLYGON_OFFSET_FACTOR") ) { POLYGON_OFFSET_FACTOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE_VALUE") ) { SAMPLE_COVERAGE_VALUE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"LINEAR_MIPMAP_NEAREST") ) { LINEAR_MIPMAP_NEAREST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NEAREST_MIPMAP_LINEAR") ) { NEAREST_MIPMAP_LINEAR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_RED_SIZE") ) { RENDERBUFFER_RED_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_RENDERBUFFER_SIZE") ) { MAX_RENDERBUFFER_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"BROWSER_DEFAULT_WEBGL") ) { BROWSER_DEFAULT_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_WRITEMASK") ) { STENCIL_BACK_WRITEMASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_COVERAGE_INVERT") ) { SAMPLE_COVERAGE_INVERT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_4_4_4_4") ) { UNSIGNED_SHORT_4_4_4_4=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNSIGNED_SHORT_5_5_5_1") ) { UNSIGNED_SHORT_5_5_5_1=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"NEAREST_MIPMAP_NEAREST") ) { NEAREST_MIPMAP_NEAREST=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_BLUE_SIZE") ) { RENDERBUFFER_BLUE_SIZE=inValue.Cast< int >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"STENCIL_PASS_DEPTH_FAIL") ) { STENCIL_PASS_DEPTH_FAIL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_PASS_DEPTH_PASS") ) { STENCIL_PASS_DEPTH_PASS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_VALUE_MASK") ) { STENCIL_BACK_VALUE_MASK=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_TEXTURE_IMAGE_UNITS") ) { MAX_TEXTURE_IMAGE_UNITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_GREEN_SIZE") ) { RENDERBUFFER_GREEN_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_ALPHA_SIZE") ) { RENDERBUFFER_ALPHA_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_DEPTH_SIZE") ) { RENDERBUFFER_DEPTH_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_UNSUPPORTED") ) { FRAMEBUFFER_UNSUPPORTED=inValue.Cast< int >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"ONE_MINUS_CONSTANT_COLOR") ) { ONE_MINUS_CONSTANT_COLOR=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ONE_MINUS_CONSTANT_ALPHA") ) { ONE_MINUS_CONSTANT_ALPHA=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SAMPLE_ALPHA_TO_COVERAGE") ) { SAMPLE_ALPHA_TO_COVERAGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALIASED_POINT_SIZE_RANGE") ) { ALIASED_POINT_SIZE_RANGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ALIASED_LINE_WIDTH_RANGE") ) { ALIASED_LINE_WIDTH_RANGE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"SHADING_LANGUAGE_VERSION") ) { SHADING_LANGUAGE_VERSION=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_BINDING_CUBE_MAP") ) { TEXTURE_BINDING_CUBE_MAP=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_SIZE") ) { VERTEX_ATTRIB_ARRAY_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_TYPE") ) { VERTEX_ATTRIB_ARRAY_TYPE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"DEPTH_STENCIL_ATTACHMENT") ) { DEPTH_STENCIL_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"MAX_CUBE_MAP_TEXTURE_SIZE") ) { MAX_CUBE_MAP_TEXTURE_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_PROGRAM_POINT_SIZE") ) { VERTEX_PROGRAM_POINT_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_STENCIL_SIZE") ) { RENDERBUFFER_STENCIL_SIZE=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"COMPRESSED_TEXTURE_FORMATS") ) { COMPRESSED_TEXTURE_FORMATS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_UNIFORM_VECTORS") ) { MAX_VERTEX_UNIFORM_VECTORS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_STRIDE") ) { VERTEX_ATTRIB_ARRAY_STRIDE=inValue.Cast< int >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_X") ) { TEXTURE_CUBE_MAP_POSITIVE_X=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_X") ) { TEXTURE_CUBE_MAP_NEGATIVE_X=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_Y") ) { TEXTURE_CUBE_MAP_POSITIVE_Y=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_Y") ) { TEXTURE_CUBE_MAP_NEGATIVE_Y=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_POSITIVE_Z") ) { TEXTURE_CUBE_MAP_POSITIVE_Z=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"TEXTURE_CUBE_MAP_NEGATIVE_Z") ) { TEXTURE_CUBE_MAP_NEGATIVE_Z=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_ENABLED") ) { VERTEX_ATTRIB_ARRAY_ENABLED=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_POINTER") ) { VERTEX_ATTRIB_ARRAY_POINTER=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"ELEMENT_ARRAY_BUFFER_BINDING") ) { ELEMENT_ARRAY_BUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_PASS_DEPTH_FAIL") ) { STENCIL_BACK_PASS_DEPTH_FAIL=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"STENCIL_BACK_PASS_DEPTH_PASS") ) { STENCIL_BACK_PASS_DEPTH_PASS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"MAX_FRAGMENT_UNIFORM_VECTORS") ) { MAX_FRAGMENT_UNIFORM_VECTORS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"RENDERBUFFER_INTERNAL_FORMAT") ) { RENDERBUFFER_INTERNAL_FORMAT=inValue.Cast< int >(); return inValue; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"INVALID_FRAMEBUFFER_OPERATION") ) { INVALID_FRAMEBUFFER_OPERATION=inValue.Cast< int >(); return inValue; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"MAX_VERTEX_TEXTURE_IMAGE_UNITS") ) { MAX_VERTEX_TEXTURE_IMAGE_UNITS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_NORMALIZED") ) { VERTEX_ATTRIB_ARRAY_NORMALIZED=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNPACK_PREMULTIPLY_ALPHA_WEBGL") ) { UNPACK_PREMULTIPLY_ALPHA_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"MAX_COMBINED_TEXTURE_IMAGE_UNITS") ) { MAX_COMBINED_TEXTURE_IMAGE_UNITS=inValue.Cast< int >(); return inValue; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT") ) { FRAMEBUFFER_INCOMPLETE_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS") ) { FRAMEBUFFER_INCOMPLETE_DIMENSIONS=inValue.Cast< int >(); return inValue; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING") ) { VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE") ) { FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME") ) { FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"UNPACK_COLORSPACE_CONVERSION_WEBGL") ) { UNPACK_COLORSPACE_CONVERSION_WEBGL=inValue.Cast< int >(); return inValue; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL") ) { FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=inValue.Cast< int >(); return inValue; }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT") ) { FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=inValue.Cast< int >(); return inValue; }
		break;
	case 44:
		if (HX_FIELD_EQ(inName,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE") ) { FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeGLRenderContext_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("DEPTH_BUFFER_BIT","\xca","\x5b","\xce","\xc6"));
	outFields->push(HX_HCSTRING("STENCIL_BUFFER_BIT","\x71","\x93","\x29","\xde"));
	outFields->push(HX_HCSTRING("COLOR_BUFFER_BIT","\x6a","\xf7","\x74","\xfb"));
	outFields->push(HX_HCSTRING("POINTS","\x23","\xbe","\xb0","\xa9"));
	outFields->push(HX_HCSTRING("LINES","\xdf","\x15","\xf0","\xf2"));
	outFields->push(HX_HCSTRING("LINE_LOOP","\xcf","\x55","\xc1","\x16"));
	outFields->push(HX_HCSTRING("LINE_STRIP","\xed","\x20","\x88","\xdd"));
	outFields->push(HX_HCSTRING("TRIANGLES","\x8b","\xa0","\x99","\x7a"));
	outFields->push(HX_HCSTRING("TRIANGLE_STRIP","\xc1","\x66","\x6c","\xf6"));
	outFields->push(HX_HCSTRING("TRIANGLE_FAN","\x7c","\xee","\x2e","\x91"));
	outFields->push(HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b"));
	outFields->push(HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00"));
	outFields->push(HX_HCSTRING("SRC_COLOR","\x48","\x9e","\xbd","\x5c"));
	outFields->push(HX_HCSTRING("ONE_MINUS_SRC_COLOR","\x20","\x3b","\xe1","\x48"));
	outFields->push(HX_HCSTRING("SRC_ALPHA","\x43","\xd4","\xf7","\x33"));
	outFields->push(HX_HCSTRING("ONE_MINUS_SRC_ALPHA","\x1b","\x71","\x1b","\x20"));
	outFields->push(HX_HCSTRING("DST_ALPHA","\x24","\x02","\xf2","\xd3"));
	outFields->push(HX_HCSTRING("ONE_MINUS_DST_ALPHA","\xfc","\x9e","\x15","\xc0"));
	outFields->push(HX_HCSTRING("DST_COLOR","\x29","\xcc","\xb7","\xfc"));
	outFields->push(HX_HCSTRING("ONE_MINUS_DST_COLOR","\x01","\x69","\xdb","\xe8"));
	outFields->push(HX_HCSTRING("SRC_ALPHA_SATURATE","\xab","\xe2","\x3d","\x33"));
	outFields->push(HX_HCSTRING("FUNC_ADD","\x46","\x78","\x17","\x75"));
	outFields->push(HX_HCSTRING("BLEND_EQUATION","\x9a","\x14","\x92","\x71"));
	outFields->push(HX_HCSTRING("BLEND_EQUATION_RGB","\x88","\x25","\xeb","\x90"));
	outFields->push(HX_HCSTRING("BLEND_EQUATION_ALPHA","\x99","\xaa","\xae","\x37"));
	outFields->push(HX_HCSTRING("FUNC_SUBTRACT","\xaf","\xc0","\xa0","\x17"));
	outFields->push(HX_HCSTRING("FUNC_REVERSE_SUBTRACT","\xcc","\x8d","\xef","\xf3"));
	outFields->push(HX_HCSTRING("BLEND_DST_RGB","\x05","\x87","\xf5","\xec"));
	outFields->push(HX_HCSTRING("BLEND_SRC_RGB","\x64","\x43","\x8c","\x2c"));
	outFields->push(HX_HCSTRING("BLEND_DST_ALPHA","\x56","\x25","\x32","\x74"));
	outFields->push(HX_HCSTRING("BLEND_SRC_ALPHA","\x75","\xf7","\x37","\xd4"));
	outFields->push(HX_HCSTRING("CONSTANT_COLOR","\xe8","\x64","\x8a","\xc8"));
	outFields->push(HX_HCSTRING("ONE_MINUS_CONSTANT_COLOR","\x10","\x39","\xe7","\x06"));
	outFields->push(HX_HCSTRING("CONSTANT_ALPHA","\xe3","\x9a","\xc4","\x9f"));
	outFields->push(HX_HCSTRING("ONE_MINUS_CONSTANT_ALPHA","\x0b","\x6f","\x21","\xde"));
	outFields->push(HX_HCSTRING("BLEND_COLOR","\x75","\xcb","\xc8","\x67"));
	outFields->push(HX_HCSTRING("ARRAY_BUFFER","\x46","\x66","\x17","\xf4"));
	outFields->push(HX_HCSTRING("ELEMENT_ARRAY_BUFFER","\x09","\x05","\x53","\x3d"));
	outFields->push(HX_HCSTRING("ARRAY_BUFFER_BINDING","\xec","\xd4","\xa9","\x79"));
	outFields->push(HX_HCSTRING("ELEMENT_ARRAY_BUFFER_BINDING","\xaf","\x6e","\x96","\xa2"));
	outFields->push(HX_HCSTRING("STREAM_DRAW","\x63","\x7f","\x28","\x15"));
	outFields->push(HX_HCSTRING("STATIC_DRAW","\x75","\x50","\x2f","\xba"));
	outFields->push(HX_HCSTRING("DYNAMIC_DRAW","\x24","\x04","\x1f","\x24"));
	outFields->push(HX_HCSTRING("BUFFER_SIZE","\xa0","\x7b","\x91","\x4c"));
	outFields->push(HX_HCSTRING("BUFFER_USAGE","\x42","\x05","\x11","\xe0"));
	outFields->push(HX_HCSTRING("CURRENT_VERTEX_ATTRIB","\x1f","\x8c","\x2f","\xab"));
	outFields->push(HX_HCSTRING("FRONT","\x89","\x50","\x7c","\x84"));
	outFields->push(HX_HCSTRING("BACK","\x27","\xa2","\xd1","\x2b"));
	outFields->push(HX_HCSTRING("FRONT_AND_BACK","\xa5","\x3d","\x6a","\xc1"));
	outFields->push(HX_HCSTRING("CULL_FACE","\x8a","\xa5","\xf4","\xcf"));
	outFields->push(HX_HCSTRING("BLEND","\x31","\x20","\xe3","\x32"));
	outFields->push(HX_HCSTRING("DITHER","\xe6","\xac","\x41","\x70"));
	outFields->push(HX_HCSTRING("STENCIL_TEST","\xd5","\xdc","\x69","\xd5"));
	outFields->push(HX_HCSTRING("DEPTH_TEST","\x6e","\x6c","\x25","\x28"));
	outFields->push(HX_HCSTRING("SCISSOR_TEST","\xb5","\xbe","\x51","\x59"));
	outFields->push(HX_HCSTRING("POLYGON_OFFSET_FILL","\x4a","\x3d","\x32","\xac"));
	outFields->push(HX_HCSTRING("SAMPLE_ALPHA_TO_COVERAGE","\x16","\x3e","\x56","\xe1"));
	outFields->push(HX_HCSTRING("SAMPLE_COVERAGE","\xdd","\xb7","\x0e","\xc1"));
	outFields->push(HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f"));
	outFields->push(HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13"));
	outFields->push(HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0"));
	outFields->push(HX_HCSTRING("INVALID_OPERATION","\x5f","\xb1","\xc8","\x29"));
	outFields->push(HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1"));
	outFields->push(HX_HCSTRING("CW","\xb4","\x3a","\x00","\x00"));
	outFields->push(HX_HCSTRING("CCW","\xb7","\x11","\x33","\x00"));
	outFields->push(HX_HCSTRING("LINE_WIDTH","\x1b","\x84","\xd2","\x23"));
	outFields->push(HX_HCSTRING("ALIASED_POINT_SIZE_RANGE","\xfe","\xf6","\xa4","\x7b"));
	outFields->push(HX_HCSTRING("ALIASED_LINE_WIDTH_RANGE","\xe9","\x22","\xd5","\x8a"));
	outFields->push(HX_HCSTRING("CULL_FACE_MODE","\x78","\xbd","\x87","\xd1"));
	outFields->push(HX_HCSTRING("FRONT_FACE","\x53","\xb7","\x4d","\xef"));
	outFields->push(HX_HCSTRING("DEPTH_RANGE","\x01","\x9a","\x23","\xcf"));
	outFields->push(HX_HCSTRING("DEPTH_WRITEMASK","\x8f","\x37","\x3f","\x66"));
	outFields->push(HX_HCSTRING("DEPTH_CLEAR_VALUE","\x23","\x17","\x0d","\x1b"));
	outFields->push(HX_HCSTRING("DEPTH_FUNC","\x60","\x8f","\xf0","\x1e"));
	outFields->push(HX_HCSTRING("STENCIL_CLEAR_VALUE","\x9c","\x91","\x82","\x73"));
	outFields->push(HX_HCSTRING("STENCIL_FUNC","\xc7","\xff","\x34","\xcc"));
	outFields->push(HX_HCSTRING("STENCIL_FAIL","\x61","\xce","\x25","\xcc"));
	outFields->push(HX_HCSTRING("STENCIL_PASS_DEPTH_FAIL","\x45","\xca","\xb9","\xc8"));
	outFields->push(HX_HCSTRING("STENCIL_PASS_DEPTH_PASS","\x38","\xf5","\x55","\xcf"));
	outFields->push(HX_HCSTRING("STENCIL_REF","\x10","\x6a","\xa5","\x3c"));
	outFields->push(HX_HCSTRING("STENCIL_VALUE_MASK","\x9d","\x58","\x5e","\xa0"));
	outFields->push(HX_HCSTRING("STENCIL_WRITEMASK","\xc8","\xf1","\xa6","\x49"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_FUNC","\x39","\x78","\xa2","\x90"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_FAIL","\xd3","\x46","\x93","\x90"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_FAIL","\x13","\x23","\x0e","\x34"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_PASS","\x06","\x4e","\xaa","\x3a"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_REF","\xde","\x45","\xb8","\x08"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_VALUE_MASK","\x8f","\xb2","\xc4","\x88"));
	outFields->push(HX_HCSTRING("STENCIL_BACK_WRITEMASK","\x16","\x9c","\x15","\xc2"));
	outFields->push(HX_HCSTRING("VIEWPORT","\x66","\xdc","\x2a","\xf6"));
	outFields->push(HX_HCSTRING("SCISSOR_BOX","\xe8","\x48","\x4c","\x55"));
	outFields->push(HX_HCSTRING("COLOR_CLEAR_VALUE","\x83","\xa7","\x2e","\xf8"));
	outFields->push(HX_HCSTRING("COLOR_WRITEMASK","\xef","\xef","\xf9","\x14"));
	outFields->push(HX_HCSTRING("UNPACK_ALIGNMENT","\xb6","\x2a","\x2e","\x4b"));
	outFields->push(HX_HCSTRING("PACK_ALIGNMENT","\x9d","\xd6","\x85","\xc3"));
	outFields->push(HX_HCSTRING("MAX_TEXTURE_SIZE","\xe0","\x0b","\x5b","\xfb"));
	outFields->push(HX_HCSTRING("MAX_VIEWPORT_DIMS","\xa9","\x2d","\xfb","\x08"));
	outFields->push(HX_HCSTRING("SUBPIXEL_BITS","\x1f","\xac","\x14","\x0a"));
	outFields->push(HX_HCSTRING("RED_BITS","\x14","\xf8","\x9e","\x96"));
	outFields->push(HX_HCSTRING("GREEN_BITS","\x62","\xa9","\x9b","\x94"));
	outFields->push(HX_HCSTRING("BLUE_BITS","\x0b","\x26","\x60","\xa1"));
	outFields->push(HX_HCSTRING("ALPHA_BITS","\xe7","\xfe","\x7b","\xe0"));
	outFields->push(HX_HCSTRING("DEPTH_BITS","\x22","\x9f","\x42","\x1c"));
	outFields->push(HX_HCSTRING("STENCIL_BITS","\x89","\x0f","\x87","\xc9"));
	outFields->push(HX_HCSTRING("POLYGON_OFFSET_UNITS","\xa8","\xe8","\x11","\xa6"));
	outFields->push(HX_HCSTRING("POLYGON_OFFSET_FACTOR","\x56","\x6b","\x12","\x2a"));
	outFields->push(HX_HCSTRING("TEXTURE_BINDING_2D","\x30","\xec","\x98","\xb1"));
	outFields->push(HX_HCSTRING("SAMPLE_BUFFERS","\xfe","\x16","\x71","\x3c"));
	outFields->push(HX_HCSTRING("SAMPLES","\xe9","\x98","\x9d","\x03"));
	outFields->push(HX_HCSTRING("SAMPLE_COVERAGE_VALUE","\x2f","\x7a","\x07","\x69"));
	outFields->push(HX_HCSTRING("SAMPLE_COVERAGE_INVERT","\x78","\x52","\xa5","\xcd"));
	outFields->push(HX_HCSTRING("COMPRESSED_TEXTURE_FORMATS","\x7a","\x13","\xe3","\x12"));
	outFields->push(HX_HCSTRING("DONT_CARE","\x7f","\x9b","\xc1","\xcf"));
	outFields->push(HX_HCSTRING("FASTEST","\x0a","\xa3","\x0d","\x5e"));
	outFields->push(HX_HCSTRING("NICEST","\x7e","\x6d","\x94","\x64"));
	outFields->push(HX_HCSTRING("GENERATE_MIPMAP_HINT","\x94","\xd3","\xd5","\x83"));
	outFields->push(HX_HCSTRING("BYTE","\x08","\xe7","\xe3","\x2b"));
	outFields->push(HX_HCSTRING("UNSIGNED_BYTE","\xd2","\x79","\x6b","\x01"));
	outFields->push(HX_HCSTRING("SHORT","\x5c","\xbc","\x15","\xfa"));
	outFields->push(HX_HCSTRING("UNSIGNED_SHORT","\x52","\x9a","\x2e","\xfb"));
	outFields->push(HX_HCSTRING("INT","\xcf","\xa8","\x37","\x00"));
	outFields->push(HX_HCSTRING("UNSIGNED_INT","\x45","\xfd","\xb9","\x1c"));
	outFields->push(HX_HCSTRING("FLOAT","\x7c","\xfd","\x84","\x80"));
	outFields->push(HX_HCSTRING("DEPTH_COMPONENT","\x01","\x1f","\x62","\x0f"));
	outFields->push(HX_HCSTRING("ALPHA","\x3e","\xdf","\x84","\x9f"));
	outFields->push(HX_HCSTRING("RGB","\xed","\x76","\x3e","\x00"));
	outFields->push(HX_HCSTRING("RGBA","\xb4","\x98","\x69","\x36"));
	outFields->push(HX_HCSTRING("BGR_EXT","\xef","\xba","\xba","\x91"));
	outFields->push(HX_HCSTRING("BGRA_EXT","\x36","\x94","\xc4","\xbc"));
	outFields->push(HX_HCSTRING("LUMINANCE","\xd8","\xa7","\xe0","\x63"));
	outFields->push(HX_HCSTRING("LUMINANCE_ALPHA","\x57","\x40","\xe0","\xbd"));
	outFields->push(HX_HCSTRING("UNSIGNED_SHORT_4_4_4_4","\xa6","\x33","\x71","\x7b"));
	outFields->push(HX_HCSTRING("UNSIGNED_SHORT_5_5_5_1","\x26","\x01","\x6e","\x38"));
	outFields->push(HX_HCSTRING("UNSIGNED_SHORT_5_6_5","\x75","\xbb","\x16","\x8c"));
	outFields->push(HX_HCSTRING("FRAGMENT_SHADER","\xf4","\x26","\x78","\xe9"));
	outFields->push(HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49"));
	outFields->push(HX_HCSTRING("MAX_VERTEX_ATTRIBS","\x49","\xc9","\x15","\x5f"));
	outFields->push(HX_HCSTRING("MAX_VERTEX_UNIFORM_VECTORS","\x45","\x6c","\x16","\x5a"));
	outFields->push(HX_HCSTRING("MAX_VARYING_VECTORS","\x06","\xb9","\xf7","\x37"));
	outFields->push(HX_HCSTRING("MAX_COMBINED_TEXTURE_IMAGE_UNITS","\xa8","\xd1","\xa6","\x77"));
	outFields->push(HX_HCSTRING("MAX_VERTEX_TEXTURE_IMAGE_UNITS","\xc7","\x90","\x95","\x2b"));
	outFields->push(HX_HCSTRING("MAX_TEXTURE_IMAGE_UNITS","\xcc","\x6c","\x61","\x54"));
	outFields->push(HX_HCSTRING("MAX_FRAGMENT_UNIFORM_VECTORS","\x71","\x49","\xf5","\x0a"));
	outFields->push(HX_HCSTRING("SHADER_TYPE","\x54","\xe5","\x27","\x87"));
	outFields->push(HX_HCSTRING("DELETE_STATUS","\x06","\xe4","\x98","\x1e"));
	outFields->push(HX_HCSTRING("LINK_STATUS","\x17","\x18","\x8f","\x45"));
	outFields->push(HX_HCSTRING("VALIDATE_STATUS","\xfb","\x22","\x07","\xc6"));
	outFields->push(HX_HCSTRING("ATTACHED_SHADERS","\x73","\xd2","\x76","\x75"));
	outFields->push(HX_HCSTRING("ACTIVE_UNIFORMS","\x98","\x7d","\x3a","\x2c"));
	outFields->push(HX_HCSTRING("ACTIVE_ATTRIBUTES","\xf0","\xe5","\xc7","\x4a"));
	outFields->push(HX_HCSTRING("SHADING_LANGUAGE_VERSION","\xe6","\xc4","\xef","\x70"));
	outFields->push(HX_HCSTRING("CURRENT_PROGRAM","\xfe","\x28","\xc0","\x3f"));
	outFields->push(HX_HCSTRING("NEVER","\x6c","\x76","\x1e","\x17"));
	outFields->push(HX_HCSTRING("LESS","\x59","\xdb","\x70","\x32"));
	outFields->push(HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0"));
	outFields->push(HX_HCSTRING("LEQUAL","\xc8","\x73","\x90","\x53"));
	outFields->push(HX_HCSTRING("GREATER","\xda","\x64","\x94","\x37"));
	outFields->push(HX_HCSTRING("NOTEQUAL","\xc1","\xc1","\xe9","\xc8"));
	outFields->push(HX_HCSTRING("GEQUAL","\xed","\xa5","\xc7","\x53"));
	outFields->push(HX_HCSTRING("ALWAYS","\xcf","\xba","\x59","\xf9"));
	outFields->push(HX_HCSTRING("KEEP","\x85","\x98","\xc7","\x31"));
	outFields->push(HX_HCSTRING("REPLACE","\x14","\x1c","\xfc","\x2a"));
	outFields->push(HX_HCSTRING("INCR","\xd4","\xfd","\x7b","\x30"));
	outFields->push(HX_HCSTRING("DECR","\x70","\x18","\x27","\x2d"));
	outFields->push(HX_HCSTRING("INVERT","\x16","\x93","\x5b","\x52"));
	outFields->push(HX_HCSTRING("INCR_WRAP","\x55","\x7f","\x68","\x2c"));
	outFields->push(HX_HCSTRING("DECR_WRAP","\x39","\x6f","\xeb","\x0a"));
	outFields->push(HX_HCSTRING("VENDOR","\x88","\x91","\x19","\x51"));
	outFields->push(HX_HCSTRING("RENDERER","\x43","\x55","\x61","\x0c"));
	outFields->push(HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"));
	outFields->push(HX_HCSTRING("NEAREST","\x3e","\xec","\x9d","\xe5"));
	outFields->push(HX_HCSTRING("LINEAR","\xe5","\xfd","\x22","\x9f"));
	outFields->push(HX_HCSTRING("NEAREST_MIPMAP_NEAREST","\x68","\xb9","\x63","\x7e"));
	outFields->push(HX_HCSTRING("LINEAR_MIPMAP_NEAREST","\xa1","\x9b","\xa4","\x65"));
	outFields->push(HX_HCSTRING("NEAREST_MIPMAP_LINEAR","\xfb","\x83","\xf2","\x3b"));
	outFields->push(HX_HCSTRING("LINEAR_MIPMAP_LINEAR","\xe2","\x8b","\xf8","\x99"));
	outFields->push(HX_HCSTRING("TEXTURE_MAG_FILTER","\x88","\xff","\xd5","\x1e"));
	outFields->push(HX_HCSTRING("TEXTURE_MIN_FILTER","\x69","\x66","\xc2","\x46"));
	outFields->push(HX_HCSTRING("TEXTURE_WRAP_S","\xa2","\x2d","\xc3","\xfe"));
	outFields->push(HX_HCSTRING("TEXTURE_WRAP_T","\xa3","\x2d","\xc3","\xfe"));
	outFields->push(HX_HCSTRING("TEXTURE_2D","\x16","\x0c","\xf8","\xa2"));
	outFields->push(HX_HCSTRING("TEXTURE","\xbb","\x9c","\xb4","\x1e"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP","\x36","\x7a","\xe1","\xad"));
	outFields->push(HX_HCSTRING("TEXTURE_BINDING_CUBE_MAP","\xd0","\x69","\x98","\x75"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_X","\xbb","\x1c","\xee","\x24"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_X","\x77","\x03","\xe2","\x6b"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Y","\xbc","\x1c","\xee","\x24"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Y","\x78","\x03","\xe2","\x6b"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Z","\xbd","\x1c","\xee","\x24"));
	outFields->push(HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Z","\x79","\x03","\xe2","\x6b"));
	outFields->push(HX_HCSTRING("MAX_CUBE_MAP_TEXTURE_SIZE","\x77","\xb9","\x24","\x9d"));
	outFields->push(HX_HCSTRING("TEXTURE0","\x15","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE1","\x16","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE2","\x17","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE3","\x18","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE4","\x19","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE5","\x1a","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE6","\x1b","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE7","\x1c","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE8","\x1d","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE9","\x1e","\x87","\x54","\xbf"));
	outFields->push(HX_HCSTRING("TEXTURE10","\x5a","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE11","\x5b","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE12","\x5c","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE13","\x5d","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE14","\x5e","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE15","\x5f","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE16","\x60","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE17","\x61","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE18","\x62","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE19","\x63","\xac","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE20","\x39","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE21","\x3a","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE22","\x3b","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE23","\x3c","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE24","\x3d","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE25","\x3e","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE26","\x3f","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE27","\x40","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE28","\x41","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE29","\x42","\xad","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE30","\x18","\xae","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("TEXTURE31","\x19","\xae","\xa1","\xaa"));
	outFields->push(HX_HCSTRING("ACTIVE_TEXTURE","\x02","\x1a","\x22","\xce"));
	outFields->push(HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8"));
	outFields->push(HX_HCSTRING("CLAMP_TO_EDGE","\x1d","\xfc","\x5a","\x96"));
	outFields->push(HX_HCSTRING("MIRRORED_REPEAT","\x5c","\x94","\x80","\x4a"));
	outFields->push(HX_HCSTRING("FLOAT_VEC2","\x61","\xac","\xa4","\xeb"));
	outFields->push(HX_HCSTRING("FLOAT_VEC3","\x62","\xac","\xa4","\xeb"));
	outFields->push(HX_HCSTRING("FLOAT_VEC4","\x63","\xac","\xa4","\xeb"));
	outFields->push(HX_HCSTRING("INT_VEC2","\x2e","\x14","\x05","\x7d"));
	outFields->push(HX_HCSTRING("INT_VEC3","\x2f","\x14","\x05","\x7d"));
	outFields->push(HX_HCSTRING("INT_VEC4","\x30","\x14","\x05","\x7d"));
	outFields->push(HX_HCSTRING("BOOL","\x2a","\x4c","\xdc","\x2b"));
	outFields->push(HX_HCSTRING("BOOL_VEC2","\xf3","\x66","\x2b","\x2d"));
	outFields->push(HX_HCSTRING("BOOL_VEC3","\xf4","\x66","\x2b","\x2d"));
	outFields->push(HX_HCSTRING("BOOL_VEC4","\xf5","\x66","\x2b","\x2d"));
	outFields->push(HX_HCSTRING("FLOAT_MAT2","\x95","\xc6","\xae","\xe5"));
	outFields->push(HX_HCSTRING("FLOAT_MAT3","\x96","\xc6","\xae","\xe5"));
	outFields->push(HX_HCSTRING("FLOAT_MAT4","\x97","\xc6","\xae","\xe5"));
	outFields->push(HX_HCSTRING("SAMPLER_2D","\x09","\x2a","\x93","\x6e"));
	outFields->push(HX_HCSTRING("SAMPLER_CUBE","\xec","\x3e","\x82","\xa4"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_ENABLED","\x61","\x99","\x09","\x66"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_SIZE","\xc1","\x07","\xfd","\x08"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_STRIDE","\x19","\x2b","\x41","\x58"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_TYPE","\xba","\x59","\xb2","\x09"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_NORMALIZED","\x37","\xb7","\x22","\x78"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_POINTER","\x9d","\x55","\xfa","\x38"));
	outFields->push(HX_HCSTRING("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","\xa6","\x80","\x67","\x97"));
	outFields->push(HX_HCSTRING("VERTEX_PROGRAM_POINT_SIZE","\xe6","\x56","\xbe","\x34"));
	outFields->push(HX_HCSTRING("POINT_SPRITE","\x74","\x93","\x5c","\x14"));
	outFields->push(HX_HCSTRING("COMPILE_STATUS","\xde","\xcb","\x4e","\x8c"));
	outFields->push(HX_HCSTRING("LOW_FLOAT","\x31","\x04","\x74","\xe4"));
	outFields->push(HX_HCSTRING("MEDIUM_FLOAT","\xf2","\x8a","\x46","\xb9"));
	outFields->push(HX_HCSTRING("HIGH_FLOAT","\x9f","\xf9","\x3b","\x47"));
	outFields->push(HX_HCSTRING("LOW_INT","\x44","\x28","\x70","\x45"));
	outFields->push(HX_HCSTRING("MEDIUM_INT","\xc5","\xcc","\xaf","\x4f"));
	outFields->push(HX_HCSTRING("HIGH_INT","\x32","\x46","\x02","\x09"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER","\xcd","\x20","\x84","\x50"));
	outFields->push(HX_HCSTRING("RENDERBUFFER","\xd6","\xa4","\xa4","\xa9"));
	outFields->push(HX_HCSTRING("RGBA4","\x00","\x05","\xfc","\x65"));
	outFields->push(HX_HCSTRING("RGB5_A1","\x47","\x8f","\xf9","\xd8"));
	outFields->push(HX_HCSTRING("RGB565","\xe7","\x41","\x7f","\xd6"));
	outFields->push(HX_HCSTRING("DEPTH_COMPONENT16","\x26","\xcc","\x68","\x43"));
	outFields->push(HX_HCSTRING("STENCIL_INDEX","\x0f","\x79","\xb6","\x97"));
	outFields->push(HX_HCSTRING("STENCIL_INDEX8","\x49","\x74","\xf3","\x27"));
	outFields->push(HX_HCSTRING("DEPTH_STENCIL","\x40","\x2f","\x20","\x2b"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_WIDTH","\x7d","\x1e","\xe1","\x43"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_HEIGHT","\x70","\x07","\x69","\xd7"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_INTERNAL_FORMAT","\x90","\xda","\xeb","\xb5"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_RED_SIZE","\x98","\xa5","\x58","\x5e"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_GREEN_SIZE","\x26","\x9b","\x7d","\x3b"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_BLUE_SIZE","\xdd","\x93","\x86","\xdd"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_ALPHA_SIZE","\xab","\xf0","\x5d","\x87"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_DEPTH_SIZE","\xe6","\x90","\x24","\xc3"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_STENCIL_SIZE","\x8d","\xd5","\x5a","\x9d"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","\x50","\x22","\x44","\x50"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","\xe1","\xa1","\x3a","\x4c"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","\xf6","\x9b","\xba","\x81"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","\xdc","\x4c","\x39","\x8a"));
	outFields->push(HX_HCSTRING("COLOR_ATTACHMENT0","\xb1","\x9a","\xfe","\x86"));
	outFields->push(HX_HCSTRING("DEPTH_ATTACHMENT","\xff","\x54","\xcd","\xe9"));
	outFields->push(HX_HCSTRING("STENCIL_ATTACHMENT","\xa6","\x8c","\x28","\x01"));
	outFields->push(HX_HCSTRING("DEPTH_STENCIL_ATTACHMENT","\xc2","\xe1","\xe1","\x9f"));
	outFields->push(HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_COMPLETE","\xab","\x65","\x7d","\xea"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_ATTACHMENT","\xf2","\xcf","\xb7","\x1d"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","\x8b","\x0a","\xcd","\x77"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_DIMENSIONS","\x5c","\x86","\xe4","\x1c"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_UNSUPPORTED","\xe3","\xa6","\x4e","\xc8"));
	outFields->push(HX_HCSTRING("FRAMEBUFFER_BINDING","\x73","\xee","\xae","\xc5"));
	outFields->push(HX_HCSTRING("RENDERBUFFER_BINDING","\x7c","\x23","\x70","\x23"));
	outFields->push(HX_HCSTRING("MAX_RENDERBUFFER_SIZE","\x4f","\xd4","\x3d","\x65"));
	outFields->push(HX_HCSTRING("INVALID_FRAMEBUFFER_OPERATION","\x2d","\xd4","\xc5","\x43"));
	outFields->push(HX_HCSTRING("UNPACK_FLIP_Y_WEBGL","\x0e","\x9f","\x94","\x9d"));
	outFields->push(HX_HCSTRING("UNPACK_PREMULTIPLY_ALPHA_WEBGL","\x73","\x5d","\xcb","\xc6"));
	outFields->push(HX_HCSTRING("CONTEXT_LOST_WEBGL","\x6e","\x67","\x71","\x45"));
	outFields->push(HX_HCSTRING("UNPACK_COLORSPACE_CONVERSION_WEBGL","\x9f","\xd9","\xf0","\xb9"));
	outFields->push(HX_HCSTRING("BROWSER_DEFAULT_WEBGL","\x04","\x04","\x92","\xc0"));
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	outFields->push(HX_HCSTRING("__currentProgram","\x6b","\x4a","\xcd","\x35"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeGLRenderContext_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_BUFFER_BIT),HX_HCSTRING("DEPTH_BUFFER_BIT","\xca","\x5b","\xce","\xc6")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BUFFER_BIT),HX_HCSTRING("STENCIL_BUFFER_BIT","\x71","\x93","\x29","\xde")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,COLOR_BUFFER_BIT),HX_HCSTRING("COLOR_BUFFER_BIT","\x6a","\xf7","\x74","\xfb")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,POINTS),HX_HCSTRING("POINTS","\x23","\xbe","\xb0","\xa9")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LINES),HX_HCSTRING("LINES","\xdf","\x15","\xf0","\xf2")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LINE_LOOP),HX_HCSTRING("LINE_LOOP","\xcf","\x55","\xc1","\x16")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LINE_STRIP),HX_HCSTRING("LINE_STRIP","\xed","\x20","\x88","\xdd")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TRIANGLES),HX_HCSTRING("TRIANGLES","\x8b","\xa0","\x99","\x7a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TRIANGLE_STRIP),HX_HCSTRING("TRIANGLE_STRIP","\xc1","\x66","\x6c","\xf6")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TRIANGLE_FAN),HX_HCSTRING("TRIANGLE_FAN","\x7c","\xee","\x2e","\x91")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ZERO),HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ONE),HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SRC_COLOR),HX_HCSTRING("SRC_COLOR","\x48","\x9e","\xbd","\x5c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ONE_MINUS_SRC_COLOR),HX_HCSTRING("ONE_MINUS_SRC_COLOR","\x20","\x3b","\xe1","\x48")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SRC_ALPHA),HX_HCSTRING("SRC_ALPHA","\x43","\xd4","\xf7","\x33")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ONE_MINUS_SRC_ALPHA),HX_HCSTRING("ONE_MINUS_SRC_ALPHA","\x1b","\x71","\x1b","\x20")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DST_ALPHA),HX_HCSTRING("DST_ALPHA","\x24","\x02","\xf2","\xd3")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ONE_MINUS_DST_ALPHA),HX_HCSTRING("ONE_MINUS_DST_ALPHA","\xfc","\x9e","\x15","\xc0")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DST_COLOR),HX_HCSTRING("DST_COLOR","\x29","\xcc","\xb7","\xfc")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ONE_MINUS_DST_COLOR),HX_HCSTRING("ONE_MINUS_DST_COLOR","\x01","\x69","\xdb","\xe8")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SRC_ALPHA_SATURATE),HX_HCSTRING("SRC_ALPHA_SATURATE","\xab","\xe2","\x3d","\x33")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FUNC_ADD),HX_HCSTRING("FUNC_ADD","\x46","\x78","\x17","\x75")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND_EQUATION),HX_HCSTRING("BLEND_EQUATION","\x9a","\x14","\x92","\x71")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND_EQUATION_RGB),HX_HCSTRING("BLEND_EQUATION_RGB","\x88","\x25","\xeb","\x90")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND_EQUATION_ALPHA),HX_HCSTRING("BLEND_EQUATION_ALPHA","\x99","\xaa","\xae","\x37")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FUNC_SUBTRACT),HX_HCSTRING("FUNC_SUBTRACT","\xaf","\xc0","\xa0","\x17")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FUNC_REVERSE_SUBTRACT),HX_HCSTRING("FUNC_REVERSE_SUBTRACT","\xcc","\x8d","\xef","\xf3")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND_DST_RGB),HX_HCSTRING("BLEND_DST_RGB","\x05","\x87","\xf5","\xec")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND_SRC_RGB),HX_HCSTRING("BLEND_SRC_RGB","\x64","\x43","\x8c","\x2c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND_DST_ALPHA),HX_HCSTRING("BLEND_DST_ALPHA","\x56","\x25","\x32","\x74")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND_SRC_ALPHA),HX_HCSTRING("BLEND_SRC_ALPHA","\x75","\xf7","\x37","\xd4")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CONSTANT_COLOR),HX_HCSTRING("CONSTANT_COLOR","\xe8","\x64","\x8a","\xc8")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ONE_MINUS_CONSTANT_COLOR),HX_HCSTRING("ONE_MINUS_CONSTANT_COLOR","\x10","\x39","\xe7","\x06")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CONSTANT_ALPHA),HX_HCSTRING("CONSTANT_ALPHA","\xe3","\x9a","\xc4","\x9f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ONE_MINUS_CONSTANT_ALPHA),HX_HCSTRING("ONE_MINUS_CONSTANT_ALPHA","\x0b","\x6f","\x21","\xde")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND_COLOR),HX_HCSTRING("BLEND_COLOR","\x75","\xcb","\xc8","\x67")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ARRAY_BUFFER),HX_HCSTRING("ARRAY_BUFFER","\x46","\x66","\x17","\xf4")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ELEMENT_ARRAY_BUFFER),HX_HCSTRING("ELEMENT_ARRAY_BUFFER","\x09","\x05","\x53","\x3d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ARRAY_BUFFER_BINDING),HX_HCSTRING("ARRAY_BUFFER_BINDING","\xec","\xd4","\xa9","\x79")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ELEMENT_ARRAY_BUFFER_BINDING),HX_HCSTRING("ELEMENT_ARRAY_BUFFER_BINDING","\xaf","\x6e","\x96","\xa2")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STREAM_DRAW),HX_HCSTRING("STREAM_DRAW","\x63","\x7f","\x28","\x15")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STATIC_DRAW),HX_HCSTRING("STATIC_DRAW","\x75","\x50","\x2f","\xba")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DYNAMIC_DRAW),HX_HCSTRING("DYNAMIC_DRAW","\x24","\x04","\x1f","\x24")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BUFFER_SIZE),HX_HCSTRING("BUFFER_SIZE","\xa0","\x7b","\x91","\x4c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BUFFER_USAGE),HX_HCSTRING("BUFFER_USAGE","\x42","\x05","\x11","\xe0")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CURRENT_VERTEX_ATTRIB),HX_HCSTRING("CURRENT_VERTEX_ATTRIB","\x1f","\x8c","\x2f","\xab")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRONT),HX_HCSTRING("FRONT","\x89","\x50","\x7c","\x84")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BACK),HX_HCSTRING("BACK","\x27","\xa2","\xd1","\x2b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRONT_AND_BACK),HX_HCSTRING("FRONT_AND_BACK","\xa5","\x3d","\x6a","\xc1")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CULL_FACE),HX_HCSTRING("CULL_FACE","\x8a","\xa5","\xf4","\xcf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLEND),HX_HCSTRING("BLEND","\x31","\x20","\xe3","\x32")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DITHER),HX_HCSTRING("DITHER","\xe6","\xac","\x41","\x70")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_TEST),HX_HCSTRING("STENCIL_TEST","\xd5","\xdc","\x69","\xd5")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_TEST),HX_HCSTRING("DEPTH_TEST","\x6e","\x6c","\x25","\x28")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SCISSOR_TEST),HX_HCSTRING("SCISSOR_TEST","\xb5","\xbe","\x51","\x59")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,POLYGON_OFFSET_FILL),HX_HCSTRING("POLYGON_OFFSET_FILL","\x4a","\x3d","\x32","\xac")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SAMPLE_ALPHA_TO_COVERAGE),HX_HCSTRING("SAMPLE_ALPHA_TO_COVERAGE","\x16","\x3e","\x56","\xe1")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SAMPLE_COVERAGE),HX_HCSTRING("SAMPLE_COVERAGE","\xdd","\xb7","\x0e","\xc1")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,NO_ERROR),HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INVALID_ENUM),HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INVALID_VALUE),HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INVALID_OPERATION),HX_HCSTRING("INVALID_OPERATION","\x5f","\xb1","\xc8","\x29")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,OUT_OF_MEMORY),HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CW),HX_HCSTRING("CW","\xb4","\x3a","\x00","\x00")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CCW),HX_HCSTRING("CCW","\xb7","\x11","\x33","\x00")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LINE_WIDTH),HX_HCSTRING("LINE_WIDTH","\x1b","\x84","\xd2","\x23")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ALIASED_POINT_SIZE_RANGE),HX_HCSTRING("ALIASED_POINT_SIZE_RANGE","\xfe","\xf6","\xa4","\x7b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ALIASED_LINE_WIDTH_RANGE),HX_HCSTRING("ALIASED_LINE_WIDTH_RANGE","\xe9","\x22","\xd5","\x8a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CULL_FACE_MODE),HX_HCSTRING("CULL_FACE_MODE","\x78","\xbd","\x87","\xd1")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRONT_FACE),HX_HCSTRING("FRONT_FACE","\x53","\xb7","\x4d","\xef")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_RANGE),HX_HCSTRING("DEPTH_RANGE","\x01","\x9a","\x23","\xcf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_WRITEMASK),HX_HCSTRING("DEPTH_WRITEMASK","\x8f","\x37","\x3f","\x66")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_CLEAR_VALUE),HX_HCSTRING("DEPTH_CLEAR_VALUE","\x23","\x17","\x0d","\x1b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_FUNC),HX_HCSTRING("DEPTH_FUNC","\x60","\x8f","\xf0","\x1e")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_CLEAR_VALUE),HX_HCSTRING("STENCIL_CLEAR_VALUE","\x9c","\x91","\x82","\x73")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_FUNC),HX_HCSTRING("STENCIL_FUNC","\xc7","\xff","\x34","\xcc")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_FAIL),HX_HCSTRING("STENCIL_FAIL","\x61","\xce","\x25","\xcc")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_PASS_DEPTH_FAIL),HX_HCSTRING("STENCIL_PASS_DEPTH_FAIL","\x45","\xca","\xb9","\xc8")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_PASS_DEPTH_PASS),HX_HCSTRING("STENCIL_PASS_DEPTH_PASS","\x38","\xf5","\x55","\xcf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_REF),HX_HCSTRING("STENCIL_REF","\x10","\x6a","\xa5","\x3c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_VALUE_MASK),HX_HCSTRING("STENCIL_VALUE_MASK","\x9d","\x58","\x5e","\xa0")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_WRITEMASK),HX_HCSTRING("STENCIL_WRITEMASK","\xc8","\xf1","\xa6","\x49")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BACK_FUNC),HX_HCSTRING("STENCIL_BACK_FUNC","\x39","\x78","\xa2","\x90")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BACK_FAIL),HX_HCSTRING("STENCIL_BACK_FAIL","\xd3","\x46","\x93","\x90")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BACK_PASS_DEPTH_FAIL),HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_FAIL","\x13","\x23","\x0e","\x34")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BACK_PASS_DEPTH_PASS),HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_PASS","\x06","\x4e","\xaa","\x3a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BACK_REF),HX_HCSTRING("STENCIL_BACK_REF","\xde","\x45","\xb8","\x08")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BACK_VALUE_MASK),HX_HCSTRING("STENCIL_BACK_VALUE_MASK","\x8f","\xb2","\xc4","\x88")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BACK_WRITEMASK),HX_HCSTRING("STENCIL_BACK_WRITEMASK","\x16","\x9c","\x15","\xc2")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VIEWPORT),HX_HCSTRING("VIEWPORT","\x66","\xdc","\x2a","\xf6")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SCISSOR_BOX),HX_HCSTRING("SCISSOR_BOX","\xe8","\x48","\x4c","\x55")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,COLOR_CLEAR_VALUE),HX_HCSTRING("COLOR_CLEAR_VALUE","\x83","\xa7","\x2e","\xf8")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,COLOR_WRITEMASK),HX_HCSTRING("COLOR_WRITEMASK","\xef","\xef","\xf9","\x14")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNPACK_ALIGNMENT),HX_HCSTRING("UNPACK_ALIGNMENT","\xb6","\x2a","\x2e","\x4b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,PACK_ALIGNMENT),HX_HCSTRING("PACK_ALIGNMENT","\x9d","\xd6","\x85","\xc3")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_TEXTURE_SIZE),HX_HCSTRING("MAX_TEXTURE_SIZE","\xe0","\x0b","\x5b","\xfb")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_VIEWPORT_DIMS),HX_HCSTRING("MAX_VIEWPORT_DIMS","\xa9","\x2d","\xfb","\x08")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SUBPIXEL_BITS),HX_HCSTRING("SUBPIXEL_BITS","\x1f","\xac","\x14","\x0a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RED_BITS),HX_HCSTRING("RED_BITS","\x14","\xf8","\x9e","\x96")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,GREEN_BITS),HX_HCSTRING("GREEN_BITS","\x62","\xa9","\x9b","\x94")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BLUE_BITS),HX_HCSTRING("BLUE_BITS","\x0b","\x26","\x60","\xa1")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ALPHA_BITS),HX_HCSTRING("ALPHA_BITS","\xe7","\xfe","\x7b","\xe0")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_BITS),HX_HCSTRING("DEPTH_BITS","\x22","\x9f","\x42","\x1c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_BITS),HX_HCSTRING("STENCIL_BITS","\x89","\x0f","\x87","\xc9")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,POLYGON_OFFSET_UNITS),HX_HCSTRING("POLYGON_OFFSET_UNITS","\xa8","\xe8","\x11","\xa6")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,POLYGON_OFFSET_FACTOR),HX_HCSTRING("POLYGON_OFFSET_FACTOR","\x56","\x6b","\x12","\x2a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_BINDING_2D),HX_HCSTRING("TEXTURE_BINDING_2D","\x30","\xec","\x98","\xb1")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SAMPLE_BUFFERS),HX_HCSTRING("SAMPLE_BUFFERS","\xfe","\x16","\x71","\x3c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SAMPLES),HX_HCSTRING("SAMPLES","\xe9","\x98","\x9d","\x03")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SAMPLE_COVERAGE_VALUE),HX_HCSTRING("SAMPLE_COVERAGE_VALUE","\x2f","\x7a","\x07","\x69")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SAMPLE_COVERAGE_INVERT),HX_HCSTRING("SAMPLE_COVERAGE_INVERT","\x78","\x52","\xa5","\xcd")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,COMPRESSED_TEXTURE_FORMATS),HX_HCSTRING("COMPRESSED_TEXTURE_FORMATS","\x7a","\x13","\xe3","\x12")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DONT_CARE),HX_HCSTRING("DONT_CARE","\x7f","\x9b","\xc1","\xcf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FASTEST),HX_HCSTRING("FASTEST","\x0a","\xa3","\x0d","\x5e")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,NICEST),HX_HCSTRING("NICEST","\x7e","\x6d","\x94","\x64")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,GENERATE_MIPMAP_HINT),HX_HCSTRING("GENERATE_MIPMAP_HINT","\x94","\xd3","\xd5","\x83")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BYTE),HX_HCSTRING("BYTE","\x08","\xe7","\xe3","\x2b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNSIGNED_BYTE),HX_HCSTRING("UNSIGNED_BYTE","\xd2","\x79","\x6b","\x01")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SHORT),HX_HCSTRING("SHORT","\x5c","\xbc","\x15","\xfa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNSIGNED_SHORT),HX_HCSTRING("UNSIGNED_SHORT","\x52","\x9a","\x2e","\xfb")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INT),HX_HCSTRING("INT","\xcf","\xa8","\x37","\x00")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNSIGNED_INT),HX_HCSTRING("UNSIGNED_INT","\x45","\xfd","\xb9","\x1c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FLOAT),HX_HCSTRING("FLOAT","\x7c","\xfd","\x84","\x80")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_COMPONENT),HX_HCSTRING("DEPTH_COMPONENT","\x01","\x1f","\x62","\x0f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ALPHA),HX_HCSTRING("ALPHA","\x3e","\xdf","\x84","\x9f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RGB),HX_HCSTRING("RGB","\xed","\x76","\x3e","\x00")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RGBA),HX_HCSTRING("RGBA","\xb4","\x98","\x69","\x36")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BGR_EXT),HX_HCSTRING("BGR_EXT","\xef","\xba","\xba","\x91")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BGRA_EXT),HX_HCSTRING("BGRA_EXT","\x36","\x94","\xc4","\xbc")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LUMINANCE),HX_HCSTRING("LUMINANCE","\xd8","\xa7","\xe0","\x63")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LUMINANCE_ALPHA),HX_HCSTRING("LUMINANCE_ALPHA","\x57","\x40","\xe0","\xbd")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNSIGNED_SHORT_4_4_4_4),HX_HCSTRING("UNSIGNED_SHORT_4_4_4_4","\xa6","\x33","\x71","\x7b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNSIGNED_SHORT_5_5_5_1),HX_HCSTRING("UNSIGNED_SHORT_5_5_5_1","\x26","\x01","\x6e","\x38")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNSIGNED_SHORT_5_6_5),HX_HCSTRING("UNSIGNED_SHORT_5_6_5","\x75","\xbb","\x16","\x8c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAGMENT_SHADER),HX_HCSTRING("FRAGMENT_SHADER","\xf4","\x26","\x78","\xe9")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_SHADER),HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_VERTEX_ATTRIBS),HX_HCSTRING("MAX_VERTEX_ATTRIBS","\x49","\xc9","\x15","\x5f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_VERTEX_UNIFORM_VECTORS),HX_HCSTRING("MAX_VERTEX_UNIFORM_VECTORS","\x45","\x6c","\x16","\x5a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_VARYING_VECTORS),HX_HCSTRING("MAX_VARYING_VECTORS","\x06","\xb9","\xf7","\x37")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_COMBINED_TEXTURE_IMAGE_UNITS),HX_HCSTRING("MAX_COMBINED_TEXTURE_IMAGE_UNITS","\xa8","\xd1","\xa6","\x77")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_VERTEX_TEXTURE_IMAGE_UNITS),HX_HCSTRING("MAX_VERTEX_TEXTURE_IMAGE_UNITS","\xc7","\x90","\x95","\x2b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_TEXTURE_IMAGE_UNITS),HX_HCSTRING("MAX_TEXTURE_IMAGE_UNITS","\xcc","\x6c","\x61","\x54")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_FRAGMENT_UNIFORM_VECTORS),HX_HCSTRING("MAX_FRAGMENT_UNIFORM_VECTORS","\x71","\x49","\xf5","\x0a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SHADER_TYPE),HX_HCSTRING("SHADER_TYPE","\x54","\xe5","\x27","\x87")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DELETE_STATUS),HX_HCSTRING("DELETE_STATUS","\x06","\xe4","\x98","\x1e")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LINK_STATUS),HX_HCSTRING("LINK_STATUS","\x17","\x18","\x8f","\x45")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VALIDATE_STATUS),HX_HCSTRING("VALIDATE_STATUS","\xfb","\x22","\x07","\xc6")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ATTACHED_SHADERS),HX_HCSTRING("ATTACHED_SHADERS","\x73","\xd2","\x76","\x75")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ACTIVE_UNIFORMS),HX_HCSTRING("ACTIVE_UNIFORMS","\x98","\x7d","\x3a","\x2c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ACTIVE_ATTRIBUTES),HX_HCSTRING("ACTIVE_ATTRIBUTES","\xf0","\xe5","\xc7","\x4a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SHADING_LANGUAGE_VERSION),HX_HCSTRING("SHADING_LANGUAGE_VERSION","\xe6","\xc4","\xef","\x70")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CURRENT_PROGRAM),HX_HCSTRING("CURRENT_PROGRAM","\xfe","\x28","\xc0","\x3f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,NEVER),HX_HCSTRING("NEVER","\x6c","\x76","\x1e","\x17")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LESS),HX_HCSTRING("LESS","\x59","\xdb","\x70","\x32")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,EQUAL),HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LEQUAL),HX_HCSTRING("LEQUAL","\xc8","\x73","\x90","\x53")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,GREATER),HX_HCSTRING("GREATER","\xda","\x64","\x94","\x37")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,NOTEQUAL),HX_HCSTRING("NOTEQUAL","\xc1","\xc1","\xe9","\xc8")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,GEQUAL),HX_HCSTRING("GEQUAL","\xed","\xa5","\xc7","\x53")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ALWAYS),HX_HCSTRING("ALWAYS","\xcf","\xba","\x59","\xf9")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,KEEP),HX_HCSTRING("KEEP","\x85","\x98","\xc7","\x31")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,REPLACE),HX_HCSTRING("REPLACE","\x14","\x1c","\xfc","\x2a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INCR),HX_HCSTRING("INCR","\xd4","\xfd","\x7b","\x30")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DECR),HX_HCSTRING("DECR","\x70","\x18","\x27","\x2d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INVERT),HX_HCSTRING("INVERT","\x16","\x93","\x5b","\x52")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INCR_WRAP),HX_HCSTRING("INCR_WRAP","\x55","\x7f","\x68","\x2c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DECR_WRAP),HX_HCSTRING("DECR_WRAP","\x39","\x6f","\xeb","\x0a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VENDOR),HX_HCSTRING("VENDOR","\x88","\x91","\x19","\x51")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERER),HX_HCSTRING("RENDERER","\x43","\x55","\x61","\x0c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERSION),HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,NEAREST),HX_HCSTRING("NEAREST","\x3e","\xec","\x9d","\xe5")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LINEAR),HX_HCSTRING("LINEAR","\xe5","\xfd","\x22","\x9f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,NEAREST_MIPMAP_NEAREST),HX_HCSTRING("NEAREST_MIPMAP_NEAREST","\x68","\xb9","\x63","\x7e")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LINEAR_MIPMAP_NEAREST),HX_HCSTRING("LINEAR_MIPMAP_NEAREST","\xa1","\x9b","\xa4","\x65")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,NEAREST_MIPMAP_LINEAR),HX_HCSTRING("NEAREST_MIPMAP_LINEAR","\xfb","\x83","\xf2","\x3b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LINEAR_MIPMAP_LINEAR),HX_HCSTRING("LINEAR_MIPMAP_LINEAR","\xe2","\x8b","\xf8","\x99")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_MAG_FILTER),HX_HCSTRING("TEXTURE_MAG_FILTER","\x88","\xff","\xd5","\x1e")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_MIN_FILTER),HX_HCSTRING("TEXTURE_MIN_FILTER","\x69","\x66","\xc2","\x46")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_WRAP_S),HX_HCSTRING("TEXTURE_WRAP_S","\xa2","\x2d","\xc3","\xfe")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_WRAP_T),HX_HCSTRING("TEXTURE_WRAP_T","\xa3","\x2d","\xc3","\xfe")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_2D),HX_HCSTRING("TEXTURE_2D","\x16","\x0c","\xf8","\xa2")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE),HX_HCSTRING("TEXTURE","\xbb","\x9c","\xb4","\x1e")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_CUBE_MAP),HX_HCSTRING("TEXTURE_CUBE_MAP","\x36","\x7a","\xe1","\xad")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_BINDING_CUBE_MAP),HX_HCSTRING("TEXTURE_BINDING_CUBE_MAP","\xd0","\x69","\x98","\x75")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_CUBE_MAP_POSITIVE_X),HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_X","\xbb","\x1c","\xee","\x24")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_CUBE_MAP_NEGATIVE_X),HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_X","\x77","\x03","\xe2","\x6b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_CUBE_MAP_POSITIVE_Y),HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Y","\xbc","\x1c","\xee","\x24")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_CUBE_MAP_NEGATIVE_Y),HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Y","\x78","\x03","\xe2","\x6b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_CUBE_MAP_POSITIVE_Z),HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Z","\xbd","\x1c","\xee","\x24")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE_CUBE_MAP_NEGATIVE_Z),HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Z","\x79","\x03","\xe2","\x6b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_CUBE_MAP_TEXTURE_SIZE),HX_HCSTRING("MAX_CUBE_MAP_TEXTURE_SIZE","\x77","\xb9","\x24","\x9d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE0),HX_HCSTRING("TEXTURE0","\x15","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE1),HX_HCSTRING("TEXTURE1","\x16","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE2),HX_HCSTRING("TEXTURE2","\x17","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE3),HX_HCSTRING("TEXTURE3","\x18","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE4),HX_HCSTRING("TEXTURE4","\x19","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE5),HX_HCSTRING("TEXTURE5","\x1a","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE6),HX_HCSTRING("TEXTURE6","\x1b","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE7),HX_HCSTRING("TEXTURE7","\x1c","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE8),HX_HCSTRING("TEXTURE8","\x1d","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE9),HX_HCSTRING("TEXTURE9","\x1e","\x87","\x54","\xbf")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE10),HX_HCSTRING("TEXTURE10","\x5a","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE11),HX_HCSTRING("TEXTURE11","\x5b","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE12),HX_HCSTRING("TEXTURE12","\x5c","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE13),HX_HCSTRING("TEXTURE13","\x5d","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE14),HX_HCSTRING("TEXTURE14","\x5e","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE15),HX_HCSTRING("TEXTURE15","\x5f","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE16),HX_HCSTRING("TEXTURE16","\x60","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE17),HX_HCSTRING("TEXTURE17","\x61","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE18),HX_HCSTRING("TEXTURE18","\x62","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE19),HX_HCSTRING("TEXTURE19","\x63","\xac","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE20),HX_HCSTRING("TEXTURE20","\x39","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE21),HX_HCSTRING("TEXTURE21","\x3a","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE22),HX_HCSTRING("TEXTURE22","\x3b","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE23),HX_HCSTRING("TEXTURE23","\x3c","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE24),HX_HCSTRING("TEXTURE24","\x3d","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE25),HX_HCSTRING("TEXTURE25","\x3e","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE26),HX_HCSTRING("TEXTURE26","\x3f","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE27),HX_HCSTRING("TEXTURE27","\x40","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE28),HX_HCSTRING("TEXTURE28","\x41","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE29),HX_HCSTRING("TEXTURE29","\x42","\xad","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE30),HX_HCSTRING("TEXTURE30","\x18","\xae","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,TEXTURE31),HX_HCSTRING("TEXTURE31","\x19","\xae","\xa1","\xaa")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,ACTIVE_TEXTURE),HX_HCSTRING("ACTIVE_TEXTURE","\x02","\x1a","\x22","\xce")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,REPEAT),HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CLAMP_TO_EDGE),HX_HCSTRING("CLAMP_TO_EDGE","\x1d","\xfc","\x5a","\x96")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MIRRORED_REPEAT),HX_HCSTRING("MIRRORED_REPEAT","\x5c","\x94","\x80","\x4a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FLOAT_VEC2),HX_HCSTRING("FLOAT_VEC2","\x61","\xac","\xa4","\xeb")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FLOAT_VEC3),HX_HCSTRING("FLOAT_VEC3","\x62","\xac","\xa4","\xeb")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FLOAT_VEC4),HX_HCSTRING("FLOAT_VEC4","\x63","\xac","\xa4","\xeb")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INT_VEC2),HX_HCSTRING("INT_VEC2","\x2e","\x14","\x05","\x7d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INT_VEC3),HX_HCSTRING("INT_VEC3","\x2f","\x14","\x05","\x7d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INT_VEC4),HX_HCSTRING("INT_VEC4","\x30","\x14","\x05","\x7d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BOOL),HX_HCSTRING("BOOL","\x2a","\x4c","\xdc","\x2b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BOOL_VEC2),HX_HCSTRING("BOOL_VEC2","\xf3","\x66","\x2b","\x2d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BOOL_VEC3),HX_HCSTRING("BOOL_VEC3","\xf4","\x66","\x2b","\x2d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BOOL_VEC4),HX_HCSTRING("BOOL_VEC4","\xf5","\x66","\x2b","\x2d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FLOAT_MAT2),HX_HCSTRING("FLOAT_MAT2","\x95","\xc6","\xae","\xe5")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FLOAT_MAT3),HX_HCSTRING("FLOAT_MAT3","\x96","\xc6","\xae","\xe5")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FLOAT_MAT4),HX_HCSTRING("FLOAT_MAT4","\x97","\xc6","\xae","\xe5")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SAMPLER_2D),HX_HCSTRING("SAMPLER_2D","\x09","\x2a","\x93","\x6e")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,SAMPLER_CUBE),HX_HCSTRING("SAMPLER_CUBE","\xec","\x3e","\x82","\xa4")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_ATTRIB_ARRAY_ENABLED),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_ENABLED","\x61","\x99","\x09","\x66")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_ATTRIB_ARRAY_SIZE),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_SIZE","\xc1","\x07","\xfd","\x08")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_ATTRIB_ARRAY_STRIDE),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_STRIDE","\x19","\x2b","\x41","\x58")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_ATTRIB_ARRAY_TYPE),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_TYPE","\xba","\x59","\xb2","\x09")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_ATTRIB_ARRAY_NORMALIZED),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_NORMALIZED","\x37","\xb7","\x22","\x78")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_ATTRIB_ARRAY_POINTER),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_POINTER","\x9d","\x55","\xfa","\x38")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_ATTRIB_ARRAY_BUFFER_BINDING),HX_HCSTRING("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","\xa6","\x80","\x67","\x97")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,VERTEX_PROGRAM_POINT_SIZE),HX_HCSTRING("VERTEX_PROGRAM_POINT_SIZE","\xe6","\x56","\xbe","\x34")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,POINT_SPRITE),HX_HCSTRING("POINT_SPRITE","\x74","\x93","\x5c","\x14")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,COMPILE_STATUS),HX_HCSTRING("COMPILE_STATUS","\xde","\xcb","\x4e","\x8c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LOW_FLOAT),HX_HCSTRING("LOW_FLOAT","\x31","\x04","\x74","\xe4")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MEDIUM_FLOAT),HX_HCSTRING("MEDIUM_FLOAT","\xf2","\x8a","\x46","\xb9")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,HIGH_FLOAT),HX_HCSTRING("HIGH_FLOAT","\x9f","\xf9","\x3b","\x47")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,LOW_INT),HX_HCSTRING("LOW_INT","\x44","\x28","\x70","\x45")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MEDIUM_INT),HX_HCSTRING("MEDIUM_INT","\xc5","\xcc","\xaf","\x4f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,HIGH_INT),HX_HCSTRING("HIGH_INT","\x32","\x46","\x02","\x09")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER),HX_HCSTRING("FRAMEBUFFER","\xcd","\x20","\x84","\x50")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER),HX_HCSTRING("RENDERBUFFER","\xd6","\xa4","\xa4","\xa9")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RGBA4),HX_HCSTRING("RGBA4","\x00","\x05","\xfc","\x65")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RGB5_A1),HX_HCSTRING("RGB5_A1","\x47","\x8f","\xf9","\xd8")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RGB565),HX_HCSTRING("RGB565","\xe7","\x41","\x7f","\xd6")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_COMPONENT16),HX_HCSTRING("DEPTH_COMPONENT16","\x26","\xcc","\x68","\x43")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_INDEX),HX_HCSTRING("STENCIL_INDEX","\x0f","\x79","\xb6","\x97")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_INDEX8),HX_HCSTRING("STENCIL_INDEX8","\x49","\x74","\xf3","\x27")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_STENCIL),HX_HCSTRING("DEPTH_STENCIL","\x40","\x2f","\x20","\x2b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_WIDTH),HX_HCSTRING("RENDERBUFFER_WIDTH","\x7d","\x1e","\xe1","\x43")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_HEIGHT),HX_HCSTRING("RENDERBUFFER_HEIGHT","\x70","\x07","\x69","\xd7")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_INTERNAL_FORMAT),HX_HCSTRING("RENDERBUFFER_INTERNAL_FORMAT","\x90","\xda","\xeb","\xb5")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_RED_SIZE),HX_HCSTRING("RENDERBUFFER_RED_SIZE","\x98","\xa5","\x58","\x5e")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_GREEN_SIZE),HX_HCSTRING("RENDERBUFFER_GREEN_SIZE","\x26","\x9b","\x7d","\x3b")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_BLUE_SIZE),HX_HCSTRING("RENDERBUFFER_BLUE_SIZE","\xdd","\x93","\x86","\xdd")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_ALPHA_SIZE),HX_HCSTRING("RENDERBUFFER_ALPHA_SIZE","\xab","\xf0","\x5d","\x87")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_DEPTH_SIZE),HX_HCSTRING("RENDERBUFFER_DEPTH_SIZE","\xe6","\x90","\x24","\xc3")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_STENCIL_SIZE),HX_HCSTRING("RENDERBUFFER_STENCIL_SIZE","\x8d","\xd5","\x5a","\x9d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE),HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","\x50","\x22","\x44","\x50")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_ATTACHMENT_OBJECT_NAME),HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","\xe1","\xa1","\x3a","\x4c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL),HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","\xf6","\x9b","\xba","\x81")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE),HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","\xdc","\x4c","\x39","\x8a")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,COLOR_ATTACHMENT0),HX_HCSTRING("COLOR_ATTACHMENT0","\xb1","\x9a","\xfe","\x86")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_ATTACHMENT),HX_HCSTRING("DEPTH_ATTACHMENT","\xff","\x54","\xcd","\xe9")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,STENCIL_ATTACHMENT),HX_HCSTRING("STENCIL_ATTACHMENT","\xa6","\x8c","\x28","\x01")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,DEPTH_STENCIL_ATTACHMENT),HX_HCSTRING("DEPTH_STENCIL_ATTACHMENT","\xc2","\xe1","\xe1","\x9f")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,NONE),HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_COMPLETE),HX_HCSTRING("FRAMEBUFFER_COMPLETE","\xab","\x65","\x7d","\xea")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_INCOMPLETE_ATTACHMENT),HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_ATTACHMENT","\xf2","\xcf","\xb7","\x1d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT),HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","\x8b","\x0a","\xcd","\x77")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_INCOMPLETE_DIMENSIONS),HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_DIMENSIONS","\x5c","\x86","\xe4","\x1c")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_UNSUPPORTED),HX_HCSTRING("FRAMEBUFFER_UNSUPPORTED","\xe3","\xa6","\x4e","\xc8")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,FRAMEBUFFER_BINDING),HX_HCSTRING("FRAMEBUFFER_BINDING","\x73","\xee","\xae","\xc5")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,RENDERBUFFER_BINDING),HX_HCSTRING("RENDERBUFFER_BINDING","\x7c","\x23","\x70","\x23")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,MAX_RENDERBUFFER_SIZE),HX_HCSTRING("MAX_RENDERBUFFER_SIZE","\x4f","\xd4","\x3d","\x65")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,INVALID_FRAMEBUFFER_OPERATION),HX_HCSTRING("INVALID_FRAMEBUFFER_OPERATION","\x2d","\xd4","\xc5","\x43")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNPACK_FLIP_Y_WEBGL),HX_HCSTRING("UNPACK_FLIP_Y_WEBGL","\x0e","\x9f","\x94","\x9d")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNPACK_PREMULTIPLY_ALPHA_WEBGL),HX_HCSTRING("UNPACK_PREMULTIPLY_ALPHA_WEBGL","\x73","\x5d","\xcb","\xc6")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,CONTEXT_LOST_WEBGL),HX_HCSTRING("CONTEXT_LOST_WEBGL","\x6e","\x67","\x71","\x45")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,UNPACK_COLORSPACE_CONVERSION_WEBGL),HX_HCSTRING("UNPACK_COLORSPACE_CONVERSION_WEBGL","\x9f","\xd9","\xf0","\xb9")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,BROWSER_DEFAULT_WEBGL),HX_HCSTRING("BROWSER_DEFAULT_WEBGL","\x04","\x04","\x92","\xc0")},
	{hx::fsInt,(int)offsetof(NativeGLRenderContext_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{hx::fsObject /*::lime::graphics::opengl::GLProgram*/ ,(int)offsetof(NativeGLRenderContext_obj,_hx___currentProgram),HX_HCSTRING("__currentProgram","\x6b","\x4a","\xcd","\x35")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NativeGLRenderContext_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeGLRenderContext_obj_sMemberFields[] = {
	HX_HCSTRING("DEPTH_BUFFER_BIT","\xca","\x5b","\xce","\xc6"),
	HX_HCSTRING("STENCIL_BUFFER_BIT","\x71","\x93","\x29","\xde"),
	HX_HCSTRING("COLOR_BUFFER_BIT","\x6a","\xf7","\x74","\xfb"),
	HX_HCSTRING("POINTS","\x23","\xbe","\xb0","\xa9"),
	HX_HCSTRING("LINES","\xdf","\x15","\xf0","\xf2"),
	HX_HCSTRING("LINE_LOOP","\xcf","\x55","\xc1","\x16"),
	HX_HCSTRING("LINE_STRIP","\xed","\x20","\x88","\xdd"),
	HX_HCSTRING("TRIANGLES","\x8b","\xa0","\x99","\x7a"),
	HX_HCSTRING("TRIANGLE_STRIP","\xc1","\x66","\x6c","\xf6"),
	HX_HCSTRING("TRIANGLE_FAN","\x7c","\xee","\x2e","\x91"),
	HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b"),
	HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00"),
	HX_HCSTRING("SRC_COLOR","\x48","\x9e","\xbd","\x5c"),
	HX_HCSTRING("ONE_MINUS_SRC_COLOR","\x20","\x3b","\xe1","\x48"),
	HX_HCSTRING("SRC_ALPHA","\x43","\xd4","\xf7","\x33"),
	HX_HCSTRING("ONE_MINUS_SRC_ALPHA","\x1b","\x71","\x1b","\x20"),
	HX_HCSTRING("DST_ALPHA","\x24","\x02","\xf2","\xd3"),
	HX_HCSTRING("ONE_MINUS_DST_ALPHA","\xfc","\x9e","\x15","\xc0"),
	HX_HCSTRING("DST_COLOR","\x29","\xcc","\xb7","\xfc"),
	HX_HCSTRING("ONE_MINUS_DST_COLOR","\x01","\x69","\xdb","\xe8"),
	HX_HCSTRING("SRC_ALPHA_SATURATE","\xab","\xe2","\x3d","\x33"),
	HX_HCSTRING("FUNC_ADD","\x46","\x78","\x17","\x75"),
	HX_HCSTRING("BLEND_EQUATION","\x9a","\x14","\x92","\x71"),
	HX_HCSTRING("BLEND_EQUATION_RGB","\x88","\x25","\xeb","\x90"),
	HX_HCSTRING("BLEND_EQUATION_ALPHA","\x99","\xaa","\xae","\x37"),
	HX_HCSTRING("FUNC_SUBTRACT","\xaf","\xc0","\xa0","\x17"),
	HX_HCSTRING("FUNC_REVERSE_SUBTRACT","\xcc","\x8d","\xef","\xf3"),
	HX_HCSTRING("BLEND_DST_RGB","\x05","\x87","\xf5","\xec"),
	HX_HCSTRING("BLEND_SRC_RGB","\x64","\x43","\x8c","\x2c"),
	HX_HCSTRING("BLEND_DST_ALPHA","\x56","\x25","\x32","\x74"),
	HX_HCSTRING("BLEND_SRC_ALPHA","\x75","\xf7","\x37","\xd4"),
	HX_HCSTRING("CONSTANT_COLOR","\xe8","\x64","\x8a","\xc8"),
	HX_HCSTRING("ONE_MINUS_CONSTANT_COLOR","\x10","\x39","\xe7","\x06"),
	HX_HCSTRING("CONSTANT_ALPHA","\xe3","\x9a","\xc4","\x9f"),
	HX_HCSTRING("ONE_MINUS_CONSTANT_ALPHA","\x0b","\x6f","\x21","\xde"),
	HX_HCSTRING("BLEND_COLOR","\x75","\xcb","\xc8","\x67"),
	HX_HCSTRING("ARRAY_BUFFER","\x46","\x66","\x17","\xf4"),
	HX_HCSTRING("ELEMENT_ARRAY_BUFFER","\x09","\x05","\x53","\x3d"),
	HX_HCSTRING("ARRAY_BUFFER_BINDING","\xec","\xd4","\xa9","\x79"),
	HX_HCSTRING("ELEMENT_ARRAY_BUFFER_BINDING","\xaf","\x6e","\x96","\xa2"),
	HX_HCSTRING("STREAM_DRAW","\x63","\x7f","\x28","\x15"),
	HX_HCSTRING("STATIC_DRAW","\x75","\x50","\x2f","\xba"),
	HX_HCSTRING("DYNAMIC_DRAW","\x24","\x04","\x1f","\x24"),
	HX_HCSTRING("BUFFER_SIZE","\xa0","\x7b","\x91","\x4c"),
	HX_HCSTRING("BUFFER_USAGE","\x42","\x05","\x11","\xe0"),
	HX_HCSTRING("CURRENT_VERTEX_ATTRIB","\x1f","\x8c","\x2f","\xab"),
	HX_HCSTRING("FRONT","\x89","\x50","\x7c","\x84"),
	HX_HCSTRING("BACK","\x27","\xa2","\xd1","\x2b"),
	HX_HCSTRING("FRONT_AND_BACK","\xa5","\x3d","\x6a","\xc1"),
	HX_HCSTRING("CULL_FACE","\x8a","\xa5","\xf4","\xcf"),
	HX_HCSTRING("BLEND","\x31","\x20","\xe3","\x32"),
	HX_HCSTRING("DITHER","\xe6","\xac","\x41","\x70"),
	HX_HCSTRING("STENCIL_TEST","\xd5","\xdc","\x69","\xd5"),
	HX_HCSTRING("DEPTH_TEST","\x6e","\x6c","\x25","\x28"),
	HX_HCSTRING("SCISSOR_TEST","\xb5","\xbe","\x51","\x59"),
	HX_HCSTRING("POLYGON_OFFSET_FILL","\x4a","\x3d","\x32","\xac"),
	HX_HCSTRING("SAMPLE_ALPHA_TO_COVERAGE","\x16","\x3e","\x56","\xe1"),
	HX_HCSTRING("SAMPLE_COVERAGE","\xdd","\xb7","\x0e","\xc1"),
	HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f"),
	HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13"),
	HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0"),
	HX_HCSTRING("INVALID_OPERATION","\x5f","\xb1","\xc8","\x29"),
	HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1"),
	HX_HCSTRING("CW","\xb4","\x3a","\x00","\x00"),
	HX_HCSTRING("CCW","\xb7","\x11","\x33","\x00"),
	HX_HCSTRING("LINE_WIDTH","\x1b","\x84","\xd2","\x23"),
	HX_HCSTRING("ALIASED_POINT_SIZE_RANGE","\xfe","\xf6","\xa4","\x7b"),
	HX_HCSTRING("ALIASED_LINE_WIDTH_RANGE","\xe9","\x22","\xd5","\x8a"),
	HX_HCSTRING("CULL_FACE_MODE","\x78","\xbd","\x87","\xd1"),
	HX_HCSTRING("FRONT_FACE","\x53","\xb7","\x4d","\xef"),
	HX_HCSTRING("DEPTH_RANGE","\x01","\x9a","\x23","\xcf"),
	HX_HCSTRING("DEPTH_WRITEMASK","\x8f","\x37","\x3f","\x66"),
	HX_HCSTRING("DEPTH_CLEAR_VALUE","\x23","\x17","\x0d","\x1b"),
	HX_HCSTRING("DEPTH_FUNC","\x60","\x8f","\xf0","\x1e"),
	HX_HCSTRING("STENCIL_CLEAR_VALUE","\x9c","\x91","\x82","\x73"),
	HX_HCSTRING("STENCIL_FUNC","\xc7","\xff","\x34","\xcc"),
	HX_HCSTRING("STENCIL_FAIL","\x61","\xce","\x25","\xcc"),
	HX_HCSTRING("STENCIL_PASS_DEPTH_FAIL","\x45","\xca","\xb9","\xc8"),
	HX_HCSTRING("STENCIL_PASS_DEPTH_PASS","\x38","\xf5","\x55","\xcf"),
	HX_HCSTRING("STENCIL_REF","\x10","\x6a","\xa5","\x3c"),
	HX_HCSTRING("STENCIL_VALUE_MASK","\x9d","\x58","\x5e","\xa0"),
	HX_HCSTRING("STENCIL_WRITEMASK","\xc8","\xf1","\xa6","\x49"),
	HX_HCSTRING("STENCIL_BACK_FUNC","\x39","\x78","\xa2","\x90"),
	HX_HCSTRING("STENCIL_BACK_FAIL","\xd3","\x46","\x93","\x90"),
	HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_FAIL","\x13","\x23","\x0e","\x34"),
	HX_HCSTRING("STENCIL_BACK_PASS_DEPTH_PASS","\x06","\x4e","\xaa","\x3a"),
	HX_HCSTRING("STENCIL_BACK_REF","\xde","\x45","\xb8","\x08"),
	HX_HCSTRING("STENCIL_BACK_VALUE_MASK","\x8f","\xb2","\xc4","\x88"),
	HX_HCSTRING("STENCIL_BACK_WRITEMASK","\x16","\x9c","\x15","\xc2"),
	HX_HCSTRING("VIEWPORT","\x66","\xdc","\x2a","\xf6"),
	HX_HCSTRING("SCISSOR_BOX","\xe8","\x48","\x4c","\x55"),
	HX_HCSTRING("COLOR_CLEAR_VALUE","\x83","\xa7","\x2e","\xf8"),
	HX_HCSTRING("COLOR_WRITEMASK","\xef","\xef","\xf9","\x14"),
	HX_HCSTRING("UNPACK_ALIGNMENT","\xb6","\x2a","\x2e","\x4b"),
	HX_HCSTRING("PACK_ALIGNMENT","\x9d","\xd6","\x85","\xc3"),
	HX_HCSTRING("MAX_TEXTURE_SIZE","\xe0","\x0b","\x5b","\xfb"),
	HX_HCSTRING("MAX_VIEWPORT_DIMS","\xa9","\x2d","\xfb","\x08"),
	HX_HCSTRING("SUBPIXEL_BITS","\x1f","\xac","\x14","\x0a"),
	HX_HCSTRING("RED_BITS","\x14","\xf8","\x9e","\x96"),
	HX_HCSTRING("GREEN_BITS","\x62","\xa9","\x9b","\x94"),
	HX_HCSTRING("BLUE_BITS","\x0b","\x26","\x60","\xa1"),
	HX_HCSTRING("ALPHA_BITS","\xe7","\xfe","\x7b","\xe0"),
	HX_HCSTRING("DEPTH_BITS","\x22","\x9f","\x42","\x1c"),
	HX_HCSTRING("STENCIL_BITS","\x89","\x0f","\x87","\xc9"),
	HX_HCSTRING("POLYGON_OFFSET_UNITS","\xa8","\xe8","\x11","\xa6"),
	HX_HCSTRING("POLYGON_OFFSET_FACTOR","\x56","\x6b","\x12","\x2a"),
	HX_HCSTRING("TEXTURE_BINDING_2D","\x30","\xec","\x98","\xb1"),
	HX_HCSTRING("SAMPLE_BUFFERS","\xfe","\x16","\x71","\x3c"),
	HX_HCSTRING("SAMPLES","\xe9","\x98","\x9d","\x03"),
	HX_HCSTRING("SAMPLE_COVERAGE_VALUE","\x2f","\x7a","\x07","\x69"),
	HX_HCSTRING("SAMPLE_COVERAGE_INVERT","\x78","\x52","\xa5","\xcd"),
	HX_HCSTRING("COMPRESSED_TEXTURE_FORMATS","\x7a","\x13","\xe3","\x12"),
	HX_HCSTRING("DONT_CARE","\x7f","\x9b","\xc1","\xcf"),
	HX_HCSTRING("FASTEST","\x0a","\xa3","\x0d","\x5e"),
	HX_HCSTRING("NICEST","\x7e","\x6d","\x94","\x64"),
	HX_HCSTRING("GENERATE_MIPMAP_HINT","\x94","\xd3","\xd5","\x83"),
	HX_HCSTRING("BYTE","\x08","\xe7","\xe3","\x2b"),
	HX_HCSTRING("UNSIGNED_BYTE","\xd2","\x79","\x6b","\x01"),
	HX_HCSTRING("SHORT","\x5c","\xbc","\x15","\xfa"),
	HX_HCSTRING("UNSIGNED_SHORT","\x52","\x9a","\x2e","\xfb"),
	HX_HCSTRING("INT","\xcf","\xa8","\x37","\x00"),
	HX_HCSTRING("UNSIGNED_INT","\x45","\xfd","\xb9","\x1c"),
	HX_HCSTRING("FLOAT","\x7c","\xfd","\x84","\x80"),
	HX_HCSTRING("DEPTH_COMPONENT","\x01","\x1f","\x62","\x0f"),
	HX_HCSTRING("ALPHA","\x3e","\xdf","\x84","\x9f"),
	HX_HCSTRING("RGB","\xed","\x76","\x3e","\x00"),
	HX_HCSTRING("RGBA","\xb4","\x98","\x69","\x36"),
	HX_HCSTRING("BGR_EXT","\xef","\xba","\xba","\x91"),
	HX_HCSTRING("BGRA_EXT","\x36","\x94","\xc4","\xbc"),
	HX_HCSTRING("LUMINANCE","\xd8","\xa7","\xe0","\x63"),
	HX_HCSTRING("LUMINANCE_ALPHA","\x57","\x40","\xe0","\xbd"),
	HX_HCSTRING("UNSIGNED_SHORT_4_4_4_4","\xa6","\x33","\x71","\x7b"),
	HX_HCSTRING("UNSIGNED_SHORT_5_5_5_1","\x26","\x01","\x6e","\x38"),
	HX_HCSTRING("UNSIGNED_SHORT_5_6_5","\x75","\xbb","\x16","\x8c"),
	HX_HCSTRING("FRAGMENT_SHADER","\xf4","\x26","\x78","\xe9"),
	HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49"),
	HX_HCSTRING("MAX_VERTEX_ATTRIBS","\x49","\xc9","\x15","\x5f"),
	HX_HCSTRING("MAX_VERTEX_UNIFORM_VECTORS","\x45","\x6c","\x16","\x5a"),
	HX_HCSTRING("MAX_VARYING_VECTORS","\x06","\xb9","\xf7","\x37"),
	HX_HCSTRING("MAX_COMBINED_TEXTURE_IMAGE_UNITS","\xa8","\xd1","\xa6","\x77"),
	HX_HCSTRING("MAX_VERTEX_TEXTURE_IMAGE_UNITS","\xc7","\x90","\x95","\x2b"),
	HX_HCSTRING("MAX_TEXTURE_IMAGE_UNITS","\xcc","\x6c","\x61","\x54"),
	HX_HCSTRING("MAX_FRAGMENT_UNIFORM_VECTORS","\x71","\x49","\xf5","\x0a"),
	HX_HCSTRING("SHADER_TYPE","\x54","\xe5","\x27","\x87"),
	HX_HCSTRING("DELETE_STATUS","\x06","\xe4","\x98","\x1e"),
	HX_HCSTRING("LINK_STATUS","\x17","\x18","\x8f","\x45"),
	HX_HCSTRING("VALIDATE_STATUS","\xfb","\x22","\x07","\xc6"),
	HX_HCSTRING("ATTACHED_SHADERS","\x73","\xd2","\x76","\x75"),
	HX_HCSTRING("ACTIVE_UNIFORMS","\x98","\x7d","\x3a","\x2c"),
	HX_HCSTRING("ACTIVE_ATTRIBUTES","\xf0","\xe5","\xc7","\x4a"),
	HX_HCSTRING("SHADING_LANGUAGE_VERSION","\xe6","\xc4","\xef","\x70"),
	HX_HCSTRING("CURRENT_PROGRAM","\xfe","\x28","\xc0","\x3f"),
	HX_HCSTRING("NEVER","\x6c","\x76","\x1e","\x17"),
	HX_HCSTRING("LESS","\x59","\xdb","\x70","\x32"),
	HX_HCSTRING("EQUAL","\x94","\x07","\x71","\xf0"),
	HX_HCSTRING("LEQUAL","\xc8","\x73","\x90","\x53"),
	HX_HCSTRING("GREATER","\xda","\x64","\x94","\x37"),
	HX_HCSTRING("NOTEQUAL","\xc1","\xc1","\xe9","\xc8"),
	HX_HCSTRING("GEQUAL","\xed","\xa5","\xc7","\x53"),
	HX_HCSTRING("ALWAYS","\xcf","\xba","\x59","\xf9"),
	HX_HCSTRING("KEEP","\x85","\x98","\xc7","\x31"),
	HX_HCSTRING("REPLACE","\x14","\x1c","\xfc","\x2a"),
	HX_HCSTRING("INCR","\xd4","\xfd","\x7b","\x30"),
	HX_HCSTRING("DECR","\x70","\x18","\x27","\x2d"),
	HX_HCSTRING("INVERT","\x16","\x93","\x5b","\x52"),
	HX_HCSTRING("INCR_WRAP","\x55","\x7f","\x68","\x2c"),
	HX_HCSTRING("DECR_WRAP","\x39","\x6f","\xeb","\x0a"),
	HX_HCSTRING("VENDOR","\x88","\x91","\x19","\x51"),
	HX_HCSTRING("RENDERER","\x43","\x55","\x61","\x0c"),
	HX_HCSTRING("VERSION","\xf8","\xba","\xc5","\xfc"),
	HX_HCSTRING("NEAREST","\x3e","\xec","\x9d","\xe5"),
	HX_HCSTRING("LINEAR","\xe5","\xfd","\x22","\x9f"),
	HX_HCSTRING("NEAREST_MIPMAP_NEAREST","\x68","\xb9","\x63","\x7e"),
	HX_HCSTRING("LINEAR_MIPMAP_NEAREST","\xa1","\x9b","\xa4","\x65"),
	HX_HCSTRING("NEAREST_MIPMAP_LINEAR","\xfb","\x83","\xf2","\x3b"),
	HX_HCSTRING("LINEAR_MIPMAP_LINEAR","\xe2","\x8b","\xf8","\x99"),
	HX_HCSTRING("TEXTURE_MAG_FILTER","\x88","\xff","\xd5","\x1e"),
	HX_HCSTRING("TEXTURE_MIN_FILTER","\x69","\x66","\xc2","\x46"),
	HX_HCSTRING("TEXTURE_WRAP_S","\xa2","\x2d","\xc3","\xfe"),
	HX_HCSTRING("TEXTURE_WRAP_T","\xa3","\x2d","\xc3","\xfe"),
	HX_HCSTRING("TEXTURE_2D","\x16","\x0c","\xf8","\xa2"),
	HX_HCSTRING("TEXTURE","\xbb","\x9c","\xb4","\x1e"),
	HX_HCSTRING("TEXTURE_CUBE_MAP","\x36","\x7a","\xe1","\xad"),
	HX_HCSTRING("TEXTURE_BINDING_CUBE_MAP","\xd0","\x69","\x98","\x75"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_X","\xbb","\x1c","\xee","\x24"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_X","\x77","\x03","\xe2","\x6b"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Y","\xbc","\x1c","\xee","\x24"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Y","\x78","\x03","\xe2","\x6b"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_POSITIVE_Z","\xbd","\x1c","\xee","\x24"),
	HX_HCSTRING("TEXTURE_CUBE_MAP_NEGATIVE_Z","\x79","\x03","\xe2","\x6b"),
	HX_HCSTRING("MAX_CUBE_MAP_TEXTURE_SIZE","\x77","\xb9","\x24","\x9d"),
	HX_HCSTRING("TEXTURE0","\x15","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE1","\x16","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE2","\x17","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE3","\x18","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE4","\x19","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE5","\x1a","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE6","\x1b","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE7","\x1c","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE8","\x1d","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE9","\x1e","\x87","\x54","\xbf"),
	HX_HCSTRING("TEXTURE10","\x5a","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE11","\x5b","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE12","\x5c","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE13","\x5d","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE14","\x5e","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE15","\x5f","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE16","\x60","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE17","\x61","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE18","\x62","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE19","\x63","\xac","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE20","\x39","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE21","\x3a","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE22","\x3b","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE23","\x3c","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE24","\x3d","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE25","\x3e","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE26","\x3f","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE27","\x40","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE28","\x41","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE29","\x42","\xad","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE30","\x18","\xae","\xa1","\xaa"),
	HX_HCSTRING("TEXTURE31","\x19","\xae","\xa1","\xaa"),
	HX_HCSTRING("ACTIVE_TEXTURE","\x02","\x1a","\x22","\xce"),
	HX_HCSTRING("REPEAT","\x5b","\x43","\xff","\xb8"),
	HX_HCSTRING("CLAMP_TO_EDGE","\x1d","\xfc","\x5a","\x96"),
	HX_HCSTRING("MIRRORED_REPEAT","\x5c","\x94","\x80","\x4a"),
	HX_HCSTRING("FLOAT_VEC2","\x61","\xac","\xa4","\xeb"),
	HX_HCSTRING("FLOAT_VEC3","\x62","\xac","\xa4","\xeb"),
	HX_HCSTRING("FLOAT_VEC4","\x63","\xac","\xa4","\xeb"),
	HX_HCSTRING("INT_VEC2","\x2e","\x14","\x05","\x7d"),
	HX_HCSTRING("INT_VEC3","\x2f","\x14","\x05","\x7d"),
	HX_HCSTRING("INT_VEC4","\x30","\x14","\x05","\x7d"),
	HX_HCSTRING("BOOL","\x2a","\x4c","\xdc","\x2b"),
	HX_HCSTRING("BOOL_VEC2","\xf3","\x66","\x2b","\x2d"),
	HX_HCSTRING("BOOL_VEC3","\xf4","\x66","\x2b","\x2d"),
	HX_HCSTRING("BOOL_VEC4","\xf5","\x66","\x2b","\x2d"),
	HX_HCSTRING("FLOAT_MAT2","\x95","\xc6","\xae","\xe5"),
	HX_HCSTRING("FLOAT_MAT3","\x96","\xc6","\xae","\xe5"),
	HX_HCSTRING("FLOAT_MAT4","\x97","\xc6","\xae","\xe5"),
	HX_HCSTRING("SAMPLER_2D","\x09","\x2a","\x93","\x6e"),
	HX_HCSTRING("SAMPLER_CUBE","\xec","\x3e","\x82","\xa4"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_ENABLED","\x61","\x99","\x09","\x66"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_SIZE","\xc1","\x07","\xfd","\x08"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_STRIDE","\x19","\x2b","\x41","\x58"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_TYPE","\xba","\x59","\xb2","\x09"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_NORMALIZED","\x37","\xb7","\x22","\x78"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_POINTER","\x9d","\x55","\xfa","\x38"),
	HX_HCSTRING("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","\xa6","\x80","\x67","\x97"),
	HX_HCSTRING("VERTEX_PROGRAM_POINT_SIZE","\xe6","\x56","\xbe","\x34"),
	HX_HCSTRING("POINT_SPRITE","\x74","\x93","\x5c","\x14"),
	HX_HCSTRING("COMPILE_STATUS","\xde","\xcb","\x4e","\x8c"),
	HX_HCSTRING("LOW_FLOAT","\x31","\x04","\x74","\xe4"),
	HX_HCSTRING("MEDIUM_FLOAT","\xf2","\x8a","\x46","\xb9"),
	HX_HCSTRING("HIGH_FLOAT","\x9f","\xf9","\x3b","\x47"),
	HX_HCSTRING("LOW_INT","\x44","\x28","\x70","\x45"),
	HX_HCSTRING("MEDIUM_INT","\xc5","\xcc","\xaf","\x4f"),
	HX_HCSTRING("HIGH_INT","\x32","\x46","\x02","\x09"),
	HX_HCSTRING("FRAMEBUFFER","\xcd","\x20","\x84","\x50"),
	HX_HCSTRING("RENDERBUFFER","\xd6","\xa4","\xa4","\xa9"),
	HX_HCSTRING("RGBA4","\x00","\x05","\xfc","\x65"),
	HX_HCSTRING("RGB5_A1","\x47","\x8f","\xf9","\xd8"),
	HX_HCSTRING("RGB565","\xe7","\x41","\x7f","\xd6"),
	HX_HCSTRING("DEPTH_COMPONENT16","\x26","\xcc","\x68","\x43"),
	HX_HCSTRING("STENCIL_INDEX","\x0f","\x79","\xb6","\x97"),
	HX_HCSTRING("STENCIL_INDEX8","\x49","\x74","\xf3","\x27"),
	HX_HCSTRING("DEPTH_STENCIL","\x40","\x2f","\x20","\x2b"),
	HX_HCSTRING("RENDERBUFFER_WIDTH","\x7d","\x1e","\xe1","\x43"),
	HX_HCSTRING("RENDERBUFFER_HEIGHT","\x70","\x07","\x69","\xd7"),
	HX_HCSTRING("RENDERBUFFER_INTERNAL_FORMAT","\x90","\xda","\xeb","\xb5"),
	HX_HCSTRING("RENDERBUFFER_RED_SIZE","\x98","\xa5","\x58","\x5e"),
	HX_HCSTRING("RENDERBUFFER_GREEN_SIZE","\x26","\x9b","\x7d","\x3b"),
	HX_HCSTRING("RENDERBUFFER_BLUE_SIZE","\xdd","\x93","\x86","\xdd"),
	HX_HCSTRING("RENDERBUFFER_ALPHA_SIZE","\xab","\xf0","\x5d","\x87"),
	HX_HCSTRING("RENDERBUFFER_DEPTH_SIZE","\xe6","\x90","\x24","\xc3"),
	HX_HCSTRING("RENDERBUFFER_STENCIL_SIZE","\x8d","\xd5","\x5a","\x9d"),
	HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","\x50","\x22","\x44","\x50"),
	HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","\xe1","\xa1","\x3a","\x4c"),
	HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","\xf6","\x9b","\xba","\x81"),
	HX_HCSTRING("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","\xdc","\x4c","\x39","\x8a"),
	HX_HCSTRING("COLOR_ATTACHMENT0","\xb1","\x9a","\xfe","\x86"),
	HX_HCSTRING("DEPTH_ATTACHMENT","\xff","\x54","\xcd","\xe9"),
	HX_HCSTRING("STENCIL_ATTACHMENT","\xa6","\x8c","\x28","\x01"),
	HX_HCSTRING("DEPTH_STENCIL_ATTACHMENT","\xc2","\xe1","\xe1","\x9f"),
	HX_HCSTRING("NONE","\xb8","\xda","\xca","\x33"),
	HX_HCSTRING("FRAMEBUFFER_COMPLETE","\xab","\x65","\x7d","\xea"),
	HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_ATTACHMENT","\xf2","\xcf","\xb7","\x1d"),
	HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","\x8b","\x0a","\xcd","\x77"),
	HX_HCSTRING("FRAMEBUFFER_INCOMPLETE_DIMENSIONS","\x5c","\x86","\xe4","\x1c"),
	HX_HCSTRING("FRAMEBUFFER_UNSUPPORTED","\xe3","\xa6","\x4e","\xc8"),
	HX_HCSTRING("FRAMEBUFFER_BINDING","\x73","\xee","\xae","\xc5"),
	HX_HCSTRING("RENDERBUFFER_BINDING","\x7c","\x23","\x70","\x23"),
	HX_HCSTRING("MAX_RENDERBUFFER_SIZE","\x4f","\xd4","\x3d","\x65"),
	HX_HCSTRING("INVALID_FRAMEBUFFER_OPERATION","\x2d","\xd4","\xc5","\x43"),
	HX_HCSTRING("UNPACK_FLIP_Y_WEBGL","\x0e","\x9f","\x94","\x9d"),
	HX_HCSTRING("UNPACK_PREMULTIPLY_ALPHA_WEBGL","\x73","\x5d","\xcb","\xc6"),
	HX_HCSTRING("CONTEXT_LOST_WEBGL","\x6e","\x67","\x71","\x45"),
	HX_HCSTRING("UNPACK_COLORSPACE_CONVERSION_WEBGL","\x9f","\xd9","\xf0","\xb9"),
	HX_HCSTRING("BROWSER_DEFAULT_WEBGL","\x04","\x04","\x92","\xc0"),
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("__currentProgram","\x6b","\x4a","\xcd","\x35"),
	HX_HCSTRING("activeTexture","\xb5","\x13","\xaa","\x56"),
	HX_HCSTRING("attachShader","\xca","\xd0","\x77","\xb2"),
	HX_HCSTRING("bindAttribLocation","\x3c","\xa6","\x30","\x1e"),
	HX_HCSTRING("bindBuffer","\x9d","\x92","\xbe","\xf8"),
	HX_HCSTRING("bindFramebuffer","\x30","\xc6","\x61","\xe7"),
	HX_HCSTRING("bindRenderbuffer","\x33","\xb6","\xb7","\x14"),
	HX_HCSTRING("bindTexture","\x9e","\xdc","\x51","\x9b"),
	HX_HCSTRING("blendColor","\x52","\x33","\xb4","\xe2"),
	HX_HCSTRING("blendEquation","\xfd","\x98","\xad","\x02"),
	HX_HCSTRING("blendEquationSeparate","\x80","\x39","\x68","\xa7"),
	HX_HCSTRING("blendFunc","\x35","\xfc","\x9b","\x07"),
	HX_HCSTRING("blendFuncSeparate","\xb8","\x94","\xc0","\xca"),
	HX_HCSTRING("bufferData","\x4a","\xbf","\x73","\x93"),
	HX_HCSTRING("bufferSubData","\xaa","\xf6","\xe4","\x45"),
	HX_HCSTRING("checkFramebufferStatus","\x17","\x26","\x75","\x0a"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("clearColor","\x96","\xb0","\x66","\x1f"),
	HX_HCSTRING("clearDepth","\x36","\x30","\x34","\xac"),
	HX_HCSTRING("clearStencil","\xef","\x6f","\x82","\x5b"),
	HX_HCSTRING("colorMask","\xef","\xcb","\xc3","\x23"),
	HX_HCSTRING("compileShader","\xf8","\x70","\xb2","\xda"),
	HX_HCSTRING("compressedTexImage2D","\xa7","\xd8","\x5d","\x24"),
	HX_HCSTRING("compressedTexSubImage2D","\xd3","\xb5","\x7d","\x36"),
	HX_HCSTRING("copyTexImage2D","\xdb","\xd0","\x76","\xe4"),
	HX_HCSTRING("copyTexSubImage2D","\x1f","\xd6","\xae","\xa4"),
	HX_HCSTRING("createBuffer","\x1c","\xfd","\xe9","\xf2"),
	HX_HCSTRING("createFramebuffer","\x51","\xef","\xe8","\xcc"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("createRenderbuffer","\xf2","\x89","\x74","\x05"),
	HX_HCSTRING("createShader","\x41","\xff","\x75","\x3f"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("cullFace","\x6f","\xe7","\x31","\xac"),
	HX_HCSTRING("deleteBuffer","\x8b","\xe3","\x2c","\x37"),
	HX_HCSTRING("deleteFramebuffer","\x82","\x56","\x01","\x50"),
	HX_HCSTRING("deleteProgram","\x99","\xdd","\x82","\x52"),
	HX_HCSTRING("deleteRenderbuffer","\xa1","\x6d","\xb6","\x37"),
	HX_HCSTRING("deleteShader","\xb0","\xe5","\xb8","\x83"),
	HX_HCSTRING("deleteTexture","\xf0","\x5b","\x6a","\xfd"),
	HX_HCSTRING("depthFunc","\xe7","\x45","\x48","\x9a"),
	HX_HCSTRING("depthMask","\x8f","\x9b","\xd9","\x9e"),
	HX_HCSTRING("depthRange","\xba","\x99","\x8b","\x40"),
	HX_HCSTRING("detachShader","\xd8","\xd0","\xad","\xea"),
	HX_HCSTRING("disable","\xe8","\x69","\x58","\xb1"),
	HX_HCSTRING("disableVertexAttribArray","\xe3","\x69","\x74","\x4a"),
	HX_HCSTRING("drawArrays","\xde","\xf3","\xb3","\xf9"),
	HX_HCSTRING("drawElements","\x5b","\xc2","\xb7","\x59"),
	HX_HCSTRING("enable","\x83","\xae","\x87","\xf8"),
	HX_HCSTRING("enableVertexAttribArray","\xe8","\x46","\x5a","\xac"),
	HX_HCSTRING("finish","\x53","\x40","\x7f","\x86"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("framebufferRenderbuffer","\x63","\xdd","\xb2","\x36"),
	HX_HCSTRING("framebufferTexture2D","\xc0","\x66","\x22","\x24"),
	HX_HCSTRING("frontFace","\xe6","\x01","\xc1","\x80"),
	HX_HCSTRING("generateMipmap","\x9d","\xd6","\x0d","\x5b"),
	HX_HCSTRING("getActiveAttrib","\x66","\x8b","\x22","\x63"),
	HX_HCSTRING("getActiveUniform","\x98","\x35","\x4e","\xd7"),
	HX_HCSTRING("getAttachedShaders","\xb4","\x2e","\x77","\x93"),
	HX_HCSTRING("getAttribLocation","\xd5","\x1a","\x10","\x5d"),
	HX_HCSTRING("getBufferParameter","\x93","\x58","\xb4","\x14"),
	HX_HCSTRING("getContextAttributes","\x30","\xda","\xe1","\xad"),
	HX_HCSTRING("getError","\x52","\xdb","\x00","\xd3"),
	HX_HCSTRING("getExtension","\x09","\x30","\x67","\xf4"),
	HX_HCSTRING("getFramebufferAttachmentParameter","\x8f","\xbf","\x8d","\xff"),
	HX_HCSTRING("getParameter","\x33","\xd2","\x06","\x58"),
	HX_HCSTRING("getProgramInfoLog","\xc8","\xf1","\xf2","\xcd"),
	HX_HCSTRING("getProgramParameter","\x3b","\xc3","\x9c","\x96"),
	HX_HCSTRING("getRenderbufferParameter","\x7d","\xc1","\xd7","\x3c"),
	HX_HCSTRING("getShaderInfoLog","\x9b","\xbd","\xc8","\xf3"),
	HX_HCSTRING("getShaderParameter","\xce","\x69","\x5b","\x36"),
	HX_HCSTRING("getShaderPrecisionFormat","\xfa","\xb8","\xcf","\xce"),
	HX_HCSTRING("getShaderSource","\x96","\xa3","\x04","\xc5"),
	HX_HCSTRING("getSupportedExtensions","\xec","\x78","\x6d","\xa1"),
	HX_HCSTRING("getTexParameter","\x78","\x98","\xd3","\xd2"),
	HX_HCSTRING("getUniform","\x3e","\xc7","\xc5","\x04"),
	HX_HCSTRING("getUniformLocation","\x93","\x5f","\xd4","\x4f"),
	HX_HCSTRING("getVertexAttrib","\x84","\x2f","\x1c","\xa3"),
	HX_HCSTRING("getVertexAttribOffset","\x37","\xb6","\xce","\x56"),
	HX_HCSTRING("hint","\x87","\x3d","\x0e","\x45"),
	HX_HCSTRING("isBuffer","\x8a","\x58","\xfe","\x28"),
	HX_HCSTRING("isContextLost","\xa9","\xdf","\xdf","\x2d"),
	HX_HCSTRING("isEnabled","\xb7","\x81","\x2f","\x82"),
	HX_HCSTRING("isFramebuffer","\x23","\x65","\x6c","\x83"),
	HX_HCSTRING("isProgram","\xba","\xc7","\xf7","\xf7"),
	HX_HCSTRING("isRenderbuffer","\xe0","\x2b","\xf8","\x01"),
	HX_HCSTRING("isShader","\xaf","\x5a","\x8a","\x75"),
	HX_HCSTRING("isTexture","\x11","\x46","\xdf","\xa2"),
	HX_HCSTRING("lineWidth","\x72","\xb9","\x5d","\x11"),
	HX_HCSTRING("linkProgram","\xaa","\xad","\x7b","\x89"),
	HX_HCSTRING("pixelStorei","\x8e","\x34","\xc8","\x80"),
	HX_HCSTRING("polygonOffset","\xad","\x25","\x4d","\x66"),
	HX_HCSTRING("readPixels","\x23","\xd3","\x25","\x86"),
	HX_HCSTRING("renderbufferStorage","\x05","\xa1","\x70","\x87"),
	HX_HCSTRING("sampleCoverage","\x32","\x68","\x81","\x3b"),
	HX_HCSTRING("scissor","\x1c","\x28","\xe7","\x04"),
	HX_HCSTRING("shaderSource","\xe0","\x4d","\x1a","\xa2"),
	HX_HCSTRING("stencilFunc","\x60","\x83","\xbe","\x40"),
	HX_HCSTRING("stencilFuncSeparate","\xe3","\xbe","\xce","\xb2"),
	HX_HCSTRING("stencilMask","\x08","\xd9","\x4f","\x45"),
	HX_HCSTRING("stencilMaskSeparate","\x8b","\xfc","\xa9","\xc6"),
	HX_HCSTRING("stencilOp","\x3d","\x7a","\xec","\x56"),
	HX_HCSTRING("stencilOpSeparate","\xc0","\x5a","\x4a","\x53"),
	HX_HCSTRING("texImage2D","\xc6","\x7c","\x67","\xb9"),
	HX_HCSTRING("texParameterf","\x64","\x27","\x31","\x3c"),
	HX_HCSTRING("texParameteri","\x67","\x27","\x31","\x3c"),
	HX_HCSTRING("texSubImage2D","\x14","\x2f","\x90","\x28"),
	HX_HCSTRING("uniform1f","\x49","\x21","\xde","\x07"),
	HX_HCSTRING("uniform1fv","\x0d","\xff","\x7e","\xda"),
	HX_HCSTRING("uniform1i","\x4c","\x21","\xde","\x07"),
	HX_HCSTRING("uniform1iv","\xaa","\x01","\x7f","\xda"),
	HX_HCSTRING("uniform2f","\x28","\x22","\xde","\x07"),
	HX_HCSTRING("uniform2fv","\x4e","\xc1","\x7f","\xda"),
	HX_HCSTRING("uniform2i","\x2b","\x22","\xde","\x07"),
	HX_HCSTRING("uniform2iv","\xeb","\xc3","\x7f","\xda"),
	HX_HCSTRING("uniform3f","\x07","\x23","\xde","\x07"),
	HX_HCSTRING("uniform3fv","\x8f","\x83","\x80","\xda"),
	HX_HCSTRING("uniform3i","\x0a","\x23","\xde","\x07"),
	HX_HCSTRING("uniform3iv","\x2c","\x86","\x80","\xda"),
	HX_HCSTRING("uniform4f","\xe6","\x23","\xde","\x07"),
	HX_HCSTRING("uniform4fv","\xd0","\x45","\x81","\xda"),
	HX_HCSTRING("uniform4i","\xe9","\x23","\xde","\x07"),
	HX_HCSTRING("uniform4iv","\x6d","\x48","\x81","\xda"),
	HX_HCSTRING("uniformMatrix2fv","\x8d","\x8a","\x59","\xc5"),
	HX_HCSTRING("uniformMatrix3fv","\xce","\x4c","\x5a","\xc5"),
	HX_HCSTRING("uniformMatrix4fv","\x0f","\x0f","\x5b","\xc5"),
	HX_HCSTRING("useProgram","\xfd","\x6c","\xac","\xf6"),
	HX_HCSTRING("validateProgram","\x8e","\x80","\x0f","\xef"),
	HX_HCSTRING("vertexAttrib1f","\x63","\x94","\xb6","\x53"),
	HX_HCSTRING("vertexAttrib1fv","\xb3","\x42","\x0b","\xec"),
	HX_HCSTRING("vertexAttrib2f","\x42","\x95","\xb6","\x53"),
	HX_HCSTRING("vertexAttrib2fv","\xf4","\x04","\x0c","\xec"),
	HX_HCSTRING("vertexAttrib3f","\x21","\x96","\xb6","\x53"),
	HX_HCSTRING("vertexAttrib3fv","\x35","\xc7","\x0c","\xec"),
	HX_HCSTRING("vertexAttrib4f","\x00","\x97","\xb6","\x53"),
	HX_HCSTRING("vertexAttrib4fv","\x76","\x89","\x0d","\xec"),
	HX_HCSTRING("vertexAttribPointer","\x8f","\x04","\xb6","\x3f"),
	HX_HCSTRING("viewport","\x66","\x4c","\xa5","\x9c"),
	HX_HCSTRING("get_version","\x2f","\x47","\xec","\x02"),
	::String(null()) };

static void NativeGLRenderContext_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeGLRenderContext_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeGLRenderContext_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeGLRenderContext_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeGLRenderContext_obj::__mClass;

void NativeGLRenderContext_obj::__register()
{
	hx::Object *dummy = new NativeGLRenderContext_obj;
	NativeGLRenderContext_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._backend.native.NativeGLRenderContext","\x46","\x4a","\xe7","\x3c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeGLRenderContext_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeGLRenderContext_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeGLRenderContext_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeGLRenderContext_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeGLRenderContext_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeGLRenderContext_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _backend
} // end namespace native
