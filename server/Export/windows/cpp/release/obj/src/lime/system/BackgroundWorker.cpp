// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_cpp_vm_Deque
#include <cpp/vm/Deque.h>
#endif
#ifndef INCLUDED_cpp_vm_Thread
#include <cpp/vm/Thread.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Dynamic_Void
#include <lime/app/_Event_Dynamic_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_system_BackgroundWorker
#include <lime/system/BackgroundWorker.h>
#endif

namespace lime{
namespace _hx_system{

void BackgroundWorker_obj::__construct(){
            	HX_STACK_FRAME("lime.system.BackgroundWorker","new",0x36e47924,"lime.system.BackgroundWorker.new","lime/system/BackgroundWorker.hx",21,0x4a0958ac)
            	HX_STACK_THIS(this)
HXLINE(  32)		this->onProgress =  ::lime::app::_Event_Dynamic_Void_obj::__new();
HXLINE(  31)		this->onError =  ::lime::app::_Event_Dynamic_Void_obj::__new();
HXLINE(  30)		this->onComplete =  ::lime::app::_Event_Dynamic_Void_obj::__new();
HXLINE(  29)		this->doWork =  ::lime::app::_Event_Dynamic_Void_obj::__new();
            	}

Dynamic BackgroundWorker_obj::__CreateEmpty() { return new BackgroundWorker_obj; }

hx::ObjectPtr< BackgroundWorker_obj > BackgroundWorker_obj::__new()
{
	hx::ObjectPtr< BackgroundWorker_obj > _hx_result = new BackgroundWorker_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic BackgroundWorker_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BackgroundWorker_obj > _hx_result = new BackgroundWorker_obj();
	_hx_result->__construct();
	return _hx_result;
}

void BackgroundWorker_obj::cancel(){
            	HX_STACK_FRAME("lime.system.BackgroundWorker","cancel",0x890a1736,"lime.system.BackgroundWorker.cancel","lime/system/BackgroundWorker.hx",49,0x4a0958ac)
            	HX_STACK_THIS(this)
HXLINE(  51)		this->canceled = true;
HXLINE(  55)		this->_hx___workerThread = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BackgroundWorker_obj,cancel,(void))

void BackgroundWorker_obj::run( ::Dynamic message){
            	HX_STACK_FRAME("lime.system.BackgroundWorker","run",0x36e7900f,"lime.system.BackgroundWorker.run","lime/system/BackgroundWorker.hx",62,0x4a0958ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
HXLINE(  64)		this->canceled = false;
HXLINE(  65)		this->completed = false;
HXLINE(  66)		this->_hx___runMessage = message;
HXLINE(  70)		this->_hx___messageQueue =  ::cpp::vm::Deque_obj::__new();
HXLINE(  71)		this->_hx___workerThread = ::cpp::vm::Thread_obj::create(this->_hx___doWork_dyn());
HXLINE(  73)		::lime::app::Application_obj::current->onUpdate->add(this->_hx___update_dyn(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundWorker_obj,run,(void))

void BackgroundWorker_obj::sendComplete( ::Dynamic message){
            	HX_STACK_FRAME("lime.system.BackgroundWorker","sendComplete",0x4fa2f0dd,"lime.system.BackgroundWorker.sendComplete","lime/system/BackgroundWorker.hx",84,0x4a0958ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
HXLINE(  86)		this->completed = true;
HXLINE(  90)		this->_hx___messageQueue->add(::lime::_hx_system::BackgroundWorker_obj::MESSAGE_COMPLETE);
HXLINE(  91)		this->_hx___messageQueue->add(message);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundWorker_obj,sendComplete,(void))

void BackgroundWorker_obj::sendError( ::Dynamic message){
            	HX_STACK_FRAME("lime.system.BackgroundWorker","sendError",0xa2871d24,"lime.system.BackgroundWorker.sendError","lime/system/BackgroundWorker.hx",107,0x4a0958ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
HXLINE( 111)		this->_hx___messageQueue->add(::lime::_hx_system::BackgroundWorker_obj::MESSAGE_ERROR);
HXLINE( 112)		this->_hx___messageQueue->add(message);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundWorker_obj,sendError,(void))

void BackgroundWorker_obj::sendProgress( ::Dynamic message){
            	HX_STACK_FRAME("lime.system.BackgroundWorker","sendProgress",0x5605e7d1,"lime.system.BackgroundWorker.sendProgress","lime/system/BackgroundWorker.hx",132,0x4a0958ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
HXLINE( 132)		this->_hx___messageQueue->add(message);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundWorker_obj,sendProgress,(void))

void BackgroundWorker_obj::_hx___doWork(){
            	HX_STACK_FRAME("lime.system.BackgroundWorker","__doWork",0x193122d8,"lime.system.BackgroundWorker.__doWork","lime/system/BackgroundWorker.hx",149,0x4a0958ac)
            	HX_STACK_THIS(this)
HXLINE( 149)		this->doWork->dispatch(this->_hx___runMessage);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BackgroundWorker_obj,_hx___doWork,(void))

void BackgroundWorker_obj::_hx___update(Int deltaTime){
            	HX_STACK_FRAME("lime.system.BackgroundWorker","__update",0x813601e5,"lime.system.BackgroundWorker.__update","lime/system/BackgroundWorker.hx",169,0x4a0958ac)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
HXLINE( 173)		HX_VARI(  ::Dynamic,message) = this->_hx___messageQueue->pop(false);
HXLINE( 175)		Bool _hx_tmp = hx::IsNotNull( message );
HXDLIN( 175)		if (_hx_tmp) {
HXLINE( 177)			if (hx::IsEq( message,::lime::_hx_system::BackgroundWorker_obj::MESSAGE_ERROR )) {
HXLINE( 179)				::lime::app::Application_obj::current->onUpdate->remove(this->_hx___update_dyn());
HXLINE( 181)				Bool _hx_tmp1 = !(this->canceled);
HXDLIN( 181)				if (_hx_tmp1) {
HXLINE( 183)					this->canceled = true;
HXLINE( 184)					 ::Dynamic _hx_tmp2 = this->_hx___messageQueue->pop(false);
HXDLIN( 184)					this->onError->dispatch(_hx_tmp2);
            				}
            			}
            			else {
HXLINE( 188)				if (hx::IsEq( message,::lime::_hx_system::BackgroundWorker_obj::MESSAGE_COMPLETE )) {
HXLINE( 190)					::lime::app::Application_obj::current->onUpdate->remove(this->_hx___update_dyn());
HXLINE( 192)					Bool _hx_tmp3 = !(this->canceled);
HXDLIN( 192)					if (_hx_tmp3) {
HXLINE( 194)						this->canceled = true;
HXLINE( 195)						 ::Dynamic _hx_tmp4 = this->_hx___messageQueue->pop(false);
HXDLIN( 195)						this->onComplete->dispatch(_hx_tmp4);
            					}
            				}
            				else {
HXLINE( 201)					Bool _hx_tmp5 = !(this->canceled);
HXDLIN( 201)					if (_hx_tmp5) {
HXLINE( 203)						this->onProgress->dispatch(message);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BackgroundWorker_obj,_hx___update,(void))

::String BackgroundWorker_obj::MESSAGE_COMPLETE;

::String BackgroundWorker_obj::MESSAGE_ERROR;


BackgroundWorker_obj::BackgroundWorker_obj()
{
}

void BackgroundWorker_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BackgroundWorker);
	HX_MARK_MEMBER_NAME(canceled,"canceled");
	HX_MARK_MEMBER_NAME(completed,"completed");
	HX_MARK_MEMBER_NAME(doWork,"doWork");
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(onError,"onError");
	HX_MARK_MEMBER_NAME(onProgress,"onProgress");
	HX_MARK_MEMBER_NAME(_hx___runMessage,"__runMessage");
	HX_MARK_MEMBER_NAME(_hx___messageQueue,"__messageQueue");
	HX_MARK_MEMBER_NAME(_hx___workerThread,"__workerThread");
	HX_MARK_END_CLASS();
}

void BackgroundWorker_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(canceled,"canceled");
	HX_VISIT_MEMBER_NAME(completed,"completed");
	HX_VISIT_MEMBER_NAME(doWork,"doWork");
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(onError,"onError");
	HX_VISIT_MEMBER_NAME(onProgress,"onProgress");
	HX_VISIT_MEMBER_NAME(_hx___runMessage,"__runMessage");
	HX_VISIT_MEMBER_NAME(_hx___messageQueue,"__messageQueue");
	HX_VISIT_MEMBER_NAME(_hx___workerThread,"__workerThread");
}

hx::Val BackgroundWorker_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return hx::Val( run_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"doWork") ) { return hx::Val( doWork); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return hx::Val( cancel_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onError") ) { return hx::Val( onError); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canceled") ) { return hx::Val( canceled); }
		if (HX_FIELD_EQ(inName,"__doWork") ) { return hx::Val( _hx___doWork_dyn()); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { return hx::Val( completed); }
		if (HX_FIELD_EQ(inName,"sendError") ) { return hx::Val( sendError_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete); }
		if (HX_FIELD_EQ(inName,"onProgress") ) { return hx::Val( onProgress); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__runMessage") ) { return hx::Val( _hx___runMessage); }
		if (HX_FIELD_EQ(inName,"sendComplete") ) { return hx::Val( sendComplete_dyn()); }
		if (HX_FIELD_EQ(inName,"sendProgress") ) { return hx::Val( sendProgress_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__messageQueue") ) { return hx::Val( _hx___messageQueue); }
		if (HX_FIELD_EQ(inName,"__workerThread") ) { return hx::Val( _hx___workerThread); }
	}
	return super::__Field(inName,inCallProp);
}

bool BackgroundWorker_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"MESSAGE_ERROR") ) { outValue = MESSAGE_ERROR; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"MESSAGE_COMPLETE") ) { outValue = MESSAGE_COMPLETE; return true; }
	}
	return false;
}

hx::Val BackgroundWorker_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"doWork") ) { doWork=inValue.Cast<  ::lime::app::_Event_Dynamic_Void >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onError") ) { onError=inValue.Cast<  ::lime::app::_Event_Dynamic_Void >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"canceled") ) { canceled=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { completed=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::lime::app::_Event_Dynamic_Void >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onProgress") ) { onProgress=inValue.Cast<  ::lime::app::_Event_Dynamic_Void >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__runMessage") ) { _hx___runMessage=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__messageQueue") ) { _hx___messageQueue=inValue.Cast<  ::cpp::vm::Deque >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__workerThread") ) { _hx___workerThread=inValue.Cast<  ::cpp::vm::Thread >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BackgroundWorker_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"MESSAGE_ERROR") ) { MESSAGE_ERROR=ioValue.Cast< ::String >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"MESSAGE_COMPLETE") ) { MESSAGE_COMPLETE=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void BackgroundWorker_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f"));
	outFields->push(HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"));
	outFields->push(HX_HCSTRING("doWork","\xfc","\xa6","\x00","\x1f"));
	outFields->push(HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"));
	outFields->push(HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"));
	outFields->push(HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"));
	outFields->push(HX_HCSTRING("__runMessage","\xdc","\x40","\x21","\x3d"));
	outFields->push(HX_HCSTRING("__messageQueue","\x6a","\xf9","\x4b","\xd5"));
	outFields->push(HX_HCSTRING("__workerThread","\x08","\x15","\x01","\x36"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BackgroundWorker_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(BackgroundWorker_obj,canceled),HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f")},
	{hx::fsBool,(int)offsetof(BackgroundWorker_obj,completed),HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f")},
	{hx::fsObject /*::lime::app::_Event_Dynamic_Void*/ ,(int)offsetof(BackgroundWorker_obj,doWork),HX_HCSTRING("doWork","\xfc","\xa6","\x00","\x1f")},
	{hx::fsObject /*::lime::app::_Event_Dynamic_Void*/ ,(int)offsetof(BackgroundWorker_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsObject /*::lime::app::_Event_Dynamic_Void*/ ,(int)offsetof(BackgroundWorker_obj,onError),HX_HCSTRING("onError","\x29","\x6a","\x67","\x09")},
	{hx::fsObject /*::lime::app::_Event_Dynamic_Void*/ ,(int)offsetof(BackgroundWorker_obj,onProgress),HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BackgroundWorker_obj,_hx___runMessage),HX_HCSTRING("__runMessage","\xdc","\x40","\x21","\x3d")},
	{hx::fsObject /*::cpp::vm::Deque*/ ,(int)offsetof(BackgroundWorker_obj,_hx___messageQueue),HX_HCSTRING("__messageQueue","\x6a","\xf9","\x4b","\xd5")},
	{hx::fsObject /*::cpp::vm::Thread*/ ,(int)offsetof(BackgroundWorker_obj,_hx___workerThread),HX_HCSTRING("__workerThread","\x08","\x15","\x01","\x36")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BackgroundWorker_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &BackgroundWorker_obj::MESSAGE_COMPLETE,HX_HCSTRING("MESSAGE_COMPLETE","\x91","\x91","\x29","\x31")},
	{hx::fsString,(void *) &BackgroundWorker_obj::MESSAGE_ERROR,HX_HCSTRING("MESSAGE_ERROR","\xd0","\x8b","\x51","\x62")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BackgroundWorker_obj_sMemberFields[] = {
	HX_HCSTRING("canceled","\x59","\x18","\x26","\x1f"),
	HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"),
	HX_HCSTRING("doWork","\xfc","\xa6","\x00","\x1f"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"),
	HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"),
	HX_HCSTRING("__runMessage","\xdc","\x40","\x21","\x3d"),
	HX_HCSTRING("__messageQueue","\x6a","\xf9","\x4b","\xd5"),
	HX_HCSTRING("__workerThread","\x08","\x15","\x01","\x36"),
	HX_HCSTRING("cancel","\x7a","\xed","\x33","\xb8"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	HX_HCSTRING("sendComplete","\x21","\xd2","\x84","\xc0"),
	HX_HCSTRING("sendError","\x60","\x89","\x99","\x33"),
	HX_HCSTRING("sendProgress","\x15","\xc9","\xe7","\xc6"),
	HX_HCSTRING("__doWork","\x1c","\x12","\x30","\xc7"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	::String(null()) };

static void BackgroundWorker_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BackgroundWorker_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BackgroundWorker_obj::MESSAGE_COMPLETE,"MESSAGE_COMPLETE");
	HX_MARK_MEMBER_NAME(BackgroundWorker_obj::MESSAGE_ERROR,"MESSAGE_ERROR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BackgroundWorker_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BackgroundWorker_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BackgroundWorker_obj::MESSAGE_COMPLETE,"MESSAGE_COMPLETE");
	HX_VISIT_MEMBER_NAME(BackgroundWorker_obj::MESSAGE_ERROR,"MESSAGE_ERROR");
};

#endif

hx::Class BackgroundWorker_obj::__mClass;

static ::String BackgroundWorker_obj_sStaticFields[] = {
	HX_HCSTRING("MESSAGE_COMPLETE","\x91","\x91","\x29","\x31"),
	HX_HCSTRING("MESSAGE_ERROR","\xd0","\x8b","\x51","\x62"),
	::String(null())
};

void BackgroundWorker_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.system.BackgroundWorker","\x32","\x57","\xa8","\x7d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BackgroundWorker_obj::__GetStatic;
	__mClass->mSetStaticField = &BackgroundWorker_obj::__SetStatic;
	__mClass->mMarkFunc = BackgroundWorker_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BackgroundWorker_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BackgroundWorker_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BackgroundWorker_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BackgroundWorker_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BackgroundWorker_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BackgroundWorker_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BackgroundWorker_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.system.BackgroundWorker","boot",0xc91e86ee,"lime.system.BackgroundWorker.boot","lime/system/BackgroundWorker.hx",24,0x4a0958ac)
HXLINE(  24)		MESSAGE_COMPLETE = HX_("__COMPLETE__",39,bf,f1,2c);
            	}
{
            	HX_STACK_FRAME("lime.system.BackgroundWorker","boot",0xc91e86ee,"lime.system.BackgroundWorker.boot","lime/system/BackgroundWorker.hx",25,0x4a0958ac)
HXLINE(  25)		MESSAGE_ERROR = HX_("__ERROR__",a8,e1,2c,eb);
            	}
}

} // end namespace lime
} // end namespace system
