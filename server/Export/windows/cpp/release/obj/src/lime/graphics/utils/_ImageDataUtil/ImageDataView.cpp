// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_utils__ImageDataUtil_ImageDataView
#include <lime/graphics/utils/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif

namespace lime{
namespace graphics{
namespace utils{
namespace _ImageDataUtil{

void ImageDataView_obj::__construct( ::lime::graphics::Image image, ::lime::math::Rectangle rect){
            	HX_STACK_FRAME("lime.graphics.utils._ImageDataUtil.ImageDataView","new",0xaa0478bd,"lime.graphics.utils._ImageDataUtil.ImageDataView.new","lime/graphics/utils/ImageDataUtil.hx",1308,0x494d921f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
HXLINE(1310)		this->image = image;
HXLINE(1312)		Bool _hx_tmp = hx::IsNull( rect );
HXDLIN(1312)		if (_hx_tmp) {
HXLINE(1314)			this->rect = image->get_rect();
            		}
            		else {
HXLINE(1318)			Bool _hx_tmp1 = (rect->x < (int)0);
HXDLIN(1318)			if (_hx_tmp1) {
HXLINE(1318)				rect->x = (int)0;
            			}
HXLINE(1319)			Bool _hx_tmp2 = (rect->y < (int)0);
HXDLIN(1319)			if (_hx_tmp2) {
HXLINE(1319)				rect->y = (int)0;
            			}
HXLINE(1320)			Bool _hx_tmp3 = ((rect->x + rect->width) > image->width);
HXDLIN(1320)			if (_hx_tmp3) {
HXLINE(1320)				rect->width = (image->width - rect->x);
            			}
HXLINE(1321)			Bool _hx_tmp4 = ((rect->y + rect->height) > image->height);
HXDLIN(1321)			if (_hx_tmp4) {
HXLINE(1321)				rect->height = (image->height - rect->y);
            			}
HXLINE(1322)			Bool _hx_tmp5 = (rect->width < (int)0);
HXDLIN(1322)			if (_hx_tmp5) {
HXLINE(1322)				rect->width = (int)0;
            			}
HXLINE(1323)			Bool _hx_tmp6 = (rect->height < (int)0);
HXDLIN(1323)			if (_hx_tmp6) {
HXLINE(1323)				rect->height = (int)0;
            			}
HXLINE(1324)			this->rect = rect;
            		}
HXLINE(1328)		this->stride = image->buffer->get_stride();
HXLINE(1330)		this->x = ::Math_obj::ceil(this->rect->x);
HXLINE(1331)		this->y = ::Math_obj::ceil(this->rect->y);
HXLINE(1332)		this->width = ::Math_obj::floor(this->rect->width);
HXLINE(1333)		this->height = ::Math_obj::floor(this->rect->height);
HXLINE(1334)		Int _hx_tmp7 = (this->stride * (this->y + image->offsetY));
HXDLIN(1334)		Int _hx_tmp8 = ((this->x + image->offsetX) * (int)4);
HXDLIN(1334)		this->offset = (_hx_tmp7 + _hx_tmp8);
            	}

Dynamic ImageDataView_obj::__CreateEmpty() { return new ImageDataView_obj; }

hx::ObjectPtr< ImageDataView_obj > ImageDataView_obj::__new( ::lime::graphics::Image image, ::lime::math::Rectangle rect)
{
	hx::ObjectPtr< ImageDataView_obj > _hx_result = new ImageDataView_obj();
	_hx_result->__construct(image,rect);
	return _hx_result;
}

Dynamic ImageDataView_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataView_obj > _hx_result = new ImageDataView_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void ImageDataView_obj::clip(Int x,Int y,Int width,Int height){
            	HX_STACK_FRAME("lime.graphics.utils._ImageDataUtil.ImageDataView","clip",0x12a517d3,"lime.graphics.utils._ImageDataUtil.ImageDataView.clip","lime/graphics/utils/ImageDataUtil.hx",1339,0x494d921f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1341)		this->rect->_hx___contract(x,y,width,height);
HXLINE(1343)		this->x = ::Math_obj::ceil(this->rect->x);
HXLINE(1344)		this->y = ::Math_obj::ceil(this->rect->y);
HXLINE(1345)		this->width = ::Math_obj::floor(this->rect->width);
HXLINE(1346)		this->height = ::Math_obj::floor(this->rect->height);
HXLINE(1347)		Int _hx_tmp = (this->stride * (this->y + this->image->offsetY));
HXDLIN(1347)		Int _hx_tmp1 = ((this->x + this->image->offsetX) * (int)4);
HXDLIN(1347)		this->offset = (_hx_tmp + _hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC4(ImageDataView_obj,clip,(void))

Int ImageDataView_obj::row(Int y){
            	HX_STACK_FRAME("lime.graphics.utils._ImageDataUtil.ImageDataView","row",0xaa078a77,"lime.graphics.utils._ImageDataUtil.ImageDataView.row","lime/graphics/utils/ImageDataUtil.hx",1354,0x494d921f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(y,"y")
HXLINE(1354)		return (this->offset + (this->stride * y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ImageDataView_obj,row,return )


ImageDataView_obj::ImageDataView_obj()
{
}

void ImageDataView_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ImageDataView);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(stride,"stride");
	HX_MARK_END_CLASS();
}

void ImageDataView_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(stride,"stride");
}

hx::Val ImageDataView_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"row") ) { return hx::Val( row_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect); }
		if (HX_FIELD_EQ(inName,"clip") ) { return hx::Val( clip_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset); }
		if (HX_FIELD_EQ(inName,"stride") ) { return hx::Val( stride); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ImageDataView_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::lime::math::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stride") ) { stride=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ImageDataView_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("stride","\x19","\x20","\x30","\x11"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ImageDataView_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(ImageDataView_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(ImageDataView_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsObject /*::lime::math::Rectangle*/ ,(int)offsetof(ImageDataView_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsInt,(int)offsetof(ImageDataView_obj,stride),HX_HCSTRING("stride","\x19","\x20","\x30","\x11")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ImageDataView_obj_sStaticStorageInfo = 0;
#endif

static ::String ImageDataView_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("stride","\x19","\x20","\x30","\x11"),
	HX_HCSTRING("clip","\xd0","\x6e","\xc2","\x41"),
	HX_HCSTRING("row","\x1a","\xe2","\x56","\x00"),
	::String(null()) };

static void ImageDataView_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageDataView_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageDataView_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageDataView_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageDataView_obj::__mClass;

void ImageDataView_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.utils._ImageDataUtil.ImageDataView","\x4b","\x56","\x58","\xda");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageDataView_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ImageDataView_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ImageDataView_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageDataView_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataView_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataView_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace utils
} // end namespace _ImageDataUtil
