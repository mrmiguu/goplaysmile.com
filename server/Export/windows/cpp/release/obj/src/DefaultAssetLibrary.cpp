// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_ApplicationMain
#include <ApplicationMain.h>
#endif
#ifndef INCLUDED_DefaultAssetLibrary
#include <DefaultAssetLibrary.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED___ASSET__OPENFL__assets_etc_lucon_ttf
#include <__ASSET__OPENFL__assets_etc_lucon_ttf.h>
#endif
#ifndef INCLUDED___ASSET__assets_etc_lucon_ttf
#include <__ASSET__assets_etc_lucon_ttf.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <haxe/Resource.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_lime_utils_Log
#include <lime/utils/Log.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_27_new,"DefaultAssetLibrary","new",0xbc37e41e,"DefaultAssetLibrary.new","DefaultAssetLibrary.hx",27,0x0fc48912)
HX_DEFINE_STACK_FRAME(_hx_pos_fffeb3ab353ef1d6_111_loadManifest,"DefaultAssetLibrary","loadManifest",0x6f596c77,"DefaultAssetLibrary.loadManifest","DefaultAssetLibrary.hx",111,0x0fc48912)

void DefaultAssetLibrary_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_27_new)
            	HX_STACK_THIS(this)
HXLINE(  29)		super::__construct();
HXLINE(  31)		bool _hx_tmp;
HXDLIN(  31)		if (hx::IsNotNull( ::ApplicationMain_obj::config )) {
HXLINE(  31)			_hx_tmp = ::Reflect_obj::hasField(::ApplicationMain_obj::config,HX_("assetsPrefix",75,5a,70,e4));
            		}
            		else {
HXLINE(  31)			_hx_tmp = false;
            		}
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  33)			this->rootPath = ( (::String)(::Reflect_obj::field(::ApplicationMain_obj::config,HX_("assetsPrefix",75,5a,70,e4))) );
            		}
HXLINE(  37)		if (hx::IsNull( this->rootPath )) {
HXLINE(  42)			this->rootPath = (::sys::FileSystem_obj::absolutePath(::haxe::io::Path_obj::directory(::Sys_obj::programPath())) + HX_("/",2f,00,00,00));
            		}
HXLINE(  50)		::openfl::text::Font_obj::registerFont(hx::ClassOf< ::__ASSET__OPENFL__assets_etc_lucon_ttf >());
HXLINE(  62)		this->classTypes->set(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),hx::ClassOf< ::__ASSET__assets_etc_lucon_ttf >());
HXLINE(  63)		this->types->set(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),HX_("FONT",cf,25,81,2e));
HXLINE(  74)		this->loadManifest();
            	}

Dynamic DefaultAssetLibrary_obj::__CreateEmpty() { return new DefaultAssetLibrary_obj; }

void *DefaultAssetLibrary_obj::_hx_vtable = 0;

Dynamic DefaultAssetLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultAssetLibrary_obj > _hx_result = new DefaultAssetLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DefaultAssetLibrary_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3a783d2c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3a783d2c;
	} else {
		return inClassId==(int)0x425552e3;
	}
}

void DefaultAssetLibrary_obj::loadManifest(){
            	HX_STACKFRAME(&_hx_pos_fffeb3ab353ef1d6_111_loadManifest)
            	HX_STACK_THIS(this)
HXLINE( 113)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::Resource_obj::getBytes(HX_("__ASSET_MANIFEST__",fe,d8,3a,3a));
HXLINE( 116)		if (hx::IsNotNull( bytes )) {
HXLINE( 118)			HX_VARI(  ::lime::utils::AssetManifest,manifest) = ::lime::utils::AssetManifest_obj::fromBytes(bytes);
HXLINE( 119)			manifest->basePath = this->rootPath;
HXLINE( 120)			this->_hx___fromManifest(manifest);
            		}
            		else {
HXLINE( 126)			HX_VARI_NAME(  ::lime::utils::AssetManifest,manifest1,"manifest") = ::lime::utils::AssetManifest_obj::fromFile((this->rootPath + HX_("manifest",af,fb,29,d0)));
HXLINE( 128)			if (hx::IsNotNull( manifest1 )) {
HXLINE( 130)				manifest1->basePath = this->rootPath;
HXLINE( 131)				this->_hx___fromManifest(manifest1);
            			}
            			else {
HXLINE( 135)				::lime::utils::Log_obj::warn(HX_("Could not load asset manifest (bytes was null)",21,51,77,e6),hx::SourceInfo(HX_("DefaultAssetLibrary.hx",12,89,c4,0f),135,HX_("DefaultAssetLibrary",2c,3d,78,3a),HX_("loadManifest",f5,e7,92,89)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultAssetLibrary_obj,loadManifest,(void))


hx::ObjectPtr< DefaultAssetLibrary_obj > DefaultAssetLibrary_obj::__new() {
	hx::ObjectPtr< DefaultAssetLibrary_obj > __this = new DefaultAssetLibrary_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< DefaultAssetLibrary_obj > DefaultAssetLibrary_obj::__alloc(hx::Ctx *_hx_ctx) {
	DefaultAssetLibrary_obj *__this = (DefaultAssetLibrary_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DefaultAssetLibrary_obj), true, "DefaultAssetLibrary"));
	*(void **)__this = DefaultAssetLibrary_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

DefaultAssetLibrary_obj::DefaultAssetLibrary_obj()
{
}

void DefaultAssetLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DefaultAssetLibrary);
	HX_MARK_MEMBER_NAME(lastModified,"lastModified");
	HX_MARK_MEMBER_NAME(rootPath,"rootPath");
	HX_MARK_MEMBER_NAME(timer,"timer");
	 ::lime::utils::AssetLibrary_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DefaultAssetLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lastModified,"lastModified");
	HX_VISIT_MEMBER_NAME(rootPath,"rootPath");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	 ::lime::utils::AssetLibrary_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DefaultAssetLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { return hx::Val( rootPath); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastModified") ) { return hx::Val( lastModified); }
		if (HX_FIELD_EQ(inName,"loadManifest") ) { return hx::Val( loadManifest_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DefaultAssetLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { rootPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastModified") ) { lastModified=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DefaultAssetLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78"));
	outFields->push(HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DefaultAssetLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(DefaultAssetLibrary_obj,lastModified),HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78")},
	{hx::fsString,(int)offsetof(DefaultAssetLibrary_obj,rootPath),HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(DefaultAssetLibrary_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DefaultAssetLibrary_obj_sStaticStorageInfo = 0;
#endif

static ::String DefaultAssetLibrary_obj_sMemberFields[] = {
	HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78"),
	HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("loadManifest","\xf5","\xe7","\x92","\x89"),
	::String(null()) };

static void DefaultAssetLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DefaultAssetLibrary_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DefaultAssetLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DefaultAssetLibrary_obj::__mClass,"__mClass");
};

#endif

hx::Class DefaultAssetLibrary_obj::__mClass;

void DefaultAssetLibrary_obj::__register()
{
	hx::Object *dummy = new DefaultAssetLibrary_obj;
	DefaultAssetLibrary_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("DefaultAssetLibrary","\x2c","\x3d","\x78","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DefaultAssetLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DefaultAssetLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DefaultAssetLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DefaultAssetLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultAssetLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultAssetLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

