// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl__Vector_IntVector
#define INCLUDED_openfl__Vector_IntVector

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
HX_DECLARE_CLASS2(openfl,_Vector,IVector)
HX_DECLARE_CLASS2(openfl,_Vector,IntVector)

namespace openfl{
namespace _Vector{


class HXCPP_CLASS_ATTRIBUTES IntVector_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef IntVector_obj OBJ_;
		IntVector_obj();

	public:
		void __construct( ::Dynamic length, ::Dynamic fixed,::Array< Int > array);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._Vector.IntVector")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._Vector.IntVector"); }
		static hx::ObjectPtr< IntVector_obj > __new( ::Dynamic length, ::Dynamic fixed,::Array< Int > array);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~IntVector_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		void unshift_489e4d05( ::Dynamic x);

		 ::Dynamic set_2f4e7a77(Int index, ::Dynamic value);

		Int push_b160819a( ::Dynamic x);

		Int lastIndexOf_12fde4d1( ::Dynamic x, ::Dynamic from);

		void insertAt_771a7002(Int index, ::Dynamic element);

		Int indexOf_12fde4d1( ::Dynamic x, ::Dynamic from);

		 ::Dynamic get_57ed5e34(Int index);
		::String __ToString() const { return HX_HCSTRING("IntVector","\xf2","\xee","\x2f","\x5e"); }

		Bool fixed;
		::Array< Int > _hx___array;
		::Dynamic concat(::Dynamic a);
		::Dynamic concat_dyn();

		::Dynamic copy();
		::Dynamic copy_dyn();

		Int get(Int index);
		::Dynamic get_dyn();

		Int indexOf(Int x, ::Dynamic from);
		::Dynamic indexOf_dyn();

		void insertAt(Int index,Int element);
		::Dynamic insertAt_dyn();

		 ::Dynamic iterator();
		::Dynamic iterator_dyn();

		::String join(::String sep);
		::Dynamic join_dyn();

		Int lastIndexOf(Int x, ::Dynamic from);
		::Dynamic lastIndexOf_dyn();

		 ::Dynamic pop();
		::Dynamic pop_dyn();

		Int push(Int x);
		::Dynamic push_dyn();

		void reverse();
		::Dynamic reverse_dyn();

		Int set(Int index,Int value);
		::Dynamic set_dyn();

		 ::Dynamic shift();
		::Dynamic shift_dyn();

		::Dynamic slice( ::Dynamic startIndex, ::Dynamic endIndex);
		::Dynamic slice_dyn();

		void sort( ::Dynamic f);
		::Dynamic sort_dyn();

		::Dynamic splice(Int pos,Int len);
		::Dynamic splice_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		void unshift(Int x);
		::Dynamic unshift_dyn();

		Int get_length();
		::Dynamic get_length_dyn();

		Int set_length(Int value);
		::Dynamic set_length_dyn();

};

} // end namespace openfl
} // end namespace _Vector

#endif /* INCLUDED_openfl__Vector_IntVector */ 
