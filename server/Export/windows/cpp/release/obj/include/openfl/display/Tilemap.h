// Generated by Haxe 3.4.0
#ifndef INCLUDED_openfl_display_Tilemap
#define INCLUDED_openfl_display_Tilemap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
HX_DECLARE_CLASS3(lime,graphics,opengl,GLBuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)
HX_DECLARE_CLASS3(openfl,_internal,renderer,RenderSession)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Tile)
HX_DECLARE_CLASS2(openfl,display,Tilemap)
HX_DECLARE_CLASS2(openfl,display,Tileset)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace openfl{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Tilemap_obj : public  ::openfl::display::DisplayObject_obj
{
	public:
		typedef  ::openfl::display::DisplayObject_obj super;
		typedef Tilemap_obj OBJ_;
		Tilemap_obj();

	public:
		enum { _hx_ClassId = 0x099f8de4 };

		void __construct(int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.display.Tilemap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.display.Tilemap"); }
		static hx::ObjectPtr< Tilemap_obj > __new(int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing);
		static hx::ObjectPtr< Tilemap_obj > __alloc(hx::Ctx *_hx_ctx,int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Tilemap_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Tilemap","\x0e","\x18","\xe0","\x12"); }

		int numTiles;
		 ::openfl::display::Tileset tileset;
		bool smoothing;
		 ::lime::graphics::opengl::GLBuffer _hx___buffer;
		 ::lime::utils::ArrayBufferView _hx___bufferData;
		Float _hx___cacheAlpha;
		bool _hx___dirty;
		::Array< ::Dynamic> _hx___tiles;
		int _hx___height;
		int _hx___width;
		 ::openfl::display::Tile addTile( ::openfl::display::Tile tile);
		::Dynamic addTile_dyn();

		::Array< ::Dynamic> addTiles(::Array< ::Dynamic> tiles);
		::Dynamic addTiles_dyn();

		 ::openfl::display::Tile addTileAt( ::openfl::display::Tile tile,int index);
		::Dynamic addTileAt_dyn();

		bool contains( ::openfl::display::Tile tile);
		::Dynamic contains_dyn();

		 ::openfl::display::Tile getTileAt(int index);
		::Dynamic getTileAt_dyn();

		int getTileIndex( ::openfl::display::Tile tile);
		::Dynamic getTileIndex_dyn();

		 ::openfl::display::Tile removeTile( ::openfl::display::Tile tile);
		::Dynamic removeTile_dyn();

		 ::openfl::display::Tile removeTileAt(int index);
		::Dynamic removeTileAt_dyn();

		void removeTiles(hx::Null< int >  beginIndex,hx::Null< int >  endIndex);
		::Dynamic removeTiles_dyn();

		void _hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix);

		bool _hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject);

		void _hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession);

		void _hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession);

		void _hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession);

		void _hx___renderFlash();
		::Dynamic _hx___renderFlash_dyn();

		void _hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession);

		Float get_height();

		Float set_height(Float value);

		 ::openfl::display::Tileset set_tileset( ::openfl::display::Tileset value);
		::Dynamic set_tileset_dyn();

		Float get_width();

		Float set_width(Float value);

};

} // end namespace openfl
} // end namespace display

#endif /* INCLUDED_openfl_display_Tilemap */ 
