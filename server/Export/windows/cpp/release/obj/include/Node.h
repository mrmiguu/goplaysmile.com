// Generated by Haxe 3.4.0
#ifndef INCLUDED_Node
#define INCLUDED_Node

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_b97562e956fad93d_10_new)
HX_DECLARE_CLASS0(Node)



class HXCPP_CLASS_ATTRIBUTES Node_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Node_obj OBJ_;
		Node_obj();

	public:
		enum { _hx_ClassId = 0x33e33622 };

		void __construct(::String id,::Array< int > hwys);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Node")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Node"); }

		hx::ObjectPtr< Node_obj > __new(::String id,::Array< int > hwys) {
			hx::ObjectPtr< Node_obj > __this = new Node_obj();
			__this->__construct(id,hwys);
			return __this;
		}

		static hx::ObjectPtr< Node_obj > __alloc(hx::Ctx *_hx_ctx,::String id,::Array< int > hwys) {
			Node_obj *__this = (Node_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Node_obj), true, "Node"));
			*(void **)__this = Node_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_b97562e956fad93d_10_new)
            	HX_STACK_THIS(__this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(hwys,"hwys")
HXLINE(  11)		( ( ::Node)(__this) )->hwys = hwys;
HXLINE(  12)		( ( ::Node)(__this) )->id = id;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Node_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Node","\x22","\x36","\xe3","\x33"); }

		::Array< ::Dynamic> list;
		::Array< int > hwys;
		::String id;
};


#endif /* INCLUDED_Node */ 
