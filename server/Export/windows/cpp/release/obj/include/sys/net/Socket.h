// Generated by Haxe 3.4.0
#ifndef INCLUDED_sys_net_Socket
#define INCLUDED_sys_net_Socket

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(sys,net,Socket)

namespace sys{
namespace net{


class HXCPP_CLASS_ATTRIBUTES Socket_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Socket_obj OBJ_;
		Socket_obj();

	public:
		enum { _hx_ClassId = 0x109f852f };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="sys.net.Socket")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"sys.net.Socket"); }

		hx::ObjectPtr< Socket_obj > __new() {
			hx::ObjectPtr< Socket_obj > __this = new Socket_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Socket_obj > __alloc(hx::Ctx *_hx_ctx) {
			Socket_obj *__this = (Socket_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Socket_obj), false, "sys.net.Socket"));
			*(void **)__this = Socket_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Socket_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Socket","\xd3","\xff","\xda","\x5a"); }

		static  ::Dynamic select(::Array< ::Dynamic> read,::Array< ::Dynamic> write,::Array< ::Dynamic> others, ::Dynamic timeout);
		static ::Dynamic select_dyn();

};

} // end namespace sys
} // end namespace net

#endif /* INCLUDED_sys_net_Socket */ 
