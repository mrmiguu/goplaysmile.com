// Generated by Haxe 3.3.0
#ifndef INCLUDED_Server
#define INCLUDED_Server

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(Field)
HX_DECLARE_CLASS0(Globals)
HX_DECLARE_CLASS0(Server)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(sys,net,Socket)



class HXCPP_CLASS_ATTRIBUTES Server_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Server_obj OBJ_;
		Server_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Server")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Server"); }
		static hx::ObjectPtr< Server_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Server_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Server","\xe3","\xbe","\xcb","\xa2"); }

		 ::Globals g;
		 ::Field clientCount;
		 ::sys::net::Socket listener;
		::Array< ::Dynamic> readers;
		void connect( ::sys::net::Socket client);
		::Dynamic connect_dyn();

		void disconnect( ::sys::net::Socket client);
		::Dynamic disconnect_dyn();

		void updateCount();
		::Dynamic updateCount_dyn();

		void read( ::sys::net::Socket index,::String packet);
		::Dynamic read_dyn();

		void accountInfoArrived( ::sys::net::Socket index,::String user,::String pass);
		::Dynamic accountInfoArrived_dyn();

		void rollRequestArrived( ::sys::net::Socket index);
		::Dynamic rollRequestArrived_dyn();

		Float pingFuture;
		Float pingDelay;
		void serverLoop( ::openfl::events::Event e);
		::Dynamic serverLoop_dyn();

};


#endif /* INCLUDED_Server */ 
