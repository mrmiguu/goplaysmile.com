// Generated by Haxe 3.4.0
#ifndef INCLUDED_AStar
#define INCLUDED_AStar

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(AStar)
HX_DECLARE_CLASS0(Node)
HX_DECLARE_CLASS0(Terrain)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)



class HXCPP_CLASS_ATTRIBUTES AStar_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef AStar_obj OBJ_;
		AStar_obj();

	public:
		enum { _hx_ClassId = 0x7d7182af };

		void __construct( ::Terrain t);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="AStar")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"AStar"); }
		static hx::ObjectPtr< AStar_obj > __new( ::Terrain t);
		static hx::ObjectPtr< AStar_obj > __alloc(hx::Ctx *_hx_ctx, ::Terrain t);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~AStar_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("AStar","\xb3","\xc4","\x40","\xa4"); }

		 ::Terrain t;
		::Array< ::Dynamic> find( ::Node start, ::Node goal);
		::Dynamic find_dyn();

		Float estimate( ::Node start, ::Node goal);
		::Dynamic estimate_dyn();

		::Array< ::Dynamic> reconstructPath( ::haxe::ds::ObjectMap cameFrom, ::Node current);
		::Dynamic reconstructPath_dyn();

};


#endif /* INCLUDED_AStar */ 
