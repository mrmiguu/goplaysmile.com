// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_utils__Log_LogLevel_Impl_
#define INCLUDED_lime_utils__Log_LogLevel_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,utils,_Log,LogLevel_Impl_)

namespace lime{
namespace utils{
namespace _Log{


class HXCPP_CLASS_ATTRIBUTES LogLevel_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef LogLevel_Impl__obj OBJ_;
		LogLevel_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.utils._Log.LogLevel_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.utils._Log.LogLevel_Impl_"); }
		static hx::ObjectPtr< LogLevel_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~LogLevel_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("LogLevel_Impl_","\x20","\x2b","\x1e","\x41"); }

		static void __boot();
		static Int NONE;
		static Int ERROR;
		static Int WARN;
		static Int INFO;
		static Int DEBUG;
		static Int VERBOSE;
		static Bool gt(Int a,Int b);
		static ::Dynamic gt_dyn();

		static Bool gte(Int a,Int b);
		static ::Dynamic gte_dyn();

		static Bool lt(Int a,Int b);
		static ::Dynamic lt_dyn();

		static Bool lte(Int a,Int b);
		static ::Dynamic lte_dyn();

};

} // end namespace lime
} // end namespace utils
} // end namespace _Log

#endif /* INCLUDED_lime_utils__Log_LogLevel_Impl_ */ 
