// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_system_System
#define INCLUDED_lime_system_System

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(lime,_hx_system,Display)
HX_DECLARE_CLASS2(lime,_hx_system,Endian)
HX_DECLARE_CLASS2(lime,_hx_system,System)

namespace lime{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES System_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef System_obj OBJ_;
		System_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.system.System")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.system.System"); }
		static hx::ObjectPtr< System_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~System_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("System","\x0f","\x0b","\x77","\x27"); }

		static void __boot();
		static ::String applicationDirectory;
		static ::String applicationStorageDirectory;
		static ::String desktopDirectory;
		static Bool disableCFFI;
		static ::String documentsDirectory;
		static ::hx::EnumBase endianness;
		static ::String fontsDirectory;
		static Int numDisplays;
		static ::String userDirectory;
		static  ::haxe::ds::IntMap _hx___directories;
		static void exit(Int code);
		static ::Dynamic exit_dyn();

		static  ::lime::_hx_system::Display getDisplay(Int id);
		static ::Dynamic getDisplay_dyn();

		static Int getTimer();
		static ::Dynamic getTimer_dyn();

		static  ::Dynamic load(::String library,::String method,hx::Null< Int >  args,hx::Null< Bool >  lazy);
		static ::Dynamic load_dyn();

		static void openFile(::String path);
		static ::Dynamic openFile_dyn();

		static void openURL(::String url,::String target);
		static ::Dynamic openURL_dyn();

		static ::String _hx___getDirectory(Int type);
		static ::Dynamic _hx___getDirectory_dyn();

		static Bool get_allowScreenTimeout();
		static ::Dynamic get_allowScreenTimeout_dyn();

		static Bool set_allowScreenTimeout(Bool value);
		static ::Dynamic set_allowScreenTimeout_dyn();

		static ::String get_applicationDirectory();
		static ::Dynamic get_applicationDirectory_dyn();

		static ::String get_applicationStorageDirectory();
		static ::Dynamic get_applicationStorageDirectory_dyn();

		static ::String get_desktopDirectory();
		static ::Dynamic get_desktopDirectory_dyn();

		static ::String get_documentsDirectory();
		static ::Dynamic get_documentsDirectory_dyn();

		static ::String get_fontsDirectory();
		static ::Dynamic get_fontsDirectory_dyn();

		static Int get_numDisplays();
		static ::Dynamic get_numDisplays_dyn();

		static ::String get_userDirectory();
		static ::Dynamic get_userDirectory_dyn();

		static ::hx::EnumBase get_endianness();
		static ::Dynamic get_endianness_dyn();

};

} // end namespace lime
} // end namespace system

#endif /* INCLUDED_lime_system_System */ 
