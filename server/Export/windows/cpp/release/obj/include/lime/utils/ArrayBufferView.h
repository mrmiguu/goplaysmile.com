// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_utils_ArrayBufferView
#define INCLUDED_lime_utils_ArrayBufferView

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES ArrayBufferView_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ArrayBufferView_obj OBJ_;
		ArrayBufferView_obj();

	public:
		void __construct( ::Dynamic elements,Int in_type);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.utils.ArrayBufferView")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.utils.ArrayBufferView"); }
		static hx::ObjectPtr< ArrayBufferView_obj > __new( ::Dynamic elements,Int in_type);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ArrayBufferView_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("ArrayBufferView","\x5e","\x6e","\x84","\xfd"); }

		 ::lime::utils::ArrayBufferView subarray_lime_utils_Int16Array(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_Int16Array_dyn();

		 ::lime::utils::ArrayBufferView subarray_lime_utils_Int32Array(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_Int32Array_dyn();

		 ::lime::utils::ArrayBufferView subarray_lime_utils_UInt32Array(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_UInt32Array_dyn();

		 ::lime::utils::ArrayBufferView subarray_lime_utils_Float32Array(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_Float32Array_dyn();

		 ::lime::utils::ArrayBufferView subarray_lime_utils_UInt8Array(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_UInt8Array_dyn();

		 ::lime::utils::ArrayBufferView subarray_lime_utils_Int8Array(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_Int8Array_dyn();

		 ::lime::utils::ArrayBufferView subarray_lime_utils_UInt8ClampedArray(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_UInt8ClampedArray_dyn();

		 ::lime::utils::ArrayBufferView subarray_lime_utils_UInt16Array(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_UInt16Array_dyn();

		 ::lime::utils::ArrayBufferView subarray_lime_utils_Float64Array(Int begin, ::Dynamic end);
		::Dynamic subarray_lime_utils_Float64Array_dyn();

		Int type;
		 ::haxe::io::Bytes buffer;
		Int byteOffset;
		Int byteLength;
		Int length;
		Int bytesPerElement;
		 ::lime::utils::ArrayBufferView initTypedArray( ::lime::utils::ArrayBufferView view);
		::Dynamic initTypedArray_dyn();

		 ::lime::utils::ArrayBufferView initBuffer( ::haxe::io::Bytes in_buffer, ::Dynamic in_byteOffset, ::Dynamic len);
		::Dynamic initBuffer_dyn();

		 ::lime::utils::ArrayBufferView initArray(::cpp::VirtualArray array);
		::Dynamic initArray_dyn();

		void set( ::lime::utils::ArrayBufferView view,::cpp::VirtualArray array,hx::Null< Int >  offset);
		::Dynamic set_dyn();

		void cloneBuffer( ::haxe::io::Bytes src,hx::Null< Int >  srcByteOffset);
		::Dynamic cloneBuffer_dyn();

		Int bytesForType(Int type);
		::Dynamic bytesForType_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		Int toByteLength(Int elemCount);
		::Dynamic toByteLength_dyn();

		void copyFromArray(::Array< Float > array, ::Dynamic offset);
		::Dynamic copyFromArray_dyn();

};

} // end namespace lime
} // end namespace utils

#endif /* INCLUDED_lime_utils_ArrayBufferView */ 
