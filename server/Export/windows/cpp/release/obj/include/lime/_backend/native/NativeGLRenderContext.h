// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#define INCLUDED_lime__backend_native_NativeGLRenderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,_backend,native,NativeGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLBuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLFramebuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLProgram)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLRenderbuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLShader)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLTexture)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace _backend{
namespace native{


class HXCPP_CLASS_ATTRIBUTES NativeGLRenderContext_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NativeGLRenderContext_obj OBJ_;
		NativeGLRenderContext_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime._backend.native.NativeGLRenderContext")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime._backend.native.NativeGLRenderContext"); }
		static hx::ObjectPtr< NativeGLRenderContext_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NativeGLRenderContext_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("NativeGLRenderContext","\xfd","\x2f","\x3c","\x30"); }

		Int DEPTH_BUFFER_BIT;
		Int STENCIL_BUFFER_BIT;
		Int COLOR_BUFFER_BIT;
		Int POINTS;
		Int LINES;
		Int LINE_LOOP;
		Int LINE_STRIP;
		Int TRIANGLES;
		Int TRIANGLE_STRIP;
		Int TRIANGLE_FAN;
		Int ZERO;
		Int ONE;
		Int SRC_COLOR;
		Int ONE_MINUS_SRC_COLOR;
		Int SRC_ALPHA;
		Int ONE_MINUS_SRC_ALPHA;
		Int DST_ALPHA;
		Int ONE_MINUS_DST_ALPHA;
		Int DST_COLOR;
		Int ONE_MINUS_DST_COLOR;
		Int SRC_ALPHA_SATURATE;
		Int FUNC_ADD;
		Int BLEND_EQUATION;
		Int BLEND_EQUATION_RGB;
		Int BLEND_EQUATION_ALPHA;
		Int FUNC_SUBTRACT;
		Int FUNC_REVERSE_SUBTRACT;
		Int BLEND_DST_RGB;
		Int BLEND_SRC_RGB;
		Int BLEND_DST_ALPHA;
		Int BLEND_SRC_ALPHA;
		Int CONSTANT_COLOR;
		Int ONE_MINUS_CONSTANT_COLOR;
		Int CONSTANT_ALPHA;
		Int ONE_MINUS_CONSTANT_ALPHA;
		Int BLEND_COLOR;
		Int ARRAY_BUFFER;
		Int ELEMENT_ARRAY_BUFFER;
		Int ARRAY_BUFFER_BINDING;
		Int ELEMENT_ARRAY_BUFFER_BINDING;
		Int STREAM_DRAW;
		Int STATIC_DRAW;
		Int DYNAMIC_DRAW;
		Int BUFFER_SIZE;
		Int BUFFER_USAGE;
		Int CURRENT_VERTEX_ATTRIB;
		Int FRONT;
		Int BACK;
		Int FRONT_AND_BACK;
		Int CULL_FACE;
		Int BLEND;
		Int DITHER;
		Int STENCIL_TEST;
		Int DEPTH_TEST;
		Int SCISSOR_TEST;
		Int POLYGON_OFFSET_FILL;
		Int SAMPLE_ALPHA_TO_COVERAGE;
		Int SAMPLE_COVERAGE;
		Int NO_ERROR;
		Int INVALID_ENUM;
		Int INVALID_VALUE;
		Int INVALID_OPERATION;
		Int OUT_OF_MEMORY;
		Int CW;
		Int CCW;
		Int LINE_WIDTH;
		Int ALIASED_POINT_SIZE_RANGE;
		Int ALIASED_LINE_WIDTH_RANGE;
		Int CULL_FACE_MODE;
		Int FRONT_FACE;
		Int DEPTH_RANGE;
		Int DEPTH_WRITEMASK;
		Int DEPTH_CLEAR_VALUE;
		Int DEPTH_FUNC;
		Int STENCIL_CLEAR_VALUE;
		Int STENCIL_FUNC;
		Int STENCIL_FAIL;
		Int STENCIL_PASS_DEPTH_FAIL;
		Int STENCIL_PASS_DEPTH_PASS;
		Int STENCIL_REF;
		Int STENCIL_VALUE_MASK;
		Int STENCIL_WRITEMASK;
		Int STENCIL_BACK_FUNC;
		Int STENCIL_BACK_FAIL;
		Int STENCIL_BACK_PASS_DEPTH_FAIL;
		Int STENCIL_BACK_PASS_DEPTH_PASS;
		Int STENCIL_BACK_REF;
		Int STENCIL_BACK_VALUE_MASK;
		Int STENCIL_BACK_WRITEMASK;
		Int VIEWPORT;
		Int SCISSOR_BOX;
		Int COLOR_CLEAR_VALUE;
		Int COLOR_WRITEMASK;
		Int UNPACK_ALIGNMENT;
		Int PACK_ALIGNMENT;
		Int MAX_TEXTURE_SIZE;
		Int MAX_VIEWPORT_DIMS;
		Int SUBPIXEL_BITS;
		Int RED_BITS;
		Int GREEN_BITS;
		Int BLUE_BITS;
		Int ALPHA_BITS;
		Int DEPTH_BITS;
		Int STENCIL_BITS;
		Int POLYGON_OFFSET_UNITS;
		Int POLYGON_OFFSET_FACTOR;
		Int TEXTURE_BINDING_2D;
		Int SAMPLE_BUFFERS;
		Int SAMPLES;
		Int SAMPLE_COVERAGE_VALUE;
		Int SAMPLE_COVERAGE_INVERT;
		Int COMPRESSED_TEXTURE_FORMATS;
		Int DONT_CARE;
		Int FASTEST;
		Int NICEST;
		Int GENERATE_MIPMAP_HINT;
		Int BYTE;
		Int UNSIGNED_BYTE;
		Int SHORT;
		Int UNSIGNED_SHORT;
		Int INT;
		Int UNSIGNED_INT;
		Int FLOAT;
		Int DEPTH_COMPONENT;
		Int ALPHA;
		Int RGB;
		Int RGBA;
		Int BGR_EXT;
		Int BGRA_EXT;
		Int LUMINANCE;
		Int LUMINANCE_ALPHA;
		Int UNSIGNED_SHORT_4_4_4_4;
		Int UNSIGNED_SHORT_5_5_5_1;
		Int UNSIGNED_SHORT_5_6_5;
		Int FRAGMENT_SHADER;
		Int VERTEX_SHADER;
		Int MAX_VERTEX_ATTRIBS;
		Int MAX_VERTEX_UNIFORM_VECTORS;
		Int MAX_VARYING_VECTORS;
		Int MAX_COMBINED_TEXTURE_IMAGE_UNITS;
		Int MAX_VERTEX_TEXTURE_IMAGE_UNITS;
		Int MAX_TEXTURE_IMAGE_UNITS;
		Int MAX_FRAGMENT_UNIFORM_VECTORS;
		Int SHADER_TYPE;
		Int DELETE_STATUS;
		Int LINK_STATUS;
		Int VALIDATE_STATUS;
		Int ATTACHED_SHADERS;
		Int ACTIVE_UNIFORMS;
		Int ACTIVE_ATTRIBUTES;
		Int SHADING_LANGUAGE_VERSION;
		Int CURRENT_PROGRAM;
		Int NEVER;
		Int LESS;
		Int EQUAL;
		Int LEQUAL;
		Int GREATER;
		Int NOTEQUAL;
		Int GEQUAL;
		Int ALWAYS;
		Int KEEP;
		Int REPLACE;
		Int INCR;
		Int DECR;
		Int INVERT;
		Int INCR_WRAP;
		Int DECR_WRAP;
		Int VENDOR;
		Int RENDERER;
		Int VERSION;
		Int NEAREST;
		Int LINEAR;
		Int NEAREST_MIPMAP_NEAREST;
		Int LINEAR_MIPMAP_NEAREST;
		Int NEAREST_MIPMAP_LINEAR;
		Int LINEAR_MIPMAP_LINEAR;
		Int TEXTURE_MAG_FILTER;
		Int TEXTURE_MIN_FILTER;
		Int TEXTURE_WRAP_S;
		Int TEXTURE_WRAP_T;
		Int TEXTURE_2D;
		Int TEXTURE;
		Int TEXTURE_CUBE_MAP;
		Int TEXTURE_BINDING_CUBE_MAP;
		Int TEXTURE_CUBE_MAP_POSITIVE_X;
		Int TEXTURE_CUBE_MAP_NEGATIVE_X;
		Int TEXTURE_CUBE_MAP_POSITIVE_Y;
		Int TEXTURE_CUBE_MAP_NEGATIVE_Y;
		Int TEXTURE_CUBE_MAP_POSITIVE_Z;
		Int TEXTURE_CUBE_MAP_NEGATIVE_Z;
		Int MAX_CUBE_MAP_TEXTURE_SIZE;
		Int TEXTURE0;
		Int TEXTURE1;
		Int TEXTURE2;
		Int TEXTURE3;
		Int TEXTURE4;
		Int TEXTURE5;
		Int TEXTURE6;
		Int TEXTURE7;
		Int TEXTURE8;
		Int TEXTURE9;
		Int TEXTURE10;
		Int TEXTURE11;
		Int TEXTURE12;
		Int TEXTURE13;
		Int TEXTURE14;
		Int TEXTURE15;
		Int TEXTURE16;
		Int TEXTURE17;
		Int TEXTURE18;
		Int TEXTURE19;
		Int TEXTURE20;
		Int TEXTURE21;
		Int TEXTURE22;
		Int TEXTURE23;
		Int TEXTURE24;
		Int TEXTURE25;
		Int TEXTURE26;
		Int TEXTURE27;
		Int TEXTURE28;
		Int TEXTURE29;
		Int TEXTURE30;
		Int TEXTURE31;
		Int ACTIVE_TEXTURE;
		Int REPEAT;
		Int CLAMP_TO_EDGE;
		Int MIRRORED_REPEAT;
		Int FLOAT_VEC2;
		Int FLOAT_VEC3;
		Int FLOAT_VEC4;
		Int INT_VEC2;
		Int INT_VEC3;
		Int INT_VEC4;
		Int BOOL;
		Int BOOL_VEC2;
		Int BOOL_VEC3;
		Int BOOL_VEC4;
		Int FLOAT_MAT2;
		Int FLOAT_MAT3;
		Int FLOAT_MAT4;
		Int SAMPLER_2D;
		Int SAMPLER_CUBE;
		Int VERTEX_ATTRIB_ARRAY_ENABLED;
		Int VERTEX_ATTRIB_ARRAY_SIZE;
		Int VERTEX_ATTRIB_ARRAY_STRIDE;
		Int VERTEX_ATTRIB_ARRAY_TYPE;
		Int VERTEX_ATTRIB_ARRAY_NORMALIZED;
		Int VERTEX_ATTRIB_ARRAY_POINTER;
		Int VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
		Int VERTEX_PROGRAM_POINT_SIZE;
		Int POINT_SPRITE;
		Int COMPILE_STATUS;
		Int LOW_FLOAT;
		Int MEDIUM_FLOAT;
		Int HIGH_FLOAT;
		Int LOW_INT;
		Int MEDIUM_INT;
		Int HIGH_INT;
		Int FRAMEBUFFER;
		Int RENDERBUFFER;
		Int RGBA4;
		Int RGB5_A1;
		Int RGB565;
		Int DEPTH_COMPONENT16;
		Int STENCIL_INDEX;
		Int STENCIL_INDEX8;
		Int DEPTH_STENCIL;
		Int RENDERBUFFER_WIDTH;
		Int RENDERBUFFER_HEIGHT;
		Int RENDERBUFFER_INTERNAL_FORMAT;
		Int RENDERBUFFER_RED_SIZE;
		Int RENDERBUFFER_GREEN_SIZE;
		Int RENDERBUFFER_BLUE_SIZE;
		Int RENDERBUFFER_ALPHA_SIZE;
		Int RENDERBUFFER_DEPTH_SIZE;
		Int RENDERBUFFER_STENCIL_SIZE;
		Int FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
		Int FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
		Int FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
		Int FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
		Int COLOR_ATTACHMENT0;
		Int DEPTH_ATTACHMENT;
		Int STENCIL_ATTACHMENT;
		Int DEPTH_STENCIL_ATTACHMENT;
		Int NONE;
		Int FRAMEBUFFER_COMPLETE;
		Int FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
		Int FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
		Int FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
		Int FRAMEBUFFER_UNSUPPORTED;
		Int FRAMEBUFFER_BINDING;
		Int RENDERBUFFER_BINDING;
		Int MAX_RENDERBUFFER_SIZE;
		Int INVALID_FRAMEBUFFER_OPERATION;
		Int UNPACK_FLIP_Y_WEBGL;
		Int UNPACK_PREMULTIPLY_ALPHA_WEBGL;
		Int CONTEXT_LOST_WEBGL;
		Int UNPACK_COLORSPACE_CONVERSION_WEBGL;
		Int BROWSER_DEFAULT_WEBGL;
		Int version;
		 ::lime::graphics::opengl::GLProgram _hx___currentProgram;
		void activeTexture(Int texture);
		::Dynamic activeTexture_dyn();

		void attachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader);
		::Dynamic attachShader_dyn();

		void bindAttribLocation( ::lime::graphics::opengl::GLProgram program,Int index,::String name);
		::Dynamic bindAttribLocation_dyn();

		void bindBuffer(Int target, ::lime::graphics::opengl::GLBuffer buffer);
		::Dynamic bindBuffer_dyn();

		void bindFramebuffer(Int target, ::lime::graphics::opengl::GLFramebuffer framebuffer);
		::Dynamic bindFramebuffer_dyn();

		void bindRenderbuffer(Int target, ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		::Dynamic bindRenderbuffer_dyn();

		void bindTexture(Int target, ::lime::graphics::opengl::GLTexture texture);
		::Dynamic bindTexture_dyn();

		void blendColor(Float red,Float green,Float blue,Float alpha);
		::Dynamic blendColor_dyn();

		void blendEquation(Int mode);
		::Dynamic blendEquation_dyn();

		void blendEquationSeparate(Int modeRGB,Int modeAlpha);
		::Dynamic blendEquationSeparate_dyn();

		void blendFunc(Int sfactor,Int dfactor);
		::Dynamic blendFunc_dyn();

		void blendFuncSeparate(Int srcRGB,Int dstRGB,Int srcAlpha,Int dstAlpha);
		::Dynamic blendFuncSeparate_dyn();

		void bufferData(Int target, ::lime::utils::ArrayBufferView data,Int usage);
		::Dynamic bufferData_dyn();

		void bufferSubData(Int target,Int offset, ::lime::utils::ArrayBufferView data);
		::Dynamic bufferSubData_dyn();

		Int checkFramebufferStatus(Int target);
		::Dynamic checkFramebufferStatus_dyn();

		void clear(Int mask);
		::Dynamic clear_dyn();

		void clearColor(Float red,Float green,Float blue,Float alpha);
		::Dynamic clearColor_dyn();

		void clearDepth(Float depth);
		::Dynamic clearDepth_dyn();

		void clearStencil(Int s);
		::Dynamic clearStencil_dyn();

		void colorMask(Bool red,Bool green,Bool blue,Bool alpha);
		::Dynamic colorMask_dyn();

		void compileShader( ::lime::graphics::opengl::GLShader shader);
		::Dynamic compileShader_dyn();

		void compressedTexImage2D(Int target,Int level,Int internalformat,Int width,Int height,Int border, ::lime::utils::ArrayBufferView data);
		::Dynamic compressedTexImage2D_dyn();

		void compressedTexSubImage2D(Int target,Int level,Int xoffset,Int yoffset,Int width,Int height,Int format, ::lime::utils::ArrayBufferView data);
		::Dynamic compressedTexSubImage2D_dyn();

		void copyTexImage2D(Int target,Int level,Int internalformat,Int x,Int y,Int width,Int height,Int border);
		::Dynamic copyTexImage2D_dyn();

		void copyTexSubImage2D(Int target,Int level,Int xoffset,Int yoffset,Int x,Int y,Int width,Int height);
		::Dynamic copyTexSubImage2D_dyn();

		 ::lime::graphics::opengl::GLBuffer createBuffer();
		::Dynamic createBuffer_dyn();

		 ::lime::graphics::opengl::GLFramebuffer createFramebuffer();
		::Dynamic createFramebuffer_dyn();

		 ::lime::graphics::opengl::GLProgram createProgram();
		::Dynamic createProgram_dyn();

		 ::lime::graphics::opengl::GLRenderbuffer createRenderbuffer();
		::Dynamic createRenderbuffer_dyn();

		 ::lime::graphics::opengl::GLShader createShader(Int type);
		::Dynamic createShader_dyn();

		 ::lime::graphics::opengl::GLTexture createTexture();
		::Dynamic createTexture_dyn();

		void cullFace(Int mode);
		::Dynamic cullFace_dyn();

		void deleteBuffer( ::lime::graphics::opengl::GLBuffer buffer);
		::Dynamic deleteBuffer_dyn();

		void deleteFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer);
		::Dynamic deleteFramebuffer_dyn();

		void deleteProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic deleteProgram_dyn();

		void deleteRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		::Dynamic deleteRenderbuffer_dyn();

		void deleteShader( ::lime::graphics::opengl::GLShader shader);
		::Dynamic deleteShader_dyn();

		void deleteTexture( ::lime::graphics::opengl::GLTexture texture);
		::Dynamic deleteTexture_dyn();

		void depthFunc(Int func);
		::Dynamic depthFunc_dyn();

		void depthMask(Bool flag);
		::Dynamic depthMask_dyn();

		void depthRange(Float zNear,Float zFar);
		::Dynamic depthRange_dyn();

		void detachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader);
		::Dynamic detachShader_dyn();

		void disable(Int cap);
		::Dynamic disable_dyn();

		void disableVertexAttribArray(Int index);
		::Dynamic disableVertexAttribArray_dyn();

		void drawArrays(Int mode,Int first,Int count);
		::Dynamic drawArrays_dyn();

		void drawElements(Int mode,Int count,Int type,Int offset);
		::Dynamic drawElements_dyn();

		void enable(Int cap);
		::Dynamic enable_dyn();

		void enableVertexAttribArray(Int index);
		::Dynamic enableVertexAttribArray_dyn();

		void finish();
		::Dynamic finish_dyn();

		void flush();
		::Dynamic flush_dyn();

		void framebufferRenderbuffer(Int target,Int attachment,Int renderbuffertarget, ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		::Dynamic framebufferRenderbuffer_dyn();

		void framebufferTexture2D(Int target,Int attachment,Int textarget, ::lime::graphics::opengl::GLTexture texture,Int level);
		::Dynamic framebufferTexture2D_dyn();

		void frontFace(Int mode);
		::Dynamic frontFace_dyn();

		void generateMipmap(Int target);
		::Dynamic generateMipmap_dyn();

		 ::Dynamic getActiveAttrib( ::lime::graphics::opengl::GLProgram program,Int index);
		::Dynamic getActiveAttrib_dyn();

		 ::Dynamic getActiveUniform( ::lime::graphics::opengl::GLProgram program,Int index);
		::Dynamic getActiveUniform_dyn();

		::Array< ::Dynamic> getAttachedShaders( ::lime::graphics::opengl::GLProgram program);
		::Dynamic getAttachedShaders_dyn();

		Int getAttribLocation( ::lime::graphics::opengl::GLProgram program,::String name);
		::Dynamic getAttribLocation_dyn();

		Int getBufferParameter(Int target,Int pname);
		::Dynamic getBufferParameter_dyn();

		 ::Dynamic getContextAttributes();
		::Dynamic getContextAttributes_dyn();

		Int getError();
		::Dynamic getError_dyn();

		 ::Dynamic getExtension(::String name);
		::Dynamic getExtension_dyn();

		Int getFramebufferAttachmentParameter(Int target,Int attachment,Int pname);
		::Dynamic getFramebufferAttachmentParameter_dyn();

		 ::Dynamic getParameter(Int pname);
		::Dynamic getParameter_dyn();

		::String getProgramInfoLog( ::lime::graphics::opengl::GLProgram program);
		::Dynamic getProgramInfoLog_dyn();

		Int getProgramParameter( ::lime::graphics::opengl::GLProgram program,Int pname);
		::Dynamic getProgramParameter_dyn();

		Int getRenderbufferParameter(Int target,Int pname);
		::Dynamic getRenderbufferParameter_dyn();

		::String getShaderInfoLog( ::lime::graphics::opengl::GLShader shader);
		::Dynamic getShaderInfoLog_dyn();

		Int getShaderParameter( ::lime::graphics::opengl::GLShader shader,Int pname);
		::Dynamic getShaderParameter_dyn();

		 ::Dynamic getShaderPrecisionFormat(Int shadertype,Int precisiontype);
		::Dynamic getShaderPrecisionFormat_dyn();

		::String getShaderSource( ::lime::graphics::opengl::GLShader shader);
		::Dynamic getShaderSource_dyn();

		::Array< ::String > getSupportedExtensions();
		::Dynamic getSupportedExtensions_dyn();

		Int getTexParameter(Int target,Int pname);
		::Dynamic getTexParameter_dyn();

		 ::Dynamic getUniform( ::lime::graphics::opengl::GLProgram program,Int location);
		::Dynamic getUniform_dyn();

		Int getUniformLocation( ::lime::graphics::opengl::GLProgram program,::String name);
		::Dynamic getUniformLocation_dyn();

		Int getVertexAttrib(Int index,Int pname);
		::Dynamic getVertexAttrib_dyn();

		Int getVertexAttribOffset(Int index,Int pname);
		::Dynamic getVertexAttribOffset_dyn();

		void hint(Int target,Int mode);
		::Dynamic hint_dyn();

		Bool isBuffer( ::lime::graphics::opengl::GLBuffer buffer);
		::Dynamic isBuffer_dyn();

		Bool isContextLost();
		::Dynamic isContextLost_dyn();

		Bool isEnabled(Int cap);
		::Dynamic isEnabled_dyn();

		Bool isFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer);
		::Dynamic isFramebuffer_dyn();

		Bool isProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic isProgram_dyn();

		Bool isRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		::Dynamic isRenderbuffer_dyn();

		Bool isShader( ::lime::graphics::opengl::GLShader shader);
		::Dynamic isShader_dyn();

		Bool isTexture( ::lime::graphics::opengl::GLTexture texture);
		::Dynamic isTexture_dyn();

		void lineWidth(Float width);
		::Dynamic lineWidth_dyn();

		void linkProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic linkProgram_dyn();

		void pixelStorei(Int pname,Int param);
		::Dynamic pixelStorei_dyn();

		void polygonOffset(Float factor,Float units);
		::Dynamic polygonOffset_dyn();

		void readPixels(Int x,Int y,Int width,Int height,Int format,Int type, ::lime::utils::ArrayBufferView pixels);
		::Dynamic readPixels_dyn();

		void renderbufferStorage(Int target,Int internalformat,Int width,Int height);
		::Dynamic renderbufferStorage_dyn();

		void sampleCoverage(Float value,Bool invert);
		::Dynamic sampleCoverage_dyn();

		void scissor(Int x,Int y,Int width,Int height);
		::Dynamic scissor_dyn();

		void shaderSource( ::lime::graphics::opengl::GLShader shader,::String source);
		::Dynamic shaderSource_dyn();

		void stencilFunc(Int func,Int ref,Int mask);
		::Dynamic stencilFunc_dyn();

		void stencilFuncSeparate(Int face,Int func,Int ref,Int mask);
		::Dynamic stencilFuncSeparate_dyn();

		void stencilMask(Int mask);
		::Dynamic stencilMask_dyn();

		void stencilMaskSeparate(Int face,Int mask);
		::Dynamic stencilMaskSeparate_dyn();

		void stencilOp(Int fail,Int zfail,Int zpass);
		::Dynamic stencilOp_dyn();

		void stencilOpSeparate(Int face,Int fail,Int zfail,Int zpass);
		::Dynamic stencilOpSeparate_dyn();

		void texImage2D(Int target,Int level,Int internalformat,Int width,Int height,Int border,Int format,Int type, ::lime::utils::ArrayBufferView pixels);
		::Dynamic texImage2D_dyn();

		void texParameterf(Int target,Int pname,Float param);
		::Dynamic texParameterf_dyn();

		void texParameteri(Int target,Int pname,Int param);
		::Dynamic texParameteri_dyn();

		void texSubImage2D(Int target,Int level,Int xoffset,Int yoffset,Int width,Int height,Int format,Int type, ::lime::utils::ArrayBufferView pixels);
		::Dynamic texSubImage2D_dyn();

		void uniform1f(Int location,Float x);
		::Dynamic uniform1f_dyn();

		void uniform1fv(Int location, ::lime::utils::ArrayBufferView x);
		::Dynamic uniform1fv_dyn();

		void uniform1i(Int location,Int x);
		::Dynamic uniform1i_dyn();

		void uniform1iv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform1iv_dyn();

		void uniform2f(Int location,Float x,Float y);
		::Dynamic uniform2f_dyn();

		void uniform2fv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform2fv_dyn();

		void uniform2i(Int location,Int x,Int y);
		::Dynamic uniform2i_dyn();

		void uniform2iv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform2iv_dyn();

		void uniform3f(Int location,Float x,Float y,Float z);
		::Dynamic uniform3f_dyn();

		void uniform3fv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform3fv_dyn();

		void uniform3i(Int location,Int x,Int y,Int z);
		::Dynamic uniform3i_dyn();

		void uniform3iv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform3iv_dyn();

		void uniform4f(Int location,Float x,Float y,Float z,Float w);
		::Dynamic uniform4f_dyn();

		void uniform4fv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform4fv_dyn();

		void uniform4i(Int location,Int x,Int y,Int z,Int w);
		::Dynamic uniform4i_dyn();

		void uniform4iv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform4iv_dyn();

		void uniformMatrix2fv(Int location,Bool transpose, ::lime::utils::ArrayBufferView v);
		::Dynamic uniformMatrix2fv_dyn();

		void uniformMatrix3fv(Int location,Bool transpose, ::lime::utils::ArrayBufferView v);
		::Dynamic uniformMatrix3fv_dyn();

		void uniformMatrix4fv(Int location,Bool transpose, ::lime::utils::ArrayBufferView v);
		::Dynamic uniformMatrix4fv_dyn();

		void useProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic useProgram_dyn();

		void validateProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic validateProgram_dyn();

		void vertexAttrib1f(Int indx,Float x);
		::Dynamic vertexAttrib1f_dyn();

		void vertexAttrib1fv(Int indx, ::lime::utils::ArrayBufferView values);
		::Dynamic vertexAttrib1fv_dyn();

		void vertexAttrib2f(Int indx,Float x,Float y);
		::Dynamic vertexAttrib2f_dyn();

		void vertexAttrib2fv(Int indx, ::lime::utils::ArrayBufferView values);
		::Dynamic vertexAttrib2fv_dyn();

		void vertexAttrib3f(Int indx,Float x,Float y,Float z);
		::Dynamic vertexAttrib3f_dyn();

		void vertexAttrib3fv(Int indx, ::lime::utils::ArrayBufferView values);
		::Dynamic vertexAttrib3fv_dyn();

		void vertexAttrib4f(Int indx,Float x,Float y,Float z,Float w);
		::Dynamic vertexAttrib4f_dyn();

		void vertexAttrib4fv(Int indx, ::lime::utils::ArrayBufferView values);
		::Dynamic vertexAttrib4fv_dyn();

		void vertexAttribPointer(Int indx,Int size,Int type,Bool normalized,Int stride,Int offset);
		::Dynamic vertexAttribPointer_dyn();

		void viewport(Int x,Int y,Int width,Int height);
		::Dynamic viewport_dyn();

		Int get_version();
		::Dynamic get_version_dyn();

};

} // end namespace lime
} // end namespace _backend
} // end namespace native

#endif /* INCLUDED_lime__backend_native_NativeGLRenderContext */ 
