// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_text_Font
#define INCLUDED_lime_text_Font

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,app,Future)
HX_DECLARE_CLASS2(lime,graphics,Image)
HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(lime,text,GlyphMetrics)

namespace lime{
namespace text{


class HXCPP_CLASS_ATTRIBUTES Font_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Font_obj OBJ_;
		Font_obj();

	public:
		void __construct(::String name);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.text.Font")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.text.Font"); }
		static hx::ObjectPtr< Font_obj > __new(::String name);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Font_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Font","\xef","\x89","\x99","\x2e"); }

		static  ::lime::text::Font fromBytes( ::haxe::io::Bytes bytes);
		static ::Dynamic fromBytes_dyn();

		static  ::lime::text::Font fromFile(::String path);
		static ::Dynamic fromFile_dyn();

		static  ::lime::app::Future loadFromBytes( ::haxe::io::Bytes bytes);
		static ::Dynamic loadFromBytes_dyn();

		static  ::lime::app::Future loadFromFile(::String path);
		static ::Dynamic loadFromFile_dyn();

		static  ::lime::app::Future loadFromName(::String path);
		static ::Dynamic loadFromName_dyn();

		Int ascender;
		Int descender;
		Int height;
		::String name;
		Int numGlyphs;
		 ::Dynamic src;
		Int underlinePosition;
		Int underlineThickness;
		Int unitsPerEM;
		::String _hx___fontPath;
		::String _hx___fontPathWithoutDirectory;
		 ::Dynamic decompose();
		::Dynamic decompose_dyn();

		Int getGlyph(::String character);
		::Dynamic getGlyph_dyn();

		::Array< Int > getGlyphs(::String characters);
		::Dynamic getGlyphs_dyn();

		 ::lime::text::GlyphMetrics getGlyphMetrics(Int glyph);
		::Dynamic getGlyphMetrics_dyn();

		 ::lime::graphics::Image renderGlyph(Int glyph,Int fontSize);
		::Dynamic renderGlyph_dyn();

		 ::haxe::ds::IntMap renderGlyphs(::Array< Int > glyphs,Int fontSize);
		::Dynamic renderGlyphs_dyn();

		void _hx___fromBytes( ::haxe::io::Bytes bytes);
		::Dynamic _hx___fromBytes_dyn();

		void _hx___fromFile(::String path);
		::Dynamic _hx___fromFile_dyn();

		 ::lime::app::Future _hx___loadFromName(::String name);
		::Dynamic _hx___loadFromName_dyn();

		void _hx___setSize(Int size);
		::Dynamic _hx___setSize_dyn();

		Int get_ascender();
		::Dynamic get_ascender_dyn();

		Int get_descender();
		::Dynamic get_descender_dyn();

		Int get_height();
		::Dynamic get_height_dyn();

		Int get_numGlyphs();
		::Dynamic get_numGlyphs_dyn();

		Int get_underlinePosition();
		::Dynamic get_underlinePosition_dyn();

		Int get_underlineThickness();
		::Dynamic get_underlineThickness_dyn();

		Int get_unitsPerEM();
		::Dynamic get_unitsPerEM_dyn();

};

} // end namespace lime
} // end namespace text

#endif /* INCLUDED_lime_text_Font */ 
