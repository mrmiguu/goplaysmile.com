// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Field
#include <Field.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif


void Field_obj::__construct( ::Globals g,Float x,Float y){
            	HX_STACK_FRAME("Field","new",0x6d03fa8c,"Field.new","Field.hx",8,0x85a79a64)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  17)		this->tE = (int)35;
HXLINE(  16)		this->tW = (int)44;
HXLINE(  20)		super::__construct();
HXLINE(  22)		this->g = g;
HXLINE(  23)		this->cenx = x;
HXLINE(  24)		this->ceny = y;
HXLINE(  25)		HX_VARI(  ::openfl::text::TextField,t) =  ::openfl::text::TextField_obj::__new();
HXDLIN(  25)		t->set_embedFonts(true);
HXDLIN(  25)		t->set_text(HX_("",00,00,00,00));
HXDLIN(  25)		Float _hx_tmp = t->get_width();
HXDLIN(  25)		t->set_x((x - ((Float)_hx_tmp / (Float)(int)2)));
HXDLIN(  25)		t->set_y(y);
HXDLIN(  25)		t->set_autoSize((int)0);
HXDLIN(  25)		t->set_selectable(false);
HXDLIN(  25)		 ::openfl::text::Font _this = ::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null());
HXDLIN(  25)		t->setTextFormat( ::openfl::text::TextFormat_obj::__new(_this->name,(int)72,(int)16777215,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN(  25)		this->f = t;
HXLINE(  26)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("field/l.png",52,a5,dc,e8)),null());
HXDLIN(  26)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__new(png,null());
HXDLIN(  26)		set->addRect(png->rect);
HXDLIN(  26)		Int _hx_tmp1 = ::Std_obj::_hx_int(set->getRect((int)0)->width);
HXDLIN(  26)		Int _hx_tmp2 = ::Std_obj::_hx_int(set->getRect((int)0)->height);
HXDLIN(  26)		HX_VARI(  ::openfl::display::Tilemap,map) =  ::openfl::display::Tilemap_obj::__new(_hx_tmp1,_hx_tmp2,set,null());
HXDLIN(  26)		map->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN(  26)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__new();
HXDLIN(  26)		sprite->addChild(map);
HXDLIN(  26)		sprite->set_x((int)0);
HXDLIN(  26)		sprite->set_y((int)0);
HXDLIN(  26)		this->l = sprite;
HXLINE(  27)		HX_VARI( ::Array< ::Dynamic>,_g) = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  27)		{
HXLINE(  27)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  27)			while((_g1 < (int)19)){
HXLINE(  27)				++_g1;
HXDLIN(  27)				HX_VARI_NAME(  ::openfl::display::BitmapData,png1,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("field/m.png",d3,39,43,7c)),null());
HXDLIN(  27)				HX_VARI_NAME(  ::openfl::display::Tileset,set1,"set") =  ::openfl::display::Tileset_obj::__new(png1,null());
HXDLIN(  27)				set1->addRect(png1->rect);
HXDLIN(  27)				Int _hx_tmp3 = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
HXDLIN(  27)				Int _hx_tmp4 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
HXDLIN(  27)				HX_VARI_NAME(  ::openfl::display::Tilemap,map1,"map") =  ::openfl::display::Tilemap_obj::__new(_hx_tmp3,_hx_tmp4,set1,null());
HXDLIN(  27)				map1->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN(  27)				HX_VARI_NAME(  ::openfl::display::Sprite,sprite1,"sprite") =  ::openfl::display::Sprite_obj::__new();
HXDLIN(  27)				sprite1->addChild(map1);
HXDLIN(  27)				sprite1->set_x((int)0);
HXDLIN(  27)				sprite1->set_y((int)0);
HXDLIN(  27)				_g->push(sprite1);
            			}
            		}
HXDLIN(  27)		this->ms = _g;
HXLINE(  28)		HX_VARI_NAME(  ::openfl::display::BitmapData,png2,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("field/r.png",58,20,44,5d)),null());
HXDLIN(  28)		HX_VARI_NAME(  ::openfl::display::Tileset,set2,"set") =  ::openfl::display::Tileset_obj::__new(png2,null());
HXDLIN(  28)		set2->addRect(png2->rect);
HXDLIN(  28)		Int _hx_tmp5 = ::Std_obj::_hx_int(set2->getRect((int)0)->width);
HXDLIN(  28)		Int _hx_tmp6 = ::Std_obj::_hx_int(set2->getRect((int)0)->height);
HXDLIN(  28)		HX_VARI_NAME(  ::openfl::display::Tilemap,map2,"map") =  ::openfl::display::Tilemap_obj::__new(_hx_tmp5,_hx_tmp6,set2,null());
HXDLIN(  28)		map2->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN(  28)		HX_VARI_NAME(  ::openfl::display::Sprite,sprite2,"sprite") =  ::openfl::display::Sprite_obj::__new();
HXDLIN(  28)		sprite2->addChild(map2);
HXDLIN(  28)		sprite2->set_x((int)0);
HXDLIN(  28)		sprite2->set_y((int)0);
HXDLIN(  28)		this->r = sprite2;
HXLINE(  30)		this->l->set_y((y - (int)13));
HXLINE(  31)		this->addChild(this->l);
HXLINE(  33)		{
HXLINE(  33)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(  33)			HX_VARI( ::Array< ::Dynamic>,_g2) = this->ms;
HXDLIN(  33)			while((_g11 < _g2->length)){
HXLINE(  33)				HX_VARI(  ::openfl::display::Sprite,m) = _g2->__get(_g11).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  33)				++_g11;
HXLINE(  34)				Float _hx_tmp7 = this->l->get_y();
HXDLIN(  34)				m->set_y(_hx_tmp7);
HXLINE(  35)				this->addChild(m);
            			}
            		}
HXLINE(  38)		Float _hx_tmp8 = this->l->get_y();
HXDLIN(  38)		this->r->set_y(_hx_tmp8);
HXLINE(  39)		this->addChild(this->r);
HXLINE(  40)		this->addChild(this->f);
HXLINE(  42)		this->setText(HX_("",00,00,00,00));
            	}

Dynamic Field_obj::__CreateEmpty() { return new Field_obj; }

hx::ObjectPtr< Field_obj > Field_obj::__new( ::Globals g,Float x,Float y)
{
	hx::ObjectPtr< Field_obj > _hx_result = new Field_obj();
	_hx_result->__construct(g,x,y);
	return _hx_result;
}

Dynamic Field_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Field_obj > _hx_result = new Field_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

::String Field_obj::getText(){
            	HX_STACK_FRAME("Field","getText",0xce2b2c8f,"Field.getText","Field.hx",46,0x85a79a64)
            	HX_STACK_THIS(this)
HXLINE(  46)		return this->f->get_text();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Field_obj,getText,return )

void Field_obj::setText(::String t){
            	HX_STACK_FRAME("Field","setText",0xc12cbd9b,"Field.setText","Field.hx",55,0x85a79a64)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE(  56)		HX_VARI( ::String,t20) = t;
HXLINE(  58)		Bool _hx_tmp = (t.length > (int)11);
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  59)			this->g->errSfx();
HXLINE(  60)			t20 = t.substr((int)0,(int)11);
            		}
HXLINE(  63)		Bool _hx_tmp1 = (t20.length == (int)0);
HXDLIN(  63)		if (_hx_tmp1) {
HXLINE(  64)			this->l->set_visible(false);
HXLINE(  66)			{
HXLINE(  66)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  66)				HX_VARI( ::Array< ::Dynamic>,_g1) = this->ms;
HXDLIN(  66)				while((_g < _g1->length)){
HXLINE(  66)					HX_VARI(  ::openfl::display::Sprite,m) = _g1->__get(_g).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  66)					++_g;
HXDLIN(  66)					m->set_visible(false);
            				}
            			}
HXLINE(  68)			this->r->set_visible(false);
            		}
            		else {
HXLINE(  69)			Bool _hx_tmp2 = (t20.length == (int)1);
HXDLIN(  69)			if (_hx_tmp2) {
HXLINE(  70)				Float _hx_tmp3 = ((Float)(this->tE * (int)2) / (Float)(int)2);
HXDLIN(  70)				this->l->set_x((((Float)240.) - _hx_tmp3));
HXLINE(  71)				this->l->set_visible(true);
HXLINE(  73)				{
HXLINE(  73)					HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(  73)					HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->ms;
HXDLIN(  73)					while((_g2 < _g11->length)){
HXLINE(  73)						HX_VARI_NAME(  ::openfl::display::Sprite,m1,"m") = _g11->__get(_g2).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  73)						++_g2;
HXDLIN(  73)						m1->set_visible(false);
            					}
            				}
HXLINE(  75)				Float _hx_tmp4 = this->l->get_x();
HXDLIN(  75)				Float _hx_tmp5 = (_hx_tmp4 + this->tE);
HXDLIN(  75)				this->r->set_x(_hx_tmp5);
HXLINE(  76)				this->r->set_visible(true);
            			}
            			else {
HXLINE(  78)				Int _hx_tmp6 = (this->tE * (int)2);
HXDLIN(  78)				Int _hx_tmp7 = (this->tW * (t20.length - (int)1));
HXDLIN(  78)				this->l->set_x((((Float)240.) - ((Float)(_hx_tmp6 + _hx_tmp7) / (Float)(int)2)));
HXLINE(  79)				this->l->set_visible(true);
HXLINE(  81)				{
HXLINE(  81)					HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN(  81)					HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = this->ms;
HXDLIN(  81)					while((_g3 < _g12->length)){
HXLINE(  81)						HX_VARI_NAME(  ::openfl::display::Sprite,m2,"m") = _g12->__get(_g3).StaticCast<  ::openfl::display::Sprite >();
HXDLIN(  81)						++_g3;
HXDLIN(  81)						m2->set_visible(false);
            					}
            				}
HXLINE(  82)				{
HXLINE(  82)					HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN(  82)					HX_VARI_NAME( Int,_g4,"_g") = (t20.length - (int)1);
HXDLIN(  82)					while((_g13 < _g4)){
HXLINE(  82)						HX_VARI( Int,i) = _g13++;
HXLINE(  83)						if ((i == (int)0)) {
HXLINE(  83)							Float _hx_tmp8 = this->l->get_x();
HXDLIN(  83)							Float _hx_tmp9 = (_hx_tmp8 + this->tE);
HXDLIN(  83)							this->ms->__get((int)0).StaticCast<  ::openfl::display::Sprite >()->set_x(_hx_tmp9);
            						}
            						else {
HXLINE(  84)							Float _hx_tmp10 = this->ms->__get((i - (int)1)).StaticCast<  ::openfl::display::Sprite >()->get_x();
HXDLIN(  84)							Float _hx_tmp11 = (_hx_tmp10 + this->tW);
HXDLIN(  84)							this->ms->__get(i).StaticCast<  ::openfl::display::Sprite >()->set_x(_hx_tmp11);
            						}
HXLINE(  86)						this->ms->__get(i).StaticCast<  ::openfl::display::Sprite >()->set_visible(true);
            					}
            				}
HXLINE(  89)				Int _hx_tmp12 = (t20.length - (int)2);
HXDLIN(  89)				Float _hx_tmp13 = this->ms->__get(_hx_tmp12).StaticCast<  ::openfl::display::Sprite >()->get_x();
HXDLIN(  89)				Float _hx_tmp14 = (_hx_tmp13 + this->tW);
HXDLIN(  89)				this->r->set_x(_hx_tmp14);
HXLINE(  90)				this->r->set_visible(true);
            			}
            		}
HXLINE(  93)		this->f->set_text(t20);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Field_obj,setText,(void))


Field_obj::Field_obj()
{
}

void Field_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Field);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(cenx,"cenx");
	HX_MARK_MEMBER_NAME(ceny,"ceny");
	HX_MARK_MEMBER_NAME(l,"l");
	HX_MARK_MEMBER_NAME(ms,"ms");
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(tW,"tW");
	HX_MARK_MEMBER_NAME(tE,"tE");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Field_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(cenx,"cenx");
	HX_VISIT_MEMBER_NAME(ceny,"ceny");
	HX_VISIT_MEMBER_NAME(l,"l");
	HX_VISIT_MEMBER_NAME(ms,"ms");
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(tW,"tW");
	HX_VISIT_MEMBER_NAME(tE,"tE");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Field_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		if (HX_FIELD_EQ(inName,"l") ) { return hx::Val( l); }
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r); }
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ms") ) { return hx::Val( ms); }
		if (HX_FIELD_EQ(inName,"tW") ) { return hx::Val( tW); }
		if (HX_FIELD_EQ(inName,"tE") ) { return hx::Val( tE); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"cenx") ) { return hx::Val( cenx); }
		if (HX_FIELD_EQ(inName,"ceny") ) { return hx::Val( ceny); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn()); }
		if (HX_FIELD_EQ(inName,"setText") ) { return hx::Val( setText_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Field_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l") ) { l=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ms") ) { ms=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tW") ) { tW=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tE") ) { tE=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"cenx") ) { cenx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ceny") ) { ceny=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Field_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("cenx","\x6c","\x23","\xbd","\x41"));
	outFields->push(HX_HCSTRING("ceny","\x6d","\x23","\xbd","\x41"));
	outFields->push(HX_HCSTRING("l","\x6c","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ms","\x66","\x5f","\x00","\x00"));
	outFields->push(HX_HCSTRING("r","\x72","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("f","\x66","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("tW","\x63","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("tE","\x51","\x65","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Field_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Field_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Field_obj,cenx),HX_HCSTRING("cenx","\x6c","\x23","\xbd","\x41")},
	{hx::fsFloat,(int)offsetof(Field_obj,ceny),HX_HCSTRING("ceny","\x6d","\x23","\xbd","\x41")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Field_obj,l),HX_HCSTRING("l","\x6c","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Field_obj,ms),HX_HCSTRING("ms","\x66","\x5f","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Field_obj,r),HX_HCSTRING("r","\x72","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Field_obj,f),HX_HCSTRING("f","\x66","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Field_obj,tW),HX_HCSTRING("tW","\x63","\x65","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Field_obj,tE),HX_HCSTRING("tE","\x51","\x65","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Field_obj_sStaticStorageInfo = 0;
#endif

static ::String Field_obj_sMemberFields[] = {
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("cenx","\x6c","\x23","\xbd","\x41"),
	HX_HCSTRING("ceny","\x6d","\x23","\xbd","\x41"),
	HX_HCSTRING("l","\x6c","\x00","\x00","\x00"),
	HX_HCSTRING("ms","\x66","\x5f","\x00","\x00"),
	HX_HCSTRING("r","\x72","\x00","\x00","\x00"),
	HX_HCSTRING("f","\x66","\x00","\x00","\x00"),
	HX_HCSTRING("tW","\x63","\x65","\x00","\x00"),
	HX_HCSTRING("tE","\x51","\x65","\x00","\x00"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("setText","\x6f","\x0d","\x7e","\x12"),
	::String(null()) };

static void Field_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Field_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Field_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Field_obj::__mClass,"__mClass");
};

#endif

hx::Class Field_obj::__mClass;

void Field_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Field","\x9a","\x04","\xc1","\x93");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Field_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Field_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Field_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Field_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Field_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Field_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

