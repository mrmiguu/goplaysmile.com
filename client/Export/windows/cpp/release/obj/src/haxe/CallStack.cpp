// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_CallStack
#include <haxe/CallStack.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif

namespace haxe{

void CallStack_obj::__construct() { }

Dynamic CallStack_obj::__CreateEmpty() { return new CallStack_obj; }

hx::ObjectPtr< CallStack_obj > CallStack_obj::__new()
{
	hx::ObjectPtr< CallStack_obj > _hx_result = new CallStack_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CallStack_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CallStack_obj > _hx_result = new CallStack_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::Dynamic> CallStack_obj::callStack(){
            	HX_STACK_FRAME("haxe.CallStack","callStack",0xfa9165be,"haxe.CallStack.callStack","haxe/CallStack.hx",77,0xb8d73e1d)
HXLINE(  89)		HX_VARI( ::Array< ::String >,s) = ::__hxcpp_get_call_stack(true);
HXLINE(  90)		return ::haxe::CallStack_obj::makeStack(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_obj,callStack,return )

::Array< ::Dynamic> CallStack_obj::exceptionStack(){
            	HX_STACK_FRAME("haxe.CallStack","exceptionStack",0xde34d005,"haxe.CallStack.exceptionStack","haxe/CallStack.hx",140,0xb8d73e1d)
HXLINE( 162)		HX_VARI( ::Array< ::String >,s) = ::__hxcpp_get_exception_stack();
HXLINE( 163)		return ::haxe::CallStack_obj::makeStack(s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_obj,exceptionStack,return )

::String CallStack_obj::toString(::Array< ::Dynamic> stack){
            	HX_STACK_FRAME("haxe.CallStack","toString",0xd59be738,"haxe.CallStack.toString","haxe/CallStack.hx",206,0xb8d73e1d)
            	HX_STACK_ARG(stack,"stack")
HXLINE( 207)		HX_VARI(  ::StringBuf,b) =  ::StringBuf_obj::__new();
HXLINE( 209)		stack = stack->copy();
HXLINE( 210)		stack->reverse();
HXLINE( 212)		{
HXLINE( 212)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 212)			while((_g < stack->length)){
HXLINE( 212)				HX_VARI( ::hx::EnumBase,s) = stack->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 212)				++_g;
HXLINE( 213)				{
HXLINE( 213)					Bool _hx_tmp = hx::IsNotNull( b->charBuf );
HXDLIN( 213)					if (_hx_tmp) {
HXLINE( 213)						b->flush();
            					}
HXDLIN( 213)					b->b->push(HX_("\nCalled from ",bd,26,6b,81));
            				}
HXLINE( 214)				::haxe::CallStack_obj::itemToString(b,s);
            			}
            		}
HXLINE( 216)		Bool _hx_tmp1 = hx::IsNotNull( b->charBuf );
HXDLIN( 216)		if (_hx_tmp1) {
HXLINE( 216)			b->flush();
            		}
HXDLIN( 216)		return b->b->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_obj,toString,return )

void CallStack_obj::itemToString( ::StringBuf b,::hx::EnumBase s){
            	HX_STACK_FRAME("haxe.CallStack","itemToString",0xc121696b,"haxe.CallStack.itemToString","haxe/CallStack.hx",220,0xb8d73e1d)
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(s,"s")
HXLINE( 220)		Int _hx_tmp = ( ( ::hx::EnumBase)(s) )->_hx_getIndex();
HXDLIN( 220)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE( 222)				Bool _hx_tmp1 = hx::IsNotNull( b->charBuf );
HXDLIN( 222)				if (_hx_tmp1) {
HXLINE( 222)					b->flush();
            				}
HXDLIN( 222)				b->b->push(HX_("a C function",f4,1b,53,cb));
            			}
            			break;
            			case (int)1: {
HXLINE( 224)				{
HXLINE( 224)					Bool _hx_tmp2 = hx::IsNotNull( b->charBuf );
HXDLIN( 224)					if (_hx_tmp2) {
HXLINE( 224)						b->flush();
            					}
HXDLIN( 224)					b->b->push(HX_("module ",f4,e1,fa,f7));
            				}
HXLINE( 225)				{
HXLINE( 225)					Bool _hx_tmp3 = hx::IsNotNull( b->charBuf );
HXDLIN( 225)					if (_hx_tmp3) {
HXLINE( 225)						b->flush();
            					}
HXDLIN( 225)					::String _hx_tmp4 = ::Std_obj::string(s->_hx_getString(0));
HXDLIN( 225)					b->b->push(_hx_tmp4);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 226)				HX_VARI( Int,line) = s->_hx_getInt(2);
HXDLIN( 226)				HX_VARI( ::String,file) = s->_hx_getString(1);
HXDLIN( 226)				HX_VARI_NAME( ::hx::EnumBase,s1,"s") = s->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXDLIN( 226)				{
HXLINE( 227)					Bool _hx_tmp5 = hx::IsNotNull( s1 );
HXDLIN( 227)					if (_hx_tmp5) {
HXLINE( 228)						::haxe::CallStack_obj::itemToString(b,s1);
HXLINE( 229)						{
HXLINE( 229)							Bool _hx_tmp6 = hx::IsNotNull( b->charBuf );
HXDLIN( 229)							if (_hx_tmp6) {
HXLINE( 229)								b->flush();
            							}
HXDLIN( 229)							b->b->push(HX_(" (",08,1c,00,00));
            						}
            					}
HXLINE( 231)					{
HXLINE( 231)						Bool _hx_tmp7 = hx::IsNotNull( b->charBuf );
HXDLIN( 231)						if (_hx_tmp7) {
HXLINE( 231)							b->flush();
            						}
HXDLIN( 231)						::String _hx_tmp8 = ::Std_obj::string(file);
HXDLIN( 231)						b->b->push(_hx_tmp8);
            					}
HXLINE( 232)					{
HXLINE( 232)						Bool _hx_tmp9 = hx::IsNotNull( b->charBuf );
HXDLIN( 232)						if (_hx_tmp9) {
HXLINE( 232)							b->flush();
            						}
HXDLIN( 232)						b->b->push(HX_(" line ",8c,69,6d,40));
            					}
HXLINE( 233)					{
HXLINE( 233)						Bool _hx_tmp10 = hx::IsNotNull( b->charBuf );
HXDLIN( 233)						if (_hx_tmp10) {
HXLINE( 233)							b->flush();
            						}
HXDLIN( 233)						::String _hx_tmp11 = ::Std_obj::string(line);
HXDLIN( 233)						b->b->push(_hx_tmp11);
            					}
HXLINE( 234)					Bool _hx_tmp12 = hx::IsNotNull( s1 );
HXDLIN( 234)					if (_hx_tmp12) {
HXLINE( 234)						Bool _hx_tmp13 = hx::IsNotNull( b->charBuf );
HXDLIN( 234)						if (_hx_tmp13) {
HXLINE( 234)							b->flush();
            						}
HXDLIN( 234)						b->b->push(HX_(")",29,00,00,00));
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 236)				{
HXLINE( 236)					Bool _hx_tmp14 = hx::IsNotNull( b->charBuf );
HXDLIN( 236)					if (_hx_tmp14) {
HXLINE( 236)						b->flush();
            					}
HXDLIN( 236)					::String _hx_tmp15 = ::Std_obj::string(s->_hx_getString(0));
HXDLIN( 236)					b->b->push(_hx_tmp15);
            				}
HXLINE( 237)				{
HXLINE( 237)					Bool _hx_tmp16 = hx::IsNotNull( b->charBuf );
HXDLIN( 237)					if (_hx_tmp16) {
HXLINE( 237)						b->flush();
            					}
HXDLIN( 237)					b->b->push(HX_(".",2e,00,00,00));
            				}
HXLINE( 238)				{
HXLINE( 238)					Bool _hx_tmp17 = hx::IsNotNull( b->charBuf );
HXDLIN( 238)					if (_hx_tmp17) {
HXLINE( 238)						b->flush();
            					}
HXDLIN( 238)					::String _hx_tmp18 = ::Std_obj::string(s->_hx_getString(1));
HXDLIN( 238)					b->b->push(_hx_tmp18);
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 240)				{
HXLINE( 240)					Bool _hx_tmp19 = hx::IsNotNull( b->charBuf );
HXDLIN( 240)					if (_hx_tmp19) {
HXLINE( 240)						b->flush();
            					}
HXDLIN( 240)					b->b->push(HX_("local function #",b0,cd,97,ff));
            				}
HXLINE( 241)				{
HXLINE( 241)					Bool _hx_tmp20 = hx::IsNotNull( b->charBuf );
HXDLIN( 241)					if (_hx_tmp20) {
HXLINE( 241)						b->flush();
            					}
HXDLIN( 241)					::String _hx_tmp21 = ::Std_obj::string(s->_hx_getObject(0));
HXDLIN( 241)					b->b->push(_hx_tmp21);
            				}
            			}
            			break;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_obj,itemToString,(void))

::Array< ::Dynamic> CallStack_obj::makeStack(::Array< ::String > s){
            	HX_STACK_FRAME("haxe.CallStack","makeStack",0x41ea826e,"haxe.CallStack.makeStack","haxe/CallStack.hx",246,0xb8d73e1d)
            	HX_STACK_ARG(s,"s")
HXLINE( 294)		HX_VARI( ::Array< ::Dynamic>,m) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 295)		{
HXLINE( 295)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 295)			while((_g < s->length)){
HXLINE( 295)				HX_VARI( ::String,func) = s->__get(_g);
HXDLIN( 295)				++_g;
HXLINE( 296)				HX_VARI( ::Array< ::String >,words) = func.split(HX_("::",c0,32,00,00));
HXLINE( 297)				Bool _hx_tmp = (words->length == (int)0);
HXDLIN( 297)				if (_hx_tmp) {
HXLINE( 298)					m->push(::haxe::StackItem_obj::CFunction_dyn());
            				}
            				else {
HXLINE( 299)					Bool _hx_tmp1 = (words->length == (int)2);
HXDLIN( 299)					if (_hx_tmp1) {
HXLINE( 300)						::String _hx_tmp2 = words->__get((int)0);
HXDLIN( 300)						::String _hx_tmp3 = words->__get((int)1);
HXDLIN( 300)						::hx::EnumBase _hx_tmp4 = ::haxe::StackItem_obj::Method(_hx_tmp2,_hx_tmp3);
HXDLIN( 300)						m->push(_hx_tmp4);
            					}
            					else {
HXLINE( 301)						Bool _hx_tmp5 = (words->length == (int)4);
HXDLIN( 301)						if (_hx_tmp5) {
HXLINE( 302)							::String _hx_tmp6 = words->__get((int)0);
HXDLIN( 302)							::String _hx_tmp7 = words->__get((int)1);
HXDLIN( 302)							::hx::EnumBase _hx_tmp8 = ::haxe::StackItem_obj::Method(_hx_tmp6,_hx_tmp7);
HXDLIN( 302)							::String _hx_tmp9 = words->__get((int)2);
HXDLIN( 302)							::String _hx_tmp10 = words->__get((int)3);
HXDLIN( 302)							 ::Dynamic _hx_tmp11 = ::Std_obj::parseInt(_hx_tmp10);
HXDLIN( 302)							::hx::EnumBase _hx_tmp12 = ::haxe::StackItem_obj::FilePos(_hx_tmp8,_hx_tmp9,_hx_tmp11);
HXDLIN( 302)							m->push(_hx_tmp12);
            						}
            					}
            				}
            			}
            		}
HXLINE( 304)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_obj,makeStack,return )


CallStack_obj::CallStack_obj()
{
}

bool CallStack_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callStack") ) { outValue = callStack_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"makeStack") ) { outValue = makeStack_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"itemToString") ) { outValue = itemToString_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { outValue = exceptionStack_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CallStack_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CallStack_obj_sStaticStorageInfo = 0;
#endif

static void CallStack_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CallStack_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CallStack_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CallStack_obj::__mClass,"__mClass");
};

#endif

hx::Class CallStack_obj::__mClass;

static ::String CallStack_obj_sStaticFields[] = {
	HX_HCSTRING("callStack","\xca","\xc1","\x4a","\x10"),
	HX_HCSTRING("exceptionStack","\x79","\x48","\x56","\x0b"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("itemToString","\xdf","\x1c","\x98","\x1c"),
	HX_HCSTRING("makeStack","\x7a","\xde","\xa3","\x57"),
	::String(null())
};

void CallStack_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.CallStack","\x62","\x4b","\x54","\x6d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CallStack_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CallStack_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CallStack_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CallStack_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CallStack_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallStack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallStack_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
