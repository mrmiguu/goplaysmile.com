// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Pointer.h"
#include "hxMath.h"
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_ValueType
#include <ValueType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif

namespace haxe{
namespace format{

void JsonPrinter_obj::__construct( ::Dynamic replacer,::String space){
            	HX_STACK_FRAME("haxe.format.JsonPrinter","new",0xeb68de75,"haxe.format.JsonPrinter.new","C:\\HaxeToolkit\\haxe\\std/haxe/format/JsonPrinter.hx",56,0x660ed7d4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(replacer,"replacer")
            	HX_STACK_ARG(space,"space")
HXLINE(  57)		this->replacer = replacer;
HXLINE(  58)		this->indent = space;
HXLINE(  59)		this->pretty = hx::IsNotNull( space );
HXLINE(  60)		this->nind = (int)0;
HXLINE(  67)		this->buf =  ::StringBuf_obj::__new();
            	}

Dynamic JsonPrinter_obj::__CreateEmpty() { return new JsonPrinter_obj; }

hx::ObjectPtr< JsonPrinter_obj > JsonPrinter_obj::__new( ::Dynamic replacer,::String space)
{
	hx::ObjectPtr< JsonPrinter_obj > _hx_result = new JsonPrinter_obj();
	_hx_result->__construct(replacer,space);
	return _hx_result;
}

Dynamic JsonPrinter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< JsonPrinter_obj > _hx_result = new JsonPrinter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void JsonPrinter_obj::write( ::Dynamic k, ::Dynamic v){
            	HX_STACK_FRAME("haxe.format.JsonPrinter","write",0x755dea34,"haxe.format.JsonPrinter.write","C:\\HaxeToolkit\\haxe\\std/haxe/format/JsonPrinter.hx",79,0x660ed7d4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(k,"k")
            	HX_STACK_ARG(v,"v")
HXLINE(  80)		Bool _hx_tmp = hx::IsNotNull( this->replacer );
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  80)			v = this->replacer(k,v);
            		}
HXLINE(  81)		{
HXLINE(  81)			HX_VARI( ::hx::EnumBase,_g) = ::Type_obj::_hx_typeof(v);
HXDLIN(  81)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  81)			switch((int)(_hx_tmp1)){
            				case (int)0: {
HXLINE( 136)					HX_VARI(  ::StringBuf,_this) = this->buf;
HXDLIN( 136)					Bool _hx_tmp2 = hx::IsNotNull( _this->charBuf );
HXDLIN( 136)					if (_hx_tmp2) {
HXLINE( 136)						_this->flush();
            					}
HXDLIN( 136)					_this->b->push(HX_("null",87,9e,0e,49));
            				}
            				break;
            				case (int)1: {
HXLINE(  87)					HX_VARI_NAME(  ::StringBuf,_this1,"_this") = this->buf;
HXDLIN(  87)					Bool _hx_tmp3 = hx::IsNotNull( _this1->charBuf );
HXDLIN(  87)					if (_hx_tmp3) {
HXLINE(  87)						_this1->flush();
            					}
HXDLIN(  87)					::String _hx_tmp4 = ::Std_obj::string(( (::String)(v) ));
HXDLIN(  87)					_this1->b->push(_hx_tmp4);
            				}
            				break;
            				case (int)2: {
HXLINE(  89)					::String v1;
HXDLIN(  89)					Bool _hx_tmp5 = ::Math_obj::isFinite(v);
HXDLIN(  89)					if (_hx_tmp5) {
HXLINE(  89)						v1 = v;
            					}
            					else {
HXLINE(  89)						v1 = HX_("null",87,9e,0e,49);
            					}
HXDLIN(  89)					{
HXLINE(  89)						HX_VARI_NAME(  ::StringBuf,_this2,"_this") = this->buf;
HXDLIN(  89)						Bool _hx_tmp6 = hx::IsNotNull( _this2->charBuf );
HXDLIN(  89)						if (_hx_tmp6) {
HXLINE(  89)							_this2->flush();
            						}
HXDLIN(  89)						::String _hx_tmp7 = ::Std_obj::string(v1);
HXDLIN(  89)						_this2->b->push(_hx_tmp7);
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 134)					HX_VARI_NAME(  ::StringBuf,_this3,"_this") = this->buf;
HXDLIN( 134)					Bool _hx_tmp8 = hx::IsNotNull( _this3->charBuf );
HXDLIN( 134)					if (_hx_tmp8) {
HXLINE( 134)						_this3->flush();
            					}
HXDLIN( 134)					::String _hx_tmp9 = ::Std_obj::string(( (::String)(v) ));
HXDLIN( 134)					_this3->b->push(_hx_tmp9);
            				}
            				break;
            				case (int)4: {
HXLINE(  85)					::Array< ::String > _hx_tmp10 = ::Reflect_obj::fields(v);
HXDLIN(  85)					this->fieldsString(v,_hx_tmp10);
            				}
            				break;
            				case (int)5: {
HXLINE(  91)					HX_VARI_NAME(  ::StringBuf,_this4,"_this") = this->buf;
HXDLIN(  91)					Bool _hx_tmp11 = hx::IsNotNull( _this4->charBuf );
HXDLIN(  91)					if (_hx_tmp11) {
HXLINE(  91)						_this4->flush();
            					}
HXDLIN(  91)					_this4->b->push(HX_("\"<fun>\"",09,3c,cc,8b));
            				}
            				break;
            				case (int)6: {
HXLINE(  92)					HX_VARI( hx::Class,c) = _g->_hx_getObject(0).StaticCast< hx::Class >();
HXLINE(  93)					if (hx::IsEq( c,hx::ClassOf< ::String >() )) {
HXLINE(  94)						this->quote(v);
            					}
            					else {
HXLINE(  95)						if (hx::IsEq( c,hx::ArrayBase::__mClass )) {
HXLINE(  96)							HX_VARI_NAME( ::cpp::VirtualArray,v2,"v") = ( (::cpp::VirtualArray)(v) );
HXLINE(  97)							{
HXLINE(  97)								HX_VARI_NAME(  ::StringBuf,_this5,"_this") = this->buf;
HXDLIN(  97)								Bool _hx_tmp12 = hx::IsNull( _this5->charBuf );
HXDLIN(  97)								if (_hx_tmp12) {
HXLINE(  97)									_this5->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN(  97)								_this5->charBuf->push((int)91);
            							}
HXLINE(  99)							HX_VARI( Int,len) = v2->get_length();
HXLINE( 100)							HX_VARI( Int,last) = (len - (int)1);
HXLINE( 101)							{
HXLINE( 101)								HX_VARI( Int,_g1) = (int)0;
HXDLIN( 101)								while((_g1 < len)){
HXLINE( 101)									HX_VARI( Int,i) = _g1++;
HXLINE( 103)									if ((i > (int)0)) {
HXLINE( 103)										HX_VARI_NAME(  ::StringBuf,_this6,"_this") = this->buf;
HXDLIN( 103)										Bool _hx_tmp13 = hx::IsNull( _this6->charBuf );
HXDLIN( 103)										if (_hx_tmp13) {
HXLINE( 103)											_this6->charBuf = ::Array_obj< char >::__new();
            										}
HXDLIN( 103)										_this6->charBuf->push((int)44);
            									}
            									else {
HXLINE( 103)										this->nind++;
            									}
HXLINE( 104)									Bool _hx_tmp14 = this->pretty;
HXDLIN( 104)									if (_hx_tmp14) {
HXLINE( 104)										HX_VARI_NAME(  ::StringBuf,_this7,"_this") = this->buf;
HXDLIN( 104)										Bool _hx_tmp15 = hx::IsNull( _this7->charBuf );
HXDLIN( 104)										if (_hx_tmp15) {
HXLINE( 104)											_this7->charBuf = ::Array_obj< char >::__new();
            										}
HXDLIN( 104)										_this7->charBuf->push((int)10);
            									}
HXLINE( 105)									Bool _hx_tmp16 = this->pretty;
HXDLIN( 105)									if (_hx_tmp16) {
HXLINE( 105)										::String v3 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN( 105)										{
HXLINE( 105)											HX_VARI_NAME(  ::StringBuf,_this8,"_this") = this->buf;
HXDLIN( 105)											Bool _hx_tmp17 = hx::IsNotNull( _this8->charBuf );
HXDLIN( 105)											if (_hx_tmp17) {
HXLINE( 105)												_this8->flush();
            											}
HXDLIN( 105)											::String _hx_tmp18 = ::Std_obj::string(v3);
HXDLIN( 105)											_this8->b->push(_hx_tmp18);
            										}
            									}
HXLINE( 106)									 ::Dynamic _hx_tmp19 = v2->__get(i);
HXDLIN( 106)									this->write(i,_hx_tmp19);
HXLINE( 107)									if ((i == last)) {
HXLINE( 109)										this->nind--;
HXLINE( 110)										Bool _hx_tmp20 = this->pretty;
HXDLIN( 110)										if (_hx_tmp20) {
HXLINE( 110)											HX_VARI_NAME(  ::StringBuf,_this9,"_this") = this->buf;
HXDLIN( 110)											Bool _hx_tmp21 = hx::IsNull( _this9->charBuf );
HXDLIN( 110)											if (_hx_tmp21) {
HXLINE( 110)												_this9->charBuf = ::Array_obj< char >::__new();
            											}
HXDLIN( 110)											_this9->charBuf->push((int)10);
            										}
HXLINE( 111)										Bool _hx_tmp22 = this->pretty;
HXDLIN( 111)										if (_hx_tmp22) {
HXLINE( 111)											::String v4 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN( 111)											{
HXLINE( 111)												HX_VARI_NAME(  ::StringBuf,_this10,"_this") = this->buf;
HXDLIN( 111)												Bool _hx_tmp23 = hx::IsNotNull( _this10->charBuf );
HXDLIN( 111)												if (_hx_tmp23) {
HXLINE( 111)													_this10->flush();
            												}
HXDLIN( 111)												::String _hx_tmp24 = ::Std_obj::string(v4);
HXDLIN( 111)												_this10->b->push(_hx_tmp24);
            											}
            										}
            									}
            								}
            							}
HXLINE( 114)							{
HXLINE( 114)								HX_VARI_NAME(  ::StringBuf,_this11,"_this") = this->buf;
HXDLIN( 114)								Bool _hx_tmp25 = hx::IsNull( _this11->charBuf );
HXDLIN( 114)								if (_hx_tmp25) {
HXLINE( 114)									_this11->charBuf = ::Array_obj< char >::__new();
            								}
HXDLIN( 114)								_this11->charBuf->push((int)93);
            							}
            						}
            						else {
HXLINE( 115)							if (hx::IsEq( c,hx::ClassOf< ::haxe::ds::StringMap >() )) {
HXLINE( 116)								HX_VARI_NAME(  ::haxe::ds::StringMap,v5,"v") = ( ( ::haxe::ds::StringMap)(v) );
HXLINE( 117)								HX_VARI(  ::Dynamic,o) =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 118)								{
HXLINE( 118)									HX_VARI(  ::Dynamic,tmp) = v5->keys();
HXDLIN( 118)									while(true){
HXLINE( 118)										Bool _hx_tmp26 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 118)										if (_hx_tmp26) {
HXLINE( 118)											goto _hx_goto_1;
            										}
HXDLIN( 118)										HX_VARI_NAME( ::String,k1,"k") = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 119)										 ::Dynamic _hx_tmp27 = v5->get(k1);
HXDLIN( 119)										::Reflect_obj::setField(o,k1,_hx_tmp27);
            									}
            									_hx_goto_1:;
            								}
HXLINE( 120)								::Array< ::String > _hx_tmp28 = ::Reflect_obj::fields(o);
HXDLIN( 120)								this->fieldsString(o,_hx_tmp28);
            							}
            							else {
HXLINE( 121)								if (hx::IsEq( c,hx::ClassOf< ::Date >() )) {
HXLINE( 122)									HX_VARI_NAME(  ::Date,v6,"v") = ( ( ::Date)(v) );
HXLINE( 123)									::String _hx_tmp29 = v6->toString();
HXDLIN( 123)									this->quote(_hx_tmp29);
            								}
            								else {
HXLINE( 128)									::Array< ::String > _hx_tmp30 = ::Reflect_obj::fields(v);
HXDLIN( 128)									this->fieldsString(v,_hx_tmp30);
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 131)					HX_VARI_NAME(  ::Dynamic,i1,"i") = ( ( ::hx::EnumBase)(v) )->_hx_getIndex();
HXLINE( 132)					{
HXLINE( 132)						HX_VARI_NAME(  ::StringBuf,_this12,"_this") = this->buf;
HXDLIN( 132)						Bool _hx_tmp31 = hx::IsNotNull( _this12->charBuf );
HXDLIN( 132)						if (_hx_tmp31) {
HXLINE( 132)							_this12->flush();
            						}
HXDLIN( 132)						::String _hx_tmp32 = ::Std_obj::string(( (::String)(i1) ));
HXDLIN( 132)						_this12->b->push(_hx_tmp32);
            					}
            				}
            				break;
            				case (int)8: {
HXLINE(  83)					HX_VARI_NAME(  ::StringBuf,_this13,"_this") = this->buf;
HXDLIN(  83)					Bool _hx_tmp33 = hx::IsNotNull( _this13->charBuf );
HXDLIN(  83)					if (_hx_tmp33) {
HXLINE(  83)						_this13->flush();
            					}
HXDLIN(  83)					_this13->b->push(HX_("\"???\"",45,2f,74,bd));
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(JsonPrinter_obj,write,(void))

void JsonPrinter_obj::fieldsString( ::Dynamic v,::Array< ::String > fields){
            	HX_STACK_FRAME("haxe.format.JsonPrinter","fieldsString",0x974bd375,"haxe.format.JsonPrinter.fieldsString","C:\\HaxeToolkit\\haxe\\std/haxe/format/JsonPrinter.hx",167,0x660ed7d4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(fields,"fields")
HXLINE( 168)		{
HXLINE( 168)			HX_VARI(  ::StringBuf,_this) = this->buf;
HXDLIN( 168)			Bool _hx_tmp = hx::IsNull( _this->charBuf );
HXDLIN( 168)			if (_hx_tmp) {
HXLINE( 168)				_this->charBuf = ::Array_obj< char >::__new();
            			}
HXDLIN( 168)			_this->charBuf->push((int)123);
            		}
HXLINE( 169)		HX_VARI( Int,len) = fields->length;
HXLINE( 170)		HX_VARI( Int,last) = (len - (int)1);
HXLINE( 171)		HX_VARI( Bool,first) = true;
HXLINE( 172)		{
HXLINE( 172)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 172)			while((_g1 < len)){
HXLINE( 172)				HX_VARI( Int,i) = _g1++;
HXLINE( 173)				HX_VARI( ::String,f) = fields->__get(i);
HXLINE( 174)				HX_VARI(  ::Dynamic,value) = ::Reflect_obj::field(v,f);
HXLINE( 175)				Bool _hx_tmp1 = ::Reflect_obj::isFunction(value);
HXDLIN( 175)				if (_hx_tmp1) {
HXLINE( 175)					continue;
            				}
HXLINE( 176)				if (first) {
HXLINE( 176)					this->nind++;
HXDLIN( 176)					first = false;
            				}
            				else {
HXLINE( 176)					HX_VARI_NAME(  ::StringBuf,_this1,"_this") = this->buf;
HXDLIN( 176)					Bool _hx_tmp2 = hx::IsNull( _this1->charBuf );
HXDLIN( 176)					if (_hx_tmp2) {
HXLINE( 176)						_this1->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 176)					_this1->charBuf->push((int)44);
            				}
HXLINE( 177)				Bool _hx_tmp3 = this->pretty;
HXDLIN( 177)				if (_hx_tmp3) {
HXLINE( 177)					HX_VARI_NAME(  ::StringBuf,_this2,"_this") = this->buf;
HXDLIN( 177)					Bool _hx_tmp4 = hx::IsNull( _this2->charBuf );
HXDLIN( 177)					if (_hx_tmp4) {
HXLINE( 177)						_this2->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 177)					_this2->charBuf->push((int)10);
            				}
HXLINE( 178)				Bool _hx_tmp5 = this->pretty;
HXDLIN( 178)				if (_hx_tmp5) {
HXLINE( 178)					::String v1 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN( 178)					{
HXLINE( 178)						HX_VARI_NAME(  ::StringBuf,_this3,"_this") = this->buf;
HXDLIN( 178)						Bool _hx_tmp6 = hx::IsNotNull( _this3->charBuf );
HXDLIN( 178)						if (_hx_tmp6) {
HXLINE( 178)							_this3->flush();
            						}
HXDLIN( 178)						::String _hx_tmp7 = ::Std_obj::string(v1);
HXDLIN( 178)						_this3->b->push(_hx_tmp7);
            					}
            				}
HXLINE( 179)				this->quote(f);
HXLINE( 180)				{
HXLINE( 180)					HX_VARI_NAME(  ::StringBuf,_this4,"_this") = this->buf;
HXDLIN( 180)					Bool _hx_tmp8 = hx::IsNull( _this4->charBuf );
HXDLIN( 180)					if (_hx_tmp8) {
HXLINE( 180)						_this4->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 180)					_this4->charBuf->push((int)58);
            				}
HXLINE( 181)				Bool _hx_tmp9 = this->pretty;
HXDLIN( 181)				if (_hx_tmp9) {
HXLINE( 181)					HX_VARI_NAME(  ::StringBuf,_this5,"_this") = this->buf;
HXDLIN( 181)					Bool _hx_tmp10 = hx::IsNull( _this5->charBuf );
HXDLIN( 181)					if (_hx_tmp10) {
HXLINE( 181)						_this5->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 181)					_this5->charBuf->push((int)32);
            				}
HXLINE( 182)				this->write(f,value);
HXLINE( 183)				if ((i == last)) {
HXLINE( 185)					this->nind--;
HXLINE( 186)					Bool _hx_tmp11 = this->pretty;
HXDLIN( 186)					if (_hx_tmp11) {
HXLINE( 186)						HX_VARI_NAME(  ::StringBuf,_this6,"_this") = this->buf;
HXDLIN( 186)						Bool _hx_tmp12 = hx::IsNull( _this6->charBuf );
HXDLIN( 186)						if (_hx_tmp12) {
HXLINE( 186)							_this6->charBuf = ::Array_obj< char >::__new();
            						}
HXDLIN( 186)						_this6->charBuf->push((int)10);
            					}
HXLINE( 187)					Bool _hx_tmp13 = this->pretty;
HXDLIN( 187)					if (_hx_tmp13) {
HXLINE( 187)						::String v2 = ::StringTools_obj::lpad(HX_("",00,00,00,00),this->indent,(this->nind * this->indent.length));
HXDLIN( 187)						{
HXLINE( 187)							HX_VARI_NAME(  ::StringBuf,_this7,"_this") = this->buf;
HXDLIN( 187)							Bool _hx_tmp14 = hx::IsNotNull( _this7->charBuf );
HXDLIN( 187)							if (_hx_tmp14) {
HXLINE( 187)								_this7->flush();
            							}
HXDLIN( 187)							::String _hx_tmp15 = ::Std_obj::string(v2);
HXDLIN( 187)							_this7->b->push(_hx_tmp15);
            						}
            					}
            				}
            			}
            		}
HXLINE( 190)		{
HXLINE( 190)			HX_VARI_NAME(  ::StringBuf,_this8,"_this") = this->buf;
HXDLIN( 190)			Bool _hx_tmp16 = hx::IsNull( _this8->charBuf );
HXDLIN( 190)			if (_hx_tmp16) {
HXLINE( 190)				_this8->charBuf = ::Array_obj< char >::__new();
            			}
HXDLIN( 190)			_this8->charBuf->push((int)125);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(JsonPrinter_obj,fieldsString,(void))

void JsonPrinter_obj::quote(::String s){
            	HX_STACK_FRAME("haxe.format.JsonPrinter","quote",0x02f6a091,"haxe.format.JsonPrinter.quote","C:\\HaxeToolkit\\haxe\\std/haxe/format/JsonPrinter.hx",193,0x660ed7d4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 195)		Int _hx_tmp = s.length;
HXDLIN( 195)		Int _hx_tmp1 = ::haxe::Utf8_obj::length(s);
HXDLIN( 195)		if ((_hx_tmp != _hx_tmp1)) {
HXLINE( 196)			this->quoteUtf8(s);
HXLINE( 197)			return;
            		}
HXLINE( 200)		{
HXLINE( 200)			HX_VARI(  ::StringBuf,_this) = this->buf;
HXDLIN( 200)			Bool _hx_tmp2 = hx::IsNull( _this->charBuf );
HXDLIN( 200)			if (_hx_tmp2) {
HXLINE( 200)				_this->charBuf = ::Array_obj< char >::__new();
            			}
HXDLIN( 200)			_this->charBuf->push((int)34);
            		}
HXLINE( 201)		HX_VARI( Int,i) = (int)0;
HXLINE( 202)		while(true){
HXLINE( 203)			Int index = i++;
HXDLIN( 203)			HX_VARI( Int,c) = s.cca(index);
HXLINE( 204)			if ((c == (int)0)) {
HXLINE( 204)				goto _hx_goto_3;
            			}
HXLINE( 205)			switch((int)(c)){
            				case (int)8: {
HXLINE( 211)					HX_VARI_NAME(  ::StringBuf,_this1,"_this") = this->buf;
HXDLIN( 211)					Bool _hx_tmp3 = hx::IsNotNull( _this1->charBuf );
HXDLIN( 211)					if (_hx_tmp3) {
HXLINE( 211)						_this1->flush();
            					}
HXDLIN( 211)					_this1->b->push(HX_("\\b",86,50,00,00));
            				}
            				break;
            				case (int)9: {
HXLINE( 210)					HX_VARI_NAME(  ::StringBuf,_this2,"_this") = this->buf;
HXDLIN( 210)					Bool _hx_tmp4 = hx::IsNotNull( _this2->charBuf );
HXDLIN( 210)					if (_hx_tmp4) {
HXLINE( 210)						_this2->flush();
            					}
HXDLIN( 210)					_this2->b->push(HX_("\\t",98,50,00,00));
            				}
            				break;
            				case (int)10: {
HXLINE( 208)					HX_VARI_NAME(  ::StringBuf,_this3,"_this") = this->buf;
HXDLIN( 208)					Bool _hx_tmp5 = hx::IsNotNull( _this3->charBuf );
HXDLIN( 208)					if (_hx_tmp5) {
HXLINE( 208)						_this3->flush();
            					}
HXDLIN( 208)					_this3->b->push(HX_("\\n",92,50,00,00));
            				}
            				break;
            				case (int)12: {
HXLINE( 212)					HX_VARI_NAME(  ::StringBuf,_this4,"_this") = this->buf;
HXDLIN( 212)					Bool _hx_tmp6 = hx::IsNotNull( _this4->charBuf );
HXDLIN( 212)					if (_hx_tmp6) {
HXLINE( 212)						_this4->flush();
            					}
HXDLIN( 212)					_this4->b->push(HX_("\\f",8a,50,00,00));
            				}
            				break;
            				case (int)13: {
HXLINE( 209)					HX_VARI_NAME(  ::StringBuf,_this5,"_this") = this->buf;
HXDLIN( 209)					Bool _hx_tmp7 = hx::IsNotNull( _this5->charBuf );
HXDLIN( 209)					if (_hx_tmp7) {
HXLINE( 209)						_this5->flush();
            					}
HXDLIN( 209)					_this5->b->push(HX_("\\r",96,50,00,00));
            				}
            				break;
            				case (int)34: {
HXLINE( 206)					HX_VARI_NAME(  ::StringBuf,_this6,"_this") = this->buf;
HXDLIN( 206)					Bool _hx_tmp8 = hx::IsNotNull( _this6->charBuf );
HXDLIN( 206)					if (_hx_tmp8) {
HXLINE( 206)						_this6->flush();
            					}
HXDLIN( 206)					_this6->b->push(HX_("\\\"",46,50,00,00));
            				}
            				break;
            				case (int)92: {
HXLINE( 207)					HX_VARI_NAME(  ::StringBuf,_this7,"_this") = this->buf;
HXDLIN( 207)					Bool _hx_tmp9 = hx::IsNotNull( _this7->charBuf );
HXDLIN( 207)					if (_hx_tmp9) {
HXLINE( 207)						_this7->flush();
            					}
HXDLIN( 207)					_this7->b->push(HX_("\\\\",80,50,00,00));
            				}
            				break;
            				default:{
HXLINE( 217)					HX_VARI_NAME(  ::StringBuf,_this8,"_this") = this->buf;
HXDLIN( 217)					Bool _hx_tmp10 = hx::IsNull( _this8->charBuf );
HXDLIN( 217)					if (_hx_tmp10) {
HXLINE( 217)						_this8->charBuf = ::Array_obj< char >::__new();
            					}
HXDLIN( 217)					_this8->charBuf->push(c);
            				}
            			}
            		}
            		_hx_goto_3:;
HXLINE( 221)		{
HXLINE( 221)			HX_VARI_NAME(  ::StringBuf,_this9,"_this") = this->buf;
HXDLIN( 221)			Bool _hx_tmp11 = hx::IsNull( _this9->charBuf );
HXDLIN( 221)			if (_hx_tmp11) {
HXLINE( 221)				_this9->charBuf = ::Array_obj< char >::__new();
            			}
HXDLIN( 221)			_this9->charBuf->push((int)34);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JsonPrinter_obj,quote,(void))

void JsonPrinter_obj::quoteUtf8(::String s){
            	HX_STACK_FRAME("haxe.format.JsonPrinter","quoteUtf8",0x88683e62,"haxe.format.JsonPrinter.quoteUtf8","C:\\HaxeToolkit\\haxe\\std/haxe/format/JsonPrinter.hx",225,0x660ed7d4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
HXLINE( 226)		HX_VARI(  ::haxe::Utf8,u) =  ::haxe::Utf8_obj::__new(null());
HXLINE( 227)		{
HXLINE( 227)			HX_VARI( ::cpp::Pointer< char >,src) = ::cpp::Pointer_obj::fromPointer(s.__s);
HXDLIN( 227)			HX_VARI( ::cpp::Pointer< char >,end) = src->add(s.length);
HXDLIN( 227)			while(true){
HXLINE( 227)				Bool _hx_tmp = !(src->lt(end));
HXDLIN( 227)				if (_hx_tmp) {
HXLINE( 227)					goto _hx_goto_4;
            				}
HXLINE( 228)				HX_VARI( Int,c) = _hx_utf8_decode_advance(src->ptr);
HXDLIN( 228)				switch((int)(c)){
            					case (int)8: {
HXLINE( 233)						u->addChar((int)92);
HXDLIN( 233)						u->addChar((int)98);
            					}
            					break;
            					case (int)9: {
HXLINE( 232)						u->addChar((int)92);
HXDLIN( 232)						u->addChar((int)116);
            					}
            					break;
            					case (int)10: {
HXLINE( 230)						u->addChar((int)92);
HXDLIN( 230)						u->addChar((int)110);
            					}
            					break;
            					case (int)12: {
HXLINE( 234)						u->addChar((int)92);
HXDLIN( 234)						u->addChar((int)102);
            					}
            					break;
            					case (int)13: {
HXLINE( 231)						u->addChar((int)92);
HXDLIN( 231)						u->addChar((int)114);
            					}
            					break;
            					case (int)34: case (int)92: {
HXLINE( 229)						u->addChar((int)92);
HXDLIN( 229)						u->addChar(c);
            					}
            					break;
            					default:{
HXLINE( 235)						u->addChar(c);
            					}
            				}
            			}
            			_hx_goto_4:;
            		}
HXLINE( 238)		{
HXLINE( 238)			HX_VARI(  ::StringBuf,_this) = this->buf;
HXDLIN( 238)			Bool _hx_tmp1 = hx::IsNotNull( _this->charBuf );
HXDLIN( 238)			if (_hx_tmp1) {
HXLINE( 238)				_this->flush();
            			}
HXDLIN( 238)			_this->b->push(HX_("\"",22,00,00,00));
            		}
HXLINE( 239)		{
HXLINE( 239)			HX_VARI_NAME(  ::StringBuf,_this1,"_this") = this->buf;
HXDLIN( 239)			::String x = u->toString();
HXDLIN( 239)			Bool _hx_tmp2 = hx::IsNotNull( _this1->charBuf );
HXDLIN( 239)			if (_hx_tmp2) {
HXLINE( 239)				_this1->flush();
            			}
HXDLIN( 239)			::String _hx_tmp3 = ::Std_obj::string(x);
HXDLIN( 239)			_this1->b->push(_hx_tmp3);
            		}
HXLINE( 240)		{
HXLINE( 240)			HX_VARI_NAME(  ::StringBuf,_this2,"_this") = this->buf;
HXDLIN( 240)			Bool _hx_tmp4 = hx::IsNotNull( _this2->charBuf );
HXDLIN( 240)			if (_hx_tmp4) {
HXLINE( 240)				_this2->flush();
            			}
HXDLIN( 240)			_this2->b->push(HX_("\"",22,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(JsonPrinter_obj,quoteUtf8,(void))

::String JsonPrinter_obj::print( ::Dynamic o, ::Dynamic replacer,::String space){
            	HX_STACK_FRAME("haxe.format.JsonPrinter","print",0x6d8fd582,"haxe.format.JsonPrinter.print","C:\\HaxeToolkit\\haxe\\std/haxe/format/JsonPrinter.hx",44,0x660ed7d4)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(replacer,"replacer")
            	HX_STACK_ARG(space,"space")
HXLINE(  45)		HX_VARI(  ::haxe::format::JsonPrinter,printer) =  ::haxe::format::JsonPrinter_obj::__new(replacer,space);
HXLINE(  46)		printer->write(HX_("",00,00,00,00),o);
HXLINE(  47)		HX_VARI(  ::StringBuf,_this) = printer->buf;
HXDLIN(  47)		Bool _hx_tmp = hx::IsNotNull( _this->charBuf );
HXDLIN(  47)		if (_hx_tmp) {
HXLINE(  47)			_this->flush();
            		}
HXDLIN(  47)		return _this->b->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(JsonPrinter_obj,print,return )


JsonPrinter_obj::JsonPrinter_obj()
{
}

void JsonPrinter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(JsonPrinter);
	HX_MARK_MEMBER_NAME(buf,"buf");
	HX_MARK_MEMBER_NAME(replacer,"replacer");
	HX_MARK_MEMBER_NAME(indent,"indent");
	HX_MARK_MEMBER_NAME(pretty,"pretty");
	HX_MARK_MEMBER_NAME(nind,"nind");
	HX_MARK_END_CLASS();
}

void JsonPrinter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buf,"buf");
	HX_VISIT_MEMBER_NAME(replacer,"replacer");
	HX_VISIT_MEMBER_NAME(indent,"indent");
	HX_VISIT_MEMBER_NAME(pretty,"pretty");
	HX_VISIT_MEMBER_NAME(nind,"nind");
}

hx::Val JsonPrinter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { return hx::Val( buf); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"nind") ) { return hx::Val( nind); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"write") ) { return hx::Val( write_dyn()); }
		if (HX_FIELD_EQ(inName,"quote") ) { return hx::Val( quote_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indent") ) { return hx::Val( indent); }
		if (HX_FIELD_EQ(inName,"pretty") ) { return hx::Val( pretty); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"replacer") ) { return hx::Val( replacer); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"quoteUtf8") ) { return hx::Val( quoteUtf8_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fieldsString") ) { return hx::Val( fieldsString_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool JsonPrinter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"print") ) { outValue = print_dyn(); return true; }
	}
	return false;
}

hx::Val JsonPrinter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buf") ) { buf=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"nind") ) { nind=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"indent") ) { indent=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pretty") ) { pretty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"replacer") ) { replacer=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void JsonPrinter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buf","\x33","\xc3","\x4a","\x00"));
	outFields->push(HX_HCSTRING("indent","\x6c","\x0c","\xf3","\x93"));
	outFields->push(HX_HCSTRING("pretty","\xb6","\x82","\xc1","\xae"));
	outFields->push(HX_HCSTRING("nind","\x31","\x85","\x05","\x49"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo JsonPrinter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::StringBuf*/ ,(int)offsetof(JsonPrinter_obj,buf),HX_HCSTRING("buf","\x33","\xc3","\x4a","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(JsonPrinter_obj,replacer),HX_HCSTRING("replacer","\xbe","\xe5","\x16","\x18")},
	{hx::fsString,(int)offsetof(JsonPrinter_obj,indent),HX_HCSTRING("indent","\x6c","\x0c","\xf3","\x93")},
	{hx::fsBool,(int)offsetof(JsonPrinter_obj,pretty),HX_HCSTRING("pretty","\xb6","\x82","\xc1","\xae")},
	{hx::fsInt,(int)offsetof(JsonPrinter_obj,nind),HX_HCSTRING("nind","\x31","\x85","\x05","\x49")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *JsonPrinter_obj_sStaticStorageInfo = 0;
#endif

static ::String JsonPrinter_obj_sMemberFields[] = {
	HX_HCSTRING("buf","\x33","\xc3","\x4a","\x00"),
	HX_HCSTRING("replacer","\xbe","\xe5","\x16","\x18"),
	HX_HCSTRING("indent","\x6c","\x0c","\xf3","\x93"),
	HX_HCSTRING("pretty","\xb6","\x82","\xc1","\xae"),
	HX_HCSTRING("nind","\x31","\x85","\x05","\x49"),
	HX_HCSTRING("write","\xdf","\x6c","\x59","\xd0"),
	HX_HCSTRING("fieldsString","\x2a","\xcc","\x56","\x34"),
	HX_HCSTRING("quote","\x3c","\x23","\xf2","\x5d"),
	HX_HCSTRING("quoteUtf8","\x8d","\xf2","\xd1","\x09"),
	::String(null()) };

static void JsonPrinter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(JsonPrinter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void JsonPrinter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(JsonPrinter_obj::__mClass,"__mClass");
};

#endif

hx::Class JsonPrinter_obj::__mClass;

static ::String JsonPrinter_obj_sStaticFields[] = {
	HX_HCSTRING("print","\x2d","\x58","\x8b","\xc8"),
	::String(null())
};

void JsonPrinter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.format.JsonPrinter","\x03","\x80","\xb9","\xf7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &JsonPrinter_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = JsonPrinter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(JsonPrinter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(JsonPrinter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< JsonPrinter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = JsonPrinter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JsonPrinter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JsonPrinter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace format
