// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime__backend_native_NativeAudioSource
#include <lime/_backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_audio_AudioBuffer
#include <lime/audio/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_audio_AudioSource
#include <lime/audio/AudioSource.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif

namespace lime{
namespace audio{

void AudioSource_obj::__construct( ::lime::audio::AudioBuffer buffer,hx::Null< Int >  __o_offset, ::Dynamic length,hx::Null< Int >  __o_loops){
Int offset = __o_offset.Default(0);
Int loops = __o_loops.Default(0);
            	HX_STACK_FRAME("lime.audio.AudioSource","new",0x2bd91bf2,"lime.audio.AudioSource.new","lime/audio/AudioSource.hx",10,0x17352e00)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(offset,"offset")
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(loops,"loops")
HXLINE(  13)		this->onComplete =  ::lime::app::_Event_Void_Void_obj::__new();
HXLINE(  28)		this->buffer = buffer;
HXLINE(  29)		this->offset = offset;
HXLINE(  31)		this->backend =  ::lime::_backend::native::NativeAudioSource_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE(  33)		Bool _hx_tmp;
HXDLIN(  33)		Bool _hx_tmp1 = hx::IsNotNull( length );
HXDLIN(  33)		if (_hx_tmp1) {
HXLINE(  33)			_hx_tmp = hx::IsNotEq( length,(int)0 );
            		}
            		else {
HXLINE(  33)			_hx_tmp = false;
            		}
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  35)			this->set_length(length);
            		}
HXLINE(  39)		this->set_loops(loops);
HXLINE(  41)		Bool _hx_tmp2 = hx::IsNotNull( buffer );
HXDLIN(  41)		if (_hx_tmp2) {
HXLINE(  43)			this->init();
            		}
            	}

Dynamic AudioSource_obj::__CreateEmpty() { return new AudioSource_obj; }

hx::ObjectPtr< AudioSource_obj > AudioSource_obj::__new( ::lime::audio::AudioBuffer buffer,hx::Null< Int >  __o_offset, ::Dynamic length,hx::Null< Int >  __o_loops)
{
	hx::ObjectPtr< AudioSource_obj > _hx_result = new AudioSource_obj();
	_hx_result->__construct(buffer,__o_offset,length,__o_loops);
	return _hx_result;
}

Dynamic AudioSource_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioSource_obj > _hx_result = new AudioSource_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

void AudioSource_obj::dispose(){
            	HX_STACK_FRAME("lime.audio.AudioSource","dispose",0xab53fd31,"lime.audio.AudioSource.dispose","lime/audio/AudioSource.hx",52,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE(  52)		this->backend->dispose();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,dispose,(void))

void AudioSource_obj::init(){
            	HX_STACK_FRAME("lime.audio.AudioSource","init",0x2ed80f3e,"lime.audio.AudioSource.init","lime/audio/AudioSource.hx",59,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE(  59)		this->backend->init();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,init,(void))

void AudioSource_obj::play(){
            	HX_STACK_FRAME("lime.audio.AudioSource","play",0x33770222,"lime.audio.AudioSource.play","lime/audio/AudioSource.hx",66,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE(  66)		this->backend->play();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,play,(void))

void AudioSource_obj::pause(){
            	HX_STACK_FRAME("lime.audio.AudioSource","pause",0xcd74ab08,"lime.audio.AudioSource.pause","lime/audio/AudioSource.hx",73,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE(  73)		this->backend->pause();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,pause,(void))

void AudioSource_obj::stop(){
            	HX_STACK_FRAME("lime.audio.AudioSource","stop",0x3578c430,"lime.audio.AudioSource.stop","lime/audio/AudioSource.hx",80,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE(  80)		this->backend->stop();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,stop,(void))

Int AudioSource_obj::get_currentTime(){
            	HX_STACK_FRAME("lime.audio.AudioSource","get_currentTime",0x5201bb0f,"lime.audio.AudioSource.get_currentTime","lime/audio/AudioSource.hx",94,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE(  94)		return this->backend->getCurrentTime();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,get_currentTime,return )

Int AudioSource_obj::set_currentTime(Int value){
            	HX_STACK_FRAME("lime.audio.AudioSource","set_currentTime",0x4dcd381b,"lime.audio.AudioSource.set_currentTime","lime/audio/AudioSource.hx",101,0x17352e00)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 101)		return this->backend->setCurrentTime(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,set_currentTime,return )

Float AudioSource_obj::get_gain(){
            	HX_STACK_FRAME("lime.audio.AudioSource","get_gain",0xda9f2f36,"lime.audio.AudioSource.get_gain","lime/audio/AudioSource.hx",108,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE( 108)		return this->backend->getGain();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,get_gain,return )

Float AudioSource_obj::set_gain(Float value){
            	HX_STACK_FRAME("lime.audio.AudioSource","set_gain",0x88fc88aa,"lime.audio.AudioSource.set_gain","lime/audio/AudioSource.hx",115,0x17352e00)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 115)		return this->backend->setGain(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,set_gain,return )

Int AudioSource_obj::get_length(){
            	HX_STACK_FRAME("lime.audio.AudioSource","get_length",0x74de2f5d,"lime.audio.AudioSource.get_length","lime/audio/AudioSource.hx",122,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE( 122)		return this->backend->getLength();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,get_length,return )

Int AudioSource_obj::set_length(Int value){
            	HX_STACK_FRAME("lime.audio.AudioSource","set_length",0x785bcdd1,"lime.audio.AudioSource.set_length","lime/audio/AudioSource.hx",129,0x17352e00)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 129)		return this->backend->setLength(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,set_length,return )

Int AudioSource_obj::get_loops(){
            	HX_STACK_FRAME("lime.audio.AudioSource","get_loops",0x5af092f8,"lime.audio.AudioSource.get_loops","lime/audio/AudioSource.hx",136,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE( 136)		return this->backend->getLoops();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,get_loops,return )

Int AudioSource_obj::set_loops(Int value){
            	HX_STACK_FRAME("lime.audio.AudioSource","set_loops",0x3e417f04,"lime.audio.AudioSource.set_loops","lime/audio/AudioSource.hx",143,0x17352e00)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 143)		return this->backend->setLoops(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,set_loops,return )

 ::lime::math::Vector4 AudioSource_obj::get_position(){
            	HX_STACK_FRAME("lime.audio.AudioSource","get_position",0xb78606e0,"lime.audio.AudioSource.get_position","lime/audio/AudioSource.hx",150,0x17352e00)
            	HX_STACK_THIS(this)
HXLINE( 150)		return this->backend->getPosition();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioSource_obj,get_position,return )

 ::lime::math::Vector4 AudioSource_obj::set_position( ::lime::math::Vector4 value){
            	HX_STACK_FRAME("lime.audio.AudioSource","set_position",0xcc7f2a54,"lime.audio.AudioSource.set_position","lime/audio/AudioSource.hx",157,0x17352e00)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 157)		return this->backend->setPosition(value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioSource_obj,set_position,return )


AudioSource_obj::AudioSource_obj()
{
}

void AudioSource_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioSource);
	HX_MARK_MEMBER_NAME(onComplete,"onComplete");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(backend,"backend");
	HX_MARK_END_CLASS();
}

void AudioSource_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onComplete,"onComplete");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(backend,"backend");
}

hx::Val AudioSource_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"gain") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gain()); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn()); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_loops()); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"backend") ) { return hx::Val( backend); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_position()); }
		if (HX_FIELD_EQ(inName,"get_gain") ) { return hx::Val( get_gain_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gain") ) { return hx::Val( set_gain_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_loops") ) { return hx::Val( get_loops_dyn()); }
		if (HX_FIELD_EQ(inName,"set_loops") ) { return hx::Val( set_loops_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_currentTime()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_currentTime") ) { return hx::Val( get_currentTime_dyn()); }
		if (HX_FIELD_EQ(inName,"set_currentTime") ) { return hx::Val( set_currentTime_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AudioSource_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"gain") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gain(inValue) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_loops(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::audio::AudioBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue) ); }
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"backend") ) { backend=inValue.Cast<  ::lime::_backend::native::NativeAudioSource >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onComplete") ) { onComplete=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_currentTime(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioSource_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("currentTime","\xe6","\xa4","\x8e","\x85"));
	outFields->push(HX_HCSTRING("gain","\x7f","\xf0","\x5e","\x44"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("backend","\x14","\xbc","\x87","\xfb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AudioSource_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::app::_Event_Void_Void*/ ,(int)offsetof(AudioSource_obj,onComplete),HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d")},
	{hx::fsObject /*::lime::audio::AudioBuffer*/ ,(int)offsetof(AudioSource_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsInt,(int)offsetof(AudioSource_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsObject /*::lime::_backend::native::NativeAudioSource*/ ,(int)offsetof(AudioSource_obj,backend),HX_HCSTRING("backend","\x14","\xbc","\x87","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AudioSource_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioSource_obj_sMemberFields[] = {
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("backend","\x14","\xbc","\x87","\xfb"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("get_currentTime","\x7d","\x5c","\x70","\x46"),
	HX_HCSTRING("set_currentTime","\x89","\xd9","\x3b","\x42"),
	HX_HCSTRING("get_gain","\x08","\xac","\x19","\xc4"),
	HX_HCSTRING("set_gain","\x7c","\x05","\x77","\x72"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	HX_HCSTRING("get_loops","\xe6","\x4d","\xa3","\xbc"),
	HX_HCSTRING("set_loops","\xf2","\x39","\xf4","\x9f"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	::String(null()) };

static void AudioSource_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AudioSource_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AudioSource_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AudioSource_obj::__mClass,"__mClass");
};

#endif

hx::Class AudioSource_obj::__mClass;

void AudioSource_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.audio.AudioSource","\x00","\xfb","\x03","\xbc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AudioSource_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AudioSource_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AudioSource_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AudioSource_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioSource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioSource_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace audio
