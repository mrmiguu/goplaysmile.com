// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app__Event_Float_Float_Float_Void
#include <lime/app/_Event_Float_Float_Float_Void.h>
#endif
#ifndef INCLUDED_lime_system_Sensor
#include <lime/system/Sensor.h>
#endif
#ifndef INCLUDED_lime_system_SensorType
#include <lime/system/SensorType.h>
#endif

namespace lime{
namespace _hx_system{

void Sensor_obj::__construct(::hx::EnumBase type,Int id){
            	HX_STACK_FRAME("lime.system.Sensor","new",0xd4cfafd2,"lime.system.Sensor.new","lime/system/Sensor.hx",7,0x7b4cf9be)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(id,"id")
HXLINE(  14)		this->onUpdate =  ::lime::app::_Event_Float_Float_Float_Void_obj::__new();
HXLINE(  20)		this->type = type;
HXLINE(  21)		this->id = id;
            	}

Dynamic Sensor_obj::__CreateEmpty() { return new Sensor_obj; }

hx::ObjectPtr< Sensor_obj > Sensor_obj::__new(::hx::EnumBase type,Int id)
{
	hx::ObjectPtr< Sensor_obj > _hx_result = new Sensor_obj();
	_hx_result->__construct(type,id);
	return _hx_result;
}

Dynamic Sensor_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sensor_obj > _hx_result = new Sensor_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::haxe::ds::IntMap Sensor_obj::sensorByID;

::Array< ::Dynamic> Sensor_obj::sensors;

::Array< ::Dynamic> Sensor_obj::getSensors(::hx::EnumBase type){
            	HX_STACK_FRAME("lime.system.Sensor","getSensors",0xecc219d1,"lime.system.Sensor.getSensors","lime/system/Sensor.hx",28,0x7b4cf9be)
            	HX_STACK_ARG(type,"type")
HXLINE(  28)		Bool _hx_tmp = hx::IsNull( type );
HXDLIN(  28)		if (_hx_tmp) {
HXLINE(  30)			return ::lime::_hx_system::Sensor_obj::sensors->copy();
            		}
            		else {
HXLINE(  34)			HX_VARI( ::Array< ::Dynamic>,result) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  36)			{
HXLINE(  36)				HX_VARI( Int,_g) = (int)0;
HXDLIN(  36)				HX_VARI( ::Array< ::Dynamic>,_g1) = ::lime::_hx_system::Sensor_obj::sensors;
HXDLIN(  36)				while((_g < _g1->length)){
HXLINE(  36)					HX_VARI(  ::lime::_hx_system::Sensor,sensor) = _g1->__get(_g).StaticCast<  ::lime::_hx_system::Sensor >();
HXDLIN(  36)					++_g;
HXLINE(  38)					if (hx::IsEq( sensor->type,type )) {
HXLINE(  40)						result->push(sensor);
            					}
            				}
            			}
HXLINE(  46)			return result;
            		}
HXLINE(  28)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Sensor_obj,getSensors,return )

void Sensor_obj::registerSensor(::hx::EnumBase type,Int id){
            	HX_STACK_FRAME("lime.system.Sensor","registerSensor",0x90f30acb,"lime.system.Sensor.registerSensor","lime/system/Sensor.hx",53,0x7b4cf9be)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(id,"id")
HXLINE(  55)		HX_VARI(  ::lime::_hx_system::Sensor,sensor) =  ::lime::_hx_system::Sensor_obj::__new(type,id);
HXLINE(  57)		::lime::_hx_system::Sensor_obj::sensors->push(sensor);
HXLINE(  58)		::lime::_hx_system::Sensor_obj::sensorByID->set(id,sensor);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sensor_obj,registerSensor,(void))


Sensor_obj::Sensor_obj()
{
}

void Sensor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sensor);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(onUpdate,"onUpdate");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_END_CLASS();
}

void Sensor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(onUpdate,"onUpdate");
	HX_VISIT_MEMBER_NAME(type,"type");
}

hx::Val Sensor_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate); }
	}
	return super::__Field(inName,inCallProp);
}

bool Sensor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sensors") ) { outValue = sensors; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sensorByID") ) { outValue = sensorByID; return true; }
		if (HX_FIELD_EQ(inName,"getSensors") ) { outValue = getSensors_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"registerSensor") ) { outValue = registerSensor_dyn(); return true; }
	}
	return false;
}

hx::Val Sensor_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onUpdate") ) { onUpdate=inValue.Cast<  ::lime::app::_Event_Float_Float_Float_Void >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Sensor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"sensors") ) { sensors=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sensorByID") ) { sensorByID=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

void Sensor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Sensor_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Sensor_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsObject /*::lime::app::_Event_Float_Float_Float_Void*/ ,(int)offsetof(Sensor_obj,onUpdate),HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66")},
	{hx::fsObject /*::lime::_hx_system::SensorType*/ ,(int)offsetof(Sensor_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Sensor_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(void *) &Sensor_obj::sensorByID,HX_HCSTRING("sensorByID","\xcc","\xfc","\xca","\x0d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Sensor_obj::sensors,HX_HCSTRING("sensors","\xf9","\xc0","\x9b","\xb2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Sensor_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	::String(null()) };

static void Sensor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sensor_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Sensor_obj::sensorByID,"sensorByID");
	HX_MARK_MEMBER_NAME(Sensor_obj::sensors,"sensors");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sensor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sensor_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Sensor_obj::sensorByID,"sensorByID");
	HX_VISIT_MEMBER_NAME(Sensor_obj::sensors,"sensors");
};

#endif

hx::Class Sensor_obj::__mClass;

static ::String Sensor_obj_sStaticFields[] = {
	HX_HCSTRING("sensorByID","\xcc","\xfc","\xca","\x0d"),
	HX_HCSTRING("sensors","\xf9","\xc0","\x9b","\xb2"),
	HX_HCSTRING("getSensors","\x03","\x47","\xfd","\x01"),
	HX_HCSTRING("registerSensor","\xfd","\xb8","\xd1","\x31"),
	::String(null())
};

void Sensor_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.system.Sensor","\xe0","\x1e","\x6b","\x25");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Sensor_obj::__GetStatic;
	__mClass->mSetStaticField = &Sensor_obj::__SetStatic;
	__mClass->mMarkFunc = Sensor_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Sensor_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sensor_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sensor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sensor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sensor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sensor_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Sensor_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.system.Sensor","boot",0x59032880,"lime.system.Sensor.boot","lime/system/Sensor.hx",10,0x7b4cf9be)
HXLINE(  10)		sensorByID =  ::haxe::ds::IntMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("lime.system.Sensor","boot",0x59032880,"lime.system.Sensor.boot","lime/system/Sensor.hx",11,0x7b4cf9be)
HXLINE(  11)		sensors = ::Array_obj< ::Dynamic>::__new();
            	}
}

} // end namespace lime
} // end namespace system
