// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise
#include <lime/app/Promise.h>
#endif
#ifndef INCLUDED_lime_app__Event_Dynamic_Void
#include <lime/app/_Event_Dynamic_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Int_Void
#include <lime/app/_Event_Int_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app__Event_ofEvents_T_Void
#include <lime/app/_Event_ofEvents_T_Void.h>
#endif
#ifndef INCLUDED_lime_app__Future_FutureWork
#include <lime/app/_Future/FutureWork.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif

namespace lime{
namespace app{

void Future_obj::__construct( ::Dynamic work,hx::Null< Bool >  __o_async){
Bool async = __o_async.Default(false);
            	HX_STACK_FRAME("lime.app.Future","new",0xc0e3b2bb,"lime.app.Future.new","lime/app/Future.hx",26,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(work,"work")
            	HX_STACK_ARG(async,"async")
HXLINE(  26)		Bool _hx_tmp = hx::IsNotNull( work );
HXDLIN(  26)		if (_hx_tmp) {
HXLINE(  28)			if (async) {
HXLINE(  30)				HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE(  31)				promise->future = hx::ObjectPtr<OBJ_>(this);
HXLINE(  33)				::lime::app::_Future::FutureWork_obj::queue( ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("promise",9b,cd,e9,f7),promise)
            					->setFixed(1,HX_("work",d1,01,fd,4e),work)));
            			}
            			else {
HXLINE(  37)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  39)					this->value = work();
HXLINE(  40)					this->isComplete = true;
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic e = _hx_e;
HXLINE(  44)						this->error = e;
HXLINE(  45)						this->isError = true;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
            	}

Dynamic Future_obj::__CreateEmpty() { return new Future_obj; }

hx::ObjectPtr< Future_obj > Future_obj::__new( ::Dynamic work,hx::Null< Bool >  __o_async)
{
	hx::ObjectPtr< Future_obj > _hx_result = new Future_obj();
	_hx_result->__construct(work,__o_async);
	return _hx_result;
}

Dynamic Future_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Future_obj > _hx_result = new Future_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::lime::app::Future Future_obj::onComplete( ::Dynamic listener){
            	HX_STACK_FRAME("lime.app.Future","onComplete",0x3a7dc3fd,"lime.app.Future.onComplete","lime/app/Future.hx",69,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(listener,"listener")
HXLINE(  71)		Bool _hx_tmp = hx::IsNotNull( listener );
HXDLIN(  71)		if (_hx_tmp) {
HXLINE(  73)			Bool _hx_tmp1 = this->isComplete;
HXDLIN(  73)			if (_hx_tmp1) {
HXLINE(  75)				listener(this->value);
            			}
            			else {
HXLINE(  77)				Bool _hx_tmp2 = !(this->isError);
HXDLIN(  77)				if (_hx_tmp2) {
HXLINE(  79)					Bool _hx_tmp3 = hx::IsNull( this->_hx___completeListeners );
HXDLIN(  79)					if (_hx_tmp3) {
HXLINE(  81)						this->_hx___completeListeners = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE(  85)					this->_hx___completeListeners->push(listener);
            				}
            			}
            		}
HXLINE(  91)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,onComplete,return )

 ::lime::app::Future Future_obj::onError( ::Dynamic listener){
            	HX_STACK_FRAME("lime.app.Future","onError",0xb2071604,"lime.app.Future.onError","lime/app/Future.hx",96,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(listener,"listener")
HXLINE(  98)		Bool _hx_tmp = hx::IsNotNull( listener );
HXDLIN(  98)		if (_hx_tmp) {
HXLINE( 100)			Bool _hx_tmp1 = this->isError;
HXDLIN( 100)			if (_hx_tmp1) {
HXLINE( 102)				listener(this->error);
            			}
            			else {
HXLINE( 104)				Bool _hx_tmp2 = !(this->isComplete);
HXDLIN( 104)				if (_hx_tmp2) {
HXLINE( 106)					Bool _hx_tmp3 = hx::IsNull( this->_hx___errorListeners );
HXDLIN( 106)					if (_hx_tmp3) {
HXLINE( 108)						this->_hx___errorListeners = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE( 112)					this->_hx___errorListeners->push(listener);
            				}
            			}
            		}
HXLINE( 118)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,onError,return )

 ::lime::app::Future Future_obj::onProgress( ::Dynamic listener){
            	HX_STACK_FRAME("lime.app.Future","onProgress",0x40e0baf1,"lime.app.Future.onProgress","lime/app/Future.hx",123,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(listener,"listener")
HXLINE( 125)		Bool _hx_tmp = hx::IsNotNull( listener );
HXDLIN( 125)		if (_hx_tmp) {
HXLINE( 127)			Bool _hx_tmp1 = hx::IsNull( this->_hx___progressListeners );
HXDLIN( 127)			if (_hx_tmp1) {
HXLINE( 129)				this->_hx___progressListeners = ::Array_obj< ::Dynamic>::__new();
            			}
HXLINE( 133)			this->_hx___progressListeners->push(listener);
            		}
HXLINE( 137)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,onProgress,return )

 ::lime::app::Future Future_obj::ready(hx::Null< Int >  __o_waitTime){
Int waitTime = __o_waitTime.Default(-1);
            	HX_STACK_FRAME("lime.app.Future","ready",0xd4cc0f7e,"lime.app.Future.ready","lime/app/Future.hx",159,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(waitTime,"waitTime")
HXLINE( 159)		Bool _hx_tmp;
HXDLIN( 159)		if (!(this->isComplete)) {
HXLINE( 159)			_hx_tmp = this->isError;
            		}
            		else {
HXLINE( 159)			_hx_tmp = true;
            		}
HXDLIN( 159)		if (_hx_tmp) {
HXLINE( 161)			return hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE( 165)			HX_VARI( Int,time) = ::lime::_hx_system::System_obj::getTimer();
HXLINE( 166)			HX_VAR( Int,end);
HXDLIN( 166)			if ((waitTime > (int)-1)) {
HXLINE( 166)				end = (time + waitTime);
            			}
            			else {
HXLINE( 166)				end = time;
            			}
HXLINE( 168)			while(true){
HXLINE( 168)				Bool _hx_tmp1;
HXDLIN( 168)				Bool _hx_tmp2;
HXDLIN( 168)				if (!(this->isComplete)) {
HXLINE( 168)					_hx_tmp2 = !(this->isError);
            				}
            				else {
HXLINE( 168)					_hx_tmp2 = false;
            				}
HXDLIN( 168)				if (_hx_tmp2) {
HXLINE( 168)					_hx_tmp1 = (time <= end);
            				}
            				else {
HXLINE( 168)					_hx_tmp1 = false;
            				}
HXDLIN( 168)				if (!(_hx_tmp1)) {
HXLINE( 168)					goto _hx_goto_0;
            				}
HXLINE( 171)				::Sys_obj::sleep(((Float)0.01));
HXLINE( 174)				time = ::lime::_hx_system::System_obj::getTimer();
            			}
            			_hx_goto_0:;
HXLINE( 178)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 159)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,ready,return )

 ::Dynamic Future_obj::result(hx::Null< Int >  __o_waitTime){
Int waitTime = __o_waitTime.Default(-1);
            	HX_STACK_FRAME("lime.app.Future","result",0x69b43162,"lime.app.Future.result","lime/app/Future.hx",187,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(waitTime,"waitTime")
HXLINE( 189)		this->ready(waitTime);
HXLINE( 191)		if (this->isComplete) {
HXLINE( 193)			return this->value;
            		}
            		else {
HXLINE( 197)			return null();
            		}
HXLINE( 191)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,result,return )

 ::lime::app::Future Future_obj::then( ::Dynamic next){
            	HX_STACK_FRAME("lime.app.Future","then",0x0a523022,"lime.app.Future.then","lime/app/Future.hx",206,0x058e0853)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(next,"next")
HXLINE( 206)		Bool _hx_tmp = this->isComplete;
HXDLIN( 206)		if (_hx_tmp) {
HXLINE( 208)			return ( ( ::lime::app::Future)(next(this->value)) );
            		}
            		else {
HXLINE( 210)			Bool _hx_tmp1 = this->isError;
HXDLIN( 210)			if (_hx_tmp1) {
HXLINE( 212)				HX_VARI(  ::lime::app::Future,future) =  ::lime::app::Future_obj::__new(null(),null());
HXLINE( 213)				future->onError(this->error);
HXLINE( 214)				return future;
            			}
            			else {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,next, ::lime::app::Promise,promise) HXARGC(1)
            				void _hx_run( ::Dynamic val){
            					HX_STACK_FRAME("lime.app.Future","then",0x0a523022,"lime.app.Future.then","lime/app/Future.hx",223,0x058e0853)
            					HX_STACK_ARG(val,"val")
HXLINE( 225)					HX_VARI_NAME(  ::lime::app::Future,future1,"future") = ( ( ::lime::app::Future)(next(val)) );
HXLINE( 226)					future1->onError(promise->error_dyn());
HXLINE( 227)					future1->onComplete(promise->complete_dyn());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 218)				HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 220)				this->onError(promise->error_dyn());
HXLINE( 221)				this->onProgress(promise->progress_dyn());
HXLINE( 223)				this->onComplete( ::Dynamic(new _hx_Closure_0(next,promise)));
HXLINE( 231)				return promise->future;
            			}
            		}
HXLINE( 206)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Future_obj,then,return )

 ::lime::app::Future Future_obj::ofEvents( ::lime::app::_Event_ofEvents_T_Void onComplete, ::lime::app::_Event_Dynamic_Void onError, ::lime::app::_Event_Int_Int_Void onProgress){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::lime::app::Promise,promise) HXARGC(1)
            		void _hx_run( ::Dynamic data){
            			HX_STACK_FRAME("lime.app.Future","ofEvents",0x0c824355,"lime.app.Future.ofEvents","lime/app/Future.hx",60,0x058e0853)
            			HX_STACK_ARG(data,"data")
HXLINE(  60)			promise->complete(data);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("lime.app.Future","ofEvents",0x0c824355,"lime.app.Future.ofEvents","lime/app/Future.hx",56,0x058e0853)
            	HX_STACK_ARG(onComplete,"onComplete")
            	HX_STACK_ARG(onError,"onError")
            	HX_STACK_ARG(onProgress,"onProgress")
HXLINE(  58)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE(  60)		onComplete->add( ::Dynamic(new _hx_Closure_0(promise)),true,null());
HXLINE(  61)		Bool _hx_tmp = hx::IsNotNull( onError );
HXDLIN(  61)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::lime::app::Promise,promise) HXARGC(1)
            			void _hx_run( ::Dynamic error){
            				HX_STACK_FRAME("lime.app.Future","ofEvents",0x0c824355,"lime.app.Future.ofEvents","lime/app/Future.hx",61,0x058e0853)
            				HX_STACK_ARG(error,"error")
HXLINE(  61)				promise->error(error);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  61)			onError->add( ::Dynamic(new _hx_Closure_1(promise)),true,null());
            		}
HXLINE(  62)		Bool _hx_tmp1 = hx::IsNotNull( onProgress );
HXDLIN(  62)		if (_hx_tmp1) {
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::lime::app::Promise,promise) HXARGC(2)
            			void _hx_run(Int progress,Int total){
            				HX_STACK_FRAME("lime.app.Future","ofEvents",0x0c824355,"lime.app.Future.ofEvents","lime/app/Future.hx",62,0x058e0853)
            				HX_STACK_ARG(progress,"progress")
            				HX_STACK_ARG(total,"total")
HXLINE(  62)				promise->progress(progress,total);
            			}
            			HX_END_LOCAL_FUNC2((void))

HXLINE(  62)			onProgress->add( ::Dynamic(new _hx_Closure_2(promise)),true,null());
            		}
HXLINE(  64)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Future_obj,ofEvents,return )

 ::lime::app::Future Future_obj::withError( ::Dynamic error){
            	HX_STACK_FRAME("lime.app.Future","withError",0xc7ddc87d,"lime.app.Future.withError","lime/app/Future.hx",238,0x058e0853)
            	HX_STACK_ARG(error,"error")
HXLINE( 240)		HX_VARI(  ::lime::app::Future,future) =  ::lime::app::Future_obj::__new(null(),null());
HXLINE( 241)		future->isError = true;
HXLINE( 242)		future->error = error;
HXLINE( 243)		return future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_obj,withError,return )

 ::lime::app::Future Future_obj::withValue( ::Dynamic value){
            	HX_STACK_FRAME("lime.app.Future","withValue",0x866c7c26,"lime.app.Future.withValue","lime/app/Future.hx",248,0x058e0853)
            	HX_STACK_ARG(value,"value")
HXLINE( 250)		HX_VARI(  ::lime::app::Future,future) =  ::lime::app::Future_obj::__new(null(),null());
HXLINE( 251)		future->isComplete = true;
HXLINE( 252)		future->value = value;
HXLINE( 253)		return future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Future_obj,withValue,return )


Future_obj::Future_obj()
{
}

void Future_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Future);
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(isComplete,"isComplete");
	HX_MARK_MEMBER_NAME(isError,"isError");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(_hx___completeListeners,"__completeListeners");
	HX_MARK_MEMBER_NAME(_hx___errorListeners,"__errorListeners");
	HX_MARK_MEMBER_NAME(_hx___progressListeners,"__progressListeners");
	HX_MARK_END_CLASS();
}

void Future_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(isComplete,"isComplete");
	HX_VISIT_MEMBER_NAME(isError,"isError");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(_hx___completeListeners,"__completeListeners");
	HX_VISIT_MEMBER_NAME(_hx___errorListeners,"__errorListeners");
	HX_VISIT_MEMBER_NAME(_hx___progressListeners,"__progressListeners");
}

hx::Val Future_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"then") ) { return hx::Val( then_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error); }
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( value); }
		if (HX_FIELD_EQ(inName,"ready") ) { return hx::Val( ready_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return hx::Val( result_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isError") ) { return hx::Val( isError); }
		if (HX_FIELD_EQ(inName,"onError") ) { return hx::Val( onError_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isComplete") ) { return hx::Val( isComplete); }
		if (HX_FIELD_EQ(inName,"onComplete") ) { return hx::Val( onComplete_dyn()); }
		if (HX_FIELD_EQ(inName,"onProgress") ) { return hx::Val( onProgress_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__errorListeners") ) { return hx::Val( _hx___errorListeners); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__completeListeners") ) { return hx::Val( _hx___completeListeners); }
		if (HX_FIELD_EQ(inName,"__progressListeners") ) { return hx::Val( _hx___progressListeners); }
	}
	return super::__Field(inName,inCallProp);
}

bool Future_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"ofEvents") ) { outValue = ofEvents_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"withError") ) { outValue = withError_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"withValue") ) { outValue = withValue_dyn(); return true; }
	}
	return false;
}

hx::Val Future_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isError") ) { isError=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isComplete") ) { isComplete=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__errorListeners") ) { _hx___errorListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__completeListeners") ) { _hx___completeListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__progressListeners") ) { _hx___progressListeners=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Future_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"));
	outFields->push(HX_HCSTRING("isComplete","\xc3","\x12","\x77","\xfa"));
	outFields->push(HX_HCSTRING("isError","\x7e","\x6f","\xaf","\x0f"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("__completeListeners","\x66","\x0e","\x5a","\x85"));
	outFields->push(HX_HCSTRING("__errorListeners","\xb7","\x4b","\x93","\x70"));
	outFields->push(HX_HCSTRING("__progressListeners","\xf2","\x98","\xe2","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Future_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Future_obj,error),HX_HCSTRING("error","\xc8","\xcb","\x29","\x73")},
	{hx::fsBool,(int)offsetof(Future_obj,isComplete),HX_HCSTRING("isComplete","\xc3","\x12","\x77","\xfa")},
	{hx::fsBool,(int)offsetof(Future_obj,isError),HX_HCSTRING("isError","\x7e","\x6f","\xaf","\x0f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Future_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Future_obj,_hx___completeListeners),HX_HCSTRING("__completeListeners","\x66","\x0e","\x5a","\x85")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Future_obj,_hx___errorListeners),HX_HCSTRING("__errorListeners","\xb7","\x4b","\x93","\x70")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Future_obj,_hx___progressListeners),HX_HCSTRING("__progressListeners","\xf2","\x98","\xe2","\x78")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Future_obj_sStaticStorageInfo = 0;
#endif

static ::String Future_obj_sMemberFields[] = {
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("isComplete","\xc3","\x12","\x77","\xfa"),
	HX_HCSTRING("isError","\x7e","\x6f","\xaf","\x0f"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("__completeListeners","\x66","\x0e","\x5a","\x85"),
	HX_HCSTRING("__errorListeners","\xb7","\x4b","\x93","\x70"),
	HX_HCSTRING("__progressListeners","\xf2","\x98","\xe2","\x78"),
	HX_HCSTRING("onComplete","\xf8","\xd4","\x7e","\x5d"),
	HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"),
	HX_HCSTRING("onProgress","\xec","\xcb","\xe1","\x63"),
	HX_HCSTRING("ready","\x63","\xa0","\xba","\xe6"),
	HX_HCSTRING("result","\xdd","\x68","\x84","\x08"),
	HX_HCSTRING("then","\xdd","\x02","\xfc","\x4c"),
	::String(null()) };

static void Future_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Future_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Future_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Future_obj::__mClass,"__mClass");
};

#endif

hx::Class Future_obj::__mClass;

static ::String Future_obj_sStaticFields[] = {
	HX_HCSTRING("ofEvents","\x90","\x8f","\x6b","\x29"),
	HX_HCSTRING("withError","\xe2","\x2f","\x17","\xf7"),
	HX_HCSTRING("withValue","\x8b","\xe3","\xa5","\xb5"),
	::String(null())
};

void Future_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.app.Future","\x49","\x39","\x57","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Future_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Future_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Future_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Future_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Future_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Future_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Future_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Future_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace app
