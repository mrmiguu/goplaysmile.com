// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime__backend_native__NativeApplication_KeyEventInfo
#include <lime/_backend/native/_NativeApplication/KeyEventInfo.h>
#endif

namespace lime{
namespace _backend{
namespace native{
namespace _NativeApplication{

void KeyEventInfo_obj::__construct( ::Dynamic type,hx::Null< Int >  __o_windowID,hx::Null< Int >  __o_keyCode,hx::Null< Int >  __o_modifier){
Int windowID = __o_windowID.Default(0);
Int keyCode = __o_keyCode.Default(0);
Int modifier = __o_modifier.Default(0);
            	HX_STACK_FRAME("lime._backend.native._NativeApplication.KeyEventInfo","new",0x9d1330f8,"lime._backend.native._NativeApplication.KeyEventInfo.new","lime/_backend/native/NativeApplication.hx",824,0xb13849fd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(windowID,"windowID")
            	HX_STACK_ARG(keyCode,"keyCode")
            	HX_STACK_ARG(modifier,"modifier")
HXLINE( 826)		this->type = type;
HXLINE( 827)		this->windowID = windowID;
HXLINE( 828)		this->keyCode = keyCode;
HXLINE( 829)		this->modifier = modifier;
            	}

Dynamic KeyEventInfo_obj::__CreateEmpty() { return new KeyEventInfo_obj; }

hx::ObjectPtr< KeyEventInfo_obj > KeyEventInfo_obj::__new( ::Dynamic type,hx::Null< Int >  __o_windowID,hx::Null< Int >  __o_keyCode,hx::Null< Int >  __o_modifier)
{
	hx::ObjectPtr< KeyEventInfo_obj > _hx_result = new KeyEventInfo_obj();
	_hx_result->__construct(type,__o_windowID,__o_keyCode,__o_modifier);
	return _hx_result;
}

Dynamic KeyEventInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KeyEventInfo_obj > _hx_result = new KeyEventInfo_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

 ::lime::_backend::native::_NativeApplication::KeyEventInfo KeyEventInfo_obj::clone(){
            	HX_STACK_FRAME("lime._backend.native._NativeApplication.KeyEventInfo","clone",0x1c2dc9f5,"lime._backend.native._NativeApplication.KeyEventInfo.clone","lime/_backend/native/NativeApplication.hx",836,0xb13849fd)
            	HX_STACK_THIS(this)
HXLINE( 836)		return  ::lime::_backend::native::_NativeApplication::KeyEventInfo_obj::__new(this->type,this->windowID,this->keyCode,this->modifier);
            	}


HX_DEFINE_DYNAMIC_FUNC0(KeyEventInfo_obj,clone,return )


KeyEventInfo_obj::KeyEventInfo_obj()
{
}

hx::Val KeyEventInfo_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { return hx::Val( keyCode); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modifier") ) { return hx::Val( modifier); }
		if (HX_FIELD_EQ(inName,"windowID") ) { return hx::Val( windowID); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val KeyEventInfo_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { keyCode=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modifier") ) { modifier=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowID") ) { windowID=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyEventInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("keyCode","\x6c","\x22","\x9e","\x9b"));
	outFields->push(HX_HCSTRING("modifier","\x57","\xdb","\xc7","\x16"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("windowID","\xcb","\xaf","\xcd","\x7d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo KeyEventInfo_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(KeyEventInfo_obj,keyCode),HX_HCSTRING("keyCode","\x6c","\x22","\x9e","\x9b")},
	{hx::fsInt,(int)offsetof(KeyEventInfo_obj,modifier),HX_HCSTRING("modifier","\x57","\xdb","\xc7","\x16")},
	{hx::fsInt,(int)offsetof(KeyEventInfo_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(KeyEventInfo_obj,windowID),HX_HCSTRING("windowID","\xcb","\xaf","\xcd","\x7d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *KeyEventInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyEventInfo_obj_sMemberFields[] = {
	HX_HCSTRING("keyCode","\x6c","\x22","\x9e","\x9b"),
	HX_HCSTRING("modifier","\x57","\xdb","\xc7","\x16"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("windowID","\xcb","\xaf","\xcd","\x7d"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	::String(null()) };

static void KeyEventInfo_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyEventInfo_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyEventInfo_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyEventInfo_obj::__mClass,"__mClass");
};

#endif

hx::Class KeyEventInfo_obj::__mClass;

void KeyEventInfo_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._backend.native._NativeApplication.KeyEventInfo","\x06","\x95","\x01","\x41");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = KeyEventInfo_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(KeyEventInfo_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< KeyEventInfo_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyEventInfo_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyEventInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyEventInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _backend
} // end namespace native
} // end namespace _NativeApplication
