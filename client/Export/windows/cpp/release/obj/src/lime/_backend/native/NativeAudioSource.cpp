// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeAudioSource
#include <lime/_backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_audio_AudioBuffer
#include <lime/audio/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_audio_AudioSource
#include <lime/audio/AudioSource.h>
#endif
#ifndef INCLUDED_lime_audio_openal_AL
#include <lime/audio/openal/AL.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

namespace lime{
namespace _backend{
namespace native{

void NativeAudioSource_obj::__construct( ::lime::audio::AudioSource parent){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","new",0xf98b6a15,"lime._backend.native.NativeAudioSource.new","lime/_backend/native/NativeAudioSource.hx",27,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
HXLINE(  29)		this->parent = parent;
HXLINE(  31)		this->position =  ::lime::math::Vector4_obj::__new(null(),null(),null(),null());
            	}

Dynamic NativeAudioSource_obj::__CreateEmpty() { return new NativeAudioSource_obj; }

hx::ObjectPtr< NativeAudioSource_obj > NativeAudioSource_obj::__new( ::lime::audio::AudioSource parent)
{
	hx::ObjectPtr< NativeAudioSource_obj > _hx_result = new NativeAudioSource_obj();
	_hx_result->__construct(parent);
	return _hx_result;
}

Dynamic NativeAudioSource_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeAudioSource_obj > _hx_result = new NativeAudioSource_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void NativeAudioSource_obj::dispose(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","dispose",0xa24b98d4,"lime._backend.native.NativeAudioSource.dispose","lime/_backend/native/NativeAudioSource.hx",39,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE(  39)		Bool _hx_tmp = hx::IsNotNull( this->handle );
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  41)			::lime::audio::openal::AL_obj::deleteSource(this->handle);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,dispose,(void))

void NativeAudioSource_obj::init(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","init",0x5d2a1fbb,"lime._backend.native.NativeAudioSource.init","lime/_backend/native/NativeAudioSource.hx",48,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE(  50)		Bool _hx_tmp = hx::IsNull( this->parent->buffer->_hx___srcBuffer );
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  52)			this->parent->buffer->_hx___srcBuffer = ::lime::audio::openal::AL_obj::genBuffer();
HXLINE(  54)			HX_VARI( Int,format) = (int)0;
HXLINE(  56)			if ((this->parent->buffer->channels == (int)1)) {
HXLINE(  58)				if ((this->parent->buffer->bitsPerSample == (int)8)) {
HXLINE(  60)					format = (int)4352;
            				}
            				else {
HXLINE(  62)					if ((this->parent->buffer->bitsPerSample == (int)16)) {
HXLINE(  64)						format = (int)4353;
            					}
            				}
            			}
            			else {
HXLINE(  68)				if ((this->parent->buffer->channels == (int)2)) {
HXLINE(  70)					if ((this->parent->buffer->bitsPerSample == (int)8)) {
HXLINE(  72)						format = (int)4354;
            					}
            					else {
HXLINE(  74)						if ((this->parent->buffer->bitsPerSample == (int)16)) {
HXLINE(  76)							format = (int)4355;
            						}
            					}
            				}
            			}
HXLINE(  82)			::lime::audio::openal::AL_obj::bufferData(this->parent->buffer->_hx___srcBuffer,format,this->parent->buffer->data,this->parent->buffer->data->length,this->parent->buffer->sampleRate);
            		}
HXLINE(  86)		this->handle = ::lime::audio::openal::AL_obj::genSource();
HXLINE(  87)		::lime::audio::openal::AL_obj::sourcei(this->handle,(int)4105,this->parent->buffer->_hx___srcBuffer);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,init,(void))

void NativeAudioSource_obj::play(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","play",0x61c9129f,"lime._backend.native.NativeAudioSource.play","lime/_backend/native/NativeAudioSource.hx",92,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE(  94)		Bool _hx_tmp;
HXDLIN(  94)		if (!(this->playing)) {
HXLINE(  94)			_hx_tmp = hx::IsNull( this->handle );
            		}
            		else {
HXLINE(  94)			_hx_tmp = true;
            		}
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  96)			return;
            		}
HXLINE( 100)		this->playing = true;
HXLINE( 102)		HX_VARI( Int,time) = this->getCurrentTime();
HXLINE( 104)		::lime::audio::openal::AL_obj::sourcePlay(this->handle);
HXLINE( 106)		this->setCurrentTime(time);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,play,(void))

void NativeAudioSource_obj::pause(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","pause",0x26f107eb,"lime._backend.native.NativeAudioSource.pause","lime/_backend/native/NativeAudioSource.hx",111,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 113)		this->playing = false;
HXLINE( 114)		::lime::audio::openal::AL_obj::sourcePause(this->handle);
HXLINE( 116)		Bool _hx_tmp = hx::IsNotNull( this->timer );
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 118)			this->timer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,pause,(void))

void NativeAudioSource_obj::stop(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","stop",0x63cad4ad,"lime._backend.native.NativeAudioSource.stop","lime/_backend/native/NativeAudioSource.hx",125,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 127)		this->playing = false;
HXLINE( 128)		::lime::audio::openal::AL_obj::sourceStop(this->handle);
HXLINE( 130)		Bool _hx_tmp = hx::IsNotNull( this->timer );
HXDLIN( 130)		if (_hx_tmp) {
HXLINE( 132)			this->timer->stop();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,stop,(void))

void NativeAudioSource_obj::timer_onRun(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","timer_onRun",0x4c90fae7,"lime._backend.native.NativeAudioSource.timer_onRun","lime/_backend/native/NativeAudioSource.hx",146,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 148)		this->playing = false;
HXLINE( 150)		Bool _hx_tmp = (this->loops > (int)0);
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 152)			this->loops--;
HXLINE( 153)			this->setCurrentTime((int)0);
HXLINE( 154)			this->play();
HXLINE( 155)			return;
            		}
            		else {
HXLINE( 159)			::lime::audio::openal::AL_obj::sourceStop(this->handle);
HXLINE( 160)			this->timer->stop();
            		}
HXLINE( 164)		this->completed = true;
HXLINE( 165)		this->parent->onComplete->dispatch();
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,timer_onRun,(void))

Int NativeAudioSource_obj::getCurrentTime(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getCurrentTime",0x2632805b,"lime._backend.native.NativeAudioSource.getCurrentTime","lime/_backend/native/NativeAudioSource.hx",179,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 179)		Bool _hx_tmp = this->completed;
HXDLIN( 179)		if (_hx_tmp) {
HXLINE( 181)			return this->getLength();
            		}
            		else {
HXLINE( 185)			Float _hx_tmp1 = ::lime::audio::openal::AL_obj::getSourcef(this->handle,(int)4132);
HXDLIN( 185)			Int _hx_tmp2 = ::Std_obj::_hx_int((_hx_tmp1 * (int)1000));
HXDLIN( 185)			HX_VARI( Int,time) = (_hx_tmp2 - this->parent->offset);
HXLINE( 186)			if ((time < (int)0)) {
HXLINE( 186)				return (int)0;
            			}
HXLINE( 187)			return time;
            		}
HXLINE( 179)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getCurrentTime,return )

Int NativeAudioSource_obj::setCurrentTime(Int value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setCurrentTime",0x465268cf,"lime._backend.native.NativeAudioSource.setCurrentTime","lime/_backend/native/NativeAudioSource.hx",194,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 196)		Bool _hx_tmp = hx::IsNotNull( this->parent->buffer );
HXDLIN( 196)		if (_hx_tmp) {
HXLINE( 198)			::lime::audio::openal::AL_obj::sourceRewind(this->handle);
HXLINE( 199)			Bool _hx_tmp1 = this->playing;
HXDLIN( 199)			if (_hx_tmp1) {
HXLINE( 199)				::lime::audio::openal::AL_obj::sourcePlay(this->handle);
            			}
HXLINE( 200)			 ::Dynamic _hx_tmp2 = this->handle;
HXDLIN( 200)			Float _hx_tmp3 = ((Float)(value + this->parent->offset) / (Float)(int)1000);
HXDLIN( 200)			::lime::audio::openal::AL_obj::sourcef(_hx_tmp2,(int)4132,_hx_tmp3);
            		}
HXLINE( 204)		Bool _hx_tmp4 = this->playing;
HXDLIN( 204)		if (_hx_tmp4) {
HXLINE( 206)			Bool _hx_tmp5 = hx::IsNotNull( this->timer );
HXDLIN( 206)			if (_hx_tmp5) {
HXLINE( 208)				this->timer->stop();
            			}
HXLINE( 212)			Int _hx_tmp6 = this->getLength();
HXDLIN( 212)			HX_VARI( Int,timeRemaining) = (_hx_tmp6 - value);
HXLINE( 214)			if ((timeRemaining > (int)0)) {
HXLINE( 216)				this->completed = false;
HXLINE( 217)				this->timer =  ::haxe::Timer_obj::__new(timeRemaining);
HXLINE( 218)				this->timer->run = this->timer_onRun_dyn();
            			}
            			else {
HXLINE( 222)				this->completed = true;
            			}
            		}
HXLINE( 228)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setCurrentTime,return )

Float NativeAudioSource_obj::getGain(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getGain",0xfde0b86a,"lime._backend.native.NativeAudioSource.getGain","lime/_backend/native/NativeAudioSource.hx",235,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 235)		return ::lime::audio::openal::AL_obj::getSourcef(this->handle,(int)4106);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getGain,return )

Float NativeAudioSource_obj::setGain(Float value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setGain",0xf0e24976,"lime._backend.native.NativeAudioSource.setGain","lime/_backend/native/NativeAudioSource.hx",240,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 242)		::lime::audio::openal::AL_obj::sourcef(this->handle,(int)4106,value);
HXLINE( 243)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setGain,return )

Int NativeAudioSource_obj::getLength(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getLength",0x127b6d91,"lime._backend.native.NativeAudioSource.getLength","lime/_backend/native/NativeAudioSource.hx",248,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 250)		Bool _hx_tmp = hx::IsNotNull( this->length );
HXDLIN( 250)		if (_hx_tmp) {
HXLINE( 252)			return this->length;
            		}
HXLINE( 257)		Float _hx_tmp1 = (((Float)((Float)(this->parent->buffer->data->length * (int)8) / (Float)(this->parent->buffer->channels * this->parent->buffer->bitsPerSample)) / (Float)this->parent->buffer->sampleRate) * (int)1000);
HXDLIN( 257)		Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 257)		return (_hx_tmp2 - this->parent->offset);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getLength,return )

Int NativeAudioSource_obj::setLength(Int value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setLength",0xf5cc599d,"lime._backend.native.NativeAudioSource.setLength","lime/_backend/native/NativeAudioSource.hx",262,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 264)		Bool _hx_tmp;
HXDLIN( 264)		if (this->playing) {
HXLINE( 264)			_hx_tmp = hx::IsNotEq( this->length,value );
            		}
            		else {
HXLINE( 264)			_hx_tmp = false;
            		}
HXDLIN( 264)		if (_hx_tmp) {
HXLINE( 266)			Bool _hx_tmp1 = hx::IsNotNull( this->timer );
HXDLIN( 266)			if (_hx_tmp1) {
HXLINE( 268)				this->timer->stop();
            			}
HXLINE( 272)			Int _hx_tmp2 = this->getCurrentTime();
HXDLIN( 272)			HX_VARI( Int,timeRemaining) = (value - _hx_tmp2);
HXLINE( 274)			if ((timeRemaining > (int)0)) {
HXLINE( 276)				this->timer =  ::haxe::Timer_obj::__new(timeRemaining);
HXLINE( 277)				this->timer->run = this->timer_onRun_dyn();
            			}
            		}
HXLINE( 283)		return (this->length = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setLength,return )

Int NativeAudioSource_obj::getLoops(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getLoops",0x11071744,"lime._backend.native.NativeAudioSource.getLoops","lime/_backend/native/NativeAudioSource.hx",290,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 290)		return this->loops;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getLoops,return )

Int NativeAudioSource_obj::setLoops(Int value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setLoops",0xbf6470b8,"lime._backend.native.NativeAudioSource.setLoops","lime/_backend/native/NativeAudioSource.hx",297,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 297)		return (this->loops = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setLoops,return )

 ::lime::math::Vector4 NativeAudioSource_obj::getPosition(){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","getPosition",0xe5963a14,"lime._backend.native.NativeAudioSource.getPosition","lime/_backend/native/NativeAudioSource.hx",302,0xbddaa99c)
            	HX_STACK_THIS(this)
HXLINE( 304)		HX_VARI( ::Array< Float >,value) = ::lime::audio::openal::AL_obj::getSource3f(this->handle,(int)4100);
HXLINE( 305)		this->position->x = value->__get((int)0);
HXLINE( 306)		this->position->y = value->__get((int)1);
HXLINE( 307)		this->position->z = value->__get((int)2);
HXLINE( 308)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeAudioSource_obj,getPosition,return )

 ::lime::math::Vector4 NativeAudioSource_obj::setPosition( ::lime::math::Vector4 value){
            	HX_STACK_FRAME("lime._backend.native.NativeAudioSource","setPosition",0xf0034120,"lime._backend.native.NativeAudioSource.setPosition","lime/_backend/native/NativeAudioSource.hx",313,0xbddaa99c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 315)		this->position->x = value->x;
HXLINE( 316)		this->position->y = value->y;
HXLINE( 317)		this->position->z = value->z;
HXLINE( 318)		this->position->w = value->w;
HXLINE( 320)		::lime::audio::openal::AL_obj::distanceModel((int)0);
HXLINE( 321)		::lime::audio::openal::AL_obj::source3f(this->handle,(int)4100,this->position->x,this->position->y,this->position->z);
HXLINE( 323)		return this->position;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeAudioSource_obj,setPosition,return )


NativeAudioSource_obj::NativeAudioSource_obj()
{
}

void NativeAudioSource_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeAudioSource);
	HX_MARK_MEMBER_NAME(completed,"completed");
	HX_MARK_MEMBER_NAME(handle,"handle");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(loops,"loops");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(playing,"playing");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_END_CLASS();
}

void NativeAudioSource_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(completed,"completed");
	HX_VISIT_MEMBER_NAME(handle,"handle");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(loops,"loops");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(playing,"playing");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(timer,"timer");
}

hx::Val NativeAudioSource_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn()); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { return hx::Val( loops); }
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer); }
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { return hx::Val( handle); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( length); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"playing") ) { return hx::Val( playing); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"getGain") ) { return hx::Val( getGain_dyn()); }
		if (HX_FIELD_EQ(inName,"setGain") ) { return hx::Val( setGain_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position); }
		if (HX_FIELD_EQ(inName,"getLoops") ) { return hx::Val( getLoops_dyn()); }
		if (HX_FIELD_EQ(inName,"setLoops") ) { return hx::Val( setLoops_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { return hx::Val( completed); }
		if (HX_FIELD_EQ(inName,"getLength") ) { return hx::Val( getLength_dyn()); }
		if (HX_FIELD_EQ(inName,"setLength") ) { return hx::Val( setLength_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"timer_onRun") ) { return hx::Val( timer_onRun_dyn()); }
		if (HX_FIELD_EQ(inName,"getPosition") ) { return hx::Val( getPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getCurrentTime") ) { return hx::Val( getCurrentTime_dyn()); }
		if (HX_FIELD_EQ(inName,"setCurrentTime") ) { return hx::Val( setCurrentTime_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NativeAudioSource_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"loops") ) { loops=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"handle") ) { handle=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::lime::audio::AudioSource >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"playing") ) { playing=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::lime::math::Vector4 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"completed") ) { completed=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeAudioSource_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"));
	outFields->push(HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeAudioSource_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(NativeAudioSource_obj,completed),HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeAudioSource_obj,handle),HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(NativeAudioSource_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(NativeAudioSource_obj,loops),HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78")},
	{hx::fsObject /*::lime::audio::AudioSource*/ ,(int)offsetof(NativeAudioSource_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsBool,(int)offsetof(NativeAudioSource_obj,playing),HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a")},
	{hx::fsObject /*::lime::math::Vector4*/ ,(int)offsetof(NativeAudioSource_obj,position),HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(NativeAudioSource_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NativeAudioSource_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeAudioSource_obj_sMemberFields[] = {
	HX_HCSTRING("completed","\x8b","\xa1","\x38","\x4f"),
	HX_HCSTRING("handle","\xa8","\x83","\xfd","\xb7"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("loops","\x8f","\xf1","\xf9","\x78"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("playing","\x6e","\x0f","\x18","\x8a"),
	HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("play","\xf4","\x2d","\x5a","\x4a"),
	HX_HCSTRING("pause","\xf6","\xd6","\x57","\xbd"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("timer_onRun","\x32","\x24","\xe9","\x57"),
	HX_HCSTRING("getCurrentTime","\xf0","\xf7","\x2c","\x0d"),
	HX_HCSTRING("setCurrentTime","\x64","\xe0","\x4c","\x2d"),
	HX_HCSTRING("getGain","\x35","\xa0","\xe1","\x16"),
	HX_HCSTRING("setGain","\x41","\x31","\xe3","\x09"),
	HX_HCSTRING("getLength","\x1c","\x1e","\x5e","\x1b"),
	HX_HCSTRING("setLength","\x28","\x0a","\xaf","\xfe"),
	HX_HCSTRING("getLoops","\x19","\x01","\xd1","\xd8"),
	HX_HCSTRING("setLoops","\x8d","\x5a","\x2e","\x87"),
	HX_HCSTRING("getPosition","\x5f","\x63","\xee","\xf0"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	::String(null()) };

static void NativeAudioSource_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeAudioSource_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeAudioSource_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeAudioSource_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeAudioSource_obj::__mClass;

void NativeAudioSource_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._backend.native.NativeAudioSource","\xa3","\xbb","\x85","\x6b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeAudioSource_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeAudioSource_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeAudioSource_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeAudioSource_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeAudioSource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeAudioSource_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _backend
} // end namespace native
