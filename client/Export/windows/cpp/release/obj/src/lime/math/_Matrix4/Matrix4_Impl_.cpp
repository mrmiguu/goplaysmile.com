// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math_Vector4
#include <lime/math/Vector4.h>
#endif
#ifndef INCLUDED_lime_math__Matrix4_Matrix4_Impl_
#include <lime/math/_Matrix4/Matrix4_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

static const Float _hx_array_data_5[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
namespace lime{
namespace math{
namespace _Matrix4{

void Matrix4_Impl__obj::__construct() { }

Dynamic Matrix4_Impl__obj::__CreateEmpty() { return new Matrix4_Impl__obj; }

hx::ObjectPtr< Matrix4_Impl__obj > Matrix4_Impl__obj::__new()
{
	hx::ObjectPtr< Matrix4_Impl__obj > _hx_result = new Matrix4_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Matrix4_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix4_Impl__obj > _hx_result = new Matrix4_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Matrix4_Impl__obj::_hx___identity;

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::_new( ::lime::utils::ArrayBufferView data){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","_new",0x84b003e9,"lime.math._Matrix4.Matrix4_Impl_._new","lime/math/Matrix4.hx",16,0xeb65dbd8)
            	HX_STACK_ARG(data,"data")
HXLINE(  16)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXLINE(  18)		Bool _hx_tmp;
HXDLIN(  18)		Bool _hx_tmp1 = hx::IsNotNull( data );
HXDLIN(  18)		if (_hx_tmp1) {
HXLINE(  18)			_hx_tmp = (data->length == (int)16);
            		}
            		else {
HXLINE(  18)			_hx_tmp = false;
            		}
HXDLIN(  18)		if (_hx_tmp) {
HXLINE(  20)			this1 = data;
            		}
            		else {
HXLINE(  24)			HX_VARI( ::cpp::VirtualArray,array) = ::lime::math::_Matrix4::Matrix4_Impl__obj::_hx___identity;
HXDLIN(  24)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(  24)			Bool _hx_tmp2 = hx::IsNotNull( array );
HXDLIN(  24)			if (_hx_tmp2) {
HXLINE(  24)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(  24)				_this->byteOffset = (int)0;
HXDLIN(  24)				_this->length = array->get_length();
HXDLIN(  24)				Int _hx_tmp3 = (_this->length * _this->bytesPerElement);
HXDLIN(  24)				_this->byteLength = _hx_tmp3;
HXDLIN(  24)				Int byteLength = _this->byteLength;
HXDLIN(  24)				HX_VARI_NAME(  ::haxe::io::Bytes,this3,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(  24)				_this->buffer = this3;
HXDLIN(  24)				_this->copyFromArray(array,null());
HXDLIN(  24)				this2 = _this;
            			}
            			else {
HXLINE(  24)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN(  24)			this1 = this2;
            		}
HXLINE(  16)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,_new,return )

void Matrix4_Impl__obj::append( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView lhs){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","append",0x0e638262,"lime.math._Matrix4.Matrix4_Impl_.append","lime/math/Matrix4.hx",31,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(lhs,"lhs")
HXLINE(  33)		Int byteOffset = this1->byteOffset;
HXDLIN(  33)		HX_VARI( Float,m111) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN(  33)		Int byteOffset1 = (this1->byteOffset + (int)16);
HXDLIN(  33)		HX_VARI( Float,m121) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN(  33)		Int byteOffset2 = (this1->byteOffset + (int)32);
HXDLIN(  33)		HX_VARI( Float,m131) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN(  33)		Int byteOffset3 = (this1->byteOffset + (int)48);
HXDLIN(  33)		HX_VARI( Float,m141) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXLINE(  34)		Int byteOffset4 = (this1->byteOffset + (int)4);
HXLINE(  33)		HX_VARI( Float,m112) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXLINE(  34)		Int byteOffset5 = (this1->byteOffset + (int)20);
HXLINE(  33)		HX_VARI( Float,m122) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset5);
HXLINE(  34)		Int byteOffset6 = (this1->byteOffset + (int)36);
HXLINE(  33)		HX_VARI( Float,m132) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXLINE(  34)		Int byteOffset7 = (this1->byteOffset + (int)52);
HXLINE(  33)		HX_VARI( Float,m142) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXLINE(  35)		Int byteOffset8 = (this1->byteOffset + (int)8);
HXLINE(  33)		HX_VARI( Float,m113) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXLINE(  35)		Int byteOffset9 = (this1->byteOffset + (int)24);
HXLINE(  33)		HX_VARI( Float,m123) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXLINE(  35)		Int byteOffset10 = (this1->byteOffset + (int)40);
HXLINE(  33)		HX_VARI( Float,m133) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXLINE(  35)		Int byteOffset11 = (this1->byteOffset + (int)56);
HXLINE(  33)		HX_VARI( Float,m143) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXLINE(  36)		Int byteOffset12 = (this1->byteOffset + (int)12);
HXLINE(  33)		HX_VARI( Float,m114) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset12);
HXLINE(  36)		Int byteOffset13 = (this1->byteOffset + (int)28);
HXLINE(  33)		HX_VARI( Float,m124) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset13);
HXLINE(  36)		Int byteOffset14 = (this1->byteOffset + (int)44);
HXLINE(  33)		HX_VARI( Float,m134) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset14);
HXLINE(  36)		Int byteOffset15 = (this1->byteOffset + (int)60);
HXLINE(  33)		HX_VARI( Float,m144) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset15);
HXDLIN(  33)		HX_VARI( Float,m211) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)0);
HXDLIN(  33)		HX_VARI( Float,m221) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)4);
HXDLIN(  33)		HX_VARI( Float,m231) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)8);
HXDLIN(  33)		HX_VARI( Float,m241) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)12);
HXDLIN(  33)		HX_VARI( Float,m212) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)1);
HXDLIN(  33)		HX_VARI( Float,m222) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)5);
HXDLIN(  33)		HX_VARI( Float,m232) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)9);
HXDLIN(  33)		HX_VARI( Float,m242) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)13);
HXDLIN(  33)		HX_VARI( Float,m213) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)2);
HXDLIN(  33)		HX_VARI( Float,m223) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)6);
HXDLIN(  33)		HX_VARI( Float,m233) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)10);
HXDLIN(  33)		HX_VARI( Float,m243) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)14);
HXDLIN(  33)		HX_VARI( Float,m214) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)3);
HXDLIN(  33)		HX_VARI( Float,m224) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)7);
HXDLIN(  33)		HX_VARI( Float,m234) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)11);
HXDLIN(  33)		HX_VARI( Float,m244) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(lhs,(int)15);
HXLINE(  42)		{
HXLINE(  42)			Int byteOffset16 = this1->byteOffset;
HXDLIN(  42)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset16,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
            		}
HXLINE(  43)		{
HXLINE(  43)			Int byteOffset17 = (this1->byteOffset + (int)4);
HXDLIN(  43)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset17,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
            		}
HXLINE(  44)		{
HXLINE(  44)			Int byteOffset18 = (this1->byteOffset + (int)8);
HXDLIN(  44)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset18,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
            		}
HXLINE(  45)		{
HXLINE(  45)			Int byteOffset19 = (this1->byteOffset + (int)12);
HXDLIN(  45)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset19,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
            		}
HXLINE(  47)		{
HXLINE(  47)			Int byteOffset20 = (this1->byteOffset + (int)16);
HXDLIN(  47)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset20,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
            		}
HXLINE(  48)		{
HXLINE(  48)			Int byteOffset21 = (this1->byteOffset + (int)20);
HXDLIN(  48)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset21,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
            		}
HXLINE(  49)		{
HXLINE(  49)			Int byteOffset22 = (this1->byteOffset + (int)24);
HXDLIN(  49)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset22,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
            		}
HXLINE(  50)		{
HXLINE(  50)			Int byteOffset23 = (this1->byteOffset + (int)28);
HXDLIN(  50)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset23,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
            		}
HXLINE(  52)		{
HXLINE(  52)			Int byteOffset24 = (this1->byteOffset + (int)32);
HXDLIN(  52)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset24,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
            		}
HXLINE(  53)		{
HXLINE(  53)			Int byteOffset25 = (this1->byteOffset + (int)36);
HXDLIN(  53)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset25,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
            		}
HXLINE(  54)		{
HXLINE(  54)			Int byteOffset26 = (this1->byteOffset + (int)40);
HXDLIN(  54)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset26,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
            		}
HXLINE(  55)		{
HXLINE(  55)			Int byteOffset27 = (this1->byteOffset + (int)44);
HXDLIN(  55)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset27,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
            		}
HXLINE(  57)		{
HXLINE(  57)			Int byteOffset28 = (this1->byteOffset + (int)48);
HXDLIN(  57)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset28,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
            		}
HXLINE(  58)		{
HXLINE(  58)			Int byteOffset29 = (this1->byteOffset + (int)52);
HXDLIN(  58)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset29,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
            		}
HXLINE(  59)		{
HXLINE(  59)			Int byteOffset30 = (this1->byteOffset + (int)56);
HXDLIN(  59)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset30,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
            		}
HXLINE(  60)		{
HXLINE(  60)			Int byteOffset31 = (this1->byteOffset + (int)60);
HXDLIN(  60)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset31,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,append,(void))

void Matrix4_Impl__obj::appendRotation( ::lime::utils::ArrayBufferView this1,Float degrees, ::lime::math::Vector4 axis, ::lime::math::Vector4 pivotPoint){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","appendRotation",0xe357adc0,"lime.math._Matrix4.Matrix4_Impl_.appendRotation","lime/math/Matrix4.hx",65,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE(  67)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::getAxisRotation(axis->x,axis->y,axis->z,degrees);
HXLINE(  69)		Bool _hx_tmp = hx::IsNotNull( pivotPoint );
HXDLIN(  69)		if (_hx_tmp) {
HXLINE(  72)			::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(m,pivotPoint->x,pivotPoint->y,pivotPoint->z);
            		}
HXLINE(  76)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendRotation,(void))

void Matrix4_Impl__obj::appendScale( ::lime::utils::ArrayBufferView this1,Float xScale,Float yScale,Float zScale){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","appendScale",0x8a9ad8c8,"lime.math._Matrix4.Matrix4_Impl_.appendScale","lime/math/Matrix4.hx",83,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE(  83)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN(  83)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(  83)		Bool _hx_tmp = hx::IsNotNull( array );
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  83)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(  83)			_this->byteOffset = (int)0;
HXDLIN(  83)			_this->length = array->get_length();
HXDLIN(  83)			Int _hx_tmp1 = (_this->length * _this->bytesPerElement);
HXDLIN(  83)			_this->byteLength = _hx_tmp1;
HXDLIN(  83)			Int byteLength = _this->byteLength;
HXDLIN(  83)			HX_VARI_NAME(  ::haxe::io::Bytes,this3,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(  83)			_this->buffer = this3;
HXDLIN(  83)			_this->copyFromArray(array,null());
HXDLIN(  83)			this2 = _this;
            		}
            		else {
HXLINE(  83)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  83)		 ::lime::utils::ArrayBufferView _hx_tmp2 = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2);
HXDLIN(  83)		::lime::math::_Matrix4::Matrix4_Impl__obj::append(this1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendScale,(void))

void Matrix4_Impl__obj::appendTranslation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","appendTranslation",0xe6447daf,"lime.math._Matrix4.Matrix4_Impl_.appendTranslation","lime/math/Matrix4.hx",88,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE(  90)		{
HXLINE(  90)			Int byteOffset = (this1->byteOffset + (int)48);
HXDLIN(  90)			Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN(  90)			{
HXLINE(  90)				Int byteOffset1 = (this1->byteOffset + (int)48);
HXDLIN(  90)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,(_hx_tmp + x));
            			}
            		}
HXLINE(  91)		{
HXLINE(  91)			Int byteOffset2 = (this1->byteOffset + (int)52);
HXDLIN(  91)			Float _hx_tmp1 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN(  91)			{
HXLINE(  91)				Int byteOffset3 = (this1->byteOffset + (int)52);
HXDLIN(  91)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset3,(_hx_tmp1 + y));
            			}
            		}
HXLINE(  92)		{
HXLINE(  92)			Int byteOffset4 = (this1->byteOffset + (int)56);
HXDLIN(  92)			Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXDLIN(  92)			{
HXLINE(  92)				Int byteOffset5 = (this1->byteOffset + (int)56);
HXDLIN(  92)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset5,(_hx_tmp2 + z));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,appendTranslation,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::clone( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","clone",0xe1a2dbd5,"lime.math._Matrix4.Matrix4_Impl_.clone","lime/math/Matrix4.hx",99,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  99)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(  99)		Bool _hx_tmp = hx::IsNotNull( this1 );
HXDLIN(  99)		if (_hx_tmp) {
HXLINE(  99)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(  99)			HX_VARI(  ::haxe::io::Bytes,srcData) = this1->buffer;
HXDLIN(  99)			HX_VARI( Int,srcLength) = this1->length;
HXDLIN(  99)			HX_VARI( Int,srcByteOffset) = this1->byteOffset;
HXDLIN(  99)			Bool _hx_tmp1 = (this1->type == _this->type);
HXDLIN(  99)			if (_hx_tmp1) {
HXLINE(  99)				HX_VARI( Int,cloneLength) = (srcData->length - srcByteOffset);
HXDLIN(  99)				HX_VARI_NAME(  ::haxe::io::Bytes,this3,"this") = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  99)				_this->buffer = this3;
HXDLIN(  99)				_this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            			}
            			else {
HXLINE(  99)				HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            			}
HXDLIN(  99)			_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  99)			_this->byteOffset = (int)0;
HXDLIN(  99)			_this->length = srcLength;
HXDLIN(  99)			this2 = _this;
            		}
            		else {
HXLINE(  99)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  99)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,clone,return )

void Matrix4_Impl__obj::copyColumnFrom( ::lime::utils::ArrayBufferView this1,Int column, ::lime::math::Vector4 vector){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","copyColumnFrom",0x5224fffd,"lime.math._Matrix4.Matrix4_Impl_.copyColumnFrom","lime/math/Matrix4.hx",106,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector,"vector")
HXLINE( 106)		switch((int)(column)){
            			case (int)0: {
HXLINE( 109)				{
HXLINE( 109)					HX_VARI( Float,val) = vector->x;
HXDLIN( 109)					{
HXLINE( 109)						Int byteOffset = this1->byteOffset;
HXDLIN( 109)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
            					}
            				}
HXLINE( 110)				{
HXLINE( 110)					HX_VARI_NAME( Float,val1,"val") = vector->y;
HXDLIN( 110)					{
HXLINE( 110)						Int byteOffset1 = (this1->byteOffset + (int)4);
HXDLIN( 110)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,val1);
            					}
            				}
HXLINE( 111)				{
HXLINE( 111)					HX_VARI_NAME( Float,val2,"val") = vector->z;
HXDLIN( 111)					{
HXLINE( 111)						Int byteOffset2 = (this1->byteOffset + (int)8);
HXDLIN( 111)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset2,val2);
            					}
            				}
HXLINE( 112)				{
HXLINE( 112)					HX_VARI_NAME( Float,val3,"val") = vector->w;
HXDLIN( 112)					{
HXLINE( 112)						Int byteOffset3 = (this1->byteOffset + (int)12);
HXDLIN( 112)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset3,val3);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 114)				{
HXLINE( 114)					HX_VARI_NAME( Float,val4,"val") = vector->x;
HXDLIN( 114)					{
HXLINE( 114)						Int byteOffset4 = (this1->byteOffset + (int)16);
HXDLIN( 114)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset4,val4);
            					}
            				}
HXLINE( 115)				{
HXLINE( 115)					HX_VARI_NAME( Float,val5,"val") = vector->y;
HXDLIN( 115)					{
HXLINE( 115)						Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 115)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset5,val5);
            					}
            				}
HXLINE( 116)				{
HXLINE( 116)					HX_VARI_NAME( Float,val6,"val") = vector->z;
HXDLIN( 116)					{
HXLINE( 116)						Int byteOffset6 = (this1->byteOffset + (int)24);
HXDLIN( 116)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset6,val6);
            					}
            				}
HXLINE( 117)				{
HXLINE( 117)					HX_VARI_NAME( Float,val7,"val") = vector->w;
HXDLIN( 117)					{
HXLINE( 117)						Int byteOffset7 = (this1->byteOffset + (int)28);
HXDLIN( 117)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset7,val7);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 119)				{
HXLINE( 119)					HX_VARI_NAME( Float,val8,"val") = vector->x;
HXDLIN( 119)					{
HXLINE( 119)						Int byteOffset8 = (this1->byteOffset + (int)32);
HXDLIN( 119)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset8,val8);
            					}
            				}
HXLINE( 120)				{
HXLINE( 120)					HX_VARI_NAME( Float,val9,"val") = vector->y;
HXDLIN( 120)					{
HXLINE( 120)						Int byteOffset9 = (this1->byteOffset + (int)36);
HXDLIN( 120)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset9,val9);
            					}
            				}
HXLINE( 121)				{
HXLINE( 121)					HX_VARI_NAME( Float,val10,"val") = vector->z;
HXDLIN( 121)					{
HXLINE( 121)						Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 121)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset10,val10);
            					}
            				}
HXLINE( 122)				{
HXLINE( 122)					HX_VARI_NAME( Float,val11,"val") = vector->w;
HXDLIN( 122)					{
HXLINE( 122)						Int byteOffset11 = (this1->byteOffset + (int)44);
HXDLIN( 122)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset11,val11);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 124)				{
HXLINE( 124)					HX_VARI_NAME( Float,val12,"val") = vector->x;
HXDLIN( 124)					{
HXLINE( 124)						Int byteOffset12 = (this1->byteOffset + (int)48);
HXDLIN( 124)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset12,val12);
            					}
            				}
HXLINE( 125)				{
HXLINE( 125)					HX_VARI_NAME( Float,val13,"val") = vector->y;
HXDLIN( 125)					{
HXLINE( 125)						Int byteOffset13 = (this1->byteOffset + (int)52);
HXDLIN( 125)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset13,val13);
            					}
            				}
HXLINE( 126)				{
HXLINE( 126)					HX_VARI_NAME( Float,val14,"val") = vector->z;
HXDLIN( 126)					{
HXLINE( 126)						Int byteOffset14 = (this1->byteOffset + (int)56);
HXDLIN( 126)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset14,val14);
            					}
            				}
HXLINE( 127)				{
HXLINE( 127)					HX_VARI_NAME( Float,val15,"val") = vector->w;
HXDLIN( 127)					{
HXLINE( 127)						Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN( 127)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset15,val15);
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 129)				HX_STACK_DO_THROW(((HX_("Error, Column ",ce,33,bf,79) + column) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyColumnFrom,(void))

void Matrix4_Impl__obj::copyColumnTo( ::lime::utils::ArrayBufferView this1,Int column, ::lime::math::Vector4 vector){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","copyColumnTo",0xcc64e54e,"lime.math._Matrix4.Matrix4_Impl_.copyColumnTo","lime/math/Matrix4.hx",138,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector,"vector")
HXLINE( 138)		switch((int)(column)){
            			case (int)0: {
HXLINE( 141)				Int byteOffset = this1->byteOffset;
HXDLIN( 141)				Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 141)				vector->x = _hx_tmp;
HXLINE( 142)				Int byteOffset1 = (this1->byteOffset + (int)4);
HXDLIN( 142)				Float _hx_tmp1 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 142)				vector->y = _hx_tmp1;
HXLINE( 143)				Int byteOffset2 = (this1->byteOffset + (int)8);
HXDLIN( 143)				Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 143)				vector->z = _hx_tmp2;
HXLINE( 144)				Int byteOffset3 = (this1->byteOffset + (int)12);
HXDLIN( 144)				Float _hx_tmp3 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXDLIN( 144)				vector->w = _hx_tmp3;
            			}
            			break;
            			case (int)1: {
HXLINE( 146)				Int byteOffset4 = (this1->byteOffset + (int)16);
HXDLIN( 146)				Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXDLIN( 146)				vector->x = _hx_tmp4;
HXLINE( 147)				Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 147)				Float _hx_tmp5 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset5);
HXDLIN( 147)				vector->y = _hx_tmp5;
HXLINE( 148)				Int byteOffset6 = (this1->byteOffset + (int)24);
HXDLIN( 148)				Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXDLIN( 148)				vector->z = _hx_tmp6;
HXLINE( 149)				Int byteOffset7 = (this1->byteOffset + (int)28);
HXDLIN( 149)				Float _hx_tmp7 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXDLIN( 149)				vector->w = _hx_tmp7;
            			}
            			break;
            			case (int)2: {
HXLINE( 151)				Int byteOffset8 = (this1->byteOffset + (int)32);
HXDLIN( 151)				Float _hx_tmp8 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXDLIN( 151)				vector->x = _hx_tmp8;
HXLINE( 152)				Int byteOffset9 = (this1->byteOffset + (int)36);
HXDLIN( 152)				Float _hx_tmp9 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXDLIN( 152)				vector->y = _hx_tmp9;
HXLINE( 153)				Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 153)				Float _hx_tmp10 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXDLIN( 153)				vector->z = _hx_tmp10;
HXLINE( 154)				Int byteOffset11 = (this1->byteOffset + (int)44);
HXDLIN( 154)				Float _hx_tmp11 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXDLIN( 154)				vector->w = _hx_tmp11;
            			}
            			break;
            			case (int)3: {
HXLINE( 156)				Int byteOffset12 = (this1->byteOffset + (int)48);
HXDLIN( 156)				Float _hx_tmp12 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset12);
HXDLIN( 156)				vector->x = _hx_tmp12;
HXLINE( 157)				Int byteOffset13 = (this1->byteOffset + (int)52);
HXDLIN( 157)				Float _hx_tmp13 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset13);
HXDLIN( 157)				vector->y = _hx_tmp13;
HXLINE( 158)				Int byteOffset14 = (this1->byteOffset + (int)56);
HXDLIN( 158)				Float _hx_tmp14 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset14);
HXDLIN( 158)				vector->z = _hx_tmp14;
HXLINE( 159)				Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN( 159)				Float _hx_tmp15 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset15);
HXDLIN( 159)				vector->w = _hx_tmp15;
            			}
            			break;
            			default:{
HXLINE( 161)				HX_STACK_DO_THROW(((HX_("Error, Column ",ce,33,bf,79) + column) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyColumnTo,(void))

void Matrix4_Impl__obj::copyFrom( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView other){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","copyFrom",0xc27fde47,"lime.math._Matrix4.Matrix4_Impl_.copyFrom","lime/math/Matrix4.hx",170,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 170)		Bool _hx_tmp = hx::IsNotNull( other );
HXDLIN( 170)		if (_hx_tmp) {
HXLINE( 170)			Int _hx_tmp1 = ((int)0 * this1->bytesPerElement);
HXDLIN( 170)			this1->buffer->blit(_hx_tmp1,other->buffer,other->byteOffset,other->byteLength);
            		}
            		else {
HXLINE( 170)			HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,copyFrom,(void))

void Matrix4_Impl__obj::copythisFrom( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView array,hx::Null< Int >  __o_index,hx::Null< Bool >  __o_transposeValues){
Int index = __o_index.Default(0);
Bool transposeValues = __o_transposeValues.Default(false);
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","copythisFrom",0x28530e25,"lime.math._Matrix4.Matrix4_Impl_.copythisFrom","lime/math/Matrix4.hx",174,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transposeValues,"transposeValues")
HXLINE( 176)		if (transposeValues) {
HXLINE( 177)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
HXLINE( 179)		HX_VARI( Int,l) = (array->length - index);
HXLINE( 180)		{
HXLINE( 180)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 180)			HX_VARI( Int,_g) = l;
HXDLIN( 180)			while((_g1 < _g)){
HXLINE( 180)				HX_VARI( Int,c) = _g1++;
HXLINE( 181)				{
HXLINE( 181)					Int _hx_tmp = array->byteOffset;
HXDLIN( 181)					HX_VARI( Float,val) = ::__hxcpp_memory_get_float(array->buffer->b,(_hx_tmp + ((c + index) * (int)4)));
HXDLIN( 181)					{
HXLINE( 181)						Int byteOffset = (this1->byteOffset + (c * (int)4));
HXDLIN( 181)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
            					}
            				}
            			}
            		}
HXLINE( 183)		if (transposeValues) {
HXLINE( 184)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,copythisFrom,(void))

void Matrix4_Impl__obj::copythisTo( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView array,hx::Null< Int >  __o_index,hx::Null< Bool >  __o_transposeValues){
Int index = __o_index.Default(0);
Bool transposeValues = __o_transposeValues.Default(false);
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","copythisTo",0xe75f9976,"lime.math._Matrix4.Matrix4_Impl_.copythisTo","lime/math/Matrix4.hx",189,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(array,"array")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transposeValues,"transposeValues")
HXLINE( 191)		if (transposeValues) {
HXLINE( 192)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
HXLINE( 194)		HX_VARI( Int,l) = this1->length;
HXLINE( 195)		{
HXLINE( 195)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 195)			HX_VARI( Int,_g) = l;
HXDLIN( 195)			while((_g1 < _g)){
HXLINE( 195)				HX_VARI( Int,c) = _g1++;
HXLINE( 196)				{
HXLINE( 196)					Int byteOffset = (this1->byteOffset + (c * (int)4));
HXDLIN( 196)					HX_VARI( Float,val) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 196)					{
HXLINE( 196)						Int _hx_tmp = array->byteOffset;
HXDLIN( 196)						::__hxcpp_memory_set_float(array->buffer->b,(_hx_tmp + ((c + index) * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE( 198)		if (transposeValues) {
HXLINE( 199)			::lime::math::_Matrix4::Matrix4_Impl__obj::transpose(this1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,copythisTo,(void))

void Matrix4_Impl__obj::copyRowFrom( ::lime::utils::ArrayBufferView this1,Int row, ::lime::math::Vector4 vector){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","copyRowFrom",0xc4e0b7e7,"lime.math._Matrix4.Matrix4_Impl_.copyRowFrom","lime/math/Matrix4.hx",206,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector,"vector")
HXLINE( 206)		switch((int)(row)){
            			case (int)0: {
HXLINE( 209)				{
HXLINE( 209)					HX_VARI( Float,val) = vector->x;
HXDLIN( 209)					{
HXLINE( 209)						Int byteOffset = this1->byteOffset;
HXDLIN( 209)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
            					}
            				}
HXLINE( 210)				{
HXLINE( 210)					HX_VARI_NAME( Float,val1,"val") = vector->y;
HXDLIN( 210)					{
HXLINE( 210)						Int byteOffset1 = (this1->byteOffset + (int)16);
HXDLIN( 210)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,val1);
            					}
            				}
HXLINE( 211)				{
HXLINE( 211)					HX_VARI_NAME( Float,val2,"val") = vector->z;
HXDLIN( 211)					{
HXLINE( 211)						Int byteOffset2 = (this1->byteOffset + (int)32);
HXDLIN( 211)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset2,val2);
            					}
            				}
HXLINE( 212)				{
HXLINE( 212)					HX_VARI_NAME( Float,val3,"val") = vector->w;
HXDLIN( 212)					{
HXLINE( 212)						Int byteOffset3 = (this1->byteOffset + (int)48);
HXDLIN( 212)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset3,val3);
            					}
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 215)				{
HXLINE( 215)					HX_VARI_NAME( Float,val4,"val") = vector->x;
HXDLIN( 215)					{
HXLINE( 215)						Int byteOffset4 = (this1->byteOffset + (int)4);
HXDLIN( 215)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset4,val4);
            					}
            				}
HXLINE( 216)				{
HXLINE( 216)					HX_VARI_NAME( Float,val5,"val") = vector->y;
HXDLIN( 216)					{
HXLINE( 216)						Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 216)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset5,val5);
            					}
            				}
HXLINE( 217)				{
HXLINE( 217)					HX_VARI_NAME( Float,val6,"val") = vector->z;
HXDLIN( 217)					{
HXLINE( 217)						Int byteOffset6 = (this1->byteOffset + (int)36);
HXDLIN( 217)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset6,val6);
            					}
            				}
HXLINE( 218)				{
HXLINE( 218)					HX_VARI_NAME( Float,val7,"val") = vector->w;
HXDLIN( 218)					{
HXLINE( 218)						Int byteOffset7 = (this1->byteOffset + (int)52);
HXDLIN( 218)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset7,val7);
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 221)				{
HXLINE( 221)					HX_VARI_NAME( Float,val8,"val") = vector->x;
HXDLIN( 221)					{
HXLINE( 221)						Int byteOffset8 = (this1->byteOffset + (int)8);
HXDLIN( 221)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset8,val8);
            					}
            				}
HXLINE( 222)				{
HXLINE( 222)					HX_VARI_NAME( Float,val9,"val") = vector->y;
HXDLIN( 222)					{
HXLINE( 222)						Int byteOffset9 = (this1->byteOffset + (int)24);
HXDLIN( 222)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset9,val9);
            					}
            				}
HXLINE( 223)				{
HXLINE( 223)					HX_VARI_NAME( Float,val10,"val") = vector->z;
HXDLIN( 223)					{
HXLINE( 223)						Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 223)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset10,val10);
            					}
            				}
HXLINE( 224)				{
HXLINE( 224)					HX_VARI_NAME( Float,val11,"val") = vector->w;
HXDLIN( 224)					{
HXLINE( 224)						Int byteOffset11 = (this1->byteOffset + (int)56);
HXDLIN( 224)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset11,val11);
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 227)				{
HXLINE( 227)					HX_VARI_NAME( Float,val12,"val") = vector->x;
HXDLIN( 227)					{
HXLINE( 227)						Int byteOffset12 = (this1->byteOffset + (int)12);
HXDLIN( 227)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset12,val12);
            					}
            				}
HXLINE( 228)				{
HXLINE( 228)					HX_VARI_NAME( Float,val13,"val") = vector->y;
HXDLIN( 228)					{
HXLINE( 228)						Int byteOffset13 = (this1->byteOffset + (int)28);
HXDLIN( 228)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset13,val13);
            					}
            				}
HXLINE( 229)				{
HXLINE( 229)					HX_VARI_NAME( Float,val14,"val") = vector->z;
HXDLIN( 229)					{
HXLINE( 229)						Int byteOffset14 = (this1->byteOffset + (int)44);
HXDLIN( 229)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset14,val14);
            					}
            				}
HXLINE( 230)				{
HXLINE( 230)					HX_VARI_NAME( Float,val15,"val") = vector->w;
HXDLIN( 230)					{
HXLINE( 230)						Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN( 230)						::__hxcpp_memory_set_float(this1->buffer->b,byteOffset15,val15);
            					}
            				}
            			}
            			break;
            			default:{
HXLINE( 233)				HX_STACK_DO_THROW(((HX_("Error, Row ",02,fb,19,d9) + row) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyRowFrom,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::create2D(Float x,Float y,hx::Null< Float >  __o_scale,hx::Null< Float >  __o_rotation){
Float scale = __o_scale.Default(1);
Float rotation = __o_rotation.Default(0);
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","create2D",0x26131c56,"lime.math._Matrix4.Matrix4_Impl_.create2D","lime/math/Matrix4.hx",240,0xeb65dbd8)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(rotation,"rotation")
HXLINE( 242)		HX_VARI( Float,theta) = ((Float)(rotation * ::Math_obj::PI) / (Float)((Float)180.0));
HXLINE( 243)		HX_VARI( Float,c) = ::Math_obj::cos(theta);
HXLINE( 244)		HX_VARI( Float,s) = ::Math_obj::sin(theta);
HXLINE( 246)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,(c * scale))->init(1,(-(s) * scale))->init(2,(int)0)->init(3,(int)0)->init(4,(s * scale))->init(5,(c * scale))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,x)->init(13,y)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 246)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 246)		Bool _hx_tmp = hx::IsNotNull( array );
HXDLIN( 246)		if (_hx_tmp) {
HXLINE( 246)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 246)			_this->byteOffset = (int)0;
HXDLIN( 246)			_this->length = array->get_length();
HXDLIN( 246)			Int _hx_tmp1 = (_this->length * _this->bytesPerElement);
HXDLIN( 246)			_this->byteLength = _hx_tmp1;
HXDLIN( 246)			Int byteLength = _this->byteLength;
HXDLIN( 246)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 246)			_this->buffer = this2;
HXDLIN( 246)			_this->copyFromArray(array,null());
HXDLIN( 246)			this1 = _this;
            		}
            		else {
HXLINE( 246)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 246)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,create2D,return )

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::createABCD(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","createABCD",0x303c4746,"lime.math._Matrix4.Matrix4_Impl_.createABCD","lime/math/Matrix4.hx",258,0xeb65dbd8)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 258)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,a)->init(1,b)->init(2,(int)0)->init(3,(int)0)->init(4,c)->init(5,d)->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,tx)->init(13,ty)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 258)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 258)		Bool _hx_tmp = hx::IsNotNull( array );
HXDLIN( 258)		if (_hx_tmp) {
HXLINE( 258)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 258)			_this->byteOffset = (int)0;
HXDLIN( 258)			_this->length = array->get_length();
HXDLIN( 258)			Int _hx_tmp1 = (_this->length * _this->bytesPerElement);
HXDLIN( 258)			_this->byteLength = _hx_tmp1;
HXDLIN( 258)			Int byteLength = _this->byteLength;
HXDLIN( 258)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 258)			_this->buffer = this2;
HXDLIN( 258)			_this->copyFromArray(array,null());
HXDLIN( 258)			this1 = _this;
            		}
            		else {
HXLINE( 258)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 258)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix4_Impl__obj,createABCD,return )

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::createOrtho(Float x0,Float x1,Float y0,Float y1,Float zNear,Float zFar){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","createOrtho",0x33fdc114,"lime.math._Matrix4.Matrix4_Impl_.createOrtho","lime/math/Matrix4.hx",268,0xeb65dbd8)
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(zNear,"zNear")
            	HX_STACK_ARG(zFar,"zFar")
HXLINE( 270)		HX_VARI( Float,sx) = ((Float)((Float)1.0) / (Float)(x1 - x0));
HXLINE( 271)		HX_VARI( Float,sy) = ((Float)((Float)1.0) / (Float)(y1 - y0));
HXLINE( 272)		HX_VARI( Float,sz) = ((Float)((Float)1.0) / (Float)(zFar - zNear));
HXLINE( 274)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,(((Float)2.0) * sx))->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(((Float)2.0) * sy))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(((Float)-2.) * sz))->init(11,(int)0)->init(12,(-((x0 + x1)) * sx))->init(13,(-((y0 + y1)) * sy))->init(14,(-((zNear + zFar)) * sz))->init(15,(int)1);
HXDLIN( 274)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 274)		Bool _hx_tmp = hx::IsNotNull( array );
HXDLIN( 274)		if (_hx_tmp) {
HXLINE( 274)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 274)			_this->byteOffset = (int)0;
HXDLIN( 274)			_this->length = array->get_length();
HXDLIN( 274)			Int _hx_tmp1 = (_this->length * _this->bytesPerElement);
HXDLIN( 274)			_this->byteLength = _hx_tmp1;
HXDLIN( 274)			Int byteLength = _this->byteLength;
HXDLIN( 274)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 274)			_this->buffer = this2;
HXDLIN( 274)			_this->copyFromArray(array,null());
HXDLIN( 274)			this1 = _this;
            		}
            		else {
HXLINE( 274)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 274)		return ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix4_Impl__obj,createOrtho,return )

void Matrix4_Impl__obj::copyRowTo( ::lime::utils::ArrayBufferView this1,Int row, ::lime::math::Vector4 vector){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","copyRowTo",0x543beeb8,"lime.math._Matrix4.Matrix4_Impl_.copyRowTo","lime/math/Matrix4.hx",286,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector,"vector")
HXLINE( 286)		switch((int)(row)){
            			case (int)0: {
HXLINE( 289)				Int byteOffset = this1->byteOffset;
HXDLIN( 289)				Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 289)				vector->x = _hx_tmp;
HXLINE( 290)				Int byteOffset1 = (this1->byteOffset + (int)16);
HXDLIN( 290)				Float _hx_tmp1 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 290)				vector->y = _hx_tmp1;
HXLINE( 291)				Int byteOffset2 = (this1->byteOffset + (int)32);
HXDLIN( 291)				Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 291)				vector->z = _hx_tmp2;
HXLINE( 292)				Int byteOffset3 = (this1->byteOffset + (int)48);
HXDLIN( 292)				Float _hx_tmp3 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXDLIN( 292)				vector->w = _hx_tmp3;
            			}
            			break;
            			case (int)1: {
HXLINE( 295)				Int byteOffset4 = (this1->byteOffset + (int)4);
HXDLIN( 295)				Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXDLIN( 295)				vector->x = _hx_tmp4;
HXLINE( 296)				Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 296)				Float _hx_tmp5 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset5);
HXDLIN( 296)				vector->y = _hx_tmp5;
HXLINE( 297)				Int byteOffset6 = (this1->byteOffset + (int)36);
HXDLIN( 297)				Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXDLIN( 297)				vector->z = _hx_tmp6;
HXLINE( 298)				Int byteOffset7 = (this1->byteOffset + (int)52);
HXDLIN( 298)				Float _hx_tmp7 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXDLIN( 298)				vector->w = _hx_tmp7;
            			}
            			break;
            			case (int)2: {
HXLINE( 301)				Int byteOffset8 = (this1->byteOffset + (int)8);
HXDLIN( 301)				Float _hx_tmp8 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXDLIN( 301)				vector->x = _hx_tmp8;
HXLINE( 302)				Int byteOffset9 = (this1->byteOffset + (int)24);
HXDLIN( 302)				Float _hx_tmp9 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXDLIN( 302)				vector->y = _hx_tmp9;
HXLINE( 303)				Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 303)				Float _hx_tmp10 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXDLIN( 303)				vector->z = _hx_tmp10;
HXLINE( 304)				Int byteOffset11 = (this1->byteOffset + (int)56);
HXDLIN( 304)				Float _hx_tmp11 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXDLIN( 304)				vector->w = _hx_tmp11;
            			}
            			break;
            			case (int)3: {
HXLINE( 307)				Int byteOffset12 = (this1->byteOffset + (int)12);
HXDLIN( 307)				Float _hx_tmp12 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset12);
HXDLIN( 307)				vector->x = _hx_tmp12;
HXLINE( 308)				Int byteOffset13 = (this1->byteOffset + (int)28);
HXDLIN( 308)				Float _hx_tmp13 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset13);
HXDLIN( 308)				vector->y = _hx_tmp13;
HXLINE( 309)				Int byteOffset14 = (this1->byteOffset + (int)44);
HXDLIN( 309)				Float _hx_tmp14 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset14);
HXDLIN( 309)				vector->z = _hx_tmp14;
HXLINE( 310)				Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN( 310)				Float _hx_tmp15 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset15);
HXDLIN( 310)				vector->w = _hx_tmp15;
            			}
            			break;
            			default:{
HXLINE( 313)				HX_STACK_DO_THROW(((HX_("Error, Row ",02,fb,19,d9) + row) + HX_(" out of bounds [0, ..., 3]",2f,8b,46,17)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,copyRowTo,(void))

void Matrix4_Impl__obj::copyToMatrix4( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView other){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","copyToMatrix4",0x1032009b,"lime.math._Matrix4.Matrix4_Impl_.copyToMatrix4","lime/math/Matrix4.hx",322,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE( 322)		HX_VARI(  ::lime::utils::ArrayBufferView,_this) = other;
HXDLIN( 322)		Bool _hx_tmp = hx::IsNotNull( this1 );
HXDLIN( 322)		if (_hx_tmp) {
HXLINE( 322)			Int _hx_tmp1 = ((int)0 * _this->bytesPerElement);
HXDLIN( 322)			_this->buffer->blit(_hx_tmp1,this1->buffer,this1->byteOffset,this1->byteLength);
            		}
            		else {
HXLINE( 322)			HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,copyToMatrix4,(void))

 ::lime::math::Vector4 Matrix4_Impl__obj::deltaTransformVector( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 v){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","deltaTransformVector",0x66f080bf,"lime.math._Matrix4.Matrix4_Impl_.deltaTransformVector","lime/math/Matrix4.hx",426,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(v,"v")
HXLINE( 428)		HX_VARI( Float,x) = v->x;
HXDLIN( 428)		HX_VARI( Float,y) = v->y;
HXDLIN( 428)		HX_VARI( Float,z) = v->z;
HXLINE( 431)		Int byteOffset = this1->byteOffset;
HXDLIN( 431)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 431)		Float _hx_tmp1 = (x * _hx_tmp);
HXDLIN( 431)		Int byteOffset1 = (this1->byteOffset + (int)16);
HXDLIN( 431)		Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 431)		Float _hx_tmp3 = (_hx_tmp1 + (y * _hx_tmp2));
HXDLIN( 431)		Int byteOffset2 = (this1->byteOffset + (int)32);
HXDLIN( 431)		Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 431)		Float _hx_tmp5 = (_hx_tmp3 + (z * _hx_tmp4));
HXDLIN( 431)		Int byteOffset3 = (this1->byteOffset + (int)12);
HXDLIN( 431)		Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXDLIN( 431)		Float _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXLINE( 432)		Int byteOffset4 = (this1->byteOffset + (int)4);
HXDLIN( 432)		Float _hx_tmp8 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXDLIN( 432)		Float _hx_tmp9 = (x * _hx_tmp8);
HXDLIN( 432)		Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 432)		Float _hx_tmp10 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset5);
HXDLIN( 432)		Float _hx_tmp11 = (_hx_tmp9 + (y * _hx_tmp10));
HXDLIN( 432)		Int byteOffset6 = (this1->byteOffset + (int)36);
HXDLIN( 432)		Float _hx_tmp12 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXDLIN( 432)		Float _hx_tmp13 = (_hx_tmp11 + (z * _hx_tmp12));
HXDLIN( 432)		Int byteOffset7 = (this1->byteOffset + (int)28);
HXDLIN( 432)		Float _hx_tmp14 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXDLIN( 432)		Float _hx_tmp15 = (_hx_tmp13 + _hx_tmp14);
HXLINE( 433)		Int byteOffset8 = (this1->byteOffset + (int)8);
HXDLIN( 433)		Float _hx_tmp16 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXDLIN( 433)		Float _hx_tmp17 = (x * _hx_tmp16);
HXDLIN( 433)		Int byteOffset9 = (this1->byteOffset + (int)24);
HXDLIN( 433)		Float _hx_tmp18 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXDLIN( 433)		Float _hx_tmp19 = (_hx_tmp17 + (y * _hx_tmp18));
HXDLIN( 433)		Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 433)		Float _hx_tmp20 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXDLIN( 433)		Float _hx_tmp21 = (_hx_tmp19 + (z * _hx_tmp20));
HXDLIN( 433)		Int byteOffset11 = (this1->byteOffset + (int)44);
HXDLIN( 433)		Float _hx_tmp22 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXLINE( 430)		return  ::lime::math::Vector4_obj::__new(_hx_tmp7,_hx_tmp15,(_hx_tmp21 + _hx_tmp22),(int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,deltaTransformVector,return )

void Matrix4_Impl__obj::identity( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","identity",0xb34e17c6,"lime.math._Matrix4.Matrix4_Impl_.identity","lime/math/Matrix4.hx",439,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 441)		{
HXLINE( 441)			Int byteOffset = this1->byteOffset;
HXDLIN( 441)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,(int)1);
            		}
HXLINE( 442)		{
HXLINE( 442)			Int byteOffset1 = (this1->byteOffset + (int)4);
HXDLIN( 442)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,(int)0);
            		}
HXLINE( 443)		{
HXLINE( 443)			Int byteOffset2 = (this1->byteOffset + (int)8);
HXDLIN( 443)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset2,(int)0);
            		}
HXLINE( 444)		{
HXLINE( 444)			Int byteOffset3 = (this1->byteOffset + (int)12);
HXDLIN( 444)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset3,(int)0);
            		}
HXLINE( 445)		{
HXLINE( 445)			Int byteOffset4 = (this1->byteOffset + (int)16);
HXDLIN( 445)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset4,(int)0);
            		}
HXLINE( 446)		{
HXLINE( 446)			Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 446)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset5,(int)1);
            		}
HXLINE( 447)		{
HXLINE( 447)			Int byteOffset6 = (this1->byteOffset + (int)24);
HXDLIN( 447)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset6,(int)0);
            		}
HXLINE( 448)		{
HXLINE( 448)			Int byteOffset7 = (this1->byteOffset + (int)28);
HXDLIN( 448)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset7,(int)0);
            		}
HXLINE( 449)		{
HXLINE( 449)			Int byteOffset8 = (this1->byteOffset + (int)32);
HXDLIN( 449)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset8,(int)0);
            		}
HXLINE( 450)		{
HXLINE( 450)			Int byteOffset9 = (this1->byteOffset + (int)36);
HXDLIN( 450)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset9,(int)0);
            		}
HXLINE( 451)		{
HXLINE( 451)			Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 451)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset10,(int)1);
            		}
HXLINE( 452)		{
HXLINE( 452)			Int byteOffset11 = (this1->byteOffset + (int)44);
HXDLIN( 452)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset11,(int)0);
            		}
HXLINE( 453)		{
HXLINE( 453)			Int byteOffset12 = (this1->byteOffset + (int)48);
HXDLIN( 453)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset12,(int)0);
            		}
HXLINE( 454)		{
HXLINE( 454)			Int byteOffset13 = (this1->byteOffset + (int)52);
HXDLIN( 454)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset13,(int)0);
            		}
HXLINE( 455)		{
HXLINE( 455)			Int byteOffset14 = (this1->byteOffset + (int)56);
HXDLIN( 455)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset14,(int)0);
            		}
HXLINE( 456)		{
HXLINE( 456)			Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN( 456)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset15,(int)1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,identity,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::interpolate( ::lime::utils::ArrayBufferView thisMat, ::lime::utils::ArrayBufferView toMat,Float percent){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","interpolate",0xf4884739,"lime.math._Matrix4.Matrix4_Impl_.interpolate","lime/math/Matrix4.hx",461,0xeb65dbd8)
            	HX_STACK_ARG(thisMat,"thisMat")
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 463)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 465)		{
HXLINE( 465)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 465)			while((_g < (int)16)){
HXLINE( 465)				HX_VARI( Int,i) = _g++;
HXLINE( 467)				Float _hx_tmp = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(thisMat,i);
HXDLIN( 467)				Float _hx_tmp1 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(toMat,i);
HXDLIN( 467)				Float _hx_tmp2 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(thisMat,i);
HXDLIN( 467)				::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,i,(_hx_tmp + ((_hx_tmp1 - _hx_tmp2) * percent)));
            			}
            		}
HXLINE( 471)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,interpolate,return )

void Matrix4_Impl__obj::interpolateTo( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView toMat,Float percent){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","interpolateTo",0x5c939114,"lime.math._Matrix4.Matrix4_Impl_.interpolateTo","lime/math/Matrix4.hx",478,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 478)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 478)		while((_g < (int)16)){
HXLINE( 478)			HX_VARI( Int,i) = _g++;
HXLINE( 480)			{
HXLINE( 480)				Int byteOffset = (this1->byteOffset + (i * (int)4));
HXDLIN( 480)				Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 480)				Float _hx_tmp1 = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(toMat,i);
HXDLIN( 480)				Int byteOffset1 = (this1->byteOffset + (i * (int)4));
HXDLIN( 480)				Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 480)				{
HXLINE( 480)					Int byteOffset2 = (this1->byteOffset + (i * (int)4));
HXDLIN( 480)					::__hxcpp_memory_set_float(this1->buffer->b,byteOffset2,(_hx_tmp + ((_hx_tmp1 - _hx_tmp2) * percent)));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,interpolateTo,(void))

Bool Matrix4_Impl__obj::invert( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","invert",0x1e68879e,"lime.math._Matrix4.Matrix4_Impl_.invert","lime/math/Matrix4.hx",487,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 489)		HX_VARI( Float,d) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get_determinant(this1);
HXLINE( 490)		Float _hx_tmp = ::Math_obj::abs(d);
HXDLIN( 490)		HX_VARI( Bool,invertable) = (_hx_tmp > ((Float)0.00000000001));
HXLINE( 492)		if (invertable) {
HXLINE( 494)			d = ((Float)(int)1 / (Float)d);
HXLINE( 496)			Int byteOffset = this1->byteOffset;
HXDLIN( 496)			HX_VARI( Float,m11) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 496)			Int byteOffset1 = (this1->byteOffset + (int)16);
HXDLIN( 496)			HX_VARI( Float,m21) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 496)			Int byteOffset2 = (this1->byteOffset + (int)32);
HXDLIN( 496)			HX_VARI( Float,m31) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 496)			Int byteOffset3 = (this1->byteOffset + (int)48);
HXDLIN( 496)			HX_VARI( Float,m41) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXLINE( 497)			Int byteOffset4 = (this1->byteOffset + (int)4);
HXDLIN( 497)			HX_VARI( Float,m12) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXDLIN( 497)			Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 497)			HX_VARI( Float,m22) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset5);
HXDLIN( 497)			Int byteOffset6 = (this1->byteOffset + (int)36);
HXDLIN( 497)			HX_VARI( Float,m32) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXDLIN( 497)			Int byteOffset7 = (this1->byteOffset + (int)52);
HXDLIN( 497)			HX_VARI( Float,m42) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXLINE( 498)			Int byteOffset8 = (this1->byteOffset + (int)8);
HXDLIN( 498)			HX_VARI( Float,m13) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXDLIN( 498)			Int byteOffset9 = (this1->byteOffset + (int)24);
HXDLIN( 498)			HX_VARI( Float,m23) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXDLIN( 498)			Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 498)			HX_VARI( Float,m33) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXDLIN( 498)			Int byteOffset11 = (this1->byteOffset + (int)56);
HXDLIN( 498)			HX_VARI( Float,m43) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXLINE( 499)			Int byteOffset12 = (this1->byteOffset + (int)12);
HXDLIN( 499)			HX_VARI( Float,m14) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset12);
HXDLIN( 499)			Int byteOffset13 = (this1->byteOffset + (int)28);
HXDLIN( 499)			HX_VARI( Float,m24) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset13);
HXDLIN( 499)			Int byteOffset14 = (this1->byteOffset + (int)44);
HXDLIN( 499)			HX_VARI( Float,m34) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset14);
HXDLIN( 499)			Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN( 499)			HX_VARI( Float,m44) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset15);
HXLINE( 501)			{
HXLINE( 501)				Int byteOffset16 = this1->byteOffset;
HXDLIN( 501)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset16,(d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24))))));
            			}
HXLINE( 502)			{
HXLINE( 502)				Int byteOffset17 = (this1->byteOffset + (int)4);
HXDLIN( 502)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset17,(-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14))))));
            			}
HXLINE( 503)			{
HXLINE( 503)				Int byteOffset18 = (this1->byteOffset + (int)8);
HXDLIN( 503)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset18,(d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14))))));
            			}
HXLINE( 504)			{
HXLINE( 504)				Int byteOffset19 = (this1->byteOffset + (int)12);
HXDLIN( 504)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset19,(-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14))))));
            			}
HXLINE( 505)			{
HXLINE( 505)				Int byteOffset20 = (this1->byteOffset + (int)16);
HXDLIN( 505)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset20,(-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24))))));
            			}
HXLINE( 506)			{
HXLINE( 506)				Int byteOffset21 = (this1->byteOffset + (int)20);
HXDLIN( 506)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset21,(d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14))))));
            			}
HXLINE( 507)			{
HXLINE( 507)				Int byteOffset22 = (this1->byteOffset + (int)24);
HXDLIN( 507)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset22,(-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14))))));
            			}
HXLINE( 508)			{
HXLINE( 508)				Int byteOffset23 = (this1->byteOffset + (int)28);
HXDLIN( 508)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset23,(d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14))))));
            			}
HXLINE( 509)			{
HXLINE( 509)				Int byteOffset24 = (this1->byteOffset + (int)32);
HXDLIN( 509)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset24,(d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24))))));
            			}
HXLINE( 510)			{
HXLINE( 510)				Int byteOffset25 = (this1->byteOffset + (int)36);
HXDLIN( 510)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset25,(-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14))))));
            			}
HXLINE( 511)			{
HXLINE( 511)				Int byteOffset26 = (this1->byteOffset + (int)40);
HXDLIN( 511)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset26,(d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14))))));
            			}
HXLINE( 512)			{
HXLINE( 512)				Int byteOffset27 = (this1->byteOffset + (int)44);
HXDLIN( 512)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset27,(-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14))))));
            			}
HXLINE( 513)			{
HXLINE( 513)				Int byteOffset28 = (this1->byteOffset + (int)48);
HXDLIN( 513)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset28,(-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23))))));
            			}
HXLINE( 514)			{
HXLINE( 514)				Int byteOffset29 = (this1->byteOffset + (int)52);
HXDLIN( 514)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset29,(d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13))))));
            			}
HXLINE( 515)			{
HXLINE( 515)				Int byteOffset30 = (this1->byteOffset + (int)56);
HXDLIN( 515)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset30,(-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13))))));
            			}
HXLINE( 516)			{
HXLINE( 516)				Int byteOffset31 = (this1->byteOffset + (int)60);
HXDLIN( 516)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset31,(d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13))))));
            			}
            		}
HXLINE( 520)		return invertable;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,invert,return )

void Matrix4_Impl__obj::pointAt( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 pos, ::lime::math::Vector4 at, ::lime::math::Vector4 up){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","pointAt",0x903e77db,"lime.math._Matrix4.Matrix4_Impl_.pointAt","lime/math/Matrix4.hx",525,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(at,"at")
            	HX_STACK_ARG(up,"up")
HXLINE( 527)		Bool _hx_tmp = hx::IsNull( at );
HXDLIN( 527)		if (_hx_tmp) {
HXLINE( 529)			at =  ::lime::math::Vector4_obj::__new((int)0,(int)0,(int)-1,null());
            		}
HXLINE( 533)		Bool _hx_tmp1 = hx::IsNull( up );
HXDLIN( 533)		if (_hx_tmp1) {
HXLINE( 535)			up =  ::lime::math::Vector4_obj::__new((int)0,(int)-1,(int)0,null());
            		}
HXLINE( 539)		HX_VARI(  ::lime::math::Vector4,dir) =  ::lime::math::Vector4_obj::__new((at->x - pos->x),(at->y - pos->y),(at->z - pos->z),null());
HXLINE( 540)		HX_VARI(  ::lime::math::Vector4,vup) =  ::lime::math::Vector4_obj::__new(up->x,up->y,up->z,up->w);
HXLINE( 541)		HX_VAR(  ::lime::math::Vector4,right);
HXLINE( 543)		{
HXLINE( 543)			Float _hx_tmp2 = (((dir->x * dir->x) + (dir->y * dir->y)) + (dir->z * dir->z));
HXDLIN( 543)			HX_VARI( Float,l) = ::Math_obj::sqrt(_hx_tmp2);
HXDLIN( 543)			if ((l != (int)0)) {
HXLINE( 543)				hx::DivEq(dir->x,l);
HXDLIN( 543)				hx::DivEq(dir->y,l);
HXDLIN( 543)				hx::DivEq(dir->z,l);
            			}
            		}
HXLINE( 544)		{
HXLINE( 544)			Float _hx_tmp3 = (((vup->x * vup->x) + (vup->y * vup->y)) + (vup->z * vup->z));
HXDLIN( 544)			HX_VARI_NAME( Float,l1,"l") = ::Math_obj::sqrt(_hx_tmp3);
HXDLIN( 544)			if ((l1 != (int)0)) {
HXLINE( 544)				hx::DivEq(vup->x,l1);
HXDLIN( 544)				hx::DivEq(vup->y,l1);
HXDLIN( 544)				hx::DivEq(vup->z,l1);
            			}
            		}
HXLINE( 546)		HX_VARI(  ::lime::math::Vector4,dir2) =  ::lime::math::Vector4_obj::__new(dir->x,dir->y,dir->z,dir->w);
HXLINE( 547)		{
HXLINE( 547)			HX_VARI( Float,s) = (((vup->x * dir->x) + (vup->y * dir->y)) + (vup->z * dir->z));
HXDLIN( 547)			hx::MultEq(dir2->x,s);
HXDLIN( 547)			hx::MultEq(dir2->y,s);
HXDLIN( 547)			hx::MultEq(dir2->z,s);
            		}
HXLINE( 549)		Float _hx_tmp4 = (vup->x - dir2->x);
HXDLIN( 549)		Float _hx_tmp5 = (vup->y - dir2->y);
HXDLIN( 549)		Float _hx_tmp6 = (vup->z - dir2->z);
HXDLIN( 549)		vup =  ::lime::math::Vector4_obj::__new(_hx_tmp4,_hx_tmp5,_hx_tmp6,null());
HXLINE( 551)		Float _hx_tmp7 = (((vup->x * vup->x) + (vup->y * vup->y)) + (vup->z * vup->z));
HXDLIN( 551)		Float _hx_tmp8 = ::Math_obj::sqrt(_hx_tmp7);
HXDLIN( 551)		if ((_hx_tmp8 > (int)0)) {
HXLINE( 553)			Float _hx_tmp9 = (((vup->x * vup->x) + (vup->y * vup->y)) + (vup->z * vup->z));
HXDLIN( 553)			HX_VARI_NAME( Float,l2,"l") = ::Math_obj::sqrt(_hx_tmp9);
HXDLIN( 553)			if ((l2 != (int)0)) {
HXLINE( 553)				hx::DivEq(vup->x,l2);
HXDLIN( 553)				hx::DivEq(vup->y,l2);
HXDLIN( 553)				hx::DivEq(vup->z,l2);
            			}
            		}
            		else {
HXLINE( 557)			if ((dir->x != (int)0)) {
HXLINE( 559)				vup =  ::lime::math::Vector4_obj::__new(-(dir->y),dir->x,(int)0,null());
            			}
            			else {
HXLINE( 563)				vup =  ::lime::math::Vector4_obj::__new((int)1,(int)0,(int)0,null());
            			}
            		}
HXLINE( 569)		right =  ::lime::math::Vector4_obj::__new(((vup->y * dir->z) - (vup->z * dir->y)),((vup->z * dir->x) - (vup->x * dir->z)),((vup->x * dir->y) - (vup->y * dir->x)),(int)1);
HXLINE( 570)		{
HXLINE( 570)			Float _hx_tmp10 = (((right->x * right->x) + (right->y * right->y)) + (right->z * right->z));
HXDLIN( 570)			HX_VARI_NAME( Float,l3,"l") = ::Math_obj::sqrt(_hx_tmp10);
HXDLIN( 570)			if ((l3 != (int)0)) {
HXLINE( 570)				hx::DivEq(right->x,l3);
HXDLIN( 570)				hx::DivEq(right->y,l3);
HXDLIN( 570)				hx::DivEq(right->z,l3);
            			}
            		}
HXLINE( 572)		{
HXLINE( 572)			HX_VARI( Float,val) = right->x;
HXDLIN( 572)			{
HXLINE( 572)				Int byteOffset = this1->byteOffset;
HXDLIN( 572)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
            			}
            		}
HXLINE( 573)		{
HXLINE( 573)			HX_VARI_NAME( Float,val1,"val") = right->y;
HXDLIN( 573)			{
HXLINE( 573)				Int byteOffset1 = (this1->byteOffset + (int)16);
HXDLIN( 573)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,val1);
            			}
            		}
HXLINE( 574)		{
HXLINE( 574)			HX_VARI_NAME( Float,val2,"val") = right->z;
HXDLIN( 574)			{
HXLINE( 574)				Int byteOffset2 = (this1->byteOffset + (int)32);
HXDLIN( 574)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset2,val2);
            			}
            		}
HXLINE( 575)		{
HXLINE( 575)			Int byteOffset3 = (this1->byteOffset + (int)48);
HXDLIN( 575)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset3,((Float)0.0));
            		}
HXLINE( 576)		{
HXLINE( 576)			HX_VARI_NAME( Float,val3,"val") = vup->x;
HXDLIN( 576)			{
HXLINE( 576)				Int byteOffset4 = (this1->byteOffset + (int)4);
HXDLIN( 576)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset4,val3);
            			}
            		}
HXLINE( 577)		{
HXLINE( 577)			HX_VARI_NAME( Float,val4,"val") = vup->y;
HXDLIN( 577)			{
HXLINE( 577)				Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 577)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset5,val4);
            			}
            		}
HXLINE( 578)		{
HXLINE( 578)			HX_VARI_NAME( Float,val5,"val") = vup->z;
HXDLIN( 578)			{
HXLINE( 578)				Int byteOffset6 = (this1->byteOffset + (int)36);
HXDLIN( 578)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset6,val5);
            			}
            		}
HXLINE( 579)		{
HXLINE( 579)			Int byteOffset7 = (this1->byteOffset + (int)52);
HXDLIN( 579)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset7,((Float)0.0));
            		}
HXLINE( 580)		{
HXLINE( 580)			HX_VARI_NAME( Float,val6,"val") = dir->x;
HXDLIN( 580)			{
HXLINE( 580)				Int byteOffset8 = (this1->byteOffset + (int)8);
HXDLIN( 580)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset8,val6);
            			}
            		}
HXLINE( 581)		{
HXLINE( 581)			HX_VARI_NAME( Float,val7,"val") = dir->y;
HXDLIN( 581)			{
HXLINE( 581)				Int byteOffset9 = (this1->byteOffset + (int)24);
HXDLIN( 581)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset9,val7);
            			}
            		}
HXLINE( 582)		{
HXLINE( 582)			HX_VARI_NAME( Float,val8,"val") = dir->z;
HXDLIN( 582)			{
HXLINE( 582)				Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 582)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset10,val8);
            			}
            		}
HXLINE( 583)		{
HXLINE( 583)			Int byteOffset11 = (this1->byteOffset + (int)56);
HXDLIN( 583)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset11,((Float)0.0));
            		}
HXLINE( 584)		{
HXLINE( 584)			HX_VARI_NAME( Float,val9,"val") = pos->x;
HXDLIN( 584)			{
HXLINE( 584)				Int byteOffset12 = (this1->byteOffset + (int)12);
HXDLIN( 584)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset12,val9);
            			}
            		}
HXLINE( 585)		{
HXLINE( 585)			HX_VARI_NAME( Float,val10,"val") = pos->y;
HXDLIN( 585)			{
HXLINE( 585)				Int byteOffset13 = (this1->byteOffset + (int)28);
HXDLIN( 585)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset13,val10);
            			}
            		}
HXLINE( 586)		{
HXLINE( 586)			HX_VARI_NAME( Float,val11,"val") = pos->z;
HXDLIN( 586)			{
HXLINE( 586)				Int byteOffset14 = (this1->byteOffset + (int)44);
HXDLIN( 586)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset14,val11);
            			}
            		}
HXLINE( 587)		{
HXLINE( 587)			Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN( 587)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset15,((Float)1.0));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,pointAt,(void))

void Matrix4_Impl__obj::prepend( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView rhs){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","prepend",0x76fd6d86,"lime.math._Matrix4.Matrix4_Impl_.prepend","lime/math/Matrix4.hx",592,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(rhs,"rhs")
HXLINE( 594)		HX_VARI( Float,m111) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)0);
HXDLIN( 594)		HX_VARI( Float,m121) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)4);
HXDLIN( 594)		HX_VARI( Float,m131) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)8);
HXDLIN( 594)		HX_VARI( Float,m141) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)12);
HXDLIN( 594)		HX_VARI( Float,m112) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)1);
HXDLIN( 594)		HX_VARI( Float,m122) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)5);
HXDLIN( 594)		HX_VARI( Float,m132) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)9);
HXDLIN( 594)		HX_VARI( Float,m142) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)13);
HXDLIN( 594)		HX_VARI( Float,m113) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)2);
HXDLIN( 594)		HX_VARI( Float,m123) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)6);
HXDLIN( 594)		HX_VARI( Float,m133) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)10);
HXDLIN( 594)		HX_VARI( Float,m143) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)14);
HXDLIN( 594)		HX_VARI( Float,m114) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)3);
HXDLIN( 594)		HX_VARI( Float,m124) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)7);
HXDLIN( 594)		HX_VARI( Float,m134) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)11);
HXDLIN( 594)		HX_VARI( Float,m144) = ::lime::math::_Matrix4::Matrix4_Impl__obj::get(rhs,(int)15);
HXLINE( 598)		Int byteOffset = this1->byteOffset;
HXLINE( 594)		HX_VARI( Float,m211) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXLINE( 598)		Int byteOffset1 = (this1->byteOffset + (int)16);
HXLINE( 594)		HX_VARI( Float,m221) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXLINE( 598)		Int byteOffset2 = (this1->byteOffset + (int)32);
HXLINE( 594)		HX_VARI( Float,m231) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXLINE( 598)		Int byteOffset3 = (this1->byteOffset + (int)48);
HXLINE( 594)		HX_VARI( Float,m241) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXLINE( 599)		Int byteOffset4 = (this1->byteOffset + (int)4);
HXLINE( 594)		HX_VARI( Float,m212) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXLINE( 599)		Int byteOffset5 = (this1->byteOffset + (int)20);
HXLINE( 594)		HX_VARI( Float,m222) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset5);
HXLINE( 599)		Int byteOffset6 = (this1->byteOffset + (int)36);
HXLINE( 594)		HX_VARI( Float,m232) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXLINE( 599)		Int byteOffset7 = (this1->byteOffset + (int)52);
HXLINE( 594)		HX_VARI( Float,m242) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXLINE( 600)		Int byteOffset8 = (this1->byteOffset + (int)8);
HXLINE( 594)		HX_VARI( Float,m213) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXLINE( 600)		Int byteOffset9 = (this1->byteOffset + (int)24);
HXLINE( 594)		HX_VARI( Float,m223) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXLINE( 600)		Int byteOffset10 = (this1->byteOffset + (int)40);
HXLINE( 594)		HX_VARI( Float,m233) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXLINE( 600)		Int byteOffset11 = (this1->byteOffset + (int)56);
HXLINE( 594)		HX_VARI( Float,m243) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXLINE( 601)		Int byteOffset12 = (this1->byteOffset + (int)12);
HXLINE( 594)		HX_VARI( Float,m214) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset12);
HXLINE( 601)		Int byteOffset13 = (this1->byteOffset + (int)28);
HXLINE( 594)		HX_VARI( Float,m224) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset13);
HXLINE( 601)		Int byteOffset14 = (this1->byteOffset + (int)44);
HXLINE( 594)		HX_VARI( Float,m234) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset14);
HXLINE( 601)		Int byteOffset15 = (this1->byteOffset + (int)60);
HXLINE( 594)		HX_VARI( Float,m244) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset15);
HXLINE( 603)		{
HXLINE( 603)			Int byteOffset16 = this1->byteOffset;
HXDLIN( 603)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset16,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
            		}
HXLINE( 604)		{
HXLINE( 604)			Int byteOffset17 = (this1->byteOffset + (int)4);
HXDLIN( 604)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset17,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
            		}
HXLINE( 605)		{
HXLINE( 605)			Int byteOffset18 = (this1->byteOffset + (int)8);
HXDLIN( 605)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset18,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
            		}
HXLINE( 606)		{
HXLINE( 606)			Int byteOffset19 = (this1->byteOffset + (int)12);
HXDLIN( 606)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset19,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
            		}
HXLINE( 608)		{
HXLINE( 608)			Int byteOffset20 = (this1->byteOffset + (int)16);
HXDLIN( 608)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset20,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
            		}
HXLINE( 609)		{
HXLINE( 609)			Int byteOffset21 = (this1->byteOffset + (int)20);
HXDLIN( 609)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset21,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
            		}
HXLINE( 610)		{
HXLINE( 610)			Int byteOffset22 = (this1->byteOffset + (int)24);
HXDLIN( 610)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset22,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
            		}
HXLINE( 611)		{
HXLINE( 611)			Int byteOffset23 = (this1->byteOffset + (int)28);
HXDLIN( 611)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset23,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
            		}
HXLINE( 613)		{
HXLINE( 613)			Int byteOffset24 = (this1->byteOffset + (int)32);
HXDLIN( 613)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset24,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
            		}
HXLINE( 614)		{
HXLINE( 614)			Int byteOffset25 = (this1->byteOffset + (int)36);
HXDLIN( 614)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset25,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
            		}
HXLINE( 615)		{
HXLINE( 615)			Int byteOffset26 = (this1->byteOffset + (int)40);
HXDLIN( 615)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset26,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
            		}
HXLINE( 616)		{
HXLINE( 616)			Int byteOffset27 = (this1->byteOffset + (int)44);
HXDLIN( 616)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset27,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
            		}
HXLINE( 618)		{
HXLINE( 618)			Int byteOffset28 = (this1->byteOffset + (int)48);
HXDLIN( 618)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset28,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
            		}
HXLINE( 619)		{
HXLINE( 619)			Int byteOffset29 = (this1->byteOffset + (int)52);
HXDLIN( 619)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset29,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
            		}
HXLINE( 620)		{
HXLINE( 620)			Int byteOffset30 = (this1->byteOffset + (int)56);
HXDLIN( 620)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset30,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
            		}
HXLINE( 621)		{
HXLINE( 621)			Int byteOffset31 = (this1->byteOffset + (int)60);
HXDLIN( 621)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset31,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,prepend,(void))

void Matrix4_Impl__obj::prependRotation( ::lime::utils::ArrayBufferView this1,Float degrees, ::lime::math::Vector4 axis, ::lime::math::Vector4 pivotPoint){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","prependRotation",0x52475ce4,"lime.math._Matrix4.Matrix4_Impl_.prependRotation","lime/math/Matrix4.hx",626,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE( 628)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::getAxisRotation(axis->x,axis->y,axis->z,degrees);
HXLINE( 630)		Bool _hx_tmp = hx::IsNotNull( pivotPoint );
HXDLIN( 630)		if (_hx_tmp) {
HXLINE( 633)			::lime::math::_Matrix4::Matrix4_Impl__obj::appendTranslation(m,pivotPoint->x,pivotPoint->y,pivotPoint->z);
            		}
HXLINE( 637)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependRotation,(void))

void Matrix4_Impl__obj::prependScale( ::lime::utils::ArrayBufferView this1,Float xScale,Float yScale,Float zScale){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","prependScale",0x9a060b24,"lime.math._Matrix4.Matrix4_Impl_.prependScale","lime/math/Matrix4.hx",644,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE( 644)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 644)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 644)		Bool _hx_tmp = hx::IsNotNull( array );
HXDLIN( 644)		if (_hx_tmp) {
HXLINE( 644)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 644)			_this->byteOffset = (int)0;
HXDLIN( 644)			_this->length = array->get_length();
HXDLIN( 644)			Int _hx_tmp1 = (_this->length * _this->bytesPerElement);
HXDLIN( 644)			_this->byteLength = _hx_tmp1;
HXDLIN( 644)			Int byteLength = _this->byteLength;
HXDLIN( 644)			HX_VARI_NAME(  ::haxe::io::Bytes,this3,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 644)			_this->buffer = this3;
HXDLIN( 644)			_this->copyFromArray(array,null());
HXDLIN( 644)			this2 = _this;
            		}
            		else {
HXLINE( 644)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 644)		 ::lime::utils::ArrayBufferView _hx_tmp2 = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(this2);
HXDLIN( 644)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,_hx_tmp2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependScale,(void))

void Matrix4_Impl__obj::prependTranslation( ::lime::utils::ArrayBufferView this1,Float x,Float y,Float z){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","prependTranslation",0xfad7dd0b,"lime.math._Matrix4.Matrix4_Impl_.prependTranslation","lime/math/Matrix4.hx",649,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 651)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 652)		::lime::math::_Matrix4::Matrix4_Impl__obj::set_position(m, ::lime::math::Vector4_obj::__new(x,y,z,null()));
HXLINE( 653)		::lime::math::_Matrix4::Matrix4_Impl__obj::prepend(this1,m);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,prependTranslation,(void))

 ::lime::math::Vector4 Matrix4_Impl__obj::transformVector( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 v){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","transformVector",0x3cbf39c7,"lime.math._Matrix4.Matrix4_Impl_.transformVector","lime/math/Matrix4.hx",742,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(v,"v")
HXLINE( 744)		HX_VARI( Float,x) = v->x;
HXDLIN( 744)		HX_VARI( Float,y) = v->y;
HXDLIN( 744)		HX_VARI( Float,z) = v->z;
HXLINE( 747)		Int byteOffset = this1->byteOffset;
HXDLIN( 747)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 747)		Float _hx_tmp1 = (x * _hx_tmp);
HXDLIN( 747)		Int byteOffset1 = (this1->byteOffset + (int)16);
HXDLIN( 747)		Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 747)		Float _hx_tmp3 = (_hx_tmp1 + (y * _hx_tmp2));
HXDLIN( 747)		Int byteOffset2 = (this1->byteOffset + (int)32);
HXDLIN( 747)		Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 747)		Float _hx_tmp5 = (_hx_tmp3 + (z * _hx_tmp4));
HXDLIN( 747)		Int byteOffset3 = (this1->byteOffset + (int)48);
HXDLIN( 747)		Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXDLIN( 747)		Float _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXLINE( 748)		Int byteOffset4 = (this1->byteOffset + (int)4);
HXDLIN( 748)		Float _hx_tmp8 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXDLIN( 748)		Float _hx_tmp9 = (x * _hx_tmp8);
HXDLIN( 748)		Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN( 748)		Float _hx_tmp10 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset5);
HXDLIN( 748)		Float _hx_tmp11 = (_hx_tmp9 + (y * _hx_tmp10));
HXDLIN( 748)		Int byteOffset6 = (this1->byteOffset + (int)36);
HXDLIN( 748)		Float _hx_tmp12 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXDLIN( 748)		Float _hx_tmp13 = (_hx_tmp11 + (z * _hx_tmp12));
HXDLIN( 748)		Int byteOffset7 = (this1->byteOffset + (int)52);
HXDLIN( 748)		Float _hx_tmp14 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXDLIN( 748)		Float _hx_tmp15 = (_hx_tmp13 + _hx_tmp14);
HXLINE( 749)		Int byteOffset8 = (this1->byteOffset + (int)8);
HXDLIN( 749)		Float _hx_tmp16 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXDLIN( 749)		Float _hx_tmp17 = (x * _hx_tmp16);
HXDLIN( 749)		Int byteOffset9 = (this1->byteOffset + (int)24);
HXDLIN( 749)		Float _hx_tmp18 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXDLIN( 749)		Float _hx_tmp19 = (_hx_tmp17 + (y * _hx_tmp18));
HXDLIN( 749)		Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN( 749)		Float _hx_tmp20 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXDLIN( 749)		Float _hx_tmp21 = (_hx_tmp19 + (z * _hx_tmp20));
HXDLIN( 749)		Int byteOffset11 = (this1->byteOffset + (int)56);
HXDLIN( 749)		Float _hx_tmp22 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXDLIN( 749)		Float _hx_tmp23 = (_hx_tmp21 + _hx_tmp22);
HXLINE( 750)		Int byteOffset12 = (this1->byteOffset + (int)12);
HXDLIN( 750)		Float _hx_tmp24 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset12);
HXDLIN( 750)		Float _hx_tmp25 = (x * _hx_tmp24);
HXDLIN( 750)		Int byteOffset13 = (this1->byteOffset + (int)28);
HXDLIN( 750)		Float _hx_tmp26 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset13);
HXDLIN( 750)		Float _hx_tmp27 = (_hx_tmp25 + (y * _hx_tmp26));
HXDLIN( 750)		Int byteOffset14 = (this1->byteOffset + (int)44);
HXDLIN( 750)		Float _hx_tmp28 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset14);
HXDLIN( 750)		Float _hx_tmp29 = (_hx_tmp27 + (z * _hx_tmp28));
HXDLIN( 750)		Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN( 750)		Float _hx_tmp30 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset15);
HXLINE( 746)		return  ::lime::math::Vector4_obj::__new(_hx_tmp7,_hx_tmp15,_hx_tmp23,(_hx_tmp29 + _hx_tmp30));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,transformVector,return )

void Matrix4_Impl__obj::transformVectors( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView ain, ::lime::utils::ArrayBufferView aout){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","transformVectors",0xea9354cc,"lime.math._Matrix4.Matrix4_Impl_.transformVectors","lime/math/Matrix4.hx",755,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(ain,"ain")
            	HX_STACK_ARG(aout,"aout")
HXLINE( 757)		HX_VARI( Int,i) = (int)0;
HXLINE( 759)		while(((i + (int)3) <= ain->length)){
HXLINE( 761)			Int byteOffset = (ain->byteOffset + (i * (int)4));
HXDLIN( 761)			HX_VARI( Float,x) = ::__hxcpp_memory_get_float(ain->buffer->b,byteOffset);
HXDLIN( 761)			Int _hx_tmp = ain->byteOffset;
HXDLIN( 761)			HX_VARI( Float,y) = ::__hxcpp_memory_get_float(ain->buffer->b,(_hx_tmp + ((i + (int)1) * (int)4)));
HXDLIN( 761)			Int _hx_tmp1 = ain->byteOffset;
HXDLIN( 761)			HX_VARI( Float,z) = ::__hxcpp_memory_get_float(ain->buffer->b,(_hx_tmp1 + ((i + (int)2) * (int)4)));
HXLINE( 763)			{
HXLINE( 763)				Int byteOffset1 = this1->byteOffset;
HXDLIN( 763)				Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 763)				Float _hx_tmp3 = (x * _hx_tmp2);
HXDLIN( 763)				Int byteOffset2 = (this1->byteOffset + (int)16);
HXDLIN( 763)				Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 763)				Float _hx_tmp5 = (_hx_tmp3 + (y * _hx_tmp4));
HXDLIN( 763)				Int byteOffset3 = (this1->byteOffset + (int)32);
HXDLIN( 763)				Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXDLIN( 763)				Float _hx_tmp7 = (_hx_tmp5 + (z * _hx_tmp6));
HXDLIN( 763)				Int byteOffset4 = (this1->byteOffset + (int)48);
HXDLIN( 763)				Float _hx_tmp8 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXDLIN( 763)				{
HXLINE( 763)					Int byteOffset5 = (aout->byteOffset + (i * (int)4));
HXDLIN( 763)					::__hxcpp_memory_set_float(aout->buffer->b,byteOffset5,(_hx_tmp7 + _hx_tmp8));
            				}
            			}
HXLINE( 764)			{
HXLINE( 764)				Int byteOffset6 = (this1->byteOffset + (int)4);
HXDLIN( 764)				Float _hx_tmp9 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXDLIN( 764)				Float _hx_tmp10 = (x * _hx_tmp9);
HXDLIN( 764)				Int byteOffset7 = (this1->byteOffset + (int)20);
HXDLIN( 764)				Float _hx_tmp11 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXDLIN( 764)				Float _hx_tmp12 = (_hx_tmp10 + (y * _hx_tmp11));
HXDLIN( 764)				Int byteOffset8 = (this1->byteOffset + (int)36);
HXDLIN( 764)				Float _hx_tmp13 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXDLIN( 764)				Float _hx_tmp14 = (_hx_tmp12 + (z * _hx_tmp13));
HXDLIN( 764)				Int byteOffset9 = (this1->byteOffset + (int)52);
HXDLIN( 764)				Float _hx_tmp15 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXDLIN( 764)				{
HXLINE( 764)					Int _hx_tmp16 = aout->byteOffset;
HXDLIN( 764)					::__hxcpp_memory_set_float(aout->buffer->b,(_hx_tmp16 + ((i + (int)1) * (int)4)),(_hx_tmp14 + _hx_tmp15));
            				}
            			}
HXLINE( 765)			{
HXLINE( 765)				Int byteOffset10 = (this1->byteOffset + (int)8);
HXDLIN( 765)				Float _hx_tmp17 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXDLIN( 765)				Float _hx_tmp18 = (x * _hx_tmp17);
HXDLIN( 765)				Int byteOffset11 = (this1->byteOffset + (int)24);
HXDLIN( 765)				Float _hx_tmp19 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXDLIN( 765)				Float _hx_tmp20 = (_hx_tmp18 + (y * _hx_tmp19));
HXDLIN( 765)				Int byteOffset12 = (this1->byteOffset + (int)40);
HXDLIN( 765)				Float _hx_tmp21 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset12);
HXDLIN( 765)				Float _hx_tmp22 = (_hx_tmp20 + (z * _hx_tmp21));
HXDLIN( 765)				Int byteOffset13 = (this1->byteOffset + (int)56);
HXDLIN( 765)				Float _hx_tmp23 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset13);
HXDLIN( 765)				{
HXLINE( 765)					Int _hx_tmp24 = aout->byteOffset;
HXDLIN( 765)					::__hxcpp_memory_set_float(aout->buffer->b,(_hx_tmp24 + ((i + (int)2) * (int)4)),(_hx_tmp22 + _hx_tmp23));
            				}
            			}
HXLINE( 767)			hx::AddEq(i,(int)3);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,transformVectors,(void))

void Matrix4_Impl__obj::transpose( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","transpose",0x2d08b4f1,"lime.math._Matrix4.Matrix4_Impl_.transpose","lime/math/Matrix4.hx",774,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 776)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 776)		Bool _hx_tmp = hx::IsNotNull( this1 );
HXDLIN( 776)		if (_hx_tmp) {
HXLINE( 776)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 776)			HX_VARI(  ::haxe::io::Bytes,srcData) = this1->buffer;
HXDLIN( 776)			HX_VARI( Int,srcLength) = this1->length;
HXDLIN( 776)			HX_VARI( Int,srcByteOffset) = this1->byteOffset;
HXDLIN( 776)			Bool _hx_tmp1 = (this1->type == _this->type);
HXDLIN( 776)			if (_hx_tmp1) {
HXLINE( 776)				HX_VARI( Int,cloneLength) = (srcData->length - srcByteOffset);
HXDLIN( 776)				HX_VARI_NAME(  ::haxe::io::Bytes,this3,"this") = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN( 776)				_this->buffer = this3;
HXDLIN( 776)				_this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            			}
            			else {
HXLINE( 776)				HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            			}
HXDLIN( 776)			_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN( 776)			_this->byteOffset = (int)0;
HXDLIN( 776)			_this->length = srcLength;
HXDLIN( 776)			this2 = _this;
            		}
            		else {
HXLINE( 776)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 776)		HX_VARI(  ::lime::utils::ArrayBufferView,othis) = this2;
HXLINE( 777)		{
HXLINE( 777)			Int byteOffset = (othis->byteOffset + (int)16);
HXDLIN( 777)			HX_VARI( Float,val) = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset);
HXDLIN( 777)			{
HXLINE( 777)				Int byteOffset1 = (this1->byteOffset + (int)4);
HXDLIN( 777)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,val);
            			}
            		}
HXLINE( 778)		{
HXLINE( 778)			Int byteOffset2 = (othis->byteOffset + (int)32);
HXDLIN( 778)			HX_VARI_NAME( Float,val1,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset2);
HXDLIN( 778)			{
HXLINE( 778)				Int byteOffset3 = (this1->byteOffset + (int)8);
HXDLIN( 778)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset3,val1);
            			}
            		}
HXLINE( 779)		{
HXLINE( 779)			Int byteOffset4 = (othis->byteOffset + (int)48);
HXDLIN( 779)			HX_VARI_NAME( Float,val2,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset4);
HXDLIN( 779)			{
HXLINE( 779)				Int byteOffset5 = (this1->byteOffset + (int)12);
HXDLIN( 779)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset5,val2);
            			}
            		}
HXLINE( 780)		{
HXLINE( 780)			Int byteOffset6 = (othis->byteOffset + (int)4);
HXDLIN( 780)			HX_VARI_NAME( Float,val3,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset6);
HXDLIN( 780)			{
HXLINE( 780)				Int byteOffset7 = (this1->byteOffset + (int)16);
HXDLIN( 780)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset7,val3);
            			}
            		}
HXLINE( 781)		{
HXLINE( 781)			Int byteOffset8 = (othis->byteOffset + (int)36);
HXDLIN( 781)			HX_VARI_NAME( Float,val4,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset8);
HXDLIN( 781)			{
HXLINE( 781)				Int byteOffset9 = (this1->byteOffset + (int)24);
HXDLIN( 781)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset9,val4);
            			}
            		}
HXLINE( 782)		{
HXLINE( 782)			Int byteOffset10 = (othis->byteOffset + (int)52);
HXDLIN( 782)			HX_VARI_NAME( Float,val5,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset10);
HXDLIN( 782)			{
HXLINE( 782)				Int byteOffset11 = (this1->byteOffset + (int)28);
HXDLIN( 782)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset11,val5);
            			}
            		}
HXLINE( 783)		{
HXLINE( 783)			Int byteOffset12 = (othis->byteOffset + (int)8);
HXDLIN( 783)			HX_VARI_NAME( Float,val6,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset12);
HXDLIN( 783)			{
HXLINE( 783)				Int byteOffset13 = (this1->byteOffset + (int)32);
HXDLIN( 783)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset13,val6);
            			}
            		}
HXLINE( 784)		{
HXLINE( 784)			Int byteOffset14 = (othis->byteOffset + (int)24);
HXDLIN( 784)			HX_VARI_NAME( Float,val7,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset14);
HXDLIN( 784)			{
HXLINE( 784)				Int byteOffset15 = (this1->byteOffset + (int)36);
HXDLIN( 784)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset15,val7);
            			}
            		}
HXLINE( 785)		{
HXLINE( 785)			Int byteOffset16 = (othis->byteOffset + (int)56);
HXDLIN( 785)			HX_VARI_NAME( Float,val8,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset16);
HXDLIN( 785)			{
HXLINE( 785)				Int byteOffset17 = (this1->byteOffset + (int)44);
HXDLIN( 785)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset17,val8);
            			}
            		}
HXLINE( 786)		{
HXLINE( 786)			Int byteOffset18 = (othis->byteOffset + (int)12);
HXDLIN( 786)			HX_VARI_NAME( Float,val9,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset18);
HXDLIN( 786)			{
HXLINE( 786)				Int byteOffset19 = (this1->byteOffset + (int)48);
HXDLIN( 786)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset19,val9);
            			}
            		}
HXLINE( 787)		{
HXLINE( 787)			Int byteOffset20 = (othis->byteOffset + (int)28);
HXDLIN( 787)			HX_VARI_NAME( Float,val10,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset20);
HXDLIN( 787)			{
HXLINE( 787)				Int byteOffset21 = (this1->byteOffset + (int)52);
HXDLIN( 787)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset21,val10);
            			}
            		}
HXLINE( 788)		{
HXLINE( 788)			Int byteOffset22 = (othis->byteOffset + (int)44);
HXDLIN( 788)			HX_VARI_NAME( Float,val11,"val") = ::__hxcpp_memory_get_float(othis->buffer->b,byteOffset22);
HXDLIN( 788)			{
HXLINE( 788)				Int byteOffset23 = (this1->byteOffset + (int)56);
HXDLIN( 788)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset23,val11);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,transpose,(void))

 ::lime::utils::ArrayBufferView Matrix4_Impl__obj::getAxisRotation(Float x,Float y,Float z,Float degrees){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","getAxisRotation",0x61f6832d,"lime.math._Matrix4.Matrix4_Impl_.getAxisRotation","lime/math/Matrix4.hx",792,0xeb65dbd8)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(degrees,"degrees")
HXLINE( 794)		HX_VARI(  ::lime::utils::ArrayBufferView,m) = ::lime::math::_Matrix4::Matrix4_Impl__obj::_new(null());
HXLINE( 796)		HX_VARI(  ::lime::math::Vector4,a1) =  ::lime::math::Vector4_obj::__new(x,y,z,null());
HXLINE( 797)		HX_VARI( Float,rad) = (-(degrees) * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 798)		HX_VARI( Float,c) = ::Math_obj::cos(rad);
HXLINE( 799)		HX_VARI( Float,s) = ::Math_obj::sin(rad);
HXLINE( 800)		HX_VARI( Float,t) = (((Float)1.0) - c);
HXLINE( 802)		Float _hx_tmp = ((a1->x * a1->x) * t);
HXDLIN( 802)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)0,(c + _hx_tmp));
HXLINE( 803)		Float _hx_tmp1 = ((a1->y * a1->y) * t);
HXDLIN( 803)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)5,(c + _hx_tmp1));
HXLINE( 804)		Float _hx_tmp2 = ((a1->z * a1->z) * t);
HXDLIN( 804)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)10,(c + _hx_tmp2));
HXLINE( 806)		HX_VARI( Float,tmp1) = ((a1->x * a1->y) * t);
HXLINE( 807)		HX_VARI( Float,tmp2) = (a1->z * s);
HXLINE( 808)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)4,(tmp1 + tmp2));
HXLINE( 809)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)1,(tmp1 - tmp2));
HXLINE( 810)		tmp1 = ((a1->x * a1->z) * t);
HXLINE( 811)		tmp2 = (a1->y * s);
HXLINE( 812)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)8,(tmp1 - tmp2));
HXLINE( 813)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)2,(tmp1 + tmp2));
HXLINE( 814)		tmp1 = ((a1->y * a1->z) * t);
HXLINE( 815)		tmp2 = (a1->x * s);
HXLINE( 816)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)9,(tmp1 + tmp2));
HXLINE( 817)		::lime::math::_Matrix4::Matrix4_Impl__obj::set(m,(int)6,(tmp1 - tmp2));
HXLINE( 819)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix4_Impl__obj,getAxisRotation,return )

Float Matrix4_Impl__obj::get_determinant( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","get_determinant",0x5d0323a4,"lime.math._Matrix4.Matrix4_Impl_.get_determinant","lime/math/Matrix4.hx",833,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 833)		Int byteOffset = this1->byteOffset;
HXDLIN( 833)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 833)		Int byteOffset1 = (this1->byteOffset + (int)20);
HXDLIN( 833)		Float _hx_tmp1 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 833)		Float _hx_tmp2 = (_hx_tmp * _hx_tmp1);
HXDLIN( 833)		Int byteOffset2 = (this1->byteOffset + (int)16);
HXDLIN( 833)		Float _hx_tmp3 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 833)		Int byteOffset3 = (this1->byteOffset + (int)4);
HXDLIN( 833)		Float _hx_tmp4 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset3);
HXDLIN( 833)		Float _hx_tmp5 = (_hx_tmp2 - (_hx_tmp3 * _hx_tmp4));
HXDLIN( 833)		Int byteOffset4 = (this1->byteOffset + (int)40);
HXDLIN( 833)		Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset4);
HXDLIN( 833)		Int byteOffset5 = (this1->byteOffset + (int)60);
HXDLIN( 833)		Float _hx_tmp7 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset5);
HXDLIN( 833)		Float _hx_tmp8 = (_hx_tmp6 * _hx_tmp7);
HXDLIN( 833)		Int byteOffset6 = (this1->byteOffset + (int)56);
HXDLIN( 833)		Float _hx_tmp9 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset6);
HXDLIN( 833)		Int byteOffset7 = (this1->byteOffset + (int)44);
HXDLIN( 833)		Float _hx_tmp10 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset7);
HXDLIN( 833)		Float _hx_tmp11 = (_hx_tmp5 * (_hx_tmp8 - (_hx_tmp9 * _hx_tmp10)));
HXLINE( 834)		Int byteOffset8 = this1->byteOffset;
HXDLIN( 834)		Float _hx_tmp12 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset8);
HXDLIN( 834)		Int byteOffset9 = (this1->byteOffset + (int)36);
HXDLIN( 834)		Float _hx_tmp13 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset9);
HXDLIN( 834)		Float _hx_tmp14 = (_hx_tmp12 * _hx_tmp13);
HXDLIN( 834)		Int byteOffset10 = (this1->byteOffset + (int)32);
HXDLIN( 834)		Float _hx_tmp15 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset10);
HXDLIN( 834)		Int byteOffset11 = (this1->byteOffset + (int)4);
HXDLIN( 834)		Float _hx_tmp16 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset11);
HXDLIN( 834)		Float _hx_tmp17 = (_hx_tmp14 - (_hx_tmp15 * _hx_tmp16));
HXDLIN( 834)		Int byteOffset12 = (this1->byteOffset + (int)24);
HXDLIN( 834)		Float _hx_tmp18 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset12);
HXDLIN( 834)		Int byteOffset13 = (this1->byteOffset + (int)60);
HXDLIN( 834)		Float _hx_tmp19 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset13);
HXDLIN( 834)		Float _hx_tmp20 = (_hx_tmp18 * _hx_tmp19);
HXDLIN( 834)		Int byteOffset14 = (this1->byteOffset + (int)56);
HXDLIN( 834)		Float _hx_tmp21 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset14);
HXDLIN( 834)		Int byteOffset15 = (this1->byteOffset + (int)28);
HXDLIN( 834)		Float _hx_tmp22 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset15);
HXLINE( 833)		Float _hx_tmp23 = (_hx_tmp11 - (_hx_tmp17 * (_hx_tmp20 - (_hx_tmp21 * _hx_tmp22))));
HXLINE( 835)		Int byteOffset16 = this1->byteOffset;
HXDLIN( 835)		Float _hx_tmp24 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset16);
HXDLIN( 835)		Int byteOffset17 = (this1->byteOffset + (int)52);
HXDLIN( 835)		Float _hx_tmp25 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset17);
HXDLIN( 835)		Float _hx_tmp26 = (_hx_tmp24 * _hx_tmp25);
HXDLIN( 835)		Int byteOffset18 = (this1->byteOffset + (int)48);
HXDLIN( 835)		Float _hx_tmp27 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset18);
HXDLIN( 835)		Int byteOffset19 = (this1->byteOffset + (int)4);
HXDLIN( 835)		Float _hx_tmp28 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset19);
HXDLIN( 835)		Float _hx_tmp29 = (_hx_tmp26 - (_hx_tmp27 * _hx_tmp28));
HXDLIN( 835)		Int byteOffset20 = (this1->byteOffset + (int)24);
HXDLIN( 835)		Float _hx_tmp30 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset20);
HXDLIN( 835)		Int byteOffset21 = (this1->byteOffset + (int)44);
HXDLIN( 835)		Float _hx_tmp31 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset21);
HXDLIN( 835)		Float _hx_tmp32 = (_hx_tmp30 * _hx_tmp31);
HXDLIN( 835)		Int byteOffset22 = (this1->byteOffset + (int)40);
HXDLIN( 835)		Float _hx_tmp33 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset22);
HXDLIN( 835)		Int byteOffset23 = (this1->byteOffset + (int)28);
HXDLIN( 835)		Float _hx_tmp34 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset23);
HXLINE( 833)		Float _hx_tmp35 = (_hx_tmp23 + (_hx_tmp29 * (_hx_tmp32 - (_hx_tmp33 * _hx_tmp34))));
HXLINE( 836)		Int byteOffset24 = (this1->byteOffset + (int)16);
HXDLIN( 836)		Float _hx_tmp36 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset24);
HXDLIN( 836)		Int byteOffset25 = (this1->byteOffset + (int)36);
HXDLIN( 836)		Float _hx_tmp37 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset25);
HXDLIN( 836)		Float _hx_tmp38 = (_hx_tmp36 * _hx_tmp37);
HXDLIN( 836)		Int byteOffset26 = (this1->byteOffset + (int)32);
HXDLIN( 836)		Float _hx_tmp39 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset26);
HXDLIN( 836)		Int byteOffset27 = (this1->byteOffset + (int)20);
HXDLIN( 836)		Float _hx_tmp40 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset27);
HXDLIN( 836)		Float _hx_tmp41 = (_hx_tmp38 - (_hx_tmp39 * _hx_tmp40));
HXDLIN( 836)		Int byteOffset28 = (this1->byteOffset + (int)8);
HXDLIN( 836)		Float _hx_tmp42 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset28);
HXDLIN( 836)		Int byteOffset29 = (this1->byteOffset + (int)60);
HXDLIN( 836)		Float _hx_tmp43 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset29);
HXDLIN( 836)		Float _hx_tmp44 = (_hx_tmp42 * _hx_tmp43);
HXDLIN( 836)		Int byteOffset30 = (this1->byteOffset + (int)56);
HXDLIN( 836)		Float _hx_tmp45 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset30);
HXDLIN( 836)		Int byteOffset31 = (this1->byteOffset + (int)12);
HXDLIN( 836)		Float _hx_tmp46 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset31);
HXLINE( 833)		Float _hx_tmp47 = (_hx_tmp35 + (_hx_tmp41 * (_hx_tmp44 - (_hx_tmp45 * _hx_tmp46))));
HXLINE( 837)		Int byteOffset32 = (this1->byteOffset + (int)16);
HXDLIN( 837)		Float _hx_tmp48 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset32);
HXDLIN( 837)		Int byteOffset33 = (this1->byteOffset + (int)52);
HXDLIN( 837)		Float _hx_tmp49 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset33);
HXDLIN( 837)		Float _hx_tmp50 = (_hx_tmp48 * _hx_tmp49);
HXDLIN( 837)		Int byteOffset34 = (this1->byteOffset + (int)48);
HXDLIN( 837)		Float _hx_tmp51 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset34);
HXDLIN( 837)		Int byteOffset35 = (this1->byteOffset + (int)20);
HXDLIN( 837)		Float _hx_tmp52 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset35);
HXDLIN( 837)		Float _hx_tmp53 = (_hx_tmp50 - (_hx_tmp51 * _hx_tmp52));
HXDLIN( 837)		Int byteOffset36 = (this1->byteOffset + (int)8);
HXDLIN( 837)		Float _hx_tmp54 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset36);
HXDLIN( 837)		Int byteOffset37 = (this1->byteOffset + (int)44);
HXDLIN( 837)		Float _hx_tmp55 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset37);
HXDLIN( 837)		Float _hx_tmp56 = (_hx_tmp54 * _hx_tmp55);
HXDLIN( 837)		Int byteOffset38 = (this1->byteOffset + (int)40);
HXDLIN( 837)		Float _hx_tmp57 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset38);
HXDLIN( 837)		Int byteOffset39 = (this1->byteOffset + (int)12);
HXDLIN( 837)		Float _hx_tmp58 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset39);
HXLINE( 833)		Float _hx_tmp59 = (_hx_tmp47 - (_hx_tmp53 * (_hx_tmp56 - (_hx_tmp57 * _hx_tmp58))));
HXLINE( 838)		Int byteOffset40 = (this1->byteOffset + (int)32);
HXDLIN( 838)		Float _hx_tmp60 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset40);
HXDLIN( 838)		Int byteOffset41 = (this1->byteOffset + (int)52);
HXDLIN( 838)		Float _hx_tmp61 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset41);
HXDLIN( 838)		Float _hx_tmp62 = (_hx_tmp60 * _hx_tmp61);
HXDLIN( 838)		Int byteOffset42 = (this1->byteOffset + (int)48);
HXDLIN( 838)		Float _hx_tmp63 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset42);
HXDLIN( 838)		Int byteOffset43 = (this1->byteOffset + (int)36);
HXDLIN( 838)		Float _hx_tmp64 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset43);
HXDLIN( 838)		Float _hx_tmp65 = (_hx_tmp62 - (_hx_tmp63 * _hx_tmp64));
HXDLIN( 838)		Int byteOffset44 = (this1->byteOffset + (int)8);
HXDLIN( 838)		Float _hx_tmp66 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset44);
HXDLIN( 838)		Int byteOffset45 = (this1->byteOffset + (int)28);
HXDLIN( 838)		Float _hx_tmp67 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset45);
HXDLIN( 838)		Float _hx_tmp68 = (_hx_tmp66 * _hx_tmp67);
HXDLIN( 838)		Int byteOffset46 = (this1->byteOffset + (int)24);
HXDLIN( 838)		Float _hx_tmp69 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset46);
HXDLIN( 838)		Int byteOffset47 = (this1->byteOffset + (int)12);
HXDLIN( 838)		Float _hx_tmp70 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset47);
HXLINE( 833)		return (_hx_tmp59 + (_hx_tmp65 * (_hx_tmp68 - (_hx_tmp69 * _hx_tmp70))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,get_determinant,return )

 ::lime::math::Vector4 Matrix4_Impl__obj::get_position( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","get_position",0x55830b3a,"lime.math._Matrix4.Matrix4_Impl_.get_position","lime/math/Matrix4.hx",845,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 845)		Int byteOffset = (this1->byteOffset + (int)48);
HXDLIN( 845)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 845)		Int byteOffset1 = (this1->byteOffset + (int)52);
HXDLIN( 845)		Float _hx_tmp1 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 845)		Int byteOffset2 = (this1->byteOffset + (int)56);
HXDLIN( 845)		Float _hx_tmp2 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 845)		return  ::lime::math::Vector4_obj::__new(_hx_tmp,_hx_tmp1,_hx_tmp2,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Matrix4_Impl__obj,get_position,return )

 ::lime::math::Vector4 Matrix4_Impl__obj::set_position( ::lime::utils::ArrayBufferView this1, ::lime::math::Vector4 val){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","set_position",0x6a7c2eae,"lime.math._Matrix4.Matrix4_Impl_.set_position","lime/math/Matrix4.hx",850,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(val,"val")
HXLINE( 852)		{
HXLINE( 852)			HX_VARI_NAME( Float,val1,"val") = val->x;
HXDLIN( 852)			{
HXLINE( 852)				Int byteOffset = (this1->byteOffset + (int)48);
HXDLIN( 852)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val1);
            			}
            		}
HXLINE( 853)		{
HXLINE( 853)			HX_VARI_NAME( Float,val2,"val") = val->y;
HXDLIN( 853)			{
HXLINE( 853)				Int byteOffset1 = (this1->byteOffset + (int)52);
HXDLIN( 853)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,val2);
            			}
            		}
HXLINE( 854)		{
HXLINE( 854)			HX_VARI_NAME( Float,val3,"val") = val->z;
HXDLIN( 854)			{
HXLINE( 854)				Int byteOffset2 = (this1->byteOffset + (int)56);
HXDLIN( 854)				::__hxcpp_memory_set_float(this1->buffer->b,byteOffset2,val3);
            			}
            		}
HXLINE( 855)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,set_position,return )

Float Matrix4_Impl__obj::get( ::lime::utils::ArrayBufferView this1,Int index){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","get",0x10b0bb0e,"lime.math._Matrix4.Matrix4_Impl_.get","lime/math/Matrix4.hx",862,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 862)		Int byteOffset = (this1->byteOffset + (index * (int)4));
HXDLIN( 862)		return ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Matrix4_Impl__obj,get,return )

Float Matrix4_Impl__obj::set( ::lime::utils::ArrayBufferView this1,Int index,Float value){
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","set",0x10b9d61a,"lime.math._Matrix4.Matrix4_Impl_.set","lime/math/Matrix4.hx",867,0xeb65dbd8)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(value,"value")
HXLINE( 869)		{
HXLINE( 869)			Int byteOffset = (this1->byteOffset + (index * (int)4));
HXDLIN( 869)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,value);
            		}
HXLINE( 870)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix4_Impl__obj,set,return )


Matrix4_Impl__obj::Matrix4_Impl__obj()
{
}

bool Matrix4_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { outValue = append_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"invert") ) { outValue = invert_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointAt") ) { outValue = pointAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prepend") ) { outValue = prepend_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { outValue = copyFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"identity") ) { outValue = identity_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { outValue = copyRowTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transpose") ) { outValue = transpose_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copythisTo") ) { outValue = copythisTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createABCD") ) { outValue = createABCD_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"appendScale") ) { outValue = appendScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { outValue = copyRowFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { outValue = copyColumnTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copythisFrom") ) { outValue = copythisFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prependScale") ) { outValue = prependScale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_position") ) { outValue = get_position_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_position") ) { outValue = set_position_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyToMatrix4") ) { outValue = copyToMatrix4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { outValue = interpolateTo_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { outValue = appendRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { outValue = copyColumnFrom_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"prependRotation") ) { outValue = prependRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"transformVector") ) { outValue = transformVector_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getAxisRotation") ) { outValue = getAxisRotation_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { outValue = get_determinant_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { outValue = transformVectors_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { outValue = appendTranslation_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { outValue = prependTranslation_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { outValue = deltaTransformVector_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Matrix4_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Matrix4_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(void *) &Matrix4_Impl__obj::_hx___identity,HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Matrix4_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix4_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix4_Impl__obj::_hx___identity,"__identity");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix4_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix4_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix4_Impl__obj::_hx___identity,"__identity");
};

#endif

hx::Class Matrix4_Impl__obj::__mClass;

static ::String Matrix4_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("appendRotation","\x38","\x45","\xe8","\xcb"),
	HX_HCSTRING("appendScale","\x50","\x66","\x45","\xb5"),
	HX_HCSTRING("appendTranslation","\x37","\xe1","\x3d","\xd6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copythisFrom","\x9d","\x57","\xe4","\x52"),
	HX_HCSTRING("copythisTo","\xee","\x14","\x01","\x0a"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("create2D","\xce","\x49","\xf4","\x2b"),
	HX_HCSTRING("createABCD","\xbe","\xc2","\xdd","\x52"),
	HX_HCSTRING("createOrtho","\x9c","\x4e","\xa8","\x5e"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("copyToMatrix4","\x23","\x00","\xc1","\x24"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("interpolateTo","\x9c","\x90","\x22","\x71"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("pointAt","\x63","\xa1","\x21","\x51"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformVectors","\x44","\xba","\x12","\x8a"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("getAxisRotation","\xb5","\x74","\xea","\xf7"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null())
};

void Matrix4_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math._Matrix4.Matrix4_Impl_","\xe6","\xfe","\xf9","\xcb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix4_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix4_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix4_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Matrix4_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix4_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix4_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix4_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix4_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("lime.math._Matrix4.Matrix4_Impl_","boot",0x86ac72ba,"lime.math._Matrix4.Matrix4_Impl_.boot","lime/math/Matrix4.hx",10,0xeb65dbd8)
HXLINE(  10)		_hx___identity = ::Array_obj< Float >::fromData( _hx_array_data_5,16);
            	}
}

} // end namespace lime
} // end namespace math
} // end namespace _Matrix4
