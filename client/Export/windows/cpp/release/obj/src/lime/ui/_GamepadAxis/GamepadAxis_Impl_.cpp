// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_ui__GamepadAxis_GamepadAxis_Impl_
#include <lime/ui/_GamepadAxis/GamepadAxis_Impl_.h>
#endif

namespace lime{
namespace ui{
namespace _GamepadAxis{

void GamepadAxis_Impl__obj::__construct() { }

Dynamic GamepadAxis_Impl__obj::__CreateEmpty() { return new GamepadAxis_Impl__obj; }

hx::ObjectPtr< GamepadAxis_Impl__obj > GamepadAxis_Impl__obj::__new()
{
	hx::ObjectPtr< GamepadAxis_Impl__obj > _hx_result = new GamepadAxis_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic GamepadAxis_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GamepadAxis_Impl__obj > _hx_result = new GamepadAxis_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Int GamepadAxis_Impl__obj::LEFT_X;

Int GamepadAxis_Impl__obj::LEFT_Y;

Int GamepadAxis_Impl__obj::RIGHT_X;

Int GamepadAxis_Impl__obj::RIGHT_Y;

Int GamepadAxis_Impl__obj::TRIGGER_LEFT;

Int GamepadAxis_Impl__obj::TRIGGER_RIGHT;

::String GamepadAxis_Impl__obj::toString(Int this1){
            	HX_STACK_FRAME("lime.ui._GamepadAxis.GamepadAxis_Impl_","toString",0x829ca022,"lime.ui._GamepadAxis.GamepadAxis_Impl_.toString","lime/ui/GamepadAxis.hx",17,0x01182a1d)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  17)		switch((int)(this1)){
            			case (int)0: {
HXLINE(  17)				return HX_("LEFT_X",e0,72,4a,4c);
            			}
            			break;
            			case (int)1: {
HXLINE(  17)				return HX_("LEFT_Y",e1,72,4a,4c);
            			}
            			break;
            			case (int)2: {
HXLINE(  17)				return HX_("RIGHT_X",d5,fd,37,93);
            			}
            			break;
            			case (int)3: {
HXLINE(  17)				return HX_("RIGHT_Y",d6,fd,37,93);
            			}
            			break;
            			case (int)4: {
HXLINE(  17)				return HX_("TRIGGER_LEFT",ce,cb,4a,f1);
            			}
            			break;
            			case (int)5: {
HXLINE(  17)				return HX_("TRIGGER_RIGHT",15,96,34,a7);
            			}
            			break;
            			default:{
HXLINE(  17)				return ((HX_("UNKNOWN (",f2,41,8b,8c) + this1) + HX_(")",29,00,00,00));
            			}
            		}
HXDLIN(  17)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GamepadAxis_Impl__obj,toString,return )


GamepadAxis_Impl__obj::GamepadAxis_Impl__obj()
{
}

bool GamepadAxis_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GamepadAxis_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo GamepadAxis_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &GamepadAxis_Impl__obj::LEFT_X,HX_HCSTRING("LEFT_X","\xe0","\x72","\x4a","\x4c")},
	{hx::fsInt,(void *) &GamepadAxis_Impl__obj::LEFT_Y,HX_HCSTRING("LEFT_Y","\xe1","\x72","\x4a","\x4c")},
	{hx::fsInt,(void *) &GamepadAxis_Impl__obj::RIGHT_X,HX_HCSTRING("RIGHT_X","\xd5","\xfd","\x37","\x93")},
	{hx::fsInt,(void *) &GamepadAxis_Impl__obj::RIGHT_Y,HX_HCSTRING("RIGHT_Y","\xd6","\xfd","\x37","\x93")},
	{hx::fsInt,(void *) &GamepadAxis_Impl__obj::TRIGGER_LEFT,HX_HCSTRING("TRIGGER_LEFT","\xce","\xcb","\x4a","\xf1")},
	{hx::fsInt,(void *) &GamepadAxis_Impl__obj::TRIGGER_RIGHT,HX_HCSTRING("TRIGGER_RIGHT","\x15","\x96","\x34","\xa7")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GamepadAxis_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GamepadAxis_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GamepadAxis_Impl__obj::LEFT_X,"LEFT_X");
	HX_MARK_MEMBER_NAME(GamepadAxis_Impl__obj::LEFT_Y,"LEFT_Y");
	HX_MARK_MEMBER_NAME(GamepadAxis_Impl__obj::RIGHT_X,"RIGHT_X");
	HX_MARK_MEMBER_NAME(GamepadAxis_Impl__obj::RIGHT_Y,"RIGHT_Y");
	HX_MARK_MEMBER_NAME(GamepadAxis_Impl__obj::TRIGGER_LEFT,"TRIGGER_LEFT");
	HX_MARK_MEMBER_NAME(GamepadAxis_Impl__obj::TRIGGER_RIGHT,"TRIGGER_RIGHT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GamepadAxis_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GamepadAxis_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GamepadAxis_Impl__obj::LEFT_X,"LEFT_X");
	HX_VISIT_MEMBER_NAME(GamepadAxis_Impl__obj::LEFT_Y,"LEFT_Y");
	HX_VISIT_MEMBER_NAME(GamepadAxis_Impl__obj::RIGHT_X,"RIGHT_X");
	HX_VISIT_MEMBER_NAME(GamepadAxis_Impl__obj::RIGHT_Y,"RIGHT_Y");
	HX_VISIT_MEMBER_NAME(GamepadAxis_Impl__obj::TRIGGER_LEFT,"TRIGGER_LEFT");
	HX_VISIT_MEMBER_NAME(GamepadAxis_Impl__obj::TRIGGER_RIGHT,"TRIGGER_RIGHT");
};

#endif

hx::Class GamepadAxis_Impl__obj::__mClass;

static ::String GamepadAxis_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("LEFT_X","\xe0","\x72","\x4a","\x4c"),
	HX_HCSTRING("LEFT_Y","\xe1","\x72","\x4a","\x4c"),
	HX_HCSTRING("RIGHT_X","\xd5","\xfd","\x37","\x93"),
	HX_HCSTRING("RIGHT_Y","\xd6","\xfd","\x37","\x93"),
	HX_HCSTRING("TRIGGER_LEFT","\xce","\xcb","\x4a","\xf1"),
	HX_HCSTRING("TRIGGER_RIGHT","\x15","\x96","\x34","\xa7"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void GamepadAxis_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.ui._GamepadAxis.GamepadAxis_Impl_","\xb8","\x57","\xb6","\x1a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GamepadAxis_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GamepadAxis_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GamepadAxis_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GamepadAxis_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GamepadAxis_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GamepadAxis_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GamepadAxis_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GamepadAxis_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("lime.ui._GamepadAxis.GamepadAxis_Impl_","boot",0xad22e0a8,"lime.ui._GamepadAxis.GamepadAxis_Impl_.boot","lime/ui/GamepadAxis.hx",7,0x01182a1d)
HXLINE(   7)		LEFT_X = (int)0;
            	}
{
            	HX_STACK_FRAME("lime.ui._GamepadAxis.GamepadAxis_Impl_","boot",0xad22e0a8,"lime.ui._GamepadAxis.GamepadAxis_Impl_.boot","lime/ui/GamepadAxis.hx",8,0x01182a1d)
HXLINE(   8)		LEFT_Y = (int)1;
            	}
{
            	HX_STACK_FRAME("lime.ui._GamepadAxis.GamepadAxis_Impl_","boot",0xad22e0a8,"lime.ui._GamepadAxis.GamepadAxis_Impl_.boot","lime/ui/GamepadAxis.hx",9,0x01182a1d)
HXLINE(   9)		RIGHT_X = (int)2;
            	}
{
            	HX_STACK_FRAME("lime.ui._GamepadAxis.GamepadAxis_Impl_","boot",0xad22e0a8,"lime.ui._GamepadAxis.GamepadAxis_Impl_.boot","lime/ui/GamepadAxis.hx",10,0x01182a1d)
HXLINE(  10)		RIGHT_Y = (int)3;
            	}
{
            	HX_STACK_FRAME("lime.ui._GamepadAxis.GamepadAxis_Impl_","boot",0xad22e0a8,"lime.ui._GamepadAxis.GamepadAxis_Impl_.boot","lime/ui/GamepadAxis.hx",11,0x01182a1d)
HXLINE(  11)		TRIGGER_LEFT = (int)4;
            	}
{
            	HX_STACK_FRAME("lime.ui._GamepadAxis.GamepadAxis_Impl_","boot",0xad22e0a8,"lime.ui._GamepadAxis.GamepadAxis_Impl_.boot","lime/ui/GamepadAxis.hx",12,0x01182a1d)
HXLINE(  12)		TRIGGER_RIGHT = (int)5;
            	}
}

} // end namespace lime
} // end namespace ui
} // end namespace _GamepadAxis
