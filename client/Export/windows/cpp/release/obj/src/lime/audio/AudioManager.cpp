// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_audio_ALAudioContext
#include <lime/audio/ALAudioContext.h>
#endif
#ifndef INCLUDED_lime_audio_ALCAudioContext
#include <lime/audio/ALCAudioContext.h>
#endif
#ifndef INCLUDED_lime_audio_AudioContext
#include <lime/audio/AudioContext.h>
#endif
#ifndef INCLUDED_lime_audio_AudioManager
#include <lime/audio/AudioManager.h>
#endif
#ifndef INCLUDED_lime_audio_openal_ALC
#include <lime/audio/openal/ALC.h>
#endif

namespace lime{
namespace audio{

void AudioManager_obj::__construct() { }

Dynamic AudioManager_obj::__CreateEmpty() { return new AudioManager_obj; }

hx::ObjectPtr< AudioManager_obj > AudioManager_obj::__new()
{
	hx::ObjectPtr< AudioManager_obj > _hx_result = new AudioManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AudioManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioManager_obj > _hx_result = new AudioManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

::hx::EnumBase AudioManager_obj::context;

void AudioManager_obj::init(::hx::EnumBase context){
            	HX_STACK_FRAME("lime.audio.AudioManager","init",0x0c9d6096,"lime.audio.AudioManager.init","lime/audio/AudioManager.hx",22,0x9f466694)
            	HX_STACK_ARG(context,"context")
HXLINE(  22)		Bool _hx_tmp = hx::IsNull( ::lime::audio::AudioManager_obj::context );
HXDLIN(  22)		if (_hx_tmp) {
HXLINE(  24)			Bool _hx_tmp1 = hx::IsNull( context );
HXDLIN(  24)			if (_hx_tmp1) {
HXLINE(  50)				::lime::audio::AudioManager_obj::context = ::lime::audio::AudioContext_obj::OPENAL( ::lime::audio::ALCAudioContext_obj::__new(), ::lime::audio::ALAudioContext_obj::__new());
HXLINE(  52)				HX_VARI(  ::Dynamic,device) = ::lime::audio::openal::ALC_obj::openDevice(null());
HXLINE(  53)				HX_VARI(  ::Dynamic,ctx) = ::lime::audio::openal::ALC_obj::createContext(device,null());
HXLINE(  54)				::lime::audio::openal::ALC_obj::makeContextCurrent(ctx);
HXLINE(  55)				::lime::audio::openal::ALC_obj::processContext(ctx);
            			}
            			else {
HXLINE(  61)				::lime::audio::AudioManager_obj::context = context;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioManager_obj,init,(void))

void AudioManager_obj::resume(){
            	HX_STACK_FRAME("lime.audio.AudioManager","resume",0xe85f7cb3,"lime.audio.AudioManager.resume","lime/audio/AudioManager.hx",72,0x9f466694)
HXLINE(  72)		Bool _hx_tmp = hx::IsNotNull( ::lime::audio::AudioManager_obj::context );
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  74)			HX_VARI( ::hx::EnumBase,_g) = ::lime::audio::AudioManager_obj::context;
HXDLIN(  74)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN(  74)			if ((_hx_tmp1 == (int)0)) {
HXLINE(  76)				HX_VARI(  ::lime::audio::ALCAudioContext,alc) = _g->_hx_getObject(0).StaticCast<  ::lime::audio::ALCAudioContext >();
HXDLIN(  76)				{
HXLINE(  78)					HX_VARI(  ::Dynamic,currentContext) = alc->getCurrentContext();
HXLINE(  80)					Bool _hx_tmp2 = hx::IsNotNull( currentContext );
HXDLIN(  80)					if (_hx_tmp2) {
HXLINE(  82)						HX_VARI(  ::Dynamic,device) = alc->getContextsDevice(currentContext);
HXLINE(  83)						alc->resumeDevice(device);
HXLINE(  84)						alc->processContext(currentContext);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,resume,(void))

void AudioManager_obj::shutdown(){
            	HX_STACK_FRAME("lime.audio.AudioManager","shutdown",0x46165d1c,"lime.audio.AudioManager.shutdown","lime/audio/AudioManager.hx",99,0x9f466694)
HXLINE(  99)		Bool _hx_tmp = hx::IsNotNull( ::lime::audio::AudioManager_obj::context );
HXDLIN(  99)		if (_hx_tmp) {
HXLINE( 101)			HX_VARI( ::hx::EnumBase,_g) = ::lime::audio::AudioManager_obj::context;
HXDLIN( 101)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 101)			if ((_hx_tmp1 == (int)0)) {
HXLINE( 103)				HX_VARI(  ::lime::audio::ALCAudioContext,alc) = _g->_hx_getObject(0).StaticCast<  ::lime::audio::ALCAudioContext >();
HXDLIN( 103)				{
HXLINE( 105)					HX_VARI(  ::Dynamic,currentContext) = alc->getCurrentContext();
HXLINE( 107)					Bool _hx_tmp2 = hx::IsNotNull( currentContext );
HXDLIN( 107)					if (_hx_tmp2) {
HXLINE( 109)						HX_VARI(  ::Dynamic,device) = alc->getContextsDevice(currentContext);
HXLINE( 110)						alc->makeContextCurrent(null());
HXLINE( 111)						alc->destroyContext(currentContext);
HXLINE( 112)						alc->closeDevice(device);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,shutdown,(void))

void AudioManager_obj::suspend(){
            	HX_STACK_FRAME("lime.audio.AudioManager","suspend",0xf724c1b6,"lime.audio.AudioManager.suspend","lime/audio/AudioManager.hx",127,0x9f466694)
HXLINE( 127)		Bool _hx_tmp = hx::IsNotNull( ::lime::audio::AudioManager_obj::context );
HXDLIN( 127)		if (_hx_tmp) {
HXLINE( 129)			HX_VARI( ::hx::EnumBase,_g) = ::lime::audio::AudioManager_obj::context;
HXDLIN( 129)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 129)			if ((_hx_tmp1 == (int)0)) {
HXLINE( 131)				HX_VARI(  ::lime::audio::ALCAudioContext,alc) = _g->_hx_getObject(0).StaticCast<  ::lime::audio::ALCAudioContext >();
HXDLIN( 131)				{
HXLINE( 133)					HX_VARI(  ::Dynamic,currentContext) = alc->getCurrentContext();
HXLINE( 135)					Bool _hx_tmp2 = hx::IsNotNull( currentContext );
HXDLIN( 135)					if (_hx_tmp2) {
HXLINE( 137)						alc->suspendContext(currentContext);
HXLINE( 138)						HX_VARI(  ::Dynamic,device) = alc->getContextsDevice(currentContext);
HXLINE( 139)						alc->pauseDevice(device);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(AudioManager_obj,suspend,(void))


AudioManager_obj::AudioManager_obj()
{
}

bool AudioManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resume") ) { outValue = resume_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { outValue = context; return true; }
		if (HX_FIELD_EQ(inName,"suspend") ) { outValue = suspend_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"shutdown") ) { outValue = shutdown_dyn(); return true; }
	}
	return false;
}

bool AudioManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=ioValue.Cast< ::hx::EnumBase >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AudioManager_obj_sMemberStorageInfo = 0;
static hx::StaticInfo AudioManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::audio::AudioContext*/ ,(void *) &AudioManager_obj::context,HX_HCSTRING("context","\xef","\x95","\x77","\x19")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void AudioManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AudioManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AudioManager_obj::context,"context");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AudioManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AudioManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AudioManager_obj::context,"context");
};

#endif

hx::Class AudioManager_obj::__mClass;

static ::String AudioManager_obj_sStaticFields[] = {
	HX_HCSTRING("context","\xef","\x95","\x77","\x19"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("resume","\xad","\x69","\x84","\x08"),
	HX_HCSTRING("shutdown","\x96","\xfc","\x0b","\x6b"),
	HX_HCSTRING("suspend","\x7c","\x2f","\x4f","\xf7"),
	::String(null())
};

void AudioManager_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.audio.AudioManager","\xa8","\x28","\xf0","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AudioManager_obj::__GetStatic;
	__mClass->mSetStaticField = &AudioManager_obj::__SetStatic;
	__mClass->mMarkFunc = AudioManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AudioManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AudioManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AudioManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace audio
