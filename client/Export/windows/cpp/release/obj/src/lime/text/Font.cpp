// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_text_GlyphMetrics
#include <lime/text/GlyphMetrics.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

namespace lime{
namespace text{

void Font_obj::__construct(::String name){
            	HX_STACK_FRAME("lime.text.Font","new",0x97494f29,"lime.text.Font.new","lime/text/Font.hx",50,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
HXLINE(  52)		Bool _hx_tmp = hx::IsNotNull( name );
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  54)			this->name = name;
            		}
HXLINE(  58)		Bool _hx_tmp1 = hx::IsNotNull( this->_hx___fontPath );
HXDLIN(  58)		if (_hx_tmp1) {
HXLINE(  60)			this->_hx___fromFile(this->_hx___fontPath);
            		}
            	}

Dynamic Font_obj::__CreateEmpty() { return new Font_obj; }

hx::ObjectPtr< Font_obj > Font_obj::__new(::String name)
{
	hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(name);
	return _hx_result;
}

Dynamic Font_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Font_obj > _hx_result = new Font_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::Dynamic Font_obj::decompose(){
            	HX_STACK_FRAME("lime.text.Font","decompose",0x6e29ff3a,"lime.text.Font.decompose","lime/text/Font.hx",67,0x3be57807)
            	HX_STACK_THIS(this)
HXLINE(  71)		Bool _hx_tmp = hx::IsNull( this->src );
HXDLIN(  71)		if (_hx_tmp) {
HXLINE(  71)			HX_STACK_DO_THROW(HX_("Uninitialized font handle.",3a,84,ab,29));
            		}
HXLINE(  72)		 ::Dynamic handle = this->src;
HXDLIN(  72)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_outline_decompose(hx::DynamicPtr(handle),(int)20480)) );
HXDLIN(  72)		HX_VARI(  ::Dynamic,data) = Dynamic(hx::DynamicPtr(inVal));
HXLINE(  73)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,decompose,return )

Int Font_obj::getGlyph(::String character){
            	HX_STACK_FRAME("lime.text.Font","getGlyph",0x5bf955cd,"lime.text.Font.getGlyph","lime/text/Font.hx",119,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(character,"character")
HXLINE( 119)		 ::Dynamic handle = this->src;
HXDLIN( 119)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_glyph_index(hx::DynamicPtr(handle),character)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyph,return )

::Array< Int > Font_obj::getGlyphs(::String __o_characters){
::String characters = __o_characters.Default(HX_HCSTRING("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ","\xc1","\xf6","\x34","\x50"));
            	HX_STACK_FRAME("lime.text.Font","getGlyphs",0x1e31be06,"lime.text.Font.getGlyphs","lime/text/Font.hx",127,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(characters,"characters")
HXLINE( 130)		 ::Dynamic handle = this->src;
HXDLIN( 130)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_get_glyph_indices(hx::DynamicPtr(handle),characters)) );
HXDLIN( 130)		HX_VARI(  ::Dynamic,glyphs) = Dynamic(hx::DynamicPtr(inVal));
HXLINE( 131)		return glyphs;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyphs,return )

 ::lime::text::GlyphMetrics Font_obj::getGlyphMetrics(Int glyph){
            	HX_STACK_FRAME("lime.text.Font","getGlyphMetrics",0x8c9677f6,"lime.text.Font.getGlyphMetrics","lime/text/Font.hx",139,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(glyph,"glyph")
HXLINE( 142)		 ::Dynamic handle = this->src;
HXDLIN( 142)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_get_glyph_metrics(hx::DynamicPtr(handle),glyph)) );
HXDLIN( 142)		HX_VARI(  ::Dynamic,value) = Dynamic(hx::DynamicPtr(inVal));
HXLINE( 143)		HX_VARI(  ::lime::text::GlyphMetrics,metrics) =  ::lime::text::GlyphMetrics_obj::__new();
HXLINE( 145)		metrics->advance =  ::lime::math::Vector2_obj::__new( ::Dynamic(value->__Field(HX_("horizontalAdvance",fe,57,3e,ce),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("verticalAdvance",ac,8e,f7,57),hx::paccDynamic)));
HXLINE( 146)		metrics->height =  ::Dynamic(value->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic));
HXLINE( 147)		metrics->horizontalBearing =  ::lime::math::Vector2_obj::__new( ::Dynamic(value->__Field(HX_("horizontalBearingX",ae,21,22,6c),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("horizontalBearingY",af,21,22,6c),hx::paccDynamic)));
HXLINE( 148)		metrics->verticalBearing =  ::lime::math::Vector2_obj::__new( ::Dynamic(value->__Field(HX_("verticalBearingX",40,c3,78,64),hx::paccDynamic)), ::Dynamic(value->__Field(HX_("verticalBearingY",41,c3,78,64),hx::paccDynamic)));
HXLINE( 150)		return metrics;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,getGlyphMetrics,return )

 ::lime::graphics::Image Font_obj::renderGlyph(Int glyph,Int fontSize){
            	HX_STACK_FRAME("lime.text.Font","renderGlyph",0xe6e51a3f,"lime.text.Font.renderGlyph","lime/text/Font.hx",158,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(glyph,"glyph")
            	HX_STACK_ARG(fontSize,"fontSize")
HXLINE( 162)		this->_hx___setSize(fontSize);
HXLINE( 164)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((int)0);
HXLINE( 169)		 ::Dynamic handle = this->src;
HXDLIN( 169)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(handle);
HXDLIN( 169)		Bool _hx_tmp1 = ( (Bool)(::lime::text::Font_obj::cffi_lime_font_render_glyph(_hx_tmp,glyph,hx::DynamicPtr(bytes))) );
HXDLIN( 169)		if (_hx_tmp1) {
HXLINE( 172)			HX_VARI( Int,width) = ((int)((int)((int)bytes->b->__get((int)4) | (int)((int)bytes->b->__get((int)5) << (int)(int)8)) | (int)((int)bytes->b->__get((int)6) << (int)(int)16)) | (int)((int)bytes->b->__get((int)7) << (int)(int)24));
HXLINE( 173)			HX_VARI( Int,height) = ((int)((int)((int)bytes->b->__get((int)8) | (int)((int)bytes->b->__get((int)9) << (int)(int)8)) | (int)((int)bytes->b->__get((int)10) << (int)(int)16)) | (int)((int)bytes->b->__get((int)11) << (int)(int)24));
HXLINE( 174)			HX_VARI( Int,x) = ((int)((int)((int)bytes->b->__get((int)12) | (int)((int)bytes->b->__get((int)13) << (int)(int)8)) | (int)((int)bytes->b->__get((int)14) << (int)(int)16)) | (int)((int)bytes->b->__get((int)15) << (int)(int)24));
HXLINE( 175)			HX_VARI( Int,y) = ((int)((int)((int)bytes->b->__get((int)16) | (int)((int)bytes->b->__get((int)17) << (int)(int)8)) | (int)((int)bytes->b->__get((int)18) << (int)(int)16)) | (int)((int)bytes->b->__get((int)19) << (int)(int)24));
HXLINE( 177)			HX_VARI(  ::haxe::io::Bytes,data) = bytes->sub((int)20,(width * height));
HXLINE( 180)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 180)			Bool _hx_tmp2 = hx::IsNotNull( data );
HXDLIN( 180)			if (_hx_tmp2) {
HXLINE( 180)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 180)				if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE( 180)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 180)				HX_VARI( Int,bufferByteLength) = data->length;
HXDLIN( 180)				{
HXLINE( 180)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 180)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 180)					if ((bufferByteLength < (int)0)) {
HXLINE( 180)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN( 180)				_this->buffer = data;
HXDLIN( 180)				_this->byteOffset = (int)0;
HXDLIN( 180)				_this->byteLength = bufferByteLength;
HXDLIN( 180)				Float _hx_tmp3 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN( 180)				_this->length = ::Std_obj::_hx_int(_hx_tmp3);
HXDLIN( 180)				this1 = _this;
            			}
            			else {
HXLINE( 180)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 180)			HX_VARI(  ::lime::graphics::ImageBuffer,buffer) =  ::lime::graphics::ImageBuffer_obj::__new(this1,width,height,(int)1,null());
HXLINE( 181)			HX_VARI(  ::lime::graphics::Image,image) =  ::lime::graphics::Image_obj::__new(buffer,(int)0,(int)0,width,height,null(),null());
HXLINE( 182)			image->x = x;
HXLINE( 183)			image->y = y;
HXLINE( 185)			return image;
            		}
HXLINE( 191)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Font_obj,renderGlyph,return )

 ::haxe::ds::IntMap Font_obj::renderGlyphs(::Array< Int > glyphs,Int fontSize){
            	HX_STACK_FRAME("lime.text.Font","renderGlyphs",0x2191dd54,"lime.text.Font.renderGlyphs","lime/text/Font.hx",356,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(glyphs,"glyphs")
            	HX_STACK_ARG(fontSize,"fontSize")
HXLINE( 356)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Font_obj,renderGlyphs,return )

void Font_obj::_hx___fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.text.Font","__fromBytes",0x257c2b4a,"lime.text.Font.__fromBytes","lime/text/Font.hx",360,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 362)		this->_hx___fontPath = null();
HXLINE( 366)		this->_hx___fontPathWithoutDirectory = null();
HXLINE( 368)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_load(hx::DynamicPtr(bytes))) );
HXDLIN( 368)		 ::Dynamic _hx_tmp = Dynamic(hx::DynamicPtr(inVal));
HXDLIN( 368)		this->src = _hx_tmp;
HXLINE( 370)		Bool _hx_tmp1;
HXDLIN( 370)		Bool _hx_tmp2 = hx::IsNotNull( this->src );
HXDLIN( 370)		if (_hx_tmp2) {
HXLINE( 370)			_hx_tmp1 = hx::IsNull( this->name );
            		}
            		else {
HXLINE( 370)			_hx_tmp1 = false;
            		}
HXDLIN( 370)		if (_hx_tmp1) {
HXLINE( 372)			 ::Dynamic handle = this->src;
HXDLIN( 372)			 ::hx::Object * inVal1 = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_get_family_name(hx::DynamicPtr(handle))) );
HXDLIN( 372)			 ::Dynamic _hx_tmp3 = Dynamic(hx::DynamicPtr(inVal1));
HXDLIN( 372)			this->name = ( (::String)(_hx_tmp3) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromBytes,(void))

void Font_obj::_hx___fromFile(::String path){
            	HX_STACK_FRAME("lime.text.Font","__fromFile",0x6331ec7d,"lime.text.Font.__fromFile","lime/text/Font.hx",381,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
HXLINE( 383)		this->_hx___fontPath = path;
HXLINE( 387)		this->_hx___fontPathWithoutDirectory = ::haxe::io::Path_obj::withoutDirectory(this->_hx___fontPath);
HXLINE( 389)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_load(hx::DynamicPtr(this->_hx___fontPath))) );
HXDLIN( 389)		 ::Dynamic _hx_tmp = Dynamic(hx::DynamicPtr(inVal));
HXDLIN( 389)		this->src = _hx_tmp;
HXLINE( 391)		Bool _hx_tmp1;
HXDLIN( 391)		Bool _hx_tmp2 = hx::IsNotNull( this->src );
HXDLIN( 391)		if (_hx_tmp2) {
HXLINE( 391)			_hx_tmp1 = hx::IsNull( this->name );
            		}
            		else {
HXLINE( 391)			_hx_tmp1 = false;
            		}
HXDLIN( 391)		if (_hx_tmp1) {
HXLINE( 393)			 ::Dynamic handle = this->src;
HXDLIN( 393)			 ::hx::Object * inVal1 = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_get_family_name(hx::DynamicPtr(handle))) );
HXDLIN( 393)			 ::Dynamic _hx_tmp3 = Dynamic(hx::DynamicPtr(inVal1));
HXDLIN( 393)			this->name = ( (::String)(_hx_tmp3) );
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___fromFile,(void))

void Font_obj::_hx___setSize(Int size){
            	HX_STACK_FRAME("lime.text.Font","__setSize",0x86a86dec,"lime.text.Font.__setSize","lime/text/Font.hx",405,0x3be57807)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
HXLINE( 405)		 ::Dynamic handle = this->src;
HXDLIN( 405)		::lime::text::Font_obj::cffi_lime_font_set_size(hx::DynamicPtr(handle),size);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Font_obj,_hx___setSize,(void))

Int Font_obj::get_ascender(){
            	HX_STACK_FRAME("lime.text.Font","get_ascender",0x190d2c57,"lime.text.Font.get_ascender","lime/text/Font.hx",421,0x3be57807)
            	HX_STACK_THIS(this)
HXLINE( 421)		 ::Dynamic handle = this->src;
HXDLIN( 421)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_ascender(hx::DynamicPtr(handle))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_ascender,return )

Int Font_obj::get_descender(){
            	HX_STACK_FRAME("lime.text.Font","get_descender",0xcf2c6cf7,"lime.text.Font.get_descender","lime/text/Font.hx",432,0x3be57807)
            	HX_STACK_THIS(this)
HXLINE( 432)		 ::Dynamic handle = this->src;
HXDLIN( 432)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_descender(hx::DynamicPtr(handle))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_descender,return )

Int Font_obj::get_height(){
            	HX_STACK_FRAME("lime.text.Font","get_height",0x11455407,"lime.text.Font.get_height","lime/text/Font.hx",443,0x3be57807)
            	HX_STACK_THIS(this)
HXLINE( 443)		 ::Dynamic handle = this->src;
HXDLIN( 443)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_height(hx::DynamicPtr(handle))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_height,return )

Int Font_obj::get_numGlyphs(){
            	HX_STACK_FRAME("lime.text.Font","get_numGlyphs",0x835f4c0d,"lime.text.Font.get_numGlyphs","lime/text/Font.hx",454,0x3be57807)
            	HX_STACK_THIS(this)
HXLINE( 454)		 ::Dynamic handle = this->src;
HXDLIN( 454)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_num_glyphs(hx::DynamicPtr(handle))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_numGlyphs,return )

Int Font_obj::get_underlinePosition(){
            	HX_STACK_FRAME("lime.text.Font","get_underlinePosition",0xf48b45b5,"lime.text.Font.get_underlinePosition","lime/text/Font.hx",465,0x3be57807)
            	HX_STACK_THIS(this)
HXLINE( 465)		 ::Dynamic handle = this->src;
HXDLIN( 465)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_underline_position(hx::DynamicPtr(handle))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_underlinePosition,return )

Int Font_obj::get_underlineThickness(){
            	HX_STACK_FRAME("lime.text.Font","get_underlineThickness",0x8f66b6e8,"lime.text.Font.get_underlineThickness","lime/text/Font.hx",476,0x3be57807)
            	HX_STACK_THIS(this)
HXLINE( 476)		 ::Dynamic handle = this->src;
HXDLIN( 476)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_underline_thickness(hx::DynamicPtr(handle))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_underlineThickness,return )

Int Font_obj::get_unitsPerEM(){
            	HX_STACK_FRAME("lime.text.Font","get_unitsPerEM",0x81c292b6,"lime.text.Font.get_unitsPerEM","lime/text/Font.hx",487,0x3be57807)
            	HX_STACK_THIS(this)
HXLINE( 487)		 ::Dynamic handle = this->src;
HXDLIN( 487)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_units_per_em(hx::DynamicPtr(handle))) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Font_obj,get_unitsPerEM,return )

 ::lime::text::Font Font_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.text.Font","fromBytes",0x65a32e2a,"lime.text.Font.fromBytes","lime/text/Font.hx",84,0x3be57807)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(  86)		Bool _hx_tmp = hx::IsNull( bytes );
HXDLIN(  86)		if (_hx_tmp) {
HXLINE(  86)			return null();
            		}
HXLINE(  88)		HX_VARI(  ::lime::text::Font,font) =  ::lime::text::Font_obj::__new(null());
HXLINE(  89)		font->_hx___fromBytes(bytes);
HXLINE(  92)		Bool _hx_tmp1 = hx::IsNotNull( font->src );
HXDLIN(  92)		if (_hx_tmp1) {
HXLINE(  92)			return font;
            		}
            		else {
HXLINE(  92)			return null();
            		}
HXDLIN(  92)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromBytes,return )

 ::lime::text::Font Font_obj::fromFile(::String path){
            	HX_STACK_FRAME("lime.text.Font","fromFile",0x07a4e59d,"lime.text.Font.fromFile","lime/text/Font.hx",100,0x3be57807)
            	HX_STACK_ARG(path,"path")
HXLINE( 102)		Bool _hx_tmp = hx::IsNull( path );
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 102)			return null();
            		}
HXLINE( 104)		HX_VARI(  ::lime::text::Font,font) =  ::lime::text::Font_obj::__new(null());
HXLINE( 105)		font->_hx___fromFile(path);
HXLINE( 108)		Bool _hx_tmp1 = hx::IsNotNull( font->src );
HXDLIN( 108)		if (_hx_tmp1) {
HXLINE( 108)			return font;
            		}
            		else {
HXLINE( 108)			return null();
            		}
HXDLIN( 108)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,fromFile,return )

Int Font_obj::lime_font_get_ascender( ::Dynamic handle){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_ascender",0xfbec73dd,"lime.text.Font.lime_font_get_ascender","lime/text/Font.hx",503,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 503)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_ascender(hx::DynamicPtr(handle))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_get_ascender,return )

Int Font_obj::lime_font_get_descender( ::Dynamic handle){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_descender",0x6fabbab1,"lime.text.Font.lime_font_get_descender","lime/text/Font.hx",504,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 504)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_descender(hx::DynamicPtr(handle))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_get_descender,return )

 ::Dynamic Font_obj::lime_font_get_family_name( ::Dynamic handle){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_family_name",0x92166c20,"lime.text.Font.lime_font_get_family_name","lime/text/Font.hx",505,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 505)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_get_family_name(hx::DynamicPtr(handle))) );
HXDLIN( 505)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_get_family_name,return )

Int Font_obj::lime_font_get_glyph_index( ::Dynamic handle,::String character){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_glyph_index",0x8040d919,"lime.text.Font.lime_font_get_glyph_index","lime/text/Font.hx",506,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
            	HX_STACK_ARG(character,"character")
HXLINE( 506)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_glyph_index(hx::DynamicPtr(handle),character)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Font_obj,lime_font_get_glyph_index,return )

 ::Dynamic Font_obj::lime_font_get_glyph_indices( ::Dynamic handle,::String characters){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_glyph_indices",0xb79154ee,"lime.text.Font.lime_font_get_glyph_indices","lime/text/Font.hx",507,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
            	HX_STACK_ARG(characters,"characters")
HXLINE( 507)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_get_glyph_indices(hx::DynamicPtr(handle),characters)) );
HXDLIN( 507)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Font_obj,lime_font_get_glyph_indices,return )

 ::Dynamic Font_obj::lime_font_get_glyph_metrics( ::Dynamic handle,Int index){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_glyph_metrics",0x0111b00a,"lime.text.Font.lime_font_get_glyph_metrics","lime/text/Font.hx",508,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
            	HX_STACK_ARG(index,"index")
HXLINE( 508)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_get_glyph_metrics(hx::DynamicPtr(handle),index)) );
HXDLIN( 508)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Font_obj,lime_font_get_glyph_metrics,return )

Int Font_obj::lime_font_get_height( ::Dynamic handle){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_height",0xe21d8e0d,"lime.text.Font.lime_font_get_height","lime/text/Font.hx",509,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 509)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_height(hx::DynamicPtr(handle))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_get_height,return )

Int Font_obj::lime_font_get_num_glyphs( ::Dynamic handle){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_num_glyphs",0xaee5b286,"lime.text.Font.lime_font_get_num_glyphs","lime/text/Font.hx",510,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 510)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_num_glyphs(hx::DynamicPtr(handle))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_get_num_glyphs,return )

Int Font_obj::lime_font_get_underline_position( ::Dynamic handle){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_underline_position",0x9987a8a2,"lime.text.Font.lime_font_get_underline_position","lime/text/Font.hx",511,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 511)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_underline_position(hx::DynamicPtr(handle))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_get_underline_position,return )

Int Font_obj::lime_font_get_underline_thickness( ::Dynamic handle){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_underline_thickness",0x4740e35b,"lime.text.Font.lime_font_get_underline_thickness","lime/text/Font.hx",512,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 512)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_underline_thickness(hx::DynamicPtr(handle))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_get_underline_thickness,return )

Int Font_obj::lime_font_get_units_per_em( ::Dynamic handle){
            	HX_STACK_FRAME("lime.text.Font","lime_font_get_units_per_em",0xb61bac80,"lime.text.Font.lime_font_get_units_per_em","lime/text/Font.hx",513,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
HXLINE( 513)		return ( (Int)(::lime::text::Font_obj::cffi_lime_font_get_units_per_em(hx::DynamicPtr(handle))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_get_units_per_em,return )

 ::Dynamic Font_obj::lime_font_load( ::Dynamic data){
            	HX_STACK_FRAME("lime.text.Font","lime_font_load",0xecda5cc3,"lime.text.Font.lime_font_load","lime/text/Font.hx",514,0x3be57807)
            	HX_STACK_ARG(data,"data")
HXLINE( 514)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_load(hx::DynamicPtr(data))) );
HXDLIN( 514)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Font_obj,lime_font_load,return )

 ::Dynamic Font_obj::lime_font_outline_decompose( ::Dynamic handle,Int size){
            	HX_STACK_FRAME("lime.text.Font","lime_font_outline_decompose",0x0935acb7,"lime.text.Font.lime_font_outline_decompose","lime/text/Font.hx",515,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
            	HX_STACK_ARG(size,"size")
HXLINE( 515)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::text::Font_obj::cffi_lime_font_outline_decompose(hx::DynamicPtr(handle),size)) );
HXDLIN( 515)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Font_obj,lime_font_outline_decompose,return )

Bool Font_obj::lime_font_render_glyph( ::Dynamic handle,Int index, ::Dynamic data){
            	HX_STACK_FRAME("lime.text.Font","lime_font_render_glyph",0xb36ffc60,"lime.text.Font.lime_font_render_glyph","lime/text/Font.hx",516,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(data,"data")
HXLINE( 516)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(handle);
HXDLIN( 516)		return ( (Bool)(::lime::text::Font_obj::cffi_lime_font_render_glyph(_hx_tmp,index,hx::DynamicPtr(data))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Font_obj,lime_font_render_glyph,return )

Bool Font_obj::lime_font_render_glyphs( ::Dynamic handle, ::Dynamic indices, ::Dynamic data){
            	HX_STACK_FRAME("lime.text.Font","lime_font_render_glyphs",0x4e8cd813,"lime.text.Font.lime_font_render_glyphs","lime/text/Font.hx",517,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
            	HX_STACK_ARG(indices,"indices")
            	HX_STACK_ARG(data,"data")
HXLINE( 517)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(handle);
HXDLIN( 517)		 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(indices);
HXDLIN( 517)		return ( (Bool)(::lime::text::Font_obj::cffi_lime_font_render_glyphs(_hx_tmp,_hx_tmp1,hx::DynamicPtr(data))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Font_obj,lime_font_render_glyphs,return )

void Font_obj::lime_font_set_size( ::Dynamic handle,Int size){
            	HX_STACK_FRAME("lime.text.Font","lime_font_set_size",0x7b008adb,"lime.text.Font.lime_font_set_size","lime/text/Font.hx",518,0x3be57807)
            	HX_STACK_ARG(handle,"handle")
            	HX_STACK_ARG(size,"size")
HXLINE( 518)		::lime::text::Font_obj::cffi_lime_font_set_size(hx::DynamicPtr(handle),size);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Font_obj,lime_font_set_size,(void))

::cpp::Function<  Int( ::hx::Object *) > Font_obj::cffi_lime_font_get_ascender;

::cpp::Function<  Int( ::hx::Object *) > Font_obj::cffi_lime_font_get_descender;

::cpp::Function<   ::hx::Object *( ::hx::Object *) > Font_obj::cffi_lime_font_get_family_name;

::cpp::Function<  Int( ::hx::Object *,::String) > Font_obj::cffi_lime_font_get_glyph_index;

::cpp::Function<   ::hx::Object *( ::hx::Object *,::String) > Font_obj::cffi_lime_font_get_glyph_indices;

::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > Font_obj::cffi_lime_font_get_glyph_metrics;

::cpp::Function<  Int( ::hx::Object *) > Font_obj::cffi_lime_font_get_height;

::cpp::Function<  Int( ::hx::Object *) > Font_obj::cffi_lime_font_get_num_glyphs;

::cpp::Function<  Int( ::hx::Object *) > Font_obj::cffi_lime_font_get_underline_position;

::cpp::Function<  Int( ::hx::Object *) > Font_obj::cffi_lime_font_get_underline_thickness;

::cpp::Function<  Int( ::hx::Object *) > Font_obj::cffi_lime_font_get_units_per_em;

::cpp::Function<   ::hx::Object *( ::hx::Object *) > Font_obj::cffi_lime_font_load;

::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > Font_obj::cffi_lime_font_outline_decompose;

::cpp::Function<  Bool( ::hx::Object *,Int, ::hx::Object *) > Font_obj::cffi_lime_font_render_glyph;

::cpp::Function<  Bool( ::hx::Object *, ::hx::Object *, ::hx::Object *) > Font_obj::cffi_lime_font_render_glyphs;

::cpp::Function<  void( ::hx::Object *,Int) > Font_obj::cffi_lime_font_set_size;


Font_obj::Font_obj()
{
}

void Font_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Font);
	HX_MARK_MEMBER_NAME(ascender,"ascender");
	HX_MARK_MEMBER_NAME(descender,"descender");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(numGlyphs,"numGlyphs");
	HX_MARK_MEMBER_NAME(src,"src");
	HX_MARK_MEMBER_NAME(underlinePosition,"underlinePosition");
	HX_MARK_MEMBER_NAME(underlineThickness,"underlineThickness");
	HX_MARK_MEMBER_NAME(unitsPerEM,"unitsPerEM");
	HX_MARK_MEMBER_NAME(_hx___fontPath,"__fontPath");
	HX_MARK_MEMBER_NAME(_hx___fontPathWithoutDirectory,"__fontPathWithoutDirectory");
	HX_MARK_END_CLASS();
}

void Font_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ascender,"ascender");
	HX_VISIT_MEMBER_NAME(descender,"descender");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(numGlyphs,"numGlyphs");
	HX_VISIT_MEMBER_NAME(src,"src");
	HX_VISIT_MEMBER_NAME(underlinePosition,"underlinePosition");
	HX_VISIT_MEMBER_NAME(underlineThickness,"underlineThickness");
	HX_VISIT_MEMBER_NAME(unitsPerEM,"unitsPerEM");
	HX_VISIT_MEMBER_NAME(_hx___fontPath,"__fontPath");
	HX_VISIT_MEMBER_NAME(_hx___fontPathWithoutDirectory,"__fontPathWithoutDirectory");
}

hx::Val Font_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { return hx::Val( src); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( inCallProp == hx::paccAlways ? get_height() : height); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ascender") ) { return hx::Val( inCallProp == hx::paccAlways ? get_ascender() : ascender); }
		if (HX_FIELD_EQ(inName,"getGlyph") ) { return hx::Val( getGlyph_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"descender") ) { return hx::Val( inCallProp == hx::paccAlways ? get_descender() : descender); }
		if (HX_FIELD_EQ(inName,"numGlyphs") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numGlyphs() : numGlyphs); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn()); }
		if (HX_FIELD_EQ(inName,"getGlyphs") ) { return hx::Val( getGlyphs_dyn()); }
		if (HX_FIELD_EQ(inName,"__setSize") ) { return hx::Val( _hx___setSize_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unitsPerEM") ) { return hx::Val( inCallProp == hx::paccAlways ? get_unitsPerEM() : unitsPerEM); }
		if (HX_FIELD_EQ(inName,"__fontPath") ) { return hx::Val( _hx___fontPath); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"renderGlyph") ) { return hx::Val( renderGlyph_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderGlyphs") ) { return hx::Val( renderGlyphs_dyn()); }
		if (HX_FIELD_EQ(inName,"get_ascender") ) { return hx::Val( get_ascender_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_descender") ) { return hx::Val( get_descender_dyn()); }
		if (HX_FIELD_EQ(inName,"get_numGlyphs") ) { return hx::Val( get_numGlyphs_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_unitsPerEM") ) { return hx::Val( get_unitsPerEM_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"getGlyphMetrics") ) { return hx::Val( getGlyphMetrics_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"underlinePosition") ) { return hx::Val( inCallProp == hx::paccAlways ? get_underlinePosition() : underlinePosition); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"underlineThickness") ) { return hx::Val( inCallProp == hx::paccAlways ? get_underlineThickness() : underlineThickness); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_underlinePosition") ) { return hx::Val( get_underlinePosition_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_underlineThickness") ) { return hx::Val( get_underlineThickness_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__fontPathWithoutDirectory") ) { return hx::Val( _hx___fontPathWithoutDirectory); }
	}
	return super::__Field(inName,inCallProp);
}

bool Font_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"lime_font_load") ) { outValue = lime_font_load_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lime_font_set_size") ) { outValue = lime_font_set_size_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_load") ) { outValue = cffi_lime_font_load; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"lime_font_get_height") ) { outValue = lime_font_get_height_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"lime_font_get_ascender") ) { outValue = lime_font_get_ascender_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_font_render_glyph") ) { outValue = lime_font_render_glyph_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"lime_font_get_descender") ) { outValue = lime_font_get_descender_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_font_render_glyphs") ) { outValue = lime_font_render_glyphs_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_set_size") ) { outValue = cffi_lime_font_set_size; return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"lime_font_get_num_glyphs") ) { outValue = lime_font_get_num_glyphs_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"lime_font_get_family_name") ) { outValue = lime_font_get_family_name_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_font_get_glyph_index") ) { outValue = lime_font_get_glyph_index_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_height") ) { outValue = cffi_lime_font_get_height; return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"lime_font_get_units_per_em") ) { outValue = lime_font_get_units_per_em_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_font_get_glyph_indices") ) { outValue = lime_font_get_glyph_indices_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_font_get_glyph_metrics") ) { outValue = lime_font_get_glyph_metrics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_font_outline_decompose") ) { outValue = lime_font_outline_decompose_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_ascender") ) { outValue = cffi_lime_font_get_ascender; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_render_glyph") ) { outValue = cffi_lime_font_render_glyph; return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_descender") ) { outValue = cffi_lime_font_get_descender; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_render_glyphs") ) { outValue = cffi_lime_font_render_glyphs; return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_num_glyphs") ) { outValue = cffi_lime_font_get_num_glyphs; return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_family_name") ) { outValue = cffi_lime_font_get_family_name; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_glyph_index") ) { outValue = cffi_lime_font_get_glyph_index; return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_units_per_em") ) { outValue = cffi_lime_font_get_units_per_em; return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_font_get_underline_position") ) { outValue = lime_font_get_underline_position_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_glyph_indices") ) { outValue = cffi_lime_font_get_glyph_indices; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_glyph_metrics") ) { outValue = cffi_lime_font_get_glyph_metrics; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_outline_decompose") ) { outValue = cffi_lime_font_outline_decompose; return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"lime_font_get_underline_thickness") ) { outValue = lime_font_get_underline_thickness_dyn(); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_underline_position") ) { outValue = cffi_lime_font_get_underline_position; return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_underline_thickness") ) { outValue = cffi_lime_font_get_underline_thickness; return true; }
	}
	return false;
}

hx::Val Font_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { src=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ascender") ) { ascender=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"descender") ) { descender=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numGlyphs") ) { numGlyphs=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"unitsPerEM") ) { unitsPerEM=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fontPath") ) { _hx___fontPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"underlinePosition") ) { underlinePosition=inValue.Cast< Int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"underlineThickness") ) { underlineThickness=inValue.Cast< Int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__fontPathWithoutDirectory") ) { _hx___fontPathWithoutDirectory=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Font_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_load") ) { cffi_lime_font_load=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *) > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_set_size") ) { cffi_lime_font_set_size=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *,Int) > >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_height") ) { cffi_lime_font_get_height=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *) > >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_ascender") ) { cffi_lime_font_get_ascender=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_render_glyph") ) { cffi_lime_font_render_glyph=ioValue.Cast< ::cpp::Function<  Bool( ::hx::Object *,Int, ::hx::Object *) > >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_descender") ) { cffi_lime_font_get_descender=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_render_glyphs") ) { cffi_lime_font_render_glyphs=ioValue.Cast< ::cpp::Function<  Bool( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_num_glyphs") ) { cffi_lime_font_get_num_glyphs=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *) > >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_family_name") ) { cffi_lime_font_get_family_name=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_glyph_index") ) { cffi_lime_font_get_glyph_index=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *,::String) > >(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_units_per_em") ) { cffi_lime_font_get_units_per_em=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *) > >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_glyph_indices") ) { cffi_lime_font_get_glyph_indices=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *,::String) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_glyph_metrics") ) { cffi_lime_font_get_glyph_metrics=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_font_outline_decompose") ) { cffi_lime_font_outline_decompose=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > >(); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_underline_position") ) { cffi_lime_font_get_underline_position=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *) > >(); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"cffi_lime_font_get_underline_thickness") ) { cffi_lime_font_get_underline_thickness=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *) > >(); return true; }
	}
	return false;
}

void Font_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("ascender","\x37","\x98","\x10","\x60"));
	outFields->push(HX_HCSTRING("descender","\x17","\x65","\x27","\xab"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	outFields->push(HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96"));
	outFields->push(HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91"));
	outFields->push(HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21"));
	outFields->push(HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70"));
	outFields->push(HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Font_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Font_obj,ascender),HX_HCSTRING("ascender","\x37","\x98","\x10","\x60")},
	{hx::fsInt,(int)offsetof(Font_obj,descender),HX_HCSTRING("descender","\x17","\x65","\x27","\xab")},
	{hx::fsInt,(int)offsetof(Font_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsString,(int)offsetof(Font_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(Font_obj,numGlyphs),HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Font_obj,src),HX_HCSTRING("src","\xe4","\xa6","\x57","\x00")},
	{hx::fsInt,(int)offsetof(Font_obj,underlinePosition),HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96")},
	{hx::fsInt,(int)offsetof(Font_obj,underlineThickness),HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91")},
	{hx::fsInt,(int)offsetof(Font_obj,unitsPerEM),HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21")},
	{hx::fsString,(int)offsetof(Font_obj,_hx___fontPath),HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70")},
	{hx::fsString,(int)offsetof(Font_obj,_hx___fontPathWithoutDirectory),HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Font_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_ascender,HX_HCSTRING("cffi_lime_font_get_ascender","\xbf","\xa6","\x45","\xba")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_descender,HX_HCSTRING("cffi_lime_font_get_descender","\x8f","\x0d","\x5f","\x3f")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_family_name,HX_HCSTRING("cffi_lime_font_get_family_name","\x7e","\xb2","\x6a","\x33")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_glyph_index,HX_HCSTRING("cffi_lime_font_get_glyph_index","\x77","\x1f","\x95","\x21")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_glyph_indices,HX_HCSTRING("cffi_lime_font_get_glyph_indices","\xcc","\x6e","\x4a","\x8b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_glyph_metrics,HX_HCSTRING("cffi_lime_font_get_glyph_metrics","\xe8","\xc9","\xca","\xd4")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_height,HX_HCSTRING("cffi_lime_font_get_height","\x6f","\xe4","\xaa","\xa1")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_num_glyphs,HX_HCSTRING("cffi_lime_font_get_num_glyphs","\xe8","\xe1","\x1a","\x9c")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_underline_position,HX_HCSTRING("cffi_lime_font_get_underline_position","\x04","\x0a","\x6e","\x56")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_underline_thickness,HX_HCSTRING("cffi_lime_font_get_underline_thickness","\xb9","\xb7","\xef","\xd3")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_get_units_per_em,HX_HCSTRING("cffi_lime_font_get_units_per_em","\x62","\xf8","\x84","\x3e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_load,HX_HCSTRING("cffi_lime_font_load","\xa5","\xdd","\x94","\x73")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_outline_decompose,HX_HCSTRING("cffi_lime_font_outline_decompose","\x95","\xc6","\xee","\xdc")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_render_glyph,HX_HCSTRING("cffi_lime_font_render_glyph","\x42","\x2f","\xc9","\x71")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_render_glyphs,HX_HCSTRING("cffi_lime_font_render_glyphs","\xf1","\x2a","\x40","\x1e")},
	{hx::fsObject /*Dynamic*/ ,(void *) &Font_obj::cffi_lime_font_set_size,HX_HCSTRING("cffi_lime_font_set_size","\xbd","\x24","\x8a","\x51")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Font_obj_sMemberFields[] = {
	HX_HCSTRING("ascender","\x37","\x98","\x10","\x60"),
	HX_HCSTRING("descender","\x17","\x65","\x27","\xab"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("numGlyphs","\x2d","\x44","\x5a","\x5f"),
	HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"),
	HX_HCSTRING("underlinePosition","\xd5","\x5d","\x6b","\x96"),
	HX_HCSTRING("underlineThickness","\xc8","\xba","\x9b","\x91"),
	HX_HCSTRING("unitsPerEM","\x96","\xb6","\x60","\x21"),
	HX_HCSTRING("__fontPath","\x34","\x76","\x08","\x70"),
	HX_HCSTRING("__fontPathWithoutDirectory","\x59","\x11","\x28","\x91"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("getGlyph","\x36","\x0d","\xdc","\xf5"),
	HX_HCSTRING("getGlyphs","\x7d","\x82","\xaf","\x2a"),
	HX_HCSTRING("getGlyphMetrics","\xad","\x6f","\x39","\x58"),
	HX_HCSTRING("renderGlyph","\x76","\x2a","\xb6","\x61"),
	HX_HCSTRING("renderGlyphs","\x3d","\xfd","\xae","\x1d"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__setSize","\x63","\x32","\x26","\x93"),
	HX_HCSTRING("get_ascender","\x40","\x4c","\x2a","\x15"),
	HX_HCSTRING("get_descender","\xee","\x38","\x8b","\x6c"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_numGlyphs","\x04","\x18","\xbe","\x20"),
	HX_HCSTRING("get_underlinePosition","\xac","\x60","\x19","\x15"),
	HX_HCSTRING("get_underlineThickness","\x11","\x34","\x30","\xeb"),
	HX_HCSTRING("get_unitsPerEM","\xdf","\x3e","\x56","\x97"),
	::String(null()) };

static void Font_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Font_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_ascender,"cffi_lime_font_get_ascender");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_descender,"cffi_lime_font_get_descender");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_family_name,"cffi_lime_font_get_family_name");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_glyph_index,"cffi_lime_font_get_glyph_index");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_glyph_indices,"cffi_lime_font_get_glyph_indices");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_glyph_metrics,"cffi_lime_font_get_glyph_metrics");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_height,"cffi_lime_font_get_height");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_num_glyphs,"cffi_lime_font_get_num_glyphs");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_underline_position,"cffi_lime_font_get_underline_position");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_underline_thickness,"cffi_lime_font_get_underline_thickness");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_get_units_per_em,"cffi_lime_font_get_units_per_em");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_load,"cffi_lime_font_load");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_outline_decompose,"cffi_lime_font_outline_decompose");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_render_glyph,"cffi_lime_font_render_glyph");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_render_glyphs,"cffi_lime_font_render_glyphs");
	HX_MARK_MEMBER_NAME(Font_obj::cffi_lime_font_set_size,"cffi_lime_font_set_size");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Font_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Font_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_ascender,"cffi_lime_font_get_ascender");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_descender,"cffi_lime_font_get_descender");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_family_name,"cffi_lime_font_get_family_name");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_glyph_index,"cffi_lime_font_get_glyph_index");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_glyph_indices,"cffi_lime_font_get_glyph_indices");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_glyph_metrics,"cffi_lime_font_get_glyph_metrics");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_height,"cffi_lime_font_get_height");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_num_glyphs,"cffi_lime_font_get_num_glyphs");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_underline_position,"cffi_lime_font_get_underline_position");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_underline_thickness,"cffi_lime_font_get_underline_thickness");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_get_units_per_em,"cffi_lime_font_get_units_per_em");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_load,"cffi_lime_font_load");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_outline_decompose,"cffi_lime_font_outline_decompose");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_render_glyph,"cffi_lime_font_render_glyph");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_render_glyphs,"cffi_lime_font_render_glyphs");
	HX_VISIT_MEMBER_NAME(Font_obj::cffi_lime_font_set_size,"cffi_lime_font_set_size");
};

#endif

hx::Class Font_obj::__mClass;

static ::String Font_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("lime_font_get_ascender","\x06","\xf1","\xb5","\x57"),
	HX_HCSTRING("lime_font_get_descender","\x68","\xc1","\x2f","\x64"),
	HX_HCSTRING("lime_font_get_family_name","\x97","\xce","\xb2","\xb4"),
	HX_HCSTRING("lime_font_get_glyph_index","\x90","\x3b","\xdd","\xa2"),
	HX_HCSTRING("lime_font_get_glyph_indices","\x25","\x83","\xe4","\x03"),
	HX_HCSTRING("lime_font_get_glyph_metrics","\x41","\xde","\x64","\x4d"),
	HX_HCSTRING("lime_font_get_height","\xf6","\x3e","\xaa","\xfc"),
	HX_HCSTRING("lime_font_get_num_glyphs","\xef","\x8b","\xe7","\xad"),
	HX_HCSTRING("lime_font_get_underline_position","\x0b","\x93","\x8e","\x28"),
	HX_HCSTRING("lime_font_get_underline_thickness","\xd2","\x14","\x47","\xde"),
	HX_HCSTRING("lime_font_get_units_per_em","\x29","\x72","\x55","\xdc"),
	HX_HCSTRING("lime_font_load","\xec","\x08","\x6e","\x02"),
	HX_HCSTRING("lime_font_outline_decompose","\xee","\xda","\x88","\x55"),
	HX_HCSTRING("lime_font_render_glyph","\x89","\x79","\x39","\x0f"),
	HX_HCSTRING("lime_font_render_glyphs","\xca","\xde","\x10","\x43"),
	HX_HCSTRING("lime_font_set_size","\x84","\xff","\x47","\xdd"),
	HX_HCSTRING("cffi_lime_font_get_ascender","\xbf","\xa6","\x45","\xba"),
	HX_HCSTRING("cffi_lime_font_get_descender","\x8f","\x0d","\x5f","\x3f"),
	HX_HCSTRING("cffi_lime_font_get_family_name","\x7e","\xb2","\x6a","\x33"),
	HX_HCSTRING("cffi_lime_font_get_glyph_index","\x77","\x1f","\x95","\x21"),
	HX_HCSTRING("cffi_lime_font_get_glyph_indices","\xcc","\x6e","\x4a","\x8b"),
	HX_HCSTRING("cffi_lime_font_get_glyph_metrics","\xe8","\xc9","\xca","\xd4"),
	HX_HCSTRING("cffi_lime_font_get_height","\x6f","\xe4","\xaa","\xa1"),
	HX_HCSTRING("cffi_lime_font_get_num_glyphs","\xe8","\xe1","\x1a","\x9c"),
	HX_HCSTRING("cffi_lime_font_get_underline_position","\x04","\x0a","\x6e","\x56"),
	HX_HCSTRING("cffi_lime_font_get_underline_thickness","\xb9","\xb7","\xef","\xd3"),
	HX_HCSTRING("cffi_lime_font_get_units_per_em","\x62","\xf8","\x84","\x3e"),
	HX_HCSTRING("cffi_lime_font_load","\xa5","\xdd","\x94","\x73"),
	HX_HCSTRING("cffi_lime_font_outline_decompose","\x95","\xc6","\xee","\xdc"),
	HX_HCSTRING("cffi_lime_font_render_glyph","\x42","\x2f","\xc9","\x71"),
	HX_HCSTRING("cffi_lime_font_render_glyphs","\xf1","\x2a","\x40","\x1e"),
	HX_HCSTRING("cffi_lime_font_set_size","\xbd","\x24","\x8a","\x51"),
	::String(null())
};

void Font_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.text.Font","\xb7","\x86","\x7e","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Font_obj::__GetStatic;
	__mClass->mSetStaticField = &Font_obj::__SetStatic;
	__mClass->mMarkFunc = Font_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Font_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Font_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Font_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Font_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Font_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Font_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Font_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",503,0x3be57807)
HXLINE( 503)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_ascender",06,f1,b5,57),HX_("oi",1a,61,00,00),false);
HXDLIN( 503)		cffi_lime_font_get_ascender = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",504,0x3be57807)
HXLINE( 504)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_descender",68,c1,2f,64),HX_("oi",1a,61,00,00),false);
HXDLIN( 504)		cffi_lime_font_get_descender = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",505,0x3be57807)
HXLINE( 505)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_family_name",97,ce,b2,b4),HX_("oo",20,61,00,00),false);
HXDLIN( 505)		cffi_lime_font_get_family_name = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",506,0x3be57807)
HXLINE( 506)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_glyph_index",90,3b,dd,a2),HX_("osi",c5,9e,54,00),false);
HXDLIN( 506)		cffi_lime_font_get_glyph_index = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",507,0x3be57807)
HXLINE( 507)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_glyph_indices",25,83,e4,03),HX_("oso",cb,9e,54,00),false);
HXDLIN( 507)		cffi_lime_font_get_glyph_indices = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",508,0x3be57807)
HXLINE( 508)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_glyph_metrics",41,de,64,4d),HX_("oio",15,96,54,00),false);
HXDLIN( 508)		cffi_lime_font_get_glyph_metrics = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",509,0x3be57807)
HXLINE( 509)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_height",f6,3e,aa,fc),HX_("oi",1a,61,00,00),false);
HXDLIN( 509)		cffi_lime_font_get_height = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",510,0x3be57807)
HXLINE( 510)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_num_glyphs",ef,8b,e7,ad),HX_("oi",1a,61,00,00),false);
HXDLIN( 510)		cffi_lime_font_get_num_glyphs = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",511,0x3be57807)
HXLINE( 511)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_underline_position",0b,93,8e,28),HX_("oi",1a,61,00,00),false);
HXDLIN( 511)		cffi_lime_font_get_underline_position = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",512,0x3be57807)
HXLINE( 512)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_underline_thickness",d2,14,47,de),HX_("oi",1a,61,00,00),false);
HXDLIN( 512)		cffi_lime_font_get_underline_thickness = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",513,0x3be57807)
HXLINE( 513)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_get_units_per_em",29,72,55,dc),HX_("oi",1a,61,00,00),false);
HXDLIN( 513)		cffi_lime_font_get_units_per_em = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",514,0x3be57807)
HXLINE( 514)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_load",ec,08,6e,02),HX_("oo",20,61,00,00),false);
HXDLIN( 514)		cffi_lime_font_load = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",515,0x3be57807)
HXLINE( 515)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_outline_decompose",ee,da,88,55),HX_("oio",15,96,54,00),false);
HXDLIN( 515)		cffi_lime_font_outline_decompose = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",516,0x3be57807)
HXLINE( 516)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_render_glyph",89,79,39,0f),HX_("oiob",ad,bc,ae,49),false);
HXDLIN( 516)		cffi_lime_font_render_glyph = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",517,0x3be57807)
HXLINE( 517)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_render_glyphs",ca,de,10,43),HX_("ooob",33,4a,b3,49),false);
HXDLIN( 517)		cffi_lime_font_render_glyphs = inValue;
            	}
{
            	HX_STACK_FRAME("lime.text.Font","boot",0xc0f4f549,"lime.text.Font.boot","lime/text/Font.hx",518,0x3be57807)
HXLINE( 518)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_font_set_size",84,ff,47,dd),HX_("oiv",1c,96,54,00),false);
HXDLIN( 518)		cffi_lime_font_set_size = inValue;
            	}
}

} // end namespace lime
} // end namespace text
