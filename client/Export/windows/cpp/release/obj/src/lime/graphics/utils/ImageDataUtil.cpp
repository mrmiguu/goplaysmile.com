// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils__ImageDataUtil_ImageDataView
#include <lime/graphics/utils/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_color__RGBA_RGBA_Impl_
#include <lime/math/color/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

static const Int _hx_array_data_14[] = {
	(Int)0,(Int)-1,(Int)1,(Int)0,
};
static const Int _hx_array_data_15[] = {
	(Int)-1,(Int)0,(Int)0,(Int)1,
};
namespace lime{
namespace graphics{
namespace utils{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

hx::ObjectPtr< ImageDataUtil_obj > ImageDataUtil_obj::__new()
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ImageDataUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","colorTransform",0x2c17e9b7,"lime.graphics.utils.ImageDataUtil.colorTransform","lime/graphics/utils/ImageDataUtil.hx",30,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorMatrix,"colorMatrix")
HXLINE(  32)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE(  33)		Bool _hx_tmp = hx::IsNull( data );
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  33)			return;
            		}
HXLINE(  36)		Bool _hx_tmp1 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN(  36)		if (_hx_tmp1) {
HXLINE(  36)			 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(image);
HXDLIN(  36)			 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(rect);
HXDLIN(  36)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_color_transform(_hx_tmp2,_hx_tmp3,hx::DynamicPtr(colorMatrix));
            		}
            		else {
HXLINE(  40)			HX_VARI( Int,format) = image->buffer->format;
HXLINE(  41)			HX_VARI( Bool,premultiplied) = image->buffer->premultiplied;
HXLINE(  43)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,dataView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(image,rect);
HXLINE(  45)			HX_VARI(  ::lime::utils::ArrayBufferView,alphaTable) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE(  46)			HX_VARI(  ::lime::utils::ArrayBufferView,redTable) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE(  47)			HX_VARI(  ::lime::utils::ArrayBufferView,greenTable) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE(  48)			HX_VARI(  ::lime::utils::ArrayBufferView,blueTable) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE(  50)			HX_VAR( Int,row);
HXDLIN(  50)			HX_VAR( Int,offset);
HXDLIN(  50)			HX_VAR( Int,pixel);
HXLINE(  52)			{
HXLINE(  52)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(  52)				HX_VARI( Int,_g) = dataView->height;
HXDLIN(  52)				while((_g1 < _g)){
HXLINE(  52)					HX_VARI( Int,y) = _g1++;
HXLINE(  54)					row = (dataView->offset + (dataView->stride * y));
HXLINE(  56)					{
HXLINE(  56)						HX_VARI( Int,_g3) = (int)0;
HXDLIN(  56)						HX_VARI( Int,_g2) = dataView->width;
HXDLIN(  56)						while((_g3 < _g2)){
HXLINE(  56)							HX_VARI( Int,x) = _g3++;
HXLINE(  58)							offset = (row + (x * (int)4));
HXLINE(  60)							{
HXLINE(  60)								switch((int)(format)){
            									case (int)0: {
HXLINE(  60)										Int byteOffset = (data->byteOffset + offset);
HXDLIN(  60)										Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN(  60)										Int r = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN(  60)										Int byteOffset1 = (data->byteOffset + (offset + (int)1));
HXDLIN(  60)										Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN(  60)										Int g = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN(  60)										Int byteOffset2 = (data->byteOffset + (offset + (int)2));
HXDLIN(  60)										Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN(  60)										Int b = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN(  60)										Int byteOffset3 = (data->byteOffset + (offset + (int)3));
HXDLIN(  60)										Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN(  60)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp7 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  60)										Int byteOffset4 = (data->byteOffset + (offset + (int)1));
HXDLIN(  60)										Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN(  60)										Int r1 = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN(  60)										Int byteOffset5 = (data->byteOffset + (offset + (int)2));
HXDLIN(  60)										Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN(  60)										Int g1 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN(  60)										Int byteOffset6 = (data->byteOffset + (offset + (int)3));
HXDLIN(  60)										Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN(  60)										Int b1 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN(  60)										Int byteOffset7 = (data->byteOffset + offset);
HXDLIN(  60)										Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN(  60)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp11 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  60)										Int byteOffset8 = (data->byteOffset + (offset + (int)2));
HXDLIN(  60)										Int _hx_tmp12 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN(  60)										Int r2 = ((int)_hx_tmp12 & (int)(int)255);
HXDLIN(  60)										Int byteOffset9 = (data->byteOffset + (offset + (int)1));
HXDLIN(  60)										Int _hx_tmp13 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN(  60)										Int g2 = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN(  60)										Int byteOffset10 = (data->byteOffset + offset);
HXDLIN(  60)										Int _hx_tmp14 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN(  60)										Int b2 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN(  60)										Int byteOffset11 = (data->byteOffset + (offset + (int)3));
HXDLIN(  60)										Int _hx_tmp15 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN(  60)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp15 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  60)								if (premultiplied) {
HXLINE(  60)									Bool _hx_tmp16;
HXDLIN(  60)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(  60)										_hx_tmp16 = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  60)										_hx_tmp16 = false;
            									}
HXDLIN(  60)									if (_hx_tmp16) {
HXLINE(  60)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(  60)										{
HXLINE(  60)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  60)											Float _hx_tmp17 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(  60)											Int idx = ::Math_obj::round(_hx_tmp17);
HXDLIN(  60)											Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN(  60)											Int _hx_tmp18 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN(  60)											Int r3 = ((int)_hx_tmp18 & (int)(int)255);
HXDLIN(  60)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  60)											Float _hx_tmp19 = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(  60)											Int idx1 = ::Math_obj::round(_hx_tmp19);
HXDLIN(  60)											Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN(  60)											Int _hx_tmp20 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN(  60)											Int g3 = ((int)_hx_tmp20 & (int)(int)255);
HXDLIN(  60)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  60)											Float _hx_tmp21 = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(  60)											Int idx2 = ::Math_obj::round(_hx_tmp21);
HXDLIN(  60)											Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN(  60)											Int _hx_tmp22 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN(  60)											Int _hx_tmp23 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp22 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN(  60)											Int _hx_tmp24 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN(  60)											pixel = ((int)_hx_tmp23 | (int)_hx_tmp24);
            										}
            									}
            								}
            							}
HXLINE(  61)							{
HXLINE(  61)								Int byteOffset15 = (redTable->byteOffset + ((int)hx::UShr(pixel,(int)24) & (int)(int)255));
HXDLIN(  61)								Int _hx_tmp25 = ::__hxcpp_memory_get_byte(redTable->buffer->b,byteOffset15);
HXDLIN(  61)								Int r4 = ((int)_hx_tmp25 & (int)(int)255);
HXDLIN(  61)								Int byteOffset16 = (greenTable->byteOffset + ((int)hx::UShr(pixel,(int)16) & (int)(int)255));
HXDLIN(  61)								Int _hx_tmp26 = ::__hxcpp_memory_get_byte(greenTable->buffer->b,byteOffset16);
HXDLIN(  61)								Int g4 = ((int)_hx_tmp26 & (int)(int)255);
HXDLIN(  61)								Int byteOffset17 = (blueTable->byteOffset + ((int)hx::UShr(pixel,(int)8) & (int)(int)255));
HXDLIN(  61)								Int _hx_tmp27 = ::__hxcpp_memory_get_byte(blueTable->buffer->b,byteOffset17);
HXDLIN(  61)								Int b3 = ((int)_hx_tmp27 & (int)(int)255);
HXDLIN(  61)								Int byteOffset18 = (alphaTable->byteOffset + ((int)pixel & (int)(int)255));
HXDLIN(  61)								Int _hx_tmp28 = ::__hxcpp_memory_get_byte(alphaTable->buffer->b,byteOffset18);
HXDLIN(  61)								pixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp28 & (int)(int)255) & (int)(int)255));
            							}
HXLINE(  62)							{
HXLINE(  62)								if (premultiplied) {
HXLINE(  62)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(  62)										Bool _hx_tmp29 = (pixel != (int)0);
HXDLIN(  62)										if (_hx_tmp29) {
HXLINE(  62)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(  62)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(  62)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  62)											Int byteOffset19 = (this4->byteOffset + (((int)pixel & (int)(int)255) * (int)4));
HXDLIN(  62)											 ::Dynamic _hx_tmp30 = ::__hxcpp_memory_get_ui32(this4->buffer->b,byteOffset19);
HXDLIN(  62)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp30;
HXDLIN(  62)											{
HXLINE(  62)												Int _hx_tmp31 = ((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN(  62)												Int _hx_tmp32 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN(  62)												pixel = ((int)_hx_tmp31 | (int)_hx_tmp32);
            											}
            										}
            									}
            								}
HXDLIN(  62)								switch((int)(format)){
            									case (int)0: {
HXLINE(  62)										{
HXLINE(  62)											HX_VARI( Int,val) = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset20 = (data->byteOffset + offset);
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset20,val);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset21 = (data->byteOffset + (offset + (int)1));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset21,val1);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset22 = (data->byteOffset + (offset + (int)2));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset22,val2);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val3,"val") = ((int)pixel & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset23 = (data->byteOffset + (offset + (int)3));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset23,val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val4,"val") = ((int)pixel & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset24 = (data->byteOffset + offset);
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset24,val4);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset25 = (data->byteOffset + (offset + (int)1));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset25,val5);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset26 = (data->byteOffset + (offset + (int)2));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset26,val6);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset27 = (data->byteOffset + (offset + (int)3));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset27,val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset28 = (data->byteOffset + offset);
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset28,val8);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset29 = (data->byteOffset + (offset + (int)1));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset29,val9);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset30 = (data->byteOffset + (offset + (int)2));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset30,val10);
            											}
            										}
HXDLIN(  62)										{
HXLINE(  62)											HX_VARI_NAME( Int,val11,"val") = ((int)pixel & (int)(int)255);
HXDLIN(  62)											{
HXLINE(  62)												Int byteOffset31 = (data->byteOffset + (offset + (int)3));
HXDLIN(  62)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset31,val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  70)		image->dirty = true;
HXLINE(  71)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::hx::EnumBase sourceChannel,::hx::EnumBase destChannel){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","copyChannel",0xa41162a0,"lime.graphics.utils.ImageDataUtil.copyChannel","lime/graphics/utils/ImageDataUtil.hx",76,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(sourceChannel,"sourceChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE(  78)		HX_VAR( Int,destIdx);
HXDLIN(  78)		Int _hx_tmp = ( ( ::hx::EnumBase)(destChannel) )->_hx_getIndex();
HXDLIN(  78)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  78)				destIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  78)				destIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  78)				destIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  78)				destIdx = (int)3;
            			}
            			break;
            		}
HXLINE(  87)		HX_VAR( Int,srcIdx);
HXDLIN(  87)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(sourceChannel) )->_hx_getIndex();
HXDLIN(  87)		switch((int)(_hx_tmp1)){
            			case (int)0: {
HXLINE(  87)				srcIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  87)				srcIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  87)				srcIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  87)				srcIdx = (int)3;
            			}
            			break;
            		}
HXLINE(  96)		HX_VARI(  ::lime::utils::ArrayBufferView,srcData) = sourceImage->buffer->data;
HXLINE(  97)		HX_VARI(  ::lime::utils::ArrayBufferView,destData) = image->buffer->data;
HXLINE(  99)		Bool _hx_tmp2;
HXDLIN(  99)		Bool _hx_tmp3 = hx::IsNotNull( srcData );
HXDLIN(  99)		if (_hx_tmp3) {
HXLINE(  99)			_hx_tmp2 = hx::IsNull( destData );
            		}
            		else {
HXLINE(  99)			_hx_tmp2 = true;
            		}
HXDLIN(  99)		if (_hx_tmp2) {
HXLINE(  99)			return;
            		}
HXLINE( 102)		Bool _hx_tmp4 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 102)		if (_hx_tmp4) {
HXLINE( 102)			 ::hx::Object * _hx_tmp5 = hx::DynamicPtr(image);
HXDLIN( 102)			 ::hx::Object * _hx_tmp6 = hx::DynamicPtr(sourceImage);
HXDLIN( 102)			 ::hx::Object * _hx_tmp7 = hx::DynamicPtr(sourceRect);
HXDLIN( 102)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_copy_channel(_hx_tmp5,_hx_tmp6,_hx_tmp7,hx::DynamicPtr(destPoint),srcIdx,destIdx);
            		}
            		else {
HXLINE( 106)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,srcView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(sourceImage,sourceRect);
HXLINE( 107)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,destView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(image, ::lime::math::Rectangle_obj::__new(destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 109)			HX_VARI( Int,srcFormat) = sourceImage->buffer->format;
HXLINE( 110)			HX_VARI( Int,destFormat) = image->buffer->format;
HXLINE( 111)			HX_VARI( Bool,srcPremultiplied) = sourceImage->buffer->premultiplied;
HXLINE( 112)			HX_VARI( Bool,destPremultiplied) = image->buffer->premultiplied;
HXLINE( 114)			HX_VAR( Int,srcPosition);
HXDLIN( 114)			HX_VAR( Int,destPosition);
HXDLIN( 114)			HX_VAR( Int,srcPixel);
HXDLIN( 114)			HX_VAR( Int,destPixel);
HXDLIN( 114)			HX_VARI( Int,value) = (int)0;
HXLINE( 116)			{
HXLINE( 116)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 116)				HX_VARI( Int,_g) = destView->height;
HXDLIN( 116)				while((_g1 < _g)){
HXLINE( 116)					HX_VARI( Int,y) = _g1++;
HXLINE( 118)					srcPosition = (srcView->offset + (srcView->stride * y));
HXLINE( 119)					destPosition = (destView->offset + (destView->stride * y));
HXLINE( 121)					{
HXLINE( 121)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 121)						HX_VARI( Int,_g2) = destView->width;
HXDLIN( 121)						while((_g3 < _g2)){
HXLINE( 121)							++_g3;
HXLINE( 123)							{
HXLINE( 123)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 123)										Int byteOffset = (srcData->byteOffset + srcPosition);
HXDLIN( 123)										Int _hx_tmp8 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset);
HXDLIN( 123)										Int r = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN( 123)										Int byteOffset1 = (srcData->byteOffset + (srcPosition + (int)1));
HXDLIN( 123)										Int _hx_tmp9 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset1);
HXDLIN( 123)										Int g = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN( 123)										Int byteOffset2 = (srcData->byteOffset + (srcPosition + (int)2));
HXDLIN( 123)										Int _hx_tmp10 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset2);
HXDLIN( 123)										Int b = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 123)										Int byteOffset3 = (srcData->byteOffset + (srcPosition + (int)3));
HXDLIN( 123)										Int _hx_tmp11 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset3);
HXDLIN( 123)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp11 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 123)										Int byteOffset4 = (srcData->byteOffset + (srcPosition + (int)1));
HXDLIN( 123)										Int _hx_tmp12 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset4);
HXDLIN( 123)										Int r1 = ((int)_hx_tmp12 & (int)(int)255);
HXDLIN( 123)										Int byteOffset5 = (srcData->byteOffset + (srcPosition + (int)2));
HXDLIN( 123)										Int _hx_tmp13 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset5);
HXDLIN( 123)										Int g1 = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN( 123)										Int byteOffset6 = (srcData->byteOffset + (srcPosition + (int)3));
HXDLIN( 123)										Int _hx_tmp14 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset6);
HXDLIN( 123)										Int b1 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 123)										Int byteOffset7 = (srcData->byteOffset + srcPosition);
HXDLIN( 123)										Int _hx_tmp15 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset7);
HXDLIN( 123)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp15 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 123)										Int byteOffset8 = (srcData->byteOffset + (srcPosition + (int)2));
HXDLIN( 123)										Int _hx_tmp16 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset8);
HXDLIN( 123)										Int r2 = ((int)_hx_tmp16 & (int)(int)255);
HXDLIN( 123)										Int byteOffset9 = (srcData->byteOffset + (srcPosition + (int)1));
HXDLIN( 123)										Int _hx_tmp17 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset9);
HXDLIN( 123)										Int g2 = ((int)_hx_tmp17 & (int)(int)255);
HXDLIN( 123)										Int byteOffset10 = (srcData->byteOffset + srcPosition);
HXDLIN( 123)										Int _hx_tmp18 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset10);
HXDLIN( 123)										Int b2 = ((int)_hx_tmp18 & (int)(int)255);
HXDLIN( 123)										Int byteOffset11 = (srcData->byteOffset + (srcPosition + (int)3));
HXDLIN( 123)										Int _hx_tmp19 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset11);
HXDLIN( 123)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp19 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 123)								if (srcPremultiplied) {
HXLINE( 123)									Bool _hx_tmp20;
HXDLIN( 123)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE( 123)										_hx_tmp20 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 123)										_hx_tmp20 = false;
            									}
HXDLIN( 123)									if (_hx_tmp20) {
HXLINE( 123)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN( 123)										{
HXLINE( 123)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 123)											Float _hx_tmp21 = (((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 123)											Int idx = ::Math_obj::round(_hx_tmp21);
HXDLIN( 123)											Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN( 123)											Int _hx_tmp22 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN( 123)											Int r3 = ((int)_hx_tmp22 & (int)(int)255);
HXDLIN( 123)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 123)											Float _hx_tmp23 = (((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 123)											Int idx1 = ::Math_obj::round(_hx_tmp23);
HXDLIN( 123)											Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN( 123)											Int _hx_tmp24 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN( 123)											Int g3 = ((int)_hx_tmp24 & (int)(int)255);
HXDLIN( 123)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 123)											Float _hx_tmp25 = (((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 123)											Int idx2 = ::Math_obj::round(_hx_tmp25);
HXDLIN( 123)											Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN( 123)											Int _hx_tmp26 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN( 123)											Int _hx_tmp27 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp26 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 123)											Int _hx_tmp28 = ((int)((int)srcPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 123)											srcPixel = ((int)_hx_tmp27 | (int)_hx_tmp28);
            										}
            									}
            								}
            							}
HXLINE( 124)							{
HXLINE( 124)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 124)										Int byteOffset15 = (destData->byteOffset + destPosition);
HXDLIN( 124)										Int _hx_tmp29 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset15);
HXDLIN( 124)										Int r4 = ((int)_hx_tmp29 & (int)(int)255);
HXDLIN( 124)										Int byteOffset16 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 124)										Int _hx_tmp30 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset16);
HXDLIN( 124)										Int g4 = ((int)_hx_tmp30 & (int)(int)255);
HXDLIN( 124)										Int byteOffset17 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 124)										Int _hx_tmp31 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset17);
HXDLIN( 124)										Int b3 = ((int)_hx_tmp31 & (int)(int)255);
HXDLIN( 124)										Int byteOffset18 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 124)										Int _hx_tmp32 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset18);
HXDLIN( 124)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp32 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 124)										Int byteOffset19 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 124)										Int _hx_tmp33 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset19);
HXDLIN( 124)										Int r5 = ((int)_hx_tmp33 & (int)(int)255);
HXDLIN( 124)										Int byteOffset20 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 124)										Int _hx_tmp34 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset20);
HXDLIN( 124)										Int g5 = ((int)_hx_tmp34 & (int)(int)255);
HXDLIN( 124)										Int byteOffset21 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 124)										Int _hx_tmp35 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset21);
HXDLIN( 124)										Int b4 = ((int)_hx_tmp35 & (int)(int)255);
HXDLIN( 124)										Int byteOffset22 = (destData->byteOffset + destPosition);
HXDLIN( 124)										Int _hx_tmp36 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset22);
HXDLIN( 124)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp36 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 124)										Int byteOffset23 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 124)										Int _hx_tmp37 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset23);
HXDLIN( 124)										Int r6 = ((int)_hx_tmp37 & (int)(int)255);
HXDLIN( 124)										Int byteOffset24 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 124)										Int _hx_tmp38 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset24);
HXDLIN( 124)										Int g6 = ((int)_hx_tmp38 & (int)(int)255);
HXDLIN( 124)										Int byteOffset25 = (destData->byteOffset + destPosition);
HXDLIN( 124)										Int _hx_tmp39 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset25);
HXDLIN( 124)										Int b5 = ((int)_hx_tmp39 & (int)(int)255);
HXDLIN( 124)										Int byteOffset26 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 124)										Int _hx_tmp40 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset26);
HXDLIN( 124)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp40 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 124)								if (destPremultiplied) {
HXLINE( 124)									Bool _hx_tmp41;
HXDLIN( 124)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 124)										_hx_tmp41 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 124)										_hx_tmp41 = false;
            									}
HXDLIN( 124)									if (_hx_tmp41) {
HXLINE( 124)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 124)										{
HXLINE( 124)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 124)											Float _hx_tmp42 = (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 124)											Int idx3 = ::Math_obj::round(_hx_tmp42);
HXDLIN( 124)											Int byteOffset27 = (this4->byteOffset + idx3);
HXDLIN( 124)											Int _hx_tmp43 = ::__hxcpp_memory_get_byte(this4->buffer->b,byteOffset27);
HXDLIN( 124)											Int r7 = ((int)_hx_tmp43 & (int)(int)255);
HXDLIN( 124)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 124)											Float _hx_tmp44 = (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 124)											Int idx4 = ::Math_obj::round(_hx_tmp44);
HXDLIN( 124)											Int byteOffset28 = (this5->byteOffset + idx4);
HXDLIN( 124)											Int _hx_tmp45 = ::__hxcpp_memory_get_byte(this5->buffer->b,byteOffset28);
HXDLIN( 124)											Int g7 = ((int)_hx_tmp45 & (int)(int)255);
HXDLIN( 124)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 124)											Float _hx_tmp46 = (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 124)											Int idx5 = ::Math_obj::round(_hx_tmp46);
HXDLIN( 124)											Int byteOffset29 = (this6->byteOffset + idx5);
HXDLIN( 124)											Int _hx_tmp47 = ::__hxcpp_memory_get_byte(this6->buffer->b,byteOffset29);
HXDLIN( 124)											Int _hx_tmp48 = ((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp47 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 124)											Int _hx_tmp49 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 124)											destPixel = ((int)_hx_tmp48 | (int)_hx_tmp49);
            										}
            									}
            								}
            							}
HXLINE( 126)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 128)									value = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
            								}
            								break;
            								case (int)1: {
HXLINE( 129)									value = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
            								}
            								break;
            								case (int)2: {
HXLINE( 130)									value = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
            								}
            								break;
            								case (int)3: {
HXLINE( 131)									value = ((int)srcPixel & (int)(int)255);
            								}
            								break;
            							}
HXLINE( 135)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 137)									Int _hx_tmp50 = ((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 137)									Int _hx_tmp51 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 137)									destPixel = ((int)_hx_tmp50 | (int)_hx_tmp51);
            								}
            								break;
            								case (int)1: {
HXLINE( 138)									Int _hx_tmp52 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 138)									Int _hx_tmp53 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 138)									destPixel = ((int)_hx_tmp52 | (int)_hx_tmp53);
            								}
            								break;
            								case (int)2: {
HXLINE( 139)									Int _hx_tmp54 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value & (int)(int)255) << (int)(int)8));
HXDLIN( 139)									Int _hx_tmp55 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 139)									destPixel = ((int)_hx_tmp54 | (int)_hx_tmp55);
            								}
            								break;
            								case (int)3: {
HXLINE( 140)									Int _hx_tmp56 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 140)									destPixel = ((int)_hx_tmp56 | (int)((int)value & (int)(int)255));
            								}
            								break;
            							}
HXLINE( 144)							{
HXLINE( 144)								if (destPremultiplied) {
HXLINE( 144)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 144)										Bool _hx_tmp57 = (destPixel != (int)0);
HXDLIN( 144)										if (_hx_tmp57) {
HXLINE( 144)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 144)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 144)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 144)											Int byteOffset30 = (this7->byteOffset + (((int)destPixel & (int)(int)255) * (int)4));
HXDLIN( 144)											 ::Dynamic _hx_tmp58 = ::__hxcpp_memory_get_ui32(this7->buffer->b,byteOffset30);
HXDLIN( 144)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp58;
HXDLIN( 144)											{
HXLINE( 144)												Int _hx_tmp59 = ((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 144)												Int _hx_tmp60 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 144)												destPixel = ((int)_hx_tmp59 | (int)_hx_tmp60);
            											}
            										}
            									}
            								}
HXDLIN( 144)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 144)										{
HXLINE( 144)											HX_VARI( Int,val) = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset31 = (destData->byteOffset + destPosition);
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset31,val);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset32 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset32,val1);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset33 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset33,val2);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val3,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset34 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset34,val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val4,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset35 = (destData->byteOffset + destPosition);
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset35,val4);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset36 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset36,val5);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset37 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset37,val6);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset38 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset38,val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset39 = (destData->byteOffset + destPosition);
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset39,val8);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset40 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset40,val9);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset41 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset41,val10);
            											}
            										}
HXDLIN( 144)										{
HXLINE( 144)											HX_VARI_NAME( Int,val11,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 144)											{
HXLINE( 144)												Int byteOffset42 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 144)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset42,val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 146)							hx::AddEq(srcPosition,(int)4);
HXLINE( 147)							hx::AddEq(destPosition,(int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 155)		image->dirty = true;
HXLINE( 156)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< Bool >  __o_mergeAlpha){
Bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","copyPixels",0x95aa37f0,"lime.graphics.utils.ImageDataUtil.copyPixels","lime/graphics/utils/ImageDataUtil.hx",161,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaImage,"alphaImage")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE( 164)		Bool _hx_tmp = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 164)		if (_hx_tmp) {
HXLINE( 164)			 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(image);
HXDLIN( 164)			 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(sourceImage);
HXDLIN( 164)			 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(sourceRect);
HXDLIN( 164)			 ::hx::Object * _hx_tmp4 = hx::DynamicPtr(destPoint);
HXDLIN( 164)			 ::hx::Object * _hx_tmp5 = hx::DynamicPtr(alphaImage);
HXDLIN( 164)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_copy_pixels(_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,hx::DynamicPtr(alphaPoint),mergeAlpha);
            		}
            		else {
HXLINE( 168)			HX_VARI(  ::lime::utils::ArrayBufferView,sourceData) = sourceImage->buffer->data;
HXLINE( 169)			HX_VARI(  ::lime::utils::ArrayBufferView,destData) = image->buffer->data;
HXLINE( 171)			Bool _hx_tmp6;
HXDLIN( 171)			Bool _hx_tmp7 = hx::IsNotNull( sourceData );
HXDLIN( 171)			if (_hx_tmp7) {
HXLINE( 171)				_hx_tmp6 = hx::IsNull( destData );
            			}
            			else {
HXLINE( 171)				_hx_tmp6 = true;
            			}
HXDLIN( 171)			if (_hx_tmp6) {
HXLINE( 171)				return;
            			}
HXLINE( 173)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,sourceView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(sourceImage,sourceRect);
HXLINE( 174)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,destView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(image, ::lime::math::Rectangle_obj::__new(destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 176)			HX_VARI( Int,sourceFormat) = sourceImage->buffer->format;
HXLINE( 177)			HX_VARI( Int,destFormat) = image->buffer->format;
HXLINE( 178)			HX_VARI( Bool,sourcePremultiplied) = sourceImage->buffer->premultiplied;
HXLINE( 179)			HX_VARI( Bool,destPremultiplied) = image->buffer->premultiplied;
HXLINE( 181)			HX_VAR( Int,sourcePosition);
HXDLIN( 181)			HX_VAR( Int,destPosition);
HXDLIN( 181)			HX_VAR( Int,sourcePixel);
HXLINE( 183)			Bool _hx_tmp8;
HXDLIN( 183)			if (!(!(mergeAlpha))) {
HXLINE( 183)				_hx_tmp8 = !(sourceImage->get_transparent());
            			}
            			else {
HXLINE( 183)				_hx_tmp8 = true;
            			}
HXDLIN( 183)			if (_hx_tmp8) {
HXLINE( 185)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 185)				HX_VARI( Int,_g) = destView->height;
HXDLIN( 185)				while((_g1 < _g)){
HXLINE( 185)					HX_VARI( Int,y) = _g1++;
HXLINE( 187)					sourcePosition = (sourceView->offset + (sourceView->stride * y));
HXLINE( 188)					destPosition = (destView->offset + (destView->stride * y));
HXLINE( 190)					{
HXLINE( 190)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 190)						HX_VARI( Int,_g2) = destView->width;
HXDLIN( 190)						while((_g3 < _g2)){
HXLINE( 190)							++_g3;
HXLINE( 192)							{
HXLINE( 192)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 192)										Int byteOffset = (sourceData->byteOffset + sourcePosition);
HXDLIN( 192)										Int _hx_tmp9 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset);
HXDLIN( 192)										Int r = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN( 192)										Int byteOffset1 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 192)										Int _hx_tmp10 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset1);
HXDLIN( 192)										Int g = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 192)										Int byteOffset2 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 192)										Int _hx_tmp11 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset2);
HXDLIN( 192)										Int b = ((int)_hx_tmp11 & (int)(int)255);
HXDLIN( 192)										Int byteOffset3 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 192)										Int _hx_tmp12 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset3);
HXDLIN( 192)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp12 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 192)										Int byteOffset4 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 192)										Int _hx_tmp13 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset4);
HXDLIN( 192)										Int r1 = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN( 192)										Int byteOffset5 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 192)										Int _hx_tmp14 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset5);
HXDLIN( 192)										Int g1 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 192)										Int byteOffset6 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 192)										Int _hx_tmp15 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset6);
HXDLIN( 192)										Int b1 = ((int)_hx_tmp15 & (int)(int)255);
HXDLIN( 192)										Int byteOffset7 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 192)										Int _hx_tmp16 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset7);
HXDLIN( 192)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp16 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 192)										Int byteOffset8 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 192)										Int _hx_tmp17 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset8);
HXDLIN( 192)										Int r2 = ((int)_hx_tmp17 & (int)(int)255);
HXDLIN( 192)										Int byteOffset9 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 192)										Int _hx_tmp18 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset9);
HXDLIN( 192)										Int g2 = ((int)_hx_tmp18 & (int)(int)255);
HXDLIN( 192)										Int byteOffset10 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 192)										Int _hx_tmp19 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset10);
HXDLIN( 192)										Int b2 = ((int)_hx_tmp19 & (int)(int)255);
HXDLIN( 192)										Int byteOffset11 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 192)										Int _hx_tmp20 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset11);
HXDLIN( 192)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp20 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 192)								if (sourcePremultiplied) {
HXLINE( 192)									Bool _hx_tmp21;
HXDLIN( 192)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 192)										_hx_tmp21 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 192)										_hx_tmp21 = false;
            									}
HXDLIN( 192)									if (_hx_tmp21) {
HXLINE( 192)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 192)										{
HXLINE( 192)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 192)											Float _hx_tmp22 = (((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 192)											Int idx = ::Math_obj::round(_hx_tmp22);
HXDLIN( 192)											Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN( 192)											Int _hx_tmp23 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN( 192)											Int r3 = ((int)_hx_tmp23 & (int)(int)255);
HXDLIN( 192)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 192)											Float _hx_tmp24 = (((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 192)											Int idx1 = ::Math_obj::round(_hx_tmp24);
HXDLIN( 192)											Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN( 192)											Int _hx_tmp25 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN( 192)											Int g3 = ((int)_hx_tmp25 & (int)(int)255);
HXDLIN( 192)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 192)											Float _hx_tmp26 = (((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 192)											Int idx2 = ::Math_obj::round(_hx_tmp26);
HXDLIN( 192)											Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN( 192)											Int _hx_tmp27 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN( 192)											Int _hx_tmp28 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp27 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 192)											Int _hx_tmp29 = ((int)((int)sourcePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 192)											sourcePixel = ((int)_hx_tmp28 | (int)_hx_tmp29);
            										}
            									}
            								}
            							}
HXLINE( 193)							{
HXLINE( 193)								if (destPremultiplied) {
HXLINE( 193)									if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 193)										Bool _hx_tmp30 = (sourcePixel != (int)0);
HXDLIN( 193)										if (_hx_tmp30) {
HXLINE( 193)											sourcePixel = (int)0;
            										}
            									}
            									else {
HXLINE( 193)										if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 193)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 193)											Int byteOffset15 = (this4->byteOffset + (((int)sourcePixel & (int)(int)255) * (int)4));
HXDLIN( 193)											 ::Dynamic _hx_tmp31 = ::__hxcpp_memory_get_ui32(this4->buffer->b,byteOffset15);
HXDLIN( 193)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp31;
HXDLIN( 193)											{
HXLINE( 193)												Int _hx_tmp32 = ((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 193)												Int _hx_tmp33 = ((int)((int)sourcePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 193)												sourcePixel = ((int)_hx_tmp32 | (int)_hx_tmp33);
            											}
            										}
            									}
            								}
HXDLIN( 193)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 193)										{
HXLINE( 193)											HX_VARI( Int,val) = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset16 = (destData->byteOffset + destPosition);
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset16,val);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset17 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset17,val1);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset18 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset18,val2);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val3,"val") = ((int)sourcePixel & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset19 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset19,val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val4,"val") = ((int)sourcePixel & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset20 = (destData->byteOffset + destPosition);
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset20,val4);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset21 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset21,val5);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset22 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset22,val6);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset23 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset23,val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset24 = (destData->byteOffset + destPosition);
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset24,val8);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset25 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset25,val9);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset26 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset26,val10);
            											}
            										}
HXDLIN( 193)										{
HXLINE( 193)											HX_VARI_NAME( Int,val11,"val") = ((int)sourcePixel & (int)(int)255);
HXDLIN( 193)											{
HXLINE( 193)												Int byteOffset27 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 193)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset27,val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 195)							hx::AddEq(sourcePosition,(int)4);
HXLINE( 196)							hx::AddEq(destPosition,(int)4);
            						}
            					}
            				}
            			}
            			else {
HXLINE( 204)				HX_VAR( Float,sourceAlpha);
HXDLIN( 204)				HX_VAR( Float,destAlpha);
HXDLIN( 204)				HX_VAR( Float,oneMinusSourceAlpha);
HXDLIN( 204)				HX_VAR( Float,blendAlpha);
HXLINE( 205)				HX_VAR( Int,destPixel);
HXLINE( 207)				Bool _hx_tmp34 = hx::IsNull( alphaImage );
HXDLIN( 207)				if (_hx_tmp34) {
HXLINE( 209)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 209)					HX_VARI_NAME( Int,_g4,"_g") = destView->height;
HXDLIN( 209)					while((_g11 < _g4)){
HXLINE( 209)						HX_VARI_NAME( Int,y1,"y") = _g11++;
HXLINE( 211)						sourcePosition = (sourceView->offset + (sourceView->stride * y1));
HXLINE( 212)						destPosition = (destView->offset + (destView->stride * y1));
HXLINE( 214)						{
HXLINE( 214)							HX_VARI_NAME( Int,_g31,"_g3") = (int)0;
HXDLIN( 214)							HX_VARI_NAME( Int,_g21,"_g2") = destView->width;
HXDLIN( 214)							while((_g31 < _g21)){
HXLINE( 214)								++_g31;
HXLINE( 216)								{
HXLINE( 216)									switch((int)(sourceFormat)){
            										case (int)0: {
HXLINE( 216)											Int byteOffset28 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 216)											Int _hx_tmp35 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset28);
HXDLIN( 216)											Int r4 = ((int)_hx_tmp35 & (int)(int)255);
HXDLIN( 216)											Int byteOffset29 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 216)											Int _hx_tmp36 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset29);
HXDLIN( 216)											Int g4 = ((int)_hx_tmp36 & (int)(int)255);
HXDLIN( 216)											Int byteOffset30 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 216)											Int _hx_tmp37 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset30);
HXDLIN( 216)											Int b3 = ((int)_hx_tmp37 & (int)(int)255);
HXDLIN( 216)											Int byteOffset31 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 216)											Int _hx_tmp38 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset31);
HXDLIN( 216)											sourcePixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp38 & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 216)											Int byteOffset32 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 216)											Int _hx_tmp39 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset32);
HXDLIN( 216)											Int r5 = ((int)_hx_tmp39 & (int)(int)255);
HXDLIN( 216)											Int byteOffset33 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 216)											Int _hx_tmp40 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset33);
HXDLIN( 216)											Int g5 = ((int)_hx_tmp40 & (int)(int)255);
HXDLIN( 216)											Int byteOffset34 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 216)											Int _hx_tmp41 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset34);
HXDLIN( 216)											Int b4 = ((int)_hx_tmp41 & (int)(int)255);
HXDLIN( 216)											Int byteOffset35 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 216)											Int _hx_tmp42 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset35);
HXDLIN( 216)											sourcePixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp42 & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 216)											Int byteOffset36 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 216)											Int _hx_tmp43 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset36);
HXDLIN( 216)											Int r6 = ((int)_hx_tmp43 & (int)(int)255);
HXDLIN( 216)											Int byteOffset37 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 216)											Int _hx_tmp44 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset37);
HXDLIN( 216)											Int g6 = ((int)_hx_tmp44 & (int)(int)255);
HXDLIN( 216)											Int byteOffset38 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 216)											Int _hx_tmp45 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset38);
HXDLIN( 216)											Int b5 = ((int)_hx_tmp45 & (int)(int)255);
HXDLIN( 216)											Int byteOffset39 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 216)											Int _hx_tmp46 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset39);
HXDLIN( 216)											sourcePixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp46 & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXDLIN( 216)									if (sourcePremultiplied) {
HXLINE( 216)										Bool _hx_tmp47;
HXDLIN( 216)										if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 216)											_hx_tmp47 = (((int)sourcePixel & (int)(int)255) != (int)255);
            										}
            										else {
HXLINE( 216)											_hx_tmp47 = false;
            										}
HXDLIN( 216)										if (_hx_tmp47) {
HXLINE( 216)											::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 216)											{
HXLINE( 216)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 216)												Float _hx_tmp48 = (((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 216)												Int idx3 = ::Math_obj::round(_hx_tmp48);
HXDLIN( 216)												Int byteOffset40 = (this5->byteOffset + idx3);
HXDLIN( 216)												Int _hx_tmp49 = ::__hxcpp_memory_get_byte(this5->buffer->b,byteOffset40);
HXDLIN( 216)												Int r7 = ((int)_hx_tmp49 & (int)(int)255);
HXDLIN( 216)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 216)												Float _hx_tmp50 = (((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 216)												Int idx4 = ::Math_obj::round(_hx_tmp50);
HXDLIN( 216)												Int byteOffset41 = (this6->byteOffset + idx4);
HXDLIN( 216)												Int _hx_tmp51 = ::__hxcpp_memory_get_byte(this6->buffer->b,byteOffset41);
HXDLIN( 216)												Int g7 = ((int)_hx_tmp51 & (int)(int)255);
HXDLIN( 216)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 216)												Float _hx_tmp52 = (((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 216)												Int idx5 = ::Math_obj::round(_hx_tmp52);
HXDLIN( 216)												Int byteOffset42 = (this7->byteOffset + idx5);
HXDLIN( 216)												Int _hx_tmp53 = ::__hxcpp_memory_get_byte(this7->buffer->b,byteOffset42);
HXDLIN( 216)												Int _hx_tmp54 = ((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp53 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 216)												Int _hx_tmp55 = ((int)((int)sourcePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 216)												sourcePixel = ((int)_hx_tmp54 | (int)_hx_tmp55);
            											}
            										}
            									}
            								}
HXLINE( 217)								{
HXLINE( 217)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE( 217)											Int byteOffset43 = (destData->byteOffset + destPosition);
HXDLIN( 217)											Int _hx_tmp56 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset43);
HXDLIN( 217)											Int r8 = ((int)_hx_tmp56 & (int)(int)255);
HXDLIN( 217)											Int byteOffset44 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 217)											Int _hx_tmp57 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset44);
HXDLIN( 217)											Int g8 = ((int)_hx_tmp57 & (int)(int)255);
HXDLIN( 217)											Int byteOffset45 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 217)											Int _hx_tmp58 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset45);
HXDLIN( 217)											Int b6 = ((int)_hx_tmp58 & (int)(int)255);
HXDLIN( 217)											Int byteOffset46 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 217)											Int _hx_tmp59 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset46);
HXDLIN( 217)											destPixel = ((int)((int)((int)((int)((int)r8 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g8 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp59 & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 217)											Int byteOffset47 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 217)											Int _hx_tmp60 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset47);
HXDLIN( 217)											Int r9 = ((int)_hx_tmp60 & (int)(int)255);
HXDLIN( 217)											Int byteOffset48 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 217)											Int _hx_tmp61 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset48);
HXDLIN( 217)											Int g9 = ((int)_hx_tmp61 & (int)(int)255);
HXDLIN( 217)											Int byteOffset49 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 217)											Int _hx_tmp62 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset49);
HXDLIN( 217)											Int b7 = ((int)_hx_tmp62 & (int)(int)255);
HXDLIN( 217)											Int byteOffset50 = (destData->byteOffset + destPosition);
HXDLIN( 217)											Int _hx_tmp63 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset50);
HXDLIN( 217)											destPixel = ((int)((int)((int)((int)((int)r9 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g9 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b7 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp63 & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 217)											Int byteOffset51 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 217)											Int _hx_tmp64 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset51);
HXDLIN( 217)											Int r10 = ((int)_hx_tmp64 & (int)(int)255);
HXDLIN( 217)											Int byteOffset52 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 217)											Int _hx_tmp65 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset52);
HXDLIN( 217)											Int g10 = ((int)_hx_tmp65 & (int)(int)255);
HXDLIN( 217)											Int byteOffset53 = (destData->byteOffset + destPosition);
HXDLIN( 217)											Int _hx_tmp66 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset53);
HXDLIN( 217)											Int b8 = ((int)_hx_tmp66 & (int)(int)255);
HXDLIN( 217)											Int byteOffset54 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 217)											Int _hx_tmp67 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset54);
HXDLIN( 217)											destPixel = ((int)((int)((int)((int)((int)r10 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g10 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b8 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp67 & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXDLIN( 217)									if (destPremultiplied) {
HXLINE( 217)										Bool _hx_tmp68;
HXDLIN( 217)										if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 217)											_hx_tmp68 = (((int)destPixel & (int)(int)255) != (int)255);
            										}
            										else {
HXLINE( 217)											_hx_tmp68 = false;
            										}
HXDLIN( 217)										if (_hx_tmp68) {
HXLINE( 217)											::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 217)											{
HXLINE( 217)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this8,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 217)												Float _hx_tmp69 = (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 217)												Int idx6 = ::Math_obj::round(_hx_tmp69);
HXDLIN( 217)												Int byteOffset55 = (this8->byteOffset + idx6);
HXDLIN( 217)												Int _hx_tmp70 = ::__hxcpp_memory_get_byte(this8->buffer->b,byteOffset55);
HXDLIN( 217)												Int r11 = ((int)_hx_tmp70 & (int)(int)255);
HXDLIN( 217)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this9,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 217)												Float _hx_tmp71 = (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 217)												Int idx7 = ::Math_obj::round(_hx_tmp71);
HXDLIN( 217)												Int byteOffset56 = (this9->byteOffset + idx7);
HXDLIN( 217)												Int _hx_tmp72 = ::__hxcpp_memory_get_byte(this9->buffer->b,byteOffset56);
HXDLIN( 217)												Int g11 = ((int)_hx_tmp72 & (int)(int)255);
HXDLIN( 217)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this10,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 217)												Float _hx_tmp73 = (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 217)												Int idx8 = ::Math_obj::round(_hx_tmp73);
HXDLIN( 217)												Int byteOffset57 = (this10->byteOffset + idx8);
HXDLIN( 217)												Int _hx_tmp74 = ::__hxcpp_memory_get_byte(this10->buffer->b,byteOffset57);
HXDLIN( 217)												Int _hx_tmp75 = ((int)((int)((int)((int)r11 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g11 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp74 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 217)												Int _hx_tmp76 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 217)												destPixel = ((int)_hx_tmp75 | (int)_hx_tmp76);
            											}
            										}
            									}
            								}
HXLINE( 219)								sourceAlpha = ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 220)								destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 221)								oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 222)								blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 224)								if ((blendAlpha == (int)0)) {
HXLINE( 226)									destPixel = (int)0;
            								}
            								else {
HXLINE( 230)									{
HXLINE( 230)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this11,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 230)										Int idx9 = ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha));
HXDLIN( 230)										Int byteOffset58 = (this11->byteOffset + idx9);
HXDLIN( 230)										Int _hx_tmp77 = ::__hxcpp_memory_get_byte(this11->buffer->b,byteOffset58);
HXDLIN( 230)										HX_VARI( Int,value) = ((int)_hx_tmp77 & (int)(int)255);
HXDLIN( 230)										Int _hx_tmp78 = ((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 230)										Int _hx_tmp79 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 230)										destPixel = ((int)_hx_tmp78 | (int)_hx_tmp79);
            									}
HXLINE( 231)									{
HXLINE( 231)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this12,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 231)										Int idx10 = ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha));
HXDLIN( 231)										Int byteOffset59 = (this12->byteOffset + idx10);
HXDLIN( 231)										Int _hx_tmp80 = ::__hxcpp_memory_get_byte(this12->buffer->b,byteOffset59);
HXDLIN( 231)										HX_VARI_NAME( Int,value1,"value") = ((int)_hx_tmp80 & (int)(int)255);
HXDLIN( 231)										Int _hx_tmp81 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 231)										Int _hx_tmp82 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 231)										destPixel = ((int)_hx_tmp81 | (int)_hx_tmp82);
            									}
HXLINE( 232)									{
HXLINE( 232)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this13,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 232)										Int idx11 = ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha));
HXDLIN( 232)										Int byteOffset60 = (this13->byteOffset + idx11);
HXDLIN( 232)										Int _hx_tmp83 = ::__hxcpp_memory_get_byte(this13->buffer->b,byteOffset60);
HXDLIN( 232)										HX_VARI_NAME( Int,value2,"value") = ((int)_hx_tmp83 & (int)(int)255);
HXDLIN( 232)										Int _hx_tmp84 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8));
HXDLIN( 232)										Int _hx_tmp85 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 232)										destPixel = ((int)_hx_tmp84 | (int)_hx_tmp85);
            									}
HXLINE( 233)									{
HXLINE( 233)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this14,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 233)										Int idx12 = ::Math_obj::round((blendAlpha * ((Float)255.0)));
HXDLIN( 233)										Int byteOffset61 = (this14->byteOffset + idx12);
HXDLIN( 233)										Int _hx_tmp86 = ::__hxcpp_memory_get_byte(this14->buffer->b,byteOffset61);
HXDLIN( 233)										HX_VARI_NAME( Int,value3,"value") = ((int)_hx_tmp86 & (int)(int)255);
HXDLIN( 233)										Int _hx_tmp87 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 233)										destPixel = ((int)_hx_tmp87 | (int)((int)value3 & (int)(int)255));
            									}
            								}
HXLINE( 237)								{
HXLINE( 237)									if (destPremultiplied) {
HXLINE( 237)										if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 237)											Bool _hx_tmp88 = (destPixel != (int)0);
HXDLIN( 237)											if (_hx_tmp88) {
HXLINE( 237)												destPixel = (int)0;
            											}
            										}
            										else {
HXLINE( 237)											if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 237)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this15,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 237)												Int byteOffset62 = (this15->byteOffset + (((int)destPixel & (int)(int)255) * (int)4));
HXDLIN( 237)												 ::Dynamic _hx_tmp89 = ::__hxcpp_memory_get_ui32(this15->buffer->b,byteOffset62);
HXDLIN( 237)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp89;
HXDLIN( 237)												{
HXLINE( 237)													Int _hx_tmp90 = ((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 237)													Int _hx_tmp91 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 237)													destPixel = ((int)_hx_tmp90 | (int)_hx_tmp91);
            												}
            											}
            										}
            									}
HXDLIN( 237)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val12,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset63 = (destData->byteOffset + destPosition);
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset63,val12);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val13,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset64 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset64,val13);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val14,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset65 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset65,val14);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val15,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset66 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset66,val15);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val16,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset67 = (destData->byteOffset + destPosition);
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset67,val16);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val17,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset68 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset68,val17);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val18,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset69 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset69,val18);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val19,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset70 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset70,val19);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val20,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset71 = (destData->byteOffset + destPosition);
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset71,val20);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val21,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset72 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset72,val21);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val22,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset73 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset73,val22);
            												}
            											}
HXDLIN( 237)											{
HXLINE( 237)												HX_VARI_NAME( Int,val23,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 237)												{
HXLINE( 237)													Int byteOffset74 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 237)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset74,val23);
            												}
            											}
            										}
            										break;
            									}
            								}
HXLINE( 239)								hx::AddEq(sourcePosition,(int)4);
HXLINE( 240)								hx::AddEq(destPosition,(int)4);
            							}
            						}
            					}
            				}
            				else {
HXLINE( 248)					Bool _hx_tmp92 = hx::IsNull( alphaPoint );
HXDLIN( 248)					if (_hx_tmp92) {
HXLINE( 248)						alphaPoint =  ::lime::math::Vector2_obj::__new(null(),null());
            					}
HXLINE( 250)					HX_VARI(  ::lime::utils::ArrayBufferView,alphaData) = alphaImage->buffer->data;
HXLINE( 251)					HX_VARI( Int,alphaFormat) = alphaImage->buffer->format;
HXLINE( 252)					HX_VARI( Bool,alphaPremultiplied) = alphaImage->buffer->premultiplied;
HXLINE( 254)					HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,alphaView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(alphaImage, ::lime::math::Rectangle_obj::__new(alphaPoint->x,alphaPoint->y,destView->width,destView->height));
HXLINE( 255)					HX_VAR( Int,alphaPosition);
HXDLIN( 255)					HX_VAR( Int,alphaPixel);
HXLINE( 257)					{
HXLINE( 257)						HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 257)						HX_VARI_NAME( Int,_g5,"_g") = alphaView->height;
HXDLIN( 257)						while((_g12 < _g5)){
HXLINE( 257)							HX_VARI_NAME( Int,y2,"y") = _g12++;
HXLINE( 259)							sourcePosition = (sourceView->offset + (sourceView->stride * y2));
HXLINE( 260)							destPosition = (destView->offset + (destView->stride * y2));
HXLINE( 261)							alphaPosition = (alphaView->offset + (alphaView->stride * y2));
HXLINE( 263)							{
HXLINE( 263)								HX_VARI_NAME( Int,_g32,"_g3") = (int)0;
HXDLIN( 263)								HX_VARI_NAME( Int,_g22,"_g2") = alphaView->width;
HXDLIN( 263)								while((_g32 < _g22)){
HXLINE( 263)									++_g32;
HXLINE( 265)									{
HXLINE( 265)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 265)												Int byteOffset75 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 265)												Int _hx_tmp93 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset75);
HXDLIN( 265)												Int r12 = ((int)_hx_tmp93 & (int)(int)255);
HXDLIN( 265)												Int byteOffset76 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 265)												Int _hx_tmp94 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset76);
HXDLIN( 265)												Int g12 = ((int)_hx_tmp94 & (int)(int)255);
HXDLIN( 265)												Int byteOffset77 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 265)												Int _hx_tmp95 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset77);
HXDLIN( 265)												Int b9 = ((int)_hx_tmp95 & (int)(int)255);
HXDLIN( 265)												Int byteOffset78 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 265)												Int _hx_tmp96 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset78);
HXDLIN( 265)												sourcePixel = ((int)((int)((int)((int)((int)r12 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g12 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b9 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp96 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 265)												Int byteOffset79 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 265)												Int _hx_tmp97 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset79);
HXDLIN( 265)												Int r13 = ((int)_hx_tmp97 & (int)(int)255);
HXDLIN( 265)												Int byteOffset80 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 265)												Int _hx_tmp98 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset80);
HXDLIN( 265)												Int g13 = ((int)_hx_tmp98 & (int)(int)255);
HXDLIN( 265)												Int byteOffset81 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 265)												Int _hx_tmp99 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset81);
HXDLIN( 265)												Int b10 = ((int)_hx_tmp99 & (int)(int)255);
HXDLIN( 265)												Int byteOffset82 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 265)												Int _hx_tmp100 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset82);
HXDLIN( 265)												sourcePixel = ((int)((int)((int)((int)((int)r13 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g13 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b10 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp100 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 265)												Int byteOffset83 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 265)												Int _hx_tmp101 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset83);
HXDLIN( 265)												Int r14 = ((int)_hx_tmp101 & (int)(int)255);
HXDLIN( 265)												Int byteOffset84 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 265)												Int _hx_tmp102 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset84);
HXDLIN( 265)												Int g14 = ((int)_hx_tmp102 & (int)(int)255);
HXDLIN( 265)												Int byteOffset85 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 265)												Int _hx_tmp103 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset85);
HXDLIN( 265)												Int b11 = ((int)_hx_tmp103 & (int)(int)255);
HXDLIN( 265)												Int byteOffset86 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 265)												Int _hx_tmp104 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset86);
HXDLIN( 265)												sourcePixel = ((int)((int)((int)((int)((int)r14 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g14 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b11 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp104 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 265)										if (sourcePremultiplied) {
HXLINE( 265)											Bool _hx_tmp105;
HXDLIN( 265)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 265)												_hx_tmp105 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 265)												_hx_tmp105 = false;
            											}
HXDLIN( 265)											if (_hx_tmp105) {
HXLINE( 265)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 265)												{
HXLINE( 265)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this16,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 265)													Float _hx_tmp106 = (((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 265)													Int idx13 = ::Math_obj::round(_hx_tmp106);
HXDLIN( 265)													Int byteOffset87 = (this16->byteOffset + idx13);
HXDLIN( 265)													Int _hx_tmp107 = ::__hxcpp_memory_get_byte(this16->buffer->b,byteOffset87);
HXDLIN( 265)													Int r15 = ((int)_hx_tmp107 & (int)(int)255);
HXDLIN( 265)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this17,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 265)													Float _hx_tmp108 = (((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 265)													Int idx14 = ::Math_obj::round(_hx_tmp108);
HXDLIN( 265)													Int byteOffset88 = (this17->byteOffset + idx14);
HXDLIN( 265)													Int _hx_tmp109 = ::__hxcpp_memory_get_byte(this17->buffer->b,byteOffset88);
HXDLIN( 265)													Int g15 = ((int)_hx_tmp109 & (int)(int)255);
HXDLIN( 265)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this18,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 265)													Float _hx_tmp110 = (((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 265)													Int idx15 = ::Math_obj::round(_hx_tmp110);
HXDLIN( 265)													Int byteOffset89 = (this18->byteOffset + idx15);
HXDLIN( 265)													Int _hx_tmp111 = ::__hxcpp_memory_get_byte(this18->buffer->b,byteOffset89);
HXDLIN( 265)													Int _hx_tmp112 = ((int)((int)((int)((int)r15 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g15 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp111 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 265)													Int _hx_tmp113 = ((int)((int)sourcePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 265)													sourcePixel = ((int)_hx_tmp112 | (int)_hx_tmp113);
            												}
            											}
            										}
            									}
HXLINE( 266)									{
HXLINE( 266)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 266)												Int byteOffset90 = (destData->byteOffset + destPosition);
HXDLIN( 266)												Int _hx_tmp114 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset90);
HXDLIN( 266)												Int r16 = ((int)_hx_tmp114 & (int)(int)255);
HXDLIN( 266)												Int byteOffset91 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 266)												Int _hx_tmp115 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset91);
HXDLIN( 266)												Int g16 = ((int)_hx_tmp115 & (int)(int)255);
HXDLIN( 266)												Int byteOffset92 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 266)												Int _hx_tmp116 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset92);
HXDLIN( 266)												Int b12 = ((int)_hx_tmp116 & (int)(int)255);
HXDLIN( 266)												Int byteOffset93 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 266)												Int _hx_tmp117 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset93);
HXDLIN( 266)												destPixel = ((int)((int)((int)((int)((int)r16 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g16 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b12 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp117 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 266)												Int byteOffset94 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 266)												Int _hx_tmp118 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset94);
HXDLIN( 266)												Int r17 = ((int)_hx_tmp118 & (int)(int)255);
HXDLIN( 266)												Int byteOffset95 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 266)												Int _hx_tmp119 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset95);
HXDLIN( 266)												Int g17 = ((int)_hx_tmp119 & (int)(int)255);
HXDLIN( 266)												Int byteOffset96 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 266)												Int _hx_tmp120 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset96);
HXDLIN( 266)												Int b13 = ((int)_hx_tmp120 & (int)(int)255);
HXDLIN( 266)												Int byteOffset97 = (destData->byteOffset + destPosition);
HXDLIN( 266)												Int _hx_tmp121 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset97);
HXDLIN( 266)												destPixel = ((int)((int)((int)((int)((int)r17 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g17 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b13 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp121 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 266)												Int byteOffset98 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 266)												Int _hx_tmp122 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset98);
HXDLIN( 266)												Int r18 = ((int)_hx_tmp122 & (int)(int)255);
HXDLIN( 266)												Int byteOffset99 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 266)												Int _hx_tmp123 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset99);
HXDLIN( 266)												Int g18 = ((int)_hx_tmp123 & (int)(int)255);
HXDLIN( 266)												Int byteOffset100 = (destData->byteOffset + destPosition);
HXDLIN( 266)												Int _hx_tmp124 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset100);
HXDLIN( 266)												Int b14 = ((int)_hx_tmp124 & (int)(int)255);
HXDLIN( 266)												Int byteOffset101 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 266)												Int _hx_tmp125 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset101);
HXDLIN( 266)												destPixel = ((int)((int)((int)((int)((int)r18 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g18 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b14 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp125 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 266)										if (destPremultiplied) {
HXLINE( 266)											Bool _hx_tmp126;
HXDLIN( 266)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 266)												_hx_tmp126 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 266)												_hx_tmp126 = false;
            											}
HXDLIN( 266)											if (_hx_tmp126) {
HXLINE( 266)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 266)												{
HXLINE( 266)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this19,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 266)													Float _hx_tmp127 = (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 266)													Int idx16 = ::Math_obj::round(_hx_tmp127);
HXDLIN( 266)													Int byteOffset102 = (this19->byteOffset + idx16);
HXDLIN( 266)													Int _hx_tmp128 = ::__hxcpp_memory_get_byte(this19->buffer->b,byteOffset102);
HXDLIN( 266)													Int r19 = ((int)_hx_tmp128 & (int)(int)255);
HXDLIN( 266)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this20,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 266)													Float _hx_tmp129 = (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 266)													Int idx17 = ::Math_obj::round(_hx_tmp129);
HXDLIN( 266)													Int byteOffset103 = (this20->byteOffset + idx17);
HXDLIN( 266)													Int _hx_tmp130 = ::__hxcpp_memory_get_byte(this20->buffer->b,byteOffset103);
HXDLIN( 266)													Int g19 = ((int)_hx_tmp130 & (int)(int)255);
HXDLIN( 266)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this21,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 266)													Float _hx_tmp131 = (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 266)													Int idx18 = ::Math_obj::round(_hx_tmp131);
HXDLIN( 266)													Int byteOffset104 = (this21->byteOffset + idx18);
HXDLIN( 266)													Int _hx_tmp132 = ::__hxcpp_memory_get_byte(this21->buffer->b,byteOffset104);
HXDLIN( 266)													Int _hx_tmp133 = ((int)((int)((int)((int)r19 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g19 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp132 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 266)													Int _hx_tmp134 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 266)													destPixel = ((int)_hx_tmp133 | (int)_hx_tmp134);
            												}
            											}
            										}
            									}
HXLINE( 267)									{
HXLINE( 267)										switch((int)(alphaFormat)){
            											case (int)0: {
HXLINE( 267)												Int byteOffset105 = (alphaData->byteOffset + alphaPosition);
HXDLIN( 267)												Int _hx_tmp135 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset105);
HXDLIN( 267)												Int r20 = ((int)_hx_tmp135 & (int)(int)255);
HXDLIN( 267)												Int byteOffset106 = (alphaData->byteOffset + (alphaPosition + (int)1));
HXDLIN( 267)												Int _hx_tmp136 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset106);
HXDLIN( 267)												Int g20 = ((int)_hx_tmp136 & (int)(int)255);
HXDLIN( 267)												Int byteOffset107 = (alphaData->byteOffset + (alphaPosition + (int)2));
HXDLIN( 267)												Int _hx_tmp137 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset107);
HXDLIN( 267)												Int b15 = ((int)_hx_tmp137 & (int)(int)255);
HXDLIN( 267)												Int byteOffset108 = (alphaData->byteOffset + (alphaPosition + (int)3));
HXDLIN( 267)												Int _hx_tmp138 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset108);
HXDLIN( 267)												alphaPixel = ((int)((int)((int)((int)((int)r20 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g20 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b15 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp138 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 267)												Int byteOffset109 = (alphaData->byteOffset + (alphaPosition + (int)1));
HXDLIN( 267)												Int _hx_tmp139 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset109);
HXDLIN( 267)												Int r21 = ((int)_hx_tmp139 & (int)(int)255);
HXDLIN( 267)												Int byteOffset110 = (alphaData->byteOffset + (alphaPosition + (int)2));
HXDLIN( 267)												Int _hx_tmp140 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset110);
HXDLIN( 267)												Int g21 = ((int)_hx_tmp140 & (int)(int)255);
HXDLIN( 267)												Int byteOffset111 = (alphaData->byteOffset + (alphaPosition + (int)3));
HXDLIN( 267)												Int _hx_tmp141 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset111);
HXDLIN( 267)												Int b16 = ((int)_hx_tmp141 & (int)(int)255);
HXDLIN( 267)												Int byteOffset112 = (alphaData->byteOffset + alphaPosition);
HXDLIN( 267)												Int _hx_tmp142 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset112);
HXDLIN( 267)												alphaPixel = ((int)((int)((int)((int)((int)r21 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g21 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b16 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp142 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 267)												Int byteOffset113 = (alphaData->byteOffset + (alphaPosition + (int)2));
HXDLIN( 267)												Int _hx_tmp143 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset113);
HXDLIN( 267)												Int r22 = ((int)_hx_tmp143 & (int)(int)255);
HXDLIN( 267)												Int byteOffset114 = (alphaData->byteOffset + (alphaPosition + (int)1));
HXDLIN( 267)												Int _hx_tmp144 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset114);
HXDLIN( 267)												Int g22 = ((int)_hx_tmp144 & (int)(int)255);
HXDLIN( 267)												Int byteOffset115 = (alphaData->byteOffset + alphaPosition);
HXDLIN( 267)												Int _hx_tmp145 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset115);
HXDLIN( 267)												Int b17 = ((int)_hx_tmp145 & (int)(int)255);
HXDLIN( 267)												Int byteOffset116 = (alphaData->byteOffset + (alphaPosition + (int)3));
HXDLIN( 267)												Int _hx_tmp146 = ::__hxcpp_memory_get_byte(alphaData->buffer->b,byteOffset116);
HXDLIN( 267)												alphaPixel = ((int)((int)((int)((int)((int)r22 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g22 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b17 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp146 & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 267)										if (alphaPremultiplied) {
HXLINE( 267)											Bool _hx_tmp147;
HXDLIN( 267)											if ((((int)alphaPixel & (int)(int)255) != (int)0)) {
HXLINE( 267)												_hx_tmp147 = (((int)alphaPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 267)												_hx_tmp147 = false;
            											}
HXDLIN( 267)											if (_hx_tmp147) {
HXLINE( 267)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)alphaPixel & (int)(int)255));
HXDLIN( 267)												{
HXLINE( 267)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this22,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 267)													Float _hx_tmp148 = (((int)hx::UShr(alphaPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 267)													Int idx19 = ::Math_obj::round(_hx_tmp148);
HXDLIN( 267)													Int byteOffset117 = (this22->byteOffset + idx19);
HXDLIN( 267)													Int _hx_tmp149 = ::__hxcpp_memory_get_byte(this22->buffer->b,byteOffset117);
HXDLIN( 267)													Int r23 = ((int)_hx_tmp149 & (int)(int)255);
HXDLIN( 267)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this23,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 267)													Float _hx_tmp150 = (((int)hx::UShr(alphaPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 267)													Int idx20 = ::Math_obj::round(_hx_tmp150);
HXDLIN( 267)													Int byteOffset118 = (this23->byteOffset + idx20);
HXDLIN( 267)													Int _hx_tmp151 = ::__hxcpp_memory_get_byte(this23->buffer->b,byteOffset118);
HXDLIN( 267)													Int g23 = ((int)_hx_tmp151 & (int)(int)255);
HXDLIN( 267)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this24,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 267)													Float _hx_tmp152 = (((int)hx::UShr(alphaPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 267)													Int idx21 = ::Math_obj::round(_hx_tmp152);
HXDLIN( 267)													Int byteOffset119 = (this24->byteOffset + idx21);
HXDLIN( 267)													Int _hx_tmp153 = ::__hxcpp_memory_get_byte(this24->buffer->b,byteOffset119);
HXDLIN( 267)													Int _hx_tmp154 = ((int)((int)((int)((int)r23 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g23 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp153 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 267)													Int _hx_tmp155 = ((int)((int)alphaPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 267)													alphaPixel = ((int)_hx_tmp154 | (int)_hx_tmp155);
            												}
            											}
            										}
            									}
HXLINE( 269)									sourceAlpha = ((Float)((int)alphaPixel & (int)(int)255) / (Float)(int)255);
HXLINE( 270)									destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)(int)255);
HXLINE( 271)									oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 272)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 274)									if ((blendAlpha == (int)0)) {
HXLINE( 276)										destPixel = (int)0;
            									}
            									else {
HXLINE( 280)										{
HXLINE( 280)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this25,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 280)											Int idx22 = ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha));
HXDLIN( 280)											Int byteOffset120 = (this25->byteOffset + idx22);
HXDLIN( 280)											Int _hx_tmp156 = ::__hxcpp_memory_get_byte(this25->buffer->b,byteOffset120);
HXDLIN( 280)											HX_VARI_NAME( Int,value4,"value") = ((int)_hx_tmp156 & (int)(int)255);
HXDLIN( 280)											Int _hx_tmp157 = ((int)((int)((int)((int)value4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 280)											Int _hx_tmp158 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 280)											destPixel = ((int)_hx_tmp157 | (int)_hx_tmp158);
            										}
HXLINE( 281)										{
HXLINE( 281)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this26,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 281)											Int idx23 = ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha));
HXDLIN( 281)											Int byteOffset121 = (this26->byteOffset + idx23);
HXDLIN( 281)											Int _hx_tmp159 = ::__hxcpp_memory_get_byte(this26->buffer->b,byteOffset121);
HXDLIN( 281)											HX_VARI_NAME( Int,value5,"value") = ((int)_hx_tmp159 & (int)(int)255);
HXDLIN( 281)											Int _hx_tmp160 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 281)											Int _hx_tmp161 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 281)											destPixel = ((int)_hx_tmp160 | (int)_hx_tmp161);
            										}
HXLINE( 282)										{
HXLINE( 282)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this27,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 282)											Int idx24 = ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha));
HXDLIN( 282)											Int byteOffset122 = (this27->byteOffset + idx24);
HXDLIN( 282)											Int _hx_tmp162 = ::__hxcpp_memory_get_byte(this27->buffer->b,byteOffset122);
HXDLIN( 282)											HX_VARI_NAME( Int,value6,"value") = ((int)_hx_tmp162 & (int)(int)255);
HXDLIN( 282)											Int _hx_tmp163 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value6 & (int)(int)255) << (int)(int)8));
HXDLIN( 282)											Int _hx_tmp164 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 282)											destPixel = ((int)_hx_tmp163 | (int)_hx_tmp164);
            										}
HXLINE( 283)										{
HXLINE( 283)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this28,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 283)											Int idx25 = ::Math_obj::round((blendAlpha * ((Float)255.0)));
HXDLIN( 283)											Int byteOffset123 = (this28->byteOffset + idx25);
HXDLIN( 283)											Int _hx_tmp165 = ::__hxcpp_memory_get_byte(this28->buffer->b,byteOffset123);
HXDLIN( 283)											HX_VARI_NAME( Int,value7,"value") = ((int)_hx_tmp165 & (int)(int)255);
HXDLIN( 283)											Int _hx_tmp166 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 283)											destPixel = ((int)_hx_tmp166 | (int)((int)value7 & (int)(int)255));
            										}
            									}
HXLINE( 287)									{
HXLINE( 287)										if (destPremultiplied) {
HXLINE( 287)											if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 287)												Bool _hx_tmp167 = (destPixel != (int)0);
HXDLIN( 287)												if (_hx_tmp167) {
HXLINE( 287)													destPixel = (int)0;
            												}
            											}
            											else {
HXLINE( 287)												if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 287)													HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this29,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 287)													Int byteOffset124 = (this29->byteOffset + (((int)destPixel & (int)(int)255) * (int)4));
HXDLIN( 287)													 ::Dynamic _hx_tmp168 = ::__hxcpp_memory_get_ui32(this29->buffer->b,byteOffset124);
HXDLIN( 287)													::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp168;
HXDLIN( 287)													{
HXLINE( 287)														Int _hx_tmp169 = ((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 287)														Int _hx_tmp170 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 287)														destPixel = ((int)_hx_tmp169 | (int)_hx_tmp170);
            													}
            												}
            											}
            										}
HXDLIN( 287)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val24,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset125 = (destData->byteOffset + destPosition);
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset125,val24);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val25,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset126 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset126,val25);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val26,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset127 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset127,val26);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val27,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset128 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset128,val27);
            													}
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val28,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset129 = (destData->byteOffset + destPosition);
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset129,val28);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val29,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset130 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset130,val29);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val30,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset131 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset131,val30);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val31,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset132 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset132,val31);
            													}
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val32,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset133 = (destData->byteOffset + destPosition);
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset133,val32);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val33,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset134 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset134,val33);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val34,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset135 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset135,val34);
            													}
            												}
HXDLIN( 287)												{
HXLINE( 287)													HX_VARI_NAME( Int,val35,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 287)													{
HXLINE( 287)														Int byteOffset136 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 287)														::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset136,val35);
            													}
            												}
            											}
            											break;
            										}
            									}
HXLINE( 289)									hx::AddEq(sourcePosition,(int)4);
HXLINE( 290)									hx::AddEq(destPosition,(int)4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 302)		image->dirty = true;
HXLINE( 303)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,Int color,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","fillRect",0x163460f5,"lime.graphics.utils.ImageDataUtil.fillRect","lime/graphics/utils/ImageDataUtil.hx",308,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 310)		HX_VAR( Int,fillColor);
HXLINE( 312)		switch((int)(format)){
            			case (int)1: {
HXLINE( 314)				HX_VARI( Int,argb) = color;
HXDLIN( 314)				HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 314)				HX_VARI( Int,rgba) = this1;
HXDLIN( 314)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 314)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 315)				HX_VARI( Int,bgra) = color;
HXDLIN( 315)				HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 315)				HX_VARI_NAME( Int,rgba1,"rgba") = this2;
HXDLIN( 315)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 315)				fillColor = rgba1;
            			}
            			break;
            			default:{
HXLINE( 316)				fillColor = color;
            			}
            		}
HXLINE( 320)		Bool _hx_tmp = !(image->get_transparent());
HXDLIN( 320)		if (_hx_tmp) {
HXLINE( 322)			Int _hx_tmp1 = ((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN( 322)			Int _hx_tmp2 = ((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN( 322)			fillColor = ((int)((int)_hx_tmp1 | (int)_hx_tmp2) | (int)(int)255);
            		}
HXLINE( 326)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 327)		Bool _hx_tmp3 = hx::IsNull( data );
HXDLIN( 327)		if (_hx_tmp3) {
HXLINE( 327)			return;
            		}
HXLINE( 330)		Bool _hx_tmp4 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 330)		if (_hx_tmp4) {
HXLINE( 330)			 ::hx::Object * _hx_tmp5 = hx::DynamicPtr(image);
HXDLIN( 330)			 ::hx::Object * _hx_tmp6 = hx::DynamicPtr(rect);
HXDLIN( 330)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_fill_rect(_hx_tmp5,_hx_tmp6,((int)((int)fillColor >> (int)(int)16) & (int)(int)65535),((int)fillColor & (int)(int)65535));
            		}
            		else {
HXLINE( 334)			HX_VARI_NAME( Int,format1,"format") = image->buffer->format;
HXLINE( 335)			HX_VARI( Bool,premultiplied) = image->buffer->premultiplied;
HXLINE( 336)			if (premultiplied) {
HXLINE( 336)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 336)					Bool _hx_tmp7 = (fillColor != (int)0);
HXDLIN( 336)					if (_hx_tmp7) {
HXLINE( 336)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 336)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 336)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 336)						Int byteOffset = (this3->byteOffset + (((int)fillColor & (int)(int)255) * (int)4));
HXDLIN( 336)						 ::Dynamic _hx_tmp8 = ::__hxcpp_memory_get_ui32(this3->buffer->b,byteOffset);
HXDLIN( 336)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp8;
HXDLIN( 336)						{
HXLINE( 336)							Int _hx_tmp9 = ((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 336)							Int _hx_tmp10 = ((int)((int)fillColor & (int)(int)255) & (int)(int)255);
HXDLIN( 336)							fillColor = ((int)_hx_tmp9 | (int)_hx_tmp10);
            						}
            					}
            				}
            			}
HXLINE( 338)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,dataView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(image,rect);
HXLINE( 339)			HX_VAR( Int,row);
HXLINE( 341)			{
HXLINE( 341)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 341)				HX_VARI( Int,_g) = dataView->height;
HXDLIN( 341)				while((_g1 < _g)){
HXLINE( 341)					HX_VARI( Int,y) = _g1++;
HXLINE( 343)					row = (dataView->offset + (dataView->stride * y));
HXLINE( 345)					{
HXLINE( 345)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 345)						HX_VARI( Int,_g2) = dataView->width;
HXDLIN( 345)						while((_g3 < _g2)){
HXLINE( 345)							HX_VARI( Int,x) = _g3++;
HXLINE( 347)							{
HXLINE( 347)								HX_VARI( Int,offset) = (row + (x * (int)4));
HXDLIN( 347)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 347)										{
HXLINE( 347)											HX_VARI( Int,val) = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset1 = (data->byteOffset + offset);
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset1,val);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset2 = (data->byteOffset + (offset + (int)1));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset2,val1);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset3 = (data->byteOffset + (offset + (int)2));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset3,val2);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val3,"val") = ((int)fillColor & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset4 = (data->byteOffset + (offset + (int)3));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset4,val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val4,"val") = ((int)fillColor & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset5 = (data->byteOffset + offset);
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset5,val4);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset6 = (data->byteOffset + (offset + (int)1));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset6,val5);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset7 = (data->byteOffset + (offset + (int)2));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset7,val6);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset8 = (data->byteOffset + (offset + (int)3));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset8,val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset9 = (data->byteOffset + offset);
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset9,val8);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset10 = (data->byteOffset + (offset + (int)1));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset10,val9);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset11 = (data->byteOffset + (offset + (int)2));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset11,val10);
            											}
            										}
HXDLIN( 347)										{
HXLINE( 347)											HX_VARI_NAME( Int,val11,"val") = ((int)fillColor & (int)(int)255);
HXDLIN( 347)											{
HXLINE( 347)												Int byteOffset12 = (data->byteOffset + (offset + (int)3));
HXDLIN( 347)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset12,val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 355)		image->dirty = true;
HXLINE( 356)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

void ImageDataUtil_obj::floodFill( ::lime::graphics::Image image,Int x,Int y,Int color,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","floodFill",0xfbc79ff3,"lime.graphics.utils.ImageDataUtil.floodFill","lime/graphics/utils/ImageDataUtil.hx",361,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 363)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 364)		Bool _hx_tmp = hx::IsNull( data );
HXDLIN( 364)		if (_hx_tmp) {
HXLINE( 364)			return;
            		}
HXLINE( 366)		if ((format == (int)1)) {
HXLINE( 366)			Int _hx_tmp1 = ((int)((int)color & (int)(int)16777215) << (int)(int)8);
HXDLIN( 366)			Int _hx_tmp2 = ((int)((int)color >> (int)(int)24) & (int)(int)255);
HXDLIN( 366)			color = ((int)_hx_tmp1 | (int)_hx_tmp2);
            		}
HXLINE( 369)		Bool _hx_tmp3 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 369)		if (_hx_tmp3) {
HXLINE( 369)			 ::hx::Object * _hx_tmp4 = hx::DynamicPtr(image);
HXDLIN( 369)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_flood_fill(_hx_tmp4,x,y,((int)((int)color >> (int)(int)16) & (int)(int)65535),((int)color & (int)(int)65535));
            		}
            		else {
HXLINE( 373)			HX_VARI_NAME( Int,format1,"format") = image->buffer->format;
HXLINE( 374)			HX_VARI( Bool,premultiplied) = image->buffer->premultiplied;
HXLINE( 376)			HX_VARI( Int,fillColor) = color;
HXLINE( 378)			HX_VAR( Int,hitColor);
HXLINE( 379)			{
HXLINE( 379)				HX_VARI( Int,offset) = (((y + image->offsetY) * (image->buffer->width * (int)4)) + ((x + image->offsetX) * (int)4));
HXDLIN( 379)				switch((int)(format1)){
            					case (int)0: {
HXLINE( 379)						Int byteOffset = (data->byteOffset + offset);
HXDLIN( 379)						Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN( 379)						Int r = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN( 379)						Int byteOffset1 = (data->byteOffset + (offset + (int)1));
HXDLIN( 379)						Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN( 379)						Int g = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN( 379)						Int byteOffset2 = (data->byteOffset + (offset + (int)2));
HXDLIN( 379)						Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN( 379)						Int b = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN( 379)						Int byteOffset3 = (data->byteOffset + (offset + (int)3));
HXDLIN( 379)						Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN( 379)						hitColor = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp8 & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)1: {
HXLINE( 379)						Int byteOffset4 = (data->byteOffset + (offset + (int)1));
HXDLIN( 379)						Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN( 379)						Int r1 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN( 379)						Int byteOffset5 = (data->byteOffset + (offset + (int)2));
HXDLIN( 379)						Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN( 379)						Int g1 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 379)						Int byteOffset6 = (data->byteOffset + (offset + (int)3));
HXDLIN( 379)						Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN( 379)						Int b1 = ((int)_hx_tmp11 & (int)(int)255);
HXDLIN( 379)						Int byteOffset7 = (data->byteOffset + offset);
HXDLIN( 379)						Int _hx_tmp12 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN( 379)						hitColor = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp12 & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)2: {
HXLINE( 379)						Int byteOffset8 = (data->byteOffset + (offset + (int)2));
HXDLIN( 379)						Int _hx_tmp13 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN( 379)						Int r2 = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN( 379)						Int byteOffset9 = (data->byteOffset + (offset + (int)1));
HXDLIN( 379)						Int _hx_tmp14 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN( 379)						Int g2 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 379)						Int byteOffset10 = (data->byteOffset + offset);
HXDLIN( 379)						Int _hx_tmp15 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN( 379)						Int b2 = ((int)_hx_tmp15 & (int)(int)255);
HXDLIN( 379)						Int byteOffset11 = (data->byteOffset + (offset + (int)3));
HXDLIN( 379)						Int _hx_tmp16 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN( 379)						hitColor = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp16 & (int)(int)255) & (int)(int)255));
            					}
            					break;
            				}
HXDLIN( 379)				if (premultiplied) {
HXLINE( 379)					Bool _hx_tmp17;
HXDLIN( 379)					if ((((int)hitColor & (int)(int)255) != (int)0)) {
HXLINE( 379)						_hx_tmp17 = (((int)hitColor & (int)(int)255) != (int)255);
            					}
            					else {
HXLINE( 379)						_hx_tmp17 = false;
            					}
HXDLIN( 379)					if (_hx_tmp17) {
HXLINE( 379)						::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)hitColor & (int)(int)255));
HXDLIN( 379)						{
HXLINE( 379)							HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 379)							Float _hx_tmp18 = (((int)hx::UShr(hitColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 379)							Int idx = ::Math_obj::round(_hx_tmp18);
HXDLIN( 379)							Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN( 379)							Int _hx_tmp19 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN( 379)							Int r3 = ((int)_hx_tmp19 & (int)(int)255);
HXDLIN( 379)							HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 379)							Float _hx_tmp20 = (((int)hx::UShr(hitColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 379)							Int idx1 = ::Math_obj::round(_hx_tmp20);
HXDLIN( 379)							Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN( 379)							Int _hx_tmp21 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN( 379)							Int g3 = ((int)_hx_tmp21 & (int)(int)255);
HXDLIN( 379)							HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 379)							Float _hx_tmp22 = (((int)hx::UShr(hitColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 379)							Int idx2 = ::Math_obj::round(_hx_tmp22);
HXDLIN( 379)							Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN( 379)							Int _hx_tmp23 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN( 379)							Int _hx_tmp24 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp23 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 379)							Int _hx_tmp25 = ((int)((int)hitColor & (int)(int)255) & (int)(int)255);
HXDLIN( 379)							hitColor = ((int)_hx_tmp24 | (int)_hx_tmp25);
            						}
            					}
            				}
            			}
HXLINE( 381)			Bool _hx_tmp26 = !(image->get_transparent());
HXDLIN( 381)			if (_hx_tmp26) {
HXLINE( 383)				{
HXLINE( 383)					Int _hx_tmp27 = ((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN( 383)					Int _hx_tmp28 = ((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN( 383)					fillColor = ((int)((int)_hx_tmp27 | (int)_hx_tmp28) | (int)(int)255);
            				}
HXLINE( 384)				{
HXLINE( 384)					Int _hx_tmp29 = ((int)((int)((int)((int)hx::UShr(hitColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(hitColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN( 384)					Int _hx_tmp30 = ((int)((int)((int)hx::UShr(hitColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN( 384)					hitColor = ((int)((int)_hx_tmp29 | (int)_hx_tmp30) | (int)(int)255);
            				}
            			}
HXLINE( 388)			if ((fillColor == hitColor)) {
HXLINE( 388)				return;
            			}
HXLINE( 390)			if (premultiplied) {
HXLINE( 390)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 390)					Bool _hx_tmp31 = (fillColor != (int)0);
HXDLIN( 390)					if (_hx_tmp31) {
HXLINE( 390)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 390)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 390)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 390)						Int byteOffset15 = (this4->byteOffset + (((int)fillColor & (int)(int)255) * (int)4));
HXDLIN( 390)						 ::Dynamic _hx_tmp32 = ::__hxcpp_memory_get_ui32(this4->buffer->b,byteOffset15);
HXDLIN( 390)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp32;
HXDLIN( 390)						{
HXLINE( 390)							Int _hx_tmp33 = ((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 390)							Int _hx_tmp34 = ((int)((int)fillColor & (int)(int)255) & (int)(int)255);
HXDLIN( 390)							fillColor = ((int)_hx_tmp33 | (int)_hx_tmp34);
            						}
            					}
            				}
            			}
HXLINE( 392)			HX_VARI( ::Array< Int >,dx) = ::Array_obj< Int >::fromData( _hx_array_data_14,4);
HXLINE( 393)			HX_VARI( ::Array< Int >,dy) = ::Array_obj< Int >::fromData( _hx_array_data_15,4);
HXLINE( 395)			HX_VARI( Int,minX) = -(image->offsetX);
HXLINE( 396)			HX_VARI( Int,minY) = -(image->offsetY);
HXLINE( 397)			HX_VARI( Int,maxX) = (minX + image->width);
HXLINE( 398)			HX_VARI( Int,maxY) = (minY + image->height);
HXLINE( 400)			HX_VARI( ::Array< Int >,queue) = ::Array_obj< Int >::__new();
HXLINE( 401)			queue->push(x);
HXLINE( 402)			queue->push(y);
HXLINE( 404)			HX_VAR(  ::Dynamic,curPointX);
HXDLIN( 404)			HX_VAR(  ::Dynamic,curPointY);
HXDLIN( 404)			HX_VAR( Int,nextPointX);
HXDLIN( 404)			HX_VAR( Int,nextPointY);
HXDLIN( 404)			HX_VAR( Int,nextPointOffset);
HXDLIN( 404)			HX_VAR( Int,readColor);
HXLINE( 406)			while((queue->length > (int)0)){
HXLINE( 408)				curPointY = queue->pop();
HXLINE( 409)				curPointX = queue->pop();
HXLINE( 411)				{
HXLINE( 411)					HX_VARI( Int,_g) = (int)0;
HXDLIN( 411)					while((_g < (int)4)){
HXLINE( 411)						HX_VARI( Int,i) = _g++;
HXLINE( 413)						nextPointX = (curPointX + dx->__get(i));
HXLINE( 414)						nextPointY = (curPointY + dy->__get(i));
HXLINE( 416)						Bool _hx_tmp35;
HXDLIN( 416)						Bool _hx_tmp36;
HXDLIN( 416)						Bool _hx_tmp37;
HXDLIN( 416)						if ((nextPointX >= minX)) {
HXLINE( 416)							_hx_tmp37 = (nextPointY < minY);
            						}
            						else {
HXLINE( 416)							_hx_tmp37 = true;
            						}
HXDLIN( 416)						if (!(_hx_tmp37)) {
HXLINE( 416)							_hx_tmp36 = (nextPointX >= maxX);
            						}
            						else {
HXLINE( 416)							_hx_tmp36 = true;
            						}
HXDLIN( 416)						if (!(_hx_tmp36)) {
HXLINE( 416)							_hx_tmp35 = (nextPointY >= maxY);
            						}
            						else {
HXLINE( 416)							_hx_tmp35 = true;
            						}
HXDLIN( 416)						if (_hx_tmp35) {
HXLINE( 418)							continue;
            						}
HXLINE( 422)						nextPointOffset = (((nextPointY * image->width) + nextPointX) * (int)4);
HXLINE( 423)						{
HXLINE( 423)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 423)									Int byteOffset16 = (data->byteOffset + nextPointOffset);
HXDLIN( 423)									Int _hx_tmp38 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset16);
HXDLIN( 423)									Int r4 = ((int)_hx_tmp38 & (int)(int)255);
HXDLIN( 423)									Int byteOffset17 = (data->byteOffset + (nextPointOffset + (int)1));
HXDLIN( 423)									Int _hx_tmp39 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset17);
HXDLIN( 423)									Int g4 = ((int)_hx_tmp39 & (int)(int)255);
HXDLIN( 423)									Int byteOffset18 = (data->byteOffset + (nextPointOffset + (int)2));
HXDLIN( 423)									Int _hx_tmp40 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset18);
HXDLIN( 423)									Int b3 = ((int)_hx_tmp40 & (int)(int)255);
HXDLIN( 423)									Int byteOffset19 = (data->byteOffset + (nextPointOffset + (int)3));
HXDLIN( 423)									Int _hx_tmp41 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset19);
HXDLIN( 423)									readColor = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp41 & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 423)									Int byteOffset20 = (data->byteOffset + (nextPointOffset + (int)1));
HXDLIN( 423)									Int _hx_tmp42 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset20);
HXDLIN( 423)									Int r5 = ((int)_hx_tmp42 & (int)(int)255);
HXDLIN( 423)									Int byteOffset21 = (data->byteOffset + (nextPointOffset + (int)2));
HXDLIN( 423)									Int _hx_tmp43 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset21);
HXDLIN( 423)									Int g5 = ((int)_hx_tmp43 & (int)(int)255);
HXDLIN( 423)									Int byteOffset22 = (data->byteOffset + (nextPointOffset + (int)3));
HXDLIN( 423)									Int _hx_tmp44 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset22);
HXDLIN( 423)									Int b4 = ((int)_hx_tmp44 & (int)(int)255);
HXDLIN( 423)									Int byteOffset23 = (data->byteOffset + nextPointOffset);
HXDLIN( 423)									Int _hx_tmp45 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset23);
HXDLIN( 423)									readColor = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp45 & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 423)									Int byteOffset24 = (data->byteOffset + (nextPointOffset + (int)2));
HXDLIN( 423)									Int _hx_tmp46 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset24);
HXDLIN( 423)									Int r6 = ((int)_hx_tmp46 & (int)(int)255);
HXDLIN( 423)									Int byteOffset25 = (data->byteOffset + (nextPointOffset + (int)1));
HXDLIN( 423)									Int _hx_tmp47 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset25);
HXDLIN( 423)									Int g6 = ((int)_hx_tmp47 & (int)(int)255);
HXDLIN( 423)									Int byteOffset26 = (data->byteOffset + nextPointOffset);
HXDLIN( 423)									Int _hx_tmp48 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset26);
HXDLIN( 423)									Int b5 = ((int)_hx_tmp48 & (int)(int)255);
HXDLIN( 423)									Int byteOffset27 = (data->byteOffset + (nextPointOffset + (int)3));
HXDLIN( 423)									Int _hx_tmp49 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset27);
HXDLIN( 423)									readColor = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp49 & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 423)							if (premultiplied) {
HXLINE( 423)								Bool _hx_tmp50;
HXDLIN( 423)								if ((((int)readColor & (int)(int)255) != (int)0)) {
HXLINE( 423)									_hx_tmp50 = (((int)readColor & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 423)									_hx_tmp50 = false;
            								}
HXDLIN( 423)								if (_hx_tmp50) {
HXLINE( 423)									::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)readColor & (int)(int)255));
HXDLIN( 423)									{
HXLINE( 423)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 423)										Float _hx_tmp51 = (((int)hx::UShr(readColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 423)										Int idx3 = ::Math_obj::round(_hx_tmp51);
HXDLIN( 423)										Int byteOffset28 = (this5->byteOffset + idx3);
HXDLIN( 423)										Int _hx_tmp52 = ::__hxcpp_memory_get_byte(this5->buffer->b,byteOffset28);
HXDLIN( 423)										Int r7 = ((int)_hx_tmp52 & (int)(int)255);
HXDLIN( 423)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 423)										Float _hx_tmp53 = (((int)hx::UShr(readColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 423)										Int idx4 = ::Math_obj::round(_hx_tmp53);
HXDLIN( 423)										Int byteOffset29 = (this6->byteOffset + idx4);
HXDLIN( 423)										Int _hx_tmp54 = ::__hxcpp_memory_get_byte(this6->buffer->b,byteOffset29);
HXDLIN( 423)										Int g7 = ((int)_hx_tmp54 & (int)(int)255);
HXDLIN( 423)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 423)										Float _hx_tmp55 = (((int)hx::UShr(readColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 423)										Int idx5 = ::Math_obj::round(_hx_tmp55);
HXDLIN( 423)										Int byteOffset30 = (this7->byteOffset + idx5);
HXDLIN( 423)										Int _hx_tmp56 = ::__hxcpp_memory_get_byte(this7->buffer->b,byteOffset30);
HXDLIN( 423)										Int _hx_tmp57 = ((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp56 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 423)										Int _hx_tmp58 = ((int)((int)readColor & (int)(int)255) & (int)(int)255);
HXDLIN( 423)										readColor = ((int)_hx_tmp57 | (int)_hx_tmp58);
            									}
            								}
            							}
            						}
HXLINE( 425)						if ((readColor == hitColor)) {
HXLINE( 427)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 427)									{
HXLINE( 427)										HX_VARI( Int,val) = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset31 = (data->byteOffset + nextPointOffset);
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset31,val);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset32 = (data->byteOffset + (nextPointOffset + (int)1));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset32,val1);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset33 = (data->byteOffset + (nextPointOffset + (int)2));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset33,val2);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val3,"val") = ((int)fillColor & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset34 = (data->byteOffset + (nextPointOffset + (int)3));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset34,val3);
            										}
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val4,"val") = ((int)fillColor & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset35 = (data->byteOffset + nextPointOffset);
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset35,val4);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset36 = (data->byteOffset + (nextPointOffset + (int)1));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset36,val5);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset37 = (data->byteOffset + (nextPointOffset + (int)2));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset37,val6);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset38 = (data->byteOffset + (nextPointOffset + (int)3));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset38,val7);
            										}
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset39 = (data->byteOffset + nextPointOffset);
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset39,val8);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset40 = (data->byteOffset + (nextPointOffset + (int)1));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset40,val9);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset41 = (data->byteOffset + (nextPointOffset + (int)2));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset41,val10);
            										}
            									}
HXDLIN( 427)									{
HXLINE( 427)										HX_VARI_NAME( Int,val11,"val") = ((int)fillColor & (int)(int)255);
HXDLIN( 427)										{
HXLINE( 427)											Int byteOffset42 = (data->byteOffset + (nextPointOffset + (int)3));
HXDLIN( 427)											::__hxcpp_memory_set_byte(data->buffer->b,byteOffset42,val11);
            										}
            									}
            								}
            								break;
            							}
HXLINE( 429)							queue->push(nextPointX);
HXLINE( 430)							queue->push(nextPointY);
            						}
            					}
            				}
            			}
            		}
HXLINE( 440)		image->dirty = true;
HXLINE( 441)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,floodFill,(void))

 ::lime::math::Rectangle ImageDataUtil_obj::getColorBoundsRect( ::lime::graphics::Image image,Int mask,Int color,hx::Null< Bool >  __o_findColor,Int format){
Bool findColor = __o_findColor.Default(true);
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","getColorBoundsRect",0xfea06eb4,"lime.graphics.utils.ImageDataUtil.getColorBoundsRect","lime/graphics/utils/ImageDataUtil.hx",446,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(findColor,"findColor")
            	HX_STACK_ARG(format,"format")
HXLINE( 448)		HX_VARI( Int,left) = (image->width + (int)1);
HXLINE( 449)		HX_VARI( Int,right) = (int)0;
HXLINE( 450)		HX_VARI( Int,top) = (image->height + (int)1);
HXLINE( 451)		HX_VARI( Int,bottom) = (int)0;
HXLINE( 453)		HX_VAR( Int,_color);
HXDLIN( 453)		HX_VAR( Int,_mask);
HXLINE( 455)		switch((int)(format)){
            			case (int)1: {
HXLINE( 459)				HX_VARI( Int,argb) = color;
HXDLIN( 459)				HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 459)				HX_VARI( Int,rgba) = this1;
HXDLIN( 459)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 459)				_color = rgba;
HXLINE( 460)				HX_VARI_NAME( Int,argb1,"argb") = mask;
HXDLIN( 460)				HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 460)				HX_VARI_NAME( Int,rgba1,"rgba") = this2;
HXDLIN( 460)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 460)				_mask = rgba1;
            			}
            			break;
            			case (int)2: {
HXLINE( 464)				HX_VARI( Int,bgra) = color;
HXDLIN( 464)				HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN( 464)				HX_VARI_NAME( Int,rgba2,"rgba") = this3;
HXDLIN( 464)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 464)				_color = rgba2;
HXLINE( 465)				HX_VARI_NAME( Int,bgra1,"bgra") = mask;
HXDLIN( 465)				HX_VARI_NAME( Int,this4,"this") = (int)0;
HXDLIN( 465)				HX_VARI_NAME( Int,rgba3,"rgba") = this4;
HXDLIN( 465)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN( 465)				_mask = rgba3;
            			}
            			break;
            			default:{
HXLINE( 469)				_color = color;
HXLINE( 470)				_mask = mask;
            			}
            		}
HXLINE( 474)		Bool _hx_tmp = !(image->get_transparent());
HXDLIN( 474)		if (_hx_tmp) {
HXLINE( 476)			{
HXLINE( 476)				Int _hx_tmp1 = ((int)((int)((int)((int)hx::UShr(_color,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN( 476)				Int _hx_tmp2 = ((int)((int)((int)hx::UShr(_color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN( 476)				_color = ((int)((int)_hx_tmp1 | (int)_hx_tmp2) | (int)(int)255);
            			}
HXLINE( 477)			{
HXLINE( 477)				Int _hx_tmp3 = ((int)((int)((int)((int)hx::UShr(_mask,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_mask,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN( 477)				Int _hx_tmp4 = ((int)((int)((int)hx::UShr(_mask,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN( 477)				_mask = ((int)((int)_hx_tmp3 | (int)_hx_tmp4) | (int)(int)255);
            			}
            		}
HXLINE( 481)		HX_VAR( Int,pixel);
HXDLIN( 481)		HX_VAR( Bool,hit);
HXLINE( 483)		{
HXLINE( 483)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 483)			HX_VARI( Int,_g) = image->width;
HXDLIN( 483)			while((_g1 < _g)){
HXLINE( 483)				HX_VARI( Int,x) = _g1++;
HXLINE( 485)				hit = false;
HXLINE( 487)				{
HXLINE( 487)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 487)					HX_VARI( Int,_g2) = image->height;
HXDLIN( 487)					while((_g3 < _g2)){
HXLINE( 487)						HX_VARI( Int,y) = _g3++;
HXLINE( 489)						pixel = image->getPixel32(x,y,(int)0);
HXLINE( 490)						if (findColor) {
HXLINE( 490)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 490)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 492)						if (hit) {
HXLINE( 494)							Bool _hx_tmp5 = (x < left);
HXDLIN( 494)							if (_hx_tmp5) {
HXLINE( 494)								left = x;
            							}
HXLINE( 495)							goto _hx_goto_17;
            						}
            					}
            					_hx_goto_17:;
            				}
HXLINE( 501)				if (hit) {
HXLINE( 503)					goto _hx_goto_16;
            				}
            			}
            			_hx_goto_16:;
            		}
HXLINE( 509)		HX_VAR( Int,ix);
HXLINE( 511)		{
HXLINE( 511)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 511)			HX_VARI_NAME( Int,_g4,"_g") = image->width;
HXDLIN( 511)			while((_g11 < _g4)){
HXLINE( 511)				HX_VARI_NAME( Int,x1,"x") = _g11++;
HXLINE( 513)				ix = ((image->width - (int)1) - x1);
HXLINE( 514)				hit = false;
HXLINE( 516)				{
HXLINE( 516)					HX_VARI_NAME( Int,_g31,"_g3") = (int)0;
HXDLIN( 516)					HX_VARI_NAME( Int,_g21,"_g2") = image->height;
HXDLIN( 516)					while((_g31 < _g21)){
HXLINE( 516)						HX_VARI_NAME( Int,y1,"y") = _g31++;
HXLINE( 518)						pixel = image->getPixel32(ix,y1,(int)0);
HXLINE( 519)						if (findColor) {
HXLINE( 519)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 519)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 521)						if (hit) {
HXLINE( 523)							Bool _hx_tmp6 = (ix > right);
HXDLIN( 523)							if (_hx_tmp6) {
HXLINE( 523)								right = ix;
            							}
HXLINE( 524)							goto _hx_goto_19;
            						}
            					}
            					_hx_goto_19:;
            				}
HXLINE( 530)				if (hit) {
HXLINE( 532)					goto _hx_goto_18;
            				}
            			}
            			_hx_goto_18:;
            		}
HXLINE( 538)		{
HXLINE( 538)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 538)			HX_VARI_NAME( Int,_g5,"_g") = image->height;
HXDLIN( 538)			while((_g12 < _g5)){
HXLINE( 538)				HX_VARI_NAME( Int,y2,"y") = _g12++;
HXLINE( 540)				hit = false;
HXLINE( 542)				{
HXLINE( 542)					HX_VARI_NAME( Int,_g32,"_g3") = (int)0;
HXDLIN( 542)					HX_VARI_NAME( Int,_g22,"_g2") = image->width;
HXDLIN( 542)					while((_g32 < _g22)){
HXLINE( 542)						HX_VARI_NAME( Int,x2,"x") = _g32++;
HXLINE( 544)						pixel = image->getPixel32(x2,y2,(int)0);
HXLINE( 545)						if (findColor) {
HXLINE( 545)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 545)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 547)						if (hit) {
HXLINE( 549)							Bool _hx_tmp7 = (y2 < top);
HXDLIN( 549)							if (_hx_tmp7) {
HXLINE( 549)								top = y2;
            							}
HXLINE( 550)							goto _hx_goto_21;
            						}
            					}
            					_hx_goto_21:;
            				}
HXLINE( 556)				if (hit) {
HXLINE( 558)					goto _hx_goto_20;
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE( 564)		HX_VAR( Int,iy);
HXLINE( 566)		{
HXLINE( 566)			HX_VARI_NAME( Int,_g13,"_g1") = (int)0;
HXDLIN( 566)			HX_VARI_NAME( Int,_g6,"_g") = image->height;
HXDLIN( 566)			while((_g13 < _g6)){
HXLINE( 566)				HX_VARI_NAME( Int,y3,"y") = _g13++;
HXLINE( 568)				iy = ((image->height - (int)1) - y3);
HXLINE( 569)				hit = false;
HXLINE( 571)				{
HXLINE( 571)					HX_VARI_NAME( Int,_g33,"_g3") = (int)0;
HXDLIN( 571)					HX_VARI_NAME( Int,_g23,"_g2") = image->width;
HXDLIN( 571)					while((_g33 < _g23)){
HXLINE( 571)						HX_VARI_NAME( Int,x3,"x") = _g33++;
HXLINE( 573)						pixel = image->getPixel32(x3,iy,(int)0);
HXLINE( 574)						if (findColor) {
HXLINE( 574)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 574)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 576)						if (hit) {
HXLINE( 578)							Bool _hx_tmp8 = (iy > bottom);
HXDLIN( 578)							if (_hx_tmp8) {
HXLINE( 578)								bottom = iy;
            							}
HXLINE( 579)							goto _hx_goto_23;
            						}
            					}
            					_hx_goto_23:;
            				}
HXLINE( 585)				if (hit) {
HXLINE( 587)					goto _hx_goto_22;
            				}
            			}
            			_hx_goto_22:;
            		}
HXLINE( 593)		HX_VARI( Int,w) = (right - left);
HXLINE( 594)		HX_VARI( Int,h) = (bottom - top);
HXLINE( 596)		Bool _hx_tmp9 = (w > (int)0);
HXDLIN( 596)		if (_hx_tmp9) {
HXLINE( 596)			++w;
            		}
HXLINE( 597)		Bool _hx_tmp10 = (h > (int)0);
HXDLIN( 597)		if (_hx_tmp10) {
HXLINE( 597)			++h;
            		}
HXLINE( 599)		Bool _hx_tmp11 = (w < (int)0);
HXDLIN( 599)		if (_hx_tmp11) {
HXLINE( 599)			w = (int)0;
            		}
HXLINE( 600)		Bool _hx_tmp12 = (h < (int)0);
HXDLIN( 600)		if (_hx_tmp12) {
HXLINE( 600)			h = (int)0;
            		}
HXLINE( 602)		if ((left == right)) {
HXLINE( 602)			w = (int)1;
            		}
HXLINE( 603)		if ((top == bottom)) {
HXLINE( 603)			h = (int)1;
            		}
HXLINE( 605)		Bool _hx_tmp13 = (left > image->width);
HXDLIN( 605)		if (_hx_tmp13) {
HXLINE( 605)			left = (int)0;
            		}
HXLINE( 606)		Bool _hx_tmp14 = (top > image->height);
HXDLIN( 606)		if (_hx_tmp14) {
HXLINE( 606)			top = (int)0;
            		}
HXLINE( 608)		return  ::lime::math::Rectangle_obj::__new(left,top,w,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,getColorBoundsRect,return )

Int ImageDataUtil_obj::getPixel( ::lime::graphics::Image image,Int x,Int y,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","getPixel",0xcbf5f1be,"lime.graphics.utils.ImageDataUtil.getPixel","lime/graphics/utils/ImageDataUtil.hx",613,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 615)		HX_VAR( Int,pixel);
HXLINE( 617)		{
HXLINE( 617)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN( 617)			HX_VARI( Int,offset) = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN( 617)			Int format1 = image->buffer->format;
HXDLIN( 617)			Bool premultiplied = image->buffer->premultiplied;
HXDLIN( 617)			switch((int)(format1)){
            				case (int)0: {
HXLINE( 617)					Int byteOffset = (data->byteOffset + offset);
HXDLIN( 617)					Int _hx_tmp = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN( 617)					Int r = ((int)_hx_tmp & (int)(int)255);
HXDLIN( 617)					Int byteOffset1 = (data->byteOffset + (offset + (int)1));
HXDLIN( 617)					Int _hx_tmp1 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN( 617)					Int g = ((int)_hx_tmp1 & (int)(int)255);
HXDLIN( 617)					Int byteOffset2 = (data->byteOffset + (offset + (int)2));
HXDLIN( 617)					Int _hx_tmp2 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN( 617)					Int b = ((int)_hx_tmp2 & (int)(int)255);
HXDLIN( 617)					Int byteOffset3 = (data->byteOffset + (offset + (int)3));
HXDLIN( 617)					Int _hx_tmp3 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN( 617)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp3 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 617)					Int byteOffset4 = (data->byteOffset + (offset + (int)1));
HXDLIN( 617)					Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN( 617)					Int r1 = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN( 617)					Int byteOffset5 = (data->byteOffset + (offset + (int)2));
HXDLIN( 617)					Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN( 617)					Int g1 = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN( 617)					Int byteOffset6 = (data->byteOffset + (offset + (int)3));
HXDLIN( 617)					Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN( 617)					Int b1 = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN( 617)					Int byteOffset7 = (data->byteOffset + offset);
HXDLIN( 617)					Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN( 617)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp7 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 617)					Int byteOffset8 = (data->byteOffset + (offset + (int)2));
HXDLIN( 617)					Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN( 617)					Int r2 = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN( 617)					Int byteOffset9 = (data->byteOffset + (offset + (int)1));
HXDLIN( 617)					Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN( 617)					Int g2 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN( 617)					Int byteOffset10 = (data->byteOffset + offset);
HXDLIN( 617)					Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN( 617)					Int b2 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 617)					Int byteOffset11 = (data->byteOffset + (offset + (int)3));
HXDLIN( 617)					Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN( 617)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp11 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 617)			if (premultiplied) {
HXLINE( 617)				Bool _hx_tmp12;
HXDLIN( 617)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 617)					_hx_tmp12 = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 617)					_hx_tmp12 = false;
            				}
HXDLIN( 617)				if (_hx_tmp12) {
HXLINE( 617)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 617)					{
HXLINE( 617)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 617)						Float _hx_tmp13 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 617)						Int idx = ::Math_obj::round(_hx_tmp13);
HXDLIN( 617)						Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN( 617)						Int _hx_tmp14 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN( 617)						Int r3 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 617)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 617)						Float _hx_tmp15 = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 617)						Int idx1 = ::Math_obj::round(_hx_tmp15);
HXDLIN( 617)						Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN( 617)						Int _hx_tmp16 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN( 617)						Int g3 = ((int)_hx_tmp16 & (int)(int)255);
HXDLIN( 617)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 617)						Float _hx_tmp17 = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 617)						Int idx2 = ::Math_obj::round(_hx_tmp17);
HXDLIN( 617)						Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN( 617)						Int _hx_tmp18 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN( 617)						Int _hx_tmp19 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp18 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 617)						Int _hx_tmp20 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN( 617)						pixel = ((int)_hx_tmp19 | (int)_hx_tmp20);
            					}
            				}
            			}
            		}
HXLINE( 618)		{
HXLINE( 618)			Int _hx_tmp21 = ((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN( 618)			Int _hx_tmp22 = ((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN( 618)			pixel = ((int)((int)_hx_tmp21 | (int)_hx_tmp22) | (int)(int)0);
            		}
HXLINE( 620)		switch((int)(format)){
            			case (int)1: {
HXLINE( 622)				HX_VARI_NAME( Int,this4,"this") = (int)0;
HXDLIN( 622)				HX_VARI( Int,argb) = this4;
HXDLIN( 622)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 622)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 623)				HX_VARI_NAME( Int,this5,"this") = (int)0;
HXDLIN( 623)				HX_VARI( Int,bgra) = this5;
HXDLIN( 623)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 623)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 624)				return pixel;
            			}
            		}
HXLINE( 620)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel,return )

Int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,Int x,Int y,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","getPixel32",0x2aa489dd,"lime.graphics.utils.ImageDataUtil.getPixel32","lime/graphics/utils/ImageDataUtil.hx",631,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(format,"format")
HXLINE( 633)		HX_VAR( Int,pixel);
HXLINE( 635)		{
HXLINE( 635)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN( 635)			HX_VARI( Int,offset) = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN( 635)			Int format1 = image->buffer->format;
HXDLIN( 635)			Bool premultiplied = image->buffer->premultiplied;
HXDLIN( 635)			switch((int)(format1)){
            				case (int)0: {
HXLINE( 635)					Int byteOffset = (data->byteOffset + offset);
HXDLIN( 635)					Int _hx_tmp = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN( 635)					Int r = ((int)_hx_tmp & (int)(int)255);
HXDLIN( 635)					Int byteOffset1 = (data->byteOffset + (offset + (int)1));
HXDLIN( 635)					Int _hx_tmp1 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN( 635)					Int g = ((int)_hx_tmp1 & (int)(int)255);
HXDLIN( 635)					Int byteOffset2 = (data->byteOffset + (offset + (int)2));
HXDLIN( 635)					Int _hx_tmp2 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN( 635)					Int b = ((int)_hx_tmp2 & (int)(int)255);
HXDLIN( 635)					Int byteOffset3 = (data->byteOffset + (offset + (int)3));
HXDLIN( 635)					Int _hx_tmp3 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN( 635)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp3 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 635)					Int byteOffset4 = (data->byteOffset + (offset + (int)1));
HXDLIN( 635)					Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN( 635)					Int r1 = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN( 635)					Int byteOffset5 = (data->byteOffset + (offset + (int)2));
HXDLIN( 635)					Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN( 635)					Int g1 = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN( 635)					Int byteOffset6 = (data->byteOffset + (offset + (int)3));
HXDLIN( 635)					Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN( 635)					Int b1 = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN( 635)					Int byteOffset7 = (data->byteOffset + offset);
HXDLIN( 635)					Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN( 635)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp7 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 635)					Int byteOffset8 = (data->byteOffset + (offset + (int)2));
HXDLIN( 635)					Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN( 635)					Int r2 = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN( 635)					Int byteOffset9 = (data->byteOffset + (offset + (int)1));
HXDLIN( 635)					Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN( 635)					Int g2 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN( 635)					Int byteOffset10 = (data->byteOffset + offset);
HXDLIN( 635)					Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN( 635)					Int b2 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 635)					Int byteOffset11 = (data->byteOffset + (offset + (int)3));
HXDLIN( 635)					Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN( 635)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp11 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 635)			if (premultiplied) {
HXLINE( 635)				Bool _hx_tmp12;
HXDLIN( 635)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 635)					_hx_tmp12 = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 635)					_hx_tmp12 = false;
            				}
HXDLIN( 635)				if (_hx_tmp12) {
HXLINE( 635)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 635)					{
HXLINE( 635)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 635)						Float _hx_tmp13 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 635)						Int idx = ::Math_obj::round(_hx_tmp13);
HXDLIN( 635)						Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN( 635)						Int _hx_tmp14 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN( 635)						Int r3 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 635)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 635)						Float _hx_tmp15 = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 635)						Int idx1 = ::Math_obj::round(_hx_tmp15);
HXDLIN( 635)						Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN( 635)						Int _hx_tmp16 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN( 635)						Int g3 = ((int)_hx_tmp16 & (int)(int)255);
HXDLIN( 635)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 635)						Float _hx_tmp17 = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 635)						Int idx2 = ::Math_obj::round(_hx_tmp17);
HXDLIN( 635)						Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN( 635)						Int _hx_tmp18 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN( 635)						Int _hx_tmp19 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp18 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 635)						Int _hx_tmp20 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN( 635)						pixel = ((int)_hx_tmp19 | (int)_hx_tmp20);
            					}
            				}
            			}
            		}
HXLINE( 637)		switch((int)(format)){
            			case (int)1: {
HXLINE( 639)				HX_VARI_NAME( Int,this4,"this") = (int)0;
HXDLIN( 639)				HX_VARI( Int,argb) = this4;
HXDLIN( 639)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 639)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 640)				HX_VARI_NAME( Int,this5,"this") = (int)0;
HXDLIN( 640)				HX_VARI( Int,bgra) = this5;
HXDLIN( 640)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 640)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 641)				return pixel;
            			}
            		}
HXLINE( 637)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageDataUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","getPixels",0xab3d94f5,"lime.graphics.utils.ImageDataUtil.getPixels","lime/graphics/utils/ImageDataUtil.hx",648,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(format,"format")
HXLINE( 650)		Bool _hx_tmp = hx::IsNull( image->buffer->data );
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 650)			return null();
            		}
HXLINE( 652)		Float _hx_tmp1 = (rect->width * rect->height);
HXDLIN( 652)		HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE( 653)		HX_VARI(  ::haxe::io::Bytes,bytes) = ::haxe::io::Bytes_obj::alloc((length * (int)4));
HXLINE( 656)		Bool _hx_tmp2 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 656)		if (_hx_tmp2) {
HXLINE( 656)			 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(image);
HXDLIN( 656)			 ::hx::Object * _hx_tmp4 = hx::DynamicPtr(rect);
HXDLIN( 656)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_get_pixels(_hx_tmp3,_hx_tmp4,format,hx::DynamicPtr(bytes));
            		}
            		else {
HXLINE( 660)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 661)			HX_VARI( Int,sourceFormat) = image->buffer->format;
HXLINE( 662)			HX_VARI( Bool,premultiplied) = image->buffer->premultiplied;
HXLINE( 664)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,dataView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(image,rect);
HXLINE( 665)			HX_VAR( Int,position);
HXDLIN( 665)			HX_VAR( Int,argb);
HXDLIN( 665)			HX_VAR( Int,bgra);
HXDLIN( 665)			HX_VAR( Int,pixel);
HXLINE( 666)			HX_VARI( Int,destPosition) = (int)0;
HXLINE( 668)			{
HXLINE( 668)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 668)				HX_VARI( Int,_g) = dataView->height;
HXDLIN( 668)				while((_g1 < _g)){
HXLINE( 668)					HX_VARI( Int,y) = _g1++;
HXLINE( 670)					position = (dataView->offset + (dataView->stride * y));
HXLINE( 672)					{
HXLINE( 672)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 672)						HX_VARI( Int,_g2) = dataView->width;
HXDLIN( 672)						while((_g3 < _g2)){
HXLINE( 672)							++_g3;
HXLINE( 674)							{
HXLINE( 674)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 674)										Int byteOffset = (data->byteOffset + position);
HXDLIN( 674)										Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN( 674)										Int r = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN( 674)										Int byteOffset1 = (data->byteOffset + (position + (int)1));
HXDLIN( 674)										Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN( 674)										Int g = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN( 674)										Int byteOffset2 = (data->byteOffset + (position + (int)2));
HXDLIN( 674)										Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN( 674)										Int b = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN( 674)										Int byteOffset3 = (data->byteOffset + (position + (int)3));
HXDLIN( 674)										Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN( 674)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp8 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 674)										Int byteOffset4 = (data->byteOffset + (position + (int)1));
HXDLIN( 674)										Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN( 674)										Int r1 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN( 674)										Int byteOffset5 = (data->byteOffset + (position + (int)2));
HXDLIN( 674)										Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN( 674)										Int g1 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 674)										Int byteOffset6 = (data->byteOffset + (position + (int)3));
HXDLIN( 674)										Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN( 674)										Int b1 = ((int)_hx_tmp11 & (int)(int)255);
HXDLIN( 674)										Int byteOffset7 = (data->byteOffset + position);
HXDLIN( 674)										Int _hx_tmp12 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN( 674)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp12 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 674)										Int byteOffset8 = (data->byteOffset + (position + (int)2));
HXDLIN( 674)										Int _hx_tmp13 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN( 674)										Int r2 = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN( 674)										Int byteOffset9 = (data->byteOffset + (position + (int)1));
HXDLIN( 674)										Int _hx_tmp14 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN( 674)										Int g2 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 674)										Int byteOffset10 = (data->byteOffset + position);
HXDLIN( 674)										Int _hx_tmp15 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN( 674)										Int b2 = ((int)_hx_tmp15 & (int)(int)255);
HXDLIN( 674)										Int byteOffset11 = (data->byteOffset + (position + (int)3));
HXDLIN( 674)										Int _hx_tmp16 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN( 674)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp16 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 674)								if (premultiplied) {
HXLINE( 674)									Bool _hx_tmp17;
HXDLIN( 674)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 674)										_hx_tmp17 = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 674)										_hx_tmp17 = false;
            									}
HXDLIN( 674)									if (_hx_tmp17) {
HXLINE( 674)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 674)										{
HXLINE( 674)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 674)											Float _hx_tmp18 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 674)											Int idx = ::Math_obj::round(_hx_tmp18);
HXDLIN( 674)											Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN( 674)											Int _hx_tmp19 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN( 674)											Int r3 = ((int)_hx_tmp19 & (int)(int)255);
HXDLIN( 674)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 674)											Float _hx_tmp20 = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 674)											Int idx1 = ::Math_obj::round(_hx_tmp20);
HXDLIN( 674)											Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN( 674)											Int _hx_tmp21 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN( 674)											Int g3 = ((int)_hx_tmp21 & (int)(int)255);
HXDLIN( 674)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 674)											Float _hx_tmp22 = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 674)											Int idx2 = ::Math_obj::round(_hx_tmp22);
HXDLIN( 674)											Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN( 674)											Int _hx_tmp23 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN( 674)											Int _hx_tmp24 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp23 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 674)											Int _hx_tmp25 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN( 674)											pixel = ((int)_hx_tmp24 | (int)_hx_tmp25);
            										}
            									}
            								}
            							}
HXLINE( 676)							switch((int)(format)){
            								case (int)1: {
HXLINE( 678)									HX_VARI_NAME( Int,this4,"this") = (int)0;
HXDLIN( 678)									HX_VARI_NAME( Int,argb1,"argb") = this4;
HXDLIN( 678)									argb1 = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 678)									argb = argb1;
HXDLIN( 678)									pixel = argb;
            								}
            								break;
            								case (int)2: {
HXLINE( 679)									HX_VARI_NAME( Int,this5,"this") = (int)0;
HXDLIN( 679)									HX_VARI_NAME( Int,bgra1,"bgra") = this5;
HXDLIN( 679)									bgra1 = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 679)									bgra = bgra1;
HXDLIN( 679)									pixel = bgra;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 684)							{
HXLINE( 684)								Int pos = destPosition++;
HXDLIN( 684)								bytes->b[pos] = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
            							}
HXLINE( 685)							{
HXLINE( 685)								Int pos1 = destPosition++;
HXDLIN( 685)								bytes->b[pos1] = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
            							}
HXLINE( 686)							{
HXLINE( 686)								Int pos2 = destPosition++;
HXDLIN( 686)								bytes->b[pos2] = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
            							}
HXLINE( 687)							{
HXLINE( 687)								Int pos3 = destPosition++;
HXDLIN( 687)								bytes->b[pos3] = ((int)pixel & (int)(int)255);
            							}
HXLINE( 689)							hx::AddEq(position,(int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 697)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,getPixels,return )

void ImageDataUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,Int redMultiplier,Int greenMultiplier,Int blueMultiplier,Int alphaMultiplier){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","merge",0xf0318e4a,"lime.graphics.utils.ImageDataUtil.merge","lime/graphics/utils/ImageDataUtil.hx",702,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE( 704)		Bool _hx_tmp;
HXDLIN( 704)		Bool _hx_tmp1 = hx::IsNotNull( image->buffer->data );
HXDLIN( 704)		if (_hx_tmp1) {
HXLINE( 704)			_hx_tmp = hx::IsNull( sourceImage->buffer->data );
            		}
            		else {
HXLINE( 704)			_hx_tmp = true;
            		}
HXDLIN( 704)		if (_hx_tmp) {
HXLINE( 704)			return;
            		}
HXLINE( 707)		Bool _hx_tmp2 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 707)		if (_hx_tmp2) {
HXLINE( 707)			 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(image);
HXDLIN( 707)			 ::hx::Object * _hx_tmp4 = hx::DynamicPtr(sourceImage);
HXDLIN( 707)			 ::hx::Object * _hx_tmp5 = hx::DynamicPtr(sourceRect);
HXDLIN( 707)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_merge(_hx_tmp3,_hx_tmp4,_hx_tmp5,hx::DynamicPtr(destPoint),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            		}
            		else {
HXLINE( 711)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,sourceView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(sourceImage,sourceRect);
HXLINE( 712)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,destView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(image, ::lime::math::Rectangle_obj::__new(destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 714)			HX_VARI(  ::lime::utils::ArrayBufferView,sourceData) = sourceImage->buffer->data;
HXLINE( 715)			HX_VARI(  ::lime::utils::ArrayBufferView,destData) = image->buffer->data;
HXLINE( 716)			HX_VARI( Int,sourceFormat) = sourceImage->buffer->format;
HXLINE( 717)			HX_VARI( Int,destFormat) = image->buffer->format;
HXLINE( 718)			HX_VARI( Bool,sourcePremultiplied) = sourceImage->buffer->premultiplied;
HXLINE( 719)			HX_VARI( Bool,destPremultiplied) = image->buffer->premultiplied;
HXLINE( 721)			HX_VAR( Int,sourcePosition);
HXDLIN( 721)			HX_VAR( Int,destPosition);
HXDLIN( 721)			HX_VAR( Int,sourcePixel);
HXDLIN( 721)			HX_VAR( Int,destPixel);
HXLINE( 723)			{
HXLINE( 723)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 723)				HX_VARI( Int,_g) = destView->height;
HXDLIN( 723)				while((_g1 < _g)){
HXLINE( 723)					HX_VARI( Int,y) = _g1++;
HXLINE( 725)					sourcePosition = (sourceView->offset + (sourceView->stride * y));
HXLINE( 726)					destPosition = (destView->offset + (destView->stride * y));
HXLINE( 728)					{
HXLINE( 728)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 728)						HX_VARI( Int,_g2) = destView->width;
HXDLIN( 728)						while((_g3 < _g2)){
HXLINE( 728)							++_g3;
HXLINE( 730)							{
HXLINE( 730)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 730)										Int byteOffset = (sourceData->byteOffset + sourcePosition);
HXDLIN( 730)										Int _hx_tmp6 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset);
HXDLIN( 730)										Int r = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN( 730)										Int byteOffset1 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 730)										Int _hx_tmp7 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset1);
HXDLIN( 730)										Int g = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN( 730)										Int byteOffset2 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 730)										Int _hx_tmp8 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset2);
HXDLIN( 730)										Int b = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN( 730)										Int byteOffset3 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 730)										Int _hx_tmp9 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset3);
HXDLIN( 730)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp9 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 730)										Int byteOffset4 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 730)										Int _hx_tmp10 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset4);
HXDLIN( 730)										Int r1 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 730)										Int byteOffset5 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 730)										Int _hx_tmp11 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset5);
HXDLIN( 730)										Int g1 = ((int)_hx_tmp11 & (int)(int)255);
HXDLIN( 730)										Int byteOffset6 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 730)										Int _hx_tmp12 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset6);
HXDLIN( 730)										Int b1 = ((int)_hx_tmp12 & (int)(int)255);
HXDLIN( 730)										Int byteOffset7 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 730)										Int _hx_tmp13 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset7);
HXDLIN( 730)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp13 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 730)										Int byteOffset8 = (sourceData->byteOffset + (sourcePosition + (int)2));
HXDLIN( 730)										Int _hx_tmp14 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset8);
HXDLIN( 730)										Int r2 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 730)										Int byteOffset9 = (sourceData->byteOffset + (sourcePosition + (int)1));
HXDLIN( 730)										Int _hx_tmp15 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset9);
HXDLIN( 730)										Int g2 = ((int)_hx_tmp15 & (int)(int)255);
HXDLIN( 730)										Int byteOffset10 = (sourceData->byteOffset + sourcePosition);
HXDLIN( 730)										Int _hx_tmp16 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset10);
HXDLIN( 730)										Int b2 = ((int)_hx_tmp16 & (int)(int)255);
HXDLIN( 730)										Int byteOffset11 = (sourceData->byteOffset + (sourcePosition + (int)3));
HXDLIN( 730)										Int _hx_tmp17 = ::__hxcpp_memory_get_byte(sourceData->buffer->b,byteOffset11);
HXDLIN( 730)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp17 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 730)								if (sourcePremultiplied) {
HXLINE( 730)									Bool _hx_tmp18;
HXDLIN( 730)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 730)										_hx_tmp18 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 730)										_hx_tmp18 = false;
            									}
HXDLIN( 730)									if (_hx_tmp18) {
HXLINE( 730)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 730)										{
HXLINE( 730)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 730)											Float _hx_tmp19 = (((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 730)											Int idx = ::Math_obj::round(_hx_tmp19);
HXDLIN( 730)											Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN( 730)											Int _hx_tmp20 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN( 730)											Int r3 = ((int)_hx_tmp20 & (int)(int)255);
HXDLIN( 730)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 730)											Float _hx_tmp21 = (((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 730)											Int idx1 = ::Math_obj::round(_hx_tmp21);
HXDLIN( 730)											Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN( 730)											Int _hx_tmp22 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN( 730)											Int g3 = ((int)_hx_tmp22 & (int)(int)255);
HXDLIN( 730)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 730)											Float _hx_tmp23 = (((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 730)											Int idx2 = ::Math_obj::round(_hx_tmp23);
HXDLIN( 730)											Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN( 730)											Int _hx_tmp24 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN( 730)											Int _hx_tmp25 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp24 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 730)											Int _hx_tmp26 = ((int)((int)sourcePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 730)											sourcePixel = ((int)_hx_tmp25 | (int)_hx_tmp26);
            										}
            									}
            								}
            							}
HXLINE( 731)							{
HXLINE( 731)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 731)										Int byteOffset15 = (destData->byteOffset + destPosition);
HXDLIN( 731)										Int _hx_tmp27 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset15);
HXDLIN( 731)										Int r4 = ((int)_hx_tmp27 & (int)(int)255);
HXDLIN( 731)										Int byteOffset16 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 731)										Int _hx_tmp28 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset16);
HXDLIN( 731)										Int g4 = ((int)_hx_tmp28 & (int)(int)255);
HXDLIN( 731)										Int byteOffset17 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 731)										Int _hx_tmp29 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset17);
HXDLIN( 731)										Int b3 = ((int)_hx_tmp29 & (int)(int)255);
HXDLIN( 731)										Int byteOffset18 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 731)										Int _hx_tmp30 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset18);
HXDLIN( 731)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp30 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 731)										Int byteOffset19 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 731)										Int _hx_tmp31 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset19);
HXDLIN( 731)										Int r5 = ((int)_hx_tmp31 & (int)(int)255);
HXDLIN( 731)										Int byteOffset20 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 731)										Int _hx_tmp32 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset20);
HXDLIN( 731)										Int g5 = ((int)_hx_tmp32 & (int)(int)255);
HXDLIN( 731)										Int byteOffset21 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 731)										Int _hx_tmp33 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset21);
HXDLIN( 731)										Int b4 = ((int)_hx_tmp33 & (int)(int)255);
HXDLIN( 731)										Int byteOffset22 = (destData->byteOffset + destPosition);
HXDLIN( 731)										Int _hx_tmp34 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset22);
HXDLIN( 731)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp34 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 731)										Int byteOffset23 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 731)										Int _hx_tmp35 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset23);
HXDLIN( 731)										Int r6 = ((int)_hx_tmp35 & (int)(int)255);
HXDLIN( 731)										Int byteOffset24 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 731)										Int _hx_tmp36 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset24);
HXDLIN( 731)										Int g6 = ((int)_hx_tmp36 & (int)(int)255);
HXDLIN( 731)										Int byteOffset25 = (destData->byteOffset + destPosition);
HXDLIN( 731)										Int _hx_tmp37 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset25);
HXDLIN( 731)										Int b5 = ((int)_hx_tmp37 & (int)(int)255);
HXDLIN( 731)										Int byteOffset26 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 731)										Int _hx_tmp38 = ::__hxcpp_memory_get_byte(destData->buffer->b,byteOffset26);
HXDLIN( 731)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp38 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 731)								if (destPremultiplied) {
HXLINE( 731)									Bool _hx_tmp39;
HXDLIN( 731)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 731)										_hx_tmp39 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 731)										_hx_tmp39 = false;
            									}
HXDLIN( 731)									if (_hx_tmp39) {
HXLINE( 731)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 731)										{
HXLINE( 731)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 731)											Float _hx_tmp40 = (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 731)											Int idx3 = ::Math_obj::round(_hx_tmp40);
HXDLIN( 731)											Int byteOffset27 = (this4->byteOffset + idx3);
HXDLIN( 731)											Int _hx_tmp41 = ::__hxcpp_memory_get_byte(this4->buffer->b,byteOffset27);
HXDLIN( 731)											Int r7 = ((int)_hx_tmp41 & (int)(int)255);
HXDLIN( 731)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 731)											Float _hx_tmp42 = (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 731)											Int idx4 = ::Math_obj::round(_hx_tmp42);
HXDLIN( 731)											Int byteOffset28 = (this5->byteOffset + idx4);
HXDLIN( 731)											Int _hx_tmp43 = ::__hxcpp_memory_get_byte(this5->buffer->b,byteOffset28);
HXDLIN( 731)											Int g7 = ((int)_hx_tmp43 & (int)(int)255);
HXDLIN( 731)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 731)											Float _hx_tmp44 = (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN( 731)											Int idx5 = ::Math_obj::round(_hx_tmp44);
HXDLIN( 731)											Int byteOffset29 = (this6->byteOffset + idx5);
HXDLIN( 731)											Int _hx_tmp45 = ::__hxcpp_memory_get_byte(this6->buffer->b,byteOffset29);
HXDLIN( 731)											Int _hx_tmp46 = ((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp45 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 731)											Int _hx_tmp47 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 731)											destPixel = ((int)_hx_tmp46 | (int)_hx_tmp47);
            										}
            									}
            								}
            							}
HXLINE( 733)							{
HXLINE( 733)								HX_VARI( Int,value) = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * redMultiplier) + (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ((int)256 - redMultiplier))) / (Float)(int)256));
HXDLIN( 733)								Int _hx_tmp48 = ((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 733)								Int _hx_tmp49 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 733)								destPixel = ((int)_hx_tmp48 | (int)_hx_tmp49);
            							}
HXLINE( 734)							{
HXLINE( 734)								HX_VARI_NAME( Int,value1,"value") = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * greenMultiplier) + (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ((int)256 - greenMultiplier))) / (Float)(int)256));
HXDLIN( 734)								Int _hx_tmp50 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 734)								Int _hx_tmp51 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 734)								destPixel = ((int)_hx_tmp50 | (int)_hx_tmp51);
            							}
HXLINE( 735)							{
HXLINE( 735)								HX_VARI_NAME( Int,value2,"value") = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * blueMultiplier) + (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ((int)256 - blueMultiplier))) / (Float)(int)256));
HXDLIN( 735)								Int _hx_tmp52 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8));
HXDLIN( 735)								Int _hx_tmp53 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 735)								destPixel = ((int)_hx_tmp52 | (int)_hx_tmp53);
            							}
HXLINE( 736)							{
HXLINE( 736)								HX_VARI_NAME( Int,value3,"value") = ::Std_obj::_hx_int(((Float)((((int)sourcePixel & (int)(int)255) * alphaMultiplier) + (((int)destPixel & (int)(int)255) * ((int)256 - alphaMultiplier))) / (Float)(int)256));
HXDLIN( 736)								Int _hx_tmp54 = ((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 736)								destPixel = ((int)_hx_tmp54 | (int)((int)value3 & (int)(int)255));
            							}
HXLINE( 738)							{
HXLINE( 738)								if (destPremultiplied) {
HXLINE( 738)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 738)										Bool _hx_tmp55 = (destPixel != (int)0);
HXDLIN( 738)										if (_hx_tmp55) {
HXLINE( 738)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 738)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 738)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 738)											Int byteOffset30 = (this7->byteOffset + (((int)destPixel & (int)(int)255) * (int)4));
HXDLIN( 738)											 ::Dynamic _hx_tmp56 = ::__hxcpp_memory_get_ui32(this7->buffer->b,byteOffset30);
HXDLIN( 738)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp56;
HXDLIN( 738)											{
HXLINE( 738)												Int _hx_tmp57 = ((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 738)												Int _hx_tmp58 = ((int)((int)destPixel & (int)(int)255) & (int)(int)255);
HXDLIN( 738)												destPixel = ((int)_hx_tmp57 | (int)_hx_tmp58);
            											}
            										}
            									}
            								}
HXDLIN( 738)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 738)										{
HXLINE( 738)											HX_VARI( Int,val) = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset31 = (destData->byteOffset + destPosition);
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset31,val);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset32 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset32,val1);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset33 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset33,val2);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val3,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset34 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset34,val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val4,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset35 = (destData->byteOffset + destPosition);
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset35,val4);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset36 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset36,val5);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset37 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset37,val6);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset38 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset38,val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset39 = (destData->byteOffset + destPosition);
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset39,val8);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset40 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset40,val9);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset41 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset41,val10);
            											}
            										}
HXDLIN( 738)										{
HXLINE( 738)											HX_VARI_NAME( Int,val11,"val") = ((int)destPixel & (int)(int)255);
HXDLIN( 738)											{
HXLINE( 738)												Int byteOffset42 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN( 738)												::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset42,val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 740)							hx::AddEq(sourcePosition,(int)4);
HXLINE( 741)							hx::AddEq(destPosition,(int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 749)		image->dirty = true;
HXLINE( 750)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,merge,(void))

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","multiplyAlpha",0xb898c02c,"lime.graphics.utils.ImageDataUtil.multiplyAlpha","lime/graphics/utils/ImageDataUtil.hx",755,0x494d921f)
            	HX_STACK_ARG(image,"image")
HXLINE( 757)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 758)		Bool _hx_tmp;
HXDLIN( 758)		Bool _hx_tmp1 = hx::IsNotNull( data );
HXDLIN( 758)		if (_hx_tmp1) {
HXLINE( 758)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE( 758)			_hx_tmp = true;
            		}
HXDLIN( 758)		if (_hx_tmp) {
HXLINE( 758)			return;
            		}
HXLINE( 761)		Bool _hx_tmp2 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 761)		if (_hx_tmp2) {
HXLINE( 761)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_multiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE( 765)			HX_VARI( Int,format) = image->buffer->format;
HXLINE( 766)			Float _hx_tmp3 = ((Float)data->length / (Float)(int)4);
HXDLIN( 766)			HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE( 767)			HX_VAR( Int,pixel);
HXLINE( 769)			{
HXLINE( 769)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 769)				while((_g1 < length)){
HXLINE( 769)					HX_VARI( Int,i) = _g1++;
HXLINE( 771)					{
HXLINE( 771)						HX_VARI( Int,offset) = (i * (int)4);
HXDLIN( 771)						switch((int)(format)){
            							case (int)0: {
HXLINE( 771)								Int byteOffset = (data->byteOffset + offset);
HXDLIN( 771)								Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN( 771)								Int r = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN( 771)								Int byteOffset1 = (data->byteOffset + (offset + (int)1));
HXDLIN( 771)								Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN( 771)								Int g = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN( 771)								Int byteOffset2 = (data->byteOffset + (offset + (int)2));
HXDLIN( 771)								Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN( 771)								Int b = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN( 771)								Int byteOffset3 = (data->byteOffset + (offset + (int)3));
HXDLIN( 771)								Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN( 771)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp7 & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE( 771)								Int byteOffset4 = (data->byteOffset + (offset + (int)1));
HXDLIN( 771)								Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN( 771)								Int r1 = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN( 771)								Int byteOffset5 = (data->byteOffset + (offset + (int)2));
HXDLIN( 771)								Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN( 771)								Int g1 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN( 771)								Int byteOffset6 = (data->byteOffset + (offset + (int)3));
HXDLIN( 771)								Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN( 771)								Int b1 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 771)								Int byteOffset7 = (data->byteOffset + offset);
HXDLIN( 771)								Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN( 771)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp11 & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE( 771)								Int byteOffset8 = (data->byteOffset + (offset + (int)2));
HXDLIN( 771)								Int _hx_tmp12 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN( 771)								Int r2 = ((int)_hx_tmp12 & (int)(int)255);
HXDLIN( 771)								Int byteOffset9 = (data->byteOffset + (offset + (int)1));
HXDLIN( 771)								Int _hx_tmp13 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN( 771)								Int g2 = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN( 771)								Int byteOffset10 = (data->byteOffset + offset);
HXDLIN( 771)								Int _hx_tmp14 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN( 771)								Int b2 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN( 771)								Int byteOffset11 = (data->byteOffset + (offset + (int)3));
HXDLIN( 771)								Int _hx_tmp15 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN( 771)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp15 & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
            					}
HXLINE( 772)					{
HXLINE( 772)						HX_VARI_NAME( Int,offset1,"offset") = (i * (int)4);
HXDLIN( 772)						if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE( 772)							Bool _hx_tmp16 = (pixel != (int)0);
HXDLIN( 772)							if (_hx_tmp16) {
HXLINE( 772)								pixel = (int)0;
            							}
            						}
            						else {
HXLINE( 772)							if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE( 772)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 772)								Int byteOffset12 = (this1->byteOffset + (((int)pixel & (int)(int)255) * (int)4));
HXDLIN( 772)								 ::Dynamic _hx_tmp17 = ::__hxcpp_memory_get_ui32(this1->buffer->b,byteOffset12);
HXDLIN( 772)								::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp17;
HXDLIN( 772)								{
HXLINE( 772)									Int _hx_tmp18 = ((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN( 772)									Int _hx_tmp19 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN( 772)									pixel = ((int)_hx_tmp18 | (int)_hx_tmp19);
            								}
            							}
            						}
HXDLIN( 772)						switch((int)(format)){
            							case (int)0: {
HXLINE( 772)								{
HXLINE( 772)									HX_VARI( Int,val) = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset13 = (data->byteOffset + offset1);
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset13,val);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset14 = (data->byteOffset + (offset1 + (int)1));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset14,val1);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset15 = (data->byteOffset + (offset1 + (int)2));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset15,val2);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val3,"val") = ((int)pixel & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset16 = (data->byteOffset + (offset1 + (int)3));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset16,val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val4,"val") = ((int)pixel & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset17 = (data->byteOffset + offset1);
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset17,val4);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset18 = (data->byteOffset + (offset1 + (int)1));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset18,val5);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset19 = (data->byteOffset + (offset1 + (int)2));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset19,val6);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset20 = (data->byteOffset + (offset1 + (int)3));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset20,val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset21 = (data->byteOffset + offset1);
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset21,val8);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset22 = (data->byteOffset + (offset1 + (int)1));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset22,val9);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset23 = (data->byteOffset + (offset1 + (int)2));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset23,val10);
            									}
            								}
HXDLIN( 772)								{
HXLINE( 772)									HX_VARI_NAME( Int,val11,"val") = ((int)pixel & (int)(int)255);
HXDLIN( 772)									{
HXLINE( 772)										Int byteOffset24 = (data->byteOffset + (offset1 + (int)3));
HXDLIN( 772)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset24,val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE( 778)		image->buffer->premultiplied = true;
HXLINE( 779)		image->dirty = true;
HXLINE( 780)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::resize( ::lime::graphics::Image image,Int newWidth,Int newHeight){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","resize",0x3b9e8e22,"lime.graphics.utils.ImageDataUtil.resize","lime/graphics/utils/ImageDataUtil.hx",785,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(newWidth,"newWidth")
            	HX_STACK_ARG(newHeight,"newHeight")
HXLINE( 787)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) = image->buffer;
HXLINE( 788)		Bool _hx_tmp;
HXDLIN( 788)		if ((buffer->width == newWidth)) {
HXLINE( 788)			_hx_tmp = (buffer->height == newHeight);
            		}
            		else {
HXLINE( 788)			_hx_tmp = false;
            		}
HXDLIN( 788)		if (_hx_tmp) {
HXLINE( 788)			return;
            		}
HXLINE( 789)		HX_VARI(  ::Dynamic,elements) = ((newWidth * newHeight) * (int)4);
HXDLIN( 789)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 789)		Bool _hx_tmp1 = hx::IsNotNull( elements );
HXDLIN( 789)		if (_hx_tmp1) {
HXLINE( 789)			this1 =  ::lime::utils::ArrayBufferView_obj::__new(elements,(int)4);
            		}
            		else {
HXLINE( 789)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 789)		HX_VARI(  ::lime::graphics::ImageBuffer,newBuffer) =  ::lime::graphics::ImageBuffer_obj::__new(this1,newWidth,newHeight,null(),null());
HXLINE( 792)		Bool _hx_tmp2 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 792)		if (_hx_tmp2) {
HXLINE( 792)			 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(image);
HXDLIN( 792)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_resize(_hx_tmp3,hx::DynamicPtr(newBuffer),newWidth,newHeight);
            		}
            		else {
HXLINE( 796)			HX_VARI( Int,imageWidth) = image->width;
HXLINE( 797)			HX_VARI( Int,imageHeight) = image->height;
HXLINE( 799)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->get_data();
HXLINE( 800)			HX_VARI(  ::lime::utils::ArrayBufferView,newData) = newBuffer->data;
HXLINE( 801)			HX_VAR( Int,sourceIndex);
HXDLIN( 801)			HX_VAR( Int,sourceIndexX);
HXDLIN( 801)			HX_VAR( Int,sourceIndexY);
HXDLIN( 801)			HX_VAR( Int,sourceIndexXY);
HXDLIN( 801)			HX_VAR( Int,index);
HXLINE( 802)			HX_VAR( Int,sourceX);
HXDLIN( 802)			HX_VAR( Int,sourceY);
HXLINE( 803)			HX_VAR( Float,u);
HXDLIN( 803)			HX_VAR( Float,v);
HXDLIN( 803)			HX_VAR( Float,uRatio);
HXDLIN( 803)			HX_VAR( Float,vRatio);
HXDLIN( 803)			HX_VAR( Float,uOpposite);
HXDLIN( 803)			HX_VAR( Float,vOpposite);
HXLINE( 805)			{
HXLINE( 805)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 805)				while((_g1 < newHeight)){
HXLINE( 805)					HX_VARI( Int,y) = _g1++;
HXLINE( 807)					{
HXLINE( 807)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 807)						while((_g3 < newWidth)){
HXLINE( 807)							HX_VARI( Int,x) = _g3++;
HXLINE( 811)							u = ((((Float)(x + ((Float)0.5)) / (Float)newWidth) * imageWidth) - ((Float)0.5));
HXLINE( 812)							v = ((((Float)(y + ((Float)0.5)) / (Float)newHeight) * imageHeight) - ((Float)0.5));
HXLINE( 814)							sourceX = ::Std_obj::_hx_int(u);
HXLINE( 815)							sourceY = ::Std_obj::_hx_int(v);
HXLINE( 817)							sourceIndex = (((sourceY * imageWidth) + sourceX) * (int)4);
HXLINE( 818)							if ((sourceX < (imageWidth - (int)1))) {
HXLINE( 818)								sourceIndexX = (sourceIndex + (int)4);
            							}
            							else {
HXLINE( 818)								sourceIndexX = sourceIndex;
            							}
HXLINE( 819)							if ((sourceY < (imageHeight - (int)1))) {
HXLINE( 819)								sourceIndexY = (sourceIndex + (imageWidth * (int)4));
            							}
            							else {
HXLINE( 819)								sourceIndexY = sourceIndex;
            							}
HXLINE( 820)							if ((sourceIndexX != sourceIndex)) {
HXLINE( 820)								sourceIndexXY = (sourceIndexY + (int)4);
            							}
            							else {
HXLINE( 820)								sourceIndexXY = sourceIndexY;
            							}
HXLINE( 822)							index = (((y * newWidth) + x) * (int)4);
HXLINE( 824)							uRatio = (u - sourceX);
HXLINE( 825)							vRatio = (v - sourceY);
HXLINE( 826)							uOpposite = ((int)1 - uRatio);
HXLINE( 827)							vOpposite = ((int)1 - vRatio);
HXLINE( 829)							{
HXLINE( 829)								Int byteOffset = (data->byteOffset + sourceIndex);
HXDLIN( 829)								Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN( 829)								HX_VARI_NAME( Int,_hx_int,"int") = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN( 829)								Float _hx_tmp5;
HXDLIN( 829)								if ((_hx_int < (int)0)) {
HXLINE( 829)									_hx_tmp5 = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE( 829)									_hx_tmp5 = (_hx_int + ((Float)0.0));
            								}
HXDLIN( 829)								Float _hx_tmp6 = (_hx_tmp5 * uOpposite);
HXDLIN( 829)								Int byteOffset1 = (data->byteOffset + sourceIndexX);
HXDLIN( 829)								Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN( 829)								HX_VARI_NAME( Int,int1,"int") = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN( 829)								Float _hx_tmp8;
HXDLIN( 829)								if ((int1 < (int)0)) {
HXLINE( 829)									_hx_tmp8 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE( 829)									_hx_tmp8 = (int1 + ((Float)0.0));
            								}
HXDLIN( 829)								Float _hx_tmp9 = ((_hx_tmp6 + (_hx_tmp8 * uRatio)) * vOpposite);
HXDLIN( 829)								Int byteOffset2 = (data->byteOffset + sourceIndexY);
HXDLIN( 829)								Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN( 829)								HX_VARI_NAME( Int,int2,"int") = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN( 829)								Float _hx_tmp11;
HXDLIN( 829)								if ((int2 < (int)0)) {
HXLINE( 829)									_hx_tmp11 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE( 829)									_hx_tmp11 = (int2 + ((Float)0.0));
            								}
HXDLIN( 829)								Float _hx_tmp12 = (_hx_tmp11 * uOpposite);
HXDLIN( 829)								Int byteOffset3 = (data->byteOffset + sourceIndexXY);
HXDLIN( 829)								Int _hx_tmp13 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN( 829)								HX_VARI_NAME( Int,int3,"int") = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN( 829)								Float _hx_tmp14;
HXDLIN( 829)								if ((int3 < (int)0)) {
HXLINE( 829)									_hx_tmp14 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE( 829)									_hx_tmp14 = (int3 + ((Float)0.0));
            								}
HXDLIN( 829)								HX_VARI( Int,val) = ::Std_obj::_hx_int((_hx_tmp9 + ((_hx_tmp12 + (_hx_tmp14 * uRatio)) * vRatio)));
HXDLIN( 829)								{
HXLINE( 829)									Int byteOffset4 = (newData->byteOffset + index);
HXDLIN( 829)									::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset4,val);
            								}
            							}
HXLINE( 830)							{
HXLINE( 830)								Int byteOffset5 = (data->byteOffset + (sourceIndex + (int)1));
HXDLIN( 830)								Int _hx_tmp15 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN( 830)								HX_VARI_NAME( Int,int4,"int") = ((int)_hx_tmp15 & (int)(int)255);
HXDLIN( 830)								Float _hx_tmp16;
HXDLIN( 830)								if ((int4 < (int)0)) {
HXLINE( 830)									_hx_tmp16 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE( 830)									_hx_tmp16 = (int4 + ((Float)0.0));
            								}
HXDLIN( 830)								Float _hx_tmp17 = (_hx_tmp16 * uOpposite);
HXDLIN( 830)								Int byteOffset6 = (data->byteOffset + (sourceIndexX + (int)1));
HXDLIN( 830)								Int _hx_tmp18 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN( 830)								HX_VARI_NAME( Int,int5,"int") = ((int)_hx_tmp18 & (int)(int)255);
HXDLIN( 830)								Float _hx_tmp19;
HXDLIN( 830)								if ((int5 < (int)0)) {
HXLINE( 830)									_hx_tmp19 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE( 830)									_hx_tmp19 = (int5 + ((Float)0.0));
            								}
HXDLIN( 830)								Float _hx_tmp20 = ((_hx_tmp17 + (_hx_tmp19 * uRatio)) * vOpposite);
HXDLIN( 830)								Int byteOffset7 = (data->byteOffset + (sourceIndexY + (int)1));
HXDLIN( 830)								Int _hx_tmp21 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN( 830)								HX_VARI_NAME( Int,int6,"int") = ((int)_hx_tmp21 & (int)(int)255);
HXDLIN( 830)								Float _hx_tmp22;
HXDLIN( 830)								if ((int6 < (int)0)) {
HXLINE( 830)									_hx_tmp22 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE( 830)									_hx_tmp22 = (int6 + ((Float)0.0));
            								}
HXDLIN( 830)								Float _hx_tmp23 = (_hx_tmp22 * uOpposite);
HXDLIN( 830)								Int byteOffset8 = (data->byteOffset + (sourceIndexXY + (int)1));
HXDLIN( 830)								Int _hx_tmp24 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN( 830)								HX_VARI_NAME( Int,int7,"int") = ((int)_hx_tmp24 & (int)(int)255);
HXDLIN( 830)								Float _hx_tmp25;
HXDLIN( 830)								if ((int7 < (int)0)) {
HXLINE( 830)									_hx_tmp25 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE( 830)									_hx_tmp25 = (int7 + ((Float)0.0));
            								}
HXDLIN( 830)								HX_VARI_NAME( Int,val1,"val") = ::Std_obj::_hx_int((_hx_tmp20 + ((_hx_tmp23 + (_hx_tmp25 * uRatio)) * vRatio)));
HXDLIN( 830)								{
HXLINE( 830)									Int byteOffset9 = (newData->byteOffset + (index + (int)1));
HXDLIN( 830)									::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset9,val1);
            								}
            							}
HXLINE( 831)							{
HXLINE( 831)								Int byteOffset10 = (data->byteOffset + (sourceIndex + (int)2));
HXDLIN( 831)								Int _hx_tmp26 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN( 831)								HX_VARI_NAME( Int,int8,"int") = ((int)_hx_tmp26 & (int)(int)255);
HXDLIN( 831)								Float _hx_tmp27;
HXDLIN( 831)								if ((int8 < (int)0)) {
HXLINE( 831)									_hx_tmp27 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE( 831)									_hx_tmp27 = (int8 + ((Float)0.0));
            								}
HXDLIN( 831)								Float _hx_tmp28 = (_hx_tmp27 * uOpposite);
HXDLIN( 831)								Int byteOffset11 = (data->byteOffset + (sourceIndexX + (int)2));
HXDLIN( 831)								Int _hx_tmp29 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN( 831)								HX_VARI_NAME( Int,int9,"int") = ((int)_hx_tmp29 & (int)(int)255);
HXDLIN( 831)								Float _hx_tmp30;
HXDLIN( 831)								if ((int9 < (int)0)) {
HXLINE( 831)									_hx_tmp30 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE( 831)									_hx_tmp30 = (int9 + ((Float)0.0));
            								}
HXDLIN( 831)								Float _hx_tmp31 = ((_hx_tmp28 + (_hx_tmp30 * uRatio)) * vOpposite);
HXDLIN( 831)								Int byteOffset12 = (data->byteOffset + (sourceIndexY + (int)2));
HXDLIN( 831)								Int _hx_tmp32 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset12);
HXDLIN( 831)								HX_VARI_NAME( Int,int10,"int") = ((int)_hx_tmp32 & (int)(int)255);
HXDLIN( 831)								Float _hx_tmp33;
HXDLIN( 831)								if ((int10 < (int)0)) {
HXLINE( 831)									_hx_tmp33 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE( 831)									_hx_tmp33 = (int10 + ((Float)0.0));
            								}
HXDLIN( 831)								Float _hx_tmp34 = (_hx_tmp33 * uOpposite);
HXDLIN( 831)								Int byteOffset13 = (data->byteOffset + (sourceIndexXY + (int)2));
HXDLIN( 831)								Int _hx_tmp35 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset13);
HXDLIN( 831)								HX_VARI_NAME( Int,int11,"int") = ((int)_hx_tmp35 & (int)(int)255);
HXDLIN( 831)								Float _hx_tmp36;
HXDLIN( 831)								if ((int11 < (int)0)) {
HXLINE( 831)									_hx_tmp36 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE( 831)									_hx_tmp36 = (int11 + ((Float)0.0));
            								}
HXDLIN( 831)								HX_VARI_NAME( Int,val2,"val") = ::Std_obj::_hx_int((_hx_tmp31 + ((_hx_tmp34 + (_hx_tmp36 * uRatio)) * vRatio)));
HXDLIN( 831)								{
HXLINE( 831)									Int byteOffset14 = (newData->byteOffset + (index + (int)2));
HXDLIN( 831)									::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset14,val2);
            								}
            							}
HXLINE( 835)							Bool _hx_tmp37;
HXDLIN( 835)							Bool _hx_tmp38;
HXDLIN( 835)							Int byteOffset15 = (data->byteOffset + (sourceIndexX + (int)3));
HXDLIN( 835)							Int _hx_tmp39 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset15);
HXDLIN( 835)							if (hx::IsNotEq( ((int)_hx_tmp39 & (int)(int)255),(int)0 )) {
HXLINE( 835)								Int byteOffset16 = (data->byteOffset + (sourceIndexY + (int)3));
HXDLIN( 835)								Int _hx_tmp40 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset16);
HXDLIN( 835)								_hx_tmp38 = hx::IsEq( ((int)_hx_tmp40 & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE( 835)								_hx_tmp38 = true;
            							}
HXDLIN( 835)							if (!(_hx_tmp38)) {
HXLINE( 835)								Int byteOffset17 = (data->byteOffset + (sourceIndexXY + (int)3));
HXDLIN( 835)								Int _hx_tmp41 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset17);
HXDLIN( 835)								_hx_tmp37 = hx::IsEq( ((int)_hx_tmp41 & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE( 835)								_hx_tmp37 = true;
            							}
HXDLIN( 835)							if (_hx_tmp37) {
HXLINE( 837)								Int byteOffset18 = (newData->byteOffset + (index + (int)3));
HXDLIN( 837)								::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset18,(int)0);
            							}
            							else {
HXLINE( 841)								Int byteOffset19 = (data->byteOffset + (sourceIndex + (int)3));
HXDLIN( 841)								Int _hx_tmp42 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset19);
HXDLIN( 841)								HX_VARI_NAME( Int,val3,"val") = ((int)_hx_tmp42 & (int)(int)255);
HXDLIN( 841)								{
HXLINE( 841)									Int byteOffset20 = (newData->byteOffset + (index + (int)3));
HXDLIN( 841)									::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset20,val3);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 851)		buffer->data = newBuffer->data;
HXLINE( 852)		buffer->width = newWidth;
HXLINE( 853)		buffer->height = newHeight;
HXLINE( 862)		image->dirty = true;
HXLINE( 863)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resize,(void))

void ImageDataUtil_obj::resizeBuffer( ::lime::graphics::Image image,Int newWidth,Int newHeight){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","resizeBuffer",0x390004c2,"lime.graphics.utils.ImageDataUtil.resizeBuffer","lime/graphics/utils/ImageDataUtil.hx",868,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(newWidth,"newWidth")
            	HX_STACK_ARG(newHeight,"newHeight")
HXLINE( 870)		HX_VARI(  ::lime::graphics::ImageBuffer,buffer) = image->buffer;
HXLINE( 871)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->get_data();
HXLINE( 872)		HX_VARI(  ::Dynamic,elements) = ((newWidth * newHeight) * (int)4);
HXDLIN( 872)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 872)		Bool _hx_tmp = hx::IsNotNull( elements );
HXDLIN( 872)		if (_hx_tmp) {
HXLINE( 872)			this1 =  ::lime::utils::ArrayBufferView_obj::__new(elements,(int)4);
            		}
            		else {
HXLINE( 872)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 872)		HX_VARI(  ::lime::utils::ArrayBufferView,newData) = this1;
HXLINE( 873)		HX_VAR( Int,sourceIndex);
HXDLIN( 873)		HX_VAR( Int,index);
HXLINE( 875)		{
HXLINE( 875)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 875)			HX_VARI( Int,_g) = buffer->height;
HXDLIN( 875)			while((_g1 < _g)){
HXLINE( 875)				HX_VARI( Int,y) = _g1++;
HXLINE( 877)				{
HXLINE( 877)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 877)					HX_VARI( Int,_g2) = buffer->width;
HXDLIN( 877)					while((_g3 < _g2)){
HXLINE( 877)						HX_VARI( Int,x) = _g3++;
HXLINE( 879)						sourceIndex = (((y * buffer->width) + x) * (int)4);
HXLINE( 880)						index = (((y * newWidth) + x) * (int)4);
HXLINE( 882)						{
HXLINE( 882)							Int byteOffset = (data->byteOffset + sourceIndex);
HXDLIN( 882)							Int _hx_tmp1 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN( 882)							HX_VARI( Int,val) = ((int)_hx_tmp1 & (int)(int)255);
HXDLIN( 882)							{
HXLINE( 882)								Int byteOffset1 = (newData->byteOffset + index);
HXDLIN( 882)								::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset1,val);
            							}
            						}
HXLINE( 883)						{
HXLINE( 883)							Int byteOffset2 = (data->byteOffset + (sourceIndex + (int)1));
HXDLIN( 883)							Int _hx_tmp2 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN( 883)							HX_VARI_NAME( Int,val1,"val") = ((int)_hx_tmp2 & (int)(int)255);
HXDLIN( 883)							{
HXLINE( 883)								Int byteOffset3 = (newData->byteOffset + (index + (int)1));
HXDLIN( 883)								::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset3,val1);
            							}
            						}
HXLINE( 884)						{
HXLINE( 884)							Int byteOffset4 = (data->byteOffset + (sourceIndex + (int)2));
HXDLIN( 884)							Int _hx_tmp3 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN( 884)							HX_VARI_NAME( Int,val2,"val") = ((int)_hx_tmp3 & (int)(int)255);
HXDLIN( 884)							{
HXLINE( 884)								Int byteOffset5 = (newData->byteOffset + (index + (int)2));
HXDLIN( 884)								::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset5,val2);
            							}
            						}
HXLINE( 885)						{
HXLINE( 885)							Int byteOffset6 = (data->byteOffset + (sourceIndex + (int)3));
HXDLIN( 885)							Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN( 885)							HX_VARI_NAME( Int,val3,"val") = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN( 885)							{
HXLINE( 885)								Int byteOffset7 = (newData->byteOffset + (index + (int)3));
HXDLIN( 885)								::__hxcpp_memory_set_byte(newData->buffer->b,byteOffset7,val3);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 891)		buffer->data = newData;
HXLINE( 892)		buffer->width = newWidth;
HXLINE( 893)		buffer->height = newHeight;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resizeBuffer,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","setFormat",0xff73210b,"lime.graphics.utils.ImageDataUtil.setFormat","lime/graphics/utils/ImageDataUtil.hx",898,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(format,"format")
HXLINE( 900)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE( 901)		Bool _hx_tmp = hx::IsNull( data );
HXDLIN( 901)		if (_hx_tmp) {
HXLINE( 901)			return;
            		}
HXLINE( 904)		Bool _hx_tmp1 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN( 904)		if (_hx_tmp1) {
HXLINE( 904)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_set_format(hx::DynamicPtr(image),format);
            		}
            		else {
HXLINE( 908)			HX_VAR( Int,index);
HXLINE( 909)			Float _hx_tmp2 = ((Float)data->length / (Float)(int)4);
HXDLIN( 909)			HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp2);
HXLINE( 910)			HX_VAR( Int,r1);
HXDLIN( 910)			HX_VAR( Int,g1);
HXDLIN( 910)			HX_VAR( Int,b1);
HXDLIN( 910)			HX_VAR( Int,a1);
HXDLIN( 910)			HX_VAR( Int,r2);
HXDLIN( 910)			HX_VAR( Int,g2);
HXDLIN( 910)			HX_VAR( Int,b2);
HXDLIN( 910)			HX_VAR( Int,a2);
HXLINE( 911)			HX_VAR(  ::Dynamic,r);
HXDLIN( 911)			HX_VAR(  ::Dynamic,g);
HXDLIN( 911)			HX_VAR(  ::Dynamic,b);
HXDLIN( 911)			HX_VAR(  ::Dynamic,a);
HXLINE( 913)			{
HXLINE( 913)				HX_VARI( Int,_g) = image->get_format();
HXDLIN( 913)				switch((int)(_g)){
            					case (int)0: {
HXLINE( 917)						r1 = (int)0;
HXLINE( 918)						g1 = (int)1;
HXLINE( 919)						b1 = (int)2;
HXLINE( 920)						a1 = (int)3;
            					}
            					break;
            					case (int)1: {
HXLINE( 924)						r1 = (int)1;
HXLINE( 925)						g1 = (int)2;
HXLINE( 926)						b1 = (int)3;
HXLINE( 927)						a1 = (int)0;
            					}
            					break;
            					case (int)2: {
HXLINE( 931)						r1 = (int)2;
HXLINE( 932)						g1 = (int)1;
HXLINE( 933)						b1 = (int)0;
HXLINE( 934)						a1 = (int)3;
            					}
            					break;
            				}
            			}
HXLINE( 938)			switch((int)(format)){
            				case (int)0: {
HXLINE( 942)					r2 = (int)0;
HXLINE( 943)					g2 = (int)1;
HXLINE( 944)					b2 = (int)2;
HXLINE( 945)					a2 = (int)3;
            				}
            				break;
            				case (int)1: {
HXLINE( 949)					r2 = (int)1;
HXLINE( 950)					g2 = (int)2;
HXLINE( 951)					b2 = (int)3;
HXLINE( 952)					a2 = (int)0;
            				}
            				break;
            				case (int)2: {
HXLINE( 956)					r2 = (int)2;
HXLINE( 957)					g2 = (int)1;
HXLINE( 958)					b2 = (int)0;
HXLINE( 959)					a2 = (int)3;
            				}
            				break;
            			}
HXLINE( 963)			{
HXLINE( 963)				HX_VARI( Int,_g2) = (int)0;
HXDLIN( 963)				while((_g2 < length)){
HXLINE( 963)					HX_VARI( Int,i) = _g2++;
HXLINE( 965)					index = (i * (int)4);
HXLINE( 967)					Int byteOffset = (data->byteOffset + (index + r1));
HXDLIN( 967)					Int _hx_tmp3 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN( 967)					r = ((int)_hx_tmp3 & (int)(int)255);
HXLINE( 968)					Int byteOffset1 = (data->byteOffset + (index + g1));
HXDLIN( 968)					Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN( 968)					g = ((int)_hx_tmp4 & (int)(int)255);
HXLINE( 969)					Int byteOffset2 = (data->byteOffset + (index + b1));
HXDLIN( 969)					Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN( 969)					b = ((int)_hx_tmp5 & (int)(int)255);
HXLINE( 970)					Int byteOffset3 = (data->byteOffset + (index + a1));
HXDLIN( 970)					Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN( 970)					a = ((int)_hx_tmp6 & (int)(int)255);
HXLINE( 972)					{
HXLINE( 972)						HX_VARI( Int,val) = r;
HXDLIN( 972)						{
HXLINE( 972)							Int byteOffset4 = (data->byteOffset + (index + r2));
HXDLIN( 972)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset4,val);
            						}
            					}
HXLINE( 973)					{
HXLINE( 973)						HX_VARI_NAME( Int,val1,"val") = g;
HXDLIN( 973)						{
HXLINE( 973)							Int byteOffset5 = (data->byteOffset + (index + g2));
HXDLIN( 973)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset5,val1);
            						}
            					}
HXLINE( 974)					{
HXLINE( 974)						HX_VARI_NAME( Int,val2,"val") = b;
HXDLIN( 974)						{
HXLINE( 974)							Int byteOffset6 = (data->byteOffset + (index + b2));
HXDLIN( 974)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset6,val2);
            						}
            					}
HXLINE( 975)					{
HXLINE( 975)						HX_VARI_NAME( Int,val3,"val") = a;
HXDLIN( 975)						{
HXLINE( 975)							Int byteOffset7 = (data->byteOffset + (index + a2));
HXDLIN( 975)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset7,val3);
            						}
            					}
            				}
            			}
            		}
HXLINE( 981)		image->buffer->format = format;
HXLINE( 982)		image->dirty = true;
HXLINE( 983)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,Int x,Int y,Int color,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","setPixel",0x7a534b32,"lime.graphics.utils.ImageDataUtil.setPixel","lime/graphics/utils/ImageDataUtil.hx",988,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE( 990)		HX_VAR( Int,pixel);
HXLINE( 992)		switch((int)(format)){
            			case (int)1: {
HXLINE( 994)				HX_VARI( Int,argb) = color;
HXDLIN( 994)				HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN( 994)				HX_VARI( Int,rgba) = this1;
HXDLIN( 994)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 994)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 995)				HX_VARI( Int,bgra) = color;
HXDLIN( 995)				HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN( 995)				HX_VARI_NAME( Int,rgba1,"rgba") = this2;
HXDLIN( 995)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 995)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE( 996)				pixel = color;
            			}
            		}
HXLINE(1002)		HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN(1002)		HX_VARI( Int,source) = this3;
HXLINE(1003)		{
HXLINE(1003)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN(1003)			HX_VARI( Int,offset) = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN(1003)			Int format1 = image->buffer->format;
HXDLIN(1003)			Bool premultiplied = image->buffer->premultiplied;
HXDLIN(1003)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1003)					Int byteOffset = (data->byteOffset + offset);
HXDLIN(1003)					Int _hx_tmp = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN(1003)					Int r = ((int)_hx_tmp & (int)(int)255);
HXDLIN(1003)					Int byteOffset1 = (data->byteOffset + (offset + (int)1));
HXDLIN(1003)					Int _hx_tmp1 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN(1003)					Int g = ((int)_hx_tmp1 & (int)(int)255);
HXDLIN(1003)					Int byteOffset2 = (data->byteOffset + (offset + (int)2));
HXDLIN(1003)					Int _hx_tmp2 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN(1003)					Int b = ((int)_hx_tmp2 & (int)(int)255);
HXDLIN(1003)					Int byteOffset3 = (data->byteOffset + (offset + (int)3));
HXDLIN(1003)					Int _hx_tmp3 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN(1003)					source = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp3 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE(1003)					Int byteOffset4 = (data->byteOffset + (offset + (int)1));
HXDLIN(1003)					Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN(1003)					Int r1 = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN(1003)					Int byteOffset5 = (data->byteOffset + (offset + (int)2));
HXDLIN(1003)					Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN(1003)					Int g1 = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN(1003)					Int byteOffset6 = (data->byteOffset + (offset + (int)3));
HXDLIN(1003)					Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN(1003)					Int b1 = ((int)_hx_tmp6 & (int)(int)255);
HXDLIN(1003)					Int byteOffset7 = (data->byteOffset + offset);
HXDLIN(1003)					Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN(1003)					source = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp7 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE(1003)					Int byteOffset8 = (data->byteOffset + (offset + (int)2));
HXDLIN(1003)					Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN(1003)					Int r2 = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN(1003)					Int byteOffset9 = (data->byteOffset + (offset + (int)1));
HXDLIN(1003)					Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN(1003)					Int g2 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN(1003)					Int byteOffset10 = (data->byteOffset + offset);
HXDLIN(1003)					Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN(1003)					Int b2 = ((int)_hx_tmp10 & (int)(int)255);
HXDLIN(1003)					Int byteOffset11 = (data->byteOffset + (offset + (int)3));
HXDLIN(1003)					Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN(1003)					source = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp11 & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN(1003)			if (premultiplied) {
HXLINE(1003)				Bool _hx_tmp12;
HXDLIN(1003)				if ((((int)source & (int)(int)255) != (int)0)) {
HXLINE(1003)					_hx_tmp12 = (((int)source & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE(1003)					_hx_tmp12 = false;
            				}
HXDLIN(1003)				if (_hx_tmp12) {
HXLINE(1003)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)source & (int)(int)255));
HXDLIN(1003)					{
HXLINE(1003)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1003)						Float _hx_tmp13 = (((int)hx::UShr(source,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1003)						Int idx = ::Math_obj::round(_hx_tmp13);
HXDLIN(1003)						Int byteOffset12 = (this4->byteOffset + idx);
HXDLIN(1003)						Int _hx_tmp14 = ::__hxcpp_memory_get_byte(this4->buffer->b,byteOffset12);
HXDLIN(1003)						Int r3 = ((int)_hx_tmp14 & (int)(int)255);
HXDLIN(1003)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1003)						Float _hx_tmp15 = (((int)hx::UShr(source,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1003)						Int idx1 = ::Math_obj::round(_hx_tmp15);
HXDLIN(1003)						Int byteOffset13 = (this5->byteOffset + idx1);
HXDLIN(1003)						Int _hx_tmp16 = ::__hxcpp_memory_get_byte(this5->buffer->b,byteOffset13);
HXDLIN(1003)						Int g3 = ((int)_hx_tmp16 & (int)(int)255);
HXDLIN(1003)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1003)						Float _hx_tmp17 = (((int)hx::UShr(source,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1003)						Int idx2 = ::Math_obj::round(_hx_tmp17);
HXDLIN(1003)						Int byteOffset14 = (this6->byteOffset + idx2);
HXDLIN(1003)						Int _hx_tmp18 = ::__hxcpp_memory_get_byte(this6->buffer->b,byteOffset14);
HXDLIN(1003)						Int _hx_tmp19 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp18 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN(1003)						Int _hx_tmp20 = ((int)((int)source & (int)(int)255) & (int)(int)255);
HXDLIN(1003)						source = ((int)_hx_tmp19 | (int)_hx_tmp20);
            					}
            				}
            			}
            		}
HXLINE(1005)		{
HXLINE(1005)			HX_VARI( Int,value) = ((int)source & (int)(int)255);
HXDLIN(1005)			Int _hx_tmp21 = ((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN(1005)			pixel = ((int)_hx_tmp21 | (int)((int)value & (int)(int)255));
            		}
HXLINE(1006)		{
HXLINE(1006)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,data1,"data") = image->buffer->data;
HXDLIN(1006)			HX_VARI_NAME( Int,offset1,"offset") = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN(1006)			Int format2 = image->buffer->format;
HXDLIN(1006)			Bool premultiplied1 = image->buffer->premultiplied;
HXDLIN(1006)			if (premultiplied1) {
HXLINE(1006)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1006)					Bool _hx_tmp22 = (pixel != (int)0);
HXDLIN(1006)					if (_hx_tmp22) {
HXLINE(1006)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1006)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1006)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1006)						Int byteOffset15 = (this7->byteOffset + (((int)pixel & (int)(int)255) * (int)4));
HXDLIN(1006)						 ::Dynamic _hx_tmp23 = ::__hxcpp_memory_get_ui32(this7->buffer->b,byteOffset15);
HXDLIN(1006)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp23;
HXDLIN(1006)						{
HXLINE(1006)							Int _hx_tmp24 = ((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN(1006)							Int _hx_tmp25 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN(1006)							pixel = ((int)_hx_tmp24 | (int)_hx_tmp25);
            						}
            					}
            				}
            			}
HXDLIN(1006)			switch((int)(format2)){
            				case (int)0: {
HXLINE(1006)					{
HXLINE(1006)						HX_VARI( Int,val) = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset16 = (data1->byteOffset + offset1);
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset16,val);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset17 = (data1->byteOffset + (offset1 + (int)1));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset17,val1);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset18 = (data1->byteOffset + (offset1 + (int)2));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset18,val2);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val3,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset19 = (data1->byteOffset + (offset1 + (int)3));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset19,val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val4,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset20 = (data1->byteOffset + offset1);
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset20,val4);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset21 = (data1->byteOffset + (offset1 + (int)1));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset21,val5);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset22 = (data1->byteOffset + (offset1 + (int)2));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset22,val6);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset23 = (data1->byteOffset + (offset1 + (int)3));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset23,val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset24 = (data1->byteOffset + offset1);
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset24,val8);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset25 = (data1->byteOffset + (offset1 + (int)1));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset25,val9);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset26 = (data1->byteOffset + (offset1 + (int)2));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset26,val10);
            						}
            					}
HXDLIN(1006)					{
HXLINE(1006)						HX_VARI_NAME( Int,val11,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1006)						{
HXLINE(1006)							Int byteOffset27 = (data1->byteOffset + (offset1 + (int)3));
HXDLIN(1006)							::__hxcpp_memory_set_byte(data1->buffer->b,byteOffset27,val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1008)		image->dirty = true;
HXLINE(1009)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,Int x,Int y,Int color,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","setPixel32",0x2e222851,"lime.graphics.utils.ImageDataUtil.setPixel32","lime/graphics/utils/ImageDataUtil.hx",1014,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(format,"format")
HXLINE(1016)		HX_VAR( Int,pixel);
HXLINE(1018)		switch((int)(format)){
            			case (int)1: {
HXLINE(1020)				HX_VARI( Int,argb) = color;
HXDLIN(1020)				HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN(1020)				HX_VARI( Int,rgba) = this1;
HXDLIN(1020)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1020)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1021)				HX_VARI( Int,bgra) = color;
HXDLIN(1021)				HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN(1021)				HX_VARI_NAME( Int,rgba1,"rgba") = this2;
HXDLIN(1021)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1021)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1022)				pixel = color;
            			}
            		}
HXLINE(1026)		Bool _hx_tmp = !(image->get_transparent());
HXDLIN(1026)		if (_hx_tmp) {
HXLINE(1026)			Int _hx_tmp1 = ((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN(1026)			Int _hx_tmp2 = ((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN(1026)			pixel = ((int)((int)_hx_tmp1 | (int)_hx_tmp2) | (int)(int)255);
            		}
HXLINE(1027)		{
HXLINE(1027)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN(1027)			HX_VARI( Int,offset) = ((((int)4 * (y + image->offsetY)) * image->buffer->width) + ((x + image->offsetX) * (int)4));
HXDLIN(1027)			Int format1 = image->buffer->format;
HXDLIN(1027)			Bool premultiplied = image->buffer->premultiplied;
HXDLIN(1027)			if (premultiplied) {
HXLINE(1027)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1027)					Bool _hx_tmp3 = (pixel != (int)0);
HXDLIN(1027)					if (_hx_tmp3) {
HXLINE(1027)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1027)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1027)						HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1027)						Int byteOffset = (this3->byteOffset + (((int)pixel & (int)(int)255) * (int)4));
HXDLIN(1027)						 ::Dynamic _hx_tmp4 = ::__hxcpp_memory_get_ui32(this3->buffer->b,byteOffset);
HXDLIN(1027)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp4;
HXDLIN(1027)						{
HXLINE(1027)							Int _hx_tmp5 = ((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN(1027)							Int _hx_tmp6 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN(1027)							pixel = ((int)_hx_tmp5 | (int)_hx_tmp6);
            						}
            					}
            				}
            			}
HXDLIN(1027)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1027)					{
HXLINE(1027)						HX_VARI( Int,val) = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset1 = (data->byteOffset + offset);
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset1,val);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset2 = (data->byteOffset + (offset + (int)1));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset2,val1);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset3 = (data->byteOffset + (offset + (int)2));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset3,val2);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val3,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset4 = (data->byteOffset + (offset + (int)3));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset4,val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val4,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset5 = (data->byteOffset + offset);
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset5,val4);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset6 = (data->byteOffset + (offset + (int)1));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset6,val5);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset7 = (data->byteOffset + (offset + (int)2));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset7,val6);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset8 = (data->byteOffset + (offset + (int)3));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset8,val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset9 = (data->byteOffset + offset);
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset9,val8);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset10 = (data->byteOffset + (offset + (int)1));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset10,val9);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset11 = (data->byteOffset + (offset + (int)2));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset11,val10);
            						}
            					}
HXDLIN(1027)					{
HXLINE(1027)						HX_VARI_NAME( Int,val11,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1027)						{
HXLINE(1027)							Int byteOffset12 = (data->byteOffset + (offset + (int)3));
HXDLIN(1027)							::__hxcpp_memory_set_byte(data->buffer->b,byteOffset12,val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1029)		image->dirty = true;
HXLINE(1030)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::haxe::io::Bytes bytes,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","setPixels",0x8e8e8101,"lime.graphics.utils.ImageDataUtil.setPixels","lime/graphics/utils/ImageDataUtil.hx",1035,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(format,"format")
HXLINE(1037)		Bool _hx_tmp = hx::IsNull( image->buffer->data );
HXDLIN(1037)		if (_hx_tmp) {
HXLINE(1037)			return;
            		}
HXLINE(1040)		Bool _hx_tmp1 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN(1040)		if (_hx_tmp1) {
HXLINE(1040)			 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(image);
HXDLIN(1040)			 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(rect);
HXDLIN(1040)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_set_pixels(_hx_tmp2,_hx_tmp3,hx::DynamicPtr(bytes),format);
            		}
            		else {
HXLINE(1044)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE(1045)			HX_VARI( Int,sourceFormat) = image->buffer->format;
HXLINE(1046)			HX_VARI( Bool,premultiplied) = image->buffer->premultiplied;
HXLINE(1047)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,dataView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(image,rect);
HXLINE(1048)			HX_VAR( Int,row);
HXDLIN(1048)			HX_VAR( Int,color);
HXDLIN(1048)			HX_VAR( Int,pixel);
HXLINE(1049)			HX_VARI( Bool,transparent) = image->get_transparent();
HXLINE(1050)			HX_VARI( Int,dataPosition) = (int)0;
HXLINE(1052)			{
HXLINE(1052)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(1052)				HX_VARI( Int,_g) = dataView->height;
HXDLIN(1052)				while((_g1 < _g)){
HXLINE(1052)					HX_VARI( Int,y) = _g1++;
HXLINE(1054)					row = (dataView->offset + (dataView->stride * y));
HXLINE(1056)					{
HXLINE(1056)						HX_VARI( Int,_g3) = (int)0;
HXDLIN(1056)						HX_VARI( Int,_g2) = dataView->width;
HXDLIN(1056)						while((_g3 < _g2)){
HXLINE(1056)							HX_VARI( Int,x) = _g3++;
HXLINE(1059)							color = ((int)((int)((int)bytes->b->__get((dataPosition + (int)3)) | (int)((int)bytes->b->__get((dataPosition + (int)2)) << (int)(int)8)) | (int)((int)bytes->b->__get((dataPosition + (int)1)) << (int)(int)16)) | (int)((int)bytes->b->__get(dataPosition) << (int)(int)24));
HXLINE(1060)							hx::AddEq(dataPosition,(int)4);
HXLINE(1062)							switch((int)(format)){
            								case (int)1: {
HXLINE(1064)									HX_VARI( Int,argb) = color;
HXDLIN(1064)									HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN(1064)									HX_VARI( Int,rgba) = this1;
HXDLIN(1064)									rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1064)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1065)									HX_VARI( Int,bgra) = color;
HXDLIN(1065)									HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN(1065)									HX_VARI_NAME( Int,rgba1,"rgba") = this2;
HXDLIN(1065)									rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1065)									pixel = rgba1;
            								}
            								break;
            								default:{
HXLINE(1066)									pixel = color;
            								}
            							}
HXLINE(1070)							if (!(transparent)) {
HXLINE(1070)								Int _hx_tmp4 = ((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN(1070)								Int _hx_tmp5 = ((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN(1070)								pixel = ((int)((int)_hx_tmp4 | (int)_hx_tmp5) | (int)(int)255);
            							}
HXLINE(1071)							{
HXLINE(1071)								HX_VARI( Int,offset) = (row + (x * (int)4));
HXDLIN(1071)								if (premultiplied) {
HXLINE(1071)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1071)										Bool _hx_tmp6 = (pixel != (int)0);
HXDLIN(1071)										if (_hx_tmp6) {
HXLINE(1071)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(1071)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1071)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1071)											Int byteOffset = (this3->byteOffset + (((int)pixel & (int)(int)255) * (int)4));
HXDLIN(1071)											 ::Dynamic _hx_tmp7 = ::__hxcpp_memory_get_ui32(this3->buffer->b,byteOffset);
HXDLIN(1071)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp7;
HXDLIN(1071)											{
HXLINE(1071)												Int _hx_tmp8 = ((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN(1071)												Int _hx_tmp9 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN(1071)												pixel = ((int)_hx_tmp8 | (int)_hx_tmp9);
            											}
            										}
            									}
            								}
HXDLIN(1071)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1071)										{
HXLINE(1071)											HX_VARI( Int,val) = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset1 = (data->byteOffset + offset);
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset1,val);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset2 = (data->byteOffset + (offset + (int)1));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset2,val1);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset3 = (data->byteOffset + (offset + (int)2));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset3,val2);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val3,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset4 = (data->byteOffset + (offset + (int)3));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset4,val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val4,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset5 = (data->byteOffset + offset);
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset5,val4);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset6 = (data->byteOffset + (offset + (int)1));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset6,val5);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset7 = (data->byteOffset + (offset + (int)2));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset7,val6);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset8 = (data->byteOffset + (offset + (int)3));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset8,val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset9 = (data->byteOffset + offset);
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset9,val8);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset10 = (data->byteOffset + (offset + (int)1));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset10,val9);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset11 = (data->byteOffset + (offset + (int)2));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset11,val10);
            											}
            										}
HXDLIN(1071)										{
HXLINE(1071)											HX_VARI_NAME( Int,val11,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1071)											{
HXLINE(1071)												Int byteOffset12 = (data->byteOffset + (offset + (int)3));
HXDLIN(1071)												::__hxcpp_memory_set_byte(data->buffer->b,byteOffset12,val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1079)		image->dirty = true;
HXLINE(1080)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,setPixels,(void))

Int ImageDataUtil_obj::threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,Int threshold,Int color,Int mask,Bool copySource,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","threshold",0xd6e0e03d,"lime.graphics.utils.ImageDataUtil.threshold","lime/graphics/utils/ImageDataUtil.hx",1085,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(threshold,"threshold")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(copySource,"copySource")
            	HX_STACK_ARG(format,"format")
HXLINE(1087)		HX_VAR( Int,_color);
HXDLIN(1087)		HX_VAR( Int,_mask);
HXDLIN(1087)		HX_VAR( Int,_threshold);
HXLINE(1089)		switch((int)(format)){
            			case (int)1: {
HXLINE(1093)				HX_VARI( Int,argb) = color;
HXDLIN(1093)				HX_VARI_NAME( Int,this1,"this") = (int)0;
HXDLIN(1093)				HX_VARI( Int,rgba) = this1;
HXDLIN(1093)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1093)				_color = rgba;
HXLINE(1094)				HX_VARI_NAME( Int,argb1,"argb") = mask;
HXDLIN(1094)				HX_VARI_NAME( Int,this2,"this") = (int)0;
HXDLIN(1094)				HX_VARI_NAME( Int,rgba1,"rgba") = this2;
HXDLIN(1094)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1094)				_mask = rgba1;
HXLINE(1095)				HX_VARI_NAME( Int,argb2,"argb") = threshold;
HXDLIN(1095)				HX_VARI_NAME( Int,this3,"this") = (int)0;
HXDLIN(1095)				HX_VARI_NAME( Int,rgba2,"rgba") = this3;
HXDLIN(1095)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1095)				_threshold = rgba2;
            			}
            			break;
            			case (int)2: {
HXLINE(1099)				HX_VARI( Int,bgra) = color;
HXDLIN(1099)				HX_VARI_NAME( Int,this4,"this") = (int)0;
HXDLIN(1099)				HX_VARI_NAME( Int,rgba3,"rgba") = this4;
HXDLIN(1099)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1099)				_color = rgba3;
HXLINE(1100)				HX_VARI_NAME( Int,bgra1,"bgra") = mask;
HXDLIN(1100)				HX_VARI_NAME( Int,this5,"this") = (int)0;
HXDLIN(1100)				HX_VARI_NAME( Int,rgba4,"rgba") = this5;
HXDLIN(1100)				rgba4 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN(1100)				_mask = rgba4;
HXLINE(1101)				HX_VARI_NAME( Int,bgra2,"bgra") = threshold;
HXDLIN(1101)				HX_VARI_NAME( Int,this6,"this") = (int)0;
HXDLIN(1101)				HX_VARI_NAME( Int,rgba5,"rgba") = this6;
HXDLIN(1101)				rgba5 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra2,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra2 & (int)(int)255) & (int)(int)255));
HXDLIN(1101)				_threshold = rgba5;
            			}
            			break;
            			default:{
HXLINE(1105)				_color = color;
HXLINE(1106)				_mask = mask;
HXLINE(1107)				_threshold = threshold;
            			}
            		}
HXLINE(1111)		HX_VAR( Int,_operation);
HXDLIN(1111)		::String _hx_switch_0 = operation;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1111)			_operation = (int)0;
HXDLIN(1111)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1111)			_operation = (int)2;
HXDLIN(1111)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1111)			_operation = (int)3;
HXDLIN(1111)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1111)			_operation = (int)1;
HXDLIN(1111)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1111)			_operation = (int)4;
HXDLIN(1111)			goto _hx_goto_36;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1111)			_operation = (int)5;
HXDLIN(1111)			goto _hx_goto_36;
            		}
            		/* default */{
HXLINE(1111)			_operation = (int)-1;
            		}
            		_hx_goto_36:;
HXLINE(1123)		if ((_operation == (int)-1)) {
HXLINE(1123)			return (int)0;
            		}
HXLINE(1125)		HX_VARI(  ::lime::utils::ArrayBufferView,srcData) = sourceImage->buffer->data;
HXLINE(1126)		HX_VARI(  ::lime::utils::ArrayBufferView,destData) = image->buffer->data;
HXLINE(1128)		Bool _hx_tmp;
HXDLIN(1128)		Bool _hx_tmp1 = hx::IsNotNull( srcData );
HXDLIN(1128)		if (_hx_tmp1) {
HXLINE(1128)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(1128)			_hx_tmp = true;
            		}
HXDLIN(1128)		if (_hx_tmp) {
HXLINE(1128)			return (int)0;
            		}
HXLINE(1130)		HX_VARI( Int,hits) = (int)0;
HXLINE(1133)		Bool _hx_tmp2 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN(1133)		if (_hx_tmp2) {
HXLINE(1133)			 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(image);
HXDLIN(1133)			 ::hx::Object * _hx_tmp4 = hx::DynamicPtr(sourceImage);
HXDLIN(1133)			 ::hx::Object * _hx_tmp5 = hx::DynamicPtr(sourceRect);
HXDLIN(1133)			 ::hx::Object * _hx_tmp6 = hx::DynamicPtr(destPoint);
HXDLIN(1133)			hits = ( (Int)(::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_threshold(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_operation,((int)((int)_threshold >> (int)(int)16) & (int)(int)65535),((int)_threshold & (int)(int)65535),((int)((int)_color >> (int)(int)16) & (int)(int)65535),((int)_color & (int)(int)65535),((int)((int)_mask >> (int)(int)16) & (int)(int)65535),((int)_mask & (int)(int)65535),copySource)) );
            		}
            		else {
HXLINE(1137)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,srcView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(sourceImage,sourceRect);
HXLINE(1138)			HX_VARI(  ::lime::graphics::utils::_ImageDataUtil::ImageDataView,destView) =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__new(image, ::lime::math::Rectangle_obj::__new(destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE(1140)			HX_VARI( Int,srcFormat) = sourceImage->buffer->format;
HXLINE(1141)			HX_VARI( Int,destFormat) = image->buffer->format;
HXLINE(1142)			HX_VARI( Bool,srcPremultiplied) = sourceImage->buffer->premultiplied;
HXLINE(1143)			HX_VARI( Bool,destPremultiplied) = image->buffer->premultiplied;
HXLINE(1145)			HX_VAR( Int,srcPosition);
HXDLIN(1145)			HX_VAR( Int,destPosition);
HXDLIN(1145)			HX_VAR( Int,srcPixel);
HXDLIN(1145)			HX_VAR( Int,pixelMask);
HXDLIN(1145)			HX_VAR( Bool,test);
HXDLIN(1145)			HX_VAR( Int,value);
HXLINE(1147)			{
HXLINE(1147)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(1147)				HX_VARI( Int,_g) = destView->height;
HXDLIN(1147)				while((_g1 < _g)){
HXLINE(1147)					HX_VARI( Int,y) = _g1++;
HXLINE(1149)					srcPosition = (srcView->offset + (srcView->stride * y));
HXLINE(1150)					destPosition = (destView->offset + (destView->stride * y));
HXLINE(1152)					{
HXLINE(1152)						HX_VARI( Int,_g3) = (int)0;
HXDLIN(1152)						HX_VARI( Int,_g2) = destView->width;
HXDLIN(1152)						while((_g3 < _g2)){
HXLINE(1152)							++_g3;
HXLINE(1154)							{
HXLINE(1154)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE(1154)										Int byteOffset = (srcData->byteOffset + srcPosition);
HXDLIN(1154)										Int _hx_tmp7 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset);
HXDLIN(1154)										Int r = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN(1154)										Int byteOffset1 = (srcData->byteOffset + (srcPosition + (int)1));
HXDLIN(1154)										Int _hx_tmp8 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset1);
HXDLIN(1154)										Int g = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN(1154)										Int byteOffset2 = (srcData->byteOffset + (srcPosition + (int)2));
HXDLIN(1154)										Int _hx_tmp9 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset2);
HXDLIN(1154)										Int b = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN(1154)										Int byteOffset3 = (srcData->byteOffset + (srcPosition + (int)3));
HXDLIN(1154)										Int _hx_tmp10 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset3);
HXDLIN(1154)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp10 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1154)										Int byteOffset4 = (srcData->byteOffset + (srcPosition + (int)1));
HXDLIN(1154)										Int _hx_tmp11 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset4);
HXDLIN(1154)										Int r1 = ((int)_hx_tmp11 & (int)(int)255);
HXDLIN(1154)										Int byteOffset5 = (srcData->byteOffset + (srcPosition + (int)2));
HXDLIN(1154)										Int _hx_tmp12 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset5);
HXDLIN(1154)										Int g1 = ((int)_hx_tmp12 & (int)(int)255);
HXDLIN(1154)										Int byteOffset6 = (srcData->byteOffset + (srcPosition + (int)3));
HXDLIN(1154)										Int _hx_tmp13 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset6);
HXDLIN(1154)										Int b1 = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN(1154)										Int byteOffset7 = (srcData->byteOffset + srcPosition);
HXDLIN(1154)										Int _hx_tmp14 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset7);
HXDLIN(1154)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp14 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1154)										Int byteOffset8 = (srcData->byteOffset + (srcPosition + (int)2));
HXDLIN(1154)										Int _hx_tmp15 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset8);
HXDLIN(1154)										Int r2 = ((int)_hx_tmp15 & (int)(int)255);
HXDLIN(1154)										Int byteOffset9 = (srcData->byteOffset + (srcPosition + (int)1));
HXDLIN(1154)										Int _hx_tmp16 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset9);
HXDLIN(1154)										Int g2 = ((int)_hx_tmp16 & (int)(int)255);
HXDLIN(1154)										Int byteOffset10 = (srcData->byteOffset + srcPosition);
HXDLIN(1154)										Int _hx_tmp17 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset10);
HXDLIN(1154)										Int b2 = ((int)_hx_tmp17 & (int)(int)255);
HXDLIN(1154)										Int byteOffset11 = (srcData->byteOffset + (srcPosition + (int)3));
HXDLIN(1154)										Int _hx_tmp18 = ::__hxcpp_memory_get_byte(srcData->buffer->b,byteOffset11);
HXDLIN(1154)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp18 & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(1154)								if (srcPremultiplied) {
HXLINE(1154)									Bool _hx_tmp19;
HXDLIN(1154)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE(1154)										_hx_tmp19 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(1154)										_hx_tmp19 = false;
            									}
HXDLIN(1154)									if (_hx_tmp19) {
HXLINE(1154)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN(1154)										{
HXLINE(1154)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1154)											Float _hx_tmp20 = (((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1154)											Int idx = ::Math_obj::round(_hx_tmp20);
HXDLIN(1154)											Int byteOffset12 = (this7->byteOffset + idx);
HXDLIN(1154)											Int _hx_tmp21 = ::__hxcpp_memory_get_byte(this7->buffer->b,byteOffset12);
HXDLIN(1154)											Int r3 = ((int)_hx_tmp21 & (int)(int)255);
HXDLIN(1154)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this8,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1154)											Float _hx_tmp22 = (((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1154)											Int idx1 = ::Math_obj::round(_hx_tmp22);
HXDLIN(1154)											Int byteOffset13 = (this8->byteOffset + idx1);
HXDLIN(1154)											Int _hx_tmp23 = ::__hxcpp_memory_get_byte(this8->buffer->b,byteOffset13);
HXDLIN(1154)											Int g3 = ((int)_hx_tmp23 & (int)(int)255);
HXDLIN(1154)											HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this9,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1154)											Float _hx_tmp24 = (((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1154)											Int idx2 = ::Math_obj::round(_hx_tmp24);
HXDLIN(1154)											Int byteOffset14 = (this9->byteOffset + idx2);
HXDLIN(1154)											Int _hx_tmp25 = ::__hxcpp_memory_get_byte(this9->buffer->b,byteOffset14);
HXDLIN(1154)											Int _hx_tmp26 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp25 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN(1154)											Int _hx_tmp27 = ((int)((int)srcPixel & (int)(int)255) & (int)(int)255);
HXDLIN(1154)											srcPixel = ((int)_hx_tmp26 | (int)_hx_tmp27);
            										}
            									}
            								}
            							}
HXLINE(1156)							pixelMask = ((int)srcPixel & (int)_mask);
HXLINE(1158)							HX_VAR( Int,tmp1);
HXDLIN(1158)							HX_VAR( Int,tmp2);
HXDLIN(1158)							tmp1 = ((int)hx::UShr(pixelMask,(int)24) & (int)(int)255);
HXDLIN(1158)							tmp2 = ((int)hx::UShr(_threshold,(int)24) & (int)(int)255);
HXDLIN(1158)							Bool _hx_tmp28 = (tmp1 != tmp2);
HXDLIN(1158)							if (_hx_tmp28) {
HXLINE(1158)								HX_VARI( Bool,aNeg) = (tmp1 < (int)0);
HXDLIN(1158)								HX_VARI( Bool,bNeg) = (tmp2 < (int)0);
HXDLIN(1158)								Bool _hx_tmp29;
HXDLIN(1158)								if ((aNeg != bNeg)) {
HXLINE(1158)									_hx_tmp29 = aNeg;
            								}
            								else {
HXLINE(1158)									_hx_tmp29 = (tmp1 > tmp2);
            								}
HXDLIN(1158)								if (_hx_tmp29) {
HXLINE(1158)									value = (int)1;
            								}
            								else {
HXLINE(1158)									value = (int)-1;
            								}
            							}
            							else {
HXLINE(1158)								tmp1 = ((int)hx::UShr(pixelMask,(int)16) & (int)(int)255);
HXDLIN(1158)								tmp2 = ((int)hx::UShr(_threshold,(int)16) & (int)(int)255);
HXDLIN(1158)								Bool _hx_tmp30 = (tmp1 != tmp2);
HXDLIN(1158)								if (_hx_tmp30) {
HXLINE(1158)									HX_VARI_NAME( Bool,aNeg1,"aNeg") = (tmp1 < (int)0);
HXDLIN(1158)									HX_VARI_NAME( Bool,bNeg1,"bNeg") = (tmp2 < (int)0);
HXDLIN(1158)									Bool _hx_tmp31;
HXDLIN(1158)									if ((aNeg1 != bNeg1)) {
HXLINE(1158)										_hx_tmp31 = aNeg1;
            									}
            									else {
HXLINE(1158)										_hx_tmp31 = (tmp1 > tmp2);
            									}
HXDLIN(1158)									if (_hx_tmp31) {
HXLINE(1158)										value = (int)1;
            									}
            									else {
HXLINE(1158)										value = (int)-1;
            									}
            								}
            								else {
HXLINE(1158)									tmp1 = ((int)hx::UShr(pixelMask,(int)8) & (int)(int)255);
HXDLIN(1158)									tmp2 = ((int)hx::UShr(_threshold,(int)8) & (int)(int)255);
HXDLIN(1158)									Bool _hx_tmp32 = (tmp1 != tmp2);
HXDLIN(1158)									if (_hx_tmp32) {
HXLINE(1158)										HX_VARI_NAME( Bool,aNeg2,"aNeg") = (tmp1 < (int)0);
HXDLIN(1158)										HX_VARI_NAME( Bool,bNeg2,"bNeg") = (tmp2 < (int)0);
HXDLIN(1158)										Bool _hx_tmp33;
HXDLIN(1158)										if ((aNeg2 != bNeg2)) {
HXLINE(1158)											_hx_tmp33 = aNeg2;
            										}
            										else {
HXLINE(1158)											_hx_tmp33 = (tmp1 > tmp2);
            										}
HXDLIN(1158)										if (_hx_tmp33) {
HXLINE(1158)											value = (int)1;
            										}
            										else {
HXLINE(1158)											value = (int)-1;
            										}
            									}
            									else {
HXLINE(1158)										tmp1 = ((int)pixelMask & (int)(int)255);
HXDLIN(1158)										tmp2 = ((int)_threshold & (int)(int)255);
HXDLIN(1158)										if ((tmp1 != tmp2)) {
HXLINE(1158)											HX_VARI_NAME( Bool,aNeg3,"aNeg") = (tmp1 < (int)0);
HXDLIN(1158)											HX_VARI_NAME( Bool,bNeg3,"bNeg") = (tmp2 < (int)0);
HXDLIN(1158)											Bool _hx_tmp34;
HXDLIN(1158)											if ((aNeg3 != bNeg3)) {
HXLINE(1158)												_hx_tmp34 = aNeg3;
            											}
            											else {
HXLINE(1158)												_hx_tmp34 = (tmp1 > tmp2);
            											}
HXDLIN(1158)											if (_hx_tmp34) {
HXLINE(1158)												value = (int)1;
            											}
            											else {
HXLINE(1158)												value = (int)-1;
            											}
            										}
            										else {
HXLINE(1158)											value = (int)0;
            										}
            									}
            								}
            							}
HXLINE(1160)							switch((int)(_operation)){
            								case (int)0: {
HXLINE(1162)									test = (value != (int)0);
            								}
            								break;
            								case (int)1: {
HXLINE(1163)									test = (value == (int)0);
            								}
            								break;
            								case (int)2: {
HXLINE(1164)									test = (value == (int)-1);
            								}
            								break;
            								case (int)3: {
HXLINE(1165)									if ((value != (int)0)) {
HXLINE(1165)										test = (value == (int)-1);
            									}
            									else {
HXLINE(1165)										test = true;
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1166)									test = (value == (int)1);
            								}
            								break;
            								case (int)5: {
HXLINE(1167)									if ((value != (int)0)) {
HXLINE(1167)										test = (value == (int)1);
            									}
            									else {
HXLINE(1167)										test = true;
            									}
            								}
            								break;
            								default:{
HXLINE(1168)									test = false;
            								}
            							}
HXLINE(1172)							if (test) {
HXLINE(1174)								{
HXLINE(1174)									if (destPremultiplied) {
HXLINE(1174)										if ((((int)_color & (int)(int)255) == (int)0)) {
HXLINE(1174)											Bool _hx_tmp35 = (_color != (int)0);
HXDLIN(1174)											if (_hx_tmp35) {
HXLINE(1174)												_color = (int)0;
            											}
            										}
            										else {
HXLINE(1174)											if ((((int)_color & (int)(int)255) != (int)255)) {
HXLINE(1174)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this10,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1174)												Int byteOffset15 = (this10->byteOffset + (((int)_color & (int)(int)255) * (int)4));
HXDLIN(1174)												 ::Dynamic _hx_tmp36 = ::__hxcpp_memory_get_ui32(this10->buffer->b,byteOffset15);
HXDLIN(1174)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp36;
HXDLIN(1174)												{
HXLINE(1174)													Int _hx_tmp37 = ((int)((int)((int)((int)((int)(((int)hx::UShr(_color,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN(1174)													Int _hx_tmp38 = ((int)((int)_color & (int)(int)255) & (int)(int)255);
HXDLIN(1174)													_color = ((int)_hx_tmp37 | (int)_hx_tmp38);
            												}
            											}
            										}
            									}
HXDLIN(1174)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1174)											{
HXLINE(1174)												HX_VARI( Int,val) = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset16 = (destData->byteOffset + destPosition);
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset16,val);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset17 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset17,val1);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset18 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset18,val2);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val3,"val") = ((int)_color & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset19 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset19,val3);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val4,"val") = ((int)_color & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset20 = (destData->byteOffset + destPosition);
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset20,val4);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset21 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset21,val5);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset22 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset22,val6);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset23 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset23,val7);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset24 = (destData->byteOffset + destPosition);
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset24,val8);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset25 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset25,val9);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset26 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset26,val10);
            												}
            											}
HXDLIN(1174)											{
HXLINE(1174)												HX_VARI_NAME( Int,val11,"val") = ((int)_color & (int)(int)255);
HXDLIN(1174)												{
HXLINE(1174)													Int byteOffset27 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN(1174)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset27,val11);
            												}
            											}
            										}
            										break;
            									}
            								}
HXLINE(1175)								++hits;
            							}
            							else {
HXLINE(1177)								if (copySource) {
HXLINE(1179)									if (destPremultiplied) {
HXLINE(1179)										if ((((int)srcPixel & (int)(int)255) == (int)0)) {
HXLINE(1179)											Bool _hx_tmp39 = (srcPixel != (int)0);
HXDLIN(1179)											if (_hx_tmp39) {
HXLINE(1179)												srcPixel = (int)0;
            											}
            										}
            										else {
HXLINE(1179)											if ((((int)srcPixel & (int)(int)255) != (int)255)) {
HXLINE(1179)												HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this11,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1179)												Int byteOffset28 = (this11->byteOffset + (((int)srcPixel & (int)(int)255) * (int)4));
HXDLIN(1179)												 ::Dynamic _hx_tmp40 = ::__hxcpp_memory_get_ui32(this11->buffer->b,byteOffset28);
HXDLIN(1179)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = _hx_tmp40;
HXDLIN(1179)												{
HXLINE(1179)													Int _hx_tmp41 = ((int)((int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8));
HXDLIN(1179)													Int _hx_tmp42 = ((int)((int)srcPixel & (int)(int)255) & (int)(int)255);
HXDLIN(1179)													srcPixel = ((int)_hx_tmp41 | (int)_hx_tmp42);
            												}
            											}
            										}
            									}
HXDLIN(1179)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val12,"val") = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset29 = (destData->byteOffset + destPosition);
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset29,val12);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val13,"val") = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset30 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset30,val13);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val14,"val") = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset31 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset31,val14);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val15,"val") = ((int)srcPixel & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset32 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset32,val15);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val16,"val") = ((int)srcPixel & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset33 = (destData->byteOffset + destPosition);
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset33,val16);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val17,"val") = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset34 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset34,val17);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val18,"val") = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset35 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset35,val18);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val19,"val") = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset36 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset36,val19);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val20,"val") = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset37 = (destData->byteOffset + destPosition);
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset37,val20);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val21,"val") = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset38 = (destData->byteOffset + (destPosition + (int)1));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset38,val21);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val22,"val") = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset39 = (destData->byteOffset + (destPosition + (int)2));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset39,val22);
            												}
            											}
HXDLIN(1179)											{
HXLINE(1179)												HX_VARI_NAME( Int,val23,"val") = ((int)srcPixel & (int)(int)255);
HXDLIN(1179)												{
HXLINE(1179)													Int byteOffset40 = (destData->byteOffset + (destPosition + (int)3));
HXDLIN(1179)													::__hxcpp_memory_set_byte(destData->buffer->b,byteOffset40,val23);
            												}
            											}
            										}
            										break;
            									}
            								}
            							}
HXLINE(1183)							hx::AddEq(srcPosition,(int)4);
HXLINE(1184)							hx::AddEq(destPosition,(int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1192)		if ((hits > (int)0)) {
HXLINE(1194)			image->dirty = true;
HXLINE(1195)			image->version++;
            		}
HXLINE(1199)		return hits;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ImageDataUtil_obj,threshold,return )

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","unmultiplyAlpha",0xa6ce9eb3,"lime.graphics.utils.ImageDataUtil.unmultiplyAlpha","lime/graphics/utils/ImageDataUtil.hx",1204,0x494d921f)
            	HX_STACK_ARG(image,"image")
HXLINE(1206)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE(1207)		Bool _hx_tmp = hx::IsNull( data );
HXDLIN(1207)		if (_hx_tmp) {
HXLINE(1207)			return;
            		}
HXLINE(1210)		Bool _hx_tmp1 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN(1210)		if (_hx_tmp1) {
HXLINE(1210)			::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_unmultiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1214)			HX_VARI( Int,format) = image->buffer->format;
HXLINE(1215)			Float _hx_tmp2 = ((Float)data->length / (Float)(int)4);
HXDLIN(1215)			HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp2);
HXLINE(1216)			HX_VAR( Int,pixel);
HXLINE(1218)			{
HXLINE(1218)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(1218)				while((_g1 < length)){
HXLINE(1218)					HX_VARI( Int,i) = _g1++;
HXLINE(1220)					{
HXLINE(1220)						HX_VARI( Int,offset) = (i * (int)4);
HXDLIN(1220)						switch((int)(format)){
            							case (int)0: {
HXLINE(1220)								Int byteOffset = (data->byteOffset + offset);
HXDLIN(1220)								Int _hx_tmp3 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset);
HXDLIN(1220)								Int r = ((int)_hx_tmp3 & (int)(int)255);
HXDLIN(1220)								Int byteOffset1 = (data->byteOffset + (offset + (int)1));
HXDLIN(1220)								Int _hx_tmp4 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset1);
HXDLIN(1220)								Int g = ((int)_hx_tmp4 & (int)(int)255);
HXDLIN(1220)								Int byteOffset2 = (data->byteOffset + (offset + (int)2));
HXDLIN(1220)								Int _hx_tmp5 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset2);
HXDLIN(1220)								Int b = ((int)_hx_tmp5 & (int)(int)255);
HXDLIN(1220)								Int byteOffset3 = (data->byteOffset + (offset + (int)3));
HXDLIN(1220)								Int _hx_tmp6 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset3);
HXDLIN(1220)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp6 & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1220)								Int byteOffset4 = (data->byteOffset + (offset + (int)1));
HXDLIN(1220)								Int _hx_tmp7 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset4);
HXDLIN(1220)								Int r1 = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN(1220)								Int byteOffset5 = (data->byteOffset + (offset + (int)2));
HXDLIN(1220)								Int _hx_tmp8 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset5);
HXDLIN(1220)								Int g1 = ((int)_hx_tmp8 & (int)(int)255);
HXDLIN(1220)								Int byteOffset6 = (data->byteOffset + (offset + (int)3));
HXDLIN(1220)								Int _hx_tmp9 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset6);
HXDLIN(1220)								Int b1 = ((int)_hx_tmp9 & (int)(int)255);
HXDLIN(1220)								Int byteOffset7 = (data->byteOffset + offset);
HXDLIN(1220)								Int _hx_tmp10 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset7);
HXDLIN(1220)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp10 & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1220)								Int byteOffset8 = (data->byteOffset + (offset + (int)2));
HXDLIN(1220)								Int _hx_tmp11 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset8);
HXDLIN(1220)								Int r2 = ((int)_hx_tmp11 & (int)(int)255);
HXDLIN(1220)								Int byteOffset9 = (data->byteOffset + (offset + (int)1));
HXDLIN(1220)								Int _hx_tmp12 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset9);
HXDLIN(1220)								Int g2 = ((int)_hx_tmp12 & (int)(int)255);
HXDLIN(1220)								Int byteOffset10 = (data->byteOffset + offset);
HXDLIN(1220)								Int _hx_tmp13 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset10);
HXDLIN(1220)								Int b2 = ((int)_hx_tmp13 & (int)(int)255);
HXDLIN(1220)								Int byteOffset11 = (data->byteOffset + (offset + (int)3));
HXDLIN(1220)								Int _hx_tmp14 = ::__hxcpp_memory_get_byte(data->buffer->b,byteOffset11);
HXDLIN(1220)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_hx_tmp14 & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
HXDLIN(1220)						Bool _hx_tmp15;
HXDLIN(1220)						if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(1220)							_hx_tmp15 = (((int)pixel & (int)(int)255) != (int)255);
            						}
            						else {
HXLINE(1220)							_hx_tmp15 = false;
            						}
HXDLIN(1220)						if (_hx_tmp15) {
HXLINE(1220)							::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(1220)							{
HXLINE(1220)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1220)								Float _hx_tmp16 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1220)								Int idx = ::Math_obj::round(_hx_tmp16);
HXDLIN(1220)								Int byteOffset12 = (this1->byteOffset + idx);
HXDLIN(1220)								Int _hx_tmp17 = ::__hxcpp_memory_get_byte(this1->buffer->b,byteOffset12);
HXDLIN(1220)								Int r3 = ((int)_hx_tmp17 & (int)(int)255);
HXDLIN(1220)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1220)								Float _hx_tmp18 = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1220)								Int idx1 = ::Math_obj::round(_hx_tmp18);
HXDLIN(1220)								Int byteOffset13 = (this2->byteOffset + idx1);
HXDLIN(1220)								Int _hx_tmp19 = ::__hxcpp_memory_get_byte(this2->buffer->b,byteOffset13);
HXDLIN(1220)								Int g3 = ((int)_hx_tmp19 & (int)(int)255);
HXDLIN(1220)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1220)								Float _hx_tmp20 = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult);
HXDLIN(1220)								Int idx2 = ::Math_obj::round(_hx_tmp20);
HXDLIN(1220)								Int byteOffset14 = (this3->byteOffset + idx2);
HXDLIN(1220)								Int _hx_tmp21 = ::__hxcpp_memory_get_byte(this3->buffer->b,byteOffset14);
HXDLIN(1220)								Int _hx_tmp22 = ((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)_hx_tmp21 & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN(1220)								Int _hx_tmp23 = ((int)((int)pixel & (int)(int)255) & (int)(int)255);
HXDLIN(1220)								pixel = ((int)_hx_tmp22 | (int)_hx_tmp23);
            							}
            						}
            					}
HXLINE(1221)					{
HXLINE(1221)						HX_VARI_NAME( Int,offset1,"offset") = (i * (int)4);
HXDLIN(1221)						switch((int)(format)){
            							case (int)0: {
HXLINE(1221)								{
HXLINE(1221)									HX_VARI( Int,val) = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset15 = (data->byteOffset + offset1);
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset15,val);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val1,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset16 = (data->byteOffset + (offset1 + (int)1));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset16,val1);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val2,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset17 = (data->byteOffset + (offset1 + (int)2));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset17,val2);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val3,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset18 = (data->byteOffset + (offset1 + (int)3));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset18,val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val4,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset19 = (data->byteOffset + offset1);
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset19,val4);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val5,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset20 = (data->byteOffset + (offset1 + (int)1));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset20,val5);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val6,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset21 = (data->byteOffset + (offset1 + (int)2));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset21,val6);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val7,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset22 = (data->byteOffset + (offset1 + (int)3));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset22,val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val8,"val") = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset23 = (data->byteOffset + offset1);
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset23,val8);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val9,"val") = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset24 = (data->byteOffset + (offset1 + (int)1));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset24,val9);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val10,"val") = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset25 = (data->byteOffset + (offset1 + (int)2));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset25,val10);
            									}
            								}
HXDLIN(1221)								{
HXLINE(1221)									HX_VARI_NAME( Int,val11,"val") = ((int)pixel & (int)(int)255);
HXDLIN(1221)									{
HXLINE(1221)										Int byteOffset26 = (data->byteOffset + (offset1 + (int)3));
HXDLIN(1221)										::__hxcpp_memory_set_byte(data->buffer->b,byteOffset26,val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1227)		image->buffer->premultiplied = false;
HXLINE(1228)		image->dirty = true;
HXLINE(1229)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))

Int ImageDataUtil_obj::_hx___pixelCompare(Int n1,Int n2){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","__pixelCompare",0x0cbb8c0d,"lime.graphics.utils.ImageDataUtil.__pixelCompare","lime/graphics/utils/ImageDataUtil.hx",1234,0x494d921f)
            	HX_STACK_ARG(n1,"n1")
            	HX_STACK_ARG(n2,"n2")
HXLINE(1236)		HX_VAR( Int,tmp1);
HXLINE(1237)		HX_VAR( Int,tmp2);
HXLINE(1239)		tmp1 = ((int)hx::UShr(n1,(int)24) & (int)(int)255);
HXLINE(1240)		tmp2 = ((int)hx::UShr(n2,(int)24) & (int)(int)255);
HXLINE(1242)		Bool _hx_tmp = (tmp1 != tmp2);
HXDLIN(1242)		if (_hx_tmp) {
HXLINE(1244)			HX_VARI( Bool,aNeg) = (tmp1 < (int)0);
HXDLIN(1244)			HX_VARI( Bool,bNeg) = (tmp2 < (int)0);
HXDLIN(1244)			Bool _hx_tmp1;
HXDLIN(1244)			if ((aNeg != bNeg)) {
HXLINE(1244)				_hx_tmp1 = aNeg;
            			}
            			else {
HXLINE(1244)				_hx_tmp1 = (tmp1 > tmp2);
            			}
HXDLIN(1244)			if (_hx_tmp1) {
HXLINE(1244)				return (int)1;
            			}
            			else {
HXLINE(1244)				return (int)-1;
            			}
            		}
            		else {
HXLINE(1248)			tmp1 = ((int)hx::UShr(n1,(int)16) & (int)(int)255);
HXLINE(1249)			tmp2 = ((int)hx::UShr(n2,(int)16) & (int)(int)255);
HXLINE(1251)			Bool _hx_tmp2 = (tmp1 != tmp2);
HXDLIN(1251)			if (_hx_tmp2) {
HXLINE(1253)				HX_VARI_NAME( Bool,aNeg1,"aNeg") = (tmp1 < (int)0);
HXDLIN(1253)				HX_VARI_NAME( Bool,bNeg1,"bNeg") = (tmp2 < (int)0);
HXDLIN(1253)				Bool _hx_tmp3;
HXDLIN(1253)				if ((aNeg1 != bNeg1)) {
HXLINE(1253)					_hx_tmp3 = aNeg1;
            				}
            				else {
HXLINE(1253)					_hx_tmp3 = (tmp1 > tmp2);
            				}
HXDLIN(1253)				if (_hx_tmp3) {
HXLINE(1253)					return (int)1;
            				}
            				else {
HXLINE(1253)					return (int)-1;
            				}
            			}
            			else {
HXLINE(1257)				tmp1 = ((int)hx::UShr(n1,(int)8) & (int)(int)255);
HXLINE(1258)				tmp2 = ((int)hx::UShr(n2,(int)8) & (int)(int)255);
HXLINE(1260)				Bool _hx_tmp4 = (tmp1 != tmp2);
HXDLIN(1260)				if (_hx_tmp4) {
HXLINE(1262)					HX_VARI_NAME( Bool,aNeg2,"aNeg") = (tmp1 < (int)0);
HXDLIN(1262)					HX_VARI_NAME( Bool,bNeg2,"bNeg") = (tmp2 < (int)0);
HXDLIN(1262)					Bool _hx_tmp5;
HXDLIN(1262)					if ((aNeg2 != bNeg2)) {
HXLINE(1262)						_hx_tmp5 = aNeg2;
            					}
            					else {
HXLINE(1262)						_hx_tmp5 = (tmp1 > tmp2);
            					}
HXDLIN(1262)					if (_hx_tmp5) {
HXLINE(1262)						return (int)1;
            					}
            					else {
HXLINE(1262)						return (int)-1;
            					}
            				}
            				else {
HXLINE(1266)					tmp1 = ((int)n1 & (int)(int)255);
HXLINE(1267)					tmp2 = ((int)n2 & (int)(int)255);
HXLINE(1269)					if ((tmp1 != tmp2)) {
HXLINE(1271)						HX_VARI_NAME( Bool,aNeg3,"aNeg") = (tmp1 < (int)0);
HXDLIN(1271)						HX_VARI_NAME( Bool,bNeg3,"bNeg") = (tmp2 < (int)0);
HXDLIN(1271)						Bool _hx_tmp6;
HXDLIN(1271)						if ((aNeg3 != bNeg3)) {
HXLINE(1271)							_hx_tmp6 = aNeg3;
            						}
            						else {
HXLINE(1271)							_hx_tmp6 = (tmp1 > tmp2);
            						}
HXDLIN(1271)						if (_hx_tmp6) {
HXLINE(1271)							return (int)1;
            						}
            						else {
HXLINE(1271)							return (int)-1;
            						}
            					}
            					else {
HXLINE(1275)						return (int)0;
            					}
            				}
            			}
            		}
HXLINE(1242)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___pixelCompare,return )

void ImageDataUtil_obj::lime_image_data_util_color_transform( ::Dynamic image, ::Dynamic rect, ::Dynamic colorMatrix){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_color_transform",0x3cac7168,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_color_transform","lime/graphics/utils/ImageDataUtil.hx",1296,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorMatrix,"colorMatrix")
HXLINE(1296)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1296)		 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(rect);
HXDLIN(1296)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_color_transform(_hx_tmp,_hx_tmp1,hx::DynamicPtr(colorMatrix));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,lime_image_data_util_color_transform,(void))

void ImageDataUtil_obj::lime_image_data_util_copy_channel( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,Int srcChannel,Int destChannel){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_copy_channel",0x470716e1,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_copy_channel","lime/graphics/utils/ImageDataUtil.hx",1297,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(srcChannel,"srcChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE(1297)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1297)		 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(sourceImage);
HXDLIN(1297)		 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(sourceRect);
HXDLIN(1297)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_copy_channel(_hx_tmp,_hx_tmp1,_hx_tmp2,hx::DynamicPtr(destPoint),srcChannel,destChannel);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,lime_image_data_util_copy_channel,(void))

void ImageDataUtil_obj::lime_image_data_util_copy_pixels( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint, ::Dynamic alphaImage, ::Dynamic alphaPoint,Bool mergeAlpha){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_copy_pixels",0x941986cf,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_copy_pixels","lime/graphics/utils/ImageDataUtil.hx",1298,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaImage,"alphaImage")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE(1298)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1298)		 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(sourceImage);
HXDLIN(1298)		 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(sourceRect);
HXDLIN(1298)		 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(destPoint);
HXDLIN(1298)		 ::hx::Object * _hx_tmp4 = hx::DynamicPtr(alphaImage);
HXDLIN(1298)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_copy_pixels(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,hx::DynamicPtr(alphaPoint),mergeAlpha);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,lime_image_data_util_copy_pixels,(void))

void ImageDataUtil_obj::lime_image_data_util_fill_rect( ::Dynamic image, ::Dynamic rect,Int rg,Int ba){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_fill_rect",0xea105ab8,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_fill_rect","lime/graphics/utils/ImageDataUtil.hx",1299,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(rg,"rg")
            	HX_STACK_ARG(ba,"ba")
HXLINE(1299)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1299)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_fill_rect(_hx_tmp,hx::DynamicPtr(rect),rg,ba);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,lime_image_data_util_fill_rect,(void))

void ImageDataUtil_obj::lime_image_data_util_flood_fill( ::Dynamic image,Int x,Int y,Int rg,Int ba){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_flood_fill",0x954481cc,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_flood_fill","lime/graphics/utils/ImageDataUtil.hx",1300,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(rg,"rg")
            	HX_STACK_ARG(ba,"ba")
HXLINE(1300)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_flood_fill(hx::DynamicPtr(image),x,y,rg,ba);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,lime_image_data_util_flood_fill,(void))

void ImageDataUtil_obj::lime_image_data_util_get_pixels( ::Dynamic image, ::Dynamic rect,Int format, ::Dynamic bytes){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_get_pixels",0xafc6d8de,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_get_pixels","lime/graphics/utils/ImageDataUtil.hx",1301,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(1301)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1301)		 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(rect);
HXDLIN(1301)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_get_pixels(_hx_tmp,_hx_tmp1,format,hx::DynamicPtr(bytes));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,lime_image_data_util_get_pixels,(void))

void ImageDataUtil_obj::lime_image_data_util_merge( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,Int redMultiplier,Int greenMultiplier,Int blueMultiplier,Int alphaMultiplier){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_merge",0x6bf371d0,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_merge","lime/graphics/utils/ImageDataUtil.hx",1302,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE(1302)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1302)		 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(sourceImage);
HXDLIN(1302)		 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(sourceRect);
HXDLIN(1302)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_merge(_hx_tmp,_hx_tmp1,_hx_tmp2,hx::DynamicPtr(destPoint),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,lime_image_data_util_merge,(void))

void ImageDataUtil_obj::lime_image_data_util_multiply_alpha( ::Dynamic image){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_multiply_alpha",0xa72191ab,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_multiply_alpha","lime/graphics/utils/ImageDataUtil.hx",1303,0x494d921f)
            	HX_STACK_ARG(image,"image")
HXLINE(1303)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_multiply_alpha(hx::DynamicPtr(image));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,lime_image_data_util_multiply_alpha,(void))

void ImageDataUtil_obj::lime_image_data_util_resize( ::Dynamic image, ::Dynamic buffer,Int width,Int height){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_resize",0x0983bfdc,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_resize","lime/graphics/utils/ImageDataUtil.hx",1304,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1304)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1304)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_resize(_hx_tmp,hx::DynamicPtr(buffer),width,height);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,lime_image_data_util_resize,(void))

void ImageDataUtil_obj::lime_image_data_util_set_format( ::Dynamic image,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_set_format",0x2429175c,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_set_format","lime/graphics/utils/ImageDataUtil.hx",1305,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(format,"format")
HXLINE(1305)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_set_format(hx::DynamicPtr(image),format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,lime_image_data_util_set_format,(void))

void ImageDataUtil_obj::lime_image_data_util_set_pixels( ::Dynamic image, ::Dynamic rect, ::Dynamic bytes,Int format){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_set_pixels",0xb3447752,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_set_pixels","lime/graphics/utils/ImageDataUtil.hx",1306,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(format,"format")
HXLINE(1306)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1306)		 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(rect);
HXDLIN(1306)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_set_pixels(_hx_tmp,_hx_tmp1,hx::DynamicPtr(bytes),format);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,lime_image_data_util_set_pixels,(void))

Int ImageDataUtil_obj::lime_image_data_util_threshold( ::Dynamic image, ::lime::graphics::Image sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,Int operation,Int thresholdRG,Int thresholdBA,Int colorRG,Int colorBA,Int maskRG,Int maskBA,Bool copySource){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_threshold",0xe481fec3,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_threshold","lime/graphics/utils/ImageDataUtil.hx",1307,0x494d921f)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(sourceImage,"sourceImage")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(thresholdRG,"thresholdRG")
            	HX_STACK_ARG(thresholdBA,"thresholdBA")
            	HX_STACK_ARG(colorRG,"colorRG")
            	HX_STACK_ARG(colorBA,"colorBA")
            	HX_STACK_ARG(maskRG,"maskRG")
            	HX_STACK_ARG(maskBA,"maskBA")
            	HX_STACK_ARG(copySource,"copySource")
HXLINE(1307)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(image);
HXDLIN(1307)		 ::hx::Object * _hx_tmp1 = hx::DynamicPtr(sourceImage);
HXDLIN(1307)		 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(sourceRect);
HXDLIN(1307)		return ( (Int)(::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_threshold(_hx_tmp,_hx_tmp1,_hx_tmp2,hx::DynamicPtr(destPoint),operation,thresholdRG,thresholdBA,colorRG,colorBA,maskRG,maskBA,copySource)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(ImageDataUtil_obj,lime_image_data_util_threshold,return )

void ImageDataUtil_obj::lime_image_data_util_unmultiply_alpha( ::Dynamic image){
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","lime_image_data_util_unmultiply_alpha",0x26f04bc4,"lime.graphics.utils.ImageDataUtil.lime_image_data_util_unmultiply_alpha","lime/graphics/utils/ImageDataUtil.hx",1308,0x494d921f)
            	HX_STACK_ARG(image,"image")
HXLINE(1308)		::lime::graphics::utils::ImageDataUtil_obj::cffi_lime_image_data_util_unmultiply_alpha(hx::DynamicPtr(image));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,lime_image_data_util_unmultiply_alpha,(void))

::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *) > ImageDataUtil_obj::cffi_lime_image_data_util_color_transform;

::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int) > ImageDataUtil_obj::cffi_lime_image_data_util_copy_channel;

::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Bool) > ImageDataUtil_obj::cffi_lime_image_data_util_copy_pixels;

::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int,Int) > ImageDataUtil_obj::cffi_lime_image_data_util_fill_rect;

::cpp::Function<  void( ::hx::Object *,Int,Int,Int,Int) > ImageDataUtil_obj::cffi_lime_image_data_util_flood_fill;

::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int, ::hx::Object *) > ImageDataUtil_obj::cffi_lime_image_data_util_get_pixels;

::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int,Int,Int) > ImageDataUtil_obj::cffi_lime_image_data_util_merge;

::cpp::Function<  void( ::hx::Object *) > ImageDataUtil_obj::cffi_lime_image_data_util_multiply_alpha;

::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int,Int) > ImageDataUtil_obj::cffi_lime_image_data_util_resize;

::cpp::Function<  void( ::hx::Object *,Int) > ImageDataUtil_obj::cffi_lime_image_data_util_set_format;

::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *,Int) > ImageDataUtil_obj::cffi_lime_image_data_util_set_pixels;

::cpp::Function<  Int( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int,Int,Int,Int,Int,Int,Bool) > ImageDataUtil_obj::cffi_lime_image_data_util_threshold;

::cpp::Function<  void( ::hx::Object *) > ImageDataUtil_obj::cffi_lime_image_data_util_unmultiply_alpha;


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threshold") ) { outValue = threshold_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__pixelCompare") ) { outValue = _hx___pixelCompare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { outValue = getColorBoundsRect_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_merge") ) { outValue = lime_image_data_util_merge_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_resize") ) { outValue = lime_image_data_util_resize_dyn(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_fill_rect") ) { outValue = lime_image_data_util_fill_rect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_image_data_util_threshold") ) { outValue = lime_image_data_util_threshold_dyn(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_flood_fill") ) { outValue = lime_image_data_util_flood_fill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_image_data_util_get_pixels") ) { outValue = lime_image_data_util_get_pixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_image_data_util_set_format") ) { outValue = lime_image_data_util_set_format_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_image_data_util_set_pixels") ) { outValue = lime_image_data_util_set_pixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_merge") ) { outValue = cffi_lime_image_data_util_merge; return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_copy_pixels") ) { outValue = lime_image_data_util_copy_pixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_resize") ) { outValue = cffi_lime_image_data_util_resize; return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_copy_channel") ) { outValue = lime_image_data_util_copy_channel_dyn(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_multiply_alpha") ) { outValue = lime_image_data_util_multiply_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_fill_rect") ) { outValue = cffi_lime_image_data_util_fill_rect; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_threshold") ) { outValue = cffi_lime_image_data_util_threshold; return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_color_transform") ) { outValue = lime_image_data_util_color_transform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_flood_fill") ) { outValue = cffi_lime_image_data_util_flood_fill; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_get_pixels") ) { outValue = cffi_lime_image_data_util_get_pixels; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_set_format") ) { outValue = cffi_lime_image_data_util_set_format; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_set_pixels") ) { outValue = cffi_lime_image_data_util_set_pixels; return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"lime_image_data_util_unmultiply_alpha") ) { outValue = lime_image_data_util_unmultiply_alpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_copy_pixels") ) { outValue = cffi_lime_image_data_util_copy_pixels; return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_copy_channel") ) { outValue = cffi_lime_image_data_util_copy_channel; return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_multiply_alpha") ) { outValue = cffi_lime_image_data_util_multiply_alpha; return true; }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_color_transform") ) { outValue = cffi_lime_image_data_util_color_transform; return true; }
		break;
	case 42:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_unmultiply_alpha") ) { outValue = cffi_lime_image_data_util_unmultiply_alpha; return true; }
	}
	return false;
}

bool ImageDataUtil_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 31:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_merge") ) { cffi_lime_image_data_util_merge=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int,Int,Int) > >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_resize") ) { cffi_lime_image_data_util_resize=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int,Int) > >(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_fill_rect") ) { cffi_lime_image_data_util_fill_rect=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int,Int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_threshold") ) { cffi_lime_image_data_util_threshold=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int,Int,Int,Int,Int,Int,Bool) > >(); return true; }
		break;
	case 36:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_flood_fill") ) { cffi_lime_image_data_util_flood_fill=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *,Int,Int,Int,Int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_get_pixels") ) { cffi_lime_image_data_util_get_pixels=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_set_format") ) { cffi_lime_image_data_util_set_format=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *,Int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_set_pixels") ) { cffi_lime_image_data_util_set_pixels=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *,Int) > >(); return true; }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_copy_pixels") ) { cffi_lime_image_data_util_copy_pixels=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Bool) > >(); return true; }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_copy_channel") ) { cffi_lime_image_data_util_copy_channel=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int) > >(); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_multiply_alpha") ) { cffi_lime_image_data_util_multiply_alpha=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *) > >(); return true; }
		break;
	case 41:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_color_transform") ) { cffi_lime_image_data_util_color_transform=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 42:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_data_util_unmultiply_alpha") ) { cffi_lime_image_data_util_unmultiply_alpha=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *) > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ImageDataUtil_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_color_transform,HX_HCSTRING("cffi_lime_image_data_util_color_transform","\x33","\xb4","\x2f","\xf1")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_copy_channel,HX_HCSTRING("cffi_lime_image_data_util_copy_channel","\x36","\xf7","\xde","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_copy_pixels,HX_HCSTRING("cffi_lime_image_data_util_copy_pixels","\x1a","\xc8","\x5a","\xd9")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_fill_rect,HX_HCSTRING("cffi_lime_image_data_util_fill_rect","\x43","\x23","\xe6","\xb7")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_flood_fill,HX_HCSTRING("cffi_lime_image_data_util_flood_fill","\xe1","\x32","\x7e","\xe2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_get_pixels,HX_HCSTRING("cffi_lime_image_data_util_get_pixels","\xf3","\x89","\x00","\xfd")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_merge,HX_HCSTRING("cffi_lime_image_data_util_merge","\xdb","\x58","\xe1","\x59")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_multiply_alpha,HX_HCSTRING("cffi_lime_image_data_util_multiply_alpha","\x40","\xf1","\xf1","\x88")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_resize,HX_HCSTRING("cffi_lime_image_data_util_resize","\x71","\x02","\xc0","\x4b")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_set_format,HX_HCSTRING("cffi_lime_image_data_util_set_format","\x71","\xc8","\x62","\x71")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_set_pixels,HX_HCSTRING("cffi_lime_image_data_util_set_pixels","\x67","\x28","\x7e","\x00")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_threshold,HX_HCSTRING("cffi_lime_image_data_util_threshold","\x4e","\xc7","\x57","\xb2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ImageDataUtil_obj::cffi_lime_image_data_util_unmultiply_alpha,HX_HCSTRING("cffi_lime_image_data_util_unmultiply_alpha","\x99","\x7a","\x47","\x65")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ImageDataUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_color_transform,"cffi_lime_image_data_util_color_transform");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_copy_channel,"cffi_lime_image_data_util_copy_channel");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_copy_pixels,"cffi_lime_image_data_util_copy_pixels");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_fill_rect,"cffi_lime_image_data_util_fill_rect");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_flood_fill,"cffi_lime_image_data_util_flood_fill");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_get_pixels,"cffi_lime_image_data_util_get_pixels");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_merge,"cffi_lime_image_data_util_merge");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_multiply_alpha,"cffi_lime_image_data_util_multiply_alpha");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_resize,"cffi_lime_image_data_util_resize");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_set_format,"cffi_lime_image_data_util_set_format");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_set_pixels,"cffi_lime_image_data_util_set_pixels");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_threshold,"cffi_lime_image_data_util_threshold");
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_unmultiply_alpha,"cffi_lime_image_data_util_unmultiply_alpha");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageDataUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_color_transform,"cffi_lime_image_data_util_color_transform");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_copy_channel,"cffi_lime_image_data_util_copy_channel");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_copy_pixels,"cffi_lime_image_data_util_copy_pixels");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_fill_rect,"cffi_lime_image_data_util_fill_rect");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_flood_fill,"cffi_lime_image_data_util_flood_fill");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_get_pixels,"cffi_lime_image_data_util_get_pixels");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_merge,"cffi_lime_image_data_util_merge");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_multiply_alpha,"cffi_lime_image_data_util_multiply_alpha");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_resize,"cffi_lime_image_data_util_resize");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_set_format,"cffi_lime_image_data_util_set_format");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_set_pixels,"cffi_lime_image_data_util_set_pixels");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_threshold,"cffi_lime_image_data_util_threshold");
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::cffi_lime_image_data_util_unmultiply_alpha,"cffi_lime_image_data_util_unmultiply_alpha");
};

#endif

hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("resizeBuffer","\x14","\x7a","\xa2","\xb4"),
	HX_HCSTRING("setFormat","\x79","\x04","\x36","\x5d"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("__pixelCompare","\xdf","\x79","\xe3","\x8d"),
	HX_HCSTRING("lime_image_data_util_color_transform","\xba","\xcc","\x96","\x40"),
	HX_HCSTRING("lime_image_data_util_copy_channel","\x4f","\x54","\x36","\xa5"),
	HX_HCSTRING("lime_image_data_util_copy_pixels","\x21","\x51","\x7b","\xab"),
	HX_HCSTRING("lime_image_data_util_fill_rect","\x8a","\x8c","\xa4","\x8e"),
	HX_HCSTRING("lime_image_data_util_flood_fill","\xba","\xe7","\x5b","\xf2"),
	HX_HCSTRING("lime_image_data_util_get_pixels","\xcc","\x3e","\xde","\x0c"),
	HX_HCSTRING("lime_image_data_util_merge","\xa2","\xd2","\xb1","\xf7"),
	HX_HCSTRING("lime_image_data_util_multiply_alpha","\x99","\x86","\xad","\x5d"),
	HX_HCSTRING("lime_image_data_util_resize","\xca","\x16","\x5a","\xc4"),
	HX_HCSTRING("lime_image_data_util_set_format","\x4a","\x7d","\x40","\x81"),
	HX_HCSTRING("lime_image_data_util_set_pixels","\x40","\xdd","\x5b","\x10"),
	HX_HCSTRING("lime_image_data_util_threshold","\x95","\x30","\x16","\x89"),
	HX_HCSTRING("lime_image_data_util_unmultiply_alpha","\x32","\xd8","\x15","\x90"),
	HX_HCSTRING("cffi_lime_image_data_util_color_transform","\x33","\xb4","\x2f","\xf1"),
	HX_HCSTRING("cffi_lime_image_data_util_copy_channel","\x36","\xf7","\xde","\x9a"),
	HX_HCSTRING("cffi_lime_image_data_util_copy_pixels","\x1a","\xc8","\x5a","\xd9"),
	HX_HCSTRING("cffi_lime_image_data_util_fill_rect","\x43","\x23","\xe6","\xb7"),
	HX_HCSTRING("cffi_lime_image_data_util_flood_fill","\xe1","\x32","\x7e","\xe2"),
	HX_HCSTRING("cffi_lime_image_data_util_get_pixels","\xf3","\x89","\x00","\xfd"),
	HX_HCSTRING("cffi_lime_image_data_util_merge","\xdb","\x58","\xe1","\x59"),
	HX_HCSTRING("cffi_lime_image_data_util_multiply_alpha","\x40","\xf1","\xf1","\x88"),
	HX_HCSTRING("cffi_lime_image_data_util_resize","\x71","\x02","\xc0","\x4b"),
	HX_HCSTRING("cffi_lime_image_data_util_set_format","\x71","\xc8","\x62","\x71"),
	HX_HCSTRING("cffi_lime_image_data_util_set_pixels","\x67","\x28","\x7e","\x00"),
	HX_HCSTRING("cffi_lime_image_data_util_threshold","\x4e","\xc7","\x57","\xb2"),
	HX_HCSTRING("cffi_lime_image_data_util_unmultiply_alpha","\x99","\x7a","\x47","\x65"),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.utils.ImageDataUtil","\x80","\x72","\x23","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &ImageDataUtil_obj::__SetStatic;
	__mClass->mMarkFunc = ImageDataUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageDataUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ImageDataUtil_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1296,0x494d921f)
HXLINE(1296)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_color_transform",ba,cc,96,40),HX_("ooov",47,4a,b3,49),false);
HXDLIN(1296)		cffi_lime_image_data_util_color_transform = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1297,0x494d921f)
HXLINE(1297)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_copy_channel",4f,54,36,a5),HX_("ooooiiv",56,a6,94,9c),false);
HXDLIN(1297)		cffi_lime_image_data_util_copy_channel = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1298,0x494d921f)
HXLINE(1298)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_copy_pixels",21,51,7b,ab),HX_("oooooobv",34,a9,78,69),false);
HXDLIN(1298)		cffi_lime_image_data_util_copy_pixels = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1299,0x494d921f)
HXLINE(1299)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_fill_rect",8a,8c,a4,8e),HX_("ooiiv",76,1b,29,33),false);
HXDLIN(1299)		cffi_lime_image_data_util_fill_rect = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1300,0x494d921f)
HXLINE(1300)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_flood_fill",ba,e7,5b,f2),HX_("oiiiiv",e7,65,67,1c),false);
HXDLIN(1300)		cffi_lime_image_data_util_flood_fill = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1301,0x494d921f)
HXLINE(1301)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_get_pixels",cc,3e,de,0c),HX_("ooiov",b0,20,29,33),false);
HXDLIN(1301)		cffi_lime_image_data_util_get_pixels = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1302,0x494d921f)
HXLINE(1302)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_merge",a2,d2,b1,f7),HX_("ooooiiiiv",76,e6,c1,67),false);
HXDLIN(1302)		cffi_lime_image_data_util_merge = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1303,0x494d921f)
HXLINE(1303)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_multiply_alpha",99,86,ad,5d),HX_("ov",27,61,00,00),false);
HXDLIN(1303)		cffi_lime_image_data_util_multiply_alpha = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1304,0x494d921f)
HXLINE(1304)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_resize",ca,16,5a,c4),HX_("ooiiv",76,1b,29,33),false);
HXDLIN(1304)		cffi_lime_image_data_util_resize = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1305,0x494d921f)
HXLINE(1305)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_set_format",4a,7d,40,81),HX_("oiv",1c,96,54,00),false);
HXDLIN(1305)		cffi_lime_image_data_util_set_format = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1306,0x494d921f)
HXLINE(1306)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_set_pixels",40,dd,5b,10),HX_("oooiv",fc,a8,2d,33),false);
HXDLIN(1306)		cffi_lime_image_data_util_set_pixels = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1307,0x494d921f)
HXLINE(1307)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_threshold",95,30,16,89),HX_("ooooiiiiiiibi",90,38,77,c0),false);
HXDLIN(1307)		cffi_lime_image_data_util_threshold = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.utils.ImageDataUtil","boot",0x4b57b0e0,"lime.graphics.utils.ImageDataUtil.boot","lime/graphics/utils/ImageDataUtil.hx",1308,0x494d921f)
HXLINE(1308)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_data_util_unmultiply_alpha",32,d8,15,90),HX_("ov",27,61,00,00),false);
HXDLIN(1308)		cffi_lime_image_data_util_unmultiply_alpha = inValue;
            	}
}

} // end namespace lime
} // end namespace graphics
} // end namespace utils
