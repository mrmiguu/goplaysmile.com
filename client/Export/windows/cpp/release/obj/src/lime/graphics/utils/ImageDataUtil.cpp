// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#include <lime/graphics/utils/ImageDataUtil.h>
#endif
#ifndef INCLUDED_lime_graphics_utils__ImageDataUtil_ImageDataView
#include <lime/graphics/utils/_ImageDataUtil/ImageDataView.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_color__RGBA_RGBA_Impl_
#include <lime/math/color/_RGBA/RGBA_Impl_.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_33_colorTransform,"lime.graphics.utils.ImageDataUtil","colorTransform",0x2c17e9b7,"lime.graphics.utils.ImageDataUtil.colorTransform","lime/graphics/utils/ImageDataUtil.hx",33,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_79_copyChannel,"lime.graphics.utils.ImageDataUtil","copyChannel",0xa41162a0,"lime.graphics.utils.ImageDataUtil.copyChannel","lime/graphics/utils/ImageDataUtil.hx",79,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_164_copyPixels,"lime.graphics.utils.ImageDataUtil","copyPixels",0x95aa37f0,"lime.graphics.utils.ImageDataUtil.copyPixels","lime/graphics/utils/ImageDataUtil.hx",164,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_311_fillRect,"lime.graphics.utils.ImageDataUtil","fillRect",0x163460f5,"lime.graphics.utils.ImageDataUtil.fillRect","lime/graphics/utils/ImageDataUtil.hx",311,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_364_floodFill,"lime.graphics.utils.ImageDataUtil","floodFill",0xfbc79ff3,"lime.graphics.utils.ImageDataUtil.floodFill","lime/graphics/utils/ImageDataUtil.hx",364,0x494d921f)
static const int _hx_array_data_f0237280_19[] = {
	(int)0,(int)-1,(int)1,(int)0,
};
static const int _hx_array_data_f0237280_20[] = {
	(int)-1,(int)0,(int)0,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_449_getColorBoundsRect,"lime.graphics.utils.ImageDataUtil","getColorBoundsRect",0xfea06eb4,"lime.graphics.utils.ImageDataUtil.getColorBoundsRect","lime/graphics/utils/ImageDataUtil.hx",449,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_616_getPixel,"lime.graphics.utils.ImageDataUtil","getPixel",0xcbf5f1be,"lime.graphics.utils.ImageDataUtil.getPixel","lime/graphics/utils/ImageDataUtil.hx",616,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_634_getPixel32,"lime.graphics.utils.ImageDataUtil","getPixel32",0x2aa489dd,"lime.graphics.utils.ImageDataUtil.getPixel32","lime/graphics/utils/ImageDataUtil.hx",634,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_651_getPixels,"lime.graphics.utils.ImageDataUtil","getPixels",0xab3d94f5,"lime.graphics.utils.ImageDataUtil.getPixels","lime/graphics/utils/ImageDataUtil.hx",651,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_705_merge,"lime.graphics.utils.ImageDataUtil","merge",0xf0318e4a,"lime.graphics.utils.ImageDataUtil.merge","lime/graphics/utils/ImageDataUtil.hx",705,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_758_multiplyAlpha,"lime.graphics.utils.ImageDataUtil","multiplyAlpha",0xb898c02c,"lime.graphics.utils.ImageDataUtil.multiplyAlpha","lime/graphics/utils/ImageDataUtil.hx",758,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_788_resize,"lime.graphics.utils.ImageDataUtil","resize",0x3b9e8e22,"lime.graphics.utils.ImageDataUtil.resize","lime/graphics/utils/ImageDataUtil.hx",788,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_871_resizeBuffer,"lime.graphics.utils.ImageDataUtil","resizeBuffer",0x390004c2,"lime.graphics.utils.ImageDataUtil.resizeBuffer","lime/graphics/utils/ImageDataUtil.hx",871,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_901_setFormat,"lime.graphics.utils.ImageDataUtil","setFormat",0xff73210b,"lime.graphics.utils.ImageDataUtil.setFormat","lime/graphics/utils/ImageDataUtil.hx",901,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_991_setPixel,"lime.graphics.utils.ImageDataUtil","setPixel",0x7a534b32,"lime.graphics.utils.ImageDataUtil.setPixel","lime/graphics/utils/ImageDataUtil.hx",991,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1017_setPixel32,"lime.graphics.utils.ImageDataUtil","setPixel32",0x2e222851,"lime.graphics.utils.ImageDataUtil.setPixel32","lime/graphics/utils/ImageDataUtil.hx",1017,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1038_setPixels,"lime.graphics.utils.ImageDataUtil","setPixels",0x8e8e8101,"lime.graphics.utils.ImageDataUtil.setPixels","lime/graphics/utils/ImageDataUtil.hx",1038,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1088_threshold,"lime.graphics.utils.ImageDataUtil","threshold",0xd6e0e03d,"lime.graphics.utils.ImageDataUtil.threshold","lime/graphics/utils/ImageDataUtil.hx",1088,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1207_unmultiplyAlpha,"lime.graphics.utils.ImageDataUtil","unmultiplyAlpha",0xa6ce9eb3,"lime.graphics.utils.ImageDataUtil.unmultiplyAlpha","lime/graphics/utils/ImageDataUtil.hx",1207,0x494d921f)
HX_LOCAL_STACK_FRAME(_hx_pos_bf157fa4ba2cf807_1237___pixelCompare,"lime.graphics.utils.ImageDataUtil","__pixelCompare",0x0cbb8c0d,"lime.graphics.utils.ImageDataUtil.__pixelCompare","lime/graphics/utils/ImageDataUtil.hx",1237,0x494d921f)
namespace lime{
namespace graphics{
namespace utils{

void ImageDataUtil_obj::__construct() { }

Dynamic ImageDataUtil_obj::__CreateEmpty() { return new ImageDataUtil_obj; }

void *ImageDataUtil_obj::_hx_vtable = 0;

Dynamic ImageDataUtil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ImageDataUtil_obj > _hx_result = new ImageDataUtil_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageDataUtil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x20ce0976;
}

void ImageDataUtil_obj::colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_33_colorTransform)
HXLINE(  35)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(  36)		if (hx::IsNull( data )) {
HXLINE(  36)			return;
            		}
HXLINE(  39)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(  39)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_color_transform(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(colorMatrix));
            		}
            		else {
HXLINE(  43)			int format = image->buffer->format;
HXLINE(  44)			bool premultiplied = image->buffer->premultiplied;
HXLINE(  46)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView dataView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(  48)			 ::lime::utils::ArrayBufferView alphaTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getAlphaTable(colorMatrix);
HXLINE(  49)			 ::lime::utils::ArrayBufferView redTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getRedTable(colorMatrix);
HXLINE(  50)			 ::lime::utils::ArrayBufferView greenTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getGreenTable(colorMatrix);
HXLINE(  51)			 ::lime::utils::ArrayBufferView blueTable = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::getBlueTable(colorMatrix);
HXLINE(  53)			int row;
HXDLIN(  53)			int offset;
HXDLIN(  53)			int pixel;
HXLINE(  55)			{
HXLINE(  55)				int _g1 = (int)0;
HXDLIN(  55)				int _g = dataView->height;
HXDLIN(  55)				while((_g1 < _g)){
HXLINE(  55)					_g1 = (_g1 + (int)1);
HXDLIN(  55)					int y = (_g1 - (int)1);
HXLINE(  57)					int dataView1 = dataView->offset;
HXDLIN(  57)					row = (dataView1 + (dataView->stride * y));
HXLINE(  59)					{
HXLINE(  59)						int _g3 = (int)0;
HXDLIN(  59)						int _g2 = dataView->width;
HXDLIN(  59)						while((_g3 < _g2)){
HXLINE(  59)							_g3 = (_g3 + (int)1);
HXDLIN(  59)							int x = (_g3 - (int)1);
HXLINE(  61)							offset = (row + (x * (int)4));
HXLINE(  63)							{
HXLINE(  63)								switch((int)(format)){
            									case (int)0: {
HXLINE(  63)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(  63)										int data1 = data->byteOffset;
HXDLIN(  63)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN(  63)										int data2 = data->byteOffset;
HXDLIN(  63)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN(  63)										int data3 = data->byteOffset;
HXDLIN(  63)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(  63)										int data4 = data->byteOffset;
HXDLIN(  63)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN(  63)										int data5 = data->byteOffset;
HXDLIN(  63)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN(  63)										int data6 = data->byteOffset;
HXDLIN(  63)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN(  63)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(  63)										int data7 = data->byteOffset;
HXDLIN(  63)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN(  63)										int data8 = data->byteOffset;
HXDLIN(  63)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN(  63)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(  63)										int data9 = data->byteOffset;
HXDLIN(  63)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(  63)								if (premultiplied) {
HXLINE(  63)									bool _hx_tmp;
HXDLIN(  63)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(  63)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(  63)										_hx_tmp = false;
            									}
HXDLIN(  63)									if (_hx_tmp) {
HXLINE(  63)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(  63)										{
HXLINE(  63)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  63)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  63)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  63)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(  63)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(  63)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(  64)							{
HXLINE(  64)								int r4 = ((int)::__hxcpp_memory_get_byte(redTable->buffer->b,(redTable->byteOffset + ((int)hx::UShr(pixel,(int)24) & (int)(int)255))) & (int)(int)255);
HXDLIN(  64)								int g4 = ((int)::__hxcpp_memory_get_byte(greenTable->buffer->b,(greenTable->byteOffset + ((int)hx::UShr(pixel,(int)16) & (int)(int)255))) & (int)(int)255);
HXDLIN(  64)								int b3 = ((int)::__hxcpp_memory_get_byte(blueTable->buffer->b,(blueTable->byteOffset + ((int)hx::UShr(pixel,(int)8) & (int)(int)255))) & (int)(int)255);
HXDLIN(  64)								pixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaTable->buffer->b,(alphaTable->byteOffset + ((int)pixel & (int)(int)255))) & (int)(int)255) & (int)(int)255));
            							}
HXLINE(  65)							{
HXLINE(  65)								if (premultiplied) {
HXLINE(  65)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(  65)										if ((pixel != (int)0)) {
HXLINE(  65)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(  65)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(  65)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(  65)											int this5 = this4->byteOffset;
HXDLIN(  65)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(  65)											pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(  65)								switch((int)(format)){
            									case (int)0: {
HXLINE(  65)										{
HXLINE(  65)											int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  65)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data10 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data11 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val3 = ((int)pixel & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data12 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(  65)										{
HXLINE(  65)											int val4 = ((int)pixel & (int)(int)255);
HXDLIN(  65)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data13 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data14 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data15 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(  65)										{
HXLINE(  65)											int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(  65)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data16 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data17 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN(  65)										{
HXLINE(  65)											int val11 = ((int)pixel & (int)(int)255);
HXDLIN(  65)											{
HXLINE(  65)												int data18 = data->byteOffset;
HXDLIN(  65)												::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  73)		image->dirty = true;
HXLINE(  74)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,colorTransform,(void))

void ImageDataUtil_obj::copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::ImageChannel sourceChannel, ::lime::graphics::ImageChannel destChannel){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_79_copyChannel)
HXLINE(  81)		int destIdx;
HXDLIN(  81)		switch((int)(_hx_getEnumValueIndex(destChannel))){
            			case (int)0: {
HXLINE(  81)				destIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  81)				destIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  81)				destIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  81)				destIdx = (int)3;
            			}
            			break;
            		}
HXLINE(  90)		int srcIdx;
HXDLIN(  90)		switch((int)(_hx_getEnumValueIndex(sourceChannel))){
            			case (int)0: {
HXLINE(  90)				srcIdx = (int)0;
            			}
            			break;
            			case (int)1: {
HXLINE(  90)				srcIdx = (int)1;
            			}
            			break;
            			case (int)2: {
HXLINE(  90)				srcIdx = (int)2;
            			}
            			break;
            			case (int)3: {
HXLINE(  90)				srcIdx = (int)3;
            			}
            			break;
            		}
HXLINE(  99)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE( 100)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 102)		bool _hx_tmp;
HXDLIN( 102)		if (hx::IsNotNull( srcData )) {
HXLINE( 102)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE( 102)			_hx_tmp = true;
            		}
HXDLIN( 102)		if (_hx_tmp) {
HXLINE( 102)			return;
            		}
HXLINE( 105)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 105)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_copy_channel(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),srcIdx,destIdx);
            		}
            		else {
HXLINE( 109)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView srcView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 110)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView destView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE( 112)			int srcFormat = sourceImage->buffer->format;
HXLINE( 113)			int destFormat = image->buffer->format;
HXLINE( 114)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 115)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 117)			int srcPosition;
HXDLIN( 117)			int destPosition;
HXDLIN( 117)			int srcPixel;
HXDLIN( 117)			int destPixel;
HXDLIN( 117)			int value = (int)0;
HXLINE( 119)			{
HXLINE( 119)				int _g1 = (int)0;
HXDLIN( 119)				int _g = destView->height;
HXDLIN( 119)				while((_g1 < _g)){
HXLINE( 119)					_g1 = (_g1 + (int)1);
HXDLIN( 119)					int y = (_g1 - (int)1);
HXLINE( 121)					int srcView1 = srcView->offset;
HXDLIN( 121)					srcPosition = (srcView1 + (srcView->stride * y));
HXLINE( 122)					int destView1 = destView->offset;
HXDLIN( 122)					destPosition = (destView1 + (destView->stride * y));
HXLINE( 124)					{
HXLINE( 124)						int _g3 = (int)0;
HXDLIN( 124)						int _g2 = destView->width;
HXDLIN( 124)						while((_g3 < _g2)){
HXLINE( 124)							_g3 = (_g3 + (int)1);
HXDLIN( 124)							int x = (_g3 - (int)1);
HXLINE( 126)							{
HXLINE( 126)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE( 126)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 126)										int srcData1 = srcData->byteOffset;
HXDLIN( 126)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData1 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 126)										int srcData2 = srcData->byteOffset;
HXDLIN( 126)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData2 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 126)										int srcData3 = srcData->byteOffset;
HXDLIN( 126)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData3 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 126)										int srcData4 = srcData->byteOffset;
HXDLIN( 126)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData4 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 126)										int srcData5 = srcData->byteOffset;
HXDLIN( 126)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData5 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 126)										int srcData6 = srcData->byteOffset;
HXDLIN( 126)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData6 + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN( 126)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 126)										int srcData7 = srcData->byteOffset;
HXDLIN( 126)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData7 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN( 126)										int srcData8 = srcData->byteOffset;
HXDLIN( 126)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData8 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN( 126)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN( 126)										int srcData9 = srcData->byteOffset;
HXDLIN( 126)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData9 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 126)								if (srcPremultiplied) {
HXLINE( 126)									bool _hx_tmp1;
HXDLIN( 126)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE( 126)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 126)										_hx_tmp1 = false;
            									}
HXDLIN( 126)									if (_hx_tmp1) {
HXLINE( 126)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN( 126)										{
HXLINE( 126)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 126)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 126)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 126)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 126)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 126)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 127)							{
HXLINE( 127)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 127)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 127)										int destData1 = destData->byteOffset;
HXDLIN( 127)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 127)										int destData2 = destData->byteOffset;
HXDLIN( 127)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 127)										int destData3 = destData->byteOffset;
HXDLIN( 127)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 127)										int destData4 = destData->byteOffset;
HXDLIN( 127)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 127)										int destData5 = destData->byteOffset;
HXDLIN( 127)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 127)										int destData6 = destData->byteOffset;
HXDLIN( 127)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 127)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 127)										int destData7 = destData->byteOffset;
HXDLIN( 127)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 127)										int destData8 = destData->byteOffset;
HXDLIN( 127)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 127)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 127)										int destData9 = destData->byteOffset;
HXDLIN( 127)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 127)								if (destPremultiplied) {
HXLINE( 127)									bool _hx_tmp2;
HXDLIN( 127)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 127)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 127)										_hx_tmp2 = false;
            									}
HXDLIN( 127)									if (_hx_tmp2) {
HXLINE( 127)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 127)										{
HXLINE( 127)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 127)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 127)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 127)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 127)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 127)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 129)							switch((int)(srcIdx)){
            								case (int)0: {
HXLINE( 131)									value = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
            								}
            								break;
            								case (int)1: {
HXLINE( 132)									value = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
            								}
            								break;
            								case (int)2: {
HXLINE( 133)									value = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
            								}
            								break;
            								case (int)3: {
HXLINE( 134)									value = ((int)srcPixel & (int)(int)255);
            								}
            								break;
            							}
HXLINE( 138)							switch((int)(destIdx)){
            								case (int)0: {
HXLINE( 140)									destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 141)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 142)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)3: {
HXLINE( 143)									destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            								}
            								break;
            							}
HXLINE( 147)							{
HXLINE( 147)								if (destPremultiplied) {
HXLINE( 147)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 147)										if ((destPixel != (int)0)) {
HXLINE( 147)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 147)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 147)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 147)											int this8 = this7->byteOffset;
HXDLIN( 147)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 147)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 147)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 147)										{
HXLINE( 147)											int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 147)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData10 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData11 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData12 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 147)										{
HXLINE( 147)											int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 147)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData13 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData14 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData15 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 147)										{
HXLINE( 147)											int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 147)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData16 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData17 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN( 147)										{
HXLINE( 147)											int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 147)											{
HXLINE( 147)												int destData18 = destData->byteOffset;
HXDLIN( 147)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 149)							srcPosition = (srcPosition + (int)4);
HXLINE( 150)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 158)		image->dirty = true;
HXLINE( 159)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(ImageDataUtil_obj,copyChannel,(void))

void ImageDataUtil_obj::copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< bool >  __o_mergeAlpha){
bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_164_copyPixels)
HXLINE( 167)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 167)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_copy_pixels(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),hx::DynamicPtr(alphaImage),hx::DynamicPtr(alphaPoint),mergeAlpha);
            		}
            		else {
HXLINE( 171)			 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 172)			 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 174)			bool _hx_tmp;
HXDLIN( 174)			if (hx::IsNotNull( sourceData )) {
HXLINE( 174)				_hx_tmp = hx::IsNull( destData );
            			}
            			else {
HXLINE( 174)				_hx_tmp = true;
            			}
HXDLIN( 174)			if (_hx_tmp) {
HXLINE( 174)				return;
            			}
HXLINE( 176)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView sourceView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 177)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView destView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 179)			int sourceFormat = sourceImage->buffer->format;
HXLINE( 180)			int destFormat = image->buffer->format;
HXLINE( 181)			bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 182)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 184)			int sourcePosition;
HXDLIN( 184)			int destPosition;
HXDLIN( 184)			int sourcePixel;
HXLINE( 186)			bool _hx_tmp1;
HXDLIN( 186)			if (!(!(mergeAlpha))) {
HXLINE( 186)				_hx_tmp1 = !(sourceImage->get_transparent());
            			}
            			else {
HXLINE( 186)				_hx_tmp1 = true;
            			}
HXDLIN( 186)			if (_hx_tmp1) {
HXLINE( 188)				int _g1 = (int)0;
HXDLIN( 188)				int _g = destView->height;
HXDLIN( 188)				while((_g1 < _g)){
HXLINE( 188)					_g1 = (_g1 + (int)1);
HXDLIN( 188)					int y = (_g1 - (int)1);
HXLINE( 190)					int sourceView1 = sourceView->offset;
HXDLIN( 190)					sourcePosition = (sourceView1 + (sourceView->stride * y));
HXLINE( 191)					int destView1 = destView->offset;
HXDLIN( 191)					destPosition = (destView1 + (destView->stride * y));
HXLINE( 193)					{
HXLINE( 193)						int _g3 = (int)0;
HXDLIN( 193)						int _g2 = destView->width;
HXDLIN( 193)						while((_g3 < _g2)){
HXLINE( 193)							_g3 = (_g3 + (int)1);
HXDLIN( 193)							int x = (_g3 - (int)1);
HXLINE( 195)							{
HXLINE( 195)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 195)										int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 195)										int sourceData1 = sourceData->byteOffset;
HXDLIN( 195)										int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 195)										int sourceData2 = sourceData->byteOffset;
HXDLIN( 195)										int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 195)										int sourceData3 = sourceData->byteOffset;
HXDLIN( 195)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 195)										int sourceData4 = sourceData->byteOffset;
HXDLIN( 195)										int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 195)										int sourceData5 = sourceData->byteOffset;
HXDLIN( 195)										int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 195)										int sourceData6 = sourceData->byteOffset;
HXDLIN( 195)										int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 195)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 195)										int sourceData7 = sourceData->byteOffset;
HXDLIN( 195)										int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 195)										int sourceData8 = sourceData->byteOffset;
HXDLIN( 195)										int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 195)										int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 195)										int sourceData9 = sourceData->byteOffset;
HXDLIN( 195)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 195)								if (sourcePremultiplied) {
HXLINE( 195)									bool _hx_tmp2;
HXDLIN( 195)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 195)										_hx_tmp2 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 195)										_hx_tmp2 = false;
            									}
HXDLIN( 195)									if (_hx_tmp2) {
HXLINE( 195)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 195)										{
HXLINE( 195)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 195)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 195)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 195)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 195)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 195)											sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 196)							{
HXLINE( 196)								if (destPremultiplied) {
HXLINE( 196)									if ((((int)sourcePixel & (int)(int)255) == (int)0)) {
HXLINE( 196)										if ((sourcePixel != (int)0)) {
HXLINE( 196)											sourcePixel = (int)0;
            										}
            									}
            									else {
HXLINE( 196)										if ((((int)sourcePixel & (int)(int)255) != (int)255)) {
HXLINE( 196)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 196)											int this5 = this4->byteOffset;
HXDLIN( 196)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)sourcePixel & (int)(int)255) * (int)4)));
HXDLIN( 196)											sourcePixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 196)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 196)										{
HXLINE( 196)											int val = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 196)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val1 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData1 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData1 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val2 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData2 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData2 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val3 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData3 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData3 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 196)										{
HXLINE( 196)											int val4 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 196)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val5 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData4 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData4 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val6 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData5 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData5 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val7 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData6 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData6 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 196)										{
HXLINE( 196)											int val8 = ((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255);
HXDLIN( 196)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val9 = ((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData7 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData7 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val10 = ((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData8 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData8 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN( 196)										{
HXLINE( 196)											int val11 = ((int)sourcePixel & (int)(int)255);
HXDLIN( 196)											{
HXLINE( 196)												int destData9 = destData->byteOffset;
HXDLIN( 196)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData9 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 198)							sourcePosition = (sourcePosition + (int)4);
HXLINE( 199)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            			else {
HXLINE( 207)				Float sourceAlpha;
HXDLIN( 207)				Float destAlpha;
HXDLIN( 207)				Float oneMinusSourceAlpha;
HXDLIN( 207)				Float blendAlpha;
HXLINE( 208)				int destPixel;
HXLINE( 210)				if (hx::IsNull( alphaImage )) {
HXLINE( 212)					int _g11 = (int)0;
HXDLIN( 212)					int _g4 = destView->height;
HXDLIN( 212)					while((_g11 < _g4)){
HXLINE( 212)						_g11 = (_g11 + (int)1);
HXDLIN( 212)						int y1 = (_g11 - (int)1);
HXLINE( 214)						int sourceView2 = sourceView->offset;
HXDLIN( 214)						sourcePosition = (sourceView2 + (sourceView->stride * y1));
HXLINE( 215)						int destView2 = destView->offset;
HXDLIN( 215)						destPosition = (destView2 + (destView->stride * y1));
HXLINE( 217)						{
HXLINE( 217)							int _g31 = (int)0;
HXDLIN( 217)							int _g21 = destView->width;
HXDLIN( 217)							while((_g31 < _g21)){
HXLINE( 217)								_g31 = (_g31 + (int)1);
HXDLIN( 217)								int x1 = (_g31 - (int)1);
HXLINE( 219)								{
HXLINE( 219)									switch((int)(sourceFormat)){
            										case (int)0: {
HXLINE( 219)											int r4 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 219)											int sourceData10 = sourceData->byteOffset;
HXDLIN( 219)											int g4 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData10 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 219)											int sourceData11 = sourceData->byteOffset;
HXDLIN( 219)											int b3 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData11 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 219)											int sourceData12 = sourceData->byteOffset;
HXDLIN( 219)											sourcePixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData12 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 219)											int sourceData13 = sourceData->byteOffset;
HXDLIN( 219)											int r5 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData13 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 219)											int sourceData14 = sourceData->byteOffset;
HXDLIN( 219)											int g5 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData14 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 219)											int sourceData15 = sourceData->byteOffset;
HXDLIN( 219)											int b4 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData15 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 219)											sourcePixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 219)											int sourceData16 = sourceData->byteOffset;
HXDLIN( 219)											int r6 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData16 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 219)											int sourceData17 = sourceData->byteOffset;
HXDLIN( 219)											int g6 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData17 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 219)											int b5 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 219)											int sourceData18 = sourceData->byteOffset;
HXDLIN( 219)											sourcePixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData18 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXDLIN( 219)									if (sourcePremultiplied) {
HXLINE( 219)										bool _hx_tmp3;
HXDLIN( 219)										if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 219)											_hx_tmp3 = (((int)sourcePixel & (int)(int)255) != (int)255);
            										}
            										else {
HXLINE( 219)											_hx_tmp3 = false;
            										}
HXDLIN( 219)										if (_hx_tmp3) {
HXLINE( 219)											::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 219)											{
HXLINE( 219)												 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 219)												int r7 = ((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 219)												 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 219)												int g7 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 219)												 ::lime::utils::ArrayBufferView this8 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 219)												sourcePixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
            								}
HXLINE( 220)								{
HXLINE( 220)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE( 220)											int r8 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 220)											int destData10 = destData->byteOffset;
HXDLIN( 220)											int g8 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData10 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 220)											int destData11 = destData->byteOffset;
HXDLIN( 220)											int b6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData11 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 220)											int destData12 = destData->byteOffset;
HXDLIN( 220)											destPixel = ((int)((int)((int)((int)((int)r8 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g8 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData12 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)1: {
HXLINE( 220)											int destData13 = destData->byteOffset;
HXDLIN( 220)											int r9 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData13 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 220)											int destData14 = destData->byteOffset;
HXDLIN( 220)											int g9 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData14 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 220)											int destData15 = destData->byteOffset;
HXDLIN( 220)											int b7 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData15 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 220)											destPixel = ((int)((int)((int)((int)((int)r9 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g9 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b7 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            										case (int)2: {
HXLINE( 220)											int destData16 = destData->byteOffset;
HXDLIN( 220)											int r10 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData16 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 220)											int destData17 = destData->byteOffset;
HXDLIN( 220)											int g10 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData17 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 220)											int b8 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 220)											int destData18 = destData->byteOffset;
HXDLIN( 220)											destPixel = ((int)((int)((int)((int)((int)r10 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g10 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b8 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData18 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            										}
            										break;
            									}
HXDLIN( 220)									if (destPremultiplied) {
HXLINE( 220)										bool _hx_tmp4;
HXDLIN( 220)										if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 220)											_hx_tmp4 = (((int)destPixel & (int)(int)255) != (int)255);
            										}
            										else {
HXLINE( 220)											_hx_tmp4 = false;
            										}
HXDLIN( 220)										if (_hx_tmp4) {
HXLINE( 220)											::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 220)											{
HXLINE( 220)												 ::lime::utils::ArrayBufferView this9 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 220)												int r11 = ((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 220)												 ::lime::utils::ArrayBufferView this10 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 220)												int g11 = ((int)::__hxcpp_memory_get_byte(this10->buffer->b,(this10->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 220)												 ::lime::utils::ArrayBufferView this11 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 220)												destPixel = ((int)((int)((int)((int)((int)r11 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g11 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this11->buffer->b,(this11->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
            								}
HXLINE( 222)								sourceAlpha = ((Float)((int)sourcePixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 223)								destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)((Float)255.0));
HXLINE( 224)								oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 225)								blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 227)								if ((blendAlpha == (int)0)) {
HXLINE( 229)									destPixel = (int)0;
            								}
            								else {
HXLINE( 233)									{
HXLINE( 233)										 ::lime::utils::ArrayBufferView this12 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 233)										int value = ((int)::__hxcpp_memory_get_byte(this12->buffer->b,(this12->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 233)										destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            									}
HXLINE( 234)									{
HXLINE( 234)										 ::lime::utils::ArrayBufferView this13 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 234)										int value1 = ((int)::__hxcpp_memory_get_byte(this13->buffer->b,(this13->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 234)										destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            									}
HXLINE( 235)									{
HXLINE( 235)										 ::lime::utils::ArrayBufferView this14 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 235)										int value2 = ((int)::__hxcpp_memory_get_byte(this14->buffer->b,(this14->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 235)										destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            									}
HXLINE( 236)									{
HXLINE( 236)										 ::lime::utils::ArrayBufferView this15 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 236)										int value3 = ((int)::__hxcpp_memory_get_byte(this15->buffer->b,(this15->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255);
HXDLIN( 236)										destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            									}
            								}
HXLINE( 240)								{
HXLINE( 240)									if (destPremultiplied) {
HXLINE( 240)										if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 240)											if ((destPixel != (int)0)) {
HXLINE( 240)												destPixel = (int)0;
            											}
            										}
            										else {
HXLINE( 240)											if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 240)												 ::lime::utils::ArrayBufferView this16 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 240)												int this17 = this16->byteOffset;
HXDLIN( 240)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this16->buffer->b,(this17 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 240)												destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN( 240)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE( 240)											{
HXLINE( 240)												int val12 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 240)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val13 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData19 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData19 + (destPosition + (int)1)),val13);
            												}
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val14 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData20 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData20 + (destPosition + (int)2)),val14);
            												}
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val15 = ((int)destPixel & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData21 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData21 + (destPosition + (int)3)),val15);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE( 240)											{
HXLINE( 240)												int val16 = ((int)destPixel & (int)(int)255);
HXDLIN( 240)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val17 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData22 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData22 + (destPosition + (int)1)),val17);
            												}
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val18 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData23 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData23 + (destPosition + (int)2)),val18);
            												}
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val19 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData24 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData24 + (destPosition + (int)3)),val19);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE( 240)											{
HXLINE( 240)												int val20 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 240)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val21 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData25 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData25 + (destPosition + (int)1)),val21);
            												}
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val22 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData26 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData26 + (destPosition + (int)2)),val22);
            												}
            											}
HXDLIN( 240)											{
HXLINE( 240)												int val23 = ((int)destPixel & (int)(int)255);
HXDLIN( 240)												{
HXLINE( 240)													int destData27 = destData->byteOffset;
HXDLIN( 240)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData27 + (destPosition + (int)3)),val23);
            												}
            											}
            										}
            										break;
            									}
            								}
HXLINE( 242)								sourcePosition = (sourcePosition + (int)4);
HXLINE( 243)								destPosition = (destPosition + (int)4);
            							}
            						}
            					}
            				}
            				else {
HXLINE( 251)					if (hx::IsNull( alphaPoint )) {
HXLINE( 251)						alphaPoint =  ::lime::math::Vector2_obj::__alloc( HX_CTX ,null(),null());
            					}
HXLINE( 253)					 ::lime::utils::ArrayBufferView alphaData = alphaImage->buffer->data;
HXLINE( 254)					int alphaFormat = alphaImage->buffer->format;
HXLINE( 255)					bool alphaPremultiplied = alphaImage->buffer->premultiplied;
HXLINE( 257)					 ::lime::graphics::utils::_ImageDataUtil::ImageDataView alphaView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,alphaImage, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,alphaPoint->x,alphaPoint->y,destView->width,destView->height));
HXLINE( 258)					int alphaPosition;
HXDLIN( 258)					int alphaPixel;
HXLINE( 260)					{
HXLINE( 260)						int _g12 = (int)0;
HXDLIN( 260)						int _g5 = alphaView->height;
HXDLIN( 260)						while((_g12 < _g5)){
HXLINE( 260)							_g12 = (_g12 + (int)1);
HXDLIN( 260)							int y2 = (_g12 - (int)1);
HXLINE( 262)							int sourceView3 = sourceView->offset;
HXDLIN( 262)							sourcePosition = (sourceView3 + (sourceView->stride * y2));
HXLINE( 263)							int destView3 = destView->offset;
HXDLIN( 263)							destPosition = (destView3 + (destView->stride * y2));
HXLINE( 264)							int alphaView1 = alphaView->offset;
HXDLIN( 264)							alphaPosition = (alphaView1 + (alphaView->stride * y2));
HXLINE( 266)							{
HXLINE( 266)								int _g32 = (int)0;
HXDLIN( 266)								int _g22 = alphaView->width;
HXDLIN( 266)								while((_g32 < _g22)){
HXLINE( 266)									_g32 = (_g32 + (int)1);
HXDLIN( 266)									int x2 = (_g32 - (int)1);
HXLINE( 268)									{
HXLINE( 268)										switch((int)(sourceFormat)){
            											case (int)0: {
HXLINE( 268)												int r12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 268)												int sourceData19 = sourceData->byteOffset;
HXDLIN( 268)												int g12 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData19 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 268)												int sourceData20 = sourceData->byteOffset;
HXDLIN( 268)												int b9 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData20 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 268)												int sourceData21 = sourceData->byteOffset;
HXDLIN( 268)												sourcePixel = ((int)((int)((int)((int)((int)r12 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g12 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b9 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData21 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 268)												int sourceData22 = sourceData->byteOffset;
HXDLIN( 268)												int r13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData22 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 268)												int sourceData23 = sourceData->byteOffset;
HXDLIN( 268)												int g13 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData23 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 268)												int sourceData24 = sourceData->byteOffset;
HXDLIN( 268)												int b10 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData24 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 268)												sourcePixel = ((int)((int)((int)((int)((int)r13 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g13 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b10 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 268)												int sourceData25 = sourceData->byteOffset;
HXDLIN( 268)												int r14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData25 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 268)												int sourceData26 = sourceData->byteOffset;
HXDLIN( 268)												int g14 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData26 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 268)												int b11 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 268)												int sourceData27 = sourceData->byteOffset;
HXDLIN( 268)												sourcePixel = ((int)((int)((int)((int)((int)r14 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g14 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b11 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData27 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 268)										if (sourcePremultiplied) {
HXLINE( 268)											bool _hx_tmp5;
HXDLIN( 268)											if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 268)												_hx_tmp5 = (((int)sourcePixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 268)												_hx_tmp5 = false;
            											}
HXDLIN( 268)											if (_hx_tmp5) {
HXLINE( 268)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 268)												{
HXLINE( 268)													 ::lime::utils::ArrayBufferView this18 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 268)													int r15 = ((int)::__hxcpp_memory_get_byte(this18->buffer->b,(this18->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 268)													 ::lime::utils::ArrayBufferView this19 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 268)													int g15 = ((int)::__hxcpp_memory_get_byte(this19->buffer->b,(this19->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 268)													 ::lime::utils::ArrayBufferView this20 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 268)													sourcePixel = ((int)((int)((int)((int)((int)r15 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g15 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this20->buffer->b,(this20->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 269)									{
HXLINE( 269)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 269)												int r16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 269)												int destData28 = destData->byteOffset;
HXDLIN( 269)												int g16 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData28 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 269)												int destData29 = destData->byteOffset;
HXDLIN( 269)												int b12 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData29 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 269)												int destData30 = destData->byteOffset;
HXDLIN( 269)												destPixel = ((int)((int)((int)((int)((int)r16 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g16 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b12 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData30 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 269)												int destData31 = destData->byteOffset;
HXDLIN( 269)												int r17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData31 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 269)												int destData32 = destData->byteOffset;
HXDLIN( 269)												int g17 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData32 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 269)												int destData33 = destData->byteOffset;
HXDLIN( 269)												int b13 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData33 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 269)												destPixel = ((int)((int)((int)((int)((int)r17 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g17 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b13 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 269)												int destData34 = destData->byteOffset;
HXDLIN( 269)												int r18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData34 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 269)												int destData35 = destData->byteOffset;
HXDLIN( 269)												int g18 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData35 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 269)												int b14 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 269)												int destData36 = destData->byteOffset;
HXDLIN( 269)												destPixel = ((int)((int)((int)((int)((int)r18 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g18 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b14 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData36 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 269)										if (destPremultiplied) {
HXLINE( 269)											bool _hx_tmp6;
HXDLIN( 269)											if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 269)												_hx_tmp6 = (((int)destPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 269)												_hx_tmp6 = false;
            											}
HXDLIN( 269)											if (_hx_tmp6) {
HXLINE( 269)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 269)												{
HXLINE( 269)													 ::lime::utils::ArrayBufferView this21 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 269)													int r19 = ((int)::__hxcpp_memory_get_byte(this21->buffer->b,(this21->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 269)													 ::lime::utils::ArrayBufferView this22 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 269)													int g19 = ((int)::__hxcpp_memory_get_byte(this22->buffer->b,(this22->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 269)													 ::lime::utils::ArrayBufferView this23 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 269)													destPixel = ((int)((int)((int)((int)((int)r19 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g19 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this23->buffer->b,(this23->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 270)									{
HXLINE( 270)										switch((int)(alphaFormat)){
            											case (int)0: {
HXLINE( 270)												int r20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 270)												int alphaData1 = alphaData->byteOffset;
HXDLIN( 270)												int g20 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData1 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 270)												int alphaData2 = alphaData->byteOffset;
HXDLIN( 270)												int b15 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData2 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 270)												int alphaData3 = alphaData->byteOffset;
HXDLIN( 270)												alphaPixel = ((int)((int)((int)((int)((int)r20 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g20 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b15 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData3 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)1: {
HXLINE( 270)												int alphaData4 = alphaData->byteOffset;
HXDLIN( 270)												int r21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData4 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 270)												int alphaData5 = alphaData->byteOffset;
HXDLIN( 270)												int g21 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData5 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 270)												int alphaData6 = alphaData->byteOffset;
HXDLIN( 270)												int b16 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData6 + (alphaPosition + (int)3))) & (int)(int)255);
HXDLIN( 270)												alphaPixel = ((int)((int)((int)((int)((int)r21 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g21 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b16 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            											case (int)2: {
HXLINE( 270)												int alphaData7 = alphaData->byteOffset;
HXDLIN( 270)												int r22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData7 + (alphaPosition + (int)2))) & (int)(int)255);
HXDLIN( 270)												int alphaData8 = alphaData->byteOffset;
HXDLIN( 270)												int g22 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData8 + (alphaPosition + (int)1))) & (int)(int)255);
HXDLIN( 270)												int b17 = ((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData->byteOffset + alphaPosition)) & (int)(int)255);
HXDLIN( 270)												int alphaData9 = alphaData->byteOffset;
HXDLIN( 270)												alphaPixel = ((int)((int)((int)((int)((int)r22 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g22 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b17 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(alphaData->buffer->b,(alphaData9 + (alphaPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            											}
            											break;
            										}
HXDLIN( 270)										if (alphaPremultiplied) {
HXLINE( 270)											bool _hx_tmp7;
HXDLIN( 270)											if ((((int)alphaPixel & (int)(int)255) != (int)0)) {
HXLINE( 270)												_hx_tmp7 = (((int)alphaPixel & (int)(int)255) != (int)255);
            											}
            											else {
HXLINE( 270)												_hx_tmp7 = false;
            											}
HXDLIN( 270)											if (_hx_tmp7) {
HXLINE( 270)												::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)alphaPixel & (int)(int)255));
HXDLIN( 270)												{
HXLINE( 270)													 ::lime::utils::ArrayBufferView this24 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 270)													int r23 = ((int)::__hxcpp_memory_get_byte(this24->buffer->b,(this24->byteOffset + ::Math_obj::round((((int)hx::UShr(alphaPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 270)													 ::lime::utils::ArrayBufferView this25 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 270)													int g23 = ((int)::__hxcpp_memory_get_byte(this25->buffer->b,(this25->byteOffset + ::Math_obj::round((((int)hx::UShr(alphaPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 270)													 ::lime::utils::ArrayBufferView this26 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 270)													alphaPixel = ((int)((int)((int)((int)((int)r23 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g23 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this26->buffer->b,(this26->byteOffset + ::Math_obj::round((((int)hx::UShr(alphaPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)alphaPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
            									}
HXLINE( 272)									sourceAlpha = ((Float)((int)alphaPixel & (int)(int)255) / (Float)(int)255);
HXLINE( 273)									destAlpha = ((Float)((int)destPixel & (int)(int)255) / (Float)(int)255);
HXLINE( 274)									oneMinusSourceAlpha = ((int)1 - sourceAlpha);
HXLINE( 275)									blendAlpha = (sourceAlpha + (destAlpha * oneMinusSourceAlpha));
HXLINE( 277)									if ((blendAlpha == (int)0)) {
HXLINE( 279)										destPixel = (int)0;
            									}
            									else {
HXLINE( 283)										{
HXLINE( 283)											 ::lime::utils::ArrayBufferView this27 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 283)											int value4 = ((int)::__hxcpp_memory_get_byte(this27->buffer->b,(this27->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 283)											destPixel = ((int)((int)((int)((int)((int)value4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 284)										{
HXLINE( 284)											 ::lime::utils::ArrayBufferView this28 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 284)											int value5 = ((int)::__hxcpp_memory_get_byte(this28->buffer->b,(this28->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 284)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 285)										{
HXLINE( 285)											 ::lime::utils::ArrayBufferView this29 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 285)											int value6 = ((int)::__hxcpp_memory_get_byte(this29->buffer->b,(this29->byteOffset + ::Math_obj::round(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * sourceAlpha) + ((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * destAlpha) * oneMinusSourceAlpha)) / (Float)blendAlpha)))) & (int)(int)255);
HXDLIN( 285)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value6 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
HXLINE( 286)										{
HXLINE( 286)											 ::lime::utils::ArrayBufferView this30 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 286)											int value7 = ((int)::__hxcpp_memory_get_byte(this30->buffer->b,(this30->byteOffset + ::Math_obj::round((blendAlpha * ((Float)255.0))))) & (int)(int)255);
HXDLIN( 286)											destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value7 & (int)(int)255));
            										}
            									}
HXLINE( 290)									{
HXLINE( 290)										if (destPremultiplied) {
HXLINE( 290)											if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 290)												if ((destPixel != (int)0)) {
HXLINE( 290)													destPixel = (int)0;
            												}
            											}
            											else {
HXLINE( 290)												if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 290)													 ::lime::utils::ArrayBufferView this31 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 290)													int this32 = this31->byteOffset;
HXDLIN( 290)													::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this31->buffer->b,(this32 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 290)													destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            												}
            											}
            										}
HXDLIN( 290)										switch((int)(destFormat)){
            											case (int)0: {
HXLINE( 290)												{
HXLINE( 290)													int val24 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 290)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val24);
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val25 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData37 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData37 + (destPosition + (int)1)),val25);
            													}
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val26 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData38 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData38 + (destPosition + (int)2)),val26);
            													}
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val27 = ((int)destPixel & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData39 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData39 + (destPosition + (int)3)),val27);
            													}
            												}
            											}
            											break;
            											case (int)1: {
HXLINE( 290)												{
HXLINE( 290)													int val28 = ((int)destPixel & (int)(int)255);
HXDLIN( 290)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val28);
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val29 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData40 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData40 + (destPosition + (int)1)),val29);
            													}
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val30 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData41 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData41 + (destPosition + (int)2)),val30);
            													}
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val31 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData42 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData42 + (destPosition + (int)3)),val31);
            													}
            												}
            											}
            											break;
            											case (int)2: {
HXLINE( 290)												{
HXLINE( 290)													int val32 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 290)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val32);
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val33 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData43 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData43 + (destPosition + (int)1)),val33);
            													}
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val34 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData44 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData44 + (destPosition + (int)2)),val34);
            													}
            												}
HXDLIN( 290)												{
HXLINE( 290)													int val35 = ((int)destPixel & (int)(int)255);
HXDLIN( 290)													{
HXLINE( 290)														int destData45 = destData->byteOffset;
HXDLIN( 290)														::__hxcpp_memory_set_byte(destData->buffer->b,(destData45 + (destPosition + (int)3)),val35);
            													}
            												}
            											}
            											break;
            										}
            									}
HXLINE( 292)									sourcePosition = (sourcePosition + (int)4);
HXLINE( 293)									destPosition = (destPosition + (int)4);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 305)		image->dirty = true;
HXLINE( 306)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(ImageDataUtil_obj,copyPixels,(void))

void ImageDataUtil_obj::fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int color,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_311_fillRect)
HXLINE( 313)		int fillColor;
HXLINE( 315)		switch((int)(format)){
            			case (int)1: {
HXLINE( 317)				int argb = color;
HXDLIN( 317)				int this1 = (int)0;
HXDLIN( 317)				int rgba = this1;
HXDLIN( 317)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 317)				fillColor = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 318)				int bgra = color;
HXDLIN( 318)				int this2 = (int)0;
HXDLIN( 318)				int rgba1 = this2;
HXDLIN( 318)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 318)				fillColor = rgba1;
            			}
            			break;
            			default:{
HXLINE( 319)				fillColor = color;
            			}
            		}
HXLINE( 323)		if (!(image->get_transparent())) {
HXLINE( 325)			fillColor = ((int)((int)((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 329)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 330)		if (hx::IsNull( data )) {
HXLINE( 330)			return;
            		}
HXLINE( 333)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 333)			 ::Dynamic _hx_tmp = ::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_fill_rect;
HXDLIN( 333)			_hx_tmp(image,rect,((int)((int)fillColor >> (int)(int)16) & (int)(int)65535),((int)fillColor & (int)(int)65535));
            		}
            		else {
HXLINE( 337)			int format1 = image->buffer->format;
HXLINE( 338)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 339)			if (premultiplied) {
HXLINE( 339)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 339)					if ((fillColor != (int)0)) {
HXLINE( 339)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 339)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 339)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 339)						int this4 = this3->byteOffset;
HXDLIN( 339)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 339)						fillColor = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXLINE( 341)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView dataView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 342)			int row;
HXLINE( 344)			{
HXLINE( 344)				int _g1 = (int)0;
HXDLIN( 344)				int _g = dataView->height;
HXDLIN( 344)				while((_g1 < _g)){
HXLINE( 344)					_g1 = (_g1 + (int)1);
HXDLIN( 344)					int y = (_g1 - (int)1);
HXLINE( 346)					int dataView1 = dataView->offset;
HXDLIN( 346)					row = (dataView1 + (dataView->stride * y));
HXLINE( 348)					{
HXLINE( 348)						int _g3 = (int)0;
HXDLIN( 348)						int _g2 = dataView->width;
HXDLIN( 348)						while((_g3 < _g2)){
HXLINE( 348)							_g3 = (_g3 + (int)1);
HXDLIN( 348)							int x = (_g3 - (int)1);
HXLINE( 350)							{
HXLINE( 350)								int offset = (row + (x * (int)4));
HXDLIN( 350)								switch((int)(format1)){
            									case (int)0: {
HXLINE( 350)										{
HXLINE( 350)											int val = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 350)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val1 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data1 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val2 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data2 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val3 = ((int)fillColor & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data3 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 350)										{
HXLINE( 350)											int val4 = ((int)fillColor & (int)(int)255);
HXDLIN( 350)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val5 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data4 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val6 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data5 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val7 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data6 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 350)										{
HXLINE( 350)											int val8 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 350)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val9 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data7 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val10 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data8 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN( 350)										{
HXLINE( 350)											int val11 = ((int)fillColor & (int)(int)255);
HXDLIN( 350)											{
HXLINE( 350)												int data9 = data->byteOffset;
HXDLIN( 350)												::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 358)		image->dirty = true;
HXLINE( 359)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,fillRect,(void))

void ImageDataUtil_obj::floodFill( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_364_floodFill)
HXLINE( 366)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 367)		if (hx::IsNull( data )) {
HXLINE( 367)			return;
            		}
HXLINE( 369)		if ((format == (int)1)) {
HXLINE( 369)			color = ((int)((int)((int)color & (int)(int)16777215) << (int)(int)8) | (int)((int)((int)color >> (int)(int)24) & (int)(int)255));
            		}
HXLINE( 372)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 372)			 ::Dynamic _hx_tmp = ::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_flood_fill;
HXDLIN( 372)			_hx_tmp(image,x,y,((int)((int)color >> (int)(int)16) & (int)(int)65535),((int)color & (int)(int)65535));
            		}
            		else {
HXLINE( 376)			int format1 = image->buffer->format;
HXLINE( 377)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 379)			int fillColor = color;
HXLINE( 381)			int hitColor;
HXLINE( 382)			{
HXLINE( 382)				int offset = (y + image->offsetY);
HXDLIN( 382)				int offset1 = (offset * (image->buffer->width * (int)4));
HXDLIN( 382)				int offset2 = (offset1 + ((x + image->offsetX) * (int)4));
HXDLIN( 382)				switch((int)(format1)){
            					case (int)0: {
HXLINE( 382)						int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255);
HXDLIN( 382)						int data1 = data->byteOffset;
HXDLIN( 382)						int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 382)						int data2 = data->byteOffset;
HXDLIN( 382)						int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 382)						int data3 = data->byteOffset;
HXDLIN( 382)						hitColor = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset2 + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)1: {
HXLINE( 382)						int data4 = data->byteOffset;
HXDLIN( 382)						int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 382)						int data5 = data->byteOffset;
HXDLIN( 382)						int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 382)						int data6 = data->byteOffset;
HXDLIN( 382)						int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset2 + (int)3))) & (int)(int)255);
HXDLIN( 382)						hitColor = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            					case (int)2: {
HXLINE( 382)						int data7 = data->byteOffset;
HXDLIN( 382)						int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset2 + (int)2))) & (int)(int)255);
HXDLIN( 382)						int data8 = data->byteOffset;
HXDLIN( 382)						int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset2 + (int)1))) & (int)(int)255);
HXDLIN( 382)						int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset2)) & (int)(int)255);
HXDLIN( 382)						int data9 = data->byteOffset;
HXDLIN( 382)						hitColor = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset2 + (int)3))) & (int)(int)255) & (int)(int)255));
            					}
            					break;
            				}
HXDLIN( 382)				if (premultiplied) {
HXLINE( 382)					bool _hx_tmp1;
HXDLIN( 382)					if ((((int)hitColor & (int)(int)255) != (int)0)) {
HXLINE( 382)						_hx_tmp1 = (((int)hitColor & (int)(int)255) != (int)255);
            					}
            					else {
HXLINE( 382)						_hx_tmp1 = false;
            					}
HXDLIN( 382)					if (_hx_tmp1) {
HXLINE( 382)						::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)hitColor & (int)(int)255));
HXDLIN( 382)						{
HXLINE( 382)							 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 382)							int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 382)							 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 382)							int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 382)							 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 382)							hitColor = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(hitColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hitColor & (int)(int)255) & (int)(int)255));
            						}
            					}
            				}
            			}
HXLINE( 384)			if (!(image->get_transparent())) {
HXLINE( 386)				fillColor = ((int)((int)((int)((int)((int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(fillColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(fillColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 387)				hitColor = ((int)((int)((int)((int)((int)((int)hx::UShr(hitColor,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(hitColor,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(hitColor,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            			}
HXLINE( 391)			if ((fillColor == hitColor)) {
HXLINE( 391)				return;
            			}
HXLINE( 393)			if (premultiplied) {
HXLINE( 393)				if ((((int)fillColor & (int)(int)255) == (int)0)) {
HXLINE( 393)					if ((fillColor != (int)0)) {
HXLINE( 393)						fillColor = (int)0;
            					}
            				}
            				else {
HXLINE( 393)					if ((((int)fillColor & (int)(int)255) != (int)255)) {
HXLINE( 393)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 393)						int this5 = this4->byteOffset;
HXDLIN( 393)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this4->buffer->b,(this5 + (((int)fillColor & (int)(int)255) * (int)4)));
HXDLIN( 393)						fillColor = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(fillColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)fillColor & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXLINE( 395)			::Array< int > dx = ::Array_obj< int >::fromData( _hx_array_data_f0237280_19,4);
HXLINE( 396)			::Array< int > dy = ::Array_obj< int >::fromData( _hx_array_data_f0237280_20,4);
HXLINE( 398)			int minX = -(image->offsetX);
HXLINE( 399)			int minY = -(image->offsetY);
HXLINE( 400)			int maxX = (minX + image->width);
HXLINE( 401)			int maxY = (minY + image->height);
HXLINE( 403)			::Array< int > queue = ::Array_obj< int >::__new();
HXLINE( 404)			queue->push(x);
HXLINE( 405)			queue->push(y);
HXLINE( 407)			 ::Dynamic curPointX;
HXDLIN( 407)			 ::Dynamic curPointY;
HXDLIN( 407)			int nextPointX;
HXDLIN( 407)			int nextPointY;
HXDLIN( 407)			int nextPointOffset;
HXDLIN( 407)			int readColor;
HXLINE( 409)			while((queue->length > (int)0)){
HXLINE( 411)				curPointY = queue->pop();
HXLINE( 412)				curPointX = queue->pop();
HXLINE( 414)				{
HXLINE( 414)					int _g = (int)0;
HXDLIN( 414)					while((_g < (int)4)){
HXLINE( 414)						_g = (_g + (int)1);
HXDLIN( 414)						int i = (_g - (int)1);
HXLINE( 416)						nextPointX = (curPointX + dx->__get(i));
HXLINE( 417)						nextPointY = (curPointY + dy->__get(i));
HXLINE( 419)						bool _hx_tmp2;
HXDLIN( 419)						bool _hx_tmp3;
HXDLIN( 419)						bool _hx_tmp4;
HXDLIN( 419)						if ((nextPointX >= minX)) {
HXLINE( 419)							_hx_tmp4 = (nextPointY < minY);
            						}
            						else {
HXLINE( 419)							_hx_tmp4 = true;
            						}
HXDLIN( 419)						if (!(_hx_tmp4)) {
HXLINE( 419)							_hx_tmp3 = (nextPointX >= maxX);
            						}
            						else {
HXLINE( 419)							_hx_tmp3 = true;
            						}
HXDLIN( 419)						if (!(_hx_tmp3)) {
HXLINE( 419)							_hx_tmp2 = (nextPointY >= maxY);
            						}
            						else {
HXLINE( 419)							_hx_tmp2 = true;
            						}
HXDLIN( 419)						if (_hx_tmp2) {
HXLINE( 421)							continue;
            						}
HXLINE( 425)						nextPointOffset = (((nextPointY * image->width) + nextPointX) * (int)4);
HXLINE( 426)						{
HXLINE( 426)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 426)									int r4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 426)									int data10 = data->byteOffset;
HXDLIN( 426)									int g4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data10 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 426)									int data11 = data->byteOffset;
HXDLIN( 426)									int b3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data11 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 426)									int data12 = data->byteOffset;
HXDLIN( 426)									readColor = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data12 + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)1: {
HXLINE( 426)									int data13 = data->byteOffset;
HXDLIN( 426)									int r5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data13 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 426)									int data14 = data->byteOffset;
HXDLIN( 426)									int g5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data14 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 426)									int data15 = data->byteOffset;
HXDLIN( 426)									int b4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data15 + (nextPointOffset + (int)3))) & (int)(int)255);
HXDLIN( 426)									readColor = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            								case (int)2: {
HXLINE( 426)									int data16 = data->byteOffset;
HXDLIN( 426)									int r6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data16 + (nextPointOffset + (int)2))) & (int)(int)255);
HXDLIN( 426)									int data17 = data->byteOffset;
HXDLIN( 426)									int g6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data17 + (nextPointOffset + (int)1))) & (int)(int)255);
HXDLIN( 426)									int b5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + nextPointOffset)) & (int)(int)255);
HXDLIN( 426)									int data18 = data->byteOffset;
HXDLIN( 426)									readColor = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data18 + (nextPointOffset + (int)3))) & (int)(int)255) & (int)(int)255));
            								}
            								break;
            							}
HXDLIN( 426)							if (premultiplied) {
HXLINE( 426)								bool _hx_tmp5;
HXDLIN( 426)								if ((((int)readColor & (int)(int)255) != (int)0)) {
HXLINE( 426)									_hx_tmp5 = (((int)readColor & (int)(int)255) != (int)255);
            								}
            								else {
HXLINE( 426)									_hx_tmp5 = false;
            								}
HXDLIN( 426)								if (_hx_tmp5) {
HXLINE( 426)									::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)readColor & (int)(int)255));
HXDLIN( 426)									{
HXLINE( 426)										 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 426)										int r7 = ((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 426)										 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 426)										int g7 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 426)										 ::lime::utils::ArrayBufferView this8 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 426)										readColor = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(readColor,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)readColor & (int)(int)255) & (int)(int)255));
            									}
            								}
            							}
            						}
HXLINE( 428)						if ((readColor == hitColor)) {
HXLINE( 430)							switch((int)(format1)){
            								case (int)0: {
HXLINE( 430)									{
HXLINE( 430)										int val = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 430)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val);
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val1 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data19 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data19 + (nextPointOffset + (int)1)),val1);
            										}
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val2 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data20 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data20 + (nextPointOffset + (int)2)),val2);
            										}
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val3 = ((int)fillColor & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data21 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data21 + (nextPointOffset + (int)3)),val3);
            										}
            									}
            								}
            								break;
            								case (int)1: {
HXLINE( 430)									{
HXLINE( 430)										int val4 = ((int)fillColor & (int)(int)255);
HXDLIN( 430)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val4);
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val5 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data22 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data22 + (nextPointOffset + (int)1)),val5);
            										}
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val6 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data23 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data23 + (nextPointOffset + (int)2)),val6);
            										}
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val7 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data24 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data24 + (nextPointOffset + (int)3)),val7);
            										}
            									}
            								}
            								break;
            								case (int)2: {
HXLINE( 430)									{
HXLINE( 430)										int val8 = ((int)hx::UShr(fillColor,(int)8) & (int)(int)255);
HXDLIN( 430)										::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + nextPointOffset),val8);
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val9 = ((int)hx::UShr(fillColor,(int)16) & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data25 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data25 + (nextPointOffset + (int)1)),val9);
            										}
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val10 = ((int)hx::UShr(fillColor,(int)24) & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data26 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data26 + (nextPointOffset + (int)2)),val10);
            										}
            									}
HXDLIN( 430)									{
HXLINE( 430)										int val11 = ((int)fillColor & (int)(int)255);
HXDLIN( 430)										{
HXLINE( 430)											int data27 = data->byteOffset;
HXDLIN( 430)											::__hxcpp_memory_set_byte(data->buffer->b,(data27 + (nextPointOffset + (int)3)),val11);
            										}
            									}
            								}
            								break;
            							}
HXLINE( 432)							queue->push(nextPointX);
HXLINE( 433)							queue->push(nextPointY);
            						}
            					}
            				}
            			}
            		}
HXLINE( 443)		image->dirty = true;
HXLINE( 444)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,floodFill,(void))

 ::lime::math::Rectangle ImageDataUtil_obj::getColorBoundsRect( ::lime::graphics::Image image,int mask,int color,hx::Null< bool >  __o_findColor,int format){
bool findColor = __o_findColor.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_449_getColorBoundsRect)
HXLINE( 451)		int left = (image->width + (int)1);
HXLINE( 452)		int right = (int)0;
HXLINE( 453)		int top = (image->height + (int)1);
HXLINE( 454)		int bottom = (int)0;
HXLINE( 456)		int _color;
HXDLIN( 456)		int _mask;
HXLINE( 458)		switch((int)(format)){
            			case (int)1: {
HXLINE( 462)				int argb = color;
HXDLIN( 462)				int this1 = (int)0;
HXDLIN( 462)				int rgba = this1;
HXDLIN( 462)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 462)				_color = rgba;
HXLINE( 463)				int argb1 = mask;
HXDLIN( 463)				int this2 = (int)0;
HXDLIN( 463)				int rgba1 = this2;
HXDLIN( 463)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 463)				_mask = rgba1;
            			}
            			break;
            			case (int)2: {
HXLINE( 467)				int bgra = color;
HXDLIN( 467)				int this3 = (int)0;
HXDLIN( 467)				int rgba2 = this3;
HXDLIN( 467)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 467)				_color = rgba2;
HXLINE( 468)				int bgra1 = mask;
HXDLIN( 468)				int this4 = (int)0;
HXDLIN( 468)				int rgba3 = this4;
HXDLIN( 468)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN( 468)				_mask = rgba3;
            			}
            			break;
            			default:{
HXLINE( 472)				_color = color;
HXLINE( 473)				_mask = mask;
            			}
            		}
HXLINE( 477)		if (!(image->get_transparent())) {
HXLINE( 479)			_color = ((int)((int)((int)((int)((int)((int)hx::UShr(_color,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_color,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(_color,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
HXLINE( 480)			_mask = ((int)((int)((int)((int)((int)((int)hx::UShr(_mask,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(_mask,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(_mask,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE( 484)		int pixel;
HXDLIN( 484)		bool hit;
HXLINE( 486)		{
HXLINE( 486)			int _g1 = (int)0;
HXDLIN( 486)			int _g = image->width;
HXDLIN( 486)			while((_g1 < _g)){
HXLINE( 486)				_g1 = (_g1 + (int)1);
HXDLIN( 486)				int x = (_g1 - (int)1);
HXLINE( 488)				hit = false;
HXLINE( 490)				{
HXLINE( 490)					int _g3 = (int)0;
HXDLIN( 490)					int _g2 = image->height;
HXDLIN( 490)					while((_g3 < _g2)){
HXLINE( 490)						_g3 = (_g3 + (int)1);
HXDLIN( 490)						int y = (_g3 - (int)1);
HXLINE( 492)						pixel = image->getPixel32(x,y,(int)0);
HXLINE( 493)						if (findColor) {
HXLINE( 493)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 493)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 495)						if (hit) {
HXLINE( 497)							if ((x < left)) {
HXLINE( 497)								left = x;
            							}
HXLINE( 498)							goto _hx_goto_22;
            						}
            					}
            					_hx_goto_22:;
            				}
HXLINE( 504)				if (hit) {
HXLINE( 506)					goto _hx_goto_21;
            				}
            			}
            			_hx_goto_21:;
            		}
HXLINE( 512)		int ix;
HXLINE( 514)		{
HXLINE( 514)			int _g11 = (int)0;
HXDLIN( 514)			int _g4 = image->width;
HXDLIN( 514)			while((_g11 < _g4)){
HXLINE( 514)				_g11 = (_g11 + (int)1);
HXDLIN( 514)				int x1 = (_g11 - (int)1);
HXLINE( 516)				ix = ((image->width - (int)1) - x1);
HXLINE( 517)				hit = false;
HXLINE( 519)				{
HXLINE( 519)					int _g31 = (int)0;
HXDLIN( 519)					int _g21 = image->height;
HXDLIN( 519)					while((_g31 < _g21)){
HXLINE( 519)						_g31 = (_g31 + (int)1);
HXDLIN( 519)						int y1 = (_g31 - (int)1);
HXLINE( 521)						pixel = image->getPixel32(ix,y1,(int)0);
HXLINE( 522)						if (findColor) {
HXLINE( 522)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 522)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 524)						if (hit) {
HXLINE( 526)							if ((ix > right)) {
HXLINE( 526)								right = ix;
            							}
HXLINE( 527)							goto _hx_goto_24;
            						}
            					}
            					_hx_goto_24:;
            				}
HXLINE( 533)				if (hit) {
HXLINE( 535)					goto _hx_goto_23;
            				}
            			}
            			_hx_goto_23:;
            		}
HXLINE( 541)		{
HXLINE( 541)			int _g12 = (int)0;
HXDLIN( 541)			int _g5 = image->height;
HXDLIN( 541)			while((_g12 < _g5)){
HXLINE( 541)				_g12 = (_g12 + (int)1);
HXDLIN( 541)				int y2 = (_g12 - (int)1);
HXLINE( 543)				hit = false;
HXLINE( 545)				{
HXLINE( 545)					int _g32 = (int)0;
HXDLIN( 545)					int _g22 = image->width;
HXDLIN( 545)					while((_g32 < _g22)){
HXLINE( 545)						_g32 = (_g32 + (int)1);
HXDLIN( 545)						int x2 = (_g32 - (int)1);
HXLINE( 547)						pixel = image->getPixel32(x2,y2,(int)0);
HXLINE( 548)						if (findColor) {
HXLINE( 548)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 548)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 550)						if (hit) {
HXLINE( 552)							if ((y2 < top)) {
HXLINE( 552)								top = y2;
            							}
HXLINE( 553)							goto _hx_goto_26;
            						}
            					}
            					_hx_goto_26:;
            				}
HXLINE( 559)				if (hit) {
HXLINE( 561)					goto _hx_goto_25;
            				}
            			}
            			_hx_goto_25:;
            		}
HXLINE( 567)		int iy;
HXLINE( 569)		{
HXLINE( 569)			int _g13 = (int)0;
HXDLIN( 569)			int _g6 = image->height;
HXDLIN( 569)			while((_g13 < _g6)){
HXLINE( 569)				_g13 = (_g13 + (int)1);
HXDLIN( 569)				int y3 = (_g13 - (int)1);
HXLINE( 571)				iy = ((image->height - (int)1) - y3);
HXLINE( 572)				hit = false;
HXLINE( 574)				{
HXLINE( 574)					int _g33 = (int)0;
HXDLIN( 574)					int _g23 = image->width;
HXDLIN( 574)					while((_g33 < _g23)){
HXLINE( 574)						_g33 = (_g33 + (int)1);
HXDLIN( 574)						int x3 = (_g33 - (int)1);
HXLINE( 576)						pixel = image->getPixel32(x3,iy,(int)0);
HXLINE( 577)						if (findColor) {
HXLINE( 577)							hit = (((int)pixel & (int)_mask) == _color);
            						}
            						else {
HXLINE( 577)							hit = (((int)pixel & (int)_mask) != _color);
            						}
HXLINE( 579)						if (hit) {
HXLINE( 581)							if ((iy > bottom)) {
HXLINE( 581)								bottom = iy;
            							}
HXLINE( 582)							goto _hx_goto_28;
            						}
            					}
            					_hx_goto_28:;
            				}
HXLINE( 588)				if (hit) {
HXLINE( 590)					goto _hx_goto_27;
            				}
            			}
            			_hx_goto_27:;
            		}
HXLINE( 596)		int w = (right - left);
HXLINE( 597)		int h = (bottom - top);
HXLINE( 599)		if ((w > (int)0)) {
HXLINE( 599)			w = (w + (int)1);
            		}
HXLINE( 600)		if ((h > (int)0)) {
HXLINE( 600)			h = (h + (int)1);
            		}
HXLINE( 602)		if ((w < (int)0)) {
HXLINE( 602)			w = (int)0;
            		}
HXLINE( 603)		if ((h < (int)0)) {
HXLINE( 603)			h = (int)0;
            		}
HXLINE( 605)		if ((left == right)) {
HXLINE( 605)			w = (int)1;
            		}
HXLINE( 606)		if ((top == bottom)) {
HXLINE( 606)			h = (int)1;
            		}
HXLINE( 608)		if ((left > image->width)) {
HXLINE( 608)			left = (int)0;
            		}
HXLINE( 609)		if ((top > image->height)) {
HXLINE( 609)			top = (int)0;
            		}
HXLINE( 611)		return  ::lime::math::Rectangle_obj::__alloc( HX_CTX ,left,top,w,h);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,getColorBoundsRect,return )

int ImageDataUtil_obj::getPixel( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_616_getPixel)
HXLINE( 618)		int pixel;
HXLINE( 620)		{
HXLINE( 620)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 620)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN( 620)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN( 620)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 620)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 620)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 620)					int data1 = data->byteOffset;
HXDLIN( 620)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 620)					int data2 = data->byteOffset;
HXDLIN( 620)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 620)					int data3 = data->byteOffset;
HXDLIN( 620)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 620)					int data4 = data->byteOffset;
HXDLIN( 620)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 620)					int data5 = data->byteOffset;
HXDLIN( 620)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 620)					int data6 = data->byteOffset;
HXDLIN( 620)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN( 620)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 620)					int data7 = data->byteOffset;
HXDLIN( 620)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 620)					int data8 = data->byteOffset;
HXDLIN( 620)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 620)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 620)					int data9 = data->byteOffset;
HXDLIN( 620)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 620)			if (premultiplied) {
HXLINE( 620)				bool _hx_tmp;
HXDLIN( 620)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 620)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 620)					_hx_tmp = false;
            				}
HXDLIN( 620)				if (_hx_tmp) {
HXLINE( 620)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 620)					{
HXLINE( 620)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 620)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 620)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 620)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 620)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 620)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 621)		pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)0);
HXLINE( 623)		switch((int)(format)){
            			case (int)1: {
HXLINE( 625)				int this4 = (int)0;
HXDLIN( 625)				int argb = this4;
HXDLIN( 625)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 625)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 626)				int this5 = (int)0;
HXDLIN( 626)				int bgra = this5;
HXDLIN( 626)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 626)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 627)				return pixel;
            			}
            		}
HXLINE( 623)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel,return )

int ImageDataUtil_obj::getPixel32( ::lime::graphics::Image image,int x,int y,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_634_getPixel32)
HXLINE( 636)		int pixel;
HXLINE( 638)		{
HXLINE( 638)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN( 638)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN( 638)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN( 638)			bool premultiplied = image->buffer->premultiplied;
HXDLIN( 638)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE( 638)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 638)					int data1 = data->byteOffset;
HXDLIN( 638)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 638)					int data2 = data->byteOffset;
HXDLIN( 638)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 638)					int data3 = data->byteOffset;
HXDLIN( 638)					pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE( 638)					int data4 = data->byteOffset;
HXDLIN( 638)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 638)					int data5 = data->byteOffset;
HXDLIN( 638)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 638)					int data6 = data->byteOffset;
HXDLIN( 638)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN( 638)					pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE( 638)					int data7 = data->byteOffset;
HXDLIN( 638)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN( 638)					int data8 = data->byteOffset;
HXDLIN( 638)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN( 638)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN( 638)					int data9 = data->byteOffset;
HXDLIN( 638)					pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN( 638)			if (premultiplied) {
HXLINE( 638)				bool _hx_tmp;
HXDLIN( 638)				if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 638)					_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE( 638)					_hx_tmp = false;
            				}
HXDLIN( 638)				if (_hx_tmp) {
HXLINE( 638)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 638)					{
HXLINE( 638)						 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 638)						int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 638)						 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 638)						int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 638)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 638)						pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE( 640)		switch((int)(format)){
            			case (int)1: {
HXLINE( 642)				int this4 = (int)0;
HXDLIN( 642)				int argb = this4;
HXDLIN( 642)				argb = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 642)				return argb;
            			}
            			break;
            			case (int)2: {
HXLINE( 643)				int this5 = (int)0;
HXDLIN( 643)				int bgra = this5;
HXDLIN( 643)				bgra = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 643)				return bgra;
            			}
            			break;
            			default:{
HXLINE( 644)				return pixel;
            			}
            		}
HXLINE( 640)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,getPixel32,return )

 ::haxe::io::Bytes ImageDataUtil_obj::getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_651_getPixels)
HXLINE( 653)		if (hx::IsNull( image->buffer->data )) {
HXLINE( 653)			return null();
            		}
HXLINE( 655)		int length = ::Std_obj::_hx_int((rect->width * rect->height));
HXLINE( 656)		 ::haxe::io::Bytes bytes = ::haxe::io::Bytes_obj::alloc((length * (int)4));
HXLINE( 659)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 659)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_get_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),format,hx::DynamicPtr(bytes));
            		}
            		else {
HXLINE( 663)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 664)			int sourceFormat = image->buffer->format;
HXLINE( 665)			bool premultiplied = image->buffer->premultiplied;
HXLINE( 667)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView dataView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE( 668)			int position;
HXDLIN( 668)			int argb;
HXDLIN( 668)			int bgra;
HXDLIN( 668)			int pixel;
HXLINE( 669)			int destPosition = (int)0;
HXLINE( 671)			{
HXLINE( 671)				int _g1 = (int)0;
HXDLIN( 671)				int _g = dataView->height;
HXDLIN( 671)				while((_g1 < _g)){
HXLINE( 671)					_g1 = (_g1 + (int)1);
HXDLIN( 671)					int y = (_g1 - (int)1);
HXLINE( 673)					int dataView1 = dataView->offset;
HXDLIN( 673)					position = (dataView1 + (dataView->stride * y));
HXLINE( 675)					{
HXLINE( 675)						int _g3 = (int)0;
HXDLIN( 675)						int _g2 = dataView->width;
HXDLIN( 675)						while((_g3 < _g2)){
HXLINE( 675)							_g3 = (_g3 + (int)1);
HXDLIN( 675)							int x = (_g3 - (int)1);
HXLINE( 677)							{
HXLINE( 677)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 677)										int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 677)										int data1 = data->byteOffset;
HXDLIN( 677)										int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (position + (int)1))) & (int)(int)255);
HXDLIN( 677)										int data2 = data->byteOffset;
HXDLIN( 677)										int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (position + (int)2))) & (int)(int)255);
HXDLIN( 677)										int data3 = data->byteOffset;
HXDLIN( 677)										pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 677)										int data4 = data->byteOffset;
HXDLIN( 677)										int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (position + (int)1))) & (int)(int)255);
HXDLIN( 677)										int data5 = data->byteOffset;
HXDLIN( 677)										int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (position + (int)2))) & (int)(int)255);
HXDLIN( 677)										int data6 = data->byteOffset;
HXDLIN( 677)										int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (position + (int)3))) & (int)(int)255);
HXDLIN( 677)										pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 677)										int data7 = data->byteOffset;
HXDLIN( 677)										int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (position + (int)2))) & (int)(int)255);
HXDLIN( 677)										int data8 = data->byteOffset;
HXDLIN( 677)										int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (position + (int)1))) & (int)(int)255);
HXDLIN( 677)										int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + position)) & (int)(int)255);
HXDLIN( 677)										int data9 = data->byteOffset;
HXDLIN( 677)										pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (position + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 677)								if (premultiplied) {
HXLINE( 677)									bool _hx_tmp;
HXDLIN( 677)									if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE( 677)										_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 677)										_hx_tmp = false;
            									}
HXDLIN( 677)									if (_hx_tmp) {
HXLINE( 677)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN( 677)										{
HXLINE( 677)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 677)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 677)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 677)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 677)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 677)											pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 679)							switch((int)(format)){
            								case (int)1: {
HXLINE( 681)									int this4 = (int)0;
HXDLIN( 681)									int argb1 = this4;
HXDLIN( 681)									argb1 = ((int)((int)((int)((int)((int)((int)pixel & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255));
HXDLIN( 681)									argb = argb1;
HXDLIN( 681)									pixel = argb;
            								}
            								break;
            								case (int)2: {
HXLINE( 682)									int this5 = (int)0;
HXDLIN( 682)									int bgra1 = this5;
HXDLIN( 682)									bgra1 = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
HXDLIN( 682)									bgra = bgra1;
HXDLIN( 682)									pixel = bgra;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 687)							{
HXLINE( 687)								destPosition = (destPosition + (int)1);
HXDLIN( 687)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
            							}
HXLINE( 688)							{
HXLINE( 688)								destPosition = (destPosition + (int)1);
HXDLIN( 688)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
            							}
HXLINE( 689)							{
HXLINE( 689)								destPosition = (destPosition + (int)1);
HXDLIN( 689)								bytes->b[(destPosition - (int)1)] = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
            							}
HXLINE( 690)							{
HXLINE( 690)								destPosition = (destPosition + (int)1);
HXDLIN( 690)								bytes->b[(destPosition - (int)1)] = ((int)pixel & (int)(int)255);
            							}
HXLINE( 692)							position = (position + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 700)		return bytes;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,getPixels,return )

void ImageDataUtil_obj::merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,int redMultiplier,int greenMultiplier,int blueMultiplier,int alphaMultiplier){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_705_merge)
HXLINE( 707)		bool _hx_tmp;
HXDLIN( 707)		if (hx::IsNotNull( image->buffer->data )) {
HXLINE( 707)			_hx_tmp = hx::IsNull( sourceImage->buffer->data );
            		}
            		else {
HXLINE( 707)			_hx_tmp = true;
            		}
HXDLIN( 707)		if (_hx_tmp) {
HXLINE( 707)			return;
            		}
HXLINE( 710)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 710)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_merge(hx::DynamicPtr(image),hx::DynamicPtr(sourceImage),hx::DynamicPtr(sourceRect),hx::DynamicPtr(destPoint),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            		}
            		else {
HXLINE( 714)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView sourceView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE( 715)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView destView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,sourceView->width,sourceView->height));
HXLINE( 717)			 ::lime::utils::ArrayBufferView sourceData = sourceImage->buffer->data;
HXLINE( 718)			 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE( 719)			int sourceFormat = sourceImage->buffer->format;
HXLINE( 720)			int destFormat = image->buffer->format;
HXLINE( 721)			bool sourcePremultiplied = sourceImage->buffer->premultiplied;
HXLINE( 722)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE( 724)			int sourcePosition;
HXDLIN( 724)			int destPosition;
HXDLIN( 724)			int sourcePixel;
HXDLIN( 724)			int destPixel;
HXLINE( 726)			{
HXLINE( 726)				int _g1 = (int)0;
HXDLIN( 726)				int _g = destView->height;
HXDLIN( 726)				while((_g1 < _g)){
HXLINE( 726)					_g1 = (_g1 + (int)1);
HXDLIN( 726)					int y = (_g1 - (int)1);
HXLINE( 728)					int sourceView1 = sourceView->offset;
HXDLIN( 728)					sourcePosition = (sourceView1 + (sourceView->stride * y));
HXLINE( 729)					int destView1 = destView->offset;
HXDLIN( 729)					destPosition = (destView1 + (destView->stride * y));
HXLINE( 731)					{
HXLINE( 731)						int _g3 = (int)0;
HXDLIN( 731)						int _g2 = destView->width;
HXDLIN( 731)						while((_g3 < _g2)){
HXLINE( 731)							_g3 = (_g3 + (int)1);
HXDLIN( 731)							int x = (_g3 - (int)1);
HXLINE( 733)							{
HXLINE( 733)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE( 733)										int r = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 733)										int sourceData1 = sourceData->byteOffset;
HXDLIN( 733)										int g = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData1 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 733)										int sourceData2 = sourceData->byteOffset;
HXDLIN( 733)										int b = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData2 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 733)										int sourceData3 = sourceData->byteOffset;
HXDLIN( 733)										sourcePixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData3 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 733)										int sourceData4 = sourceData->byteOffset;
HXDLIN( 733)										int r1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData4 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 733)										int sourceData5 = sourceData->byteOffset;
HXDLIN( 733)										int g1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData5 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 733)										int sourceData6 = sourceData->byteOffset;
HXDLIN( 733)										int b1 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData6 + (sourcePosition + (int)3))) & (int)(int)255);
HXDLIN( 733)										sourcePixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 733)										int sourceData7 = sourceData->byteOffset;
HXDLIN( 733)										int r2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData7 + (sourcePosition + (int)2))) & (int)(int)255);
HXDLIN( 733)										int sourceData8 = sourceData->byteOffset;
HXDLIN( 733)										int g2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData8 + (sourcePosition + (int)1))) & (int)(int)255);
HXDLIN( 733)										int b2 = ((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData->byteOffset + sourcePosition)) & (int)(int)255);
HXDLIN( 733)										int sourceData9 = sourceData->byteOffset;
HXDLIN( 733)										sourcePixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(sourceData->buffer->b,(sourceData9 + (sourcePosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 733)								if (sourcePremultiplied) {
HXLINE( 733)									bool _hx_tmp1;
HXDLIN( 733)									if ((((int)sourcePixel & (int)(int)255) != (int)0)) {
HXLINE( 733)										_hx_tmp1 = (((int)sourcePixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 733)										_hx_tmp1 = false;
            									}
HXDLIN( 733)									if (_hx_tmp1) {
HXLINE( 733)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)sourcePixel & (int)(int)255));
HXDLIN( 733)										{
HXLINE( 733)											 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 733)											int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 733)											 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 733)											int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 733)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 733)											sourcePixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)sourcePixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 734)							{
HXLINE( 734)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 734)										int r4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 734)										int destData1 = destData->byteOffset;
HXDLIN( 734)										int g4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData1 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 734)										int destData2 = destData->byteOffset;
HXDLIN( 734)										int b3 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData2 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 734)										int destData3 = destData->byteOffset;
HXDLIN( 734)										destPixel = ((int)((int)((int)((int)((int)r4 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g4 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b3 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData3 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE( 734)										int destData4 = destData->byteOffset;
HXDLIN( 734)										int r5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData4 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 734)										int destData5 = destData->byteOffset;
HXDLIN( 734)										int g5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData5 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 734)										int destData6 = destData->byteOffset;
HXDLIN( 734)										int b4 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData6 + (destPosition + (int)3))) & (int)(int)255);
HXDLIN( 734)										destPixel = ((int)((int)((int)((int)((int)r5 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g5 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b4 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE( 734)										int destData7 = destData->byteOffset;
HXDLIN( 734)										int r6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData7 + (destPosition + (int)2))) & (int)(int)255);
HXDLIN( 734)										int destData8 = destData->byteOffset;
HXDLIN( 734)										int g6 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData8 + (destPosition + (int)1))) & (int)(int)255);
HXDLIN( 734)										int b5 = ((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData->byteOffset + destPosition)) & (int)(int)255);
HXDLIN( 734)										int destData9 = destData->byteOffset;
HXDLIN( 734)										destPixel = ((int)((int)((int)((int)((int)r6 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g6 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b5 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(destData->buffer->b,(destData9 + (destPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN( 734)								if (destPremultiplied) {
HXLINE( 734)									bool _hx_tmp2;
HXDLIN( 734)									if ((((int)destPixel & (int)(int)255) != (int)0)) {
HXLINE( 734)										_hx_tmp2 = (((int)destPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE( 734)										_hx_tmp2 = false;
            									}
HXDLIN( 734)									if (_hx_tmp2) {
HXLINE( 734)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)destPixel & (int)(int)255));
HXDLIN( 734)										{
HXLINE( 734)											 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 734)											int r7 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 734)											 ::lime::utils::ArrayBufferView this5 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 734)											int g7 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN( 734)											 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN( 734)											destPixel = ((int)((int)((int)((int)((int)r7 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g7 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE( 736)							{
HXLINE( 736)								int value = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)24) & (int)(int)255) * redMultiplier) + (((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ((int)256 - redMultiplier))) / (Float)(int)256));
HXDLIN( 736)								destPixel = ((int)((int)((int)((int)((int)value & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 737)							{
HXLINE( 737)								int value1 = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)16) & (int)(int)255) * greenMultiplier) + (((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ((int)256 - greenMultiplier))) / (Float)(int)256));
HXDLIN( 737)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)value1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 738)							{
HXLINE( 738)								int value2 = ::Std_obj::_hx_int(((Float)((((int)hx::UShr(sourcePixel,(int)8) & (int)(int)255) * blueMultiplier) + (((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ((int)256 - blueMultiplier))) / (Float)(int)256));
HXDLIN( 738)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)value2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            							}
HXLINE( 739)							{
HXLINE( 739)								int value3 = ::Std_obj::_hx_int(((Float)((((int)sourcePixel & (int)(int)255) * alphaMultiplier) + (((int)destPixel & (int)(int)255) * ((int)256 - alphaMultiplier))) / (Float)(int)256));
HXDLIN( 739)								destPixel = ((int)((int)((int)((int)((int)((int)hx::UShr(destPixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(destPixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(destPixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value3 & (int)(int)255));
            							}
HXLINE( 741)							{
HXLINE( 741)								if (destPremultiplied) {
HXLINE( 741)									if ((((int)destPixel & (int)(int)255) == (int)0)) {
HXLINE( 741)										if ((destPixel != (int)0)) {
HXLINE( 741)											destPixel = (int)0;
            										}
            									}
            									else {
HXLINE( 741)										if ((((int)destPixel & (int)(int)255) != (int)255)) {
HXLINE( 741)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 741)											int this8 = this7->byteOffset;
HXDLIN( 741)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)destPixel & (int)(int)255) * (int)4)));
HXDLIN( 741)											destPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(destPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)destPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN( 741)								switch((int)(destFormat)){
            									case (int)0: {
HXLINE( 741)										{
HXLINE( 741)											int val = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 741)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val1 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData10 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val1);
            											}
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val2 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData11 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val2);
            											}
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val3 = ((int)destPixel & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData12 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE( 741)										{
HXLINE( 741)											int val4 = ((int)destPixel & (int)(int)255);
HXDLIN( 741)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val5 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData13 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val5);
            											}
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val6 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData14 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val6);
            											}
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val7 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData15 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE( 741)										{
HXLINE( 741)											int val8 = ((int)hx::UShr(destPixel,(int)8) & (int)(int)255);
HXDLIN( 741)											::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val9 = ((int)hx::UShr(destPixel,(int)16) & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData16 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val9);
            											}
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val10 = ((int)hx::UShr(destPixel,(int)24) & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData17 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val10);
            											}
            										}
HXDLIN( 741)										{
HXLINE( 741)											int val11 = ((int)destPixel & (int)(int)255);
HXDLIN( 741)											{
HXLINE( 741)												int destData18 = destData->byteOffset;
HXDLIN( 741)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
HXLINE( 743)							sourcePosition = (sourcePosition + (int)4);
HXLINE( 744)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE( 752)		image->dirty = true;
HXLINE( 753)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ImageDataUtil_obj,merge,(void))

void ImageDataUtil_obj::multiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_758_multiplyAlpha)
HXLINE( 760)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 761)		bool _hx_tmp;
HXDLIN( 761)		if (hx::IsNotNull( data )) {
HXLINE( 761)			_hx_tmp = !(image->buffer->transparent);
            		}
            		else {
HXLINE( 761)			_hx_tmp = true;
            		}
HXDLIN( 761)		if (_hx_tmp) {
HXLINE( 761)			return;
            		}
HXLINE( 764)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 764)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_multiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE( 768)			int format = image->buffer->format;
HXLINE( 769)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE( 770)			int pixel;
HXLINE( 772)			{
HXLINE( 772)				int _g1 = (int)0;
HXDLIN( 772)				int _g = length;
HXDLIN( 772)				while((_g1 < _g)){
HXLINE( 772)					_g1 = (_g1 + (int)1);
HXDLIN( 772)					int i = (_g1 - (int)1);
HXLINE( 774)					{
HXLINE( 774)						int offset = (i * (int)4);
HXDLIN( 774)						switch((int)(format)){
            							case (int)0: {
HXLINE( 774)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 774)								int data1 = data->byteOffset;
HXDLIN( 774)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 774)								int data2 = data->byteOffset;
HXDLIN( 774)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 774)								int data3 = data->byteOffset;
HXDLIN( 774)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE( 774)								int data4 = data->byteOffset;
HXDLIN( 774)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 774)								int data5 = data->byteOffset;
HXDLIN( 774)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 774)								int data6 = data->byteOffset;
HXDLIN( 774)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN( 774)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE( 774)								int data7 = data->byteOffset;
HXDLIN( 774)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN( 774)								int data8 = data->byteOffset;
HXDLIN( 774)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN( 774)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN( 774)								int data9 = data->byteOffset;
HXDLIN( 774)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
            					}
HXLINE( 775)					{
HXLINE( 775)						int offset1 = (i * (int)4);
HXDLIN( 775)						if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE( 775)							if ((pixel != (int)0)) {
HXLINE( 775)								pixel = (int)0;
            							}
            						}
            						else {
HXLINE( 775)							if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE( 775)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN( 775)								int this2 = this1->byteOffset;
HXDLIN( 775)								::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this1->buffer->b,(this2 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN( 775)								pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
HXDLIN( 775)						switch((int)(format)){
            							case (int)0: {
HXLINE( 775)								{
HXLINE( 775)									int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 775)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data10 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset1 + (int)1)),val1);
            									}
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data11 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset1 + (int)2)),val2);
            									}
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val3 = ((int)pixel & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data12 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset1 + (int)3)),val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 775)								{
HXLINE( 775)									int val4 = ((int)pixel & (int)(int)255);
HXDLIN( 775)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data13 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset1 + (int)1)),val5);
            									}
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data14 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset1 + (int)2)),val6);
            									}
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data15 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset1 + (int)3)),val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE( 775)								{
HXLINE( 775)									int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN( 775)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data16 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset1 + (int)1)),val9);
            									}
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data17 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset1 + (int)2)),val10);
            									}
            								}
HXDLIN( 775)								{
HXLINE( 775)									int val11 = ((int)pixel & (int)(int)255);
HXDLIN( 775)									{
HXLINE( 775)										int data18 = data->byteOffset;
HXDLIN( 775)										::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset1 + (int)3)),val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE( 781)		image->buffer->premultiplied = true;
HXLINE( 782)		image->dirty = true;
HXLINE( 783)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,multiplyAlpha,(void))

void ImageDataUtil_obj::resize( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_788_resize)
HXLINE( 790)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE( 791)		bool _hx_tmp;
HXDLIN( 791)		if ((buffer->width == newWidth)) {
HXLINE( 791)			_hx_tmp = (buffer->height == newHeight);
            		}
            		else {
HXLINE( 791)			_hx_tmp = false;
            		}
HXDLIN( 791)		if (_hx_tmp) {
HXLINE( 791)			return;
            		}
HXLINE( 792)		 ::Dynamic elements = ((newWidth * newHeight) * (int)4);
HXDLIN( 792)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 792)		if (hx::IsNotNull( elements )) {
HXLINE( 792)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE( 792)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 792)		 ::lime::graphics::ImageBuffer newBuffer =  ::lime::graphics::ImageBuffer_obj::__alloc( HX_CTX ,this1,newWidth,newHeight,null(),null());
HXLINE( 795)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 795)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_resize(hx::DynamicPtr(image),hx::DynamicPtr(newBuffer),newWidth,newHeight);
            		}
            		else {
HXLINE( 799)			int imageWidth = image->width;
HXLINE( 800)			int imageHeight = image->height;
HXLINE( 802)			 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE( 803)			 ::lime::utils::ArrayBufferView newData = newBuffer->data;
HXLINE( 804)			int sourceIndex;
HXDLIN( 804)			int sourceIndexX;
HXDLIN( 804)			int sourceIndexY;
HXDLIN( 804)			int sourceIndexXY;
HXDLIN( 804)			int index;
HXLINE( 805)			int sourceX;
HXDLIN( 805)			int sourceY;
HXLINE( 806)			Float u;
HXDLIN( 806)			Float v;
HXDLIN( 806)			Float uRatio;
HXDLIN( 806)			Float vRatio;
HXDLIN( 806)			Float uOpposite;
HXDLIN( 806)			Float vOpposite;
HXLINE( 808)			{
HXLINE( 808)				int _g1 = (int)0;
HXDLIN( 808)				int _g = newHeight;
HXDLIN( 808)				while((_g1 < _g)){
HXLINE( 808)					_g1 = (_g1 + (int)1);
HXDLIN( 808)					int y = (_g1 - (int)1);
HXLINE( 810)					{
HXLINE( 810)						int _g3 = (int)0;
HXDLIN( 810)						int _g2 = newWidth;
HXDLIN( 810)						while((_g3 < _g2)){
HXLINE( 810)							_g3 = (_g3 + (int)1);
HXDLIN( 810)							int x = (_g3 - (int)1);
HXLINE( 814)							u = ((((Float)(x + ((Float)0.5)) / (Float)newWidth) * imageWidth) - ((Float)0.5));
HXLINE( 815)							v = ((((Float)(y + ((Float)0.5)) / (Float)newHeight) * imageHeight) - ((Float)0.5));
HXLINE( 817)							sourceX = ::Std_obj::_hx_int(u);
HXLINE( 818)							sourceY = ::Std_obj::_hx_int(v);
HXLINE( 820)							sourceIndex = (((sourceY * imageWidth) + sourceX) * (int)4);
HXLINE( 821)							if ((sourceX < (imageWidth - (int)1))) {
HXLINE( 821)								sourceIndexX = (sourceIndex + (int)4);
            							}
            							else {
HXLINE( 821)								sourceIndexX = sourceIndex;
            							}
HXLINE( 822)							if ((sourceY < (imageHeight - (int)1))) {
HXLINE( 822)								sourceIndexY = (sourceIndex + (imageWidth * (int)4));
            							}
            							else {
HXLINE( 822)								sourceIndexY = sourceIndex;
            							}
HXLINE( 823)							if ((sourceIndexX != sourceIndex)) {
HXLINE( 823)								sourceIndexXY = (sourceIndexY + (int)4);
            							}
            							else {
HXLINE( 823)								sourceIndexXY = sourceIndexY;
            							}
HXLINE( 825)							index = (((y * newWidth) + x) * (int)4);
HXLINE( 827)							uRatio = (u - sourceX);
HXLINE( 828)							vRatio = (v - sourceY);
HXLINE( 829)							uOpposite = ((int)1 - uRatio);
HXLINE( 830)							vOpposite = ((int)1 - vRatio);
HXLINE( 832)							{
HXLINE( 832)								int _hx_int = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN( 832)								Float val;
HXDLIN( 832)								if ((_hx_int < (int)0)) {
HXLINE( 832)									val = (((Float)4294967296.0) + _hx_int);
            								}
            								else {
HXLINE( 832)									val = (_hx_int + ((Float)0.0));
            								}
HXDLIN( 832)								Float val1 = (val * uOpposite);
HXDLIN( 832)								int int1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexX)) & (int)(int)255);
HXDLIN( 832)								Float val2;
HXDLIN( 832)								if ((int1 < (int)0)) {
HXLINE( 832)									val2 = (((Float)4294967296.0) + int1);
            								}
            								else {
HXLINE( 832)									val2 = (int1 + ((Float)0.0));
            								}
HXDLIN( 832)								Float val3 = ((val1 + (val2 * uRatio)) * vOpposite);
HXDLIN( 832)								int int2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexY)) & (int)(int)255);
HXDLIN( 832)								Float val4;
HXDLIN( 832)								if ((int2 < (int)0)) {
HXLINE( 832)									val4 = (((Float)4294967296.0) + int2);
            								}
            								else {
HXLINE( 832)									val4 = (int2 + ((Float)0.0));
            								}
HXDLIN( 832)								Float val5 = (val4 * uOpposite);
HXDLIN( 832)								int int3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndexXY)) & (int)(int)255);
HXDLIN( 832)								Float val6;
HXDLIN( 832)								if ((int3 < (int)0)) {
HXLINE( 832)									val6 = (((Float)4294967296.0) + int3);
            								}
            								else {
HXLINE( 832)									val6 = (int3 + ((Float)0.0));
            								}
HXDLIN( 832)								int val7 = ::Std_obj::_hx_int((val3 + ((val5 + (val6 * uRatio)) * vRatio)));
HXDLIN( 832)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val7);
            							}
HXLINE( 833)							{
HXLINE( 833)								int data1 = data->byteOffset;
HXDLIN( 833)								int int4 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN( 833)								Float val8;
HXDLIN( 833)								if ((int4 < (int)0)) {
HXLINE( 833)									val8 = (((Float)4294967296.0) + int4);
            								}
            								else {
HXLINE( 833)									val8 = (int4 + ((Float)0.0));
            								}
HXDLIN( 833)								Float val9 = (val8 * uOpposite);
HXDLIN( 833)								int data2 = data->byteOffset;
HXDLIN( 833)								int int5 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (sourceIndexX + (int)1))) & (int)(int)255);
HXDLIN( 833)								Float val10;
HXDLIN( 833)								if ((int5 < (int)0)) {
HXLINE( 833)									val10 = (((Float)4294967296.0) + int5);
            								}
            								else {
HXLINE( 833)									val10 = (int5 + ((Float)0.0));
            								}
HXDLIN( 833)								Float val11 = ((val9 + (val10 * uRatio)) * vOpposite);
HXDLIN( 833)								int data3 = data->byteOffset;
HXDLIN( 833)								int int6 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (sourceIndexY + (int)1))) & (int)(int)255);
HXDLIN( 833)								Float val12;
HXDLIN( 833)								if ((int6 < (int)0)) {
HXLINE( 833)									val12 = (((Float)4294967296.0) + int6);
            								}
            								else {
HXLINE( 833)									val12 = (int6 + ((Float)0.0));
            								}
HXDLIN( 833)								Float val13 = (val12 * uOpposite);
HXDLIN( 833)								int data4 = data->byteOffset;
HXDLIN( 833)								int int7 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (sourceIndexXY + (int)1))) & (int)(int)255);
HXDLIN( 833)								Float val14;
HXDLIN( 833)								if ((int7 < (int)0)) {
HXLINE( 833)									val14 = (((Float)4294967296.0) + int7);
            								}
            								else {
HXLINE( 833)									val14 = (int7 + ((Float)0.0));
            								}
HXDLIN( 833)								int val15 = ::Std_obj::_hx_int((val11 + ((val13 + (val14 * uRatio)) * vRatio)));
HXDLIN( 833)								{
HXLINE( 833)									int newData1 = newData->byteOffset;
HXDLIN( 833)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData1 + (index + (int)1)),val15);
            								}
            							}
HXLINE( 834)							{
HXLINE( 834)								int data5 = data->byteOffset;
HXDLIN( 834)								int int8 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN( 834)								Float val16;
HXDLIN( 834)								if ((int8 < (int)0)) {
HXLINE( 834)									val16 = (((Float)4294967296.0) + int8);
            								}
            								else {
HXLINE( 834)									val16 = (int8 + ((Float)0.0));
            								}
HXDLIN( 834)								Float val17 = (val16 * uOpposite);
HXDLIN( 834)								int data6 = data->byteOffset;
HXDLIN( 834)								int int9 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (sourceIndexX + (int)2))) & (int)(int)255);
HXDLIN( 834)								Float val18;
HXDLIN( 834)								if ((int9 < (int)0)) {
HXLINE( 834)									val18 = (((Float)4294967296.0) + int9);
            								}
            								else {
HXLINE( 834)									val18 = (int9 + ((Float)0.0));
            								}
HXDLIN( 834)								Float val19 = ((val17 + (val18 * uRatio)) * vOpposite);
HXDLIN( 834)								int data7 = data->byteOffset;
HXDLIN( 834)								int int10 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (sourceIndexY + (int)2))) & (int)(int)255);
HXDLIN( 834)								Float val20;
HXDLIN( 834)								if ((int10 < (int)0)) {
HXLINE( 834)									val20 = (((Float)4294967296.0) + int10);
            								}
            								else {
HXLINE( 834)									val20 = (int10 + ((Float)0.0));
            								}
HXDLIN( 834)								Float val21 = (val20 * uOpposite);
HXDLIN( 834)								int data8 = data->byteOffset;
HXDLIN( 834)								int int11 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (sourceIndexXY + (int)2))) & (int)(int)255);
HXDLIN( 834)								Float val22;
HXDLIN( 834)								if ((int11 < (int)0)) {
HXLINE( 834)									val22 = (((Float)4294967296.0) + int11);
            								}
            								else {
HXLINE( 834)									val22 = (int11 + ((Float)0.0));
            								}
HXDLIN( 834)								int val23 = ::Std_obj::_hx_int((val19 + ((val21 + (val22 * uRatio)) * vRatio)));
HXDLIN( 834)								{
HXLINE( 834)									int newData2 = newData->byteOffset;
HXDLIN( 834)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData2 + (index + (int)2)),val23);
            								}
            							}
HXLINE( 838)							bool _hx_tmp1;
HXDLIN( 838)							bool _hx_tmp2;
HXDLIN( 838)							int data9 = data->byteOffset;
HXDLIN( 838)							if (hx::IsNotEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (sourceIndexX + (int)3))) & (int)(int)255),(int)0 )) {
HXLINE( 838)								int data10 = data->byteOffset;
HXDLIN( 838)								_hx_tmp2 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data10 + (sourceIndexY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE( 838)								_hx_tmp2 = true;
            							}
HXDLIN( 838)							if (!(_hx_tmp2)) {
HXLINE( 838)								int data11 = data->byteOffset;
HXDLIN( 838)								_hx_tmp1 = hx::IsEq( ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data11 + (sourceIndexXY + (int)3))) & (int)(int)255),(int)0 );
            							}
            							else {
HXLINE( 838)								_hx_tmp1 = true;
            							}
HXDLIN( 838)							if (_hx_tmp1) {
HXLINE( 840)								int newData3 = newData->byteOffset;
HXDLIN( 840)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData3 + (index + (int)3)),(int)0);
            							}
            							else {
HXLINE( 844)								int data12 = data->byteOffset;
HXDLIN( 844)								int val24 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data12 + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN( 844)								{
HXLINE( 844)									int newData4 = newData->byteOffset;
HXDLIN( 844)									::__hxcpp_memory_set_byte(newData->buffer->b,(newData4 + (index + (int)3)),val24);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 854)		buffer->data = newBuffer->data;
HXLINE( 855)		buffer->width = newWidth;
HXLINE( 856)		buffer->height = newHeight;
HXLINE( 865)		image->dirty = true;
HXLINE( 866)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resize,(void))

void ImageDataUtil_obj::resizeBuffer( ::lime::graphics::Image image,int newWidth,int newHeight){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_871_resizeBuffer)
HXLINE( 873)		 ::lime::graphics::ImageBuffer buffer = image->buffer;
HXLINE( 874)		 ::lime::utils::ArrayBufferView data = image->get_data();
HXLINE( 875)		 ::Dynamic elements = ((newWidth * newHeight) * (int)4);
HXDLIN( 875)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 875)		if (hx::IsNotNull( elements )) {
HXLINE( 875)			this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,elements,(int)4);
            		}
            		else {
HXLINE( 875)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN( 875)		 ::lime::utils::ArrayBufferView newData = this1;
HXLINE( 876)		int sourceIndex;
HXDLIN( 876)		int index;
HXLINE( 878)		{
HXLINE( 878)			int _g1 = (int)0;
HXDLIN( 878)			int _g = buffer->height;
HXDLIN( 878)			while((_g1 < _g)){
HXLINE( 878)				_g1 = (_g1 + (int)1);
HXDLIN( 878)				int y = (_g1 - (int)1);
HXLINE( 880)				{
HXLINE( 880)					int _g3 = (int)0;
HXDLIN( 880)					int _g2 = buffer->width;
HXDLIN( 880)					while((_g3 < _g2)){
HXLINE( 880)						_g3 = (_g3 + (int)1);
HXDLIN( 880)						int x = (_g3 - (int)1);
HXLINE( 882)						sourceIndex = (((y * buffer->width) + x) * (int)4);
HXLINE( 883)						index = (((y * newWidth) + x) * (int)4);
HXLINE( 885)						{
HXLINE( 885)							int val = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + sourceIndex)) & (int)(int)255);
HXDLIN( 885)							::__hxcpp_memory_set_byte(newData->buffer->b,(newData->byteOffset + index),val);
            						}
HXLINE( 886)						{
HXLINE( 886)							int data1 = data->byteOffset;
HXDLIN( 886)							int val1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (sourceIndex + (int)1))) & (int)(int)255);
HXDLIN( 886)							{
HXLINE( 886)								int newData1 = newData->byteOffset;
HXDLIN( 886)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData1 + (index + (int)1)),val1);
            							}
            						}
HXLINE( 887)						{
HXLINE( 887)							int data2 = data->byteOffset;
HXDLIN( 887)							int val2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (sourceIndex + (int)2))) & (int)(int)255);
HXDLIN( 887)							{
HXLINE( 887)								int newData2 = newData->byteOffset;
HXDLIN( 887)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData2 + (index + (int)2)),val2);
            							}
            						}
HXLINE( 888)						{
HXLINE( 888)							int data3 = data->byteOffset;
HXDLIN( 888)							int val3 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (sourceIndex + (int)3))) & (int)(int)255);
HXDLIN( 888)							{
HXLINE( 888)								int newData3 = newData->byteOffset;
HXDLIN( 888)								::__hxcpp_memory_set_byte(newData->buffer->b,(newData3 + (index + (int)3)),val3);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 894)		buffer->data = newData;
HXLINE( 895)		buffer->width = newWidth;
HXLINE( 896)		buffer->height = newHeight;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ImageDataUtil_obj,resizeBuffer,(void))

void ImageDataUtil_obj::setFormat( ::lime::graphics::Image image,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_901_setFormat)
HXLINE( 903)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE( 904)		if (hx::IsNull( data )) {
HXLINE( 904)			return;
            		}
HXLINE( 907)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE( 907)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_set_format(hx::DynamicPtr(image),format);
            		}
            		else {
HXLINE( 911)			int index;
HXDLIN( 911)			 ::Dynamic a16;
HXLINE( 912)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE( 913)			int r1;
HXDLIN( 913)			int g1;
HXDLIN( 913)			int b1;
HXDLIN( 913)			int a1;
HXDLIN( 913)			int r2;
HXDLIN( 913)			int g2;
HXDLIN( 913)			int b2;
HXDLIN( 913)			int a2;
HXLINE( 914)			 ::Dynamic r;
HXDLIN( 914)			 ::Dynamic g;
HXDLIN( 914)			 ::Dynamic b;
HXDLIN( 914)			 ::Dynamic a;
HXLINE( 916)			{
HXLINE( 916)				int _g = image->get_format();
HXDLIN( 916)				switch((int)(_g)){
            					case (int)0: {
HXLINE( 920)						r1 = (int)0;
HXLINE( 921)						g1 = (int)1;
HXLINE( 922)						b1 = (int)2;
HXLINE( 923)						a1 = (int)3;
            					}
            					break;
            					case (int)1: {
HXLINE( 927)						r1 = (int)1;
HXLINE( 928)						g1 = (int)2;
HXLINE( 929)						b1 = (int)3;
HXLINE( 930)						a1 = (int)0;
            					}
            					break;
            					case (int)2: {
HXLINE( 934)						r1 = (int)2;
HXLINE( 935)						g1 = (int)1;
HXLINE( 936)						b1 = (int)0;
HXLINE( 937)						a1 = (int)3;
            					}
            					break;
            				}
            			}
HXLINE( 941)			switch((int)(format)){
            				case (int)0: {
HXLINE( 945)					r2 = (int)0;
HXLINE( 946)					g2 = (int)1;
HXLINE( 947)					b2 = (int)2;
HXLINE( 948)					a2 = (int)3;
            				}
            				break;
            				case (int)1: {
HXLINE( 952)					r2 = (int)1;
HXLINE( 953)					g2 = (int)2;
HXLINE( 954)					b2 = (int)3;
HXLINE( 955)					a2 = (int)0;
            				}
            				break;
            				case (int)2: {
HXLINE( 959)					r2 = (int)2;
HXLINE( 960)					g2 = (int)1;
HXLINE( 961)					b2 = (int)0;
HXLINE( 962)					a2 = (int)3;
            				}
            				break;
            			}
HXLINE( 966)			{
HXLINE( 966)				int _g2 = (int)0;
HXDLIN( 966)				int _g1 = length;
HXDLIN( 966)				while((_g2 < _g1)){
HXLINE( 966)					_g2 = (_g2 + (int)1);
HXDLIN( 966)					int i = (_g2 - (int)1);
HXLINE( 968)					index = (i * (int)4);
HXLINE( 970)					int data1 = data->byteOffset;
HXDLIN( 970)					r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (index + r1))) & (int)(int)255);
HXLINE( 971)					int data2 = data->byteOffset;
HXDLIN( 971)					g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (index + g1))) & (int)(int)255);
HXLINE( 972)					int data3 = data->byteOffset;
HXDLIN( 972)					b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (index + b1))) & (int)(int)255);
HXLINE( 973)					int data4 = data->byteOffset;
HXDLIN( 973)					a = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (index + a1))) & (int)(int)255);
HXLINE( 975)					{
HXLINE( 975)						int val = r;
HXDLIN( 975)						{
HXLINE( 975)							int data5 = data->byteOffset;
HXDLIN( 975)							::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (index + r2)),val);
            						}
            					}
HXLINE( 976)					{
HXLINE( 976)						int val1 = g;
HXDLIN( 976)						{
HXLINE( 976)							int data6 = data->byteOffset;
HXDLIN( 976)							::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (index + g2)),val1);
            						}
            					}
HXLINE( 977)					{
HXLINE( 977)						int val2 = b;
HXDLIN( 977)						{
HXLINE( 977)							int data7 = data->byteOffset;
HXDLIN( 977)							::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (index + b2)),val2);
            						}
            					}
HXLINE( 978)					{
HXLINE( 978)						int val3 = a;
HXDLIN( 978)						{
HXLINE( 978)							int data8 = data->byteOffset;
HXDLIN( 978)							::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (index + a2)),val3);
            						}
            					}
            				}
            			}
            		}
HXLINE( 984)		image->buffer->format = format;
HXLINE( 985)		image->dirty = true;
HXLINE( 986)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,setFormat,(void))

void ImageDataUtil_obj::setPixel( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_991_setPixel)
HXLINE( 993)		int pixel;
HXLINE( 995)		switch((int)(format)){
            			case (int)1: {
HXLINE( 997)				int argb = color;
HXDLIN( 997)				int this1 = (int)0;
HXDLIN( 997)				int rgba = this1;
HXDLIN( 997)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN( 997)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE( 998)				int bgra = color;
HXDLIN( 998)				int this2 = (int)0;
HXDLIN( 998)				int rgba1 = this2;
HXDLIN( 998)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN( 998)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE( 999)				pixel = color;
            			}
            		}
HXLINE(1005)		int this3 = (int)0;
HXDLIN(1005)		int source = this3;
HXLINE(1006)		{
HXLINE(1006)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1006)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1006)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN(1006)			bool premultiplied = image->buffer->premultiplied;
HXDLIN(1006)			switch((int)(image->buffer->format)){
            				case (int)0: {
HXLINE(1006)					int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN(1006)					int data1 = data->byteOffset;
HXDLIN(1006)					int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1006)					int data2 = data->byteOffset;
HXDLIN(1006)					int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1006)					int data3 = data->byteOffset;
HXDLIN(1006)					source = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)1: {
HXLINE(1006)					int data4 = data->byteOffset;
HXDLIN(1006)					int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1006)					int data5 = data->byteOffset;
HXDLIN(1006)					int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1006)					int data6 = data->byteOffset;
HXDLIN(1006)					int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset1 + (int)3))) & (int)(int)255);
HXDLIN(1006)					source = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            				case (int)2: {
HXLINE(1006)					int data7 = data->byteOffset;
HXDLIN(1006)					int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset1 + (int)2))) & (int)(int)255);
HXDLIN(1006)					int data8 = data->byteOffset;
HXDLIN(1006)					int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset1 + (int)1))) & (int)(int)255);
HXDLIN(1006)					int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset1)) & (int)(int)255);
HXDLIN(1006)					int data9 = data->byteOffset;
HXDLIN(1006)					source = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset1 + (int)3))) & (int)(int)255) & (int)(int)255));
            				}
            				break;
            			}
HXDLIN(1006)			if (premultiplied) {
HXLINE(1006)				bool _hx_tmp;
HXDLIN(1006)				if ((((int)source & (int)(int)255) != (int)0)) {
HXLINE(1006)					_hx_tmp = (((int)source & (int)(int)255) != (int)255);
            				}
            				else {
HXLINE(1006)					_hx_tmp = false;
            				}
HXDLIN(1006)				if (_hx_tmp) {
HXLINE(1006)					::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)source & (int)(int)255));
HXDLIN(1006)					{
HXLINE(1006)						 ::lime::utils::ArrayBufferView this4 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1006)						int r3 = ((int)::__hxcpp_memory_get_byte(this4->buffer->b,(this4->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1006)						 ::lime::utils::ArrayBufferView this5 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1006)						int g3 = ((int)::__hxcpp_memory_get_byte(this5->buffer->b,(this5->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1006)						 ::lime::utils::ArrayBufferView this6 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1006)						source = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this6->buffer->b,(this6->byteOffset + ::Math_obj::round((((int)hx::UShr(source,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)source & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
            		}
HXLINE(1008)		{
HXLINE(1008)			int value = ((int)source & (int)(int)255);
HXDLIN(1008)			pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)value & (int)(int)255));
            		}
HXLINE(1009)		{
HXLINE(1009)			 ::lime::utils::ArrayBufferView data10 = image->buffer->data;
HXDLIN(1009)			int offset2 = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1009)			int offset3 = (offset2 + ((x + image->offsetX) * (int)4));
HXDLIN(1009)			int format1 = image->buffer->format;
HXDLIN(1009)			if (image->buffer->premultiplied) {
HXLINE(1009)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1009)					if ((pixel != (int)0)) {
HXLINE(1009)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1009)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1009)						 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1009)						int this8 = this7->byteOffset;
HXDLIN(1009)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this7->buffer->b,(this8 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1009)						pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1009)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1009)					{
HXLINE(1009)						int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1009)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val);
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data11 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data11 + (offset3 + (int)1)),val1);
            						}
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data12 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data12 + (offset3 + (int)2)),val2);
            						}
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data13 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data13 + (offset3 + (int)3)),val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1009)					{
HXLINE(1009)						int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1009)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val4);
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data14 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data14 + (offset3 + (int)1)),val5);
            						}
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data15 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data15 + (offset3 + (int)2)),val6);
            						}
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data16 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data16 + (offset3 + (int)3)),val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1009)					{
HXLINE(1009)						int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1009)						::__hxcpp_memory_set_byte(data10->buffer->b,(data10->byteOffset + offset3),val8);
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data17 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data17 + (offset3 + (int)1)),val9);
            						}
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data18 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data18 + (offset3 + (int)2)),val10);
            						}
            					}
HXDLIN(1009)					{
HXLINE(1009)						int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1009)						{
HXLINE(1009)							int data19 = data10->byteOffset;
HXDLIN(1009)							::__hxcpp_memory_set_byte(data10->buffer->b,(data19 + (offset3 + (int)3)),val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1011)		image->dirty = true;
HXLINE(1012)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel,(void))

void ImageDataUtil_obj::setPixel32( ::lime::graphics::Image image,int x,int y,int color,int format){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1017_setPixel32)
HXLINE(1019)		int pixel;
HXLINE(1021)		switch((int)(format)){
            			case (int)1: {
HXLINE(1023)				int argb = color;
HXDLIN(1023)				int this1 = (int)0;
HXDLIN(1023)				int rgba = this1;
HXDLIN(1023)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1023)				pixel = rgba;
            			}
            			break;
            			case (int)2: {
HXLINE(1024)				int bgra = color;
HXDLIN(1024)				int this2 = (int)0;
HXDLIN(1024)				int rgba1 = this2;
HXDLIN(1024)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1024)				pixel = rgba1;
            			}
            			break;
            			default:{
HXLINE(1025)				pixel = color;
            			}
            		}
HXLINE(1029)		if (!(image->get_transparent())) {
HXLINE(1029)			pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            		}
HXLINE(1030)		{
HXLINE(1030)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXDLIN(1030)			int offset = (((int)4 * (y + image->offsetY)) * image->buffer->width);
HXDLIN(1030)			int offset1 = (offset + ((x + image->offsetX) * (int)4));
HXDLIN(1030)			int format1 = image->buffer->format;
HXDLIN(1030)			if (image->buffer->premultiplied) {
HXLINE(1030)				if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1030)					if ((pixel != (int)0)) {
HXLINE(1030)						pixel = (int)0;
            					}
            				}
            				else {
HXLINE(1030)					if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1030)						 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1030)						int this4 = this3->byteOffset;
HXDLIN(1030)						::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1030)						pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            					}
            				}
            			}
HXDLIN(1030)			switch((int)(format1)){
            				case (int)0: {
HXLINE(1030)					{
HXLINE(1030)						int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1030)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data1 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset1 + (int)1)),val1);
            						}
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data2 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset1 + (int)2)),val2);
            						}
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data3 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset1 + (int)3)),val3);
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(1030)					{
HXLINE(1030)						int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1030)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data4 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset1 + (int)1)),val5);
            						}
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data5 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset1 + (int)2)),val6);
            						}
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data6 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset1 + (int)3)),val7);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1030)					{
HXLINE(1030)						int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1030)						::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data7 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset1 + (int)1)),val9);
            						}
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data8 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset1 + (int)2)),val10);
            						}
            					}
HXDLIN(1030)					{
HXLINE(1030)						int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1030)						{
HXLINE(1030)							int data9 = data->byteOffset;
HXDLIN(1030)							::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset1 + (int)3)),val11);
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE(1032)		image->dirty = true;
HXLINE(1033)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(ImageDataUtil_obj,setPixel32,(void))

void ImageDataUtil_obj::setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::haxe::io::Bytes bytes,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1038_setPixels)
HXLINE(1040)		if (hx::IsNull( image->buffer->data )) {
HXLINE(1040)			return;
            		}
HXLINE(1043)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1043)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_set_pixels(hx::DynamicPtr(image),hx::DynamicPtr(rect),hx::DynamicPtr(bytes),format);
            		}
            		else {
HXLINE(1047)			 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1048)			int sourceFormat = image->buffer->format;
HXLINE(1049)			bool premultiplied = image->buffer->premultiplied;
HXLINE(1050)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView dataView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image,rect);
HXLINE(1051)			int row;
HXDLIN(1051)			int color;
HXDLIN(1051)			int pixel;
HXLINE(1052)			bool transparent = image->get_transparent();
HXLINE(1053)			int dataPosition = (int)0;
HXLINE(1055)			{
HXLINE(1055)				int _g1 = (int)0;
HXDLIN(1055)				int _g = dataView->height;
HXDLIN(1055)				while((_g1 < _g)){
HXLINE(1055)					_g1 = (_g1 + (int)1);
HXDLIN(1055)					int y = (_g1 - (int)1);
HXLINE(1057)					int dataView1 = dataView->offset;
HXDLIN(1057)					row = (dataView1 + (dataView->stride * y));
HXLINE(1059)					{
HXLINE(1059)						int _g3 = (int)0;
HXDLIN(1059)						int _g2 = dataView->width;
HXDLIN(1059)						while((_g3 < _g2)){
HXLINE(1059)							_g3 = (_g3 + (int)1);
HXDLIN(1059)							int x = (_g3 - (int)1);
HXLINE(1062)							::Array< unsigned char > bytes1 = bytes->b;
HXDLIN(1062)							int bytes2 = bytes1->__get((dataPosition + (int)3));
HXDLIN(1062)							::Array< unsigned char > bytes3 = bytes->b;
HXDLIN(1062)							int color1 = ((int)bytes2 | (int)((int)bytes3->__get((dataPosition + (int)2)) << (int)(int)8));
HXDLIN(1062)							::Array< unsigned char > bytes4 = bytes->b;
HXDLIN(1062)							int color2 = ((int)color1 | (int)((int)bytes4->__get((dataPosition + (int)1)) << (int)(int)16));
HXDLIN(1062)							color = ((int)color2 | (int)((int)bytes->b->__get(dataPosition) << (int)(int)24));
HXLINE(1063)							dataPosition = (dataPosition + (int)4);
HXLINE(1065)							switch((int)(format)){
            								case (int)1: {
HXLINE(1067)									int argb = color;
HXDLIN(1067)									int this1 = (int)0;
HXDLIN(1067)									int rgba = this1;
HXDLIN(1067)									rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1067)									pixel = rgba;
            								}
            								break;
            								case (int)2: {
HXLINE(1068)									int bgra = color;
HXDLIN(1068)									int this2 = (int)0;
HXDLIN(1068)									int rgba1 = this2;
HXDLIN(1068)									rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1068)									pixel = rgba1;
            								}
            								break;
            								default:{
HXLINE(1069)									pixel = color;
            								}
            							}
HXLINE(1073)							if (!(transparent)) {
HXLINE(1073)								pixel = ((int)((int)((int)((int)((int)((int)hx::UShr(pixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(pixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(pixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)(int)255);
            							}
HXLINE(1074)							{
HXLINE(1074)								int offset = (row + (x * (int)4));
HXDLIN(1074)								if (premultiplied) {
HXLINE(1074)									if ((((int)pixel & (int)(int)255) == (int)0)) {
HXLINE(1074)										if ((pixel != (int)0)) {
HXLINE(1074)											pixel = (int)0;
            										}
            									}
            									else {
HXLINE(1074)										if ((((int)pixel & (int)(int)255) != (int)255)) {
HXLINE(1074)											 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1074)											int this4 = this3->byteOffset;
HXDLIN(1074)											::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this3->buffer->b,(this4 + (((int)pixel & (int)(int)255) * (int)4)));
HXDLIN(1074)											pixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
HXDLIN(1074)								switch((int)(sourceFormat)){
            									case (int)0: {
HXLINE(1074)										{
HXLINE(1074)											int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1074)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val);
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data1 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data1 + (offset + (int)1)),val1);
            											}
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data2 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data2 + (offset + (int)2)),val2);
            											}
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data3 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data3 + (offset + (int)3)),val3);
            											}
            										}
            									}
            									break;
            									case (int)1: {
HXLINE(1074)										{
HXLINE(1074)											int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1074)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val4);
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data4 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data4 + (offset + (int)1)),val5);
            											}
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data5 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data5 + (offset + (int)2)),val6);
            											}
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data6 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data6 + (offset + (int)3)),val7);
            											}
            										}
            									}
            									break;
            									case (int)2: {
HXLINE(1074)										{
HXLINE(1074)											int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1074)											::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset),val8);
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data7 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data7 + (offset + (int)1)),val9);
            											}
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data8 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data8 + (offset + (int)2)),val10);
            											}
            										}
HXDLIN(1074)										{
HXLINE(1074)											int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1074)											{
HXLINE(1074)												int data9 = data->byteOffset;
HXDLIN(1074)												::__hxcpp_memory_set_byte(data->buffer->b,(data9 + (offset + (int)3)),val11);
            											}
            										}
            									}
            									break;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1082)		image->dirty = true;
HXLINE(1083)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(ImageDataUtil_obj,setPixels,(void))

int ImageDataUtil_obj::threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,int threshold,int color,int mask,bool copySource,int format){
            	HX_GC_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1088_threshold)
HXLINE(1090)		int _color;
HXDLIN(1090)		int _mask;
HXDLIN(1090)		int _threshold;
HXLINE(1092)		switch((int)(format)){
            			case (int)1: {
HXLINE(1096)				int argb = color;
HXDLIN(1096)				int this1 = (int)0;
HXDLIN(1096)				int rgba = this1;
HXDLIN(1096)				rgba = ((int)((int)((int)((int)((int)((int)hx::UShr(argb,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1096)				_color = rgba;
HXLINE(1097)				int argb1 = mask;
HXDLIN(1097)				int this2 = (int)0;
HXDLIN(1097)				int rgba1 = this2;
HXDLIN(1097)				rgba1 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb1 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb1,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1097)				_mask = rgba1;
HXLINE(1098)				int argb2 = threshold;
HXDLIN(1098)				int this3 = (int)0;
HXDLIN(1098)				int rgba2 = this3;
HXDLIN(1098)				rgba2 = ((int)((int)((int)((int)((int)((int)hx::UShr(argb2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(argb2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)argb2 & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)hx::UShr(argb2,(int)24) & (int)(int)255) & (int)(int)255));
HXDLIN(1098)				_threshold = rgba2;
            			}
            			break;
            			case (int)2: {
HXLINE(1102)				int bgra = color;
HXDLIN(1102)				int this4 = (int)0;
HXDLIN(1102)				int rgba3 = this4;
HXDLIN(1102)				rgba3 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra & (int)(int)255) & (int)(int)255));
HXDLIN(1102)				_color = rgba3;
HXLINE(1103)				int bgra1 = mask;
HXDLIN(1103)				int this5 = (int)0;
HXDLIN(1103)				int rgba4 = this5;
HXDLIN(1103)				rgba4 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra1,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra1,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra1,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra1 & (int)(int)255) & (int)(int)255));
HXDLIN(1103)				_mask = rgba4;
HXLINE(1104)				int bgra2 = threshold;
HXDLIN(1104)				int this6 = (int)0;
HXDLIN(1104)				int rgba5 = this6;
HXDLIN(1104)				rgba5 = ((int)((int)((int)((int)((int)((int)hx::UShr(bgra2,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(bgra2,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(bgra2,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)bgra2 & (int)(int)255) & (int)(int)255));
HXDLIN(1104)				_threshold = rgba5;
            			}
            			break;
            			default:{
HXLINE(1108)				_color = color;
HXLINE(1109)				_mask = mask;
HXLINE(1110)				_threshold = threshold;
            			}
            		}
HXLINE(1114)		int _operation;
HXDLIN(1114)		::String _hx_switch_0 = operation;
            		if (  (_hx_switch_0==HX_("!=",fc,1c,00,00)) ){
HXLINE(1114)			_operation = (int)0;
HXDLIN(1114)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_("<",3c,00,00,00)) ){
HXLINE(1114)			_operation = (int)2;
HXDLIN(1114)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_("<=",81,34,00,00)) ){
HXLINE(1114)			_operation = (int)3;
HXDLIN(1114)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_("==",60,35,00,00)) ){
HXLINE(1114)			_operation = (int)1;
HXDLIN(1114)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_(">",3e,00,00,00)) ){
HXLINE(1114)			_operation = (int)4;
HXDLIN(1114)			goto _hx_goto_53;
            		}
            		if (  (_hx_switch_0==HX_(">=",3f,36,00,00)) ){
HXLINE(1114)			_operation = (int)5;
HXDLIN(1114)			goto _hx_goto_53;
            		}
            		/* default */{
HXLINE(1114)			_operation = (int)-1;
            		}
            		_hx_goto_53:;
HXLINE(1126)		if ((_operation == (int)-1)) {
HXLINE(1126)			return (int)0;
            		}
HXLINE(1128)		 ::lime::utils::ArrayBufferView srcData = sourceImage->buffer->data;
HXLINE(1129)		 ::lime::utils::ArrayBufferView destData = image->buffer->data;
HXLINE(1131)		bool _hx_tmp;
HXDLIN(1131)		if (hx::IsNotNull( srcData )) {
HXLINE(1131)			_hx_tmp = hx::IsNull( destData );
            		}
            		else {
HXLINE(1131)			_hx_tmp = true;
            		}
HXDLIN(1131)		if (_hx_tmp) {
HXLINE(1131)			return (int)0;
            		}
HXLINE(1133)		int hits = (int)0;
HXLINE(1136)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1136)			 ::Dynamic hits1 = ::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_threshold;
HXDLIN(1136)			hits = ( (int)(hits1(image,sourceImage,sourceRect,destPoint,_operation,((int)((int)_threshold >> (int)(int)16) & (int)(int)65535),((int)_threshold & (int)(int)65535),((int)((int)_color >> (int)(int)16) & (int)(int)65535),((int)_color & (int)(int)65535),((int)((int)_mask >> (int)(int)16) & (int)(int)65535),((int)_mask & (int)(int)65535),copySource)) );
            		}
            		else {
HXLINE(1140)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView srcView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,sourceImage,sourceRect);
HXLINE(1141)			 ::lime::graphics::utils::_ImageDataUtil::ImageDataView destView =  ::lime::graphics::utils::_ImageDataUtil::ImageDataView_obj::__alloc( HX_CTX ,image, ::lime::math::Rectangle_obj::__alloc( HX_CTX ,destPoint->x,destPoint->y,srcView->width,srcView->height));
HXLINE(1143)			int srcFormat = sourceImage->buffer->format;
HXLINE(1144)			int destFormat = image->buffer->format;
HXLINE(1145)			bool srcPremultiplied = sourceImage->buffer->premultiplied;
HXLINE(1146)			bool destPremultiplied = image->buffer->premultiplied;
HXLINE(1148)			int srcPosition;
HXDLIN(1148)			int destPosition;
HXDLIN(1148)			int srcPixel;
HXDLIN(1148)			int destPixel;
HXDLIN(1148)			int pixelMask;
HXDLIN(1148)			bool test;
HXDLIN(1148)			int value;
HXLINE(1150)			{
HXLINE(1150)				int _g1 = (int)0;
HXDLIN(1150)				int _g = destView->height;
HXDLIN(1150)				while((_g1 < _g)){
HXLINE(1150)					_g1 = (_g1 + (int)1);
HXDLIN(1150)					int y = (_g1 - (int)1);
HXLINE(1152)					int srcView1 = srcView->offset;
HXDLIN(1152)					srcPosition = (srcView1 + (srcView->stride * y));
HXLINE(1153)					int destView1 = destView->offset;
HXDLIN(1153)					destPosition = (destView1 + (destView->stride * y));
HXLINE(1155)					{
HXLINE(1155)						int _g3 = (int)0;
HXDLIN(1155)						int _g2 = destView->width;
HXDLIN(1155)						while((_g3 < _g2)){
HXLINE(1155)							_g3 = (_g3 + (int)1);
HXDLIN(1155)							int x = (_g3 - (int)1);
HXLINE(1157)							{
HXLINE(1157)								switch((int)(srcFormat)){
            									case (int)0: {
HXLINE(1157)										int r = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1157)										int srcData1 = srcData->byteOffset;
HXDLIN(1157)										int g = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData1 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1157)										int srcData2 = srcData->byteOffset;
HXDLIN(1157)										int b = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData2 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1157)										int srcData3 = srcData->byteOffset;
HXDLIN(1157)										srcPixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData3 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)1: {
HXLINE(1157)										int srcData4 = srcData->byteOffset;
HXDLIN(1157)										int r1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData4 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1157)										int srcData5 = srcData->byteOffset;
HXDLIN(1157)										int g1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData5 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1157)										int srcData6 = srcData->byteOffset;
HXDLIN(1157)										int b1 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData6 + (srcPosition + (int)3))) & (int)(int)255);
HXDLIN(1157)										srcPixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            									case (int)2: {
HXLINE(1157)										int srcData7 = srcData->byteOffset;
HXDLIN(1157)										int r2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData7 + (srcPosition + (int)2))) & (int)(int)255);
HXDLIN(1157)										int srcData8 = srcData->byteOffset;
HXDLIN(1157)										int g2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData8 + (srcPosition + (int)1))) & (int)(int)255);
HXDLIN(1157)										int b2 = ((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData->byteOffset + srcPosition)) & (int)(int)255);
HXDLIN(1157)										int srcData9 = srcData->byteOffset;
HXDLIN(1157)										srcPixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(srcData->buffer->b,(srcData9 + (srcPosition + (int)3))) & (int)(int)255) & (int)(int)255));
            									}
            									break;
            								}
HXDLIN(1157)								if (srcPremultiplied) {
HXLINE(1157)									bool _hx_tmp1;
HXDLIN(1157)									if ((((int)srcPixel & (int)(int)255) != (int)0)) {
HXLINE(1157)										_hx_tmp1 = (((int)srcPixel & (int)(int)255) != (int)255);
            									}
            									else {
HXLINE(1157)										_hx_tmp1 = false;
            									}
HXDLIN(1157)									if (_hx_tmp1) {
HXLINE(1157)										::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)srcPixel & (int)(int)255));
HXDLIN(1157)										{
HXLINE(1157)											 ::lime::utils::ArrayBufferView this7 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1157)											int r3 = ((int)::__hxcpp_memory_get_byte(this7->buffer->b,(this7->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1157)											 ::lime::utils::ArrayBufferView this8 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1157)											int g3 = ((int)::__hxcpp_memory_get_byte(this8->buffer->b,(this8->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1157)											 ::lime::utils::ArrayBufferView this9 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1157)											srcPixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this9->buffer->b,(this9->byteOffset + ::Math_obj::round((((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            										}
            									}
            								}
            							}
HXLINE(1159)							pixelMask = ((int)srcPixel & (int)_mask);
HXLINE(1161)							int tmp1;
HXDLIN(1161)							int tmp2;
HXDLIN(1161)							tmp1 = ((int)hx::UShr(pixelMask,(int)24) & (int)(int)255);
HXDLIN(1161)							tmp2 = ((int)hx::UShr(_threshold,(int)24) & (int)(int)255);
HXDLIN(1161)							if ((tmp1 != tmp2)) {
HXLINE(1161)								bool aNeg = (tmp1 < (int)0);
HXDLIN(1161)								bool bNeg = (tmp2 < (int)0);
HXDLIN(1161)								bool value1;
HXDLIN(1161)								if ((aNeg != bNeg)) {
HXLINE(1161)									value1 = aNeg;
            								}
            								else {
HXLINE(1161)									value1 = (tmp1 > tmp2);
            								}
HXDLIN(1161)								if (value1) {
HXLINE(1161)									value = (int)1;
            								}
            								else {
HXLINE(1161)									value = (int)-1;
            								}
            							}
            							else {
HXLINE(1161)								tmp1 = ((int)hx::UShr(pixelMask,(int)16) & (int)(int)255);
HXDLIN(1161)								tmp2 = ((int)hx::UShr(_threshold,(int)16) & (int)(int)255);
HXDLIN(1161)								if ((tmp1 != tmp2)) {
HXLINE(1161)									bool aNeg1 = (tmp1 < (int)0);
HXDLIN(1161)									bool bNeg1 = (tmp2 < (int)0);
HXDLIN(1161)									bool value2;
HXDLIN(1161)									if ((aNeg1 != bNeg1)) {
HXLINE(1161)										value2 = aNeg1;
            									}
            									else {
HXLINE(1161)										value2 = (tmp1 > tmp2);
            									}
HXDLIN(1161)									if (value2) {
HXLINE(1161)										value = (int)1;
            									}
            									else {
HXLINE(1161)										value = (int)-1;
            									}
            								}
            								else {
HXLINE(1161)									tmp1 = ((int)hx::UShr(pixelMask,(int)8) & (int)(int)255);
HXDLIN(1161)									tmp2 = ((int)hx::UShr(_threshold,(int)8) & (int)(int)255);
HXDLIN(1161)									if ((tmp1 != tmp2)) {
HXLINE(1161)										bool aNeg2 = (tmp1 < (int)0);
HXDLIN(1161)										bool bNeg2 = (tmp2 < (int)0);
HXDLIN(1161)										bool value3;
HXDLIN(1161)										if ((aNeg2 != bNeg2)) {
HXLINE(1161)											value3 = aNeg2;
            										}
            										else {
HXLINE(1161)											value3 = (tmp1 > tmp2);
            										}
HXDLIN(1161)										if (value3) {
HXLINE(1161)											value = (int)1;
            										}
            										else {
HXLINE(1161)											value = (int)-1;
            										}
            									}
            									else {
HXLINE(1161)										tmp1 = ((int)pixelMask & (int)(int)255);
HXDLIN(1161)										tmp2 = ((int)_threshold & (int)(int)255);
HXDLIN(1161)										if ((tmp1 != tmp2)) {
HXLINE(1161)											bool aNeg3 = (tmp1 < (int)0);
HXDLIN(1161)											bool bNeg3 = (tmp2 < (int)0);
HXDLIN(1161)											bool value4;
HXDLIN(1161)											if ((aNeg3 != bNeg3)) {
HXLINE(1161)												value4 = aNeg3;
            											}
            											else {
HXLINE(1161)												value4 = (tmp1 > tmp2);
            											}
HXDLIN(1161)											if (value4) {
HXLINE(1161)												value = (int)1;
            											}
            											else {
HXLINE(1161)												value = (int)-1;
            											}
            										}
            										else {
HXLINE(1161)											value = (int)0;
            										}
            									}
            								}
            							}
HXLINE(1163)							switch((int)(_operation)){
            								case (int)0: {
HXLINE(1165)									test = (value != (int)0);
            								}
            								break;
            								case (int)1: {
HXLINE(1166)									test = (value == (int)0);
            								}
            								break;
            								case (int)2: {
HXLINE(1167)									test = (value == (int)-1);
            								}
            								break;
            								case (int)3: {
HXLINE(1168)									if ((value != (int)0)) {
HXLINE(1168)										test = (value == (int)-1);
            									}
            									else {
HXLINE(1168)										test = true;
            									}
            								}
            								break;
            								case (int)4: {
HXLINE(1169)									test = (value == (int)1);
            								}
            								break;
            								case (int)5: {
HXLINE(1170)									if ((value != (int)0)) {
HXLINE(1170)										test = (value == (int)1);
            									}
            									else {
HXLINE(1170)										test = true;
            									}
            								}
            								break;
            								default:{
HXLINE(1171)									test = false;
            								}
            							}
HXLINE(1175)							if (test) {
HXLINE(1177)								{
HXLINE(1177)									if (destPremultiplied) {
HXLINE(1177)										if ((((int)_color & (int)(int)255) == (int)0)) {
HXLINE(1177)											if ((_color != (int)0)) {
HXLINE(1177)												_color = (int)0;
            											}
            										}
            										else {
HXLINE(1177)											if ((((int)_color & (int)(int)255) != (int)255)) {
HXLINE(1177)												 ::lime::utils::ArrayBufferView this10 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1177)												int this11 = this10->byteOffset;
HXDLIN(1177)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this10->buffer->b,(this11 + (((int)_color & (int)(int)255) * (int)4)));
HXDLIN(1177)												_color = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(_color,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(_color,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)_color & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1177)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1177)											{
HXLINE(1177)												int val = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1177)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val);
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val1 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData1 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData1 + (destPosition + (int)1)),val1);
            												}
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val2 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData2 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData2 + (destPosition + (int)2)),val2);
            												}
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val3 = ((int)_color & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData3 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData3 + (destPosition + (int)3)),val3);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1177)											{
HXLINE(1177)												int val4 = ((int)_color & (int)(int)255);
HXDLIN(1177)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val4);
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val5 = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData4 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData4 + (destPosition + (int)1)),val5);
            												}
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val6 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData5 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData5 + (destPosition + (int)2)),val6);
            												}
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val7 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData6 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData6 + (destPosition + (int)3)),val7);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1177)											{
HXLINE(1177)												int val8 = ((int)hx::UShr(_color,(int)8) & (int)(int)255);
HXDLIN(1177)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val8);
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val9 = ((int)hx::UShr(_color,(int)16) & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData7 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData7 + (destPosition + (int)1)),val9);
            												}
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val10 = ((int)hx::UShr(_color,(int)24) & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData8 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData8 + (destPosition + (int)2)),val10);
            												}
            											}
HXDLIN(1177)											{
HXLINE(1177)												int val11 = ((int)_color & (int)(int)255);
HXDLIN(1177)												{
HXLINE(1177)													int destData9 = destData->byteOffset;
HXDLIN(1177)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData9 + (destPosition + (int)3)),val11);
            												}
            											}
            										}
            										break;
            									}
            								}
HXLINE(1178)								hits = (hits + (int)1);
            							}
            							else {
HXLINE(1180)								if (copySource) {
HXLINE(1182)									if (destPremultiplied) {
HXLINE(1182)										if ((((int)srcPixel & (int)(int)255) == (int)0)) {
HXLINE(1182)											if ((srcPixel != (int)0)) {
HXLINE(1182)												srcPixel = (int)0;
            											}
            										}
            										else {
HXLINE(1182)											if ((((int)srcPixel & (int)(int)255) != (int)255)) {
HXLINE(1182)												 ::lime::utils::ArrayBufferView this12 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___alpha16;
HXDLIN(1182)												int this13 = this12->byteOffset;
HXDLIN(1182)												::lime::math::color::_RGBA::RGBA_Impl__obj::a16 = ::__hxcpp_memory_get_ui32(this12->buffer->b,(this13 + (((int)srcPixel & (int)(int)255) * (int)4)));
HXDLIN(1182)												srcPixel = ((int)((int)((int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)(((int)hx::UShr(srcPixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::a16) >> (int)(int)16) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)srcPixel & (int)(int)255) & (int)(int)255));
            											}
            										}
            									}
HXDLIN(1182)									switch((int)(destFormat)){
            										case (int)0: {
HXLINE(1182)											{
HXLINE(1182)												int val12 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1182)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val12);
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val13 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData10 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData10 + (destPosition + (int)1)),val13);
            												}
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val14 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData11 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData11 + (destPosition + (int)2)),val14);
            												}
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val15 = ((int)srcPixel & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData12 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData12 + (destPosition + (int)3)),val15);
            												}
            											}
            										}
            										break;
            										case (int)1: {
HXLINE(1182)											{
HXLINE(1182)												int val16 = ((int)srcPixel & (int)(int)255);
HXDLIN(1182)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val16);
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val17 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData13 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData13 + (destPosition + (int)1)),val17);
            												}
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val18 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData14 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData14 + (destPosition + (int)2)),val18);
            												}
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val19 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData15 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData15 + (destPosition + (int)3)),val19);
            												}
            											}
            										}
            										break;
            										case (int)2: {
HXLINE(1182)											{
HXLINE(1182)												int val20 = ((int)hx::UShr(srcPixel,(int)8) & (int)(int)255);
HXDLIN(1182)												::__hxcpp_memory_set_byte(destData->buffer->b,(destData->byteOffset + destPosition),val20);
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val21 = ((int)hx::UShr(srcPixel,(int)16) & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData16 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData16 + (destPosition + (int)1)),val21);
            												}
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val22 = ((int)hx::UShr(srcPixel,(int)24) & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData17 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData17 + (destPosition + (int)2)),val22);
            												}
            											}
HXDLIN(1182)											{
HXLINE(1182)												int val23 = ((int)srcPixel & (int)(int)255);
HXDLIN(1182)												{
HXLINE(1182)													int destData18 = destData->byteOffset;
HXDLIN(1182)													::__hxcpp_memory_set_byte(destData->buffer->b,(destData18 + (destPosition + (int)3)),val23);
            												}
            											}
            										}
            										break;
            									}
            								}
            							}
HXLINE(1186)							srcPosition = (srcPosition + (int)4);
HXLINE(1187)							destPosition = (destPosition + (int)4);
            						}
            					}
            				}
            			}
            		}
HXLINE(1195)		if ((hits > (int)0)) {
HXLINE(1197)			image->dirty = true;
HXLINE(1198)			image->version++;
            		}
HXLINE(1202)		return hits;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ImageDataUtil_obj,threshold,return )

void ImageDataUtil_obj::unmultiplyAlpha( ::lime::graphics::Image image){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1207_unmultiplyAlpha)
HXLINE(1209)		 ::lime::utils::ArrayBufferView data = image->buffer->data;
HXLINE(1210)		if (hx::IsNull( data )) {
HXLINE(1210)			return;
            		}
HXLINE(1213)		if (::lime::_hx_system::CFFI_obj::enabled) {
HXLINE(1213)			::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_data_util_unmultiply_alpha(hx::DynamicPtr(image));
            		}
            		else {
HXLINE(1217)			int format = image->buffer->format;
HXLINE(1218)			int length = ::Std_obj::_hx_int(((Float)data->length / (Float)(int)4));
HXLINE(1219)			int pixel;
HXLINE(1221)			{
HXLINE(1221)				int _g1 = (int)0;
HXDLIN(1221)				int _g = length;
HXDLIN(1221)				while((_g1 < _g)){
HXLINE(1221)					_g1 = (_g1 + (int)1);
HXDLIN(1221)					int i = (_g1 - (int)1);
HXLINE(1223)					{
HXLINE(1223)						int offset = (i * (int)4);
HXDLIN(1223)						switch((int)(format)){
            							case (int)0: {
HXLINE(1223)								int r = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1223)								int data1 = data->byteOffset;
HXDLIN(1223)								int g = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data1 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1223)								int data2 = data->byteOffset;
HXDLIN(1223)								int b = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data2 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1223)								int data3 = data->byteOffset;
HXDLIN(1223)								pixel = ((int)((int)((int)((int)((int)r & (int)(int)255) << (int)(int)24) | (int)((int)((int)g & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data3 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)1: {
HXLINE(1223)								int data4 = data->byteOffset;
HXDLIN(1223)								int r1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data4 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1223)								int data5 = data->byteOffset;
HXDLIN(1223)								int g1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data5 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1223)								int data6 = data->byteOffset;
HXDLIN(1223)								int b1 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data6 + (offset + (int)3))) & (int)(int)255);
HXDLIN(1223)								pixel = ((int)((int)((int)((int)((int)r1 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g1 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b1 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            							case (int)2: {
HXLINE(1223)								int data7 = data->byteOffset;
HXDLIN(1223)								int r2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data7 + (offset + (int)2))) & (int)(int)255);
HXDLIN(1223)								int data8 = data->byteOffset;
HXDLIN(1223)								int g2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data8 + (offset + (int)1))) & (int)(int)255);
HXDLIN(1223)								int b2 = ((int)::__hxcpp_memory_get_byte(data->buffer->b,(data->byteOffset + offset)) & (int)(int)255);
HXDLIN(1223)								int data9 = data->byteOffset;
HXDLIN(1223)								pixel = ((int)((int)((int)((int)((int)r2 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g2 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)b2 & (int)(int)255) << (int)(int)8)) | (int)((int)((int)::__hxcpp_memory_get_byte(data->buffer->b,(data9 + (offset + (int)3))) & (int)(int)255) & (int)(int)255));
            							}
            							break;
            						}
HXDLIN(1223)						bool _hx_tmp;
HXDLIN(1223)						if ((((int)pixel & (int)(int)255) != (int)0)) {
HXLINE(1223)							_hx_tmp = (((int)pixel & (int)(int)255) != (int)255);
            						}
            						else {
HXLINE(1223)							_hx_tmp = false;
            						}
HXDLIN(1223)						if (_hx_tmp) {
HXLINE(1223)							::lime::math::color::_RGBA::RGBA_Impl__obj::unmult = ((Float)((Float)255.0) / (Float)((int)pixel & (int)(int)255));
HXDLIN(1223)							{
HXLINE(1223)								 ::lime::utils::ArrayBufferView this1 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1223)								int r3 = ((int)::__hxcpp_memory_get_byte(this1->buffer->b,(this1->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)24) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1223)								 ::lime::utils::ArrayBufferView this2 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1223)								int g3 = ((int)::__hxcpp_memory_get_byte(this2->buffer->b,(this2->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)16) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255);
HXDLIN(1223)								 ::lime::utils::ArrayBufferView this3 = ::lime::math::color::_RGBA::RGBA_Impl__obj::_hx___clamp;
HXDLIN(1223)								pixel = ((int)((int)((int)((int)((int)r3 & (int)(int)255) << (int)(int)24) | (int)((int)((int)g3 & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)::__hxcpp_memory_get_byte(this3->buffer->b,(this3->byteOffset + ::Math_obj::round((((int)hx::UShr(pixel,(int)8) & (int)(int)255) * ::lime::math::color::_RGBA::RGBA_Impl__obj::unmult)))) & (int)(int)255) & (int)(int)255) << (int)(int)8)) | (int)((int)((int)pixel & (int)(int)255) & (int)(int)255));
            							}
            						}
            					}
HXLINE(1224)					{
HXLINE(1224)						int offset1 = (i * (int)4);
HXDLIN(1224)						switch((int)(format)){
            							case (int)0: {
HXLINE(1224)								{
HXLINE(1224)									int val = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1224)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val);
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val1 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data10 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data10 + (offset1 + (int)1)),val1);
            									}
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val2 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data11 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data11 + (offset1 + (int)2)),val2);
            									}
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val3 = ((int)pixel & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data12 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data12 + (offset1 + (int)3)),val3);
            									}
            								}
            							}
            							break;
            							case (int)1: {
HXLINE(1224)								{
HXLINE(1224)									int val4 = ((int)pixel & (int)(int)255);
HXDLIN(1224)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val4);
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val5 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data13 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data13 + (offset1 + (int)1)),val5);
            									}
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val6 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data14 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data14 + (offset1 + (int)2)),val6);
            									}
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val7 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data15 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data15 + (offset1 + (int)3)),val7);
            									}
            								}
            							}
            							break;
            							case (int)2: {
HXLINE(1224)								{
HXLINE(1224)									int val8 = ((int)hx::UShr(pixel,(int)8) & (int)(int)255);
HXDLIN(1224)									::__hxcpp_memory_set_byte(data->buffer->b,(data->byteOffset + offset1),val8);
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val9 = ((int)hx::UShr(pixel,(int)16) & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data16 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data16 + (offset1 + (int)1)),val9);
            									}
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val10 = ((int)hx::UShr(pixel,(int)24) & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data17 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data17 + (offset1 + (int)2)),val10);
            									}
            								}
HXDLIN(1224)								{
HXLINE(1224)									int val11 = ((int)pixel & (int)(int)255);
HXDLIN(1224)									{
HXLINE(1224)										int data18 = data->byteOffset;
HXDLIN(1224)										::__hxcpp_memory_set_byte(data->buffer->b,(data18 + (offset1 + (int)3)),val11);
            									}
            								}
            							}
            							break;
            						}
            					}
            				}
            			}
            		}
HXLINE(1230)		image->buffer->premultiplied = false;
HXLINE(1231)		image->dirty = true;
HXLINE(1232)		image->version++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageDataUtil_obj,unmultiplyAlpha,(void))

int ImageDataUtil_obj::_hx___pixelCompare(int n1,int n2){
            	HX_STACKFRAME(&_hx_pos_bf157fa4ba2cf807_1237___pixelCompare)
HXLINE(1239)		int tmp1;
HXLINE(1240)		int tmp2;
HXLINE(1242)		tmp1 = ((int)hx::UShr(n1,(int)24) & (int)(int)255);
HXLINE(1243)		tmp2 = ((int)hx::UShr(n2,(int)24) & (int)(int)255);
HXLINE(1245)		if ((tmp1 != tmp2)) {
HXLINE(1247)			bool aNeg = (tmp1 < (int)0);
HXDLIN(1247)			bool bNeg = (tmp2 < (int)0);
HXDLIN(1247)			bool _hx_tmp;
HXDLIN(1247)			if ((aNeg != bNeg)) {
HXLINE(1247)				_hx_tmp = aNeg;
            			}
            			else {
HXLINE(1247)				_hx_tmp = (tmp1 > tmp2);
            			}
HXDLIN(1247)			if (_hx_tmp) {
HXLINE(1247)				return (int)1;
            			}
            			else {
HXLINE(1247)				return (int)-1;
            			}
            		}
            		else {
HXLINE(1251)			tmp1 = ((int)hx::UShr(n1,(int)16) & (int)(int)255);
HXLINE(1252)			tmp2 = ((int)hx::UShr(n2,(int)16) & (int)(int)255);
HXLINE(1254)			if ((tmp1 != tmp2)) {
HXLINE(1256)				bool aNeg1 = (tmp1 < (int)0);
HXDLIN(1256)				bool bNeg1 = (tmp2 < (int)0);
HXDLIN(1256)				bool _hx_tmp1;
HXDLIN(1256)				if ((aNeg1 != bNeg1)) {
HXLINE(1256)					_hx_tmp1 = aNeg1;
            				}
            				else {
HXLINE(1256)					_hx_tmp1 = (tmp1 > tmp2);
            				}
HXDLIN(1256)				if (_hx_tmp1) {
HXLINE(1256)					return (int)1;
            				}
            				else {
HXLINE(1256)					return (int)-1;
            				}
            			}
            			else {
HXLINE(1260)				tmp1 = ((int)hx::UShr(n1,(int)8) & (int)(int)255);
HXLINE(1261)				tmp2 = ((int)hx::UShr(n2,(int)8) & (int)(int)255);
HXLINE(1263)				if ((tmp1 != tmp2)) {
HXLINE(1265)					bool aNeg2 = (tmp1 < (int)0);
HXDLIN(1265)					bool bNeg2 = (tmp2 < (int)0);
HXDLIN(1265)					bool _hx_tmp2;
HXDLIN(1265)					if ((aNeg2 != bNeg2)) {
HXLINE(1265)						_hx_tmp2 = aNeg2;
            					}
            					else {
HXLINE(1265)						_hx_tmp2 = (tmp1 > tmp2);
            					}
HXDLIN(1265)					if (_hx_tmp2) {
HXLINE(1265)						return (int)1;
            					}
            					else {
HXLINE(1265)						return (int)-1;
            					}
            				}
            				else {
HXLINE(1269)					tmp1 = ((int)n1 & (int)(int)255);
HXLINE(1270)					tmp2 = ((int)n2 & (int)(int)255);
HXLINE(1272)					if ((tmp1 != tmp2)) {
HXLINE(1274)						bool aNeg3 = (tmp1 < (int)0);
HXDLIN(1274)						bool bNeg3 = (tmp2 < (int)0);
HXDLIN(1274)						bool _hx_tmp3;
HXDLIN(1274)						if ((aNeg3 != bNeg3)) {
HXLINE(1274)							_hx_tmp3 = aNeg3;
            						}
            						else {
HXLINE(1274)							_hx_tmp3 = (tmp1 > tmp2);
            						}
HXDLIN(1274)						if (_hx_tmp3) {
HXLINE(1274)							return (int)1;
            						}
            						else {
HXLINE(1274)							return (int)-1;
            						}
            					}
            					else {
HXLINE(1278)						return (int)0;
            					}
            				}
            			}
            		}
HXLINE(1245)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ImageDataUtil_obj,_hx___pixelCompare,return )


ImageDataUtil_obj::ImageDataUtil_obj()
{
}

bool ImageDataUtil_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"merge") ) { outValue = merge_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"resize") ) { outValue = resize_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fillRect") ) { outValue = fillRect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel") ) { outValue = getPixel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel") ) { outValue = setPixel_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"floodFill") ) { outValue = floodFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixels") ) { outValue = getPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setFormat") ) { outValue = setFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixels") ) { outValue = setPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"threshold") ) { outValue = threshold_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { outValue = copyPixels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { outValue = getPixel32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { outValue = setPixel32_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyChannel") ) { outValue = copyChannel_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resizeBuffer") ) { outValue = resizeBuffer_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"multiplyAlpha") ) { outValue = multiplyAlpha_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { outValue = colorTransform_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"__pixelCompare") ) { outValue = _hx___pixelCompare_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"unmultiplyAlpha") ) { outValue = unmultiplyAlpha_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { outValue = getColorBoundsRect_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ImageDataUtil_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ImageDataUtil_obj_sStaticStorageInfo = 0;
#endif

static void ImageDataUtil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageDataUtil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageDataUtil_obj::__mClass,"__mClass");
};

#endif

hx::Class ImageDataUtil_obj::__mClass;

static ::String ImageDataUtil_obj_sStaticFields[] = {
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("multiplyAlpha","\x9a","\xf2","\x1c","\x6b"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("resizeBuffer","\x14","\x7a","\xa2","\xb4"),
	HX_HCSTRING("setFormat","\x79","\x04","\x36","\x5d"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unmultiplyAlpha","\xa1","\xc8","\x96","\x28"),
	HX_HCSTRING("__pixelCompare","\xdf","\x79","\xe3","\x8d"),
	::String(null())
};

void ImageDataUtil_obj::__register()
{
	hx::Object *dummy = new ImageDataUtil_obj;
	ImageDataUtil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.utils.ImageDataUtil","\x80","\x72","\x23","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageDataUtil_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageDataUtil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ImageDataUtil_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ImageDataUtil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageDataUtil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageDataUtil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageDataUtil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace utils
