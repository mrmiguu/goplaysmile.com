// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif

namespace lime{
namespace graphics{
namespace opengl{

void GLBuffer_obj::__construct(Int version, ::Dynamic id){
            	HX_STACK_FRAME("lime.graphics.opengl.GLBuffer","new",0x02a9f3ac,"lime.graphics.opengl.GLBuffer.new","lime/graphics/opengl/GLBuffer.hx",4,0xd18082c3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(version,"version")
            	HX_STACK_ARG(id,"id")
HXLINE(   4)		super::__construct(version,id);
            	}

Dynamic GLBuffer_obj::__CreateEmpty() { return new GLBuffer_obj; }

hx::ObjectPtr< GLBuffer_obj > GLBuffer_obj::__new(Int version, ::Dynamic id)
{
	hx::ObjectPtr< GLBuffer_obj > _hx_result = new GLBuffer_obj();
	_hx_result->__construct(version,id);
	return _hx_result;
}

Dynamic GLBuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLBuffer_obj > _hx_result = new GLBuffer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

::String GLBuffer_obj::getType(){
            	HX_STACK_FRAME("lime.graphics.opengl.GLBuffer","getType",0xcda35bbc,"lime.graphics.opengl.GLBuffer.getType","lime/graphics/opengl/GLBuffer.hx",9,0xd18082c3)
            	HX_STACK_THIS(this)
HXLINE(   9)		return HX_("Buffer",20,31,29,05);
            	}



GLBuffer_obj::GLBuffer_obj()
{
}

hx::Val GLBuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getType") ) { return hx::Val( getType_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GLBuffer_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GLBuffer_obj_sStaticStorageInfo = 0;
#endif

static ::String GLBuffer_obj_sMemberFields[] = {
	HX_HCSTRING("getType","\x70","\xa2","\x8b","\x1f"),
	::String(null()) };

static void GLBuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLBuffer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLBuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLBuffer_obj::__mClass,"__mClass");
};

#endif

hx::Class GLBuffer_obj::__mClass;

void GLBuffer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.opengl.GLBuffer","\xba","\xed","\x6b","\xc2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLBuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLBuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLBuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLBuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLBuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace opengl
