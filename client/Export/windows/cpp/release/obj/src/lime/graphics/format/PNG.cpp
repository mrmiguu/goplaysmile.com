// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_format_PNG
#include <lime/graphics/format/PNG.h>
#endif
#ifndef INCLUDED_lime_system_CFFI
#include <lime/system/CFFI.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

namespace lime{
namespace graphics{
namespace format{

void PNG_obj::__construct() { }

Dynamic PNG_obj::__CreateEmpty() { return new PNG_obj; }

hx::ObjectPtr< PNG_obj > PNG_obj::__new()
{
	hx::ObjectPtr< PNG_obj > _hx_result = new PNG_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic PNG_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PNG_obj > _hx_result = new PNG_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::lime::graphics::Image PNG_obj::decodeBytes( ::haxe::io::Bytes bytes,hx::Null< Bool >  __o_decodeData){
Bool decodeData = __o_decodeData.Default(true);
            	HX_STACK_FRAME("lime.graphics.format.PNG","decodeBytes",0x72bcffab,"lime.graphics.format.PNG.decodeBytes","lime/graphics/format/PNG.hx",32,0x0cfd2463)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(decodeData,"decodeData")
HXLINE(  37)		HX_VARI(  ::haxe::io::Bytes,buffer) = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(  37)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  37)		Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  37)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN(  37)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(  37)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  37)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN(  37)			{
HXLINE(  37)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  37)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  37)				if ((bufferByteLength < (int)0)) {
HXLINE(  37)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  37)			_this->buffer = buffer;
HXDLIN(  37)			_this->byteOffset = (int)0;
HXDLIN(  37)			_this->byteLength = bufferByteLength;
HXDLIN(  37)			Float _hx_tmp1 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN(  37)			_this->length = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN(  37)			this1 = _this;
            		}
            		else {
HXLINE(  37)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(  37)		 ::Dynamic buffer1 =  ::lime::graphics::ImageBuffer_obj::__new(this1,null(),null(),null(),null());
HXDLIN(  37)		 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(bytes);
HXDLIN(  37)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::format::PNG_obj::cffi_lime_png_decode_bytes(_hx_tmp2,decodeData,hx::DynamicPtr(buffer1))) );
HXDLIN(  37)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PNG_obj,decodeBytes,return )

 ::lime::graphics::Image PNG_obj::decodeFile(::String path,hx::Null< Bool >  __o_decodeData){
Bool decodeData = __o_decodeData.Default(true);
            	HX_STACK_FRAME("lime.graphics.format.PNG","decodeFile",0xa9917f3c,"lime.graphics.format.PNG.decodeFile","lime/graphics/format/PNG.hx",57,0x0cfd2463)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(decodeData,"decodeData")
HXLINE(  62)		HX_VARI(  ::haxe::io::Bytes,buffer) = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(  62)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  62)		Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN(  62)		if (_hx_tmp) {
HXLINE(  62)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN(  62)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(  62)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  62)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN(  62)			{
HXLINE(  62)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  62)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  62)				if ((bufferByteLength < (int)0)) {
HXLINE(  62)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  62)			_this->buffer = buffer;
HXDLIN(  62)			_this->byteOffset = (int)0;
HXDLIN(  62)			_this->byteLength = bufferByteLength;
HXDLIN(  62)			Float _hx_tmp1 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN(  62)			_this->length = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN(  62)			this1 = _this;
            		}
            		else {
HXLINE(  62)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(  62)		 ::Dynamic buffer1 =  ::lime::graphics::ImageBuffer_obj::__new(this1,null(),null(),null(),null());
HXDLIN(  62)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::format::PNG_obj::cffi_lime_png_decode_file(path,decodeData,hx::DynamicPtr(buffer1))) );
HXDLIN(  62)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PNG_obj,decodeFile,return )

 ::haxe::io::Bytes PNG_obj::encode( ::lime::graphics::Image image){
            	HX_STACK_FRAME("lime.graphics.format.PNG","encode",0x30ec4988,"lime.graphics.format.PNG.encode","lime/graphics/format/PNG.hx",82,0x0cfd2463)
            	HX_STACK_ARG(image,"image")
HXLINE(  84)		Bool _hx_tmp;
HXDLIN(  84)		Bool _hx_tmp1 = !(image->get_premultiplied());
HXDLIN(  84)		if (_hx_tmp1) {
HXLINE(  84)			Int _hx_tmp2 = image->get_format();
HXDLIN(  84)			_hx_tmp = (_hx_tmp2 != (int)0);
            		}
            		else {
HXLINE(  84)			_hx_tmp = true;
            		}
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  88)			image = image->clone();
HXLINE(  89)			image->set_premultiplied(false);
HXLINE(  90)			image->set_format((int)0);
            		}
HXLINE(  98)		Bool _hx_tmp3 = ::lime::_hx_system::CFFI_obj::enabled;
HXDLIN(  98)		if (_hx_tmp3) {
HXLINE( 101)			 ::Dynamic bytes = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN( 101)			 ::hx::Object * _hx_tmp4 = hx::DynamicPtr(image->buffer);
HXDLIN( 101)			 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::format::PNG_obj::cffi_lime_image_encode(_hx_tmp4,(int)0,(int)0,hx::DynamicPtr(bytes))) );
HXDLIN( 101)			return Dynamic(hx::DynamicPtr(inVal));
            		}
HXLINE( 168)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PNG_obj,encode,return )

 ::Dynamic PNG_obj::lime_png_decode_bytes( ::Dynamic data,Bool decodeData, ::Dynamic buffer){
            	HX_STACK_FRAME("lime.graphics.format.PNG","lime_png_decode_bytes",0x29fbec68,"lime.graphics.format.PNG.lime_png_decode_bytes","lime/graphics/format/PNG.hx",181,0x0cfd2463)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(decodeData,"decodeData")
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 181)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(data);
HXDLIN( 181)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::format::PNG_obj::cffi_lime_png_decode_bytes(_hx_tmp,decodeData,hx::DynamicPtr(buffer))) );
HXDLIN( 181)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PNG_obj,lime_png_decode_bytes,return )

 ::Dynamic PNG_obj::lime_png_decode_file(::String path,Bool decodeData, ::Dynamic buffer){
            	HX_STACK_FRAME("lime.graphics.format.PNG","lime_png_decode_file",0x7595391f,"lime.graphics.format.PNG.lime_png_decode_file","lime/graphics/format/PNG.hx",182,0x0cfd2463)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(decodeData,"decodeData")
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 182)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::format::PNG_obj::cffi_lime_png_decode_file(path,decodeData,hx::DynamicPtr(buffer))) );
HXDLIN( 182)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PNG_obj,lime_png_decode_file,return )

 ::Dynamic PNG_obj::lime_image_encode( ::Dynamic data,Int type,Int quality, ::Dynamic bytes){
            	HX_STACK_FRAME("lime.graphics.format.PNG","lime_image_encode",0x87db2232,"lime.graphics.format.PNG.lime_image_encode","lime/graphics/format/PNG.hx",183,0x0cfd2463)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(quality,"quality")
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 183)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(data);
HXDLIN( 183)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::format::PNG_obj::cffi_lime_image_encode(_hx_tmp,type,quality,hx::DynamicPtr(bytes))) );
HXDLIN( 183)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(PNG_obj,lime_image_encode,return )

::cpp::Function<   ::hx::Object *( ::hx::Object *,Bool, ::hx::Object *) > PNG_obj::cffi_lime_png_decode_bytes;

::cpp::Function<   ::hx::Object *(::String,Bool, ::hx::Object *) > PNG_obj::cffi_lime_png_decode_file;

::cpp::Function<   ::hx::Object *( ::hx::Object *,Int,Int, ::hx::Object *) > PNG_obj::cffi_lime_image_encode;


PNG_obj::PNG_obj()
{
}

bool PNG_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"encode") ) { outValue = encode_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"decodeFile") ) { outValue = decodeFile_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decodeBytes") ) { outValue = decodeBytes_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"lime_image_encode") ) { outValue = lime_image_encode_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"lime_png_decode_file") ) { outValue = lime_png_decode_file_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"lime_png_decode_bytes") ) { outValue = lime_png_decode_bytes_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_encode") ) { outValue = cffi_lime_image_encode; return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"cffi_lime_png_decode_file") ) { outValue = cffi_lime_png_decode_file; return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"cffi_lime_png_decode_bytes") ) { outValue = cffi_lime_png_decode_bytes; return true; }
	}
	return false;
}

bool PNG_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 22:
		if (HX_FIELD_EQ(inName,"cffi_lime_image_encode") ) { cffi_lime_image_encode=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int,Int, ::hx::Object *) > >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"cffi_lime_png_decode_file") ) { cffi_lime_png_decode_file=ioValue.Cast< ::cpp::Function<   ::hx::Object *(::String,Bool, ::hx::Object *) > >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"cffi_lime_png_decode_bytes") ) { cffi_lime_png_decode_bytes=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *,Bool, ::hx::Object *) > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PNG_obj_sMemberStorageInfo = 0;
static hx::StaticInfo PNG_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &PNG_obj::cffi_lime_png_decode_bytes,HX_HCSTRING("cffi_lime_png_decode_bytes","\x01","\x38","\x28","\xe2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &PNG_obj::cffi_lime_png_decode_file,HX_HCSTRING("cffi_lime_png_decode_file","\xa6","\x23","\x36","\xca")},
	{hx::fsObject /*Dynamic*/ ,(void *) &PNG_obj::cffi_lime_image_encode,HX_HCSTRING("cffi_lime_image_encode","\x4b","\x6d","\x81","\x82")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void PNG_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PNG_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PNG_obj::cffi_lime_png_decode_bytes,"cffi_lime_png_decode_bytes");
	HX_MARK_MEMBER_NAME(PNG_obj::cffi_lime_png_decode_file,"cffi_lime_png_decode_file");
	HX_MARK_MEMBER_NAME(PNG_obj::cffi_lime_image_encode,"cffi_lime_image_encode");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PNG_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PNG_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PNG_obj::cffi_lime_png_decode_bytes,"cffi_lime_png_decode_bytes");
	HX_VISIT_MEMBER_NAME(PNG_obj::cffi_lime_png_decode_file,"cffi_lime_png_decode_file");
	HX_VISIT_MEMBER_NAME(PNG_obj::cffi_lime_image_encode,"cffi_lime_image_encode");
};

#endif

hx::Class PNG_obj::__mClass;

static ::String PNG_obj_sStaticFields[] = {
	HX_HCSTRING("decodeBytes","\x5d","\x94","\xb1","\x85"),
	HX_HCSTRING("decodeFile","\xca","\x86","\x63","\xce"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("lime_png_decode_bytes","\x9a","\x13","\x98","\x26"),
	HX_HCSTRING("lime_png_decode_file","\x2d","\x7e","\x35","\x25"),
	HX_HCSTRING("lime_image_encode","\x64","\x48","\x63","\x9c"),
	HX_HCSTRING("cffi_lime_png_decode_bytes","\x01","\x38","\x28","\xe2"),
	HX_HCSTRING("cffi_lime_png_decode_file","\xa6","\x23","\x36","\xca"),
	HX_HCSTRING("cffi_lime_image_encode","\x4b","\x6d","\x81","\x82"),
	::String(null())
};

void PNG_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.format.PNG","\xbc","\x8e","\xac","\x4b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PNG_obj::__GetStatic;
	__mClass->mSetStaticField = &PNG_obj::__SetStatic;
	__mClass->mMarkFunc = PNG_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PNG_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PNG_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PNG_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PNG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PNG_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PNG_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.graphics.format.PNG","boot",0x7ab2bb24,"lime.graphics.format.PNG.boot","lime/graphics/format/PNG.hx",181,0x0cfd2463)
HXLINE( 181)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_png_decode_bytes",9a,13,98,26),HX_("oboo",f3,6c,a9,49),false);
HXDLIN( 181)		cffi_lime_png_decode_bytes = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.format.PNG","boot",0x7ab2bb24,"lime.graphics.format.PNG.boot","lime/graphics/format/PNG.hx",182,0x0cfd2463)
HXLINE( 182)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_png_decode_file",2d,7e,35,25),HX_("sboo",6f,47,4e,4c),false);
HXDLIN( 182)		cffi_lime_png_decode_file = inValue;
            	}
{
            	HX_STACK_FRAME("lime.graphics.format.PNG","boot",0x7ab2bb24,"lime.graphics.format.PNG.boot","lime/graphics/format/PNG.hx",183,0x0cfd2463)
HXLINE( 183)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_image_encode",64,48,63,9c),HX_("oiioo",ef,d8,31,2f),false);
HXDLIN( 183)		cffi_lime_image_encode = inValue;
            	}
}

} // end namespace lime
} // end namespace graphics
} // end namespace format
