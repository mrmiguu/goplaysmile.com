// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_utils_AssetManifest
#include <lime/utils/AssetManifest.h>
#endif
#ifndef INCLUDED_lime_utils__Bytes_Bytes_Impl_
#include <lime/utils/_Bytes/Bytes_Impl_.h>
#endif

namespace lime{
namespace utils{

void AssetLibrary_obj::__construct(){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","new",0x53ac9a93,"lime.utils.AssetLibrary.new","lime/utils/AssetLibrary.hx",24,0x8b4b8bbb)
            	HX_STACK_THIS(this)
HXLINE(  44)		this->types =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  43)		this->sizes =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  41)		this->preload =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  40)		this->paths =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  39)		this->classTypes =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  38)		this->cachedText =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  37)		this->cachedImages =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  36)		this->cachedFonts =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  35)		this->cachedBytes =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  34)		this->cachedAudioBuffers =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  27)		this->onChange =  ::lime::app::_Event_Void_Void_obj::__new();
HXLINE(  53)		this->bytesLoaded = (int)0;
HXLINE(  54)		this->bytesTotal = (int)0;
            	}

Dynamic AssetLibrary_obj::__CreateEmpty() { return new AssetLibrary_obj; }

hx::ObjectPtr< AssetLibrary_obj > AssetLibrary_obj::__new()
{
	hx::ObjectPtr< AssetLibrary_obj > _hx_result = new AssetLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AssetLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetLibrary_obj > _hx_result = new AssetLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool AssetLibrary_obj::exists(::String id,::String type){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","exists",0xba577589,"lime.utils.AssetLibrary.exists","lime/utils/AssetLibrary.hx",59,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE(  61)		HX_VAR( ::String,requestedType);
HXDLIN(  61)		Bool _hx_tmp = hx::IsNotNull( type );
HXDLIN(  61)		if (_hx_tmp) {
HXLINE(  61)			requestedType = type;
            		}
            		else {
HXLINE(  61)			requestedType = null();
            		}
HXLINE(  62)		HX_VARI( ::String,assetType) = ( (::String)(this->types->get(id)) );
HXLINE(  64)		Bool _hx_tmp1 = hx::IsNotNull( assetType );
HXDLIN(  64)		if (_hx_tmp1) {
HXLINE(  66)			Bool _hx_tmp2;
HXDLIN(  66)			if ((assetType != requestedType)) {
HXLINE(  66)				Bool _hx_tmp3;
HXDLIN(  66)				if ((requestedType != HX_("SOUND",af,c4,ba,fe))) {
HXLINE(  66)					_hx_tmp3 = (requestedType == HX_("MUSIC",85,08,49,8e));
            				}
            				else {
HXLINE(  66)					_hx_tmp3 = true;
            				}
HXDLIN(  66)				if (_hx_tmp3) {
HXLINE(  66)					if ((assetType != HX_("MUSIC",85,08,49,8e))) {
HXLINE(  66)						_hx_tmp2 = (assetType == HX_("SOUND",af,c4,ba,fe));
            					}
            					else {
HXLINE(  66)						_hx_tmp2 = true;
            					}
            				}
            				else {
HXLINE(  66)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE(  66)				_hx_tmp2 = true;
            			}
HXDLIN(  66)			if (_hx_tmp2) {
HXLINE(  68)				return true;
            			}
HXLINE(  90)			Bool _hx_tmp4;
HXDLIN(  90)			Bool _hx_tmp5;
HXDLIN(  90)			if ((requestedType != HX_("BINARY",01,68,8e,9f))) {
HXLINE(  90)				_hx_tmp5 = hx::IsNull( requestedType );
            			}
            			else {
HXLINE(  90)				_hx_tmp5 = true;
            			}
HXDLIN(  90)			if (!(_hx_tmp5)) {
HXLINE(  90)				if ((assetType == HX_("BINARY",01,68,8e,9f))) {
HXLINE(  90)					_hx_tmp4 = (requestedType == HX_("TEXT",ad,94,ba,37));
            				}
            				else {
HXLINE(  90)					_hx_tmp4 = false;
            				}
            			}
            			else {
HXLINE(  90)				_hx_tmp4 = true;
            			}
HXDLIN(  90)			if (_hx_tmp4) {
HXLINE(  92)				return true;
            			}
            		}
HXLINE( 100)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,exists,return )

 ::Dynamic AssetLibrary_obj::getAsset(::String id,::String type){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","getAsset",0x8eced667,"lime.utils.AssetLibrary.getAsset","lime/utils/AssetLibrary.hx",130,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE( 130)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ){
HXLINE( 130)			return this->getBytes(id);
HXDLIN( 130)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE( 130)			return this->getFont(id);
HXDLIN( 130)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE( 130)			return this->getImage(id);
HXDLIN( 130)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 130)			return this->getAudioBuffer(id);
HXDLIN( 130)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 138)			HX_STACK_DO_THROW((HX_("Not sure how to get template: ",a1,19,8c,ad) + id));
HXDLIN( 138)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE( 130)			return this->getText(id);
HXDLIN( 130)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE( 139)			HX_STACK_DO_THROW((HX_("Unknown asset type: ",86,5e,db,f9) + type));
            		}
            		_hx_goto_0:;
HXLINE( 130)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,getAsset,return )

 ::lime::media::AudioBuffer AssetLibrary_obj::getAudioBuffer(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","getAudioBuffer",0x882d8e2d,"lime.utils.AssetLibrary.getAudioBuffer","lime/utils/AssetLibrary.hx",148,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 148)		Bool _hx_tmp = this->cachedAudioBuffers->exists(id);
HXDLIN( 148)		if (_hx_tmp) {
HXLINE( 150)			return this->cachedAudioBuffers->get(id).StaticCast<  ::lime::media::AudioBuffer >();
            		}
            		else {
HXLINE( 152)			Bool _hx_tmp1 = this->classTypes->exists(id);
HXDLIN( 152)			if (_hx_tmp1) {
HXLINE( 162)				return ::lime::media::AudioBuffer_obj::fromBytes(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 168)				return ::lime::media::AudioBuffer_obj::fromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 148)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getAudioBuffer,return )

 ::haxe::io::Bytes AssetLibrary_obj::getBytes(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","getBytes",0x262d74e2,"lime.utils.AssetLibrary.getBytes","lime/utils/AssetLibrary.hx",177,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 177)		Bool _hx_tmp = this->cachedBytes->exists(id);
HXDLIN( 177)		if (_hx_tmp) {
HXLINE( 179)			return this->cachedBytes->get(id).StaticCast<  ::haxe::io::Bytes >();
            		}
            		else {
HXLINE( 181)			Bool _hx_tmp1 = this->classTypes->exists(id);
HXDLIN( 181)			if (_hx_tmp1) {
HXLINE( 204)				return hx::TCast<  ::haxe::io::Bytes >::cast(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 210)				return ::lime::utils::_Bytes::Bytes_Impl__obj::fromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 177)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getBytes,return )

 ::lime::text::Font AssetLibrary_obj::getFont(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","getFont",0x44386d38,"lime.utils.AssetLibrary.getFont","lime/utils/AssetLibrary.hx",219,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 219)		Bool _hx_tmp = this->cachedFonts->exists(id);
HXDLIN( 219)		if (_hx_tmp) {
HXLINE( 221)			return this->cachedFonts->get(id).StaticCast<  ::lime::text::Font >();
            		}
            		else {
HXLINE( 223)			Bool _hx_tmp1 = this->classTypes->exists(id);
HXDLIN( 223)			if (_hx_tmp1) {
HXLINE( 235)				return hx::TCast<  ::lime::text::Font >::cast(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 241)				return ::lime::text::Font_obj::fromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 219)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getFont,return )

 ::lime::graphics::Image AssetLibrary_obj::getImage(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","getImage",0x25fe8bd2,"lime.utils.AssetLibrary.getImage","lime/utils/AssetLibrary.hx",250,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 250)		Bool _hx_tmp = this->cachedImages->exists(id);
HXDLIN( 250)		if (_hx_tmp) {
HXLINE( 252)			return this->cachedImages->get(id).StaticCast<  ::lime::graphics::Image >();
            		}
            		else {
HXLINE( 254)			Bool _hx_tmp1 = this->classTypes->exists(id);
HXDLIN( 254)			if (_hx_tmp1) {
HXLINE( 262)				return hx::TCast<  ::lime::graphics::Image >::cast(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0)));
            			}
            			else {
HXLINE( 268)				return ::lime::graphics::Image_obj::fromFile(( (::String)(this->paths->get(id)) ),null(),null());
            			}
            		}
HXLINE( 250)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getImage,return )

::String AssetLibrary_obj::getPath(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","getPath",0x4ac9f50e,"lime.utils.AssetLibrary.getPath","lime/utils/AssetLibrary.hx",277,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 277)		return ( (::String)(this->paths->get(id)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getPath,return )

::String AssetLibrary_obj::getText(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","getText",0x4d71dc16,"lime.utils.AssetLibrary.getText","lime/utils/AssetLibrary.hx",284,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 284)		Bool _hx_tmp = this->cachedText->exists(id);
HXDLIN( 284)		if (_hx_tmp) {
HXLINE( 286)			return ( (::String)(this->cachedText->get(id)) );
            		}
            		else {
HXLINE( 290)			HX_VARI(  ::haxe::io::Bytes,bytes) = this->getBytes(id);
HXLINE( 292)			Bool _hx_tmp1 = hx::IsNull( bytes );
HXDLIN( 292)			if (_hx_tmp1) {
HXLINE( 294)				return null();
            			}
            			else {
HXLINE( 298)				return bytes->getString((int)0,bytes->length);
            			}
            		}
HXLINE( 284)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,getText,return )

Bool AssetLibrary_obj::isLocal(::String id,::String type){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","isLocal",0x436bccd4,"lime.utils.AssetLibrary.isLocal","lime/utils/AssetLibrary.hx",311,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE( 311)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,isLocal,return )

::Array< ::String > AssetLibrary_obj::list(::String type){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","list",0xe20b3ecb,"lime.utils.AssetLibrary.list","lime/utils/AssetLibrary.hx",344,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 346)		HX_VAR( ::String,requestedType);
HXDLIN( 346)		Bool _hx_tmp = hx::IsNotNull( type );
HXDLIN( 346)		if (_hx_tmp) {
HXLINE( 346)			requestedType = type;
            		}
            		else {
HXLINE( 346)			requestedType = null();
            		}
HXLINE( 347)		HX_VARI( ::Array< ::String >,items) = ::Array_obj< ::String >::__new(0);
HXLINE( 349)		{
HXLINE( 349)			HX_VARI(  ::Dynamic,tmp) = this->types->keys();
HXDLIN( 349)			while(true){
HXLINE( 349)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 349)				if (_hx_tmp1) {
HXLINE( 349)					goto _hx_goto_1;
            				}
HXDLIN( 349)				HX_VARI( ::String,id) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 351)				Bool _hx_tmp2;
HXDLIN( 351)				Bool _hx_tmp3 = hx::IsNotNull( requestedType );
HXDLIN( 351)				if (_hx_tmp3) {
HXLINE( 351)					_hx_tmp2 = this->exists(id,type);
            				}
            				else {
HXLINE( 351)					_hx_tmp2 = true;
            				}
HXDLIN( 351)				if (_hx_tmp2) {
HXLINE( 353)					items->push(id);
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE( 359)		return items;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,list,return )

 ::lime::app::Future AssetLibrary_obj::loadAsset(::String id,::String type){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadAsset",0xdf43a85d,"lime.utils.AssetLibrary.loadAsset","lime/utils/AssetLibrary.hx",366,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE( 366)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ){
HXLINE( 366)			return this->loadBytes(id);
HXDLIN( 366)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE( 366)			return this->loadFont(id);
HXDLIN( 366)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE( 366)			return this->loadImage(id);
HXDLIN( 366)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE( 366)			return this->loadAudioBuffer(id);
HXDLIN( 366)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("TEMPLATE",3a,78,cd,05)) ){
HXLINE( 374)			HX_STACK_DO_THROW((HX_("Not sure how to load template: ",43,70,39,d8) + id));
HXDLIN( 374)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
HXLINE( 366)			return this->loadText(id);
HXDLIN( 366)			goto _hx_goto_2;
            		}
            		/* default */{
HXLINE( 375)			HX_STACK_DO_THROW((HX_("Unknown asset type: ",86,5e,db,f9) + type));
            		}
            		_hx_goto_2:;
HXLINE( 366)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadAsset,return )

 ::lime::app::Future AssetLibrary_obj::load(){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",382,0x8b4b8bbb)
            	HX_STACK_THIS(this)
HXLINE( 384)		Bool _hx_tmp = hx::IsNull( this->promise );
HXDLIN( 384)		if (_hx_tmp) {
HXLINE( 386)			this->promise =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__new();
HXLINE( 387)			this->bytesLoadedCache =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 389)			this->assetsLoaded = (int)0;
HXLINE( 390)			this->assetsTotal = (int)1;
HXLINE( 392)			{
HXLINE( 392)				HX_VARI(  ::Dynamic,tmp) = this->preload->keys();
HXDLIN( 392)				while(true){
HXLINE( 392)					Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 392)					if (_hx_tmp1) {
HXLINE( 392)						goto _hx_goto_3;
            					}
HXDLIN( 392)					HX_VARI( ::String,id) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 394)					{
HXLINE( 394)						HX_VARI( ::String,_g) = ( (::String)(this->types->get(id)) );
HXDLIN( 394)						Bool _hx_tmp2 = hx::IsNull( _g );
HXDLIN( 394)						if (!(_hx_tmp2)) {
HXLINE( 394)							::String _hx_switch_0 = _g;
            							if (  (_hx_switch_0==HX_("BINARY",01,68,8e,9f)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id1, ::Dynamic,f) HXARGC(2)
            								void _hx_run(Int a1,Int a2){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",401,0x8b4b8bbb)
            									HX_STACK_ARG(a1,"a1")
            									HX_STACK_ARG(a2,"a2")
HXLINE( 401)									f(id1,a1,a2);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1,::String,id2, ::Dynamic,f1) HXARGC(1)
            								void _hx_run( ::Dynamic a11){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",402,0x8b4b8bbb)
            									HX_STACK_ARG(a11,"a11")
HXLINE( 402)									f1(id2,a11);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::Dynamic,f2,::String,id3) HXARGC(1)
            								void _hx_run( ::haxe::io::Bytes a12){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",403,0x8b4b8bbb)
            									HX_STACK_ARG(a12,"a12")
HXLINE( 403)									f2(id3,a12);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 398)								this->assetsTotal++;
HXLINE( 400)								HX_VARI(  ::lime::app::Future,future) = this->loadBytes(id);
HXLINE( 401)								 ::Dynamic f = this->load_onProgress_dyn();
HXDLIN( 401)								::String id1 = id;
HXDLIN( 401)								 ::Dynamic _hx_tmp3 =  ::Dynamic(new _hx_Closure_0(id1,f));
HXDLIN( 401)								future->onProgress(_hx_tmp3);
HXLINE( 402)								 ::Dynamic f1 = this->load_onError_dyn();
HXDLIN( 402)								::String id2 = id;
HXDLIN( 402)								 ::Dynamic _hx_tmp4 =  ::Dynamic(new _hx_Closure_1(id2,f1));
HXDLIN( 402)								future->onError(_hx_tmp4);
HXLINE( 403)								 ::Dynamic f2 = this->loadBytes_onComplete_dyn();
HXDLIN( 403)								::String id3 = id;
HXDLIN( 403)								 ::Dynamic _hx_tmp5 =  ::Dynamic(new _hx_Closure_2(f2,id3));
HXDLIN( 403)								future->onComplete(_hx_tmp5);
HXLINE( 396)								goto _hx_goto_4;
            							}
            							if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3,::String,id4, ::Dynamic,f3) HXARGC(2)
            								void _hx_run(Int a13,Int a21){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",410,0x8b4b8bbb)
            									HX_STACK_ARG(a13,"a13")
            									HX_STACK_ARG(a21,"a21")
HXLINE( 410)									f3(id4,a13,a21);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_4,::String,id5, ::Dynamic,f4) HXARGC(1)
            								void _hx_run( ::Dynamic a14){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",411,0x8b4b8bbb)
            									HX_STACK_ARG(a14,"a14")
HXLINE( 411)									f4(id5,a14);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5, ::Dynamic,f5,::String,id6) HXARGC(1)
            								void _hx_run( ::lime::text::Font a15){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",412,0x8b4b8bbb)
            									HX_STACK_ARG(a15,"a15")
HXLINE( 412)									f5(id6,a15);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 407)								this->assetsTotal++;
HXLINE( 409)								HX_VARI_NAME(  ::lime::app::Future,future1,"future") = this->loadFont(id);
HXLINE( 410)								 ::Dynamic f3 = this->load_onProgress_dyn();
HXDLIN( 410)								::String id4 = id;
HXDLIN( 410)								 ::Dynamic _hx_tmp6 =  ::Dynamic(new _hx_Closure_3(id4,f3));
HXDLIN( 410)								future1->onProgress(_hx_tmp6);
HXLINE( 411)								 ::Dynamic f4 = this->load_onError_dyn();
HXDLIN( 411)								::String id5 = id;
HXDLIN( 411)								 ::Dynamic _hx_tmp7 =  ::Dynamic(new _hx_Closure_4(id5,f4));
HXDLIN( 411)								future1->onError(_hx_tmp7);
HXLINE( 412)								 ::Dynamic f5 = this->loadFont_onComplete_dyn();
HXDLIN( 412)								::String id6 = id;
HXDLIN( 412)								 ::Dynamic _hx_tmp8 =  ::Dynamic(new _hx_Closure_5(f5,id6));
HXDLIN( 412)								future1->onComplete(_hx_tmp8);
HXLINE( 405)								goto _hx_goto_4;
            							}
            							if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_6, ::Dynamic,f6,::String,id7) HXARGC(2)
            								void _hx_run(Int a16,Int a22){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",419,0x8b4b8bbb)
            									HX_STACK_ARG(a16,"a16")
            									HX_STACK_ARG(a22,"a22")
HXLINE( 419)									f6(id7,a16,a22);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7,::String,id8, ::Dynamic,f7) HXARGC(1)
            								void _hx_run( ::Dynamic a17){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",420,0x8b4b8bbb)
            									HX_STACK_ARG(a17,"a17")
HXLINE( 420)									f7(id8,a17);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_8,::String,id9, ::Dynamic,f8) HXARGC(1)
            								void _hx_run( ::lime::graphics::Image a18){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",421,0x8b4b8bbb)
            									HX_STACK_ARG(a18,"a18")
HXLINE( 421)									f8(id9,a18);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 416)								this->assetsTotal++;
HXLINE( 418)								HX_VARI_NAME(  ::lime::app::Future,future2,"future") = this->loadImage(id);
HXLINE( 419)								 ::Dynamic f6 = this->load_onProgress_dyn();
HXDLIN( 419)								::String id7 = id;
HXDLIN( 419)								 ::Dynamic _hx_tmp9 =  ::Dynamic(new _hx_Closure_6(f6,id7));
HXDLIN( 419)								future2->onProgress(_hx_tmp9);
HXLINE( 420)								 ::Dynamic f7 = this->load_onError_dyn();
HXDLIN( 420)								::String id8 = id;
HXDLIN( 420)								 ::Dynamic _hx_tmp10 =  ::Dynamic(new _hx_Closure_7(id8,f7));
HXDLIN( 420)								future2->onError(_hx_tmp10);
HXLINE( 421)								 ::Dynamic f8 = this->loadImage_onComplete_dyn();
HXDLIN( 421)								::String id9 = id;
HXDLIN( 421)								 ::Dynamic _hx_tmp11 =  ::Dynamic(new _hx_Closure_8(id9,f8));
HXDLIN( 421)								future2->onComplete(_hx_tmp11);
HXLINE( 414)								goto _hx_goto_4;
            							}
            							if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_9,::String,id10, ::Dynamic,f9) HXARGC(2)
            								void _hx_run(Int a19,Int a23){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",428,0x8b4b8bbb)
            									HX_STACK_ARG(a19,"a19")
            									HX_STACK_ARG(a23,"a23")
HXLINE( 428)									f9(id10,a19,a23);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_10, ::Dynamic,f10,::String,id11) HXARGC(1)
            								void _hx_run( ::Dynamic a110){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",429,0x8b4b8bbb)
            									HX_STACK_ARG(a110,"a110")
HXLINE( 429)									f10(id11,a110);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_11, ::Dynamic,f11,::String,id12) HXARGC(1)
            								void _hx_run( ::lime::media::AudioBuffer a111){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",430,0x8b4b8bbb)
            									HX_STACK_ARG(a111,"a111")
HXLINE( 430)									f11(id12,a111);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 425)								this->assetsTotal++;
HXLINE( 427)								HX_VARI_NAME(  ::lime::app::Future,future3,"future") = this->loadAudioBuffer(id);
HXLINE( 428)								 ::Dynamic f9 = this->load_onProgress_dyn();
HXDLIN( 428)								::String id10 = id;
HXDLIN( 428)								 ::Dynamic _hx_tmp12 =  ::Dynamic(new _hx_Closure_9(id10,f9));
HXDLIN( 428)								future3->onProgress(_hx_tmp12);
HXLINE( 429)								 ::Dynamic f10 = this->load_onError_dyn();
HXDLIN( 429)								::String id11 = id;
HXDLIN( 429)								 ::Dynamic _hx_tmp13 =  ::Dynamic(new _hx_Closure_10(f10,id11));
HXDLIN( 429)								future3->onError(_hx_tmp13);
HXLINE( 430)								 ::Dynamic f11 = this->loadAudioBuffer_onComplete_dyn();
HXDLIN( 430)								::String id12 = id;
HXDLIN( 430)								 ::Dynamic _hx_tmp14 =  ::Dynamic(new _hx_Closure_11(f11,id12));
HXDLIN( 430)								future3->onComplete(_hx_tmp14);
HXLINE( 423)								goto _hx_goto_4;
            							}
            							if (  (_hx_switch_0==HX_("TEXT",ad,94,ba,37)) ){
            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_12,::String,id13, ::Dynamic,f12) HXARGC(2)
            								void _hx_run(Int a112,Int a24){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",437,0x8b4b8bbb)
            									HX_STACK_ARG(a112,"a112")
            									HX_STACK_ARG(a24,"a24")
HXLINE( 437)									f12(id13,a112,a24);
            								}
            								HX_END_LOCAL_FUNC2((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_13, ::Dynamic,f13,::String,id14) HXARGC(1)
            								void _hx_run( ::Dynamic a113){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",438,0x8b4b8bbb)
            									HX_STACK_ARG(a113,"a113")
HXLINE( 438)									f13(id14,a113);
            								}
            								HX_END_LOCAL_FUNC1((void))

            								HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_14,::String,id15, ::Dynamic,f14) HXARGC(1)
            								void _hx_run(::String a114){
            									HX_STACK_FRAME("lime.utils.AssetLibrary","load",0xe20fbc93,"lime.utils.AssetLibrary.load","lime/utils/AssetLibrary.hx",439,0x8b4b8bbb)
            									HX_STACK_ARG(a114,"a114")
HXLINE( 439)									f14(id15,a114);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 434)								this->assetsTotal++;
HXLINE( 436)								HX_VARI_NAME(  ::lime::app::Future,future4,"future") = this->loadText(id);
HXLINE( 437)								 ::Dynamic f12 = this->load_onProgress_dyn();
HXDLIN( 437)								::String id13 = id;
HXDLIN( 437)								 ::Dynamic _hx_tmp15 =  ::Dynamic(new _hx_Closure_12(id13,f12));
HXDLIN( 437)								future4->onProgress(_hx_tmp15);
HXLINE( 438)								 ::Dynamic f13 = this->load_onError_dyn();
HXDLIN( 438)								::String id14 = id;
HXDLIN( 438)								 ::Dynamic _hx_tmp16 =  ::Dynamic(new _hx_Closure_13(f13,id14));
HXDLIN( 438)								future4->onError(_hx_tmp16);
HXLINE( 439)								 ::Dynamic f14 = this->loadText_onComplete_dyn();
HXDLIN( 439)								::String id15 = id;
HXDLIN( 439)								 ::Dynamic _hx_tmp17 =  ::Dynamic(new _hx_Closure_14(id15,f14));
HXDLIN( 439)								future4->onComplete(_hx_tmp17);
HXLINE( 432)								goto _hx_goto_4;
            							}
            							/* default */{
            							}
            							_hx_goto_4:;
            						}
            					}
            				}
            				_hx_goto_3:;
            			}
HXLINE( 447)			this->_hx___assetLoaded(null());
            		}
HXLINE( 451)		return this->promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetLibrary_obj,load,return )

 ::lime::app::Future AssetLibrary_obj::loadAudioBuffer(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadAudioBuffer",0xa3353ca3,"lime.utils.AssetLibrary.loadAudioBuffer","lime/utils/AssetLibrary.hx",458,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 458)		Bool _hx_tmp = this->cachedAudioBuffers->exists(id);
HXDLIN( 458)		if (_hx_tmp) {
HXLINE( 460)			return ::lime::app::Future_obj::withValue(this->cachedAudioBuffers->get(id).StaticCast<  ::lime::media::AudioBuffer >());
            		}
            		else {
HXLINE( 462)			Bool _hx_tmp1 = this->classTypes->exists(id);
HXDLIN( 462)			if (_hx_tmp1) {
HXLINE( 464)				 ::lime::media::AudioBuffer _hx_tmp2 = ( ( ::lime::media::AudioBuffer)(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 464)				return ::lime::app::Future_obj::withValue(_hx_tmp2);
            			}
            			else {
HXLINE( 476)				return ::lime::media::AudioBuffer_obj::loadFromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 458)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadAudioBuffer,return )

 ::lime::app::Future AssetLibrary_obj::loadBytes(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadBytes",0x76a246d8,"lime.utils.AssetLibrary.loadBytes","lime/utils/AssetLibrary.hx",485,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 485)		Bool _hx_tmp = this->cachedBytes->exists(id);
HXDLIN( 485)		if (_hx_tmp) {
HXLINE( 487)			return ::lime::app::Future_obj::withValue(this->cachedBytes->get(id).StaticCast<  ::haxe::io::Bytes >());
            		}
            		else {
HXLINE( 489)			Bool _hx_tmp1 = this->classTypes->exists(id);
HXDLIN( 489)			if (_hx_tmp1) {
HXLINE( 494)				 ::haxe::io::Bytes _hx_tmp2 = ( ( ::haxe::io::Bytes)(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 494)				return ::lime::app::Future_obj::withValue(_hx_tmp2);
            			}
            			else {
HXLINE( 499)				return ::lime::utils::_Bytes::Bytes_Impl__obj::loadFromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 485)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadBytes,return )

 ::lime::app::Future AssetLibrary_obj::loadFont(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadFont",0xbd1e8c02,"lime.utils.AssetLibrary.loadFont","lime/utils/AssetLibrary.hx",508,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 508)		Bool _hx_tmp = this->cachedFonts->exists(id);
HXDLIN( 508)		if (_hx_tmp) {
HXLINE( 510)			return ::lime::app::Future_obj::withValue(this->cachedFonts->get(id).StaticCast<  ::lime::text::Font >());
            		}
            		else {
HXLINE( 512)			Bool _hx_tmp1 = this->classTypes->exists(id);
HXDLIN( 512)			if (_hx_tmp1) {
HXLINE( 514)				HX_VARI(  ::lime::text::Font,font) = ( ( ::lime::text::Font)(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 519)				return ::lime::app::Future_obj::withValue(font);
            			}
            			else {
HXLINE( 527)				return ::lime::text::Font_obj::loadFromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 508)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadFont,return )

 ::lime::app::Future AssetLibrary_obj::loadImage(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadImage",0x76735dc8,"lime.utils.AssetLibrary.loadImage","lime/utils/AssetLibrary.hx",537,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 537)		Bool _hx_tmp = this->cachedImages->exists(id);
HXDLIN( 537)		if (_hx_tmp) {
HXLINE( 539)			return ::lime::app::Future_obj::withValue(this->cachedImages->get(id).StaticCast<  ::lime::graphics::Image >());
            		}
            		else {
HXLINE( 541)			Bool _hx_tmp1 = this->classTypes->exists(id);
HXDLIN( 541)			if (_hx_tmp1) {
HXLINE( 543)				 ::lime::graphics::Image _hx_tmp2 = ( ( ::lime::graphics::Image)(::Type_obj::createInstance(this->classTypes->get(id).StaticCast< hx::Class >(),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 543)				return ::lime::app::Future_obj::withValue(_hx_tmp2);
            			}
            			else {
HXLINE( 547)				return ::lime::graphics::Image_obj::loadFromFile(( (::String)(this->paths->get(id)) ));
            			}
            		}
HXLINE( 537)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadImage,return )

 ::lime::app::Future AssetLibrary_obj::loadText(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadText",0xc657fae0,"lime.utils.AssetLibrary.loadText","lime/utils/AssetLibrary.hx",554,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 554)		HX_VARI(  ::lime::utils::AssetLibrary,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 556)		Bool _hx_tmp = this->cachedText->exists(id);
HXDLIN( 556)		if (_hx_tmp) {
HXLINE( 558)			return ::lime::app::Future_obj::withValue(( (::String)(this->cachedText->get(id)) ));
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::utils::AssetLibrary,_gthis,::String,id) HXARGC(1)
            			 ::lime::app::Future _hx_run( ::haxe::io::Bytes bytes){
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0,::String,id, ::lime::utils::AssetLibrary,_gthis, ::haxe::io::Bytes,bytes) HXARGC(0)
            				::String _hx_run(){
            					HX_STACK_FRAME("lime.utils.AssetLibrary","loadText",0xc657fae0,"lime.utils.AssetLibrary.loadText","lime/utils/AssetLibrary.hx",566,0x8b4b8bbb)
HXLINE( 566)					Bool _hx_tmp1 = hx::IsNull( bytes );
HXDLIN( 566)					if (_hx_tmp1) {
HXLINE( 568)						return null();
            					}
            					else {
HXLINE( 572)						HX_VARI( ::String,text) = bytes->getString((int)0,bytes->length);
HXLINE( 573)						_gthis->cachedText->set(id,text);
HXLINE( 574)						return text;
            					}
HXLINE( 566)					return null();
            				}
            				HX_END_LOCAL_FUNC0(return)

            				HX_STACK_FRAME("lime.utils.AssetLibrary","loadText",0xc657fae0,"lime.utils.AssetLibrary.loadText","lime/utils/AssetLibrary.hx",564,0x8b4b8bbb)
            				HX_STACK_ARG(bytes,"bytes")
HXLINE( 564)				return  ::lime::app::Future_obj::__new( ::Dynamic(new _hx_Closure_0(id,_gthis,bytes)),true);
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 562)			return this->loadBytes(id)->then( ::Dynamic(new _hx_Closure_1(_gthis,id)));
            		}
HXLINE( 556)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,loadText,return )

void AssetLibrary_obj::unload(){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","unload",0x6003f8ac,"lime.utils.AssetLibrary.unload","lime/utils/AssetLibrary.hx",587,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetLibrary_obj,unload,(void))

void AssetLibrary_obj::_hx___assetLoaded(::String id){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","__assetLoaded",0x549222e8,"lime.utils.AssetLibrary.__assetLoaded","lime/utils/AssetLibrary.hx",594,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 596)		this->assetsLoaded++;
HXLINE( 598)		Bool _hx_tmp = hx::IsNotNull( id );
HXDLIN( 598)		if (_hx_tmp) {
HXLINE( 600)			HX_VARI(  ::Dynamic,size) = this->sizes->get(id);
HXLINE( 602)			Bool _hx_tmp1 = !(this->bytesLoadedCache->exists(id));
HXDLIN( 602)			if (_hx_tmp1) {
HXLINE( 604)				hx::AddEq(this->bytesLoaded,size);
            			}
            			else {
HXLINE( 608)				HX_VARI(  ::Dynamic,cache) = this->bytesLoadedCache->get(id);
HXLINE( 610)				if (hx::IsLess( cache,size )) {
HXLINE( 612)					hx::AddEq(this->bytesLoaded,(size - cache));
            				}
            			}
HXLINE( 618)			this->bytesLoadedCache->set(id,size);
            		}
HXLINE( 622)		Bool _hx_tmp2 = (this->assetsLoaded < this->assetsTotal);
HXDLIN( 622)		if (_hx_tmp2) {
HXLINE( 624)			this->promise->progress(this->bytesLoaded,this->bytesTotal);
            		}
            		else {
HXLINE( 628)			this->promise->progress(this->bytesTotal,this->bytesTotal);
HXLINE( 629)			this->promise->complete(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,_hx___assetLoaded,(void))

void AssetLibrary_obj::_hx___fromManifest( ::lime::utils::AssetManifest manifest){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","__fromManifest",0xf24ba706,"lime.utils.AssetLibrary.__fromManifest","lime/utils/AssetLibrary.hx",636,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(manifest,"manifest")
HXLINE( 638)		HX_VARI( Bool,hasSize) = (manifest->version >= (int)2);
HXLINE( 639)		HX_VARI( ::String,basePath) = manifest->basePath;
HXLINE( 640)		HX_VAR( Int,size);
HXDLIN( 640)		HX_VAR( ::String,id);
HXLINE( 642)		{
HXLINE( 642)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 642)			HX_VARI( ::cpp::VirtualArray,_g1) = manifest->assets;
HXDLIN( 642)			while((_g < _g1->get_length())){
HXLINE( 642)				HX_VARI(  ::Dynamic,asset) = _g1->__get(_g);
HXDLIN( 642)				++_g;
HXLINE( 644)				if (hasSize) {
HXLINE( 644)					size =  ::Dynamic(asset->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic));
            				}
            				else {
HXLINE( 644)					size = (int)100;
            				}
HXLINE( 645)				id =  ::Dynamic(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic));
HXLINE( 647)				{
HXLINE( 647)					::String _hx_tmp = ::Std_obj::string( ::Dynamic(asset->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)));
HXDLIN( 647)					this->paths->set(id,(basePath + _hx_tmp));
            				}
HXLINE( 648)				this->sizes->set(id,size);
HXLINE( 649)				{
HXLINE( 649)					::String value = ( (::String)(asset->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) );
HXDLIN( 649)					this->types->set(id,value);
            				}
            			}
            		}
HXLINE( 703)		this->bytesTotal = (int)0;
HXLINE( 705)		{
HXLINE( 705)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 705)			HX_VARI_NAME( ::cpp::VirtualArray,_g11,"_g1") = manifest->assets;
HXDLIN( 705)			while((_g2 < _g11->get_length())){
HXLINE( 705)				HX_VARI_NAME(  ::Dynamic,asset1,"asset") = _g11->__get(_g2);
HXDLIN( 705)				++_g2;
HXLINE( 707)				id =  ::Dynamic(asset1->__Field(HX_("id",db,5b,00,00),hx::paccDynamic));
HXLINE( 709)				Bool _hx_tmp1 = this->preload->exists(id);
HXDLIN( 709)				if (_hx_tmp1) {
HXLINE( 711)					hx::AddEq(this->bytesTotal,this->sizes->get(id));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,_hx___fromManifest,(void))

void AssetLibrary_obj::loadAudioBuffer_onComplete(::String id, ::lime::media::AudioBuffer audioBuffer){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadAudioBuffer_onComplete",0xd987b254,"lime.utils.AssetLibrary.loadAudioBuffer_onComplete","lime/utils/AssetLibrary.hx",727,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(audioBuffer,"audioBuffer")
HXLINE( 729)		this->cachedAudioBuffers->set(id,audioBuffer);
HXLINE( 730)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadAudioBuffer_onComplete,(void))

void AssetLibrary_obj::loadBytes_onComplete(::String id, ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadBytes_onComplete",0xaa249a3f,"lime.utils.AssetLibrary.loadBytes_onComplete","lime/utils/AssetLibrary.hx",735,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(bytes,"bytes")
HXLINE( 737)		this->cachedBytes->set(id,bytes);
HXLINE( 738)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadBytes_onComplete,(void))

void AssetLibrary_obj::loadFont_onComplete(::String id, ::lime::text::Font font){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadFont_onComplete",0x9f1c7155,"lime.utils.AssetLibrary.loadFont_onComplete","lime/utils/AssetLibrary.hx",743,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(font,"font")
HXLINE( 745)		this->cachedFonts->set(id,font);
HXLINE( 746)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadFont_onComplete,(void))

void AssetLibrary_obj::loadImage_onComplete(::String id, ::lime::graphics::Image image){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadImage_onComplete",0xa0d6094f,"lime.utils.AssetLibrary.loadImage_onComplete","lime/utils/AssetLibrary.hx",751,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(image,"image")
HXLINE( 753)		this->cachedImages->set(id,image);
HXLINE( 754)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadImage_onComplete,(void))

void AssetLibrary_obj::loadText_onComplete(::String id,::String text){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","loadText_onComplete",0xe39ed337,"lime.utils.AssetLibrary.loadText_onComplete","lime/utils/AssetLibrary.hx",759,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(text,"text")
HXLINE( 761)		this->cachedText->set(id,text);
HXLINE( 762)		this->_hx___assetLoaded(id);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,loadText_onComplete,(void))

void AssetLibrary_obj::load_onError(::String id, ::Dynamic message){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","load_onError",0xb5eacb3d,"lime.utils.AssetLibrary.load_onError","lime/utils/AssetLibrary.hx",769,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(message,"message")
HXLINE( 769)		this->promise->error(((HX_("Error loading asset \"",d6,ff,4d,83) + id) + HX_("\"",22,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLibrary_obj,load_onError,(void))

void AssetLibrary_obj::load_onProgress(::String id,Int bytesLoaded,Int bytesTotal){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","load_onProgress",0x56294f58,"lime.utils.AssetLibrary.load_onProgress","lime/utils/AssetLibrary.hx",776,0x8b4b8bbb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(bytesLoaded,"bytesLoaded")
            	HX_STACK_ARG(bytesTotal,"bytesTotal")
HXLINE( 776)		if ((bytesLoaded > (int)0)) {
HXLINE( 778)			HX_VARI(  ::Dynamic,size) = this->sizes->get(id);
HXLINE( 779)			HX_VAR( Float,percent);
HXLINE( 781)			if ((bytesTotal > (int)0)) {
HXLINE( 785)				percent = ((Float)bytesLoaded / (Float)bytesTotal);
HXLINE( 786)				Bool _hx_tmp = (percent > (int)1);
HXDLIN( 786)				if (_hx_tmp) {
HXLINE( 786)					percent = (int)1;
            				}
HXLINE( 787)				bytesLoaded = ::Math_obj::floor((percent * size));
            			}
            			else {
HXLINE( 789)				Bool _hx_tmp1 = hx::IsGreater( bytesLoaded,size );
HXDLIN( 789)				if (_hx_tmp1) {
HXLINE( 791)					bytesLoaded = size;
            				}
            			}
HXLINE( 795)			Bool _hx_tmp2 = this->bytesLoadedCache->exists(id);
HXDLIN( 795)			if (_hx_tmp2) {
HXLINE( 797)				HX_VARI(  ::Dynamic,cache) = this->bytesLoadedCache->get(id);
HXLINE( 799)				if (hx::IsNotEq( bytesLoaded,cache )) {
HXLINE( 801)					hx::AddEq(this->bytesLoaded,(bytesLoaded - cache));
            				}
            			}
            			else {
HXLINE( 807)				hx::AddEq(this->bytesLoaded,bytesLoaded);
            			}
HXLINE( 811)			this->bytesLoadedCache->set(id,bytesLoaded);
HXLINE( 812)			this->promise->progress(this->bytesLoaded,this->bytesTotal);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetLibrary_obj,load_onProgress,(void))

 ::lime::utils::AssetLibrary AssetLibrary_obj::fromManifest( ::lime::utils::AssetManifest manifest){
            	HX_STACK_FRAME("lime.utils.AssetLibrary","fromManifest",0x0354aea6,"lime.utils.AssetLibrary.fromManifest","lime/utils/AssetLibrary.hx",105,0x8b4b8bbb)
            	HX_STACK_ARG(manifest,"manifest")
HXLINE( 107)		Bool _hx_tmp = hx::IsNull( manifest );
HXDLIN( 107)		if (_hx_tmp) {
HXLINE( 107)			return null();
            		}
HXLINE( 109)		HX_VARI(  ::lime::utils::AssetLibrary,library) = null();
HXLINE( 111)		Bool _hx_tmp1 = hx::IsNull( manifest->libraryType );
HXDLIN( 111)		if (_hx_tmp1) {
HXLINE( 113)			library =  ::lime::utils::AssetLibrary_obj::__new();
            		}
            		else {
HXLINE( 117)			hx::Class _hx_tmp2 = ::Type_obj::resolveClass(manifest->libraryType);
HXDLIN( 117)			library = ( ( ::lime::utils::AssetLibrary)(::Type_obj::createInstance(_hx_tmp2,manifest->libraryArgs)) );
            		}
HXLINE( 121)		library->_hx___fromManifest(manifest);
HXLINE( 123)		return library;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AssetLibrary_obj,fromManifest,return )


AssetLibrary_obj::AssetLibrary_obj()
{
}

void AssetLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetLibrary);
	HX_MARK_MEMBER_NAME(onChange,"onChange");
	HX_MARK_MEMBER_NAME(assetsLoaded,"assetsLoaded");
	HX_MARK_MEMBER_NAME(assetsTotal,"assetsTotal");
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesLoadedCache,"bytesLoadedCache");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(cachedAudioBuffers,"cachedAudioBuffers");
	HX_MARK_MEMBER_NAME(cachedBytes,"cachedBytes");
	HX_MARK_MEMBER_NAME(cachedFonts,"cachedFonts");
	HX_MARK_MEMBER_NAME(cachedImages,"cachedImages");
	HX_MARK_MEMBER_NAME(cachedText,"cachedText");
	HX_MARK_MEMBER_NAME(classTypes,"classTypes");
	HX_MARK_MEMBER_NAME(paths,"paths");
	HX_MARK_MEMBER_NAME(preload,"preload");
	HX_MARK_MEMBER_NAME(promise,"promise");
	HX_MARK_MEMBER_NAME(sizes,"sizes");
	HX_MARK_MEMBER_NAME(types,"types");
	HX_MARK_END_CLASS();
}

void AssetLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onChange,"onChange");
	HX_VISIT_MEMBER_NAME(assetsLoaded,"assetsLoaded");
	HX_VISIT_MEMBER_NAME(assetsTotal,"assetsTotal");
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesLoadedCache,"bytesLoadedCache");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(cachedAudioBuffers,"cachedAudioBuffers");
	HX_VISIT_MEMBER_NAME(cachedBytes,"cachedBytes");
	HX_VISIT_MEMBER_NAME(cachedFonts,"cachedFonts");
	HX_VISIT_MEMBER_NAME(cachedImages,"cachedImages");
	HX_VISIT_MEMBER_NAME(cachedText,"cachedText");
	HX_VISIT_MEMBER_NAME(classTypes,"classTypes");
	HX_VISIT_MEMBER_NAME(paths,"paths");
	HX_VISIT_MEMBER_NAME(preload,"preload");
	HX_VISIT_MEMBER_NAME(promise,"promise");
	HX_VISIT_MEMBER_NAME(sizes,"sizes");
	HX_VISIT_MEMBER_NAME(types,"types");
}

hx::Val AssetLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list_dyn()); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"paths") ) { return hx::Val( paths); }
		if (HX_FIELD_EQ(inName,"sizes") ) { return hx::Val( sizes); }
		if (HX_FIELD_EQ(inName,"types") ) { return hx::Val( types); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn()); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preload") ) { return hx::Val( preload); }
		if (HX_FIELD_EQ(inName,"promise") ) { return hx::Val( promise); }
		if (HX_FIELD_EQ(inName,"getFont") ) { return hx::Val( getFont_dyn()); }
		if (HX_FIELD_EQ(inName,"getPath") ) { return hx::Val( getPath_dyn()); }
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn()); }
		if (HX_FIELD_EQ(inName,"isLocal") ) { return hx::Val( isLocal_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { return hx::Val( onChange); }
		if (HX_FIELD_EQ(inName,"getAsset") ) { return hx::Val( getAsset_dyn()); }
		if (HX_FIELD_EQ(inName,"getBytes") ) { return hx::Val( getBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"getImage") ) { return hx::Val( getImage_dyn()); }
		if (HX_FIELD_EQ(inName,"loadFont") ) { return hx::Val( loadFont_dyn()); }
		if (HX_FIELD_EQ(inName,"loadText") ) { return hx::Val( loadText_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadAsset") ) { return hx::Val( loadAsset_dyn()); }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { return hx::Val( loadBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"loadImage") ) { return hx::Val( loadImage_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return hx::Val( bytesTotal); }
		if (HX_FIELD_EQ(inName,"cachedText") ) { return hx::Val( cachedText); }
		if (HX_FIELD_EQ(inName,"classTypes") ) { return hx::Val( classTypes); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"assetsTotal") ) { return hx::Val( assetsTotal); }
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return hx::Val( bytesLoaded); }
		if (HX_FIELD_EQ(inName,"cachedBytes") ) { return hx::Val( cachedBytes); }
		if (HX_FIELD_EQ(inName,"cachedFonts") ) { return hx::Val( cachedFonts); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"assetsLoaded") ) { return hx::Val( assetsLoaded); }
		if (HX_FIELD_EQ(inName,"cachedImages") ) { return hx::Val( cachedImages); }
		if (HX_FIELD_EQ(inName,"load_onError") ) { return hx::Val( load_onError_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__assetLoaded") ) { return hx::Val( _hx___assetLoaded_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAudioBuffer") ) { return hx::Val( getAudioBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromManifest") ) { return hx::Val( _hx___fromManifest_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { return hx::Val( loadAudioBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"load_onProgress") ) { return hx::Val( load_onProgress_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bytesLoadedCache") ) { return hx::Val( bytesLoadedCache); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cachedAudioBuffers") ) { return hx::Val( cachedAudioBuffers); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"loadFont_onComplete") ) { return hx::Val( loadFont_onComplete_dyn()); }
		if (HX_FIELD_EQ(inName,"loadText_onComplete") ) { return hx::Val( loadText_onComplete_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"loadBytes_onComplete") ) { return hx::Val( loadBytes_onComplete_dyn()); }
		if (HX_FIELD_EQ(inName,"loadImage_onComplete") ) { return hx::Val( loadImage_onComplete_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer_onComplete") ) { return hx::Val( loadAudioBuffer_onComplete_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool AssetLibrary_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"fromManifest") ) { outValue = fromManifest_dyn(); return true; }
	}
	return false;
}

hx::Val AssetLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"paths") ) { paths=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sizes") ) { sizes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"preload") ) { preload=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"promise") ) { promise=inValue.Cast<  ::lime::app::Promise_lime_utils_AssetLibrary >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=inValue.Cast<  ::lime::app::_Event_Void_Void >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedText") ) { cachedText=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"classTypes") ) { classTypes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"assetsTotal") ) { assetsTotal=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedBytes") ) { cachedBytes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedFonts") ) { cachedFonts=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"assetsLoaded") ) { assetsLoaded=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cachedImages") ) { cachedImages=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"bytesLoadedCache") ) { bytesLoadedCache=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"cachedAudioBuffers") ) { cachedAudioBuffers=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97"));
	outFields->push(HX_HCSTRING("assetsLoaded","\xe8","\xc8","\x28","\x8e"));
	outFields->push(HX_HCSTRING("assetsTotal","\x41","\xc0","\x37","\x03"));
	outFields->push(HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"));
	outFields->push(HX_HCSTRING("bytesLoadedCache","\x52","\xf1","\x40","\x0f"));
	outFields->push(HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"));
	outFields->push(HX_HCSTRING("cachedAudioBuffers","\x3f","\xb0","\x91","\xdb"));
	outFields->push(HX_HCSTRING("cachedBytes","\x29","\x45","\x82","\x36"));
	outFields->push(HX_HCSTRING("cachedFonts","\x82","\xf4","\x7b","\x7d"));
	outFields->push(HX_HCSTRING("cachedImages","\x3a","\x3a","\x9d","\x52"));
	outFields->push(HX_HCSTRING("cachedText","\xaf","\xf1","\x6f","\x7b"));
	outFields->push(HX_HCSTRING("classTypes","\x21","\x9d","\xe9","\x5d"));
	outFields->push(HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd"));
	outFields->push(HX_HCSTRING("preload","\xc9","\x47","\x43","\x35"));
	outFields->push(HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"));
	outFields->push(HX_HCSTRING("sizes","\x92","\x08","\xd9","\x7c"));
	outFields->push(HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AssetLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::app::_Event_Void_Void*/ ,(int)offsetof(AssetLibrary_obj,onChange),HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97")},
	{hx::fsInt,(int)offsetof(AssetLibrary_obj,assetsLoaded),HX_HCSTRING("assetsLoaded","\xe8","\xc8","\x28","\x8e")},
	{hx::fsInt,(int)offsetof(AssetLibrary_obj,assetsTotal),HX_HCSTRING("assetsTotal","\x41","\xc0","\x37","\x03")},
	{hx::fsInt,(int)offsetof(AssetLibrary_obj,bytesLoaded),HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,bytesLoadedCache),HX_HCSTRING("bytesLoadedCache","\x52","\xf1","\x40","\x0f")},
	{hx::fsInt,(int)offsetof(AssetLibrary_obj,bytesTotal),HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedAudioBuffers),HX_HCSTRING("cachedAudioBuffers","\x3f","\xb0","\x91","\xdb")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedBytes),HX_HCSTRING("cachedBytes","\x29","\x45","\x82","\x36")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedFonts),HX_HCSTRING("cachedFonts","\x82","\xf4","\x7b","\x7d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedImages),HX_HCSTRING("cachedImages","\x3a","\x3a","\x9d","\x52")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,cachedText),HX_HCSTRING("cachedText","\xaf","\xf1","\x6f","\x7b")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,classTypes),HX_HCSTRING("classTypes","\x21","\x9d","\xe9","\x5d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,paths),HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,preload),HX_HCSTRING("preload","\xc9","\x47","\x43","\x35")},
	{hx::fsObject /*::lime::app::Promise_lime_utils_AssetLibrary*/ ,(int)offsetof(AssetLibrary_obj,promise),HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,sizes),HX_HCSTRING("sizes","\x92","\x08","\xd9","\x7c")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetLibrary_obj,types),HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AssetLibrary_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetLibrary_obj_sMemberFields[] = {
	HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97"),
	HX_HCSTRING("assetsLoaded","\xe8","\xc8","\x28","\x8e"),
	HX_HCSTRING("assetsTotal","\x41","\xc0","\x37","\x03"),
	HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"),
	HX_HCSTRING("bytesLoadedCache","\x52","\xf1","\x40","\x0f"),
	HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"),
	HX_HCSTRING("cachedAudioBuffers","\x3f","\xb0","\x91","\xdb"),
	HX_HCSTRING("cachedBytes","\x29","\x45","\x82","\x36"),
	HX_HCSTRING("cachedFonts","\x82","\xf4","\x7b","\x7d"),
	HX_HCSTRING("cachedImages","\x3a","\x3a","\x9d","\x52"),
	HX_HCSTRING("cachedText","\xaf","\xf1","\x6f","\x7b"),
	HX_HCSTRING("classTypes","\x21","\x9d","\xe9","\x5d"),
	HX_HCSTRING("paths","\x2e","\x0b","\x57","\xbd"),
	HX_HCSTRING("preload","\xc9","\x47","\x43","\x35"),
	HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"),
	HX_HCSTRING("sizes","\x92","\x08","\xd9","\x7c"),
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getAsset","\x7a","\x79","\x10","\x86"),
	HX_HCSTRING("getAudioBuffer","\x80","\x41","\xe3","\x26"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadAsset","\xea","\xb5","\x70","\x41"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("loadAudioBuffer","\xf0","\x71","\x7c","\xe3"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadImage","\x55","\x6b","\xa0","\xd8"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("__assetLoaded","\xf5","\x7a","\x49","\x36"),
	HX_HCSTRING("__fromManifest","\x59","\x5a","\x01","\x91"),
	HX_HCSTRING("loadAudioBuffer_onComplete","\x27","\x96","\xe6","\x68"),
	HX_HCSTRING("loadBytes_onComplete","\xd2","\x0d","\x18","\xbc"),
	HX_HCSTRING("loadFont_onComplete","\x22","\xd1","\x7c","\xa1"),
	HX_HCSTRING("loadImage_onComplete","\xe2","\x7c","\xc9","\xb2"),
	HX_HCSTRING("loadText_onComplete","\x04","\x33","\xff","\xe5"),
	HX_HCSTRING("load_onError","\xd0","\xf3","\xd6","\x22"),
	HX_HCSTRING("load_onProgress","\xa5","\x84","\x70","\x96"),
	::String(null()) };

static void AssetLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssetLibrary_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssetLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssetLibrary_obj::__mClass,"__mClass");
};

#endif

hx::Class AssetLibrary_obj::__mClass;

static ::String AssetLibrary_obj_sStaticFields[] = {
	HX_HCSTRING("fromManifest","\x39","\xd7","\x40","\x70"),
	::String(null())
};

void AssetLibrary_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.utils.AssetLibrary","\x21","\x55","\xe9","\xfc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AssetLibrary_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AssetLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AssetLibrary_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssetLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssetLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssetLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace utils
