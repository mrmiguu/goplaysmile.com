// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_media_AudioBuffer
#include <lime/media/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_utils_AssetCache
#include <lime/utils/AssetCache.h>
#endif

namespace lime{
namespace utils{

void AssetCache_obj::__construct(){
            	HX_STACK_FRAME("lime.utils.AssetCache","new",0x205507da,"lime.utils.AssetCache.new","lime/utils/AssetCache.hx",14,0xcfac28d4)
            	HX_STACK_THIS(this)
HXLINE(  18)		this->enabled = true;
HXLINE(  26)		this->audio =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  27)		this->font =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  28)		this->image =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  29)		this->version = (int)726429;
            	}

Dynamic AssetCache_obj::__CreateEmpty() { return new AssetCache_obj; }

hx::ObjectPtr< AssetCache_obj > AssetCache_obj::__new()
{
	hx::ObjectPtr< AssetCache_obj > _hx_result = new AssetCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AssetCache_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetCache_obj > _hx_result = new AssetCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool AssetCache_obj::exists(::String id,::String type){
            	HX_STACK_FRAME("lime.utils.AssetCache","exists",0x81df4ea2,"lime.utils.AssetCache.exists","lime/utils/AssetCache.hx",34,0xcfac28d4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE(  36)		Bool _hx_tmp;
HXDLIN(  36)		if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE(  36)			_hx_tmp = hx::IsNull( type );
            		}
            		else {
HXLINE(  36)			_hx_tmp = true;
            		}
HXDLIN(  36)		if (_hx_tmp) {
HXLINE(  38)			Bool _hx_tmp1 = this->image->exists(id);
HXDLIN(  38)			if (_hx_tmp1) {
HXLINE(  38)				return true;
            			}
            		}
HXLINE(  42)		Bool _hx_tmp2;
HXDLIN(  42)		if ((type != HX_("FONT",cf,25,81,2e))) {
HXLINE(  42)			_hx_tmp2 = hx::IsNull( type );
            		}
            		else {
HXLINE(  42)			_hx_tmp2 = true;
            		}
HXDLIN(  42)		if (_hx_tmp2) {
HXLINE(  44)			Bool _hx_tmp3 = this->font->exists(id);
HXDLIN(  44)			if (_hx_tmp3) {
HXLINE(  44)				return true;
            			}
            		}
HXLINE(  48)		Bool _hx_tmp4;
HXDLIN(  48)		Bool _hx_tmp5;
HXDLIN(  48)		if ((type != HX_("SOUND",af,c4,ba,fe))) {
HXLINE(  48)			_hx_tmp5 = (type == HX_("MUSIC",85,08,49,8e));
            		}
            		else {
HXLINE(  48)			_hx_tmp5 = true;
            		}
HXDLIN(  48)		if (!(_hx_tmp5)) {
HXLINE(  48)			_hx_tmp4 = hx::IsNull( type );
            		}
            		else {
HXLINE(  48)			_hx_tmp4 = true;
            		}
HXDLIN(  48)		if (_hx_tmp4) {
HXLINE(  50)			Bool _hx_tmp6 = this->audio->exists(id);
HXDLIN(  50)			if (_hx_tmp6) {
HXLINE(  50)				return true;
            			}
            		}
HXLINE(  54)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetCache_obj,exists,return )

void AssetCache_obj::set(::String id,::String type, ::Dynamic asset){
            	HX_STACK_FRAME("lime.utils.AssetCache","set",0x2058d31c,"lime.utils.AssetCache.set","lime/utils/AssetCache.hx",61,0xcfac28d4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(asset,"asset")
HXLINE(  61)		::String _hx_switch_0 = type;
            		if (  (_hx_switch_0==HX_("FONT",cf,25,81,2e)) ){
HXLINE(  64)			this->font->set(id,asset);
HXDLIN(  64)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("IMAGE",3b,57,57,3b)) ){
HXLINE(  67)			Bool _hx_tmp = !(::Std_obj::is(asset,hx::ClassOf< ::lime::graphics::Image >()));
HXDLIN(  67)			if (_hx_tmp) {
HXLINE(  68)				::String _hx_tmp1 = ::Std_obj::string(asset);
HXDLIN(  68)				HX_STACK_DO_THROW(((HX_("Cannot cache non-Image asset: ",d6,62,c2,3a) + _hx_tmp1) + HX_(" as Image",ad,d1,70,d4)));
            			}
HXLINE(  70)			this->image->set(id,( ( ::lime::graphics::Image)(asset) ));
HXLINE(  66)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("MUSIC",85,08,49,8e)) ||  (_hx_switch_0==HX_("SOUND",af,c4,ba,fe)) ){
HXLINE(  73)			Bool _hx_tmp2 = !(::Std_obj::is(asset,hx::ClassOf< ::lime::media::AudioBuffer >()));
HXDLIN(  73)			if (_hx_tmp2) {
HXLINE(  74)				::String _hx_tmp3 = ::Std_obj::string(asset);
HXDLIN(  74)				HX_STACK_DO_THROW(((HX_("Cannot cache non-AudioBuffer asset: ",b1,96,a5,01) + _hx_tmp3) + HX_(" as AudioBuffer",48,2a,fe,73)));
            			}
HXLINE(  76)			this->audio->set(id,( ( ::lime::media::AudioBuffer)(asset) ));
HXLINE(  72)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  79)			HX_STACK_DO_THROW((type + HX_(" assets are not cachable",f3,2d,ee,fa)));
            		}
            		_hx_goto_0:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(AssetCache_obj,set,(void))

void AssetCache_obj::clear(::String prefix){
            	HX_STACK_FRAME("lime.utils.AssetCache","clear",0x54b4fb87,"lime.utils.AssetCache.clear","lime/utils/AssetCache.hx",88,0xcfac28d4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(prefix,"prefix")
HXLINE(  88)		Bool _hx_tmp = hx::IsNull( prefix );
HXDLIN(  88)		if (_hx_tmp) {
HXLINE(  90)			this->audio =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  91)			this->font =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  92)			this->image =  ::haxe::ds::StringMap_obj::__new();
            		}
            		else {
HXLINE(  96)			HX_VARI(  ::Dynamic,keys) = this->audio->keys();
HXLINE(  98)			while(true){
HXLINE(  98)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(keys->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  98)				if (_hx_tmp1) {
HXLINE(  98)					goto _hx_goto_1;
            				}
HXDLIN(  98)				HX_VARI( ::String,key) = ( (::String)( ::Dynamic(keys->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 100)				Bool _hx_tmp2 = ::StringTools_obj::startsWith(key,prefix);
HXDLIN( 100)				if (_hx_tmp2) {
HXLINE( 102)					this->audio->remove(key);
            				}
            			}
            			_hx_goto_1:;
HXLINE( 108)			HX_VARI_NAME(  ::Dynamic,keys1,"keys") = this->font->keys();
HXLINE( 110)			while(true){
HXLINE( 110)				Bool _hx_tmp3 = !(( (Bool)( ::Dynamic(keys1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 110)				if (_hx_tmp3) {
HXLINE( 110)					goto _hx_goto_2;
            				}
HXDLIN( 110)				HX_VARI_NAME( ::String,key1,"key") = ( (::String)( ::Dynamic(keys1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 112)				Bool _hx_tmp4 = ::StringTools_obj::startsWith(key1,prefix);
HXDLIN( 112)				if (_hx_tmp4) {
HXLINE( 114)					this->font->remove(key1);
            				}
            			}
            			_hx_goto_2:;
HXLINE( 120)			HX_VARI_NAME(  ::Dynamic,keys2,"keys") = this->image->keys();
HXLINE( 122)			while(true){
HXLINE( 122)				Bool _hx_tmp5 = !(( (Bool)( ::Dynamic(keys2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 122)				if (_hx_tmp5) {
HXLINE( 122)					goto _hx_goto_3;
            				}
HXDLIN( 122)				HX_VARI_NAME( ::String,key2,"key") = ( (::String)( ::Dynamic(keys2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 124)				Bool _hx_tmp6 = ::StringTools_obj::startsWith(key2,prefix);
HXDLIN( 124)				if (_hx_tmp6) {
HXLINE( 126)					this->image->remove(key2);
            				}
            			}
            			_hx_goto_3:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,clear,(void))


AssetCache_obj::AssetCache_obj()
{
}

void AssetCache_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetCache);
	HX_MARK_MEMBER_NAME(audio,"audio");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(version,"version");
	HX_MARK_END_CLASS();
}

void AssetCache_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(audio,"audio");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(version,"version");
}

hx::Val AssetCache_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"audio") ) { return hx::Val( audio); }
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled); }
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( version); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AssetCache_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"audio") ) { audio=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetCache_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("audio","\xd6","\x78","\x80","\x27"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AssetCache_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetCache_obj,audio),HX_HCSTRING("audio","\xd6","\x78","\x80","\x27")},
	{hx::fsBool,(int)offsetof(AssetCache_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetCache_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetCache_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsInt,(int)offsetof(AssetCache_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AssetCache_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetCache_obj_sMemberFields[] = {
	HX_HCSTRING("audio","\xd6","\x78","\x80","\x27"),
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	::String(null()) };

static void AssetCache_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssetCache_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssetCache_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssetCache_obj::__mClass,"__mClass");
};

#endif

hx::Class AssetCache_obj::__mClass;

void AssetCache_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.utils.AssetCache","\xe8","\xd2","\x51","\x4a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AssetCache_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssetCache_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssetCache_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssetCache_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetCache_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace utils
