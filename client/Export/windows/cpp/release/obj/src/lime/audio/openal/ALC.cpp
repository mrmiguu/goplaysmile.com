// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_lime_audio_openal_ALC
#include <lime/audio/openal/ALC.h>
#endif

namespace lime{
namespace audio{
namespace openal{

void ALC_obj::__construct() { }

Dynamic ALC_obj::__CreateEmpty() { return new ALC_obj; }

hx::ObjectPtr< ALC_obj > ALC_obj::__new()
{
	hx::ObjectPtr< ALC_obj > _hx_result = new ALC_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ALC_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ALC_obj > _hx_result = new ALC_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int ALC_obj::FALSE;

Int ALC_obj::TRUE;

Int ALC_obj::FREQUENCY;

Int ALC_obj::REFRESH;

Int ALC_obj::SYNC;

Int ALC_obj::MONO_SOURCES;

Int ALC_obj::STEREO_SOURCES;

Int ALC_obj::NO_ERROR;

Int ALC_obj::INVALID_DEVICE;

Int ALC_obj::INVALID_CONTEXT;

Int ALC_obj::INVALID_ENUM;

Int ALC_obj::INVALID_VALUE;

Int ALC_obj::OUT_OF_MEMORY;

Int ALC_obj::ATTRIBUTES_SIZE;

Int ALC_obj::ALL_ATTRIBUTES;

Int ALC_obj::DEFAULT_DEVICE_SPECIFIER;

Int ALC_obj::DEVICE_SPECIFIER;

Int ALC_obj::EXTENSIONS;

Int ALC_obj::ENUMERATE_ALL_EXT;

Int ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER;

Int ALC_obj::ALL_DEVICES_SPECIFIER;

Bool ALC_obj::closeDevice( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","closeDevice",0xea953e50,"lime.audio.openal.ALC.closeDevice","lime/audio/openal/ALC.hx",40,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE(  40)		return ( (Bool)(::lime::audio::openal::ALC_obj::cffi_lime_alc_close_device(hx::DynamicPtr(device))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,closeDevice,return )

 ::Dynamic ALC_obj::createContext( ::Dynamic device,::Array< Int > attrlist){
            	HX_STACK_FRAME("lime.audio.openal.ALC","createContext",0xfb37e6b5,"lime.audio.openal.ALC.createContext","lime/audio/openal/ALC.hx",48,0x52b9922d)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(attrlist,"attrlist")
HXLINE(  51)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(device);
HXDLIN(  51)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_create_context(_hx_tmp,hx::DynamicPtr(attrlist))) );
HXDLIN(  51)		HX_VARI(  ::Dynamic,handle) = Dynamic(hx::DynamicPtr(inVal));
HXLINE(  53)		Bool _hx_tmp1 = hx::IsNotNull( handle );
HXDLIN(  53)		if (_hx_tmp1) {
HXLINE(  55)			return handle;
            		}
HXLINE(  60)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,createContext,return )

void ALC_obj::destroyContext( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","destroyContext",0xda2f6173,"lime.audio.openal.ALC.destroyContext","lime/audio/openal/ALC.hx",68,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE(  68)		::lime::audio::openal::ALC_obj::cffi_lime_alc_destroy_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,destroyContext,(void))

 ::Dynamic ALC_obj::getContextsDevice( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","getContextsDevice",0x1b703ff2,"lime.audio.openal.ALC.getContextsDevice","lime/audio/openal/ALC.hx",74,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE(  77)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_contexts_device(hx::DynamicPtr(context))) );
HXDLIN(  77)		HX_VARI(  ::Dynamic,handle) = Dynamic(hx::DynamicPtr(inVal));
HXLINE(  79)		Bool _hx_tmp = hx::IsNotNull( handle );
HXDLIN(  79)		if (_hx_tmp) {
HXLINE(  81)			return handle;
            		}
HXLINE(  86)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getContextsDevice,return )

 ::Dynamic ALC_obj::getCurrentContext(){
            	HX_STACK_FRAME("lime.audio.openal.ALC","getCurrentContext",0x185e0b4e,"lime.audio.openal.ALC.getCurrentContext","lime/audio/openal/ALC.hx",91,0x52b9922d)
HXLINE(  94)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_current_context()) );
HXDLIN(  94)		HX_VARI(  ::Dynamic,handle) = Dynamic(hx::DynamicPtr(inVal));
HXLINE(  96)		Bool _hx_tmp = hx::IsNotNull( handle );
HXDLIN(  96)		if (_hx_tmp) {
HXLINE(  98)			return handle;
            		}
HXLINE( 103)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ALC_obj,getCurrentContext,return )

Int ALC_obj::getError( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","getError",0xbf7a3e30,"lime.audio.openal.ALC.getError","lime/audio/openal/ALC.hx",111,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE( 111)		return ( (Int)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_error(hx::DynamicPtr(device))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getError,return )

::String ALC_obj::getErrorString( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","getErrorString",0xdb879f21,"lime.audio.openal.ALC.getErrorString","lime/audio/openal/ALC.hx",121,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE( 121)		HX_VARI( Int,_g) = ::lime::audio::openal::ALC_obj::getError(device);
HXDLIN( 121)		switch((int)(_g)){
            			case (int)40961: {
HXLINE( 121)				return HX_("INVALID_DEVICE: Invalid device (or no device?)",8d,16,8a,9d);
            			}
            			break;
            			case (int)40962: {
HXLINE( 121)				return HX_("INVALID_CONTEXT: Invalid context (or no context?)",56,39,91,8b);
            			}
            			break;
            			case (int)40963: {
HXLINE( 121)				return HX_("INVALID_ENUM: Invalid enum value",0a,d7,df,59);
            			}
            			break;
            			case (int)40964: {
HXLINE( 121)				return HX_("INVALID_VALUE: Invalid param value",a6,0e,30,55);
            			}
            			break;
            			case (int)40965: {
HXLINE( 121)				return HX_("OUT_OF_MEMORY: OpenAL has run out of memory",b0,dd,fb,0a);
            			}
            			break;
            			default:{
HXLINE( 121)				return HX_("",00,00,00,00);
            			}
            		}
HXDLIN( 121)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,getErrorString,return )

::Array< Int > ALC_obj::getIntegerv( ::Dynamic device,Int param,Int size){
            	HX_STACK_FRAME("lime.audio.openal.ALC","getIntegerv",0x05eb4790,"lime.audio.openal.ALC.getIntegerv","lime/audio/openal/ALC.hx",138,0x52b9922d)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(size,"size")
HXLINE( 138)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_integerv(hx::DynamicPtr(device),param,size)) );
HXDLIN( 138)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ALC_obj,getIntegerv,return )

::String ALC_obj::getString( ::Dynamic device,Int param){
            	HX_STACK_FRAME("lime.audio.openal.ALC","getString",0x8b43d169,"lime.audio.openal.ALC.getString","lime/audio/openal/ALC.hx",149,0x52b9922d)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(param,"param")
HXLINE( 149)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_string(hx::DynamicPtr(device),param)) );
HXDLIN( 149)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,getString,return )

Bool ALC_obj::makeContextCurrent( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","makeContextCurrent",0x187750f6,"lime.audio.openal.ALC.makeContextCurrent","lime/audio/openal/ALC.hx",160,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE( 160)		return ( (Bool)(::lime::audio::openal::ALC_obj::cffi_lime_alc_make_context_current(hx::DynamicPtr(context))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,makeContextCurrent,return )

 ::Dynamic ALC_obj::openDevice(::String deviceName){
            	HX_STACK_FRAME("lime.audio.openal.ALC","openDevice",0xc6d29e5e,"lime.audio.openal.ALC.openDevice","lime/audio/openal/ALC.hx",168,0x52b9922d)
            	HX_STACK_ARG(deviceName,"deviceName")
HXLINE( 171)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_open_device(deviceName)) );
HXDLIN( 171)		HX_VARI(  ::Dynamic,handle) = Dynamic(hx::DynamicPtr(inVal));
HXLINE( 173)		Bool _hx_tmp = hx::IsNotNull( handle );
HXDLIN( 173)		if (_hx_tmp) {
HXLINE( 175)			return handle;
            		}
HXLINE( 180)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,openDevice,return )

void ALC_obj::pauseDevice( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","pauseDevice",0x2456000e,"lime.audio.openal.ALC.pauseDevice","lime/audio/openal/ALC.hx",188,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE( 188)		::lime::audio::openal::ALC_obj::cffi_lime_alc_pause_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,pauseDevice,(void))

void ALC_obj::processContext( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","processContext",0x2021b49e,"lime.audio.openal.ALC.processContext","lime/audio/openal/ALC.hx",197,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE( 197)		::lime::audio::openal::ALC_obj::cffi_lime_alc_process_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,processContext,(void))

void ALC_obj::resumeDevice( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","resumeDevice",0x860de401,"lime.audio.openal.ALC.resumeDevice","lime/audio/openal/ALC.hx",206,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE( 206)		::lime::audio::openal::ALC_obj::cffi_lime_alc_resume_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,resumeDevice,(void))

void ALC_obj::suspendContext( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","suspendContext",0x53089331,"lime.audio.openal.ALC.suspendContext","lime/audio/openal/ALC.hx",215,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE( 215)		::lime::audio::openal::ALC_obj::cffi_lime_alc_suspend_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,suspendContext,(void))

Bool ALC_obj::lime_alc_close_device( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_close_device",0xf97bc250,"lime.audio.openal.ALC.lime_alc_close_device","lime/audio/openal/ALC.hx",222,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE( 222)		return ( (Bool)(::lime::audio::openal::ALC_obj::cffi_lime_alc_close_device(hx::DynamicPtr(device))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_close_device,return )

 ::Dynamic ALC_obj::lime_alc_create_context( ::Dynamic device, ::Dynamic attrlist){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_create_context",0x07aed1ff,"lime.audio.openal.ALC.lime_alc_create_context","lime/audio/openal/ALC.hx",223,0x52b9922d)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(attrlist,"attrlist")
HXLINE( 223)		 ::hx::Object * _hx_tmp = hx::DynamicPtr(device);
HXDLIN( 223)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_create_context(_hx_tmp,hx::DynamicPtr(attrlist))) );
HXDLIN( 223)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,lime_alc_create_context,return )

void ALC_obj::lime_alc_destroy_context( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_destroy_context",0x26e82777,"lime.audio.openal.ALC.lime_alc_destroy_context","lime/audio/openal/ALC.hx",224,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE( 224)		::lime::audio::openal::ALC_obj::cffi_lime_alc_destroy_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_destroy_context,(void))

 ::Dynamic ALC_obj::lime_alc_get_contexts_device( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_get_contexts_device",0xf58829b5,"lime.audio.openal.ALC.lime_alc_get_contexts_device","lime/audio/openal/ALC.hx",225,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE( 225)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_contexts_device(hx::DynamicPtr(context))) );
HXDLIN( 225)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_get_contexts_device,return )

 ::Dynamic ALC_obj::lime_alc_get_current_context(){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_get_current_context",0x57ca474d,"lime.audio.openal.ALC.lime_alc_get_current_context","lime/audio/openal/ALC.hx",226,0x52b9922d)
HXLINE( 226)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_current_context()) );
HXDLIN( 226)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ALC_obj,lime_alc_get_current_context,return )

Int ALC_obj::lime_alc_get_error( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_get_error",0xe417316c,"lime.audio.openal.ALC.lime_alc_get_error","lime/audio/openal/ALC.hx",227,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE( 227)		return ( (Int)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_error(hx::DynamicPtr(device))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_get_error,return )

 ::Dynamic ALC_obj::lime_alc_get_integerv( ::Dynamic device,Int param,Int size){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_get_integerv",0x715101d4,"lime.audio.openal.ALC.lime_alc_get_integerv","lime/audio/openal/ALC.hx",228,0x52b9922d)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(param,"param")
            	HX_STACK_ARG(size,"size")
HXLINE( 228)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_integerv(hx::DynamicPtr(device),param,size)) );
HXDLIN( 228)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ALC_obj,lime_alc_get_integerv,return )

 ::Dynamic ALC_obj::lime_alc_get_string( ::Dynamic device,Int param){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_get_string",0x6ffbb2ad,"lime.audio.openal.ALC.lime_alc_get_string","lime/audio/openal/ALC.hx",229,0x52b9922d)
            	HX_STACK_ARG(device,"device")
            	HX_STACK_ARG(param,"param")
HXLINE( 229)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_get_string(hx::DynamicPtr(device),param)) );
HXDLIN( 229)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ALC_obj,lime_alc_get_string,return )

Bool ALC_obj::lime_alc_make_context_current( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_make_context_current",0xb9e0daeb,"lime.audio.openal.ALC.lime_alc_make_context_current","lime/audio/openal/ALC.hx",230,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE( 230)		return ( (Bool)(::lime::audio::openal::ALC_obj::cffi_lime_alc_make_context_current(hx::DynamicPtr(context))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_make_context_current,return )

 ::Dynamic ALC_obj::lime_alc_open_device(::String devicename){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_open_device",0xbb320e38,"lime.audio.openal.ALC.lime_alc_open_device","lime/audio/openal/ALC.hx",231,0x52b9922d)
            	HX_STACK_ARG(devicename,"devicename")
HXLINE( 231)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::openal::ALC_obj::cffi_lime_alc_open_device(devicename)) );
HXDLIN( 231)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_open_device,return )

void ALC_obj::lime_alc_pause_device( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_pause_device",0x486486d2,"lime.audio.openal.ALC.lime_alc_pause_device","lime/audio/openal/ALC.hx",232,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE( 232)		::lime::audio::openal::ALC_obj::cffi_lime_alc_pause_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_pause_device,(void))

void ALC_obj::lime_alc_process_context( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_process_context",0x14fe99ec,"lime.audio.openal.ALC.lime_alc_process_context","lime/audio/openal/ALC.hx",233,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE( 233)		::lime::audio::openal::ALC_obj::cffi_lime_alc_process_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_process_context,(void))

void ALC_obj::lime_alc_resume_device( ::Dynamic device){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_resume_device",0x1827f7f5,"lime.audio.openal.ALC.lime_alc_resume_device","lime/audio/openal/ALC.hx",234,0x52b9922d)
            	HX_STACK_ARG(device,"device")
HXLINE( 234)		::lime::audio::openal::ALC_obj::cffi_lime_alc_resume_device(hx::DynamicPtr(device));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_resume_device,(void))

void ALC_obj::lime_alc_suspend_context( ::Dynamic context){
            	HX_STACK_FRAME("lime.audio.openal.ALC","lime_alc_suspend_context",0x6c1a7bf9,"lime.audio.openal.ALC.lime_alc_suspend_context","lime/audio/openal/ALC.hx",235,0x52b9922d)
            	HX_STACK_ARG(context,"context")
HXLINE( 235)		::lime::audio::openal::ALC_obj::cffi_lime_alc_suspend_context(hx::DynamicPtr(context));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ALC_obj,lime_alc_suspend_context,(void))

::cpp::Function<  Bool( ::hx::Object *) > ALC_obj::cffi_lime_alc_close_device;

::cpp::Function<   ::hx::Object *( ::hx::Object *, ::hx::Object *) > ALC_obj::cffi_lime_alc_create_context;

::cpp::Function<  void( ::hx::Object *) > ALC_obj::cffi_lime_alc_destroy_context;

::cpp::Function<   ::hx::Object *( ::hx::Object *) > ALC_obj::cffi_lime_alc_get_contexts_device;

::cpp::Function<   ::hx::Object *() > ALC_obj::cffi_lime_alc_get_current_context;

::cpp::Function<  Int( ::hx::Object *) > ALC_obj::cffi_lime_alc_get_error;

::cpp::Function<   ::hx::Object *( ::hx::Object *,Int,Int) > ALC_obj::cffi_lime_alc_get_integerv;

::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > ALC_obj::cffi_lime_alc_get_string;

::cpp::Function<  Bool( ::hx::Object *) > ALC_obj::cffi_lime_alc_make_context_current;

::cpp::Function<   ::hx::Object *(::String) > ALC_obj::cffi_lime_alc_open_device;

::cpp::Function<  void( ::hx::Object *) > ALC_obj::cffi_lime_alc_pause_device;

::cpp::Function<  void( ::hx::Object *) > ALC_obj::cffi_lime_alc_process_context;

::cpp::Function<  void( ::hx::Object *) > ALC_obj::cffi_lime_alc_resume_device;

::cpp::Function<  void( ::hx::Object *) > ALC_obj::cffi_lime_alc_suspend_context;


ALC_obj::ALC_obj()
{
}

bool ALC_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"getError") ) { outValue = getError_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getString") ) { outValue = getString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"openDevice") ) { outValue = openDevice_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"closeDevice") ) { outValue = closeDevice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getIntegerv") ) { outValue = getIntegerv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"pauseDevice") ) { outValue = pauseDevice_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"resumeDevice") ) { outValue = resumeDevice_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createContext") ) { outValue = createContext_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"destroyContext") ) { outValue = destroyContext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getErrorString") ) { outValue = getErrorString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"processContext") ) { outValue = processContext_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"suspendContext") ) { outValue = suspendContext_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getContextsDevice") ) { outValue = getContextsDevice_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getCurrentContext") ) { outValue = getCurrentContext_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"makeContextCurrent") ) { outValue = makeContextCurrent_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_alc_get_error") ) { outValue = lime_alc_get_error_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"lime_alc_get_string") ) { outValue = lime_alc_get_string_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"lime_alc_open_device") ) { outValue = lime_alc_open_device_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"lime_alc_close_device") ) { outValue = lime_alc_close_device_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_alc_get_integerv") ) { outValue = lime_alc_get_integerv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_alc_pause_device") ) { outValue = lime_alc_pause_device_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"lime_alc_resume_device") ) { outValue = lime_alc_resume_device_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"lime_alc_create_context") ) { outValue = lime_alc_create_context_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_error") ) { outValue = cffi_lime_alc_get_error; return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"lime_alc_destroy_context") ) { outValue = lime_alc_destroy_context_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_alc_process_context") ) { outValue = lime_alc_process_context_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_alc_suspend_context") ) { outValue = lime_alc_suspend_context_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_string") ) { outValue = cffi_lime_alc_get_string; return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_open_device") ) { outValue = cffi_lime_alc_open_device; return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_close_device") ) { outValue = cffi_lime_alc_close_device; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_integerv") ) { outValue = cffi_lime_alc_get_integerv; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_pause_device") ) { outValue = cffi_lime_alc_pause_device; return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_resume_device") ) { outValue = cffi_lime_alc_resume_device; return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lime_alc_get_contexts_device") ) { outValue = lime_alc_get_contexts_device_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lime_alc_get_current_context") ) { outValue = lime_alc_get_current_context_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_create_context") ) { outValue = cffi_lime_alc_create_context; return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"lime_alc_make_context_current") ) { outValue = lime_alc_make_context_current_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_destroy_context") ) { outValue = cffi_lime_alc_destroy_context; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_process_context") ) { outValue = cffi_lime_alc_process_context; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_suspend_context") ) { outValue = cffi_lime_alc_suspend_context; return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_contexts_device") ) { outValue = cffi_lime_alc_get_contexts_device; return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_current_context") ) { outValue = cffi_lime_alc_get_current_context; return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_make_context_current") ) { outValue = cffi_lime_alc_make_context_current; return true; }
	}
	return false;
}

bool ALC_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 23:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_error") ) { cffi_lime_alc_get_error=ioValue.Cast< ::cpp::Function<  Int( ::hx::Object *) > >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_string") ) { cffi_lime_alc_get_string=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_open_device") ) { cffi_lime_alc_open_device=ioValue.Cast< ::cpp::Function<   ::hx::Object *(::String) > >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_close_device") ) { cffi_lime_alc_close_device=ioValue.Cast< ::cpp::Function<  Bool( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_integerv") ) { cffi_lime_alc_get_integerv=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int,Int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_pause_device") ) { cffi_lime_alc_pause_device=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *) > >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_resume_device") ) { cffi_lime_alc_resume_device=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *) > >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_create_context") ) { cffi_lime_alc_create_context=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_destroy_context") ) { cffi_lime_alc_destroy_context=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_process_context") ) { cffi_lime_alc_process_context=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_suspend_context") ) { cffi_lime_alc_suspend_context=ioValue.Cast< ::cpp::Function<  void( ::hx::Object *) > >(); return true; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_contexts_device") ) { cffi_lime_alc_get_contexts_device=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_get_current_context") ) { cffi_lime_alc_get_current_context=ioValue.Cast< ::cpp::Function<   ::hx::Object *() > >(); return true; }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"cffi_lime_alc_make_context_current") ) { cffi_lime_alc_make_context_current=ioValue.Cast< ::cpp::Function<  Bool( ::hx::Object *) > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ALC_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ALC_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &ALC_obj::FALSE,HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79")},
	{hx::fsInt,(void *) &ALC_obj::TRUE,HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37")},
	{hx::fsInt,(void *) &ALC_obj::FREQUENCY,HX_HCSTRING("FREQUENCY","\x7c","\xf2","\x42","\xb7")},
	{hx::fsInt,(void *) &ALC_obj::REFRESH,HX_HCSTRING("REFRESH","\xbb","\xad","\xf4","\x6c")},
	{hx::fsInt,(void *) &ALC_obj::SYNC,HX_HCSTRING("SYNC","\x5b","\x82","\x20","\x37")},
	{hx::fsInt,(void *) &ALC_obj::MONO_SOURCES,HX_HCSTRING("MONO_SOURCES","\xbc","\x3b","\x3c","\xad")},
	{hx::fsInt,(void *) &ALC_obj::STEREO_SOURCES,HX_HCSTRING("STEREO_SOURCES","\xd1","\x0f","\x99","\x60")},
	{hx::fsInt,(void *) &ALC_obj::NO_ERROR,HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_DEVICE,HX_HCSTRING("INVALID_DEVICE","\x3e","\x84","\xa5","\x93")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_CONTEXT,HX_HCSTRING("INVALID_CONTEXT","\x27","\xa1","\x3c","\xdf")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_ENUM,HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13")},
	{hx::fsInt,(void *) &ALC_obj::INVALID_VALUE,HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0")},
	{hx::fsInt,(void *) &ALC_obj::OUT_OF_MEMORY,HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1")},
	{hx::fsInt,(void *) &ALC_obj::ATTRIBUTES_SIZE,HX_HCSTRING("ATTRIBUTES_SIZE","\x69","\x7c","\x9f","\x17")},
	{hx::fsInt,(void *) &ALC_obj::ALL_ATTRIBUTES,HX_HCSTRING("ALL_ATTRIBUTES","\x95","\xe2","\x00","\x04")},
	{hx::fsInt,(void *) &ALC_obj::DEFAULT_DEVICE_SPECIFIER,HX_HCSTRING("DEFAULT_DEVICE_SPECIFIER","\x93","\xa5","\xbc","\xd9")},
	{hx::fsInt,(void *) &ALC_obj::DEVICE_SPECIFIER,HX_HCSTRING("DEVICE_SPECIFIER","\xf5","\xa8","\x61","\x21")},
	{hx::fsInt,(void *) &ALC_obj::EXTENSIONS,HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b")},
	{hx::fsInt,(void *) &ALC_obj::ENUMERATE_ALL_EXT,HX_HCSTRING("ENUMERATE_ALL_EXT","\x88","\xff","\x7d","\xb7")},
	{hx::fsInt,(void *) &ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,HX_HCSTRING("DEFAULT_ALL_DEVICES_SPECIFIER","\xc0","\xd6","\x77","\xd2")},
	{hx::fsInt,(void *) &ALC_obj::ALL_DEVICES_SPECIFIER,HX_HCSTRING("ALL_DEVICES_SPECIFIER","\x1e","\x50","\xc1","\xf5")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_close_device,HX_HCSTRING("cffi_lime_alc_close_device","\x55","\x3c","\xec","\x8c")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_create_context,HX_HCSTRING("cffi_lime_alc_create_context","\x44","\x97","\xb5","\xb3")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_destroy_context,HX_HCSTRING("cffi_lime_alc_destroy_context","\x92","\xfe","\xcd","\x00")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_get_contexts_device,HX_HCSTRING("cffi_lime_alc_get_contexts_device","\x50","\x2a","\x77","\xd8")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_get_current_context,HX_HCSTRING("cffi_lime_alc_get_current_context","\xe8","\x47","\xb9","\x3a")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_get_error,HX_HCSTRING("cffi_lime_alc_get_error","\x47","\x72","\xb0","\xd4")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_get_integerv,HX_HCSTRING("cffi_lime_alc_get_integerv","\xd9","\x7b","\xc1","\x04")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_get_string,HX_HCSTRING("cffi_lime_alc_get_string","\x72","\x31","\x7b","\x05")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_make_context_current,HX_HCSTRING("cffi_lime_alc_make_context_current","\xf0","\x61","\x12","\x68")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_open_device,HX_HCSTRING("cffi_lime_alc_open_device","\xd3","\x7b","\x41","\xf5")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_pause_device,HX_HCSTRING("cffi_lime_alc_pause_device","\xd7","\x00","\xd5","\xdb")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_process_context,HX_HCSTRING("cffi_lime_alc_process_context","\x07","\x71","\xe4","\xee")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_resume_device,HX_HCSTRING("cffi_lime_alc_resume_device","\x50","\x42","\x22","\x87")},
	{hx::fsObject /*Dynamic*/ ,(void *) &ALC_obj::cffi_lime_alc_suspend_context,HX_HCSTRING("cffi_lime_alc_suspend_context","\x14","\x53","\x00","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ALC_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ALC_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ALC_obj::FALSE,"FALSE");
	HX_MARK_MEMBER_NAME(ALC_obj::TRUE,"TRUE");
	HX_MARK_MEMBER_NAME(ALC_obj::FREQUENCY,"FREQUENCY");
	HX_MARK_MEMBER_NAME(ALC_obj::REFRESH,"REFRESH");
	HX_MARK_MEMBER_NAME(ALC_obj::SYNC,"SYNC");
	HX_MARK_MEMBER_NAME(ALC_obj::MONO_SOURCES,"MONO_SOURCES");
	HX_MARK_MEMBER_NAME(ALC_obj::STEREO_SOURCES,"STEREO_SOURCES");
	HX_MARK_MEMBER_NAME(ALC_obj::NO_ERROR,"NO_ERROR");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_MARK_MEMBER_NAME(ALC_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_MARK_MEMBER_NAME(ALC_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_MARK_MEMBER_NAME(ALC_obj::ATTRIBUTES_SIZE,"ATTRIBUTES_SIZE");
	HX_MARK_MEMBER_NAME(ALC_obj::ALL_ATTRIBUTES,"ALL_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(ALC_obj::DEFAULT_DEVICE_SPECIFIER,"DEFAULT_DEVICE_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::DEVICE_SPECIFIER,"DEVICE_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::EXTENSIONS,"EXTENSIONS");
	HX_MARK_MEMBER_NAME(ALC_obj::ENUMERATE_ALL_EXT,"ENUMERATE_ALL_EXT");
	HX_MARK_MEMBER_NAME(ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,"DEFAULT_ALL_DEVICES_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::ALL_DEVICES_SPECIFIER,"ALL_DEVICES_SPECIFIER");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_close_device,"cffi_lime_alc_close_device");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_create_context,"cffi_lime_alc_create_context");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_destroy_context,"cffi_lime_alc_destroy_context");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_contexts_device,"cffi_lime_alc_get_contexts_device");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_current_context,"cffi_lime_alc_get_current_context");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_error,"cffi_lime_alc_get_error");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_integerv,"cffi_lime_alc_get_integerv");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_string,"cffi_lime_alc_get_string");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_make_context_current,"cffi_lime_alc_make_context_current");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_open_device,"cffi_lime_alc_open_device");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_pause_device,"cffi_lime_alc_pause_device");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_process_context,"cffi_lime_alc_process_context");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_resume_device,"cffi_lime_alc_resume_device");
	HX_MARK_MEMBER_NAME(ALC_obj::cffi_lime_alc_suspend_context,"cffi_lime_alc_suspend_context");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ALC_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ALC_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ALC_obj::FALSE,"FALSE");
	HX_VISIT_MEMBER_NAME(ALC_obj::TRUE,"TRUE");
	HX_VISIT_MEMBER_NAME(ALC_obj::FREQUENCY,"FREQUENCY");
	HX_VISIT_MEMBER_NAME(ALC_obj::REFRESH,"REFRESH");
	HX_VISIT_MEMBER_NAME(ALC_obj::SYNC,"SYNC");
	HX_VISIT_MEMBER_NAME(ALC_obj::MONO_SOURCES,"MONO_SOURCES");
	HX_VISIT_MEMBER_NAME(ALC_obj::STEREO_SOURCES,"STEREO_SOURCES");
	HX_VISIT_MEMBER_NAME(ALC_obj::NO_ERROR,"NO_ERROR");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_DEVICE,"INVALID_DEVICE");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_CONTEXT,"INVALID_CONTEXT");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_ENUM,"INVALID_ENUM");
	HX_VISIT_MEMBER_NAME(ALC_obj::INVALID_VALUE,"INVALID_VALUE");
	HX_VISIT_MEMBER_NAME(ALC_obj::OUT_OF_MEMORY,"OUT_OF_MEMORY");
	HX_VISIT_MEMBER_NAME(ALC_obj::ATTRIBUTES_SIZE,"ATTRIBUTES_SIZE");
	HX_VISIT_MEMBER_NAME(ALC_obj::ALL_ATTRIBUTES,"ALL_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEFAULT_DEVICE_SPECIFIER,"DEFAULT_DEVICE_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEVICE_SPECIFIER,"DEVICE_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::EXTENSIONS,"EXTENSIONS");
	HX_VISIT_MEMBER_NAME(ALC_obj::ENUMERATE_ALL_EXT,"ENUMERATE_ALL_EXT");
	HX_VISIT_MEMBER_NAME(ALC_obj::DEFAULT_ALL_DEVICES_SPECIFIER,"DEFAULT_ALL_DEVICES_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::ALL_DEVICES_SPECIFIER,"ALL_DEVICES_SPECIFIER");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_close_device,"cffi_lime_alc_close_device");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_create_context,"cffi_lime_alc_create_context");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_destroy_context,"cffi_lime_alc_destroy_context");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_contexts_device,"cffi_lime_alc_get_contexts_device");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_current_context,"cffi_lime_alc_get_current_context");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_error,"cffi_lime_alc_get_error");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_integerv,"cffi_lime_alc_get_integerv");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_get_string,"cffi_lime_alc_get_string");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_make_context_current,"cffi_lime_alc_make_context_current");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_open_device,"cffi_lime_alc_open_device");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_pause_device,"cffi_lime_alc_pause_device");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_process_context,"cffi_lime_alc_process_context");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_resume_device,"cffi_lime_alc_resume_device");
	HX_VISIT_MEMBER_NAME(ALC_obj::cffi_lime_alc_suspend_context,"cffi_lime_alc_suspend_context");
};

#endif

hx::Class ALC_obj::__mClass;

static ::String ALC_obj_sStaticFields[] = {
	HX_HCSTRING("FALSE","\x83","\x6d","\x3d","\x79"),
	HX_HCSTRING("TRUE","\x4e","\x6f","\xc4","\x37"),
	HX_HCSTRING("FREQUENCY","\x7c","\xf2","\x42","\xb7"),
	HX_HCSTRING("REFRESH","\xbb","\xad","\xf4","\x6c"),
	HX_HCSTRING("SYNC","\x5b","\x82","\x20","\x37"),
	HX_HCSTRING("MONO_SOURCES","\xbc","\x3b","\x3c","\xad"),
	HX_HCSTRING("STEREO_SOURCES","\xd1","\x0f","\x99","\x60"),
	HX_HCSTRING("NO_ERROR","\xea","\xb5","\x7d","\x2f"),
	HX_HCSTRING("INVALID_DEVICE","\x3e","\x84","\xa5","\x93"),
	HX_HCSTRING("INVALID_CONTEXT","\x27","\xa1","\x3c","\xdf"),
	HX_HCSTRING("INVALID_ENUM","\xa9","\x74","\x70","\x13"),
	HX_HCSTRING("INVALID_VALUE","\xa9","\xe8","\x26","\xb0"),
	HX_HCSTRING("OUT_OF_MEMORY","\x18","\xf2","\x97","\xe1"),
	HX_HCSTRING("ATTRIBUTES_SIZE","\x69","\x7c","\x9f","\x17"),
	HX_HCSTRING("ALL_ATTRIBUTES","\x95","\xe2","\x00","\x04"),
	HX_HCSTRING("DEFAULT_DEVICE_SPECIFIER","\x93","\xa5","\xbc","\xd9"),
	HX_HCSTRING("DEVICE_SPECIFIER","\xf5","\xa8","\x61","\x21"),
	HX_HCSTRING("EXTENSIONS","\x14","\xf0","\x79","\x7b"),
	HX_HCSTRING("ENUMERATE_ALL_EXT","\x88","\xff","\x7d","\xb7"),
	HX_HCSTRING("DEFAULT_ALL_DEVICES_SPECIFIER","\xc0","\xd6","\x77","\xd2"),
	HX_HCSTRING("ALL_DEVICES_SPECIFIER","\x1e","\x50","\xc1","\xf5"),
	HX_HCSTRING("closeDevice","\x6e","\x02","\xc8","\x2b"),
	HX_HCSTRING("createContext","\x53","\x6e","\xba","\x01"),
	HX_HCSTRING("destroyContext","\x15","\x84","\xe3","\x85"),
	HX_HCSTRING("getContextsDevice","\x90","\xee","\x91","\x9c"),
	HX_HCSTRING("getCurrentContext","\xec","\xb9","\x7f","\x99"),
	HX_HCSTRING("getError","\x52","\xdb","\x00","\xd3"),
	HX_HCSTRING("getErrorString","\xc3","\xc1","\x3b","\x87"),
	HX_HCSTRING("getIntegerv","\xae","\x0b","\x1e","\x47"),
	HX_HCSTRING("getString","\x07","\xb2","\x86","\x8d"),
	HX_HCSTRING("makeContextCurrent","\x98","\x6c","\xce","\x94"),
	HX_HCSTRING("openDevice","\x00","\x48","\x14","\xbf"),
	HX_HCSTRING("pauseDevice","\x2c","\xc4","\x88","\x65"),
	HX_HCSTRING("processContext","\x40","\xd7","\xd5","\xcb"),
	HX_HCSTRING("resumeDevice","\x23","\xba","\x46","\x51"),
	HX_HCSTRING("suspendContext","\xd3","\xb5","\xbc","\xfe"),
	HX_HCSTRING("lime_alc_close_device","\xee","\x17","\x5c","\xd1"),
	HX_HCSTRING("lime_alc_create_context","\x1d","\x4b","\x86","\xd8"),
	HX_HCSTRING("lime_alc_destroy_context","\x99","\xa8","\x9a","\x12"),
	HX_HCSTRING("lime_alc_get_contexts_device","\xd7","\xe3","\xae","\xe6"),
	HX_HCSTRING("lime_alc_get_current_context","\x6f","\x01","\xf1","\x48"),
	HX_HCSTRING("lime_alc_get_error","\x0e","\x4d","\x6e","\x60"),
	HX_HCSTRING("lime_alc_get_integerv","\x72","\x57","\x31","\x49"),
	HX_HCSTRING("lime_alc_get_string","\xcb","\xc4","\xdc","\xbf"),
	HX_HCSTRING("lime_alc_make_context_current","\x89","\xfe","\x9c","\xca"),
	HX_HCSTRING("lime_alc_open_device","\x5a","\xd6","\x40","\x50"),
	HX_HCSTRING("lime_alc_pause_device","\x70","\xdc","\x44","\x20"),
	HX_HCSTRING("lime_alc_process_context","\x0e","\x1b","\xb1","\x00"),
	HX_HCSTRING("lime_alc_resume_device","\x97","\x8c","\x92","\x24"),
	HX_HCSTRING("lime_alc_suspend_context","\x1b","\xfd","\xcc","\x57"),
	HX_HCSTRING("cffi_lime_alc_close_device","\x55","\x3c","\xec","\x8c"),
	HX_HCSTRING("cffi_lime_alc_create_context","\x44","\x97","\xb5","\xb3"),
	HX_HCSTRING("cffi_lime_alc_destroy_context","\x92","\xfe","\xcd","\x00"),
	HX_HCSTRING("cffi_lime_alc_get_contexts_device","\x50","\x2a","\x77","\xd8"),
	HX_HCSTRING("cffi_lime_alc_get_current_context","\xe8","\x47","\xb9","\x3a"),
	HX_HCSTRING("cffi_lime_alc_get_error","\x47","\x72","\xb0","\xd4"),
	HX_HCSTRING("cffi_lime_alc_get_integerv","\xd9","\x7b","\xc1","\x04"),
	HX_HCSTRING("cffi_lime_alc_get_string","\x72","\x31","\x7b","\x05"),
	HX_HCSTRING("cffi_lime_alc_make_context_current","\xf0","\x61","\x12","\x68"),
	HX_HCSTRING("cffi_lime_alc_open_device","\xd3","\x7b","\x41","\xf5"),
	HX_HCSTRING("cffi_lime_alc_pause_device","\xd7","\x00","\xd5","\xdb"),
	HX_HCSTRING("cffi_lime_alc_process_context","\x07","\x71","\xe4","\xee"),
	HX_HCSTRING("cffi_lime_alc_resume_device","\x50","\x42","\x22","\x87"),
	HX_HCSTRING("cffi_lime_alc_suspend_context","\x14","\x53","\x00","\x46"),
	::String(null())
};

void ALC_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.audio.openal.ALC","\x50","\xd1","\xca","\xf4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ALC_obj::__GetStatic;
	__mClass->mSetStaticField = &ALC_obj::__SetStatic;
	__mClass->mMarkFunc = ALC_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ALC_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ALC_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ALC_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ALC_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ALC_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ALC_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",14,0x52b9922d)
HXLINE(  14)		FALSE = (int)0;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",15,0x52b9922d)
HXLINE(  15)		TRUE = (int)1;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",16,0x52b9922d)
HXLINE(  16)		FREQUENCY = (int)4103;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",17,0x52b9922d)
HXLINE(  17)		REFRESH = (int)4104;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",18,0x52b9922d)
HXLINE(  18)		SYNC = (int)4105;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",19,0x52b9922d)
HXLINE(  19)		MONO_SOURCES = (int)4112;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",20,0x52b9922d)
HXLINE(  20)		STEREO_SOURCES = (int)4113;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",21,0x52b9922d)
HXLINE(  21)		NO_ERROR = (int)0;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",22,0x52b9922d)
HXLINE(  22)		INVALID_DEVICE = (int)40961;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",23,0x52b9922d)
HXLINE(  23)		INVALID_CONTEXT = (int)40962;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",24,0x52b9922d)
HXLINE(  24)		INVALID_ENUM = (int)40963;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",25,0x52b9922d)
HXLINE(  25)		INVALID_VALUE = (int)40964;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",26,0x52b9922d)
HXLINE(  26)		OUT_OF_MEMORY = (int)40965;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",27,0x52b9922d)
HXLINE(  27)		ATTRIBUTES_SIZE = (int)4098;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",28,0x52b9922d)
HXLINE(  28)		ALL_ATTRIBUTES = (int)4099;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",29,0x52b9922d)
HXLINE(  29)		DEFAULT_DEVICE_SPECIFIER = (int)4100;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",30,0x52b9922d)
HXLINE(  30)		DEVICE_SPECIFIER = (int)4101;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",31,0x52b9922d)
HXLINE(  31)		EXTENSIONS = (int)4102;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",32,0x52b9922d)
HXLINE(  32)		ENUMERATE_ALL_EXT = (int)1;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",33,0x52b9922d)
HXLINE(  33)		DEFAULT_ALL_DEVICES_SPECIFIER = (int)4114;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",34,0x52b9922d)
HXLINE(  34)		ALL_DEVICES_SPECIFIER = (int)4115;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",222,0x52b9922d)
HXLINE( 222)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_close_device",ee,17,5c,d1),HX_("ob",13,61,00,00),false);
HXDLIN( 222)		cffi_lime_alc_close_device = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",223,0x52b9922d)
HXLINE( 223)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_create_context",1d,4b,86,d8),HX_("ooo",4f,9b,54,00),false);
HXDLIN( 223)		cffi_lime_alc_create_context = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",224,0x52b9922d)
HXLINE( 224)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_destroy_context",99,a8,9a,12),HX_("ov",27,61,00,00),false);
HXDLIN( 224)		cffi_lime_alc_destroy_context = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",225,0x52b9922d)
HXLINE( 225)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_get_contexts_device",d7,e3,ae,e6),HX_("oo",20,61,00,00),false);
HXDLIN( 225)		cffi_lime_alc_get_contexts_device = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",226,0x52b9922d)
HXLINE( 226)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_get_current_context",6f,01,f1,48),HX_("o",6f,00,00,00),false);
HXDLIN( 226)		cffi_lime_alc_get_current_context = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",227,0x52b9922d)
HXLINE( 227)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_get_error",0e,4d,6e,60),HX_("oi",1a,61,00,00),false);
HXDLIN( 227)		cffi_lime_alc_get_error = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",228,0x52b9922d)
HXLINE( 228)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_get_integerv",72,57,31,49),HX_("oiio",80,b7,ae,49),false);
HXDLIN( 228)		cffi_lime_alc_get_integerv = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",229,0x52b9922d)
HXLINE( 229)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_get_string",cb,c4,dc,bf),HX_("oio",15,96,54,00),false);
HXDLIN( 229)		cffi_lime_alc_get_string = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",230,0x52b9922d)
HXLINE( 230)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_make_context_current",89,fe,9c,ca),HX_("ob",13,61,00,00),false);
HXDLIN( 230)		cffi_lime_alc_make_context_current = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",231,0x52b9922d)
HXLINE( 231)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_open_device",5a,d6,40,50),HX_("so",9c,64,00,00),false);
HXDLIN( 231)		cffi_lime_alc_open_device = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",232,0x52b9922d)
HXLINE( 232)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_pause_device",70,dc,44,20),HX_("ov",27,61,00,00),false);
HXDLIN( 232)		cffi_lime_alc_pause_device = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",233,0x52b9922d)
HXLINE( 233)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_process_context",0e,1b,b1,00),HX_("ov",27,61,00,00),false);
HXDLIN( 233)		cffi_lime_alc_process_context = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",234,0x52b9922d)
HXLINE( 234)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_resume_device",97,8c,92,24),HX_("ov",27,61,00,00),false);
HXDLIN( 234)		cffi_lime_alc_resume_device = inValue;
            	}
{
            	HX_STACK_FRAME("lime.audio.openal.ALC","boot",0xbf76a010,"lime.audio.openal.ALC.boot","lime/audio/openal/ALC.hx",235,0x52b9922d)
HXLINE( 235)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_alc_suspend_context",1b,fd,cc,57),HX_("ov",27,61,00,00),false);
HXDLIN( 235)		cffi_lime_alc_suspend_context = inValue;
            	}
}

} // end namespace lime
} // end namespace audio
} // end namespace openal
