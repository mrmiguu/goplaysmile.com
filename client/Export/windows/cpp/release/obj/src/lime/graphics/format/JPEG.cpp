// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeCFFI
#include <lime/_backend/native/NativeCFFI.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_format_JPEG
#include <lime/graphics/format/JPEG.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

namespace lime{
namespace graphics{
namespace format{

void JPEG_obj::__construct() { }

Dynamic JPEG_obj::__CreateEmpty() { return new JPEG_obj; }

hx::ObjectPtr< JPEG_obj > JPEG_obj::__new()
{
	hx::ObjectPtr< JPEG_obj > _hx_result = new JPEG_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic JPEG_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< JPEG_obj > _hx_result = new JPEG_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::lime::graphics::Image JPEG_obj::decodeBytes( ::haxe::io::Bytes bytes,hx::Null< Bool >  __o_decodeData){
Bool decodeData = __o_decodeData.Default(true);
            	HX_STACK_FRAME("lime.graphics.format.JPEG","decodeBytes",0x9c51a384,"lime.graphics.format.JPEG.decodeBytes","lime/graphics/format/JPEG.hx",28,0x0d45bec8)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(decodeData,"decodeData")
HXLINE(  33)		HX_VARI(  ::haxe::io::Bytes,buffer) = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(  33)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  33)		Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  33)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN(  33)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(  33)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  33)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN(  33)			{
HXLINE(  33)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  33)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  33)				if ((bufferByteLength < (int)0)) {
HXLINE(  33)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  33)			_this->buffer = buffer;
HXDLIN(  33)			_this->byteOffset = (int)0;
HXDLIN(  33)			_this->byteLength = bufferByteLength;
HXDLIN(  33)			Float _hx_tmp1 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN(  33)			_this->length = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN(  33)			this1 = _this;
            		}
            		else {
HXLINE(  33)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(  33)		 ::Dynamic buffer1 =  ::lime::graphics::ImageBuffer_obj::__new(this1,null(),null(),null(),null());
HXDLIN(  33)		 ::hx::Object * _hx_tmp2 = hx::DynamicPtr(bytes);
HXDLIN(  33)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_jpeg_decode_bytes(_hx_tmp2,decodeData,hx::DynamicPtr(buffer1))) );
HXDLIN(  33)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(JPEG_obj,decodeBytes,return )

 ::lime::graphics::Image JPEG_obj::decodeFile(::String path,hx::Null< Bool >  __o_decodeData){
Bool decodeData = __o_decodeData.Default(true);
            	HX_STACK_FRAME("lime.graphics.format.JPEG","decodeFile",0xcb0bd983,"lime.graphics.format.JPEG.decodeFile","lime/graphics/format/JPEG.hx",53,0x0d45bec8)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(decodeData,"decodeData")
HXLINE(  58)		HX_VARI(  ::haxe::io::Bytes,buffer) = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(  58)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  58)		Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  58)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN(  58)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(  58)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  58)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN(  58)			{
HXLINE(  58)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  58)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  58)				if ((bufferByteLength < (int)0)) {
HXLINE(  58)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  58)			_this->buffer = buffer;
HXDLIN(  58)			_this->byteOffset = (int)0;
HXDLIN(  58)			_this->byteLength = bufferByteLength;
HXDLIN(  58)			Float _hx_tmp1 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN(  58)			_this->length = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN(  58)			this1 = _this;
            		}
            		else {
HXLINE(  58)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            		}
HXDLIN(  58)		 ::Dynamic buffer1 =  ::lime::graphics::ImageBuffer_obj::__new(this1,null(),null(),null(),null());
HXDLIN(  58)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_jpeg_decode_file(path,decodeData,hx::DynamicPtr(buffer1))) );
HXDLIN(  58)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(JPEG_obj,decodeFile,return )

 ::haxe::io::Bytes JPEG_obj::encode( ::lime::graphics::Image image,Int quality){
            	HX_STACK_FRAME("lime.graphics.format.JPEG","encode",0xce6c344f,"lime.graphics.format.JPEG.encode","lime/graphics/format/JPEG.hx",78,0x0d45bec8)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(quality,"quality")
HXLINE(  80)		Bool _hx_tmp;
HXDLIN(  80)		Bool _hx_tmp1 = !(image->get_premultiplied());
HXDLIN(  80)		if (_hx_tmp1) {
HXLINE(  80)			Int _hx_tmp2 = image->get_format();
HXDLIN(  80)			_hx_tmp = (_hx_tmp2 != (int)0);
            		}
            		else {
HXLINE(  80)			_hx_tmp = true;
            		}
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  84)			image = image->clone();
HXLINE(  85)			image->set_premultiplied(false);
HXLINE(  86)			image->set_format((int)0);
            		}
HXLINE(  95)		 ::Dynamic bytes = ::haxe::io::Bytes_obj::alloc((int)0);
HXDLIN(  95)		 ::hx::Object * _hx_tmp3 = hx::DynamicPtr(image->buffer);
HXDLIN(  95)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::_backend::native::NativeCFFI_obj::cffi_lime_image_encode(_hx_tmp3,(int)1,quality,hx::DynamicPtr(bytes))) );
HXDLIN(  95)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(JPEG_obj,encode,return )


JPEG_obj::JPEG_obj()
{
}

bool JPEG_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"encode") ) { outValue = encode_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"decodeFile") ) { outValue = decodeFile_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"decodeBytes") ) { outValue = decodeBytes_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *JPEG_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *JPEG_obj_sStaticStorageInfo = 0;
#endif

static void JPEG_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(JPEG_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void JPEG_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(JPEG_obj::__mClass,"__mClass");
};

#endif

hx::Class JPEG_obj::__mClass;

static ::String JPEG_obj_sStaticFields[] = {
	HX_HCSTRING("decodeBytes","\x5d","\x94","\xb1","\x85"),
	HX_HCSTRING("decodeFile","\xca","\x86","\x63","\xce"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	::String(null())
};

void JPEG_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.graphics.format.JPEG","\x15","\x91","\x5a","\xe7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &JPEG_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = JPEG_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(JPEG_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< JPEG_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = JPEG_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = JPEG_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = JPEG_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace graphics
} // end namespace format
