// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeHTTPRequest
#include <lime/_backend/native/NativeHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_String
#include <lime/app/Promise_String.h>
#endif
#ifndef INCLUDED_lime_app_Promise_haxe_io_Bytes
#include <lime/app/Promise_haxe_io_Bytes.h>
#endif
#ifndef INCLUDED_lime_app__Event_Dynamic_Void
#include <lime/app/_Event_Dynamic_Void.h>
#endif
#ifndef INCLUDED_lime_net_HTTPRequestHeader
#include <lime/net/HTTPRequestHeader.h>
#endif
#ifndef INCLUDED_lime_net__IHTTPRequest
#include <lime/net/_IHTTPRequest.h>
#endif
#ifndef INCLUDED_lime_net_curl_CURLEasy
#include <lime/net/curl/CURLEasy.h>
#endif
#ifndef INCLUDED_lime_system_BackgroundWorker
#include <lime/system/BackgroundWorker.h>
#endif
#ifndef INCLUDED_lime_utils_Bytes
#include <lime/utils/Bytes.h>
#endif

namespace lime{
namespace _backend{
namespace native{

void NativeHTTPRequest_obj::__construct(){
            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","new",0xaa6a078b,"lime._backend.native.NativeHTTPRequest.new","lime/_backend/native/NativeHTTPRequest.hx",27,0xedb6ece6)
            	HX_STACK_THIS(this)
HXLINE(  29)		this->curl = (int)0;
HXLINE(  30)		this->promise =  ::lime::app::Promise_haxe_io_Bytes_obj::__new();
            	}

Dynamic NativeHTTPRequest_obj::__CreateEmpty() { return new NativeHTTPRequest_obj; }

hx::ObjectPtr< NativeHTTPRequest_obj > NativeHTTPRequest_obj::__new()
{
	hx::ObjectPtr< NativeHTTPRequest_obj > _hx_result = new NativeHTTPRequest_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic NativeHTTPRequest_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NativeHTTPRequest_obj > _hx_result = new NativeHTTPRequest_obj();
	_hx_result->__construct();
	return _hx_result;
}

void NativeHTTPRequest_obj::cancel(){
            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","cancel",0x7706432f,"lime._backend.native.NativeHTTPRequest.cancel","lime/_backend/native/NativeHTTPRequest.hx",37,0xedb6ece6)
            	HX_STACK_THIS(this)
HXLINE(  37)		Bool _hx_tmp = (this->curl != (int)0);
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  39)			::lime::net::curl::CURLEasy_obj::reset(this->curl);
HXLINE(  40)			::lime::net::curl::CURLEasy_obj::perform(this->curl);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(NativeHTTPRequest_obj,cancel,(void))

void NativeHTTPRequest_obj::init(::Dynamic parent){
            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","init",0x6f154985,"lime._backend.native.NativeHTTPRequest.init","lime/_backend/native/NativeHTTPRequest.hx",49,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
HXLINE(  49)		this->parent = parent;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,init,(void))

 ::lime::app::Future NativeHTTPRequest_obj::loadData(::String uri,hx::Null< Bool >  __o_binary){
Bool binary = __o_binary.Default(true);
            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadData",0x8b5e1465,"lime._backend.native.NativeHTTPRequest.loadData","lime/_backend/native/NativeHTTPRequest.hx",54,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(uri,"uri")
            	HX_STACK_ARG(binary,"binary")
HXLINE(  56)		Bool _hx_tmp;
HXDLIN(  56)		Int _hx_tmp1 = uri.indexOf(HX_("http://",52,75,cd,5a),null());
HXDLIN(  56)		if ((_hx_tmp1 == (int)-1)) {
HXLINE(  56)			Int _hx_tmp2 = uri.indexOf(HX_("https://",cf,b4,ae,3e),null());
HXDLIN(  56)			_hx_tmp = (_hx_tmp2 == (int)-1);
            		}
            		else {
HXLINE(  56)			_hx_tmp = false;
            		}
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  58)			this->loadFile(uri);
            		}
            		else {
HXLINE(  62)			this->loadURL(uri,binary);
            		}
HXLINE(  66)		return this->promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeHTTPRequest_obj,loadData,return )

void NativeHTTPRequest_obj::loadFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,path1, ::lime::_backend::native::NativeHTTPRequest,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadFile",0x8cb68cb7,"lime._backend.native.NativeHTTPRequest.loadFile","lime/_backend/native/NativeHTTPRequest.hx",74,0xedb6ece6)
            			HX_STACK_ARG(_,"_")
HXLINE(  76)			HX_VARI( Int,index) = path1->__get((int)0).indexOf(HX_("?",3f,00,00,00),null());
HXLINE(  78)			if ((index > (int)-1)) {
HXLINE(  80)				::String _hx_tmp = path1->__get((int)0).substring((int)0,index);
HXDLIN(  80)				path1[(int)0] = _hx_tmp;
            			}
HXLINE(  84)			::String _hx_tmp1 = path1->__get((int)0);
HXDLIN(  84)			_gthis->bytes = ::lime::utils::Bytes_obj::readFile(_hx_tmp1);
HXLINE(  85)			_gthis->promise->complete(_gthis->bytes);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadFile",0x8cb68cb7,"lime._backend.native.NativeHTTPRequest.loadFile","lime/_backend/native/NativeHTTPRequest.hx",71,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
HXLINE(  71)		HX_VARI_NAME( ::Array< ::String >,path1,"path") = ::Array_obj< ::String >::__new(1)->init(0,path);
HXDLIN(  71)		HX_VARI(  ::lime::_backend::native::NativeHTTPRequest,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  73)		HX_VARI(  ::lime::_hx_system::BackgroundWorker,worker) =  ::lime::_hx_system::BackgroundWorker_obj::__new();
HXLINE(  74)		worker->doWork->add( ::Dynamic(new _hx_Closure_0(path1,_gthis)),null(),null());
HXLINE(  88)		worker->run(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,loadFile,(void))

 ::lime::app::Future NativeHTTPRequest_obj::loadText(::String uri){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::lime::app::Promise_String,promise) HXARGC(1)
            		void _hx_run( ::haxe::io::Bytes bytes){
            			HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadText",0x95f48ae8,"lime._backend.native.NativeHTTPRequest.loadText","lime/_backend/native/NativeHTTPRequest.hx",103,0xedb6ece6)
            			HX_STACK_ARG(bytes,"bytes")
HXLINE( 103)			Bool _hx_tmp = hx::IsNull( bytes );
HXDLIN( 103)			if (_hx_tmp) {
HXLINE( 105)				promise->complete(null());
            			}
            			else {
HXLINE( 109)				::String _hx_tmp1 = bytes->getString((int)0,bytes->length);
HXDLIN( 109)				promise->complete(_hx_tmp1);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadText",0x95f48ae8,"lime._backend.native.NativeHTTPRequest.loadText","lime/_backend/native/NativeHTTPRequest.hx",93,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(uri,"uri")
HXLINE(  95)		HX_VARI(  ::lime::app::Promise_String,promise) =  ::lime::app::Promise_String_obj::__new();
HXLINE(  96)		HX_VARI(  ::lime::app::Future,future) = this->loadData(uri,false);
HXLINE(  98)		future->onProgress(promise->progress_dyn());
HXLINE(  99)		future->onError(promise->error_dyn());
HXLINE( 101)		future->onComplete( ::Dynamic(new _hx_Closure_0(promise)));
HXLINE( 115)		return promise->future;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NativeHTTPRequest_obj,loadText,return )

void NativeHTTPRequest_obj::loadURL(::String uri,Bool binary){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_3, ::lime::_backend::native::NativeHTTPRequest,_gthis, ::lime::_hx_system::BackgroundWorker,worker) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadURL",0x421c3194,"lime._backend.native.NativeHTTPRequest.loadURL","lime/_backend/native/NativeHTTPRequest.hx",249,0xedb6ece6)
            			HX_STACK_ARG(_,"_")
HXLINE( 251)			HX_VARI( Int,result) = ::lime::net::curl::CURLEasy_obj::perform(_gthis->curl);
HXLINE( 253)			worker->sendComplete(result);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4, ::lime::_backend::native::NativeHTTPRequest,_gthis) HXARGC(1)
            		void _hx_run(Int result1){
            			HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadURL",0x421c3194,"lime._backend.native.NativeHTTPRequest.loadURL","lime/_backend/native/NativeHTTPRequest.hx",256,0xedb6ece6)
            			HX_STACK_ARG(result1,"result1")
HXLINE( 258)			_gthis->parent->__SetField(HX_("responseStatus",93,60,a4,78),::lime::net::curl::CURLEasy_obj::getinfo(_gthis->curl,(int)2097154),hx::paccDynamic);
HXLINE( 260)			if ((result1 == (int)0)) {
HXLINE( 262)				_gthis->promise->complete(_gthis->bytes);
            			}
            			else {
HXLINE( 266)				_gthis->promise->error(result1);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadURL",0x421c3194,"lime._backend.native.NativeHTTPRequest.loadURL","lime/_backend/native/NativeHTTPRequest.hx",120,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(uri,"uri")
            	HX_STACK_ARG(binary,"binary")
HXLINE( 120)		HX_VARI(  ::lime::_backend::native::NativeHTTPRequest,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 122)		this->bytes = ::haxe::io::Bytes_obj::alloc((int)0);
HXLINE( 124)		this->bytesLoaded = (int)0;
HXLINE( 125)		this->bytesTotal = (int)0;
HXLINE( 127)		Bool _hx_tmp = (this->curl == (int)0);
HXDLIN( 127)		if (_hx_tmp) {
HXLINE( 129)			this->curl = ::lime::net::curl::CURLEasy_obj::init();
            		}
            		else {
HXLINE( 133)			::lime::net::curl::CURLEasy_obj::reset(this->curl);
            		}
HXLINE( 137)		HX_VARI(  ::haxe::io::Bytes,data) = ( ( ::haxe::io::Bytes)(this->parent->__Field(HX_("data",2a,56,63,42),hx::paccDynamic)) );
HXLINE( 138)		HX_VARI( ::String,query) = HX_("",00,00,00,00);
HXLINE( 140)		Bool _hx_tmp1 = hx::IsNull( data );
HXDLIN( 140)		if (_hx_tmp1) {
HXLINE( 142)			{
HXLINE( 142)				HX_VARI(  ::Dynamic,tmp) = ( ( ::haxe::ds::StringMap)(this->parent->__Field(HX_("formData",8e,d5,80,56),hx::paccDynamic)) )->keys();
HXDLIN( 142)				while(true){
HXLINE( 142)					Bool _hx_tmp2 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 142)					if (_hx_tmp2) {
HXLINE( 142)						goto _hx_goto_0;
            					}
HXDLIN( 142)					HX_VARI( ::String,key) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 144)					Bool _hx_tmp3 = (query.length > (int)0);
HXDLIN( 144)					if (_hx_tmp3) {
HXLINE( 144)						hx::AddEq(query,HX_("&",26,00,00,00));
            					}
HXLINE( 145)					::String _hx_tmp4 = ::StringTools_obj::urlEncode(key);
HXDLIN( 145)					::String _hx_tmp5 = (_hx_tmp4 + HX_("=",3d,00,00,00));
HXDLIN( 145)					::String _hx_tmp6 = ::Std_obj::string(( ( ::haxe::ds::StringMap)(this->parent->__Field(HX_("formData",8e,d5,80,56),hx::paccDynamic)) )->get(key));
HXDLIN( 145)					::String _hx_tmp7 = ::StringTools_obj::urlEncode(_hx_tmp6);
HXDLIN( 145)					hx::AddEq(query,(_hx_tmp5 + _hx_tmp7));
            				}
            				_hx_goto_0:;
            			}
HXLINE( 149)			if ((query != HX_("",00,00,00,00))) {
HXLINE( 151)				if ((( (::String)(this->parent->__Field(HX_("method",e1,f6,5a,09),hx::paccDynamic)) ) == HX_("GET",76,1c,36,00))) {
HXLINE( 153)					Int _hx_tmp8 = uri.indexOf(HX_("?",3f,00,00,00),null());
HXDLIN( 153)					if ((_hx_tmp8 > (int)-1)) {
HXLINE( 155)						hx::AddEq(uri,(HX_("&",26,00,00,00) + query));
            					}
            					else {
HXLINE( 159)						hx::AddEq(uri,(HX_("?",3f,00,00,00) + query));
            					}
HXLINE( 163)					query = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 167)					data = ::haxe::io::Bytes_obj::ofString(query);
            				}
            			}
            		}
HXLINE( 174)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)10002,uri);
HXLINE( 176)		::String _hx_switch_0 = ( (::String)(this->parent->__Field(HX_("method",e1,f6,5a,09),hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("GET",76,1c,36,00)) ){
HXLINE( 184)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)80,true);
HXDLIN( 184)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("HEAD",20,f1,cb,2f)) ){
HXLINE( 180)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)44,true);
HXDLIN( 180)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("POST",60,4c,1d,35)) ){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::haxe::io::Bytes,a2, ::Dynamic,f) HXARGC(1)
            			 ::haxe::io::Bytes _hx_run(Int a1){
            				HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadURL",0x421c3194,"lime._backend.native.NativeHTTPRequest.loadURL","lime/_backend/native/NativeHTTPRequest.hx",189,0xedb6ece6)
            				HX_STACK_ARG(a1,"a1")
HXLINE( 189)				return ( ( ::haxe::io::Bytes)(f(a1,a2)) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 188)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)47,true);
HXLINE( 189)			 ::Dynamic f = this->curl_onRead_dyn();
HXDLIN( 189)			 ::haxe::io::Bytes a2 = data;
HXDLIN( 189)			 ::Dynamic _hx_tmp9 =  ::Dynamic(new _hx_Closure_1(a2,f));
HXDLIN( 189)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)20012,_hx_tmp9);
HXLINE( 190)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)60,data->length);
HXLINE( 191)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)14,data->length);
HXLINE( 186)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("PUT",af,fe,3c,00)) ){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_2, ::haxe::io::Bytes,a21, ::Dynamic,f1) HXARGC(1)
            			 ::haxe::io::Bytes _hx_run(Int a11){
            				HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadURL",0x421c3194,"lime._backend.native.NativeHTTPRequest.loadURL","lime/_backend/native/NativeHTTPRequest.hx",196,0xedb6ece6)
            				HX_STACK_ARG(a11,"a11")
HXLINE( 196)				return ( ( ::haxe::io::Bytes)(f1(a11,a21)) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 195)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)46,true);
HXLINE( 196)			 ::Dynamic f1 = this->curl_onRead_dyn();
HXDLIN( 196)			 ::haxe::io::Bytes a21 = data;
HXDLIN( 196)			 ::Dynamic _hx_tmp10 =  ::Dynamic(new _hx_Closure_2(a21,f1));
HXDLIN( 196)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)20012,_hx_tmp10);
HXLINE( 197)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)14,data->length);
HXLINE( 193)			goto _hx_goto_1;
            		}
            		/* default */{
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f2, ::haxe::io::Bytes,a22) HXARGC(1)
            			 ::haxe::io::Bytes _hx_run(Int a12){
            				HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadURL",0x421c3194,"lime._backend.native.NativeHTTPRequest.loadURL","lime/_backend/native/NativeHTTPRequest.hx",202,0xedb6ece6)
            				HX_STACK_ARG(a12,"a12")
HXLINE( 202)				return ( ( ::haxe::io::Bytes)(f2(a12,a22)) );
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE( 201)			Float _hx_tmp11 = this->curl;
HXDLIN( 201)			::String _hx_tmp12 = ::Std_obj::string( ::Dynamic(this->parent->__Field(HX_("method",e1,f6,5a,09),hx::paccDynamic)));
HXDLIN( 201)			::lime::net::curl::CURLEasy_obj::setopt(_hx_tmp11,(int)10036,_hx_tmp12);
HXLINE( 202)			 ::Dynamic f2 = this->curl_onRead_dyn();
HXDLIN( 202)			 ::haxe::io::Bytes a22 = data;
HXDLIN( 202)			 ::Dynamic _hx_tmp13 =  ::Dynamic(new _hx_Closure_0(f2,a22));
HXDLIN( 202)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)20012,_hx_tmp13);
HXLINE( 203)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)14,data->length);
            		}
            		_hx_goto_1:;
HXLINE( 207)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)52, ::Dynamic(this->parent->__Field(HX_("followRedirects",26,5a,40,75),hx::paccDynamic)));
HXLINE( 208)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)58,true);
HXLINE( 210)		HX_VARI( ::Array< ::String >,headers) = ::Array_obj< ::String >::__new(0);
HXLINE( 211)		headers->push(HX_("Expect: ",df,c4,e1,19));
HXLINE( 213)		HX_VARI( Bool,hasContentType) = false;
HXLINE( 215)		{
HXLINE( 215)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 215)			HX_VARI( ::cpp::VirtualArray,_g2) = hx::TCast< ::cpp::VirtualArray >::cast(( (::Array< ::Dynamic>)(this->parent->__Field(HX_("headers",46,52,08,63),hx::paccDynamic)) ));
HXDLIN( 215)			while((_g1 < _g2->get_length())){
HXLINE( 215)				HX_VARI(  ::Dynamic,header) = _g2->__get(_g1);
HXDLIN( 215)				++_g1;
HXLINE( 217)				if (hx::IsEq(  ::Dynamic(header->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)),HX_("Content-Type",ce,69,5d,3c) )) {
HXLINE( 217)					hasContentType = true;
            				}
HXLINE( 218)				::String _hx_tmp14 = ::Std_obj::string( ::Dynamic(header->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)));
HXDLIN( 218)				::String _hx_tmp15 = ((HX_("",00,00,00,00) + _hx_tmp14) + HX_(": ",a6,32,00,00));
HXDLIN( 218)				::String _hx_tmp16 = ::Std_obj::string( ::Dynamic(header->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)));
HXDLIN( 218)				headers->push((_hx_tmp15 + _hx_tmp16));
            			}
            		}
HXLINE( 222)		if (!(hasContentType)) {
HXLINE( 224)			headers->push((HX_("Content-Type: ",f4,2b,e6,1d) + ( (::String)(this->parent->__Field(HX_("contentType",93,3c,7b,2a),hx::paccDynamic)) )));
            		}
HXLINE( 228)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)10023,headers);
HXLINE( 230)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)20056,this->curl_onProgress_dyn());
HXLINE( 231)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)20011,this->curl_onWrite_dyn());
HXLINE( 233)		Bool _hx_tmp17 = ( (Bool)(this->parent->__Field(HX_("enableResponseHeaders",82,32,47,05),hx::paccDynamic)) );
HXDLIN( 233)		if (_hx_tmp17) {
HXLINE( 235)			::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)20079,this->curl_onHeader_dyn());
            		}
HXLINE( 239)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)64,false);
HXLINE( 240)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)81,(int)0);
HXLINE( 241)		 ::Dynamic _hx_tmp18;
HXDLIN( 241)		Bool _hx_tmp19 = hx::IsNull( ( (::String)(this->parent->__Field(HX_("userAgent",7a,f0,12,c8),hx::paccDynamic)) ) );
HXDLIN( 241)		if (_hx_tmp19) {
HXLINE( 241)			_hx_tmp18 = HX_("libcurl-agent/1.0",4d,41,cc,d3);
            		}
            		else {
HXLINE( 241)			_hx_tmp18 = ( (::String)(this->parent->__Field(HX_("userAgent",7a,f0,12,c8),hx::paccDynamic)) );
            		}
HXDLIN( 241)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)10018,_hx_tmp18);
HXLINE( 244)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)99,true);
HXLINE( 246)		::lime::net::curl::CURLEasy_obj::setopt(this->curl,(int)53,!(binary));
HXLINE( 248)		HX_VARI(  ::lime::_hx_system::BackgroundWorker,worker) =  ::lime::_hx_system::BackgroundWorker_obj::__new();
HXLINE( 249)		worker->doWork->add( ::Dynamic(new _hx_Closure_3(_gthis,worker)),null(),null());
HXLINE( 256)		worker->onComplete->add( ::Dynamic(new _hx_Closure_4(_gthis)),null(),null());
HXLINE( 271)		worker->run(null());
HXLINE( 273)		Bool _hx_tmp20 = (( (Int)(this->parent->__Field(HX_("timeout",a1,1a,f7,d8),hx::paccDynamic)) ) > (int)0);
HXDLIN( 273)		if (_hx_tmp20) {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_5, ::lime::_backend::native::NativeHTTPRequest,_gthis, ::lime::_hx_system::BackgroundWorker,worker) HXARGC(0)
            			void _hx_run(){
            				HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","loadURL",0x421c3194,"lime._backend.native.NativeHTTPRequest.loadURL","lime/_backend/native/NativeHTTPRequest.hx",277,0xedb6ece6)
HXLINE( 277)				Bool _hx_tmp21 = !(worker->completed);
HXDLIN( 277)				if (_hx_tmp21) {
HXLINE( 279)					worker->cancel();
HXLINE( 280)					_gthis->cancel();
HXLINE( 282)					_gthis->promise->error((int)28);
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 275)			::haxe::Timer_obj::delay( ::Dynamic(new _hx_Closure_5(_gthis,worker)), ::Dynamic(this->parent->__Field(HX_("timeout",a1,1a,f7,d8),hx::paccDynamic)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeHTTPRequest_obj,loadURL,(void))

Int NativeHTTPRequest_obj::curl_onHeader( ::haxe::io::Bytes output,Int size,Int nmemb){
            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","curl_onHeader",0x7ca3e9ea,"lime._backend.native.NativeHTTPRequest.curl_onHeader","lime/_backend/native/NativeHTTPRequest.hx",300,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(nmemb,"nmemb")
HXLINE( 302)		this->parent->__SetField(HX_("responseHeaders",c5,0d,ca,43),::Array_obj< ::Dynamic>::__new(0),hx::paccDynamic);
HXLINE( 306)		return (size * nmemb);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeHTTPRequest_obj,curl_onHeader,return )

Int NativeHTTPRequest_obj::curl_onProgress(Float dltotal,Float dlnow,Float uptotal,Float upnow){
            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","curl_onProgress",0x1ecd694a,"lime._backend.native.NativeHTTPRequest.curl_onProgress","lime/_backend/native/NativeHTTPRequest.hx",311,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dltotal,"dltotal")
            	HX_STACK_ARG(dlnow,"dlnow")
            	HX_STACK_ARG(uptotal,"uptotal")
            	HX_STACK_ARG(upnow,"upnow")
HXLINE( 313)		Bool _hx_tmp;
HXDLIN( 313)		Bool _hx_tmp1;
HXDLIN( 313)		Bool _hx_tmp2;
HXDLIN( 313)		if (!((upnow > this->bytesLoaded))) {
HXLINE( 313)			_hx_tmp2 = (dlnow > this->bytesLoaded);
            		}
            		else {
HXLINE( 313)			_hx_tmp2 = true;
            		}
HXDLIN( 313)		if (!(_hx_tmp2)) {
HXLINE( 313)			_hx_tmp1 = (uptotal > this->bytesTotal);
            		}
            		else {
HXLINE( 313)			_hx_tmp1 = true;
            		}
HXDLIN( 313)		if (!(_hx_tmp1)) {
HXLINE( 313)			_hx_tmp = (dltotal > this->bytesTotal);
            		}
            		else {
HXLINE( 313)			_hx_tmp = true;
            		}
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 315)			Bool _hx_tmp3 = (upnow > this->bytesLoaded);
HXDLIN( 315)			if (_hx_tmp3) {
HXLINE( 315)				this->bytesLoaded = ::Std_obj::_hx_int(upnow);
            			}
HXLINE( 316)			Bool _hx_tmp4 = (dlnow > this->bytesLoaded);
HXDLIN( 316)			if (_hx_tmp4) {
HXLINE( 316)				this->bytesLoaded = ::Std_obj::_hx_int(dlnow);
            			}
HXLINE( 317)			Bool _hx_tmp5 = (uptotal > this->bytesTotal);
HXDLIN( 317)			if (_hx_tmp5) {
HXLINE( 317)				this->bytesTotal = ::Std_obj::_hx_int(uptotal);
            			}
HXLINE( 318)			Bool _hx_tmp6 = (dltotal > this->bytesTotal);
HXDLIN( 318)			if (_hx_tmp6) {
HXLINE( 318)				this->bytesTotal = ::Std_obj::_hx_int(dltotal);
            			}
HXLINE( 320)			this->promise->progress(this->bytesLoaded,this->bytesTotal);
            		}
HXLINE( 324)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC4(NativeHTTPRequest_obj,curl_onProgress,return )

 ::haxe::io::Bytes NativeHTTPRequest_obj::curl_onRead(Int max, ::haxe::io::Bytes input){
            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","curl_onRead",0x21af6a73,"lime._backend.native.NativeHTTPRequest.curl_onRead","lime/_backend/native/NativeHTTPRequest.hx",331,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(max,"max")
            	HX_STACK_ARG(input,"input")
HXLINE( 331)		return input;
            	}


HX_DEFINE_DYNAMIC_FUNC2(NativeHTTPRequest_obj,curl_onRead,return )

Int NativeHTTPRequest_obj::curl_onWrite( ::haxe::io::Bytes output,Int size,Int nmemb){
            	HX_STACK_FRAME("lime._backend.native.NativeHTTPRequest","curl_onWrite",0x416c8722,"lime._backend.native.NativeHTTPRequest.curl_onWrite","lime/_backend/native/NativeHTTPRequest.hx",336,0xedb6ece6)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(output,"output")
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(nmemb,"nmemb")
HXLINE( 338)		HX_VARI(  ::haxe::io::Bytes,cacheBytes) = this->bytes;
HXLINE( 339)		Int _hx_tmp = (this->bytes->length + output->length);
HXDLIN( 339)		this->bytes = ::haxe::io::Bytes_obj::alloc(_hx_tmp);
HXLINE( 340)		this->bytes->blit((int)0,cacheBytes,(int)0,cacheBytes->length);
HXLINE( 341)		this->bytes->blit(cacheBytes->length,output,(int)0,output->length);
HXLINE( 343)		return (size * nmemb);
            	}


HX_DEFINE_DYNAMIC_FUNC3(NativeHTTPRequest_obj,curl_onWrite,return )


NativeHTTPRequest_obj::NativeHTTPRequest_obj()
{
}

void NativeHTTPRequest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NativeHTTPRequest);
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(curl,"curl");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(promise,"promise");
	HX_MARK_END_CLASS();
}

void NativeHTTPRequest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(curl,"curl");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(promise,"promise");
}

hx::Val NativeHTTPRequest_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"curl") ) { return hx::Val( curl); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return hx::Val( cancel_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"promise") ) { return hx::Val( promise); }
		if (HX_FIELD_EQ(inName,"loadURL") ) { return hx::Val( loadURL_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadData") ) { return hx::Val( loadData_dyn()); }
		if (HX_FIELD_EQ(inName,"loadFile") ) { return hx::Val( loadFile_dyn()); }
		if (HX_FIELD_EQ(inName,"loadText") ) { return hx::Val( loadText_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return hx::Val( bytesTotal); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return hx::Val( bytesLoaded); }
		if (HX_FIELD_EQ(inName,"curl_onRead") ) { return hx::Val( curl_onRead_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curl_onWrite") ) { return hx::Val( curl_onWrite_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curl_onHeader") ) { return hx::Val( curl_onHeader_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"curl_onProgress") ) { return hx::Val( curl_onProgress_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NativeHTTPRequest_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"curl") ) { curl=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"promise") ) { promise=inValue.Cast<  ::lime::app::Promise_haxe_io_Bytes >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NativeHTTPRequest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"));
	outFields->push(HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"));
	outFields->push(HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"));
	outFields->push(HX_HCSTRING("curl","\xec","\x4a","\xc9","\x41"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NativeHTTPRequest_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(NativeHTTPRequest_obj,bytes),HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd")},
	{hx::fsInt,(int)offsetof(NativeHTTPRequest_obj,bytesLoaded),HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99")},
	{hx::fsInt,(int)offsetof(NativeHTTPRequest_obj,bytesTotal),HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45")},
	{hx::fsFloat,(int)offsetof(NativeHTTPRequest_obj,curl),HX_HCSTRING("curl","\xec","\x4a","\xc9","\x41")},
	{hx::fsObject /*::lime::net::_IHTTPRequest*/ ,(int)offsetof(NativeHTTPRequest_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::lime::app::Promise_haxe_io_Bytes*/ ,(int)offsetof(NativeHTTPRequest_obj,promise),HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NativeHTTPRequest_obj_sStaticStorageInfo = 0;
#endif

static ::String NativeHTTPRequest_obj_sMemberFields[] = {
	HX_HCSTRING("bytes","\x6b","\x08","\x98","\xbd"),
	HX_HCSTRING("bytesLoaded","\xd0","\x66","\xca","\x99"),
	HX_HCSTRING("bytesTotal","\x59","\x57","\xda","\x45"),
	HX_HCSTRING("curl","\xec","\x4a","\xc9","\x41"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("promise","\x9b","\xcd","\xe9","\xf7"),
	HX_HCSTRING("cancel","\x7a","\xed","\x33","\xb8"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("loadData","\x70","\x27","\x03","\xb3"),
	HX_HCSTRING("loadFile","\xc2","\x9f","\x5b","\xb4"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("loadURL","\xe9","\x88","\xe3","\x08"),
	HX_HCSTRING("curl_onHeader","\xff","\xee","\xa6","\xac"),
	HX_HCSTRING("curl_onProgress","\x9f","\x9d","\x6b","\x99"),
	HX_HCSTRING("curl_onRead","\x48","\x90","\x7d","\x25"),
	HX_HCSTRING("curl_onWrite","\xad","\x7b","\xff","\x91"),
	::String(null()) };

static void NativeHTTPRequest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeHTTPRequest_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeHTTPRequest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeHTTPRequest_obj::__mClass,"__mClass");
};

#endif

hx::Class NativeHTTPRequest_obj::__mClass;

void NativeHTTPRequest_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime._backend.native.NativeHTTPRequest","\x19","\xe6","\x3e","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NativeHTTPRequest_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NativeHTTPRequest_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NativeHTTPRequest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeHTTPRequest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeHTTPRequest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeHTTPRequest_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace _backend
} // end namespace native
