// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLTilemap
#include <openfl/_internal/renderer/opengl/GLTilemap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_display__Tileset_TileData
#include <openfl/display/_Tileset/TileData.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace display{

void Tilemap_obj::__construct(Int width,Int height, ::openfl::display::Tileset tileset,hx::Null< Bool >  __o_smoothing){
Bool smoothing = __o_smoothing.Default(true);
            	HX_STACK_FRAME("openfl.display.Tilemap","new",0x34c22ff6,"openfl.display.Tilemap.new","openfl/display/Tilemap.hx",44,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(tileset,"tileset")
            	HX_STACK_ARG(smoothing,"smoothing")
HXLINE(  46)		super::__construct();
HXLINE(  48)		this->set_tileset(tileset);
HXLINE(  49)		this->smoothing = smoothing;
HXLINE(  51)		this->_hx___tiles = ::Array_obj< ::Dynamic>::__new();
HXLINE(  52)		this->numTiles = (int)0;
HXLINE(  55)		this->_hx___width = width;
HXLINE(  56)		this->_hx___height = height;
            	}

Dynamic Tilemap_obj::__CreateEmpty() { return new Tilemap_obj; }

hx::ObjectPtr< Tilemap_obj > Tilemap_obj::__new(Int width,Int height, ::openfl::display::Tileset tileset,hx::Null< Bool >  __o_smoothing)
{
	hx::ObjectPtr< Tilemap_obj > _hx_result = new Tilemap_obj();
	_hx_result->__construct(width,height,tileset,__o_smoothing);
	return _hx_result;
}

Dynamic Tilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tilemap_obj > _hx_result = new Tilemap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

 ::openfl::display::Tile Tilemap_obj::addTile( ::openfl::display::Tile tile){
            	HX_STACK_FRAME("openfl.display.Tilemap","addTile",0xfbdef085,"openfl.display.Tilemap.addTile","openfl/display/Tilemap.hx",66,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tile,"tile")
HXLINE(  68)		this->_hx___tiles->push(tile);
HXLINE(  69)		this->_hx___dirty = true;
HXLINE(  70)		this->numTiles++;
HXLINE(  72)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,addTile,return )

::Array< ::Dynamic> Tilemap_obj::addTiles(::Array< ::Dynamic> tiles){
            	HX_STACK_FRAME("openfl.display.Tilemap","addTiles",0x6733844e,"openfl.display.Tilemap.addTiles","openfl/display/Tilemap.hx",77,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tiles,"tiles")
HXLINE(  79)		this->_hx___tiles = this->_hx___tiles->concat(tiles);
HXLINE(  80)		this->_hx___dirty = true;
HXLINE(  81)		this->numTiles = this->_hx___tiles->length;
HXLINE(  83)		return tiles;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,addTiles,return )

 ::openfl::display::Tile Tilemap_obj::addTileAt( ::openfl::display::Tile tile,Int index){
            	HX_STACK_FRAME("openfl.display.Tilemap","addTileAt",0xe5e014d8,"openfl.display.Tilemap.addTileAt","openfl/display/Tilemap.hx",88,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tile,"tile")
            	HX_STACK_ARG(index,"index")
HXLINE(  90)		this->_hx___tiles->remove(tile);
HXLINE(  91)		this->_hx___tiles->insert(index,tile);
HXLINE(  92)		this->_hx___dirty = true;
HXLINE(  93)		this->numTiles = this->_hx___tiles->length;
HXLINE(  95)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,addTileAt,return )

Bool Tilemap_obj::contains( ::openfl::display::Tile tile){
            	HX_STACK_FRAME("openfl.display.Tilemap","contains",0x0a1cbac9,"openfl.display.Tilemap.contains","openfl/display/Tilemap.hx",102,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tile,"tile")
HXLINE( 102)		Int _hx_tmp = this->_hx___tiles->indexOf(tile,null());
HXDLIN( 102)		return (_hx_tmp > (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,contains,return )

 ::openfl::display::Tile Tilemap_obj::getTileAt(Int index){
            	HX_STACK_FRAME("openfl.display.Tilemap","getTileAt",0xaa12690d,"openfl.display.Tilemap.getTileAt","openfl/display/Tilemap.hx",107,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 109)		Bool _hx_tmp;
HXDLIN( 109)		if ((index >= (int)0)) {
HXLINE( 109)			_hx_tmp = (index < this->numTiles);
            		}
            		else {
HXLINE( 109)			_hx_tmp = false;
            		}
HXDLIN( 109)		if (_hx_tmp) {
HXLINE( 111)			return this->_hx___tiles->__get(index).StaticCast<  ::openfl::display::Tile >();
            		}
HXLINE( 115)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,getTileAt,return )

Int Tilemap_obj::getTileIndex( ::openfl::display::Tile tile){
            	HX_STACK_FRAME("openfl.display.Tilemap","getTileIndex",0x74b69338,"openfl.display.Tilemap.getTileIndex","openfl/display/Tilemap.hx",120,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tile,"tile")
HXLINE( 122)		{
HXLINE( 122)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 122)			HX_VARI( Int,_g) = this->_hx___tiles->length;
HXDLIN( 122)			while((_g1 < _g)){
HXLINE( 122)				HX_VARI( Int,i) = _g1++;
HXLINE( 124)				if (hx::IsEq( this->_hx___tiles->__get(i).StaticCast<  ::openfl::display::Tile >(),tile )) {
HXLINE( 124)					return i;
            				}
            			}
            		}
HXLINE( 128)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,getTileIndex,return )

 ::openfl::display::Tile Tilemap_obj::removeTile( ::openfl::display::Tile tile){
            	HX_STACK_FRAME("openfl.display.Tilemap","removeTile",0x5b5664bc,"openfl.display.Tilemap.removeTile","openfl/display/Tilemap.hx",133,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tile,"tile")
HXLINE( 135)		this->_hx___tiles->remove(tile);
HXLINE( 136)		this->_hx___dirty = true;
HXLINE( 137)		this->numTiles = this->_hx___tiles->length;
HXLINE( 139)		return tile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,removeTile,return )

 ::openfl::display::Tile Tilemap_obj::removeTileAt(Int index){
            	HX_STACK_FRAME("openfl.display.Tilemap","removeTileAt",0xa94644cf,"openfl.display.Tilemap.removeTileAt","openfl/display/Tilemap.hx",144,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 146)		Bool _hx_tmp;
HXDLIN( 146)		if ((index >= (int)0)) {
HXLINE( 146)			_hx_tmp = (index < this->numTiles);
            		}
            		else {
HXLINE( 146)			_hx_tmp = false;
            		}
HXDLIN( 146)		if (_hx_tmp) {
HXLINE( 148)			 ::openfl::display::Tile _hx_tmp1 = this->_hx___tiles->__get(index).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 148)			return this->removeTile(_hx_tmp1);
            		}
HXLINE( 152)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,removeTileAt,return )

void Tilemap_obj::removeTiles(hx::Null< Int >  __o_beginIndex,hx::Null< Int >  __o_endIndex){
Int beginIndex = __o_beginIndex.Default(0);
Int endIndex = __o_endIndex.Default(2147483647);
            	HX_STACK_FRAME("openfl.display.Tilemap","removeTiles",0x9041c037,"openfl.display.Tilemap.removeTiles","openfl/display/Tilemap.hx",157,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 159)		Bool _hx_tmp = (beginIndex < (int)0);
HXDLIN( 159)		if (_hx_tmp) {
HXLINE( 159)			beginIndex = (int)0;
            		}
HXLINE( 160)		Bool _hx_tmp1 = (endIndex > (this->_hx___tiles->length - (int)1));
HXDLIN( 160)		if (_hx_tmp1) {
HXLINE( 160)			endIndex = (this->_hx___tiles->length - (int)1);
            		}
HXLINE( 162)		this->_hx___tiles->removeRange(beginIndex,((endIndex - beginIndex) + (int)1));
HXLINE( 163)		this->_hx___dirty = true;
HXLINE( 164)		this->numTiles = this->_hx___tiles->length;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,removeTiles,(void))

void Tilemap_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.Tilemap","__getBounds",0x92793e21,"openfl.display.Tilemap.__getBounds","openfl/display/Tilemap.hx",170,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 172)		HX_VARI(  ::openfl::geom::Rectangle,bounds) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 173)		bounds->setTo((int)0,(int)0,this->_hx___width,this->_hx___height);
HXLINE( 174)		bounds->_hx___transform(bounds,matrix);
HXLINE( 176)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
            	}


Bool Tilemap_obj::_hx___hitTest(Float x,Float y,Bool shapeFlag,::Array< ::Dynamic> stack,Bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACK_FRAME("openfl.display.Tilemap","__hitTest",0x7360e53b,"openfl.display.Tilemap.__hitTest","openfl/display/Tilemap.hx",183,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(stack,"stack")
            	HX_STACK_ARG(interactiveOnly,"interactiveOnly")
            	HX_STACK_ARG(hitObject,"hitObject")
HXLINE( 185)		Bool _hx_tmp;
HXDLIN( 185)		Bool _hx_tmp1 = !(!(hitObject->get_visible()));
HXDLIN( 185)		if (_hx_tmp1) {
HXLINE( 185)			_hx_tmp = this->_hx___isMask;
            		}
            		else {
HXLINE( 185)			_hx_tmp = true;
            		}
HXDLIN( 185)		if (_hx_tmp) {
HXLINE( 185)			return false;
            		}
HXLINE( 186)		Bool _hx_tmp2;
HXDLIN( 186)		 ::openfl::display::DisplayObject _hx_tmp3 = this->get_mask();
HXDLIN( 186)		Bool _hx_tmp4 = hx::IsNotNull( _hx_tmp3 );
HXDLIN( 186)		if (_hx_tmp4) {
HXLINE( 186)			_hx_tmp2 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 186)			_hx_tmp2 = false;
            		}
HXDLIN( 186)		if (_hx_tmp2) {
HXLINE( 186)			return false;
            		}
HXLINE( 188)		this->_hx___getRenderTransform();
HXLINE( 190)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___renderTransform;
HXDLIN( 190)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 190)		HX_VAR( Float,px);
HXDLIN( 190)		if ((norm == (int)0)) {
HXLINE( 190)			px = -(_this->tx);
            		}
            		else {
HXLINE( 190)			px = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE( 191)		HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___renderTransform;
HXDLIN( 191)		HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN( 191)		HX_VAR( Float,py);
HXDLIN( 191)		if ((norm1 == (int)0)) {
HXLINE( 191)			py = -(_this1->ty);
            		}
            		else {
HXLINE( 191)			py = (((Float)((Float)1.0) / (Float)norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE( 193)		Bool _hx_tmp5;
HXDLIN( 193)		Bool _hx_tmp6;
HXDLIN( 193)		Bool _hx_tmp7;
HXDLIN( 193)		if ((px > (int)0)) {
HXLINE( 193)			_hx_tmp7 = (py > (int)0);
            		}
            		else {
HXLINE( 193)			_hx_tmp7 = false;
            		}
HXDLIN( 193)		if (_hx_tmp7) {
HXLINE( 193)			_hx_tmp6 = (px <= this->_hx___width);
            		}
            		else {
HXLINE( 193)			_hx_tmp6 = false;
            		}
HXDLIN( 193)		if (_hx_tmp6) {
HXLINE( 193)			_hx_tmp5 = (py <= this->_hx___height);
            		}
            		else {
HXLINE( 193)			_hx_tmp5 = false;
            		}
HXDLIN( 193)		if (_hx_tmp5) {
HXLINE( 195)			Bool _hx_tmp8;
HXDLIN( 195)			Bool _hx_tmp9 = hx::IsNotNull( stack );
HXDLIN( 195)			if (_hx_tmp9) {
HXLINE( 195)				_hx_tmp8 = !(interactiveOnly);
            			}
            			else {
HXLINE( 195)				_hx_tmp8 = false;
            			}
HXDLIN( 195)			if (_hx_tmp8) {
HXLINE( 197)				stack->push(hitObject);
            			}
HXLINE( 201)			return true;
            		}
HXLINE( 205)		return false;
            	}


void Tilemap_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.Tilemap","__renderCairo",0xab509548,"openfl.display.Tilemap.__renderCairo","openfl/display/Tilemap.hx",214,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 214)		Bool _hx_tmp;
HXDLIN( 214)		Bool _hx_tmp1;
HXDLIN( 214)		if (!(!(this->_hx___renderable))) {
HXLINE( 214)			_hx_tmp1 = (this->_hx___tiles->length == (int)0);
            		}
            		else {
HXLINE( 214)			_hx_tmp1 = true;
            		}
HXDLIN( 214)		if (!(_hx_tmp1)) {
HXLINE( 214)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 214)			_hx_tmp = true;
            		}
HXDLIN( 214)		if (!(_hx_tmp)) {
HXLINE( 214)			HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXDLIN( 214)			renderSession->maskManager->pushObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 214)			HX_VARI(  ::openfl::geom::Rectangle,rect) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXDLIN( 214)			rect->setTo((int)0,(int)0,this->_hx___width,this->_hx___height);
HXDLIN( 214)			renderSession->maskManager->pushRect(rect,this->_hx___renderTransform);
HXDLIN( 214)			HX_VARI(  ::openfl::geom::Matrix,transform) = this->_hx___renderTransform;
HXDLIN( 214)			HX_VARI( Bool,roundPixels) = renderSession->roundPixels;
HXDLIN( 214)			HX_VARI(  ::openfl::display::Tileset,defaultTileset) = this->tileset;
HXDLIN( 214)			HX_VARI(  ::openfl::display::BitmapData,cacheBitmapData) = null();
HXDLIN( 214)			HX_VARI(  ::Dynamic,surface) = null();
HXDLIN( 214)			HX_VARI(  ::Dynamic,pattern) = null();
HXDLIN( 214)			HX_VAR( ::Array< ::Dynamic>,tiles);
HXDLIN( 214)			HX_VAR( Int,count);
HXDLIN( 214)			HX_VAR(  ::openfl::display::Tile,tile);
HXDLIN( 214)			HX_VAR( Float,alpha);
HXDLIN( 214)			HX_VAR( Bool,visible);
HXDLIN( 214)			HX_VAR(  ::openfl::display::Tileset,tileset);
HXDLIN( 214)			HX_VAR(  ::openfl::display::_Tileset::TileData,tileData);
HXDLIN( 214)			HX_VAR(  ::openfl::display::BitmapData,bitmapData);
HXDLIN( 214)			tiles = this->_hx___tiles;
HXDLIN( 214)			count = tiles->length;
HXDLIN( 214)			HX_VARI(  ::lime::math::Matrix3,matrix) =  ::lime::math::Matrix3_obj::__new(null(),null(),null(),null(),null(),null());
HXDLIN( 214)			HX_VARI(  ::openfl::geom::Matrix,tileTransform) = ::openfl::geom::Matrix_obj::_hx___temp;
HXDLIN( 214)			{
HXLINE( 214)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 214)				while((_g1 < count)){
HXLINE( 214)					HX_VARI( Int,i) = _g1++;
HXDLIN( 214)					tile = tiles->__get(i).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 214)					alpha = tile->alpha;
HXDLIN( 214)					visible = tile->visible;
HXDLIN( 214)					Bool _hx_tmp2;
HXDLIN( 214)					if (!(!(visible))) {
HXLINE( 214)						_hx_tmp2 = (alpha <= (int)0);
            					}
            					else {
HXLINE( 214)						_hx_tmp2 = true;
            					}
HXDLIN( 214)					if (_hx_tmp2) {
HXLINE( 214)						continue;
            					}
HXDLIN( 214)					Bool _hx_tmp3 = hx::IsNotNull( tile->tileset );
HXDLIN( 214)					if (_hx_tmp3) {
HXLINE( 214)						tileset = tile->tileset;
            					}
            					else {
HXLINE( 214)						tileset = defaultTileset;
            					}
HXDLIN( 214)					Bool _hx_tmp4 = hx::IsNull( tileset );
HXDLIN( 214)					if (_hx_tmp4) {
HXLINE( 214)						continue;
            					}
HXDLIN( 214)					tileData = tileset->_hx___data->__get(tile->id).StaticCast<  ::openfl::display::_Tileset::TileData >();
HXDLIN( 214)					Bool _hx_tmp5 = hx::IsNull( tileData );
HXDLIN( 214)					if (_hx_tmp5) {
HXLINE( 214)						continue;
            					}
HXDLIN( 214)					bitmapData = tileset->bitmapData;
HXDLIN( 214)					Bool _hx_tmp6 = hx::IsNull( bitmapData );
HXDLIN( 214)					if (_hx_tmp6) {
HXLINE( 214)						continue;
            					}
HXDLIN( 214)					if (hx::IsNotEq( bitmapData,cacheBitmapData )) {
HXLINE( 214)						surface = bitmapData->getSurface();
HXDLIN( 214)						pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 214)						Int _hx_tmp7;
HXDLIN( 214)						Bool _hx_tmp8;
HXDLIN( 214)						if (renderSession->allowSmoothing) {
HXLINE( 214)							_hx_tmp8 = this->smoothing;
            						}
            						else {
HXLINE( 214)							_hx_tmp8 = false;
            						}
HXDLIN( 214)						if (_hx_tmp8) {
HXLINE( 214)							_hx_tmp7 = (int)1;
            						}
            						else {
HXLINE( 214)							_hx_tmp7 = (int)3;
            						}
HXDLIN( 214)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp7);
HXDLIN( 214)						cairo->set_source(pattern);
HXDLIN( 214)						cacheBitmapData = bitmapData;
            					}
HXDLIN( 214)					tileTransform->copyFrom(tile->matrix);
HXDLIN( 214)					tileTransform->concat(transform);
HXDLIN( 214)					if (roundPixels) {
HXLINE( 214)						tileTransform->tx = ::Math_obj::round(tileTransform->tx);
HXDLIN( 214)						tileTransform->ty = ::Math_obj::round(tileTransform->ty);
            					}
HXDLIN( 214)					 ::lime::math::Matrix3 _hx_tmp9 = tileTransform->_hx___toMatrix3();
HXDLIN( 214)					cairo->set_matrix(_hx_tmp9);
HXDLIN( 214)					matrix->tx = tileData->x;
HXDLIN( 214)					matrix->ty = tileData->y;
HXDLIN( 214)					::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(pattern,matrix);
HXDLIN( 214)					cairo->set_source(pattern);
HXDLIN( 214)					cairo->save();
HXDLIN( 214)					cairo->newPath();
HXDLIN( 214)					cairo->rectangle((int)0,(int)0,tileData->width,tileData->height);
HXDLIN( 214)					cairo->clip();
HXDLIN( 214)					Bool _hx_tmp10;
HXDLIN( 214)					if ((this->_hx___worldAlpha == (int)1)) {
HXLINE( 214)						_hx_tmp10 = (alpha == (int)1);
            					}
            					else {
HXLINE( 214)						_hx_tmp10 = false;
            					}
HXDLIN( 214)					if (_hx_tmp10) {
HXLINE( 214)						cairo->paint();
            					}
            					else {
HXLINE( 214)						Float _hx_tmp11 = (this->_hx___worldAlpha * alpha);
HXDLIN( 214)						cairo->paintWithAlpha(_hx_tmp11);
            					}
HXDLIN( 214)					cairo->restore();
            				}
            			}
HXDLIN( 214)			renderSession->maskManager->popRect();
HXDLIN( 214)			renderSession->maskManager->popObject(hx::ObjectPtr<OBJ_>(this),null());
            		}
            	}


void Tilemap_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.Tilemap","__renderCanvas",0x3e831818,"openfl.display.Tilemap.__renderCanvas","openfl/display/Tilemap.hx",221,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


void Tilemap_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.Tilemap","__renderDOM",0x7d5cdb42,"openfl.display.Tilemap.__renderDOM","openfl/display/Tilemap.hx",228,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


void Tilemap_obj::_hx___renderFlash(){
            	HX_STACK_FRAME("openfl.display.Tilemap","__renderFlash",0x6cc39a70,"openfl.display.Tilemap.__renderFlash","openfl/display/Tilemap.hx",236,0xd55dffbc)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,_hx___renderFlash,(void))

void Tilemap_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.Tilemap","__renderGL",0xe74e7d45,"openfl.display.Tilemap.__renderGL","openfl/display/Tilemap.hx",244,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 244)		::openfl::_internal::renderer::opengl::GLTilemap_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
            	}


Float Tilemap_obj::get_height(){
            	HX_STACK_FRAME("openfl.display.Tilemap","get_height",0x840dd6da,"openfl.display.Tilemap.get_height","openfl/display/Tilemap.hx",260,0xd55dffbc)
            	HX_STACK_THIS(this)
HXLINE( 260)		Int _hx_tmp = this->_hx___height;
HXDLIN( 260)		Float _hx_tmp1 = this->get_scaleY();
HXDLIN( 260)		Float _hx_tmp2 = ::Math_obj::abs(_hx_tmp1);
HXDLIN( 260)		return (_hx_tmp * _hx_tmp2);
            	}


Float Tilemap_obj::set_height(Float value){
            	HX_STACK_FRAME("openfl.display.Tilemap","set_height",0x878b754e,"openfl.display.Tilemap.set_height","openfl/display/Tilemap.hx",267,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 269)		this->_hx___height = ::Std_obj::_hx_int(value);
HXLINE( 270)		Int _hx_tmp = this->_hx___height;
HXDLIN( 270)		Float _hx_tmp1 = this->get_scaleY();
HXDLIN( 270)		Float _hx_tmp2 = ::Math_obj::abs(_hx_tmp1);
HXDLIN( 270)		return (_hx_tmp * _hx_tmp2);
            	}


 ::openfl::display::Tileset Tilemap_obj::set_tileset( ::openfl::display::Tileset value){
            	HX_STACK_FRAME("openfl.display.Tilemap","set_tileset",0x57d3cded,"openfl.display.Tilemap.set_tileset","openfl/display/Tilemap.hx",288,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 290)		this->_hx___dirty = true;
HXLINE( 291)		return (this->tileset = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,set_tileset,return )

Float Tilemap_obj::get_width(){
            	HX_STACK_FRAME("openfl.display.Tilemap","get_width",0x1d9f4673,"openfl.display.Tilemap.get_width","openfl/display/Tilemap.hx",299,0xd55dffbc)
            	HX_STACK_THIS(this)
HXLINE( 299)		Int _hx_tmp = this->_hx___width;
HXDLIN( 299)		Float _hx_tmp1 = this->get_scaleX();
HXDLIN( 299)		Float _hx_tmp2 = ::Math_obj::abs(_hx_tmp1);
HXDLIN( 299)		return (_hx_tmp * _hx_tmp2);
            	}


Float Tilemap_obj::set_width(Float value){
            	HX_STACK_FRAME("openfl.display.Tilemap","set_width",0x00f0327f,"openfl.display.Tilemap.set_width","openfl/display/Tilemap.hx",306,0xd55dffbc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 308)		this->_hx___width = ::Std_obj::_hx_int(value);
HXLINE( 309)		Int _hx_tmp = this->_hx___width;
HXDLIN( 309)		Float _hx_tmp1 = this->get_scaleX();
HXDLIN( 309)		Float _hx_tmp2 = ::Math_obj::abs(_hx_tmp1);
HXDLIN( 309)		return (_hx_tmp * _hx_tmp2);
            	}



Tilemap_obj::Tilemap_obj()
{
}

void Tilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tilemap);
	HX_MARK_MEMBER_NAME(numTiles,"numTiles");
	HX_MARK_MEMBER_NAME(tileset,"tileset");
	HX_MARK_MEMBER_NAME(smoothing,"smoothing");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_MARK_MEMBER_NAME(_hx___cacheAlpha,"__cacheAlpha");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___tiles,"__tiles");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Tilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(numTiles,"numTiles");
	HX_VISIT_MEMBER_NAME(tileset,"tileset");
	HX_VISIT_MEMBER_NAME(smoothing,"smoothing");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_VISIT_MEMBER_NAME(_hx___cacheAlpha,"__cacheAlpha");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___tiles,"__tiles");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Tilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tileset") ) { return hx::Val( tileset); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty); }
		if (HX_FIELD_EQ(inName,"__tiles") ) { return hx::Val( _hx___tiles); }
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width); }
		if (HX_FIELD_EQ(inName,"addTile") ) { return hx::Val( addTile_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"numTiles") ) { return hx::Val( numTiles); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height); }
		if (HX_FIELD_EQ(inName,"addTiles") ) { return hx::Val( addTiles_dyn()); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { return hx::Val( smoothing); }
		if (HX_FIELD_EQ(inName,"addTileAt") ) { return hx::Val( addTileAt_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileAt") ) { return hx::Val( getTileAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeTile") ) { return hx::Val( removeTile_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"removeTiles") ) { return hx::Val( removeTiles_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"set_tileset") ) { return hx::Val( set_tileset_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { return hx::Val( _hx___bufferData); }
		if (HX_FIELD_EQ(inName,"__cacheAlpha") ) { return hx::Val( _hx___cacheAlpha); }
		if (HX_FIELD_EQ(inName,"getTileIndex") ) { return hx::Val( getTileIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"removeTileAt") ) { return hx::Val( removeTileAt_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderFlash") ) { return hx::Val( _hx___renderFlash_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Tilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tileset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tileset(inValue) );tileset=inValue.Cast<  ::openfl::display::Tileset >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tiles") ) { _hx___tiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"numTiles") ) { numTiles=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { smoothing=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { _hx___bufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cacheAlpha") ) { _hx___cacheAlpha=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd"));
	outFields->push(HX_HCSTRING("tileset","\x34","\x81","\x93","\x45"));
	outFields->push(HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"));
	outFields->push(HX_HCSTRING("__cacheAlpha","\xdc","\x88","\xe2","\x9c"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__tiles","\x65","\x56","\x93","\x7a"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tilemap_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Tilemap_obj,numTiles),HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd")},
	{hx::fsObject /*::openfl::display::Tileset*/ ,(int)offsetof(Tilemap_obj,tileset),HX_HCSTRING("tileset","\x34","\x81","\x93","\x45")},
	{hx::fsBool,(int)offsetof(Tilemap_obj,smoothing),HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(Tilemap_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Tilemap_obj,_hx___bufferData),HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc")},
	{hx::fsFloat,(int)offsetof(Tilemap_obj,_hx___cacheAlpha),HX_HCSTRING("__cacheAlpha","\xdc","\x88","\xe2","\x9c")},
	{hx::fsBool,(int)offsetof(Tilemap_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Tilemap_obj,_hx___tiles),HX_HCSTRING("__tiles","\x65","\x56","\x93","\x7a")},
	{hx::fsInt,(int)offsetof(Tilemap_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsInt,(int)offsetof(Tilemap_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Tilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String Tilemap_obj_sMemberFields[] = {
	HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd"),
	HX_HCSTRING("tileset","\x34","\x81","\x93","\x45"),
	HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"),
	HX_HCSTRING("__cacheAlpha","\xdc","\x88","\xe2","\x9c"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__tiles","\x65","\x56","\x93","\x7a"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("addTile","\xef","\x0d","\x3a","\x89"),
	HX_HCSTRING("addTiles","\xa4","\x23","\x92","\x89"),
	HX_HCSTRING("addTileAt","\xc2","\xe0","\x4c","\xd6"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("getTileAt","\xf7","\x34","\x7f","\x9a"),
	HX_HCSTRING("getTileIndex","\x8e","\x95","\xc6","\x58"),
	HX_HCSTRING("removeTile","\x92","\x05","\x1c","\xca"),
	HX_HCSTRING("removeTileAt","\x25","\x47","\x56","\x8d"),
	HX_HCSTRING("removeTiles","\xa1","\xda","\x68","\x0e"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderFlash","\x5a","\xa3","\xb5","\x16"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("set_tileset","\x57","\xe8","\xfa","\xd5"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	::String(null()) };

static void Tilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class Tilemap_obj::__mClass;

void Tilemap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Tilemap","\x04","\xbd","\x49","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Tilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
