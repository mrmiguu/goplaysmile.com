// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLShaderManager
#include <openfl/_internal/renderer/opengl/GLShaderManager.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{

void GLShaderManager_obj::__construct( ::lime::_backend::native::NativeGLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLShaderManager","new",0xf3047071,"openfl._internal.renderer.opengl.GLShaderManager.new","openfl/_internal/renderer/opengl/GLShaderManager.hx",17,0xbe4c2a01)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  19)		super::__construct();
HXLINE(  21)		this->gl = gl;
HXLINE(  23)		this->defaultShader =  ::openfl::display::Shader_obj::__new(null());
HXLINE(  24)		this->defaultShader->gl = gl;
HXLINE(  25)		this->defaultShader->_hx___init();
            	}

Dynamic GLShaderManager_obj::__CreateEmpty() { return new GLShaderManager_obj; }

hx::ObjectPtr< GLShaderManager_obj > GLShaderManager_obj::__new( ::lime::_backend::native::NativeGLRenderContext gl)
{
	hx::ObjectPtr< GLShaderManager_obj > _hx_result = new GLShaderManager_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic GLShaderManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLShaderManager_obj > _hx_result = new GLShaderManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void GLShaderManager_obj::setShader( ::openfl::display::Shader shader){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.GLShaderManager","setShader",0xc09db738,"openfl._internal.renderer.opengl.GLShaderManager.setShader","openfl/_internal/renderer/opengl/GLShaderManager.hx",30,0xbe4c2a01)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
HXLINE(  32)		if (hx::IsEq( this->currentShader,shader )) {
HXLINE(  34)			Bool _hx_tmp = hx::IsNotNull( this->currentShader );
HXDLIN(  34)			if (_hx_tmp) {
HXLINE(  34)				this->currentShader->_hx___update();
            			}
HXLINE(  35)			return;
            		}
HXLINE(  39)		Bool _hx_tmp1 = hx::IsNotNull( this->currentShader );
HXDLIN(  39)		if (_hx_tmp1) {
HXLINE(  41)			this->currentShader->_hx___disable();
            		}
HXLINE(  45)		Bool _hx_tmp2 = hx::IsNull( shader );
HXDLIN(  45)		if (_hx_tmp2) {
HXLINE(  47)			this->currentShader = null();
HXLINE(  48)			this->gl->useProgram(null());
HXLINE(  49)			return;
            		}
HXLINE(  53)		this->currentShader = shader;
HXLINE(  55)		Bool _hx_tmp3 = hx::IsNull( this->currentShader->gl );
HXDLIN(  55)		if (_hx_tmp3) {
HXLINE(  57)			this->currentShader->gl = this->gl;
HXLINE(  58)			this->currentShader->_hx___init();
            		}
HXLINE(  62)		this->gl->useProgram(shader->glProgram);
HXLINE(  63)		this->currentShader->_hx___enable();
HXLINE(  64)		this->currentShader->_hx___update();
            	}



GLShaderManager_obj::GLShaderManager_obj()
{
}

void GLShaderManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLShaderManager);
	HX_MARK_MEMBER_NAME(gl,"gl");
	 ::openfl::_internal::renderer::AbstractShaderManager_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GLShaderManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	 ::openfl::_internal::renderer::AbstractShaderManager_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GLShaderManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setShader") ) { return hx::Val( setShader_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLShaderManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLShaderManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLShaderManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(GLShaderManager_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLShaderManager_obj_sStaticStorageInfo = 0;
#endif

static ::String GLShaderManager_obj_sMemberFields[] = {
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("setShader","\x67","\x34","\xc8","\x7c"),
	::String(null()) };

static void GLShaderManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLShaderManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLShaderManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLShaderManager_obj::__mClass,"__mClass");
};

#endif

hx::Class GLShaderManager_obj::__mClass;

void GLShaderManager_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.GLShaderManager","\xff","\x63","\x2d","\xbb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLShaderManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLShaderManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLShaderManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLShaderManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLShaderManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLShaderManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
