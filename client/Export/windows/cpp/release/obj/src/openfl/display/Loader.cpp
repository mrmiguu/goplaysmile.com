// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app__Event_Dynamic_Void
#include <lime/app/_Event_Dynamic_Void.h>
#endif
#ifndef INCLUDED_lime_system_BackgroundWorker
#include <lime/system/BackgroundWorker.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_AssetLibrary
#include <openfl/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_IAssetCache
#include <openfl/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLiteLibrary
#include <openfl/_internal/swf/SWFLiteLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Loader
#include <openfl/display/Loader.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_net_URLLoader
#include <openfl/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_system_LoaderContext
#include <openfl/system/LoaderContext.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

static const Int _hx_array_data_3[] = {
	(Int)-1,
};
static const Int _hx_array_data_4[] = {
	(Int)0,
};
namespace openfl{
namespace display{

void Loader_obj::__construct(){
            	HX_STACK_FRAME("openfl.display.Loader","new",0x0b8c4b6f,"openfl.display.Loader.new","openfl/display/Loader.hx",37,0x7a569d9f)
            	HX_STACK_THIS(this)
HXLINE(  39)		super::__construct();
HXLINE(  41)		this->contentLoaderInfo = ::openfl::display::LoaderInfo_obj::create(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic Loader_obj::__CreateEmpty() { return new Loader_obj; }

hx::ObjectPtr< Loader_obj > Loader_obj::__new()
{
	hx::ObjectPtr< Loader_obj > _hx_result = new Loader_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Loader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Loader_obj > _hx_result = new Loader_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Loader_obj::close(){
            	HX_STACK_FRAME("openfl.display.Loader","close",0xeefbb487,"openfl.display.Loader.close","openfl/display/Loader.hx",48,0x7a569d9f)
            	HX_STACK_THIS(this)
HXLINE(  48)		::openfl::Lib_obj::notImplemented(hx::SourceInfo(HX_("Loader.hx",6b,e8,d2,9c),48,HX_("openfl.display.Loader",fd,67,b0,e2),HX_("close",b8,17,63,48)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Loader_obj,close,(void))

void Loader_obj::load( ::openfl::net::URLRequest request, ::openfl::_hx_system::LoaderContext context){
            	HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",53,0x7a569d9f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(request,"request")
            	HX_STACK_ARG(context,"context")
HXLINE(  53)		HX_VARI(  ::openfl::display::Loader,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  55)		HX_VARI( ::String,extension) = HX_("",00,00,00,00);
HXLINE(  56)		HX_VARI( ::String,path) = request->url;
HXLINE(  58)		HX_VARI( Int,queryIndex) = path.indexOf(HX_("?",3f,00,00,00),null());
HXLINE(  59)		if ((queryIndex > (int)-1)) {
HXLINE(  61)			path = path.substring((int)0,queryIndex);
            		}
HXLINE(  65)		HX_VARI( Int,extIndex) = path.lastIndexOf(HX_(".",2e,00,00,00),null());
HXLINE(  66)		if ((extIndex > (int)-1)) {
HXLINE(  68)			extension = path.substring((extIndex + (int)1),null());
            		}
HXLINE(  72)		this->contentLoaderInfo->url = request->url;
HXLINE(  74)		Bool _hx_tmp;
HXDLIN(  74)		Bool _hx_tmp1 = hx::IsNotNull( request->contentType );
HXDLIN(  74)		if (_hx_tmp1) {
HXLINE(  74)			_hx_tmp = (request->contentType == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  74)			_hx_tmp = true;
            		}
HXDLIN(  74)		if (_hx_tmp) {
HXLINE(  76)			::String _hx_tmp2;
HXDLIN(  76)			::String _hx_switch_0 = extension;
            			if (  (_hx_switch_0==HX_("gif",04,84,4e,00)) ){
HXLINE(  76)				_hx_tmp2 = HX_("image/gif",10,f4,ba,16);
HXDLIN(  76)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("jpeg",a8,f2,65,46)) ||  (_hx_switch_0==HX_("jpg",e1,d0,50,00)) ){
HXLINE(  76)				_hx_tmp2 = HX_("image/jpeg",1c,8d,db,ce);
HXDLIN(  76)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("js",c9,5c,00,00)) ){
HXLINE(  76)				_hx_tmp2 = HX_("application/javascript",cc,7a,f4,a7);
HXDLIN(  76)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("json",28,42,68,46)) ){
HXLINE(  76)				_hx_tmp2 = HX_("application/json",87,d8,7f,4e);
HXDLIN(  76)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("png",a9,5c,55,00)) ){
HXLINE(  76)				_hx_tmp2 = HX_("image/png",b5,cc,c1,16);
HXDLIN(  76)				goto _hx_goto_0;
            			}
            			if (  (_hx_switch_0==HX_("swf",42,ab,57,00)) ){
HXLINE(  76)				_hx_tmp2 = HX_("application/x-shockwave-flash",ea,f3,47,4a);
HXDLIN(  76)				goto _hx_goto_0;
            			}
            			/* default */{
HXLINE(  76)				_hx_tmp2 = HX_("application/x-www-form-urlencoded",9e,61,91,fa);
            			}
            			_hx_goto_0:;
HXDLIN(  76)			this->contentLoaderInfo->contentType = _hx_tmp2;
            		}
            		else {
HXLINE(  90)			this->contentLoaderInfo->contentType = request->contentType;
            		}
HXLINE(  94)		Bool _hx_tmp3;
HXDLIN(  94)		Int _hx_tmp4 = this->contentLoaderInfo->contentType.indexOf(HX_("/javascript",1c,04,67,9b),null());
HXDLIN(  94)		if ((_hx_tmp4 <= (int)-1)) {
HXLINE(  94)			Int _hx_tmp5 = this->contentLoaderInfo->contentType.indexOf(HX_("/ecmascript",ac,7b,0f,7d),null());
HXDLIN(  94)			_hx_tmp3 = (_hx_tmp5 > (int)-1);
            		}
            		else {
HXLINE(  94)			_hx_tmp3 = true;
            		}
HXDLIN(  94)		if (_hx_tmp3) {
HXLINE( 123)			this->BitmapData_onError(null());
HXLINE( 126)			return;
            		}
            		else {
HXLINE( 128)			Int _hx_tmp6 = this->contentLoaderInfo->contentType.indexOf(HX_("/json",d7,85,3d,56),null());
HXDLIN( 128)			if ((_hx_tmp6 > (int)-1)) {
            				HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_5, ::openfl::display::Loader,_gthis, ::openfl::net::URLLoader,loader, ::openfl::net::URLRequest,request) HXARGC(1)
            				void _hx_run( ::Dynamic e){
            					HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0, ::openfl::display::Loader,_gthis,::Array< Int >,total, ::openfl::_internal::swf::SWFLiteLibrary,library,::Array< ::String >,libraryData,::Array< Int >,loaded) HXARGC(0)
            					void _hx_run(){
            						HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",155,0x7a569d9f)
HXLINE( 155)						Bool _hx_tmp8 = (loaded->__get((int)0) >= total->__get((int)0));
HXDLIN( 155)						if (_hx_tmp8) {
HXLINE( 157)							::String _hx_tmp9 = libraryData->__get((int)0);
HXDLIN( 157)							library->swf = ::openfl::_internal::swf::SWFLite_obj::unserialize(_hx_tmp9);
HXLINE( 159)							_gthis->contentLoaderInfo->content = library->getMovieClip(HX_("",00,00,00,00));
HXLINE( 160)							_gthis->addChild(_gthis->contentLoaderInfo->content);
HXLINE( 162)							HX_VARI(  ::openfl::events::Event,event) =  ::openfl::events::Event_obj::__new(HX_("complete",b9,00,c8,7f),null(),null());
HXLINE( 163)							event->target = _gthis->contentLoaderInfo;
HXLINE( 164)							event->currentTarget = _gthis->contentLoaderInfo;
HXLINE( 165)							_gthis->contentLoaderInfo->dispatchEvent(event);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

            					HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",131,0x7a569d9f)
            					HX_STACK_ARG(e,"e")
HXLINE( 133)					::String text = ( (::String)(loader->data) );
HXDLIN( 133)					HX_VARI(  ::Dynamic,info) =  ::haxe::format::JsonParser_obj::__new(text)->parseRec();
HXLINE( 134)					hx::Class _hx_tmp7 = ::Type_obj::resolveClass( ::Dynamic(info->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)));
HXDLIN( 134)					HX_VARI(  ::openfl::_internal::swf::SWFLiteLibrary,library) = ( ( ::openfl::_internal::swf::SWFLiteLibrary)(::Type_obj::createInstance(_hx_tmp7,::cpp::VirtualArray_obj::__new(1)->init(0,null()))) );
HXLINE( 136)					::openfl::Assets_obj::registerLibrary( ::Dynamic(info->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic)),library);
HXLINE( 138)					HX_VARI( ::cpp::VirtualArray,manifest) = ( (::cpp::VirtualArray)(::haxe::Unserializer_obj::run( ::Dynamic(info->__Field(HX_("manifest",af,fb,29,d0),hx::paccDynamic)))) );
HXLINE( 139)					HX_VAR( ::String,assetType);
HXLINE( 141)					HX_VARI( ::String,basePath) = request->url;
HXLINE( 142)					basePath = ::StringTools_obj::replace(basePath,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 143)					HX_VARI( ::Array< ::String >,parts) = basePath.split(HX_("/",2f,00,00,00));
HXLINE( 144)					parts->pop();
HXLINE( 145)					parts->pop();
HXLINE( 146)					basePath = parts->join(HX_("/",2f,00,00,00));
HXLINE( 148)					HX_VARI( ::Array< ::String >,libraryData) = ::Array_obj< ::String >::__new(1)->init(0,null());
HXLINE( 150)					HX_VARI( ::Array< Int >,loaded) = ::Array_obj< Int >::fromData( _hx_array_data_3,1);
HXLINE( 151)					HX_VARI( ::Array< Int >,total) = ::Array_obj< Int >::fromData( _hx_array_data_4,1);
HXLINE( 153)					HX_VARI(  ::Dynamic,checkLoaded) =  ::Dynamic(new _hx_Closure_0(_gthis,total,library,libraryData,loaded));
HXLINE( 171)					{
HXLINE( 171)						HX_VARI( Int,_g) = (int)0;
HXDLIN( 171)						while((_g < manifest->get_length())){
HXLINE( 171)							HX_VARI(  ::Dynamic,asset) = manifest->__get(_g);
HXDLIN( 171)							++_g;
HXLINE( 173)							Bool _hx_tmp10 = !(::openfl::Assets_obj::exists( ::Dynamic(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)),null()));
HXDLIN( 173)							if (_hx_tmp10) {
HXLINE( 175)								assetType =  ::Dynamic(asset->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic));
HXLINE( 177)								::String _hx_switch_1 = assetType;
            								if (  (_hx_switch_1==HX_("IMAGE",3b,57,57,3b)) ){
            									HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_1, ::Dynamic,asset, ::Dynamic,checkLoaded,::Array< Int >,loaded) HXARGC(1)
            									void _hx_run( ::openfl::display::BitmapData bitmapData){
            										HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",183,0x7a569d9f)
            										HX_STACK_ARG(bitmapData,"bitmapData")
HXLINE( 185)										loaded[(int)0]++;
HXLINE( 186)										checkLoaded();
HXLINE( 188)										::openfl::IAssetCache_obj::setBitmapData(::openfl::Assets_obj::cache, ::Dynamic(asset->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)),bitmapData);
            									}
            									HX_END_LOCAL_FUNC1((void))

            									HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::openfl::display::Loader,_gthis) HXARGC(0)
            									void _hx_run(){
            										HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",190,0x7a569d9f)
HXLINE( 190)										_gthis->BitmapData_onError(null());
            									}
            									HX_END_LOCAL_FUNC0((void))

HXLINE( 181)									total[(int)0]++;
HXLINE( 183)									::String _hx_tmp11 = (basePath + HX_("/",2f,00,00,00));
HXDLIN( 183)									::String _hx_tmp12 = ::Std_obj::string( ::Dynamic(asset->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)));
HXDLIN( 183)									::openfl::display::BitmapData_obj::fromFile((_hx_tmp11 + _hx_tmp12), ::Dynamic(new _hx_Closure_1(asset,checkLoaded,loaded)), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 179)									goto _hx_goto_2;
            								}
            								if (  (_hx_switch_1==HX_("TEXT",ad,94,ba,37)) ){
            									HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_3, ::openfl::net::URLLoader,textLoader, ::Dynamic,checkLoaded,::Array< Int >,loaded,::Array< ::String >,libraryData) HXARGC(1)
            									void _hx_run( ::Dynamic _){
            										HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",197,0x7a569d9f)
            										HX_STACK_ARG(_,"_")
HXLINE( 199)										libraryData[(int)0] = textLoader->data;
HXLINE( 201)										loaded[(int)0]++;
HXLINE( 202)										checkLoaded();
            									}
            									HX_END_LOCAL_FUNC1((void))

            									HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_4, ::openfl::display::Loader,_gthis) HXARGC(1)
            									void _hx_run( ::Dynamic e1){
            										HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",207,0x7a569d9f)
            										HX_STACK_ARG(e1,"e1")
HXLINE( 207)										_gthis->BitmapData_onError(e1);
            									}
            									HX_END_LOCAL_FUNC1((void))

HXLINE( 194)									total[(int)0]++;
HXLINE( 196)									HX_VARI(  ::openfl::net::URLLoader,textLoader) =  ::openfl::net::URLLoader_obj::__new(null());
HXLINE( 197)									textLoader->addEventListener(HX_("complete",b9,00,c8,7f), ::Dynamic(new _hx_Closure_3(textLoader,checkLoaded,loaded,libraryData)),null(),null(),null());
HXLINE( 205)									textLoader->addEventListener(HX_("ioError",02,fe,41,76), ::Dynamic(new _hx_Closure_4(_gthis)),null(),null(),null());
HXLINE( 210)									textLoader->dataFormat = (int)1;
HXLINE( 211)									::String _hx_tmp13 = (basePath + HX_("/",2f,00,00,00));
HXDLIN( 211)									::String _hx_tmp14 = ::Std_obj::string( ::Dynamic(asset->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)));
HXDLIN( 211)									textLoader->load( ::openfl::net::URLRequest_obj::__new((_hx_tmp13 + _hx_tmp14)));
HXLINE( 192)									goto _hx_goto_2;
            								}
            								/* default */{
            								}
            								_hx_goto_2:;
            							}
            						}
            					}
HXLINE( 222)					loaded[(int)0]++;
HXLINE( 223)					checkLoaded();
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_6, ::openfl::display::Loader,_gthis) HXARGC(1)
            				void _hx_run( ::Dynamic e2){
            					HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",228,0x7a569d9f)
            					HX_STACK_ARG(e2,"e2")
HXLINE( 228)					_gthis->BitmapData_onError(e2);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 130)				HX_VARI(  ::openfl::net::URLLoader,loader) =  ::openfl::net::URLLoader_obj::__new(null());
HXLINE( 131)				loader->addEventListener(HX_("complete",b9,00,c8,7f), ::Dynamic(new _hx_Closure_5(_gthis,loader,request)),null(),null(),null());
HXLINE( 226)				loader->addEventListener(HX_("ioError",02,fe,41,76), ::Dynamic(new _hx_Closure_6(_gthis)),null(),null(),null());
HXLINE( 231)				loader->dataFormat = (int)1;
HXLINE( 232)				loader->load(request);
            			}
            		}
HXLINE( 237)		Bool _hx_tmp15;
HXDLIN( 237)		Bool _hx_tmp16;
HXDLIN( 237)		Bool _hx_tmp17 = hx::IsNotNull( request->url );
HXDLIN( 237)		if (_hx_tmp17) {
HXLINE( 237)			Int _hx_tmp18 = request->url.indexOf(HX_("http://",52,75,cd,5a),null());
HXDLIN( 237)			_hx_tmp16 = (_hx_tmp18 > (int)-1);
            		}
            		else {
HXLINE( 237)			_hx_tmp16 = false;
            		}
HXDLIN( 237)		if (!(_hx_tmp16)) {
HXLINE( 237)			Int _hx_tmp19 = request->url.indexOf(HX_("https://",cf,b4,ae,3e),null());
HXDLIN( 237)			_hx_tmp15 = (_hx_tmp19 > (int)-1);
            		}
            		else {
HXLINE( 237)			_hx_tmp15 = true;
            		}
HXDLIN( 237)		if (_hx_tmp15) {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_7, ::openfl::display::Loader,_gthis, ::openfl::net::URLLoader,loader1) HXARGC(1)
            			void _hx_run( ::Dynamic e3){
            				HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",242,0x7a569d9f)
            				HX_STACK_ARG(e3,"e3")
HXLINE( 242)				 ::openfl::display::BitmapData _hx_tmp20 = ::openfl::display::BitmapData_obj::fromBytes(loader1->data,null(),null());
HXDLIN( 242)				_gthis->BitmapData_onLoad(_hx_tmp20);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_8, ::openfl::display::Loader,_gthis) HXARGC(1)
            			void _hx_run( ::Dynamic e4){
            				HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",247,0x7a569d9f)
            				HX_STACK_ARG(e4,"e4")
HXLINE( 247)				_gthis->BitmapData_onError(e4);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 239)			HX_VARI_NAME(  ::openfl::net::URLLoader,loader1,"loader") =  ::openfl::net::URLLoader_obj::__new(null());
HXLINE( 240)			loader1->addEventListener(HX_("complete",b9,00,c8,7f), ::Dynamic(new _hx_Closure_7(_gthis,loader1)),null(),null(),null());
HXLINE( 245)			loader1->addEventListener(HX_("ioError",02,fe,41,76), ::Dynamic(new _hx_Closure_8(_gthis)),null(),null(),null());
HXLINE( 250)			loader1->dataFormat = (int)0;
HXLINE( 251)			loader1->load(request);
HXLINE( 252)			return;
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_11,::String,path, ::lime::_hx_system::BackgroundWorker,worker) HXARGC(1)
            			void _hx_run( ::Dynamic _1){
            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_9, ::lime::_hx_system::BackgroundWorker,worker) HXARGC(1)
            				void _hx_run( ::openfl::display::BitmapData bitmapData1){
            					HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",262,0x7a569d9f)
            					HX_STACK_ARG(bitmapData1,"bitmapData1")
HXLINE( 262)					worker->sendComplete(bitmapData1);
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_10, ::lime::_hx_system::BackgroundWorker,worker) HXARGC(0)
            				void _hx_run(){
            					HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",262,0x7a569d9f)
HXLINE( 262)					worker->sendError(HX_("ioError",02,fe,41,76));
            				}
            				HX_END_LOCAL_FUNC0((void))

            				HX_STACK_FRAME("openfl.display.Loader","load",0x0deacc37,"openfl.display.Loader.load","openfl/display/Loader.hx",262,0x7a569d9f)
            				HX_STACK_ARG(_1,"_1")
HXLINE( 262)				::openfl::display::BitmapData_obj::fromFile(path, ::Dynamic(new _hx_Closure_9(worker)), ::Dynamic(new _hx_Closure_10(worker)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 258)			HX_VARI(  ::lime::_hx_system::BackgroundWorker,worker) =  ::lime::_hx_system::BackgroundWorker_obj::__new();
HXLINE( 260)			worker->doWork->add( ::Dynamic(new _hx_Closure_11(path,worker)),null(),null());
HXLINE( 266)			worker->onError->add(this->BitmapData_onError_dyn(),null(),null());
HXLINE( 267)			worker->onComplete->add(this->BitmapData_onLoad_dyn(),null(),null());
HXLINE( 268)			worker->run(null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Loader_obj,load,(void))

void Loader_obj::loadBytes( ::openfl::utils::ByteArrayData buffer, ::openfl::_hx_system::LoaderContext context){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::lime::_hx_system::BackgroundWorker,worker, ::openfl::utils::ByteArrayData,buffer) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::lime::_hx_system::BackgroundWorker,worker) HXARGC(1)
            			void _hx_run( ::openfl::display::BitmapData bitmapData){
            				HX_STACK_FRAME("openfl.display.Loader","loadBytes",0x5dd804b4,"openfl.display.Loader.loadBytes","openfl/display/Loader.hx",281,0x7a569d9f)
            				HX_STACK_ARG(bitmapData,"bitmapData")
HXLINE( 281)				worker->sendComplete(bitmapData);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("openfl.display.Loader","loadBytes",0x5dd804b4,"openfl.display.Loader.loadBytes","openfl/display/Loader.hx",281,0x7a569d9f)
            			HX_STACK_ARG(_,"_")
HXLINE( 281)			::openfl::display::BitmapData_obj::fromBytes(buffer,null(), ::Dynamic(new _hx_Closure_0(worker)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.Loader","loadBytes",0x5dd804b4,"openfl.display.Loader.loadBytes","openfl/display/Loader.hx",275,0x7a569d9f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
            	HX_STACK_ARG(context,"context")
HXLINE( 277)		HX_VARI(  ::lime::_hx_system::BackgroundWorker,worker) =  ::lime::_hx_system::BackgroundWorker_obj::__new();
HXLINE( 279)		worker->doWork->add( ::Dynamic(new _hx_Closure_1(worker,buffer)),null(),null());
HXLINE( 285)		worker->onComplete->add(this->BitmapData_onLoad_dyn(),null(),null());
HXLINE( 286)		worker->run(null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(Loader_obj,loadBytes,(void))

void Loader_obj::unload(){
            	HX_STACK_FRAME("openfl.display.Loader","unload",0x847d3950,"openfl.display.Loader.unload","openfl/display/Loader.hx",293,0x7a569d9f)
            	HX_STACK_THIS(this)
HXLINE( 293)		Int _hx_tmp = this->get_numChildren();
HXDLIN( 293)		if ((_hx_tmp > (int)0)) {
HXLINE( 295)			while(true){
HXLINE( 295)				Int _hx_tmp1 = this->get_numChildren();
HXDLIN( 295)				if (!((_hx_tmp1 > (int)0))) {
HXLINE( 295)					goto _hx_goto_5;
            				}
HXLINE( 297)				this->removeChildAt((int)0);
            			}
            			_hx_goto_5:;
HXLINE( 301)			this->content = null();
HXLINE( 302)			this->contentLoaderInfo->url = null();
HXLINE( 303)			this->contentLoaderInfo->contentType = null();
HXLINE( 304)			this->contentLoaderInfo->content = null();
HXLINE( 305)			this->contentLoaderInfo->bytesLoaded = (int)0;
HXLINE( 306)			this->contentLoaderInfo->bytesTotal = (int)0;
HXLINE( 307)			this->contentLoaderInfo->width = (int)0;
HXLINE( 308)			this->contentLoaderInfo->height = (int)0;
HXLINE( 310)			HX_VARI(  ::openfl::events::Event,event) =  ::openfl::events::Event_obj::__new(HX_("unload",ff,a0,8c,65),null(),null());
HXLINE( 311)			event->currentTarget = hx::ObjectPtr<OBJ_>(this);
HXLINE( 312)			this->_hx___dispatchEvent(event);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Loader_obj,unload,(void))

void Loader_obj::unloadAndStop(hx::Null< Bool >  __o_gc){
Bool gc = __o_gc.Default(true);
            	HX_STACK_FRAME("openfl.display.Loader","unloadAndStop",0x25cb8709,"openfl.display.Loader.unloadAndStop","openfl/display/Loader.hx",321,0x7a569d9f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gc,"gc")
HXLINE( 321)		::openfl::Lib_obj::notImplemented(hx::SourceInfo(HX_("Loader.hx",6b,e8,d2,9c),321,HX_("openfl.display.Loader",fd,67,b0,e2),HX_("unloadAndStop",3a,03,03,7a)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Loader_obj,unloadAndStop,(void))

void Loader_obj::BitmapData_onLoad( ::openfl::display::BitmapData bitmapData){
            	HX_STACK_FRAME("openfl.display.Loader","BitmapData_onLoad",0x9c5aef1a,"openfl.display.Loader.BitmapData_onLoad","openfl/display/Loader.hx",333,0x7a569d9f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmapData,"bitmapData")
HXLINE( 335)		this->contentLoaderInfo->content =  ::openfl::display::Bitmap_obj::__new(bitmapData,null(),null());
HXLINE( 336)		this->content = this->contentLoaderInfo->content;
HXLINE( 337)		this->addChild(this->content);
HXLINE( 339)		HX_VARI(  ::openfl::events::Event,event) =  ::openfl::events::Event_obj::__new(HX_("complete",b9,00,c8,7f),null(),null());
HXLINE( 340)		event->target = this->contentLoaderInfo;
HXLINE( 341)		event->currentTarget = this->contentLoaderInfo;
HXLINE( 342)		this->contentLoaderInfo->dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Loader_obj,BitmapData_onLoad,(void))

void Loader_obj::BitmapData_onError( ::Dynamic _){
            	HX_STACK_FRAME("openfl.display.Loader","BitmapData_onError",0x2d70cc54,"openfl.display.Loader.BitmapData_onError","openfl/display/Loader.hx",347,0x7a569d9f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 349)		HX_VARI(  ::openfl::events::IOErrorEvent,event) =  ::openfl::events::IOErrorEvent_obj::__new(HX_("ioError",02,fe,41,76),null(),null(),null(),null());
HXLINE( 350)		event->target = this->contentLoaderInfo;
HXLINE( 351)		event->currentTarget = this->contentLoaderInfo;
HXLINE( 352)		this->contentLoaderInfo->dispatchEvent(event);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Loader_obj,BitmapData_onError,(void))


Loader_obj::Loader_obj()
{
}

void Loader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Loader);
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_MEMBER_NAME(contentLoaderInfo,"contentLoaderInfo");
	 ::openfl::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Loader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(content,"content");
	HX_VISIT_MEMBER_NAME(contentLoaderInfo,"contentLoaderInfo");
	 ::openfl::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Loader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return hx::Val( content); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadBytes") ) { return hx::Val( loadBytes_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unloadAndStop") ) { return hx::Val( unloadAndStop_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"contentLoaderInfo") ) { return hx::Val( contentLoaderInfo); }
		if (HX_FIELD_EQ(inName,"BitmapData_onLoad") ) { return hx::Val( BitmapData_onLoad_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"BitmapData_onError") ) { return hx::Val( BitmapData_onError_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Loader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"contentLoaderInfo") ) { contentLoaderInfo=inValue.Cast<  ::openfl::display::LoaderInfo >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Loader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("content","\x39","\x8d","\x77","\x19"));
	outFields->push(HX_HCSTRING("contentLoaderInfo","\xba","\x64","\x65","\x14"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Loader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(Loader_obj,content),HX_HCSTRING("content","\x39","\x8d","\x77","\x19")},
	{hx::fsObject /*::openfl::display::LoaderInfo*/ ,(int)offsetof(Loader_obj,contentLoaderInfo),HX_HCSTRING("contentLoaderInfo","\xba","\x64","\x65","\x14")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Loader_obj_sStaticStorageInfo = 0;
#endif

static ::String Loader_obj_sMemberFields[] = {
	HX_HCSTRING("content","\x39","\x8d","\x77","\x19"),
	HX_HCSTRING("contentLoaderInfo","\xba","\x64","\x65","\x14"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("unloadAndStop","\x3a","\x03","\x03","\x7a"),
	HX_HCSTRING("BitmapData_onLoad","\xcb","\xd7","\xa2","\xbe"),
	HX_HCSTRING("BitmapData_onError","\x83","\x7e","\x14","\x0a"),
	::String(null()) };

static void Loader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Loader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Loader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Loader_obj::__mClass,"__mClass");
};

#endif

hx::Class Loader_obj::__mClass;

void Loader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Loader","\xfd","\x67","\xb0","\xe2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Loader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Loader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Loader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Loader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Loader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Loader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
