// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_filters__ColorMatrixFilter_ColorMatrixShader
#include <openfl/filters/_ColorMatrixFilter/ColorMatrixShader.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif

namespace openfl{
namespace filters{
namespace _ColorMatrixFilter{

void ColorMatrixShader_obj::__construct(){
            	HX_STACK_FRAME("openfl.filters._ColorMatrixFilter.ColorMatrixShader","new",0xf11da59b,"openfl.filters._ColorMatrixFilter.ColorMatrixShader.new","openfl/filters/ColorMatrixFilter.hx",149,0xb64128b5)
            	HX_STACK_THIS(this)
HXLINE( 769)		Bool _hx_tmp = hx::IsNull( this->_hx___glFragmentSource );
HXDLIN( 769)		if (_hx_tmp) {
HXLINE( 769)			this->_hx___glFragmentSource = HX_("varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}",82,f3,21,4e);
            		}
HXLINE( 151)		super::__construct(null());
HXLINE( 153)		 ::Dynamic(this->get_data()->__Field(HX_("uMultipliers",5d,5b,61,e5),hx::paccDynamic))->__SetField(HX_("value",71,7f,b8,31),::cpp::VirtualArray_obj::__new(16)->init(0,(int)1)->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(int)1)->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,(int)0)->init(13,(int)0)->init(14,(int)0)->init(15,(int)1),hx::paccDynamic);
HXLINE( 154)		 ::Dynamic(this->get_data()->__Field(HX_("uOffsets",8b,59,c4,c8),hx::paccDynamic))->__SetField(HX_("value",71,7f,b8,31),::cpp::VirtualArray_obj::__new(4)->init(0,(int)0)->init(1,(int)0)->init(2,(int)0)->init(3,(int)0),hx::paccDynamic);
            	}

Dynamic ColorMatrixShader_obj::__CreateEmpty() { return new ColorMatrixShader_obj; }

hx::ObjectPtr< ColorMatrixShader_obj > ColorMatrixShader_obj::__new()
{
	hx::ObjectPtr< ColorMatrixShader_obj > _hx_result = new ColorMatrixShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ColorMatrixShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorMatrixShader_obj > _hx_result = new ColorMatrixShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

void ColorMatrixShader_obj::init(::Array< Float > matrix){
            	HX_STACK_FRAME("openfl.filters._ColorMatrixFilter.ColorMatrixShader","init",0x058bf975,"openfl.filters._ColorMatrixFilter.ColorMatrixShader.init","openfl/filters/ColorMatrixFilter.hx",159,0xb64128b5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 161)		HX_VARI( ::Array< Float >,multipliers) = ( (::Array< Float >)( ::Dynamic(this->get_data()->__Field(HX_("uMultipliers",5d,5b,61,e5),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE( 162)		HX_VARI( ::Array< Float >,offsets) = ( (::Array< Float >)( ::Dynamic(this->get_data()->__Field(HX_("uOffsets",8b,59,c4,c8),hx::paccDynamic))->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXLINE( 164)		Float _hx_tmp = matrix->__get((int)0);
HXDLIN( 164)		multipliers[(int)0] = _hx_tmp;
HXLINE( 165)		Float _hx_tmp1 = matrix->__get((int)1);
HXDLIN( 165)		multipliers[(int)1] = _hx_tmp1;
HXLINE( 166)		Float _hx_tmp2 = matrix->__get((int)2);
HXDLIN( 166)		multipliers[(int)2] = _hx_tmp2;
HXLINE( 167)		Float _hx_tmp3 = matrix->__get((int)3);
HXDLIN( 167)		multipliers[(int)3] = _hx_tmp3;
HXLINE( 168)		Float _hx_tmp4 = matrix->__get((int)5);
HXDLIN( 168)		multipliers[(int)4] = _hx_tmp4;
HXLINE( 169)		Float _hx_tmp5 = matrix->__get((int)6);
HXDLIN( 169)		multipliers[(int)5] = _hx_tmp5;
HXLINE( 170)		Float _hx_tmp6 = matrix->__get((int)7);
HXDLIN( 170)		multipliers[(int)6] = _hx_tmp6;
HXLINE( 171)		Float _hx_tmp7 = matrix->__get((int)8);
HXDLIN( 171)		multipliers[(int)7] = _hx_tmp7;
HXLINE( 172)		Float _hx_tmp8 = matrix->__get((int)10);
HXDLIN( 172)		multipliers[(int)8] = _hx_tmp8;
HXLINE( 173)		Float _hx_tmp9 = matrix->__get((int)11);
HXDLIN( 173)		multipliers[(int)9] = _hx_tmp9;
HXLINE( 174)		Float _hx_tmp10 = matrix->__get((int)12);
HXDLIN( 174)		multipliers[(int)10] = _hx_tmp10;
HXLINE( 175)		Float _hx_tmp11 = matrix->__get((int)13);
HXDLIN( 175)		multipliers[(int)11] = _hx_tmp11;
HXLINE( 176)		Float _hx_tmp12 = matrix->__get((int)15);
HXDLIN( 176)		multipliers[(int)12] = _hx_tmp12;
HXLINE( 177)		Float _hx_tmp13 = matrix->__get((int)16);
HXDLIN( 177)		multipliers[(int)13] = _hx_tmp13;
HXLINE( 178)		Float _hx_tmp14 = matrix->__get((int)17);
HXDLIN( 178)		multipliers[(int)14] = _hx_tmp14;
HXLINE( 179)		Float _hx_tmp15 = matrix->__get((int)18);
HXDLIN( 179)		multipliers[(int)15] = _hx_tmp15;
HXLINE( 181)		Float _hx_tmp16 = ((Float)matrix->__get((int)4) / (Float)((Float)255.0));
HXDLIN( 181)		offsets[(int)0] = _hx_tmp16;
HXLINE( 182)		Float _hx_tmp17 = ((Float)matrix->__get((int)9) / (Float)((Float)255.0));
HXDLIN( 182)		offsets[(int)1] = _hx_tmp17;
HXLINE( 183)		Float _hx_tmp18 = ((Float)matrix->__get((int)14) / (Float)((Float)255.0));
HXDLIN( 183)		offsets[(int)2] = _hx_tmp18;
HXLINE( 184)		Float _hx_tmp19 = ((Float)matrix->__get((int)19) / (Float)((Float)255.0));
HXDLIN( 184)		offsets[(int)3] = _hx_tmp19;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorMatrixShader_obj,init,(void))


ColorMatrixShader_obj::ColorMatrixShader_obj()
{
}

hx::Val ColorMatrixShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ColorMatrixShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *ColorMatrixShader_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorMatrixShader_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void ColorMatrixShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorMatrixShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorMatrixShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorMatrixShader_obj::__mClass,"__mClass");
};

#endif

hx::Class ColorMatrixShader_obj::__mClass;

void ColorMatrixShader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.filters._ColorMatrixFilter.ColorMatrixShader","\x29","\x3c","\x26","\xa1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ColorMatrixShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColorMatrixShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColorMatrixShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorMatrixShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorMatrixShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorMatrixShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace filters
} // end namespace _ColorMatrixFilter
