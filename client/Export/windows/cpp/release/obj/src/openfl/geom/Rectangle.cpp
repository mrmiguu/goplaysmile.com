// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace geom{

void Rectangle_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Float width = __o_width.Default(0);
Float height = __o_height.Default(0);
            	HX_STACK_FRAME("openfl.geom.Rectangle","new",0xe1148d6d,"openfl.geom.Rectangle.new","openfl/geom/Rectangle.hx",31,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(  33)		this->x = x;
HXLINE(  34)		this->y = y;
HXLINE(  35)		this->width = width;
HXLINE(  36)		this->height = height;
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_width,hx::Null< Float >  __o_height)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(__o_x,__o_y,__o_width,__o_height);
	return _hx_result;
}

Dynamic Rectangle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

 ::openfl::geom::Rectangle Rectangle_obj::clone(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","clone",0x6896edaa,"openfl.geom.Rectangle.clone","openfl/geom/Rectangle.hx",43,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE(  43)		return  ::openfl::geom::Rectangle_obj::__new(this->x,this->y,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,clone,return )

Bool Rectangle_obj::contains(Float x,Float y){
            	HX_STACK_FRAME("openfl.geom.Rectangle","contains",0x39912df2,"openfl.geom.Rectangle.contains","openfl/geom/Rectangle.hx",50,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  50)		Bool _hx_tmp;
HXDLIN(  50)		Bool _hx_tmp1;
HXDLIN(  50)		if ((x >= this->x)) {
HXLINE(  50)			_hx_tmp1 = (y >= this->y);
            		}
            		else {
HXLINE(  50)			_hx_tmp1 = false;
            		}
HXDLIN(  50)		if (_hx_tmp1) {
HXLINE(  50)			Float _hx_tmp2 = this->get_right();
HXDLIN(  50)			_hx_tmp = (x < _hx_tmp2);
            		}
            		else {
HXLINE(  50)			_hx_tmp = false;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  50)			Float _hx_tmp3 = this->get_bottom();
HXDLIN(  50)			return (y < _hx_tmp3);
            		}
            		else {
HXLINE(  50)			return false;
            		}
HXDLIN(  50)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,contains,return )

Bool Rectangle_obj::containsPoint( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.geom.Rectangle","containsPoint",0xa42628fe,"openfl.geom.Rectangle.containsPoint","openfl/geom/Rectangle.hx",57,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE(  57)		return this->contains(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsPoint,return )

Bool Rectangle_obj::containsRect( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.geom.Rectangle","containsRect",0x6ba48836,"openfl.geom.Rectangle.containsRect","openfl/geom/Rectangle.hx",64,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE(  64)		Bool _hx_tmp;
HXDLIN(  64)		if (!((rect->width <= (int)0))) {
HXLINE(  64)			_hx_tmp = (rect->height <= (int)0);
            		}
            		else {
HXLINE(  64)			_hx_tmp = true;
            		}
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  66)			Bool _hx_tmp1;
HXDLIN(  66)			Bool _hx_tmp2;
HXDLIN(  66)			if ((rect->x > this->x)) {
HXLINE(  66)				_hx_tmp2 = (rect->y > this->y);
            			}
            			else {
HXLINE(  66)				_hx_tmp2 = false;
            			}
HXDLIN(  66)			if (_hx_tmp2) {
HXLINE(  66)				Float _hx_tmp3 = rect->get_right();
HXDLIN(  66)				Float _hx_tmp4 = this->get_right();
HXDLIN(  66)				_hx_tmp1 = (_hx_tmp3 < _hx_tmp4);
            			}
            			else {
HXLINE(  66)				_hx_tmp1 = false;
            			}
HXDLIN(  66)			if (_hx_tmp1) {
HXLINE(  66)				Float _hx_tmp5 = rect->get_bottom();
HXDLIN(  66)				Float _hx_tmp6 = this->get_bottom();
HXDLIN(  66)				return (_hx_tmp5 < _hx_tmp6);
            			}
            			else {
HXLINE(  66)				return false;
            			}
            		}
            		else {
HXLINE(  70)			Bool _hx_tmp7;
HXDLIN(  70)			Bool _hx_tmp8;
HXDLIN(  70)			if ((rect->x >= this->x)) {
HXLINE(  70)				_hx_tmp8 = (rect->y >= this->y);
            			}
            			else {
HXLINE(  70)				_hx_tmp8 = false;
            			}
HXDLIN(  70)			if (_hx_tmp8) {
HXLINE(  70)				Float _hx_tmp9 = rect->get_right();
HXDLIN(  70)				Float _hx_tmp10 = this->get_right();
HXDLIN(  70)				_hx_tmp7 = (_hx_tmp9 <= _hx_tmp10);
            			}
            			else {
HXLINE(  70)				_hx_tmp7 = false;
            			}
HXDLIN(  70)			if (_hx_tmp7) {
HXLINE(  70)				Float _hx_tmp11 = rect->get_bottom();
HXDLIN(  70)				Float _hx_tmp12 = this->get_bottom();
HXDLIN(  70)				return (_hx_tmp11 <= _hx_tmp12);
            			}
            			else {
HXLINE(  70)				return false;
            			}
            		}
HXLINE(  64)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsRect,return )

void Rectangle_obj::copyFrom( ::openfl::geom::Rectangle sourceRect){
            	HX_STACK_FRAME("openfl.geom.Rectangle","copyFrom",0xd576df92,"openfl.geom.Rectangle.copyFrom","openfl/geom/Rectangle.hx",77,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceRect,"sourceRect")
HXLINE(  79)		this->x = sourceRect->x;
HXLINE(  80)		this->y = sourceRect->y;
HXLINE(  81)		this->width = sourceRect->width;
HXLINE(  82)		this->height = sourceRect->height;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,copyFrom,(void))

Bool Rectangle_obj::equals( ::openfl::geom::Rectangle toCompare){
            	HX_STACK_FRAME("openfl.geom.Rectangle","equals",0xcd1e1752,"openfl.geom.Rectangle.equals","openfl/geom/Rectangle.hx",89,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toCompare,"toCompare")
HXLINE(  89)		if (hx::IsEq( toCompare,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(  89)			return true;
            		}
            		else {
HXLINE(  90)			Bool _hx_tmp;
HXDLIN(  90)			Bool _hx_tmp1;
HXDLIN(  90)			Bool _hx_tmp2;
HXDLIN(  90)			Bool _hx_tmp3 = hx::IsNotNull( toCompare );
HXDLIN(  90)			if (_hx_tmp3) {
HXLINE(  90)				_hx_tmp2 = (this->x == toCompare->x);
            			}
            			else {
HXLINE(  90)				_hx_tmp2 = false;
            			}
HXDLIN(  90)			if (_hx_tmp2) {
HXLINE(  90)				_hx_tmp1 = (this->y == toCompare->y);
            			}
            			else {
HXLINE(  90)				_hx_tmp1 = false;
            			}
HXDLIN(  90)			if (_hx_tmp1) {
HXLINE(  90)				_hx_tmp = (this->width == toCompare->width);
            			}
            			else {
HXLINE(  90)				_hx_tmp = false;
            			}
HXDLIN(  90)			if (_hx_tmp) {
HXLINE(  90)				return (this->height == toCompare->height);
            			}
            			else {
HXLINE(  90)				return false;
            			}
            		}
HXLINE(  89)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,equals,return )

void Rectangle_obj::inflate(Float dx,Float dy){
            	HX_STACK_FRAME("openfl.geom.Rectangle","inflate",0x84b46414,"openfl.geom.Rectangle.inflate","openfl/geom/Rectangle.hx",95,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dx,"dx")
            	HX_STACK_ARG(dy,"dy")
HXLINE(  97)		hx::SubEq(this->x,dx);
HXDLIN(  97)		hx::AddEq(this->width,(dx * (int)2));
HXLINE(  98)		hx::SubEq(this->y,dy);
HXDLIN(  98)		hx::AddEq(this->height,(dy * (int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,inflate,(void))

void Rectangle_obj::inflatePoint( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.geom.Rectangle","inflatePoint",0xf7c1779c,"openfl.geom.Rectangle.inflatePoint","openfl/geom/Rectangle.hx",105,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 105)		this->inflate(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,inflatePoint,(void))

 ::openfl::geom::Rectangle Rectangle_obj::intersection( ::openfl::geom::Rectangle toIntersect){
            	HX_STACK_FRAME("openfl.geom.Rectangle","intersection",0x4de95b9c,"openfl.geom.Rectangle.intersection","openfl/geom/Rectangle.hx",110,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toIntersect,"toIntersect")
HXLINE( 112)		HX_VAR( Float,x0);
HXDLIN( 112)		if ((this->x < toIntersect->x)) {
HXLINE( 112)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 112)			x0 = this->x;
            		}
HXLINE( 113)		HX_VAR( Float,x1);
HXDLIN( 113)		Float _hx_tmp = this->get_right();
HXDLIN( 113)		Float _hx_tmp1 = toIntersect->get_right();
HXDLIN( 113)		if ((_hx_tmp > _hx_tmp1)) {
HXLINE( 113)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 113)			x1 = this->get_right();
            		}
HXLINE( 115)		if ((x1 <= x0)) {
HXLINE( 117)			return  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            		}
HXLINE( 121)		HX_VAR( Float,y0);
HXDLIN( 121)		if ((this->y < toIntersect->y)) {
HXLINE( 121)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 121)			y0 = this->y;
            		}
HXLINE( 122)		HX_VAR( Float,y1);
HXDLIN( 122)		Float _hx_tmp2 = this->get_bottom();
HXDLIN( 122)		Float _hx_tmp3 = toIntersect->get_bottom();
HXDLIN( 122)		if ((_hx_tmp2 > _hx_tmp3)) {
HXLINE( 122)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 122)			y1 = this->get_bottom();
            		}
HXLINE( 124)		if ((y1 <= y0)) {
HXLINE( 126)			return  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            		}
HXLINE( 130)		return  ::openfl::geom::Rectangle_obj::__new(x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersection,return )

Bool Rectangle_obj::intersects( ::openfl::geom::Rectangle toIntersect){
            	HX_STACK_FRAME("openfl.geom.Rectangle","intersects",0xc0fc7147,"openfl.geom.Rectangle.intersects","openfl/geom/Rectangle.hx",135,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toIntersect,"toIntersect")
HXLINE( 137)		HX_VAR( Float,x0);
HXDLIN( 137)		if ((this->x < toIntersect->x)) {
HXLINE( 137)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 137)			x0 = this->x;
            		}
HXLINE( 138)		HX_VAR( Float,x1);
HXDLIN( 138)		Float _hx_tmp = this->get_right();
HXDLIN( 138)		Float _hx_tmp1 = toIntersect->get_right();
HXDLIN( 138)		if ((_hx_tmp > _hx_tmp1)) {
HXLINE( 138)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 138)			x1 = this->get_right();
            		}
HXLINE( 140)		if ((x1 <= x0)) {
HXLINE( 142)			return false;
            		}
HXLINE( 146)		HX_VAR( Float,y0);
HXDLIN( 146)		if ((this->y < toIntersect->y)) {
HXLINE( 146)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 146)			y0 = this->y;
            		}
HXLINE( 147)		HX_VAR( Float,y1);
HXDLIN( 147)		Float _hx_tmp2 = this->get_bottom();
HXDLIN( 147)		Float _hx_tmp3 = toIntersect->get_bottom();
HXDLIN( 147)		if ((_hx_tmp2 > _hx_tmp3)) {
HXLINE( 147)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 147)			y1 = this->get_bottom();
            		}
HXLINE( 149)		return (y1 > y0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersects,return )

Bool Rectangle_obj::isEmpty(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","isEmpty",0x84f8a5d0,"openfl.geom.Rectangle.isEmpty","openfl/geom/Rectangle.hx",156,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 156)		if (!((this->width <= (int)0))) {
HXLINE( 156)			return (this->height <= (int)0);
            		}
            		else {
HXLINE( 156)			return true;
            		}
HXDLIN( 156)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,isEmpty,return )

void Rectangle_obj::offset(Float dx,Float dy){
            	HX_STACK_FRAME("openfl.geom.Rectangle","offset",0x6d6ac0a6,"openfl.geom.Rectangle.offset","openfl/geom/Rectangle.hx",161,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dx,"dx")
            	HX_STACK_ARG(dy,"dy")
HXLINE( 163)		hx::AddEq(this->x,dx);
HXLINE( 164)		hx::AddEq(this->y,dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,offset,(void))

void Rectangle_obj::offsetPoint( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.geom.Rectangle","offsetPoint",0xf09849ca,"openfl.geom.Rectangle.offsetPoint","openfl/geom/Rectangle.hx",169,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 171)		hx::AddEq(this->x,point->x);
HXLINE( 172)		hx::AddEq(this->y,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,offsetPoint,(void))

void Rectangle_obj::setEmpty(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","setEmpty",0x8b24775e,"openfl.geom.Rectangle.setEmpty","openfl/geom/Rectangle.hx",179,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 179)		this->x = (this->y = (this->width = (this->height = (int)0)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,setEmpty,(void))

void Rectangle_obj::setTo(Float xa,Float ya,Float widtha,Float heighta){
            	HX_STACK_FRAME("openfl.geom.Rectangle","setTo",0x9a636c0a,"openfl.geom.Rectangle.setTo","openfl/geom/Rectangle.hx",184,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xa,"xa")
            	HX_STACK_ARG(ya,"ya")
            	HX_STACK_ARG(widtha,"widtha")
            	HX_STACK_ARG(heighta,"heighta")
HXLINE( 186)		this->x = xa;
HXLINE( 187)		this->y = ya;
HXLINE( 188)		this->width = widtha;
HXLINE( 189)		this->height = heighta;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,setTo,(void))

::String Rectangle_obj::toString(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","toString",0x4584a47f,"openfl.geom.Rectangle.toString","openfl/geom/Rectangle.hx",196,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 196)		return ((((((((HX_("(x=",ed,c2,1e,00) + this->x) + HX_(", y=",18,15,2e,1d)) + this->y) + HX_(", width=",eb,04,57,53)) + this->width) + HX_(", height=",82,32,07,68)) + this->height) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,toString,return )

 ::openfl::geom::Rectangle Rectangle_obj::_hx_union( ::openfl::geom::Rectangle toUnion){
            	HX_STACK_FRAME("openfl.geom.Rectangle","union",0xc71b3f5c,"openfl.geom.Rectangle.union","openfl/geom/Rectangle.hx",201,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toUnion,"toUnion")
HXLINE( 203)		Bool _hx_tmp;
HXDLIN( 203)		if ((this->width != (int)0)) {
HXLINE( 203)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 203)			_hx_tmp = true;
            		}
HXDLIN( 203)		if (_hx_tmp) {
HXLINE( 205)			return toUnion->clone();
            		}
            		else {
HXLINE( 207)			Bool _hx_tmp1;
HXDLIN( 207)			if ((toUnion->width != (int)0)) {
HXLINE( 207)				_hx_tmp1 = (toUnion->height == (int)0);
            			}
            			else {
HXLINE( 207)				_hx_tmp1 = true;
            			}
HXDLIN( 207)			if (_hx_tmp1) {
HXLINE( 209)				return this->clone();
            			}
            		}
HXLINE( 213)		HX_VAR( Float,x0);
HXDLIN( 213)		if ((this->x > toUnion->x)) {
HXLINE( 213)			x0 = toUnion->x;
            		}
            		else {
HXLINE( 213)			x0 = this->x;
            		}
HXLINE( 214)		HX_VAR( Float,x1);
HXDLIN( 214)		Float _hx_tmp2 = this->get_right();
HXDLIN( 214)		Float _hx_tmp3 = toUnion->get_right();
HXDLIN( 214)		if ((_hx_tmp2 < _hx_tmp3)) {
HXLINE( 214)			x1 = toUnion->get_right();
            		}
            		else {
HXLINE( 214)			x1 = this->get_right();
            		}
HXLINE( 215)		HX_VAR( Float,y0);
HXDLIN( 215)		if ((this->y > toUnion->y)) {
HXLINE( 215)			y0 = toUnion->y;
            		}
            		else {
HXLINE( 215)			y0 = this->y;
            		}
HXLINE( 216)		HX_VAR( Float,y1);
HXDLIN( 216)		Float _hx_tmp4 = this->get_bottom();
HXDLIN( 216)		Float _hx_tmp5 = toUnion->get_bottom();
HXDLIN( 216)		if ((_hx_tmp4 < _hx_tmp5)) {
HXLINE( 216)			y1 = toUnion->get_bottom();
            		}
            		else {
HXLINE( 216)			y1 = this->get_bottom();
            		}
HXLINE( 218)		return  ::openfl::geom::Rectangle_obj::__new(x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,_hx_union,return )

void Rectangle_obj::_hx___contract(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("openfl.geom.Rectangle","__contract",0xb7fb00c5,"openfl.geom.Rectangle.__contract","openfl/geom/Rectangle.hx",223,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 225)		Bool _hx_tmp;
HXDLIN( 225)		if ((this->width == (int)0)) {
HXLINE( 225)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 225)			_hx_tmp = false;
            		}
HXDLIN( 225)		if (_hx_tmp) {
HXLINE( 227)			return;
            		}
HXLINE( 231)		HX_VARI( Float,offsetX) = ((Float)0.0);
HXLINE( 232)		HX_VARI( Float,offsetY) = ((Float)0.0);
HXLINE( 233)		HX_VARI( Float,offsetRight) = ((Float)0.0);
HXLINE( 234)		HX_VARI( Float,offsetBottom) = ((Float)0.0);
HXLINE( 236)		if ((this->x < x)) {
HXLINE( 236)			offsetX = (x - this->x);
            		}
HXLINE( 237)		if ((this->y < y)) {
HXLINE( 237)			offsetY = (y - this->y);
            		}
HXLINE( 238)		Float _hx_tmp1 = this->get_right();
HXDLIN( 238)		if ((_hx_tmp1 > (x + width))) {
HXLINE( 238)			Float _hx_tmp2 = (x + width);
HXDLIN( 238)			Float _hx_tmp3 = this->get_right();
HXDLIN( 238)			offsetRight = (_hx_tmp2 - _hx_tmp3);
            		}
HXLINE( 239)		Float _hx_tmp4 = this->get_bottom();
HXDLIN( 239)		if ((_hx_tmp4 > (y + height))) {
HXLINE( 239)			Float _hx_tmp5 = (y + height);
HXDLIN( 239)			Float _hx_tmp6 = this->get_bottom();
HXDLIN( 239)			offsetBottom = (_hx_tmp5 - _hx_tmp6);
            		}
HXLINE( 241)		hx::AddEq(this->x,offsetX);
HXLINE( 242)		hx::AddEq(this->y,offsetY);
HXLINE( 243)		hx::AddEq(this->width,(offsetRight - offsetX));
HXLINE( 244)		hx::AddEq(this->height,(offsetBottom - offsetY));
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,_hx___contract,(void))

void Rectangle_obj::_hx___expand(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("openfl.geom.Rectangle","__expand",0x79b82d4d,"openfl.geom.Rectangle.__expand","openfl/geom/Rectangle.hx",249,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 251)		Bool _hx_tmp;
HXDLIN( 251)		if ((this->width == (int)0)) {
HXLINE( 251)			_hx_tmp = (this->height == (int)0);
            		}
            		else {
HXLINE( 251)			_hx_tmp = false;
            		}
HXDLIN( 251)		if (_hx_tmp) {
HXLINE( 253)			this->x = x;
HXLINE( 254)			this->y = y;
HXLINE( 255)			this->width = width;
HXLINE( 256)			this->height = height;
HXLINE( 257)			return;
            		}
HXLINE( 261)		HX_VARI( Float,cacheRight) = this->get_right();
HXLINE( 262)		HX_VARI( Float,cacheBottom) = this->get_bottom();
HXLINE( 264)		Bool _hx_tmp1 = (this->x > x);
HXDLIN( 264)		if (_hx_tmp1) {
HXLINE( 266)			this->x = x;
HXLINE( 267)			this->width = (cacheRight - x);
            		}
HXLINE( 269)		Bool _hx_tmp2 = (this->y > y);
HXDLIN( 269)		if (_hx_tmp2) {
HXLINE( 271)			this->y = y;
HXLINE( 272)			this->height = (cacheBottom - y);
            		}
HXLINE( 274)		if ((cacheRight < (x + width))) {
HXLINE( 274)			this->width = ((x + width) - this->x);
            		}
HXLINE( 275)		if ((cacheBottom < (y + height))) {
HXLINE( 275)			this->height = ((y + height) - this->y);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,_hx___expand,(void))

 ::lime::math::Rectangle Rectangle_obj::_hx___toLimeRectangle(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","__toLimeRectangle",0x990c368c,"openfl.geom.Rectangle.__toLimeRectangle","openfl/geom/Rectangle.hx",280,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 282)		Bool _hx_tmp = hx::IsNull( ::openfl::geom::Rectangle_obj::_hx___limeRectangle );
HXDLIN( 282)		if (_hx_tmp) {
HXLINE( 284)			::openfl::geom::Rectangle_obj::_hx___limeRectangle =  ::lime::math::Rectangle_obj::__new(null(),null(),null(),null());
            		}
HXLINE( 288)		::openfl::geom::Rectangle_obj::_hx___limeRectangle->setTo(this->x,this->y,this->width,this->height);
HXLINE( 289)		return ::openfl::geom::Rectangle_obj::_hx___limeRectangle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,_hx___toLimeRectangle,return )

void Rectangle_obj::_hx___transform( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix m){
            	HX_STACK_FRAME("openfl.geom.Rectangle","__transform",0x05478859,"openfl.geom.Rectangle.__transform","openfl/geom/Rectangle.hx",294,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(m,"m")
HXLINE( 296)		HX_VARI( Float,tx0) = ((m->a * this->x) + (m->c * this->y));
HXLINE( 297)		HX_VARI( Float,tx1) = tx0;
HXLINE( 298)		HX_VARI( Float,ty0) = ((m->b * this->x) + (m->d * this->y));
HXLINE( 299)		HX_VARI( Float,ty1) = ty0;
HXLINE( 301)		HX_VARI( Float,tx) = ((m->a * (this->x + this->width)) + (m->c * this->y));
HXLINE( 302)		HX_VARI( Float,ty) = ((m->b * (this->x + this->width)) + (m->d * this->y));
HXLINE( 304)		Bool _hx_tmp = (tx < tx0);
HXDLIN( 304)		if (_hx_tmp) {
HXLINE( 304)			tx0 = tx;
            		}
HXLINE( 305)		Bool _hx_tmp1 = (ty < ty0);
HXDLIN( 305)		if (_hx_tmp1) {
HXLINE( 305)			ty0 = ty;
            		}
HXLINE( 306)		Bool _hx_tmp2 = (tx > tx1);
HXDLIN( 306)		if (_hx_tmp2) {
HXLINE( 306)			tx1 = tx;
            		}
HXLINE( 307)		Bool _hx_tmp3 = (ty > ty1);
HXDLIN( 307)		if (_hx_tmp3) {
HXLINE( 307)			ty1 = ty;
            		}
HXLINE( 309)		tx = ((m->a * (this->x + this->width)) + (m->c * (this->y + this->height)));
HXLINE( 310)		ty = ((m->b * (this->x + this->width)) + (m->d * (this->y + this->height)));
HXLINE( 312)		Bool _hx_tmp4 = (tx < tx0);
HXDLIN( 312)		if (_hx_tmp4) {
HXLINE( 312)			tx0 = tx;
            		}
HXLINE( 313)		Bool _hx_tmp5 = (ty < ty0);
HXDLIN( 313)		if (_hx_tmp5) {
HXLINE( 313)			ty0 = ty;
            		}
HXLINE( 314)		Bool _hx_tmp6 = (tx > tx1);
HXDLIN( 314)		if (_hx_tmp6) {
HXLINE( 314)			tx1 = tx;
            		}
HXLINE( 315)		Bool _hx_tmp7 = (ty > ty1);
HXDLIN( 315)		if (_hx_tmp7) {
HXLINE( 315)			ty1 = ty;
            		}
HXLINE( 317)		tx = ((m->a * this->x) + (m->c * (this->y + this->height)));
HXLINE( 318)		ty = ((m->b * this->x) + (m->d * (this->y + this->height)));
HXLINE( 320)		Bool _hx_tmp8 = (tx < tx0);
HXDLIN( 320)		if (_hx_tmp8) {
HXLINE( 320)			tx0 = tx;
            		}
HXLINE( 321)		Bool _hx_tmp9 = (ty < ty0);
HXDLIN( 321)		if (_hx_tmp9) {
HXLINE( 321)			ty0 = ty;
            		}
HXLINE( 322)		Bool _hx_tmp10 = (tx > tx1);
HXDLIN( 322)		if (_hx_tmp10) {
HXLINE( 322)			tx1 = tx;
            		}
HXLINE( 323)		Bool _hx_tmp11 = (ty > ty1);
HXDLIN( 323)		if (_hx_tmp11) {
HXLINE( 323)			ty1 = ty;
            		}
HXLINE( 325)		Float _hx_tmp12 = (tx0 + m->tx);
HXDLIN( 325)		Float _hx_tmp13 = (ty0 + m->ty);
HXDLIN( 325)		rect->setTo(_hx_tmp12,_hx_tmp13,(tx1 - tx0),(ty1 - ty0));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,_hx___transform,(void))

Float Rectangle_obj::get_bottom(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","get_bottom",0x33110547,"openfl.geom.Rectangle.get_bottom","openfl/geom/Rectangle.hx",337,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 337)		return (this->y + this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottom,return )

Float Rectangle_obj::set_bottom(Float b){
            	HX_STACK_FRAME("openfl.geom.Rectangle","set_bottom",0x368ea3bb,"openfl.geom.Rectangle.set_bottom","openfl/geom/Rectangle.hx",338,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE( 338)		this->height = (b - this->y);
HXDLIN( 338)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottom,return )

 ::openfl::geom::Point Rectangle_obj::get_bottomRight(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","get_bottomRight",0xb804f515,"openfl.geom.Rectangle.get_bottomRight","openfl/geom/Rectangle.hx",339,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 339)		return  ::openfl::geom::Point_obj::__new((this->x + this->width),(this->y + this->height));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottomRight,return )

 ::openfl::geom::Point Rectangle_obj::set_bottomRight( ::openfl::geom::Point p){
            	HX_STACK_FRAME("openfl.geom.Rectangle","set_bottomRight",0xb3d07221,"openfl.geom.Rectangle.set_bottomRight","openfl/geom/Rectangle.hx",340,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 340)		this->width = (p->x - this->x);
HXDLIN( 340)		this->height = (p->y - this->y);
HXDLIN( 340)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottomRight,return )

Float Rectangle_obj::get_left(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","get_left",0xd4809763,"openfl.geom.Rectangle.get_left","openfl/geom/Rectangle.hx",341,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 341)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_left,return )

Float Rectangle_obj::set_left(Float l){
            	HX_STACK_FRAME("openfl.geom.Rectangle","set_left",0x82ddf0d7,"openfl.geom.Rectangle.set_left","openfl/geom/Rectangle.hx",342,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(l,"l")
HXLINE( 342)		hx::SubEq(this->width,(l - this->x));
HXDLIN( 342)		this->x = l;
HXDLIN( 342)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_left,return )

Float Rectangle_obj::get_right(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","get_right",0x9310ed00,"openfl.geom.Rectangle.get_right","openfl/geom/Rectangle.hx",343,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 343)		return (this->x + this->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_right,return )

Float Rectangle_obj::set_right(Float r){
            	HX_STACK_FRAME("openfl.geom.Rectangle","set_right",0x7661d90c,"openfl.geom.Rectangle.set_right","openfl/geom/Rectangle.hx",344,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
HXLINE( 344)		this->width = (r - this->x);
HXDLIN( 344)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_right,return )

 ::openfl::geom::Point Rectangle_obj::get_size(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","get_size",0xd924301d,"openfl.geom.Rectangle.get_size","openfl/geom/Rectangle.hx",345,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 345)		return  ::openfl::geom::Point_obj::__new(this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_size,return )

 ::openfl::geom::Point Rectangle_obj::set_size( ::openfl::geom::Point p){
            	HX_STACK_FRAME("openfl.geom.Rectangle","set_size",0x87818991,"openfl.geom.Rectangle.set_size","openfl/geom/Rectangle.hx",346,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 346)		this->width = p->x;
HXDLIN( 346)		this->height = p->y;
HXDLIN( 346)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_size,return )

Float Rectangle_obj::get_top(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","get_top",0x9f65f6b9,"openfl.geom.Rectangle.get_top","openfl/geom/Rectangle.hx",347,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 347)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_top,return )

Float Rectangle_obj::set_top(Float t){
            	HX_STACK_FRAME("openfl.geom.Rectangle","set_top",0x926787c5,"openfl.geom.Rectangle.set_top","openfl/geom/Rectangle.hx",348,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE( 348)		hx::SubEq(this->height,(t - this->y));
HXDLIN( 348)		this->y = t;
HXDLIN( 348)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_top,return )

 ::openfl::geom::Point Rectangle_obj::get_topLeft(){
            	HX_STACK_FRAME("openfl.geom.Rectangle","get_topLeft",0x00437b60,"openfl.geom.Rectangle.get_topLeft","openfl/geom/Rectangle.hx",349,0xf2fb2b03)
            	HX_STACK_THIS(this)
HXLINE( 349)		return  ::openfl::geom::Point_obj::__new(this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_topLeft,return )

 ::openfl::geom::Point Rectangle_obj::set_topLeft( ::openfl::geom::Point p){
            	HX_STACK_FRAME("openfl.geom.Rectangle","set_topLeft",0x0ab0826c,"openfl.geom.Rectangle.set_topLeft","openfl/geom/Rectangle.hx",350,0xf2fb2b03)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p,"p")
HXLINE( 350)		this->x = p->x;
HXDLIN( 350)		this->y = p->y;
HXDLIN( 350)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_topLeft,return )

 ::lime::math::Rectangle Rectangle_obj::_hx___limeRectangle;

 ::openfl::geom::Rectangle Rectangle_obj::_hx___temp;


Rectangle_obj::Rectangle_obj()
{
}

hx::Val Rectangle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_top()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_left()); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_size()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_right()); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn()); }
		if (HX_FIELD_EQ(inName,"union") ) { return hx::Val( _hx_union_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottom()); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_topLeft()); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return hx::Val( inflate_dyn()); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn()); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return hx::Val( get_top_dyn()); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return hx::Val( set_top_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"setEmpty") ) { return hx::Val( setEmpty_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		if (HX_FIELD_EQ(inName,"__expand") ) { return hx::Val( _hx___expand_dyn()); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return hx::Val( get_left_dyn()); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return hx::Val( set_left_dyn()); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn()); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return hx::Val( set_size_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_right") ) { return hx::Val( get_right_dyn()); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return hx::Val( set_right_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"intersects") ) { return hx::Val( intersects_dyn()); }
		if (HX_FIELD_EQ(inName,"__contract") ) { return hx::Val( _hx___contract_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return hx::Val( get_bottom_dyn()); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return hx::Val( set_bottom_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_bottomRight()); }
		if (HX_FIELD_EQ(inName,"offsetPoint") ) { return hx::Val( offsetPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform_dyn()); }
		if (HX_FIELD_EQ(inName,"get_topLeft") ) { return hx::Val( get_topLeft_dyn()); }
		if (HX_FIELD_EQ(inName,"set_topLeft") ) { return hx::Val( set_topLeft_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"containsRect") ) { return hx::Val( containsRect_dyn()); }
		if (HX_FIELD_EQ(inName,"inflatePoint") ) { return hx::Val( inflatePoint_dyn()); }
		if (HX_FIELD_EQ(inName,"intersection") ) { return hx::Val( intersection_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return hx::Val( containsPoint_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_bottomRight") ) { return hx::Val( get_bottomRight_dyn()); }
		if (HX_FIELD_EQ(inName,"set_bottomRight") ) { return hx::Val( set_bottomRight_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__toLimeRectangle") ) { return hx::Val( _hx___toLimeRectangle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Rectangle_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__temp") ) { outValue = _hx___temp; return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__limeRectangle") ) { outValue = _hx___limeRectangle; return true; }
	}
	return false;
}

hx::Val Rectangle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_top(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_left(inValue) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_size(inValue) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_right(inValue) ); }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottom(inValue) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_topLeft(inValue) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bottomRight(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Rectangle_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__temp") ) { _hx___temp=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__limeRectangle") ) { _hx___limeRectangle=ioValue.Cast<  ::lime::math::Rectangle >(); return true; }
	}
	return false;
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"));
	outFields->push(HX_HCSTRING("bottomRight","\xf1","\xa0","\xf4","\x4e"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("topLeft","\x3c","\x09","\xc1","\xe8"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Rectangle_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Rectangle_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Rectangle_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::math::Rectangle*/ ,(void *) &Rectangle_obj::_hx___limeRectangle,HX_HCSTRING("__limeRectangle","\x3a","\xcb","\xcf","\x63")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &Rectangle_obj::_hx___temp,HX_HCSTRING("__temp","\x34","\x26","\xf2","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("containsPoint","\xb1","\xb9","\xeb","\x92"),
	HX_HCSTRING("containsRect","\xe3","\xce","\x1c","\xa6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("inflate","\x87","\x9c","\x1b","\x0c"),
	HX_HCSTRING("inflatePoint","\x49","\xbe","\x39","\x32"),
	HX_HCSTRING("intersection","\x49","\xa2","\x61","\x88"),
	HX_HCSTRING("intersects","\xb4","\xc2","\xeb","\xe3"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("offsetPoint","\xbd","\x37","\x10","\x5f"),
	HX_HCSTRING("setEmpty","\x8b","\xa3","\x0e","\x7e"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("union","\x0f","\x65","\xe7","\xa6"),
	HX_HCSTRING("__contract","\x32","\x52","\xea","\xda"),
	HX_HCSTRING("__expand","\x7a","\x59","\xa2","\x6c"),
	HX_HCSTRING("__toLimeRectangle","\xbf","\x9c","\x93","\x92"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("get_bottom","\xb4","\x56","\x00","\x56"),
	HX_HCSTRING("set_bottom","\x28","\xf5","\x7d","\x59"),
	HX_HCSTRING("get_bottomRight","\x88","\x58","\xd6","\x0f"),
	HX_HCSTRING("set_bottomRight","\x94","\xd5","\xa1","\x0b"),
	HX_HCSTRING("get_left","\x90","\xc3","\x6a","\xc7"),
	HX_HCSTRING("set_left","\x04","\x1d","\xc8","\x75"),
	HX_HCSTRING("get_right","\x33","\x68","\x0d","\x2d"),
	HX_HCSTRING("set_right","\x3f","\x54","\x5e","\x10"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	HX_HCSTRING("set_size","\xbe","\xb5","\x6b","\x7a"),
	HX_HCSTRING("get_top","\x2c","\x2f","\xcd","\x26"),
	HX_HCSTRING("set_top","\x38","\xc0","\xce","\x19"),
	HX_HCSTRING("get_topLeft","\x53","\x69","\xbb","\x6e"),
	HX_HCSTRING("set_topLeft","\x5f","\x70","\x28","\x79"),
	::String(null()) };

static void Rectangle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Rectangle_obj::_hx___limeRectangle,"__limeRectangle");
	HX_MARK_MEMBER_NAME(Rectangle_obj::_hx___temp,"__temp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Rectangle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Rectangle_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Rectangle_obj::_hx___limeRectangle,"__limeRectangle");
	HX_VISIT_MEMBER_NAME(Rectangle_obj::_hx___temp,"__temp");
};

#endif

hx::Class Rectangle_obj::__mClass;

static ::String Rectangle_obj_sStaticFields[] = {
	HX_HCSTRING("__limeRectangle","\x3a","\xcb","\xcf","\x63"),
	HX_HCSTRING("__temp","\x34","\x26","\xf2","\xfb"),
	::String(null())
};

void Rectangle_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Rectangle","\xfb","\x52","\x34","\xb7");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Rectangle_obj::__GetStatic;
	__mClass->mSetStaticField = &Rectangle_obj::__SetStatic;
	__mClass->mMarkFunc = Rectangle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Rectangle_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Rectangle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Rectangle_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.geom.Rectangle","boot",0x09003285,"openfl.geom.Rectangle.boot","openfl/geom/Rectangle.hx",16,0xf2fb2b03)
HXLINE(  16)		_hx___temp =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            	}
}

} // end namespace openfl
} // end namespace geom
