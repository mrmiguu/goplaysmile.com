// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferIO
#include <lime/utils/ArrayBufferIO.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace display3D{

void IndexBuffer3D_obj::__construct( ::openfl::display3D::Context3D context3D,Int numIndices,::String bufferUsage){
            	HX_STACK_FRAME("openfl.display3D.IndexBuffer3D","new",0x7b4eb39c,"openfl.display3D.IndexBuffer3D.new","openfl/display3D/IndexBuffer3D.hx",25,0x3d934296)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(context3D,"context3D")
            	HX_STACK_ARG(numIndices,"numIndices")
            	HX_STACK_ARG(bufferUsage,"bufferUsage")
HXLINE(  27)		this->_hx___context = context3D;
HXLINE(  28)		this->_hx___numIndices = numIndices;
HXLINE(  29)		this->_hx___elementType = (int)5123;
HXLINE(  31)		this->_hx___id = ::lime::graphics::opengl::GL_obj::context->createBuffer();
HXLINE(  32)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  34)		Int _hx_tmp;
HXDLIN(  34)		if (hx::IsEq( ::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::fromString(bufferUsage),(int)0 )) {
HXLINE(  34)			_hx_tmp = (int)35048;
            		}
            		else {
HXLINE(  34)			_hx_tmp = (int)35044;
            		}
HXDLIN(  34)		this->_hx___usage = _hx_tmp;
HXLINE(  36)		this->_hx___context->_hx___statsIncrement((int)1);
HXLINE(  37)		this->_hx___memoryUsage = (int)0;
            	}

Dynamic IndexBuffer3D_obj::__CreateEmpty() { return new IndexBuffer3D_obj; }

hx::ObjectPtr< IndexBuffer3D_obj > IndexBuffer3D_obj::__new( ::openfl::display3D::Context3D context3D,Int numIndices,::String bufferUsage)
{
	hx::ObjectPtr< IndexBuffer3D_obj > _hx_result = new IndexBuffer3D_obj();
	_hx_result->__construct(context3D,numIndices,bufferUsage);
	return _hx_result;
}

Dynamic IndexBuffer3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IndexBuffer3D_obj > _hx_result = new IndexBuffer3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void IndexBuffer3D_obj::dispose(){
            	HX_STACK_FRAME("openfl.display3D.IndexBuffer3D","dispose",0xbcffb1db,"openfl.display3D.IndexBuffer3D.dispose","openfl/display3D/IndexBuffer3D.hx",42,0x3d934296)
            	HX_STACK_THIS(this)
HXLINE(  44)		::lime::graphics::opengl::GL_obj::context->deleteBuffer(this->_hx___id);
HXLINE(  46)		this->_hx___context->_hx___statsDecrement((int)1);
HXLINE(  47)		this->_hx___context->_hx___statsSubtract((int)6,this->_hx___memoryUsage);
HXLINE(  48)		this->_hx___memoryUsage = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(IndexBuffer3D_obj,dispose,(void))

void IndexBuffer3D_obj::uploadFromByteArray( ::openfl::utils::ByteArrayData data,Int byteArrayOffset,Int startOffset,Int count){
            	HX_STACK_FRAME("openfl.display3D.IndexBuffer3D","uploadFromByteArray",0x61713322,"openfl.display3D.IndexBuffer3D.uploadFromByteArray","openfl/display3D/IndexBuffer3D.hx",53,0x3d934296)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(byteArrayOffset,"byteArrayOffset")
            	HX_STACK_ARG(startOffset,"startOffset")
            	HX_STACK_ARG(count,"count")
HXLINE(  55)		HX_VARI( Int,offset) = (byteArrayOffset + (startOffset * (int)2));
HXLINE(  57)		HX_VARI(  ::haxe::io::Bytes,buffer) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN(  57)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  57)		Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN(  57)		if (_hx_tmp) {
HXLINE(  57)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)2);
HXDLIN(  57)			if ((offset < (int)0)) {
HXLINE(  57)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  57)			if ((hx::Mod(offset,_this->bytesPerElement) != (int)0)) {
HXLINE(  57)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN(  57)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN(  57)			HX_VARI( Int,newByteLength) = bufferByteLength;
HXDLIN(  57)			Bool _hx_tmp1 = hx::IsNull( count );
HXDLIN(  57)			if (_hx_tmp1) {
HXLINE(  57)				newByteLength = (bufferByteLength - offset);
HXDLIN(  57)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  57)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  57)				if ((newByteLength < (int)0)) {
HXLINE(  57)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE(  57)				newByteLength = (count * _this->bytesPerElement);
HXDLIN(  57)				if (((offset + newByteLength) > bufferByteLength)) {
HXLINE(  57)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN(  57)			_this->buffer = buffer;
HXDLIN(  57)			_this->byteOffset = offset;
HXDLIN(  57)			_this->byteLength = newByteLength;
HXDLIN(  57)			Float _hx_tmp2 = ((Float)newByteLength / (Float)_this->bytesPerElement);
HXDLIN(  57)			_this->length = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN(  57)			this1 = _this;
            		}
            		else {
HXLINE(  57)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            		}
HXDLIN(  57)		this->uploadFromTypedArray(this1);
            	}


HX_DEFINE_DYNAMIC_FUNC4(IndexBuffer3D_obj,uploadFromByteArray,(void))

void IndexBuffer3D_obj::uploadFromTypedArray( ::lime::utils::ArrayBufferView data){
            	HX_STACK_FRAME("openfl.display3D.IndexBuffer3D","uploadFromTypedArray",0x49f635fe,"openfl.display3D.IndexBuffer3D.uploadFromTypedArray","openfl/display3D/IndexBuffer3D.hx",62,0x3d934296)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(  64)		Bool _hx_tmp = hx::IsNull( data );
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  64)			return;
            		}
HXLINE(  66)		::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34963,this->_hx___id);
HXLINE(  67)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  69)		{
HXLINE(  69)			Int usage = this->_hx___usage;
HXDLIN(  69)			::lime::graphics::opengl::GL_obj::context->bufferData((int)34963,data,usage);
            		}
HXLINE(  70)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(  72)		Bool _hx_tmp1 = (data->byteLength != this->_hx___memoryUsage);
HXDLIN(  72)		if (_hx_tmp1) {
HXLINE(  74)			Int _hx_tmp2 = (data->byteLength - this->_hx___memoryUsage);
HXDLIN(  74)			this->_hx___context->_hx___statsAdd((int)6,_hx_tmp2);
HXLINE(  75)			this->_hx___memoryUsage = data->byteLength;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(IndexBuffer3D_obj,uploadFromTypedArray,(void))

void IndexBuffer3D_obj::uploadFromVector( ::openfl::_Vector::IntVector data,Int startOffset,Int count){
            	HX_STACK_FRAME("openfl.display3D.IndexBuffer3D","uploadFromVector",0xaabe3672,"openfl.display3D.IndexBuffer3D.uploadFromVector","openfl/display3D/IndexBuffer3D.hx",82,0x3d934296)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(startOffset,"startOffset")
            	HX_STACK_ARG(count,"count")
HXLINE(  86)		HX_VARI( Int,length) = (startOffset + count);
HXLINE(  88)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  88)		Bool _hx_tmp = hx::IsNotNull( count );
HXDLIN(  88)		if (_hx_tmp) {
HXLINE(  88)			this1 =  ::lime::utils::ArrayBufferView_obj::__new(count,(int)2);
            		}
            		else {
HXLINE(  88)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            		}
HXDLIN(  88)		HX_VARI(  ::lime::utils::ArrayBufferView,buffer) = this1;
HXLINE(  90)		{
HXLINE(  90)			HX_VARI( Int,_g1) = startOffset;
HXDLIN(  90)			while((_g1 < length)){
HXLINE(  90)				HX_VARI( Int,i) = _g1++;
HXLINE(  92)				{
HXLINE(  92)					HX_VARI( Int,val) = data->get(i);
HXDLIN(  92)					Int _hx_tmp1 = buffer->byteOffset;
HXDLIN(  92)					::lime::utils::ArrayBufferIO_obj::setInt16(buffer->buffer,(_hx_tmp1 + ((i - startOffset) * (int)2)),val);
            				}
            			}
            		}
HXLINE(  96)		this->uploadFromTypedArray(buffer);
            	}


HX_DEFINE_DYNAMIC_FUNC3(IndexBuffer3D_obj,uploadFromVector,(void))


IndexBuffer3D_obj::IndexBuffer3D_obj()
{
}

void IndexBuffer3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IndexBuffer3D);
	HX_MARK_MEMBER_NAME(_hx___context,"__context");
	HX_MARK_MEMBER_NAME(_hx___elementType,"__elementType");
	HX_MARK_MEMBER_NAME(_hx___id,"__id");
	HX_MARK_MEMBER_NAME(_hx___memoryUsage,"__memoryUsage");
	HX_MARK_MEMBER_NAME(_hx___numIndices,"__numIndices");
	HX_MARK_MEMBER_NAME(_hx___usage,"__usage");
	HX_MARK_END_CLASS();
}

void IndexBuffer3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___context,"__context");
	HX_VISIT_MEMBER_NAME(_hx___elementType,"__elementType");
	HX_VISIT_MEMBER_NAME(_hx___id,"__id");
	HX_VISIT_MEMBER_NAME(_hx___memoryUsage,"__memoryUsage");
	HX_VISIT_MEMBER_NAME(_hx___numIndices,"__numIndices");
	HX_VISIT_MEMBER_NAME(_hx___usage,"__usage");
}

hx::Val IndexBuffer3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"__id") ) { return hx::Val( _hx___id); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__usage") ) { return hx::Val( _hx___usage); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { return hx::Val( _hx___context); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__numIndices") ) { return hx::Val( _hx___numIndices); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__elementType") ) { return hx::Val( _hx___elementType); }
		if (HX_FIELD_EQ(inName,"__memoryUsage") ) { return hx::Val( _hx___memoryUsage); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uploadFromVector") ) { return hx::Val( uploadFromVector_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { return hx::Val( uploadFromByteArray_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uploadFromTypedArray") ) { return hx::Val( uploadFromTypedArray_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val IndexBuffer3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"__id") ) { _hx___id=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__usage") ) { _hx___usage=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__context") ) { _hx___context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__numIndices") ) { _hx___numIndices=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__elementType") ) { _hx___elementType=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__memoryUsage") ) { _hx___memoryUsage=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IndexBuffer3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"));
	outFields->push(HX_HCSTRING("__elementType","\x76","\x1c","\xf3","\x38"));
	outFields->push(HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f"));
	outFields->push(HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5"));
	outFields->push(HX_HCSTRING("__numIndices","\xa1","\x00","\x08","\x4c"));
	outFields->push(HX_HCSTRING("__usage","\x01","\xb6","\x8d","\x14"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo IndexBuffer3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(IndexBuffer3D_obj,_hx___context),HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a")},
	{hx::fsInt,(int)offsetof(IndexBuffer3D_obj,_hx___elementType),HX_HCSTRING("__elementType","\x76","\x1c","\xf3","\x38")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(IndexBuffer3D_obj,_hx___id),HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f")},
	{hx::fsInt,(int)offsetof(IndexBuffer3D_obj,_hx___memoryUsage),HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5")},
	{hx::fsInt,(int)offsetof(IndexBuffer3D_obj,_hx___numIndices),HX_HCSTRING("__numIndices","\xa1","\x00","\x08","\x4c")},
	{hx::fsInt,(int)offsetof(IndexBuffer3D_obj,_hx___usage),HX_HCSTRING("__usage","\x01","\xb6","\x8d","\x14")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *IndexBuffer3D_obj_sStaticStorageInfo = 0;
#endif

static ::String IndexBuffer3D_obj_sMemberFields[] = {
	HX_HCSTRING("__context","\xcf","\xe6","\xc5","\x9a"),
	HX_HCSTRING("__elementType","\x76","\x1c","\xf3","\x38"),
	HX_HCSTRING("__id","\xfb","\xb6","\x13","\x3f"),
	HX_HCSTRING("__memoryUsage","\x40","\xbf","\x50","\xc5"),
	HX_HCSTRING("__numIndices","\xa1","\x00","\x08","\x4c"),
	HX_HCSTRING("__usage","\x01","\xb6","\x8d","\x14"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("uploadFromByteArray","\xe6","\x17","\x1b","\xee"),
	HX_HCSTRING("uploadFromTypedArray","\xba","\x7c","\xf4","\xd1"),
	HX_HCSTRING("uploadFromVector","\x2e","\x6f","\x6b","\xa8"),
	::String(null()) };

static void IndexBuffer3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IndexBuffer3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IndexBuffer3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IndexBuffer3D_obj::__mClass,"__mClass");
};

#endif

hx::Class IndexBuffer3D_obj::__mClass;

void IndexBuffer3D_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.IndexBuffer3D","\xaa","\xf5","\xd5","\x3f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IndexBuffer3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(IndexBuffer3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< IndexBuffer3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IndexBuffer3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IndexBuffer3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IndexBuffer3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
