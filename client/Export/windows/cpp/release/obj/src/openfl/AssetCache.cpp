// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_AssetCache
#include <lime/AssetCache.h>
#endif
#ifndef INCLUDED_lime_Assets
#include <lime/Assets.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_AssetCache
#include <openfl/AssetCache.h>
#endif
#ifndef INCLUDED_openfl_IAssetCache
#include <openfl/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif

namespace openfl{

void AssetCache_obj::__construct(){
            	HX_STACK_FRAME("openfl.AssetCache","new",0x4c82a362,"openfl.AssetCache.new","openfl/Assets.hx",896,0x989d477c)
            	HX_STACK_THIS(this)
HXLINE( 905)		this->_hx___enabled = true;
HXLINE( 910)		this->bitmapData =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 911)		this->font =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 912)		this->sound =  ::haxe::ds::StringMap_obj::__new();
            	}

Dynamic AssetCache_obj::__CreateEmpty() { return new AssetCache_obj; }

hx::ObjectPtr< AssetCache_obj > AssetCache_obj::__new()
{
	hx::ObjectPtr< AssetCache_obj > _hx_result = new AssetCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AssetCache_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AssetCache_obj > _hx_result = new AssetCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::openfl::IAssetCache_obj _hx_openfl_AssetCache__hx_openfl_IAssetCache= {
	( Bool (hx::Object::*)())&::openfl::AssetCache_obj::get_enabled,
	( Bool (hx::Object::*)(Bool))&::openfl::AssetCache_obj::set_enabled,
	( void (hx::Object::*)(::String))&::openfl::AssetCache_obj::clear,
	(  ::openfl::display::BitmapData (hx::Object::*)(::String))&::openfl::AssetCache_obj::getBitmapData,
	(  ::openfl::text::Font (hx::Object::*)(::String))&::openfl::AssetCache_obj::getFont,
	(  ::openfl::media::Sound (hx::Object::*)(::String))&::openfl::AssetCache_obj::getSound,
	( Bool (hx::Object::*)(::String))&::openfl::AssetCache_obj::hasBitmapData,
	( Bool (hx::Object::*)(::String))&::openfl::AssetCache_obj::hasFont,
	( Bool (hx::Object::*)(::String))&::openfl::AssetCache_obj::hasSound,
	( Bool (hx::Object::*)(::String))&::openfl::AssetCache_obj::removeBitmapData,
	( Bool (hx::Object::*)(::String))&::openfl::AssetCache_obj::removeFont,
	( Bool (hx::Object::*)(::String))&::openfl::AssetCache_obj::removeSound,
	( void (hx::Object::*)(::String, ::openfl::display::BitmapData))&::openfl::AssetCache_obj::setBitmapData,
	( void (hx::Object::*)(::String, ::openfl::text::Font))&::openfl::AssetCache_obj::setFont,
	( void (hx::Object::*)(::String, ::openfl::media::Sound))&::openfl::AssetCache_obj::setSound,
};

void *AssetCache_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x51b41b8b: return &_hx_openfl_AssetCache__hx_openfl_IAssetCache;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void AssetCache_obj::clear(::String prefix){
            	HX_STACK_FRAME("openfl.AssetCache","clear",0x1c26890f,"openfl.AssetCache.clear","openfl/Assets.hx",919,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(prefix,"prefix")
HXLINE( 919)		Bool _hx_tmp = hx::IsNull( prefix );
HXDLIN( 919)		if (_hx_tmp) {
HXLINE( 921)			this->bitmapData =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 922)			this->font =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 923)			this->sound =  ::haxe::ds::StringMap_obj::__new();
            		}
            		else {
HXLINE( 927)			HX_VARI(  ::Dynamic,keys) = this->bitmapData->keys();
HXLINE( 929)			while(true){
HXLINE( 929)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(keys->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 929)				if (_hx_tmp1) {
HXLINE( 929)					goto _hx_goto_0;
            				}
HXDLIN( 929)				HX_VARI( ::String,key) = ( (::String)( ::Dynamic(keys->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 931)				Bool _hx_tmp2 = ::StringTools_obj::startsWith(key,prefix);
HXDLIN( 931)				if (_hx_tmp2) {
HXLINE( 933)					this->removeBitmapData(key);
            				}
            			}
            			_hx_goto_0:;
HXLINE( 939)			HX_VARI_NAME(  ::Dynamic,keys1,"keys") = this->font->keys();
HXLINE( 941)			while(true){
HXLINE( 941)				Bool _hx_tmp3 = !(( (Bool)( ::Dynamic(keys1->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 941)				if (_hx_tmp3) {
HXLINE( 941)					goto _hx_goto_1;
            				}
HXDLIN( 941)				HX_VARI_NAME( ::String,key1,"key") = ( (::String)( ::Dynamic(keys1->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 943)				Bool _hx_tmp4 = ::StringTools_obj::startsWith(key1,prefix);
HXDLIN( 943)				if (_hx_tmp4) {
HXLINE( 945)					this->removeFont(key1);
            				}
            			}
            			_hx_goto_1:;
HXLINE( 951)			HX_VARI_NAME(  ::Dynamic,keys2,"keys") = this->sound->keys();
HXLINE( 953)			while(true){
HXLINE( 953)				Bool _hx_tmp5 = !(( (Bool)( ::Dynamic(keys2->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 953)				if (_hx_tmp5) {
HXLINE( 953)					goto _hx_goto_2;
            				}
HXDLIN( 953)				HX_VARI_NAME( ::String,key2,"key") = ( (::String)( ::Dynamic(keys2->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 955)				Bool _hx_tmp6 = ::StringTools_obj::startsWith(key2,prefix);
HXDLIN( 955)				if (_hx_tmp6) {
HXLINE( 957)					this->removeSound(key2);
            				}
            			}
            			_hx_goto_2:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,clear,(void))

 ::openfl::display::BitmapData AssetCache_obj::getBitmapData(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","getBitmapData",0x76047b71,"openfl.AssetCache.getBitmapData","openfl/Assets.hx",970,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 970)		return this->bitmapData->get(id).StaticCast<  ::openfl::display::BitmapData >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,getBitmapData,return )

 ::openfl::text::Font AssetCache_obj::getFont(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","getFont",0xc4a48987,"openfl.AssetCache.getFont","openfl/Assets.hx",977,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 977)		return this->font->get(id).StaticCast<  ::openfl::text::Font >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,getFont,return )

 ::openfl::media::Sound AssetCache_obj::getSound(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","getSound",0xc78ea217,"openfl.AssetCache.getSound","openfl/Assets.hx",984,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 984)		return this->sound->get(id).StaticCast<  ::openfl::media::Sound >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,getSound,return )

Bool AssetCache_obj::hasBitmapData(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","hasBitmapData",0x33e8d735,"openfl.AssetCache.hasBitmapData","openfl/Assets.hx",991,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 991)		return this->bitmapData->exists(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,hasBitmapData,return )

Bool AssetCache_obj::hasFont(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","hasFont",0xc165fa4b,"openfl.AssetCache.hasFont","openfl/Assets.hx",998,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 998)		return this->font->exists(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,hasFont,return )

Bool AssetCache_obj::hasSound(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","hasSound",0xf40fdcd3,"openfl.AssetCache.hasSound","openfl/Assets.hx",1005,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(1005)		return this->sound->exists(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,hasSound,return )

Bool AssetCache_obj::removeBitmapData(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","removeBitmapData",0x7d8dc6db,"openfl.AssetCache.removeBitmapData","openfl/Assets.hx",1010,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(1012)		::lime::Assets_obj::cache->image->remove(id);
HXLINE(1013)		return this->bitmapData->remove(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,removeBitmapData,return )

Bool AssetCache_obj::removeFont(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","removeFont",0x7ce60971,"openfl.AssetCache.removeFont","openfl/Assets.hx",1018,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(1020)		::lime::Assets_obj::cache->font->remove(id);
HXLINE(1021)		return this->font->remove(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,removeFont,return )

Bool AssetCache_obj::removeSound(::String id){
            	HX_STACK_FRAME("openfl.AssetCache","removeSound",0x489d0eed,"openfl.AssetCache.removeSound","openfl/Assets.hx",1026,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(1028)		::lime::Assets_obj::cache->audio->remove(id);
HXLINE(1029)		return this->sound->remove(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,removeSound,return )

void AssetCache_obj::setBitmapData(::String id, ::openfl::display::BitmapData bitmapData){
            	HX_STACK_FRAME("openfl.AssetCache","setBitmapData",0xbb0a5d7d,"openfl.AssetCache.setBitmapData","openfl/Assets.hx",1036,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(bitmapData,"bitmapData")
HXLINE(1036)		this->bitmapData->set(id,bitmapData);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetCache_obj,setBitmapData,(void))

void AssetCache_obj::setFont(::String id, ::openfl::text::Font font){
            	HX_STACK_FRAME("openfl.AssetCache","setFont",0xb7a61a93,"openfl.AssetCache.setFont","openfl/Assets.hx",1043,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(font,"font")
HXLINE(1043)		this->font->set(id,font);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetCache_obj,setFont,(void))

void AssetCache_obj::setSound(::String id, ::openfl::media::Sound sound){
            	HX_STACK_FRAME("openfl.AssetCache","setSound",0x75ebfb8b,"openfl.AssetCache.setSound","openfl/Assets.hx",1050,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(sound,"sound")
HXLINE(1050)		this->sound->set(id,sound);
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetCache_obj,setSound,(void))

Bool AssetCache_obj::get_enabled(){
            	HX_STACK_FRAME("openfl.AssetCache","get_enabled",0xcdc8099a,"openfl.AssetCache.get_enabled","openfl/Assets.hx",1064,0x989d477c)
            	HX_STACK_THIS(this)
HXLINE(1064)		return this->_hx___enabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetCache_obj,get_enabled,return )

Bool AssetCache_obj::set_enabled(Bool value){
            	HX_STACK_FRAME("openfl.AssetCache","set_enabled",0xd83510a6,"openfl.AssetCache.set_enabled","openfl/Assets.hx",1071,0x989d477c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1071)		return (this->_hx___enabled = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetCache_obj,set_enabled,return )


AssetCache_obj::AssetCache_obj()
{
}

void AssetCache_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetCache);
	HX_MARK_MEMBER_NAME(bitmapData,"bitmapData");
	HX_MARK_MEMBER_NAME(font,"font");
	HX_MARK_MEMBER_NAME(sound,"sound");
	HX_MARK_MEMBER_NAME(_hx___enabled,"__enabled");
	HX_MARK_END_CLASS();
}

void AssetCache_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bitmapData,"bitmapData");
	HX_VISIT_MEMBER_NAME(font,"font");
	HX_VISIT_MEMBER_NAME(sound,"sound");
	HX_VISIT_MEMBER_NAME(_hx___enabled,"__enabled");
}

hx::Val AssetCache_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { return hx::Val( font); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { return hx::Val( sound); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_enabled()); }
		if (HX_FIELD_EQ(inName,"getFont") ) { return hx::Val( getFont_dyn()); }
		if (HX_FIELD_EQ(inName,"hasFont") ) { return hx::Val( hasFont_dyn()); }
		if (HX_FIELD_EQ(inName,"setFont") ) { return hx::Val( setFont_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getSound") ) { return hx::Val( getSound_dyn()); }
		if (HX_FIELD_EQ(inName,"hasSound") ) { return hx::Val( hasSound_dyn()); }
		if (HX_FIELD_EQ(inName,"setSound") ) { return hx::Val( setSound_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { return hx::Val( _hx___enabled); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { return hx::Val( bitmapData); }
		if (HX_FIELD_EQ(inName,"removeFont") ) { return hx::Val( removeFont_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"removeSound") ) { return hx::Val( removeSound_dyn()); }
		if (HX_FIELD_EQ(inName,"get_enabled") ) { return hx::Val( get_enabled_dyn()); }
		if (HX_FIELD_EQ(inName,"set_enabled") ) { return hx::Val( set_enabled_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { return hx::Val( getBitmapData_dyn()); }
		if (HX_FIELD_EQ(inName,"hasBitmapData") ) { return hx::Val( hasBitmapData_dyn()); }
		if (HX_FIELD_EQ(inName,"setBitmapData") ) { return hx::Val( setBitmapData_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"removeBitmapData") ) { return hx::Val( removeBitmapData_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AssetCache_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"font") ) { font=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"sound") ) { sound=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enabled(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__enabled") ) { _hx___enabled=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapData") ) { bitmapData=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetCache_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("bitmapData","\xb9","\xb5","\xc0","\x33"));
	outFields->push(HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"));
	outFields->push(HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"));
	outFields->push(HX_HCSTRING("__enabled","\x61","\x55","\x7f","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AssetCache_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetCache_obj,bitmapData),HX_HCSTRING("bitmapData","\xb9","\xb5","\xc0","\x33")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetCache_obj,font),HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(AssetCache_obj,sound),HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80")},
	{hx::fsBool,(int)offsetof(AssetCache_obj,_hx___enabled),HX_HCSTRING("__enabled","\x61","\x55","\x7f","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AssetCache_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetCache_obj_sMemberFields[] = {
	HX_HCSTRING("bitmapData","\xb9","\xb5","\xc0","\x33"),
	HX_HCSTRING("font","\xcf","\x5d","\xc0","\x43"),
	HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"),
	HX_HCSTRING("__enabled","\x61","\x55","\x7f","\xff"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("getBitmapData","\xef","\x11","\x33","\x90"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getSound","\x59","\x9c","\xa3","\xe0"),
	HX_HCSTRING("hasBitmapData","\xb3","\x6d","\x17","\x4e"),
	HX_HCSTRING("hasFont","\x49","\x7e","\x04","\x13"),
	HX_HCSTRING("hasSound","\x15","\xd7","\x24","\x0d"),
	HX_HCSTRING("removeBitmapData","\x1d","\xd3","\x69","\xed"),
	HX_HCSTRING("removeFont","\x33","\x98","\xdf","\xc0"),
	HX_HCSTRING("removeSound","\xeb","\x69","\x00","\x7f"),
	HX_HCSTRING("setBitmapData","\xfb","\xf3","\x38","\xd5"),
	HX_HCSTRING("setFont","\x91","\x9e","\x44","\x09"),
	HX_HCSTRING("setSound","\xcd","\xf5","\x00","\x8f"),
	HX_HCSTRING("get_enabled","\x98","\x64","\x2b","\x04"),
	HX_HCSTRING("set_enabled","\xa4","\x6b","\x98","\x0e"),
	::String(null()) };

static void AssetCache_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AssetCache_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AssetCache_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AssetCache_obj::__mClass,"__mClass");
};

#endif

hx::Class AssetCache_obj::__mClass;

void AssetCache_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.AssetCache","\x70","\x0a","\x99","\xee");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AssetCache_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AssetCache_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AssetCache_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AssetCache_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetCache_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
