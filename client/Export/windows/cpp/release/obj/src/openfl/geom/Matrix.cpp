// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

namespace openfl{
namespace geom{

void Matrix_obj::__construct(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float a = __o_a.Default(1);
Float b = __o_b.Default(0);
Float c = __o_c.Default(0);
Float d = __o_d.Default(1);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACK_FRAME("openfl.geom.Matrix","new",0xd1b9ff67,"openfl.geom.Matrix.new","openfl/geom/Matrix.hx",31,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE(  33)		this->a = a;
HXLINE(  34)		this->b = b;
HXLINE(  35)		this->c = c;
HXLINE(  36)		this->d = d;
HXLINE(  37)		this->tx = tx;
HXLINE(  38)		this->ty = ty;
            	}

Dynamic Matrix_obj::__CreateEmpty() { return new Matrix_obj; }

hx::ObjectPtr< Matrix_obj > Matrix_obj::__new(hx::Null< Float >  __o_a,hx::Null< Float >  __o_b,hx::Null< Float >  __o_c,hx::Null< Float >  __o_d,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty)
{
	hx::ObjectPtr< Matrix_obj > _hx_result = new Matrix_obj();
	_hx_result->__construct(__o_a,__o_b,__o_c,__o_d,__o_tx,__o_ty);
	return _hx_result;
}

Dynamic Matrix_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix_obj > _hx_result = new Matrix_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

 ::openfl::geom::Matrix Matrix_obj::clone(){
            	HX_STACK_FRAME("openfl.geom.Matrix","clone",0xe2f85224,"openfl.geom.Matrix.clone","openfl/geom/Matrix.hx",45,0xa0d54189)
            	HX_STACK_THIS(this)
HXLINE(  45)		return  ::openfl::geom::Matrix_obj::__new(this->a,this->b,this->c,this->d,this->tx,this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,clone,return )

void Matrix_obj::concat( ::openfl::geom::Matrix m){
            	HX_STACK_FRAME("openfl.geom.Matrix","concat",0x6fd1b86d,"openfl.geom.Matrix.concat","openfl/geom/Matrix.hx",50,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(m,"m")
HXLINE(  52)		HX_VARI( Float,a1) = ((this->a * m->a) + (this->b * m->c));
HXLINE(  53)		Float _hx_tmp = (this->a * m->b);
HXDLIN(  53)		Float _hx_tmp1 = (this->b * m->d);
HXDLIN(  53)		this->b = (_hx_tmp + _hx_tmp1);
HXLINE(  54)		this->a = a1;
HXLINE(  56)		HX_VARI( Float,c1) = ((this->c * m->a) + (this->d * m->c));
HXLINE(  57)		Float _hx_tmp2 = (this->c * m->b);
HXDLIN(  57)		Float _hx_tmp3 = (this->d * m->d);
HXDLIN(  57)		this->d = (_hx_tmp2 + _hx_tmp3);
HXLINE(  58)		this->c = c1;
HXLINE(  60)		HX_VARI( Float,tx1) = (((this->tx * m->a) + (this->ty * m->c)) + m->tx);
HXLINE(  61)		Float _hx_tmp4 = ((this->tx * m->b) + (this->ty * m->d));
HXDLIN(  61)		this->ty = (_hx_tmp4 + m->ty);
HXLINE(  62)		this->tx = tx1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,concat,(void))

void Matrix_obj::copyColumnFrom(Int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix","copyColumnFrom",0xa86bc7ce,"openfl.geom.Matrix.copyColumnFrom","openfl/geom/Matrix.hx",71,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE(  71)		if ((column > (int)2)) {
HXLINE(  73)			HX_STACK_DO_THROW(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE(  75)			if ((column == (int)0)) {
HXLINE(  77)				this->a = vector3D->x;
HXLINE(  78)				this->c = vector3D->y;
            			}
            			else {
HXLINE(  80)				if ((column == (int)1)) {
HXLINE(  82)					this->b = vector3D->x;
HXLINE(  83)					this->d = vector3D->y;
            				}
            				else {
HXLINE(  87)					this->tx = vector3D->x;
HXLINE(  88)					this->ty = vector3D->y;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyColumnFrom,(void))

void Matrix_obj::copyColumnTo(Int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix","copyColumnTo",0xb6db66df,"openfl.geom.Matrix.copyColumnTo","openfl/geom/Matrix.hx",97,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE(  97)		if ((column > (int)2)) {
HXLINE(  99)			HX_STACK_DO_THROW(((HX_("Column ",6a,d4,aa,c0) + column) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 101)			if ((column == (int)0)) {
HXLINE( 103)				vector3D->x = this->a;
HXLINE( 104)				vector3D->y = this->c;
HXLINE( 105)				vector3D->z = (int)0;
            			}
            			else {
HXLINE( 107)				if ((column == (int)1)) {
HXLINE( 109)					vector3D->x = this->b;
HXLINE( 110)					vector3D->y = this->d;
HXLINE( 111)					vector3D->z = (int)0;
            				}
            				else {
HXLINE( 115)					vector3D->x = this->tx;
HXLINE( 116)					vector3D->y = this->ty;
HXLINE( 117)					vector3D->z = (int)1;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyColumnTo,(void))

void Matrix_obj::copyFrom( ::openfl::geom::Matrix sourceMatrix){
            	HX_STACK_FRAME("openfl.geom.Matrix","copyFrom",0xb7b00358,"openfl.geom.Matrix.copyFrom","openfl/geom/Matrix.hx",124,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceMatrix,"sourceMatrix")
HXLINE( 126)		this->a = sourceMatrix->a;
HXLINE( 127)		this->b = sourceMatrix->b;
HXLINE( 128)		this->c = sourceMatrix->c;
HXLINE( 129)		this->d = sourceMatrix->d;
HXLINE( 130)		this->tx = sourceMatrix->tx;
HXLINE( 131)		this->ty = sourceMatrix->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,copyFrom,(void))

void Matrix_obj::copyRowFrom(Int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix","copyRowFrom",0xadd25376,"openfl.geom.Matrix.copyRowFrom","openfl/geom/Matrix.hx",138,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 138)		if ((row > (int)2)) {
HXLINE( 140)			HX_STACK_DO_THROW(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 142)			if ((row == (int)0)) {
HXLINE( 144)				this->a = vector3D->x;
HXLINE( 145)				this->c = vector3D->y;
            			}
            			else {
HXLINE( 147)				if ((row == (int)1)) {
HXLINE( 149)					this->b = vector3D->x;
HXLINE( 150)					this->d = vector3D->y;
            				}
            				else {
HXLINE( 154)					this->tx = vector3D->x;
HXLINE( 155)					this->ty = vector3D->y;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyRowFrom,(void))

void Matrix_obj::copyRowTo(Int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix","copyRowTo",0xe92c3887,"openfl.geom.Matrix.copyRowTo","openfl/geom/Matrix.hx",164,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 164)		if ((row > (int)2)) {
HXLINE( 166)			HX_STACK_DO_THROW(((HX_("Row ",e6,20,88,36) + row) + HX_(" out of bounds (2)",eb,c3,f0,de)));
            		}
            		else {
HXLINE( 168)			if ((row == (int)0)) {
HXLINE( 170)				vector3D->x = this->a;
HXLINE( 171)				vector3D->y = this->b;
HXLINE( 172)				vector3D->z = this->tx;
            			}
            			else {
HXLINE( 174)				if ((row == (int)1)) {
HXLINE( 176)					vector3D->x = this->c;
HXLINE( 177)					vector3D->y = this->d;
HXLINE( 178)					vector3D->z = this->ty;
            				}
            				else {
HXLINE( 182)					vector3D->setTo((int)0,(int)0,(int)1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,copyRowTo,(void))

void Matrix_obj::createBox(Float scaleX,Float scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float rotation = __o_rotation.Default(0);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACK_FRAME("openfl.geom.Matrix","createBox",0xbfa242b6,"openfl.geom.Matrix.createBox","openfl/geom/Matrix.hx",189,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(scaleX,"scaleX")
            	HX_STACK_ARG(scaleY,"scaleY")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 196)		if ((rotation != (int)0)) {
HXLINE( 198)			HX_VARI( Float,cos) = ::Math_obj::cos(rotation);
HXLINE( 199)			HX_VARI( Float,sin) = ::Math_obj::sin(rotation);
HXLINE( 201)			this->a = (cos * scaleX);
HXLINE( 202)			this->b = (sin * scaleY);
HXLINE( 203)			this->c = (-(sin) * scaleX);
HXLINE( 204)			this->d = (cos * scaleY);
            		}
            		else {
HXLINE( 208)			this->a = scaleX;
HXLINE( 209)			this->b = (int)0;
HXLINE( 210)			this->c = (int)0;
HXLINE( 211)			this->d = scaleY;
            		}
HXLINE( 215)		this->tx = tx;
HXLINE( 216)		this->ty = ty;
            	}


HX_DEFINE_DYNAMIC_FUNC5(Matrix_obj,createBox,(void))

void Matrix_obj::createGradientBox(Float width,Float height,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_tx,hx::Null< Float >  __o_ty){
Float rotation = __o_rotation.Default(0);
Float tx = __o_tx.Default(0);
Float ty = __o_ty.Default(0);
            	HX_STACK_FRAME("openfl.geom.Matrix","createGradientBox",0xa2dcb9a6,"openfl.geom.Matrix.createGradientBox","openfl/geom/Matrix.hx",221,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 223)		this->a = ((Float)width / (Float)((Float)1638.4));
HXLINE( 224)		this->d = ((Float)height / (Float)((Float)1638.4));
HXLINE( 227)		if ((rotation != (int)0)) {
HXLINE( 229)			HX_VARI( Float,cos) = ::Math_obj::cos(rotation);
HXLINE( 230)			HX_VARI( Float,sin) = ::Math_obj::sin(rotation);
HXLINE( 232)			this->b = (sin * this->d);
HXLINE( 233)			this->c = (-(sin) * this->a);
HXLINE( 234)			hx::MultEq(this->a,cos);
HXLINE( 235)			hx::MultEq(this->d,cos);
            		}
            		else {
HXLINE( 239)			this->b = (int)0;
HXLINE( 240)			this->c = (int)0;
            		}
HXLINE( 244)		this->tx = (tx + ((Float)width / (Float)(int)2));
HXLINE( 245)		this->ty = (ty + ((Float)height / (Float)(int)2));
            	}


HX_DEFINE_DYNAMIC_FUNC5(Matrix_obj,createGradientBox,(void))

 ::openfl::geom::Point Matrix_obj::deltaTransformPoint( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.geom.Matrix","deltaTransformPoint",0xeb963a63,"openfl.geom.Matrix.deltaTransformPoint","openfl/geom/Matrix.hx",252,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 252)		return  ::openfl::geom::Point_obj::__new(((point->x * this->a) + (point->y * this->c)),((point->x * this->b) + (point->y * this->d)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,deltaTransformPoint,return )

Bool Matrix_obj::equals( ::Dynamic matrix){
            	HX_STACK_FRAME("openfl.geom.Matrix","equals",0x67f49d98,"openfl.geom.Matrix.equals","openfl/geom/Matrix.hx",259,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 259)		Bool _hx_tmp;
HXDLIN( 259)		Bool _hx_tmp1;
HXDLIN( 259)		Bool _hx_tmp2;
HXDLIN( 259)		Bool _hx_tmp3;
HXDLIN( 259)		Bool _hx_tmp4;
HXDLIN( 259)		Bool _hx_tmp5 = hx::IsNotNull( matrix );
HXDLIN( 259)		if (_hx_tmp5) {
HXLINE( 259)			_hx_tmp4 = (this->tx == ( (Float)(matrix->__Field(HX_("tx",84,65,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 259)			_hx_tmp4 = false;
            		}
HXDLIN( 259)		if (_hx_tmp4) {
HXLINE( 259)			_hx_tmp3 = (this->ty == ( (Float)(matrix->__Field(HX_("ty",85,65,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 259)			_hx_tmp3 = false;
            		}
HXDLIN( 259)		if (_hx_tmp3) {
HXLINE( 259)			_hx_tmp2 = (this->a == ( (Float)(matrix->__Field(HX_("a",61,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 259)			_hx_tmp2 = false;
            		}
HXDLIN( 259)		if (_hx_tmp2) {
HXLINE( 259)			_hx_tmp1 = (this->b == ( (Float)(matrix->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 259)			_hx_tmp1 = false;
            		}
HXDLIN( 259)		if (_hx_tmp1) {
HXLINE( 259)			_hx_tmp = (this->c == ( (Float)(matrix->__Field(HX_("c",63,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 259)			_hx_tmp = false;
            		}
HXDLIN( 259)		if (_hx_tmp) {
HXLINE( 259)			return (this->d == ( (Float)(matrix->__Field(HX_("d",64,00,00,00),hx::paccDynamic)) ));
            		}
            		else {
HXLINE( 259)			return false;
            		}
HXDLIN( 259)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,equals,return )

void Matrix_obj::identity(){
            	HX_STACK_FRAME("openfl.geom.Matrix","identity",0xa87e3cd7,"openfl.geom.Matrix.identity","openfl/geom/Matrix.hx",264,0xa0d54189)
            	HX_STACK_THIS(this)
HXLINE( 266)		this->a = (int)1;
HXLINE( 267)		this->b = (int)0;
HXLINE( 268)		this->c = (int)0;
HXLINE( 269)		this->d = (int)1;
HXLINE( 270)		this->tx = (int)0;
HXLINE( 271)		this->ty = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,identity,(void))

 ::openfl::geom::Matrix Matrix_obj::invert(){
            	HX_STACK_FRAME("openfl.geom.Matrix","invert",0x47da966f,"openfl.geom.Matrix.invert","openfl/geom/Matrix.hx",276,0xa0d54189)
            	HX_STACK_THIS(this)
HXLINE( 278)		HX_VARI( Float,norm) = ((this->a * this->d) - (this->b * this->c));
HXLINE( 280)		if ((norm == (int)0)) {
HXLINE( 282)			this->a = (this->b = (this->c = (this->d = (int)0)));
HXLINE( 283)			this->tx = -(this->tx);
HXLINE( 284)			this->ty = -(this->ty);
            		}
            		else {
HXLINE( 288)			norm = ((Float)((Float)1.0) / (Float)norm);
HXLINE( 289)			HX_VARI( Float,a1) = (this->d * norm);
HXLINE( 290)			this->d = (this->a * norm);
HXLINE( 291)			this->a = a1;
HXLINE( 292)			hx::MultEq(this->b,-(norm));
HXLINE( 293)			hx::MultEq(this->c,-(norm));
HXLINE( 295)			HX_VARI( Float,tx1) = ((-(this->a) * this->tx) - (this->c * this->ty));
HXLINE( 296)			Float _hx_tmp = (-(this->b) * this->tx);
HXDLIN( 296)			Float _hx_tmp1 = (this->d * this->ty);
HXDLIN( 296)			this->ty = (_hx_tmp - _hx_tmp1);
HXLINE( 297)			this->tx = tx1;
            		}
HXLINE( 303)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,invert,return )

void Matrix_obj::rotate(Float theta){
            	HX_STACK_FRAME("openfl.geom.Matrix","rotate",0x7321f5b4,"openfl.geom.Matrix.rotate","openfl/geom/Matrix.hx",308,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(theta,"theta")
HXLINE( 324)		HX_VARI( Float,cos) = ::Math_obj::cos(theta);
HXLINE( 325)		HX_VARI( Float,sin) = ::Math_obj::sin(theta);
HXLINE( 327)		HX_VARI( Float,a1) = ((this->a * cos) - (this->b * sin));
HXLINE( 328)		Float _hx_tmp = (this->a * sin);
HXDLIN( 328)		Float _hx_tmp1 = (this->b * cos);
HXDLIN( 328)		this->b = (_hx_tmp + _hx_tmp1);
HXLINE( 329)		this->a = a1;
HXLINE( 331)		HX_VARI( Float,c1) = ((this->c * cos) - (this->d * sin));
HXLINE( 332)		Float _hx_tmp2 = (this->c * sin);
HXDLIN( 332)		Float _hx_tmp3 = (this->d * cos);
HXDLIN( 332)		this->d = (_hx_tmp2 + _hx_tmp3);
HXLINE( 333)		this->c = c1;
HXLINE( 335)		HX_VARI( Float,tx1) = ((this->tx * cos) - (this->ty * sin));
HXLINE( 336)		Float _hx_tmp4 = (this->tx * sin);
HXDLIN( 336)		Float _hx_tmp5 = (this->ty * cos);
HXDLIN( 336)		this->ty = (_hx_tmp4 + _hx_tmp5);
HXLINE( 337)		this->tx = tx1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,rotate,(void))

void Matrix_obj::scale(Float sx,Float sy){
            	HX_STACK_FRAME("openfl.geom.Matrix","scale",0x13640d51,"openfl.geom.Matrix.scale","openfl/geom/Matrix.hx",344,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sx,"sx")
            	HX_STACK_ARG(sy,"sy")
HXLINE( 355)		hx::MultEq(this->a,sx);
HXLINE( 356)		hx::MultEq(this->b,sy);
HXLINE( 357)		hx::MultEq(this->c,sx);
HXLINE( 358)		hx::MultEq(this->d,sy);
HXLINE( 359)		hx::MultEq(this->tx,sx);
HXLINE( 360)		hx::MultEq(this->ty,sy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,scale,(void))

void Matrix_obj::setRotation(Float theta,hx::Null< Float >  __o_scale){
Float scale = __o_scale.Default(1);
            	HX_STACK_FRAME("openfl.geom.Matrix","setRotation",0xf72e1507,"openfl.geom.Matrix.setRotation","openfl/geom/Matrix.hx",367,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(theta,"theta")
            	HX_STACK_ARG(scale,"scale")
HXLINE( 369)		Float _hx_tmp = ::Math_obj::cos(theta);
HXDLIN( 369)		this->a = (_hx_tmp * scale);
HXLINE( 370)		Float _hx_tmp1 = ::Math_obj::sin(theta);
HXDLIN( 370)		this->c = (_hx_tmp1 * scale);
HXLINE( 371)		this->b = -(this->c);
HXLINE( 372)		this->d = this->a;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,setRotation,(void))

void Matrix_obj::setTo(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACK_FRAME("openfl.geom.Matrix","setTo",0x14c4d084,"openfl.geom.Matrix.setTo","openfl/geom/Matrix.hx",379,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 381)		this->a = a;
HXLINE( 382)		this->b = b;
HXLINE( 383)		this->c = c;
HXLINE( 384)		this->d = d;
HXLINE( 385)		this->tx = tx;
HXLINE( 386)		this->ty = ty;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Matrix_obj,setTo,(void))

::String Matrix_obj::to3DString(hx::Null< Bool >  __o_roundPixels){
Bool roundPixels = __o_roundPixels.Default(false);
            	HX_STACK_FRAME("openfl.geom.Matrix","to3DString",0xe99e8cb6,"openfl.geom.Matrix.to3DString","openfl/geom/Matrix.hx",393,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(roundPixels,"roundPixels")
HXLINE( 393)		if (roundPixels) {
HXLINE( 395)			::String _hx_tmp = ((((((((HX_("matrix3d(",96,72,db,ad) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", 0, 0, ",f4,b3,68,a3)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", 0, 0, 0, 0, 1, 0, ",53,8b,16,4d));
HXDLIN( 395)			Int _hx_tmp1 = ::Std_obj::_hx_int(this->tx);
HXDLIN( 395)			::String _hx_tmp2 = ((_hx_tmp + _hx_tmp1) + HX_(", ",74,26,00,00));
HXDLIN( 395)			Int _hx_tmp3 = ::Std_obj::_hx_int(this->ty);
HXDLIN( 395)			return ((_hx_tmp2 + _hx_tmp3) + HX_(", 0, 1)",88,a3,85,b1));
            		}
            		else {
HXLINE( 399)			return ((((((((((((HX_("matrix3d(",96,72,db,ad) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", 0, 0, ",f4,b3,68,a3)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", 0, 0, 0, 0, 1, 0, ",53,8b,16,4d)) + this->tx) + HX_(", ",74,26,00,00)) + this->ty) + HX_(", 0, 1)",88,a3,85,b1));
            		}
HXLINE( 393)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,to3DString,return )

::String Matrix_obj::toMozString(){
            	HX_STACK_FRAME("openfl.geom.Matrix","toMozString",0xd9d4e6d5,"openfl.geom.Matrix.toMozString","openfl/geom/Matrix.hx",408,0xa0d54189)
            	HX_STACK_THIS(this)
HXLINE( 408)		return ((((((((((((HX_("matrix(",c7,42,67,93) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", ",74,26,00,00)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", ",74,26,00,00)) + this->tx) + HX_("px, ",7c,1a,63,4a)) + this->ty) + HX_("px)",21,65,55,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,toMozString,return )

::String Matrix_obj::toString(){
            	HX_STACK_FRAME("openfl.geom.Matrix","toString",0x27bdc845,"openfl.geom.Matrix.toString","openfl/geom/Matrix.hx",415,0xa0d54189)
            	HX_STACK_THIS(this)
HXLINE( 415)		return ((((((((((((HX_("matrix(",c7,42,67,93) + this->a) + HX_(", ",74,26,00,00)) + this->b) + HX_(", ",74,26,00,00)) + this->c) + HX_(", ",74,26,00,00)) + this->d) + HX_(", ",74,26,00,00)) + this->tx) + HX_(", ",74,26,00,00)) + this->ty) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,toString,return )

 ::openfl::geom::Point Matrix_obj::transformPoint( ::openfl::geom::Point pos){
            	HX_STACK_FRAME("openfl.geom.Matrix","transformPoint",0xaac7ff9d,"openfl.geom.Matrix.transformPoint","openfl/geom/Matrix.hx",422,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 422)		return  ::openfl::geom::Point_obj::__new((((pos->x * this->a) + (pos->y * this->c)) + this->tx),(((pos->x * this->b) + (pos->y * this->d)) + this->ty));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,transformPoint,return )

void Matrix_obj::translate(Float dx,Float dy){
            	HX_STACK_FRAME("openfl.geom.Matrix","translate",0xbf498595,"openfl.geom.Matrix.translate","openfl/geom/Matrix.hx",427,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(dx,"dx")
            	HX_STACK_ARG(dy,"dy")
HXLINE( 429)		hx::AddEq(this->tx,dx);
HXLINE( 430)		hx::AddEq(this->ty,dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,translate,(void))

 ::lime::utils::ArrayBufferView Matrix_obj::toArray(hx::Null< Bool >  __o_transpose){
Bool transpose = __o_transpose.Default(false);
            	HX_STACK_FRAME("openfl.geom.Matrix","toArray",0x4b8b78a5,"openfl.geom.Matrix.toArray","openfl/geom/Matrix.hx",435,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transpose,"transpose")
HXLINE( 437)		Bool _hx_tmp = hx::IsNull( this->_hx___array );
HXDLIN( 437)		if (_hx_tmp) {
HXLINE( 439)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)9,(int)8);
HXDLIN( 439)			this->_hx___array = this1;
            		}
HXLINE( 443)		if (transpose) {
HXLINE( 445)			{
HXLINE( 445)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") = this->_hx___array;
HXDLIN( 445)				HX_VARI( Float,val) = this->a;
HXDLIN( 445)				{
HXLINE( 445)					Int byteOffset = this2->byteOffset;
HXDLIN( 445)					::__hxcpp_memory_set_float(this2->buffer->b,byteOffset,val);
            				}
            			}
HXLINE( 446)			{
HXLINE( 446)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = this->_hx___array;
HXDLIN( 446)				HX_VARI_NAME( Float,val1,"val") = this->b;
HXDLIN( 446)				{
HXLINE( 446)					Int byteOffset1 = (this3->byteOffset + (int)4);
HXDLIN( 446)					::__hxcpp_memory_set_float(this3->buffer->b,byteOffset1,val1);
            				}
            			}
HXLINE( 447)			{
HXLINE( 447)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = this->_hx___array;
HXDLIN( 447)				{
HXLINE( 447)					Int byteOffset2 = (this4->byteOffset + (int)8);
HXDLIN( 447)					::__hxcpp_memory_set_float(this4->buffer->b,byteOffset2,(int)0);
            				}
            			}
HXLINE( 448)			{
HXLINE( 448)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = this->_hx___array;
HXDLIN( 448)				HX_VARI_NAME( Float,val2,"val") = this->c;
HXDLIN( 448)				{
HXLINE( 448)					Int byteOffset3 = (this5->byteOffset + (int)12);
HXDLIN( 448)					::__hxcpp_memory_set_float(this5->buffer->b,byteOffset3,val2);
            				}
            			}
HXLINE( 449)			{
HXLINE( 449)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = this->_hx___array;
HXDLIN( 449)				HX_VARI_NAME( Float,val3,"val") = this->d;
HXDLIN( 449)				{
HXLINE( 449)					Int byteOffset4 = (this6->byteOffset + (int)16);
HXDLIN( 449)					::__hxcpp_memory_set_float(this6->buffer->b,byteOffset4,val3);
            				}
            			}
HXLINE( 450)			{
HXLINE( 450)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this7,"this") = this->_hx___array;
HXDLIN( 450)				{
HXLINE( 450)					Int byteOffset5 = (this7->byteOffset + (int)20);
HXDLIN( 450)					::__hxcpp_memory_set_float(this7->buffer->b,byteOffset5,(int)0);
            				}
            			}
HXLINE( 451)			{
HXLINE( 451)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this8,"this") = this->_hx___array;
HXDLIN( 451)				HX_VARI_NAME( Float,val4,"val") = this->tx;
HXDLIN( 451)				{
HXLINE( 451)					Int byteOffset6 = (this8->byteOffset + (int)24);
HXDLIN( 451)					::__hxcpp_memory_set_float(this8->buffer->b,byteOffset6,val4);
            				}
            			}
HXLINE( 452)			{
HXLINE( 452)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this9,"this") = this->_hx___array;
HXDLIN( 452)				HX_VARI_NAME( Float,val5,"val") = this->ty;
HXDLIN( 452)				{
HXLINE( 452)					Int byteOffset7 = (this9->byteOffset + (int)28);
HXDLIN( 452)					::__hxcpp_memory_set_float(this9->buffer->b,byteOffset7,val5);
            				}
            			}
HXLINE( 453)			{
HXLINE( 453)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this10,"this") = this->_hx___array;
HXDLIN( 453)				{
HXLINE( 453)					Int byteOffset8 = (this10->byteOffset + (int)32);
HXDLIN( 453)					::__hxcpp_memory_set_float(this10->buffer->b,byteOffset8,(int)1);
            				}
            			}
            		}
            		else {
HXLINE( 457)			{
HXLINE( 457)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this11,"this") = this->_hx___array;
HXDLIN( 457)				HX_VARI_NAME( Float,val6,"val") = this->a;
HXDLIN( 457)				{
HXLINE( 457)					Int byteOffset9 = this11->byteOffset;
HXDLIN( 457)					::__hxcpp_memory_set_float(this11->buffer->b,byteOffset9,val6);
            				}
            			}
HXLINE( 458)			{
HXLINE( 458)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this12,"this") = this->_hx___array;
HXDLIN( 458)				HX_VARI_NAME( Float,val7,"val") = this->c;
HXDLIN( 458)				{
HXLINE( 458)					Int byteOffset10 = (this12->byteOffset + (int)4);
HXDLIN( 458)					::__hxcpp_memory_set_float(this12->buffer->b,byteOffset10,val7);
            				}
            			}
HXLINE( 459)			{
HXLINE( 459)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this13,"this") = this->_hx___array;
HXDLIN( 459)				HX_VARI_NAME( Float,val8,"val") = this->tx;
HXDLIN( 459)				{
HXLINE( 459)					Int byteOffset11 = (this13->byteOffset + (int)8);
HXDLIN( 459)					::__hxcpp_memory_set_float(this13->buffer->b,byteOffset11,val8);
            				}
            			}
HXLINE( 460)			{
HXLINE( 460)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this14,"this") = this->_hx___array;
HXDLIN( 460)				HX_VARI_NAME( Float,val9,"val") = this->b;
HXDLIN( 460)				{
HXLINE( 460)					Int byteOffset12 = (this14->byteOffset + (int)12);
HXDLIN( 460)					::__hxcpp_memory_set_float(this14->buffer->b,byteOffset12,val9);
            				}
            			}
HXLINE( 461)			{
HXLINE( 461)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this15,"this") = this->_hx___array;
HXDLIN( 461)				HX_VARI_NAME( Float,val10,"val") = this->d;
HXDLIN( 461)				{
HXLINE( 461)					Int byteOffset13 = (this15->byteOffset + (int)16);
HXDLIN( 461)					::__hxcpp_memory_set_float(this15->buffer->b,byteOffset13,val10);
            				}
            			}
HXLINE( 462)			{
HXLINE( 462)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this16,"this") = this->_hx___array;
HXDLIN( 462)				HX_VARI_NAME( Float,val11,"val") = this->ty;
HXDLIN( 462)				{
HXLINE( 462)					Int byteOffset14 = (this16->byteOffset + (int)20);
HXDLIN( 462)					::__hxcpp_memory_set_float(this16->buffer->b,byteOffset14,val11);
            				}
            			}
HXLINE( 463)			{
HXLINE( 463)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this17,"this") = this->_hx___array;
HXDLIN( 463)				{
HXLINE( 463)					Int byteOffset15 = (this17->byteOffset + (int)24);
HXDLIN( 463)					::__hxcpp_memory_set_float(this17->buffer->b,byteOffset15,(int)0);
            				}
            			}
HXLINE( 464)			{
HXLINE( 464)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this18,"this") = this->_hx___array;
HXDLIN( 464)				{
HXLINE( 464)					Int byteOffset16 = (this18->byteOffset + (int)28);
HXDLIN( 464)					::__hxcpp_memory_set_float(this18->buffer->b,byteOffset16,(int)0);
            				}
            			}
HXLINE( 465)			{
HXLINE( 465)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this19,"this") = this->_hx___array;
HXDLIN( 465)				{
HXLINE( 465)					Int byteOffset17 = (this19->byteOffset + (int)32);
HXDLIN( 465)					::__hxcpp_memory_set_float(this19->buffer->b,byteOffset17,(int)1);
            				}
            			}
            		}
HXLINE( 469)		return this->_hx___array;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,toArray,return )

void Matrix_obj::_hx___cleanValues(){
            	HX_STACK_FRAME("openfl.geom.Matrix","__cleanValues",0xae7254f2,"openfl.geom.Matrix.__cleanValues","openfl/geom/Matrix.hx",474,0xa0d54189)
            	HX_STACK_THIS(this)
HXLINE( 476)		Float _hx_tmp = (this->a * (int)1000);
HXDLIN( 476)		Int _hx_tmp1 = ::Math_obj::round(_hx_tmp);
HXDLIN( 476)		this->a = ((Float)_hx_tmp1 / (Float)(int)1000);
HXLINE( 477)		Float _hx_tmp2 = (this->b * (int)1000);
HXDLIN( 477)		Int _hx_tmp3 = ::Math_obj::round(_hx_tmp2);
HXDLIN( 477)		this->b = ((Float)_hx_tmp3 / (Float)(int)1000);
HXLINE( 478)		Float _hx_tmp4 = (this->c * (int)1000);
HXDLIN( 478)		Int _hx_tmp5 = ::Math_obj::round(_hx_tmp4);
HXDLIN( 478)		this->c = ((Float)_hx_tmp5 / (Float)(int)1000);
HXLINE( 479)		Float _hx_tmp6 = (this->d * (int)1000);
HXDLIN( 479)		Int _hx_tmp7 = ::Math_obj::round(_hx_tmp6);
HXDLIN( 479)		this->d = ((Float)_hx_tmp7 / (Float)(int)1000);
HXLINE( 480)		Float _hx_tmp8 = (this->tx * (int)10);
HXDLIN( 480)		Int _hx_tmp9 = ::Math_obj::round(_hx_tmp8);
HXDLIN( 480)		this->tx = ((Float)_hx_tmp9 / (Float)(int)10);
HXLINE( 481)		Float _hx_tmp10 = (this->ty * (int)10);
HXDLIN( 481)		Int _hx_tmp11 = ::Math_obj::round(_hx_tmp10);
HXDLIN( 481)		this->ty = ((Float)_hx_tmp11 / (Float)(int)10);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,_hx___cleanValues,(void))

 ::lime::math::Matrix3 Matrix_obj::_hx___toMatrix3(){
            	HX_STACK_FRAME("openfl.geom.Matrix","__toMatrix3",0xaf6ed17e,"openfl.geom.Matrix.__toMatrix3","openfl/geom/Matrix.hx",486,0xa0d54189)
            	HX_STACK_THIS(this)
HXLINE( 488)		::openfl::geom::Matrix_obj::_hx___matrix3->setTo(this->a,this->b,this->c,this->d,this->tx,this->ty);
HXLINE( 489)		return ::openfl::geom::Matrix_obj::_hx___matrix3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix_obj,_hx___toMatrix3,return )

void Matrix_obj::_hx___transformInversePoint( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.geom.Matrix","__transformInversePoint",0xde42fb73,"openfl.geom.Matrix.__transformInversePoint","openfl/geom/Matrix.hx",494,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 496)		HX_VARI( Float,norm) = ((this->a * this->d) - (this->b * this->c));
HXLINE( 498)		if ((norm == (int)0)) {
HXLINE( 500)			point->x = -(this->tx);
HXLINE( 501)			point->y = -(this->ty);
            		}
            		else {
HXLINE( 505)			HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((this->c * (this->ty - point->y)) + (this->d * (point->x - this->tx))));
HXLINE( 506)			Float _hx_tmp = ((Float)((Float)1.0) / (Float)norm);
HXDLIN( 506)			Float _hx_tmp1 = (this->a * (point->y - this->ty));
HXDLIN( 506)			Float _hx_tmp2 = (this->b * (this->tx - point->x));
HXDLIN( 506)			point->y = (_hx_tmp * (_hx_tmp1 + _hx_tmp2));
HXLINE( 507)			point->x = px;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,_hx___transformInversePoint,(void))

Float Matrix_obj::_hx___transformInverseX(Float px,Float py){
            	HX_STACK_FRAME("openfl.geom.Matrix","__transformInverseX",0x55523a1b,"openfl.geom.Matrix.__transformInverseX","openfl/geom/Matrix.hx",514,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(px,"px")
            	HX_STACK_ARG(py,"py")
HXLINE( 516)		HX_VARI( Float,norm) = ((this->a * this->d) - (this->b * this->c));
HXLINE( 518)		if ((norm == (int)0)) {
HXLINE( 520)			return -(this->tx);
            		}
            		else {
HXLINE( 524)			return (((Float)((Float)1.0) / (Float)norm) * ((this->c * (this->ty - py)) + (this->d * (px - this->tx))));
            		}
HXLINE( 518)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___transformInverseX,return )

Float Matrix_obj::_hx___transformInverseY(Float px,Float py){
            	HX_STACK_FRAME("openfl.geom.Matrix","__transformInverseY",0x55523a1c,"openfl.geom.Matrix.__transformInverseY","openfl/geom/Matrix.hx",531,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(px,"px")
            	HX_STACK_ARG(py,"py")
HXLINE( 533)		HX_VARI( Float,norm) = ((this->a * this->d) - (this->b * this->c));
HXLINE( 535)		if ((norm == (int)0)) {
HXLINE( 537)			return -(this->ty);
            		}
            		else {
HXLINE( 541)			return (((Float)((Float)1.0) / (Float)norm) * ((this->a * (py - this->ty)) + (this->b * (this->tx - px))));
            		}
HXLINE( 535)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___transformInverseY,return )

void Matrix_obj::_hx___transformPoint( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.geom.Matrix","__transformPoint",0x5d3712fd,"openfl.geom.Matrix.__transformPoint","openfl/geom/Matrix.hx",548,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 550)		HX_VARI( Float,px) = point->x;
HXLINE( 551)		HX_VARI( Float,py) = point->y;
HXLINE( 553)		Float _hx_tmp = ((px * this->a) + (py * this->c));
HXDLIN( 553)		point->x = (_hx_tmp + this->tx);
HXLINE( 554)		Float _hx_tmp1 = ((px * this->b) + (py * this->d));
HXDLIN( 554)		point->y = (_hx_tmp1 + this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix_obj,_hx___transformPoint,(void))

Float Matrix_obj::_hx___transformX(Float px,Float py){
            	HX_STACK_FRAME("openfl.geom.Matrix","__transformX",0x93ad44a5,"openfl.geom.Matrix.__transformX","openfl/geom/Matrix.hx",561,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(px,"px")
            	HX_STACK_ARG(py,"py")
HXLINE( 561)		return (((px * this->a) + (py * this->c)) + this->tx);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___transformX,return )

Float Matrix_obj::_hx___transformY(Float px,Float py){
            	HX_STACK_FRAME("openfl.geom.Matrix","__transformY",0x93ad44a6,"openfl.geom.Matrix.__transformY","openfl/geom/Matrix.hx",568,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(px,"px")
            	HX_STACK_ARG(py,"py")
HXLINE( 568)		return (((px * this->b) + (py * this->d)) + this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___transformY,return )

void Matrix_obj::_hx___translateTransformed(Float px,Float py){
            	HX_STACK_FRAME("openfl.geom.Matrix","__translateTransformed",0x123e9496,"openfl.geom.Matrix.__translateTransformed","openfl/geom/Matrix.hx",573,0xa0d54189)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(px,"px")
            	HX_STACK_ARG(py,"py")
HXLINE( 575)		Float _hx_tmp = ((px * this->a) + (py * this->c));
HXDLIN( 575)		this->tx = (_hx_tmp + this->tx);
HXLINE( 576)		Float _hx_tmp1 = ((px * this->b) + (py * this->d));
HXDLIN( 576)		this->ty = (_hx_tmp1 + this->ty);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix_obj,_hx___translateTransformed,(void))

 ::openfl::geom::Matrix Matrix_obj::_hx___identity;

 ::lime::math::Matrix3 Matrix_obj::_hx___matrix3;

 ::openfl::geom::Matrix Matrix_obj::_hx___temp;


Matrix_obj::Matrix_obj()
{
}

void Matrix_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Matrix);
	HX_MARK_MEMBER_NAME(a,"a");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(d,"d");
	HX_MARK_MEMBER_NAME(tx,"tx");
	HX_MARK_MEMBER_NAME(ty,"ty");
	HX_MARK_MEMBER_NAME(_hx___array,"__array");
	HX_MARK_END_CLASS();
}

void Matrix_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(a,"a");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(d,"d");
	HX_VISIT_MEMBER_NAME(tx,"tx");
	HX_VISIT_MEMBER_NAME(ty,"ty");
	HX_VISIT_MEMBER_NAME(_hx___array,"__array");
}

hx::Val Matrix_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return hx::Val( a); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		if (HX_FIELD_EQ(inName,"c") ) { return hx::Val( c); }
		if (HX_FIELD_EQ(inName,"d") ) { return hx::Val( d); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { return hx::Val( tx); }
		if (HX_FIELD_EQ(inName,"ty") ) { return hx::Val( ty); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale_dyn()); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return hx::Val( setTo_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn()); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn()); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { return hx::Val( _hx___array); }
		if (HX_FIELD_EQ(inName,"toArray") ) { return hx::Val( toArray_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn()); }
		if (HX_FIELD_EQ(inName,"createBox") ) { return hx::Val( createBox_dyn()); }
		if (HX_FIELD_EQ(inName,"translate") ) { return hx::Val( translate_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"to3DString") ) { return hx::Val( to3DString_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"setRotation") ) { return hx::Val( setRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"toMozString") ) { return hx::Val( toMozString_dyn()); }
		if (HX_FIELD_EQ(inName,"__toMatrix3") ) { return hx::Val( _hx___toMatrix3_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn()); }
		if (HX_FIELD_EQ(inName,"__transformX") ) { return hx::Val( _hx___transformX_dyn()); }
		if (HX_FIELD_EQ(inName,"__transformY") ) { return hx::Val( _hx___transformY_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__cleanValues") ) { return hx::Val( _hx___cleanValues_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"transformPoint") ) { return hx::Val( transformPoint_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__transformPoint") ) { return hx::Val( _hx___transformPoint_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createGradientBox") ) { return hx::Val( createGradientBox_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"deltaTransformPoint") ) { return hx::Val( deltaTransformPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"__transformInverseX") ) { return hx::Val( _hx___transformInverseX_dyn()); }
		if (HX_FIELD_EQ(inName,"__transformInverseY") ) { return hx::Val( _hx___transformInverseY_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__translateTransformed") ) { return hx::Val( _hx___translateTransformed_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__transformInversePoint") ) { return hx::Val( _hx___transformInversePoint_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__temp") ) { outValue = _hx___temp; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__matrix3") ) { outValue = _hx___matrix3; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__identity") ) { outValue = _hx___identity; return true; }
	}
	return false;
}

hx::Val Matrix_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"d") ) { d=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"tx") ) { tx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ty") ) { ty=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { _hx___array=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Matrix_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__temp") ) { _hx___temp=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__matrix3") ) { _hx___matrix3=ioValue.Cast<  ::lime::math::Matrix3 >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__identity") ) { _hx___identity=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

void Matrix_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("a","\x61","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("c","\x63","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("d","\x64","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("tx","\x84","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("ty","\x85","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Matrix_obj,a),HX_HCSTRING("a","\x61","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,c),HX_HCSTRING("c","\x63","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,d),HX_HCSTRING("d","\x64","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,tx),HX_HCSTRING("tx","\x84","\x65","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(Matrix_obj,ty),HX_HCSTRING("ty","\x85","\x65","\x00","\x00")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Matrix_obj,_hx___array),HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Matrix_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Matrix_obj::_hx___identity,HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c")},
	{hx::fsObject /*::lime::math::Matrix3*/ ,(void *) &Matrix_obj::_hx___matrix3,HX_HCSTRING("__matrix3","\xb2","\x93","\xb5","\x14")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &Matrix_obj::_hx___temp,HX_HCSTRING("__temp","\x34","\x26","\xf2","\xfb")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Matrix_obj_sMemberFields[] = {
	HX_HCSTRING("a","\x61","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("c","\x63","\x00","\x00","\x00"),
	HX_HCSTRING("d","\x64","\x00","\x00","\x00"),
	HX_HCSTRING("tx","\x84","\x65","\x00","\x00"),
	HX_HCSTRING("ty","\x85","\x65","\x00","\x00"),
	HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("createBox","\x6f","\x94","\xd8","\x49"),
	HX_HCSTRING("createGradientBox","\x5f","\xec","\xc0","\x25"),
	HX_HCSTRING("deltaTransformPoint","\x5c","\x4d","\xf7","\x15"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("setRotation","\x00","\x07","\xe7","\x38"),
	HX_HCSTRING("setTo","\xbd","\x91","\x2f","\x7a"),
	HX_HCSTRING("to3DString","\xdd","\xbc","\xef","\x4e"),
	HX_HCSTRING("toMozString","\xce","\xd8","\x8d","\x1b"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("transformPoint","\x44","\xcf","\x11","\x3d"),
	HX_HCSTRING("translate","\x4e","\xd7","\x7f","\x49"),
	HX_HCSTRING("toArray","\x1e","\xba","\x13","\xf2"),
	HX_HCSTRING("__cleanValues","\x2b","\x77","\xc6","\x85"),
	HX_HCSTRING("__toMatrix3","\x77","\xc3","\x27","\xf1"),
	HX_HCSTRING("__transformInversePoint","\xec","\x7e","\x5b","\xe2"),
	HX_HCSTRING("__transformInverseX","\x14","\x4d","\xb3","\x7f"),
	HX_HCSTRING("__transformInverseY","\x15","\x4d","\xb3","\x7f"),
	HX_HCSTRING("__transformPoint","\x64","\x5a","\x51","\x71"),
	HX_HCSTRING("__transformX","\x8c","\x0c","\xc8","\xd3"),
	HX_HCSTRING("__transformY","\x8d","\x0c","\xc8","\xd3"),
	HX_HCSTRING("__translateTransformed","\x3d","\xe3","\xea","\x64"),
	::String(null()) };

static void Matrix_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Matrix_obj::_hx___identity,"__identity");
	HX_MARK_MEMBER_NAME(Matrix_obj::_hx___matrix3,"__matrix3");
	HX_MARK_MEMBER_NAME(Matrix_obj::_hx___temp,"__temp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Matrix_obj::_hx___identity,"__identity");
	HX_VISIT_MEMBER_NAME(Matrix_obj::_hx___matrix3,"__matrix3");
	HX_VISIT_MEMBER_NAME(Matrix_obj::_hx___temp,"__temp");
};

#endif

hx::Class Matrix_obj::__mClass;

static ::String Matrix_obj_sStaticFields[] = {
	HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c"),
	HX_HCSTRING("__matrix3","\xb2","\x93","\xb5","\x14"),
	HX_HCSTRING("__temp","\x34","\x26","\xf2","\xfb"),
	::String(null())
};

void Matrix_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Matrix","\xf5","\xbf","\x06","\x9e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix_obj::__GetStatic;
	__mClass->mSetStaticField = &Matrix_obj::__SetStatic;
	__mClass->mMarkFunc = Matrix_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Matrix_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.geom.Matrix","boot",0xa91e7b4b,"openfl.geom.Matrix.boot","openfl/geom/Matrix.hx",17,0xa0d54189)
HXLINE(  17)		_hx___identity =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            	}
{
            	HX_STACK_FRAME("openfl.geom.Matrix","boot",0xa91e7b4b,"openfl.geom.Matrix.boot","openfl/geom/Matrix.hx",18,0xa0d54189)
HXLINE(  18)		_hx___matrix3 =  ::lime::math::Matrix3_obj::__new(null(),null(),null(),null(),null(),null());
            	}
{
            	HX_STACK_FRAME("openfl.geom.Matrix","boot",0xa91e7b4b,"openfl.geom.Matrix.boot","openfl/geom/Matrix.hx",19,0xa0d54189)
HXLINE(  19)		_hx___temp =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            	}
}

} // end namespace openfl
} // end namespace geom
