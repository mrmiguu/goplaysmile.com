// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_display3D__Program3D_Uniform
#include <openfl/display3D/_Program3D/Uniform.h>
#endif
#ifndef INCLUDED_openfl_display3D__Program3D_UniformMap
#include <openfl/display3D/_Program3D/UniformMap.h>
#endif

namespace openfl{
namespace display3D{
namespace _Program3D{

void UniformMap_obj::__construct(::Array< ::Dynamic> list){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		Int _hx_run( ::openfl::display3D::_Program3D::Uniform a, ::openfl::display3D::_Program3D::Uniform b){
            			HX_STACK_FRAME("openfl.display3D._Program3D.UniformMap","new",0xd35cedd9,"openfl.display3D._Program3D.UniformMap.new","openfl/display3D/Program3D.hx",521,0x0a985b04)
            			HX_STACK_ARG(a,"a")
            			HX_STACK_ARG(b,"b")
HXLINE( 521)			return ::Reflect_obj::compare(a->regIndex,b->regIndex);
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACK_FRAME("openfl.display3D._Program3D.UniformMap","new",0xd35cedd9,"openfl.display3D._Program3D.UniformMap.new","openfl/display3D/Program3D.hx",515,0x0a985b04)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(list,"list")
HXLINE( 517)		this->_hx___uniforms = list;
HXLINE( 519)		this->_hx___uniforms->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE( 525)		HX_VARI( Int,total) = (int)0;
HXLINE( 527)		{
HXLINE( 527)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 527)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___uniforms;
HXDLIN( 527)			while((_g < _g1->length)){
HXLINE( 527)				HX_VARI(  ::openfl::display3D::_Program3D::Uniform,uniform) = _g1->__get(_g).StaticCast<  ::openfl::display3D::_Program3D::Uniform >();
HXDLIN( 527)				++_g;
HXLINE( 529)				Bool _hx_tmp = ((uniform->regIndex + uniform->regCount) > total);
HXDLIN( 529)				if (_hx_tmp) {
HXLINE( 531)					total = (uniform->regIndex + uniform->regCount);
            				}
            			}
            		}
HXLINE( 537)		Bool fixed = null();
HXDLIN( 537)		 ::openfl::_Vector::ObjectVector _hx_tmp1 =  ::openfl::_Vector::ObjectVector_obj::__new(total,fixed,null());
HXDLIN( 537)		this->_hx___registerLookup = _hx_tmp1;
HXLINE( 539)		{
HXLINE( 539)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 539)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___uniforms;
HXDLIN( 539)			while((_g2 < _g11->length)){
HXLINE( 539)				HX_VARI_NAME(  ::openfl::display3D::_Program3D::Uniform,uniform1,"uniform") = _g11->__get(_g2).StaticCast<  ::openfl::display3D::_Program3D::Uniform >();
HXDLIN( 539)				++_g2;
HXLINE( 541)				{
HXLINE( 541)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 541)					HX_VARI_NAME( Int,_g21,"_g2") = uniform1->regCount;
HXDLIN( 541)					while((_g3 < _g21)){
HXLINE( 541)						HX_VARI( Int,i) = _g3++;
HXLINE( 543)						{
HXLINE( 543)							Int index = (uniform1->regIndex + i);
HXDLIN( 543)							this->_hx___registerLookup->set(index,uniform1).StaticCast<  ::openfl::display3D::_Program3D::Uniform >();
            						}
            					}
            				}
            			}
            		}
HXLINE( 549)		this->_hx___anyDirty = (this->_hx___allDirty = true);
            	}

Dynamic UniformMap_obj::__CreateEmpty() { return new UniformMap_obj; }

hx::ObjectPtr< UniformMap_obj > UniformMap_obj::__new(::Array< ::Dynamic> list)
{
	hx::ObjectPtr< UniformMap_obj > _hx_result = new UniformMap_obj();
	_hx_result->__construct(list);
	return _hx_result;
}

Dynamic UniformMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UniformMap_obj > _hx_result = new UniformMap_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void UniformMap_obj::flush(){
            	HX_STACK_FRAME("openfl.display3D._Program3D.UniformMap","flush",0x8041907d,"openfl.display3D._Program3D.UniformMap.flush","openfl/display3D/Program3D.hx",556,0x0a985b04)
            	HX_STACK_THIS(this)
HXLINE( 556)		Bool _hx_tmp = this->_hx___anyDirty;
HXDLIN( 556)		if (_hx_tmp) {
HXLINE( 558)			{
HXLINE( 558)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 558)				HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___uniforms;
HXDLIN( 558)				while((_g < _g1->length)){
HXLINE( 558)					HX_VARI(  ::openfl::display3D::_Program3D::Uniform,uniform) = _g1->__get(_g).StaticCast<  ::openfl::display3D::_Program3D::Uniform >();
HXDLIN( 558)					++_g;
HXLINE( 560)					Bool _hx_tmp1;
HXDLIN( 560)					if (!(this->_hx___allDirty)) {
HXLINE( 560)						_hx_tmp1 = uniform->isDirty;
            					}
            					else {
HXLINE( 560)						_hx_tmp1 = true;
            					}
HXDLIN( 560)					if (_hx_tmp1) {
HXLINE( 562)						uniform->flush();
HXLINE( 563)						uniform->isDirty = false;
            					}
            				}
            			}
HXLINE( 569)			this->_hx___anyDirty = (this->_hx___allDirty = false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(UniformMap_obj,flush,(void))

void UniformMap_obj::markAllDirty(){
            	HX_STACK_FRAME("openfl.display3D._Program3D.UniformMap","markAllDirty",0xa1dc4bc5,"openfl.display3D._Program3D.UniformMap.markAllDirty","openfl/display3D/Program3D.hx",576,0x0a985b04)
            	HX_STACK_THIS(this)
HXLINE( 578)		this->_hx___allDirty = true;
HXLINE( 579)		this->_hx___anyDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(UniformMap_obj,markAllDirty,(void))

void UniformMap_obj::markDirty(Int start,Int count){
            	HX_STACK_FRAME("openfl.display3D._Program3D.UniformMap","markDirty",0x0c852efe,"openfl.display3D._Program3D.UniformMap.markDirty","openfl/display3D/Program3D.hx",584,0x0a985b04)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(start,"start")
            	HX_STACK_ARG(count,"count")
HXLINE( 586)		if (this->_hx___allDirty) {
HXLINE( 588)			return;
            		}
HXLINE( 592)		HX_VARI( Int,end) = (start + count);
HXLINE( 594)		Int _hx_tmp = this->_hx___registerLookup->get_length();
HXDLIN( 594)		if ((end > _hx_tmp)) {
HXLINE( 596)			end = this->_hx___registerLookup->get_length();
            		}
HXLINE( 600)		HX_VARI( Int,index) = start;
HXLINE( 602)		while((index < end)){
HXLINE( 604)			HX_VARI(  ::openfl::display3D::_Program3D::Uniform,uniform) = this->_hx___registerLookup->get(index).StaticCast<  ::openfl::display3D::_Program3D::Uniform >();
HXLINE( 606)			Bool _hx_tmp1 = hx::IsNotNull( uniform );
HXDLIN( 606)			if (_hx_tmp1) {
HXLINE( 608)				uniform->isDirty = true;
HXLINE( 609)				this->_hx___anyDirty = true;
HXLINE( 611)				index = (uniform->regIndex + uniform->regCount);
            			}
            			else {
HXLINE( 615)				++index;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(UniformMap_obj,markDirty,(void))


UniformMap_obj::UniformMap_obj()
{
}

void UniformMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UniformMap);
	HX_MARK_MEMBER_NAME(_hx___allDirty,"__allDirty");
	HX_MARK_MEMBER_NAME(_hx___anyDirty,"__anyDirty");
	HX_MARK_MEMBER_NAME(_hx___registerLookup,"__registerLookup");
	HX_MARK_MEMBER_NAME(_hx___uniforms,"__uniforms");
	HX_MARK_END_CLASS();
}

void UniformMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___allDirty,"__allDirty");
	HX_VISIT_MEMBER_NAME(_hx___anyDirty,"__anyDirty");
	HX_VISIT_MEMBER_NAME(_hx___registerLookup,"__registerLookup");
	HX_VISIT_MEMBER_NAME(_hx___uniforms,"__uniforms");
}

hx::Val UniformMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"markDirty") ) { return hx::Val( markDirty_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__allDirty") ) { return hx::Val( _hx___allDirty); }
		if (HX_FIELD_EQ(inName,"__anyDirty") ) { return hx::Val( _hx___anyDirty); }
		if (HX_FIELD_EQ(inName,"__uniforms") ) { return hx::Val( _hx___uniforms); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"markAllDirty") ) { return hx::Val( markAllDirty_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__registerLookup") ) { return hx::Val( _hx___registerLookup); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val UniformMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"__allDirty") ) { _hx___allDirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__anyDirty") ) { _hx___anyDirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uniforms") ) { _hx___uniforms=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__registerLookup") ) { _hx___registerLookup=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void UniformMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__allDirty","\x51","\x82","\xec","\x75"));
	outFields->push(HX_HCSTRING("__anyDirty","\xa6","\x20","\xbb","\xfb"));
	outFields->push(HX_HCSTRING("__registerLookup","\x5d","\xb4","\x36","\x5c"));
	outFields->push(HX_HCSTRING("__uniforms","\xdf","\x3f","\x8d","\xa5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo UniformMap_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(UniformMap_obj,_hx___allDirty),HX_HCSTRING("__allDirty","\x51","\x82","\xec","\x75")},
	{hx::fsBool,(int)offsetof(UniformMap_obj,_hx___anyDirty),HX_HCSTRING("__anyDirty","\xa6","\x20","\xbb","\xfb")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(UniformMap_obj,_hx___registerLookup),HX_HCSTRING("__registerLookup","\x5d","\xb4","\x36","\x5c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(UniformMap_obj,_hx___uniforms),HX_HCSTRING("__uniforms","\xdf","\x3f","\x8d","\xa5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *UniformMap_obj_sStaticStorageInfo = 0;
#endif

static ::String UniformMap_obj_sMemberFields[] = {
	HX_HCSTRING("__allDirty","\x51","\x82","\xec","\x75"),
	HX_HCSTRING("__anyDirty","\xa6","\x20","\xbb","\xfb"),
	HX_HCSTRING("__registerLookup","\x5d","\xb4","\x36","\x5c"),
	HX_HCSTRING("__uniforms","\xdf","\x3f","\x8d","\xa5"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("markAllDirty","\x5e","\x60","\x3e","\x4b"),
	HX_HCSTRING("markDirty","\xc5","\x30","\xa3","\x36"),
	::String(null()) };

static void UniformMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UniformMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UniformMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UniformMap_obj::__mClass,"__mClass");
};

#endif

hx::Class UniformMap_obj::__mClass;

void UniformMap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D._Program3D.UniformMap","\x67","\x0d","\x51","\x34");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UniformMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(UniformMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< UniformMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UniformMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UniformMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UniformMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
} // end namespace _Program3D
