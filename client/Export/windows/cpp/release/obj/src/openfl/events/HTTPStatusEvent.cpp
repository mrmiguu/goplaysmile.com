// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_HTTPStatusEvent
#include <openfl/events/HTTPStatusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

static const ::String _hx_array_data_0[] = {
	HX_("type",ba,f2,08,4d),HX_("bubbles",67,bb,56,61),HX_("cancelable",14,a0,79,c4),HX_("status",32,e7,fb,05),HX_("redirected",7b,4e,5a,3e),
};
namespace openfl{
namespace events{

void HTTPStatusEvent_obj::__construct(::String type,hx::Null< Bool >  __o_bubbles,hx::Null< Bool >  __o_cancelable,hx::Null< Int >  __o_status,hx::Null< Bool >  __o_redirected){
Bool bubbles = __o_bubbles.Default(false);
Bool cancelable = __o_cancelable.Default(false);
Int status = __o_status.Default(0);
Bool redirected = __o_redirected.Default(false);
            	HX_STACK_FRAME("openfl.events.HTTPStatusEvent","new",0x992d4c1b,"openfl.events.HTTPStatusEvent.new","openfl/events/HTTPStatusEvent.hx",16,0x9d0269d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(bubbles,"bubbles")
            	HX_STACK_ARG(cancelable,"cancelable")
            	HX_STACK_ARG(status,"status")
            	HX_STACK_ARG(redirected,"redirected")
HXLINE(  18)		this->status = status;
HXLINE(  19)		this->redirected = redirected;
HXLINE(  21)		super::__construct(type,bubbles,cancelable);
            	}

Dynamic HTTPStatusEvent_obj::__CreateEmpty() { return new HTTPStatusEvent_obj; }

hx::ObjectPtr< HTTPStatusEvent_obj > HTTPStatusEvent_obj::__new(::String type,hx::Null< Bool >  __o_bubbles,hx::Null< Bool >  __o_cancelable,hx::Null< Int >  __o_status,hx::Null< Bool >  __o_redirected)
{
	hx::ObjectPtr< HTTPStatusEvent_obj > _hx_result = new HTTPStatusEvent_obj();
	_hx_result->__construct(type,__o_bubbles,__o_cancelable,__o_status,__o_redirected);
	return _hx_result;
}

Dynamic HTTPStatusEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HTTPStatusEvent_obj > _hx_result = new HTTPStatusEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

 ::openfl::events::Event HTTPStatusEvent_obj::clone(){
            	HX_STACK_FRAME("openfl.events.HTTPStatusEvent","clone",0xe75f33d8,"openfl.events.HTTPStatusEvent.clone","openfl/events/HTTPStatusEvent.hx",26,0x9d0269d5)
            	HX_STACK_THIS(this)
HXLINE(  28)		HX_VARI(  ::openfl::events::HTTPStatusEvent,event) =  ::openfl::events::HTTPStatusEvent_obj::__new(this->type,this->bubbles,null(),this->status,this->redirected);
HXLINE(  29)		event->target = this->target;
HXLINE(  30)		event->currentTarget = this->currentTarget;
HXLINE(  31)		event->eventPhase = this->eventPhase;
HXLINE(  32)		return event;
            	}


::String HTTPStatusEvent_obj::toString(){
            	HX_STACK_FRAME("openfl.events.HTTPStatusEvent","toString",0x9713ef11,"openfl.events.HTTPStatusEvent.toString","openfl/events/HTTPStatusEvent.hx",39,0x9d0269d5)
            	HX_STACK_THIS(this)
HXLINE(  39)		return this->_hx___formatToString(HX_("HTTPStatusEvent",e0,4c,1b,fe),::Array_obj< ::String >::fromData( _hx_array_data_0,5));
            	}


::String HTTPStatusEvent_obj::HTTP_RESPONSE_STATUS;

::String HTTPStatusEvent_obj::HTTP_STATUS;


HTTPStatusEvent_obj::HTTPStatusEvent_obj()
{
}

void HTTPStatusEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HTTPStatusEvent);
	HX_MARK_MEMBER_NAME(redirected,"redirected");
	HX_MARK_MEMBER_NAME(responseHeaders,"responseHeaders");
	HX_MARK_MEMBER_NAME(responseURL,"responseURL");
	HX_MARK_MEMBER_NAME(status,"status");
	 ::openfl::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void HTTPStatusEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(redirected,"redirected");
	HX_VISIT_MEMBER_NAME(responseHeaders,"responseHeaders");
	HX_VISIT_MEMBER_NAME(responseURL,"responseURL");
	HX_VISIT_MEMBER_NAME(status,"status");
	 ::openfl::events::Event_obj::__Visit(HX_VISIT_ARG);
}

hx::Val HTTPStatusEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { return hx::Val( status); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"redirected") ) { return hx::Val( redirected); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"responseURL") ) { return hx::Val( responseURL); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"responseHeaders") ) { return hx::Val( responseHeaders); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val HTTPStatusEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"status") ) { status=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"redirected") ) { redirected=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"responseURL") ) { responseURL=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"responseHeaders") ) { responseHeaders=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HTTPStatusEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("redirected","\x7b","\x4e","\x5a","\x3e"));
	outFields->push(HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43"));
	outFields->push(HX_HCSTRING("responseURL","\x6e","\x5f","\x19","\x86"));
	outFields->push(HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo HTTPStatusEvent_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(HTTPStatusEvent_obj,redirected),HX_HCSTRING("redirected","\x7b","\x4e","\x5a","\x3e")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(HTTPStatusEvent_obj,responseHeaders),HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43")},
	{hx::fsString,(int)offsetof(HTTPStatusEvent_obj,responseURL),HX_HCSTRING("responseURL","\x6e","\x5f","\x19","\x86")},
	{hx::fsInt,(int)offsetof(HTTPStatusEvent_obj,status),HX_HCSTRING("status","\x32","\xe7","\xfb","\x05")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo HTTPStatusEvent_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &HTTPStatusEvent_obj::HTTP_RESPONSE_STATUS,HX_HCSTRING("HTTP_RESPONSE_STATUS","\x79","\xde","\x26","\x00")},
	{hx::fsString,(void *) &HTTPStatusEvent_obj::HTTP_STATUS,HX_HCSTRING("HTTP_STATUS","\x49","\x42","\xed","\x94")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String HTTPStatusEvent_obj_sMemberFields[] = {
	HX_HCSTRING("redirected","\x7b","\x4e","\x5a","\x3e"),
	HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43"),
	HX_HCSTRING("responseURL","\x6e","\x5f","\x19","\x86"),
	HX_HCSTRING("status","\x32","\xe7","\xfb","\x05"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void HTTPStatusEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HTTPStatusEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(HTTPStatusEvent_obj::HTTP_RESPONSE_STATUS,"HTTP_RESPONSE_STATUS");
	HX_MARK_MEMBER_NAME(HTTPStatusEvent_obj::HTTP_STATUS,"HTTP_STATUS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HTTPStatusEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HTTPStatusEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(HTTPStatusEvent_obj::HTTP_RESPONSE_STATUS,"HTTP_RESPONSE_STATUS");
	HX_VISIT_MEMBER_NAME(HTTPStatusEvent_obj::HTTP_STATUS,"HTTP_STATUS");
};

#endif

hx::Class HTTPStatusEvent_obj::__mClass;

static ::String HTTPStatusEvent_obj_sStaticFields[] = {
	HX_HCSTRING("HTTP_RESPONSE_STATUS","\x79","\xde","\x26","\x00"),
	HX_HCSTRING("HTTP_STATUS","\x49","\x42","\xed","\x94"),
	::String(null())
};

void HTTPStatusEvent_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.events.HTTPStatusEvent","\xa9","\xa2","\xc0","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = HTTPStatusEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HTTPStatusEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(HTTPStatusEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< HTTPStatusEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HTTPStatusEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HTTPStatusEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HTTPStatusEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void HTTPStatusEvent_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.events.HTTPStatusEvent","boot",0x668e4c17,"openfl.events.HTTPStatusEvent.boot","openfl/events/HTTPStatusEvent.hx",7,0x9d0269d5)
HXLINE(   7)		HTTP_RESPONSE_STATUS = HX_("httpResponseStatus",3b,ae,f6,61);
            	}
{
            	HX_STACK_FRAME("openfl.events.HTTPStatusEvent","boot",0x668e4c17,"openfl.events.HTTPStatusEvent.boot","openfl/events/HTTPStatusEvent.hx",8,0x9d0269d5)
HXLINE(   8)		HTTP_STATUS = HX_("httpStatus",da,4c,74,0a);
            	}
}

} // end namespace openfl
} // end namespace events
