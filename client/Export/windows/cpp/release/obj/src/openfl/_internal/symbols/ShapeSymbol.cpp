// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_ShapeCommand
#include <openfl/_internal/swf/ShapeCommand.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_ShapeSymbol
#include <openfl/_internal/symbols/ShapeSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shape
#include <openfl/display/Shape.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

namespace openfl{
namespace _internal{
namespace symbols{

void ShapeSymbol_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.symbols.ShapeSymbol","new",0xf9be9628,"openfl._internal.symbols.ShapeSymbol.new","openfl/_internal/symbols/ShapeSymbol.hx",21,0x811972cb)
            	HX_STACK_THIS(this)
HXLINE(  21)		super::__construct();
            	}

Dynamic ShapeSymbol_obj::__CreateEmpty() { return new ShapeSymbol_obj; }

hx::ObjectPtr< ShapeSymbol_obj > ShapeSymbol_obj::__new()
{
	hx::ObjectPtr< ShapeSymbol_obj > _hx_result = new ShapeSymbol_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ShapeSymbol_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShapeSymbol_obj > _hx_result = new ShapeSymbol_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::openfl::display::DisplayObject ShapeSymbol_obj::_hx___createObject( ::openfl::_internal::swf::SWFLite swf){
            	HX_STACK_FRAME("openfl._internal.symbols.ShapeSymbol","__createObject",0x10144133,"openfl._internal.symbols.ShapeSymbol.__createObject","openfl/_internal/symbols/ShapeSymbol.hx",26,0x811972cb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(swf,"swf")
HXLINE(  28)		HX_VARI(  ::openfl::display::Shape,shape) =  ::openfl::display::Shape_obj::__new();
HXLINE(  29)		HX_VARI(  ::openfl::display::Graphics,graphics) = shape->get_graphics();
HXLINE(  31)		Bool _hx_tmp = hx::IsNotNull( this->rendered );
HXDLIN(  31)		if (_hx_tmp) {
HXLINE(  33)			 ::openfl::display::Graphics _hx_tmp1 = this->rendered->get_graphics();
HXDLIN(  33)			graphics->copyFrom(_hx_tmp1);
HXLINE(  34)			return shape;
            		}
HXLINE(  38)		{
HXLINE(  38)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  38)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->commands;
HXDLIN(  38)			while((_g < _g1->length)){
HXLINE(  38)				HX_VARI( ::hx::EnumBase,command) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(  38)				++_g;
HXLINE(  40)				Int _hx_tmp2 = ( ( ::hx::EnumBase)(command) )->_hx_getIndex();
HXDLIN(  40)				switch((int)(_hx_tmp2)){
            					case (int)0: {
HXLINE(  46)						HX_VARI( Bool,smooth) = command->_hx_getBool(3);
HXDLIN(  46)						HX_VARI( Bool,repeat) = command->_hx_getBool(2);
HXDLIN(  46)						HX_VARI(  ::openfl::geom::Matrix,matrix) = command->_hx_getObject(1).StaticCast<  ::openfl::geom::Matrix >();
HXDLIN(  46)						{
HXLINE(  48)							HX_VARI(  ::openfl::_internal::symbols::BitmapSymbol,bitmap) = ( ( ::openfl::_internal::symbols::BitmapSymbol)(swf->symbols->get(command->_hx_getInt(0)).StaticCast<  ::openfl::_internal::symbols::SWFSymbol >()) );
HXLINE(  50)							Bool _hx_tmp3;
HXDLIN(  50)							Bool _hx_tmp4 = hx::IsNotNull( bitmap );
HXDLIN(  50)							if (_hx_tmp4) {
HXLINE(  50)								_hx_tmp3 = (bitmap->path != HX_("",00,00,00,00));
            							}
            							else {
HXLINE(  50)								_hx_tmp3 = false;
            							}
HXDLIN(  50)							if (_hx_tmp3) {
HXLINE(  52)								 ::openfl::display::BitmapData _hx_tmp5 = bitmap->_hx___getBitmap();
HXDLIN(  52)								graphics->beginBitmapFill(_hx_tmp5,matrix,repeat,smooth);
            							}
            						}
            					}
            					break;
            					case (int)1: {
HXLINE(  44)						graphics->beginFill(command->_hx_getInt(0),command->_hx_getFloat(1));
            					}
            					break;
            					case (int)2: {
HXLINE(  58)						graphics->beginGradientFill(command->_hx_getObject(0),command->_hx_getObject(1).StaticCast< ::Array< Int > >(),command->_hx_getObject(2).StaticCast< ::Array< Float > >(),command->_hx_getObject(3).StaticCast< ::Array< Int > >(),command->_hx_getObject(4).StaticCast<  ::openfl::geom::Matrix >(),command->_hx_getObject(5),command->_hx_getObject(6),command->_hx_getFloat(7));
            					}
            					break;
            					case (int)3: {
HXLINE(  62)						graphics->curveTo(command->_hx_getFloat(0),command->_hx_getFloat(1),command->_hx_getFloat(2),command->_hx_getFloat(3));
            					}
            					break;
            					case (int)4: {
HXLINE(  66)						graphics->endFill();
            					}
            					break;
            					case (int)5: {
HXLINE(  68)						HX_VARI(  ::Dynamic,miterLimit) = command->_hx_getObject(7);
HXDLIN(  68)						HX_VARI(  ::Dynamic,joints) = command->_hx_getObject(6);
HXDLIN(  68)						HX_VARI(  ::Dynamic,caps) = command->_hx_getObject(5);
HXDLIN(  68)						HX_VARI(  ::Dynamic,scaleMode) = command->_hx_getObject(4);
HXDLIN(  68)						HX_VARI(  ::Dynamic,pixelHinting) = command->_hx_getObject(3);
HXDLIN(  68)						HX_VARI(  ::Dynamic,alpha) = command->_hx_getObject(2);
HXDLIN(  68)						HX_VARI(  ::Dynamic,color) = command->_hx_getObject(1);
HXDLIN(  68)						HX_VARI(  ::Dynamic,thickness) = command->_hx_getObject(0);
HXLINE(  70)						Bool _hx_tmp6 = hx::IsNotNull( thickness );
HXDLIN(  70)						if (_hx_tmp6) {
HXLINE(  72)							graphics->lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
            						}
            						else {
HXLINE(  76)							graphics->lineStyle(null(),null(),null(),null(),null(),null(),null(),null());
            						}
            					}
            					break;
            					case (int)6: {
HXLINE(  82)						graphics->lineTo(command->_hx_getFloat(0),command->_hx_getFloat(1));
            					}
            					break;
            					case (int)7: {
HXLINE(  86)						graphics->moveTo(command->_hx_getFloat(0),command->_hx_getFloat(1));
            					}
            					break;
            				}
            			}
            		}
HXLINE(  92)		this->commands = null();
HXLINE(  93)		this->rendered =  ::openfl::display::Shape_obj::__new();
HXLINE(  94)		 ::openfl::display::Graphics _hx_tmp7 = this->rendered->get_graphics();
HXDLIN(  94)		 ::openfl::display::Graphics _hx_tmp8 = shape->get_graphics();
HXDLIN(  94)		_hx_tmp7->copyFrom(_hx_tmp8);
HXLINE(  96)		return shape;
            	}



ShapeSymbol_obj::ShapeSymbol_obj()
{
}

void ShapeSymbol_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ShapeSymbol);
	HX_MARK_MEMBER_NAME(commands,"commands");
	HX_MARK_MEMBER_NAME(rendered,"rendered");
	 ::openfl::_internal::symbols::SWFSymbol_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ShapeSymbol_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(commands,"commands");
	HX_VISIT_MEMBER_NAME(rendered,"rendered");
	 ::openfl::_internal::symbols::SWFSymbol_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ShapeSymbol_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"commands") ) { return hx::Val( commands); }
		if (HX_FIELD_EQ(inName,"rendered") ) { return hx::Val( rendered); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__createObject") ) { return hx::Val( _hx___createObject_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ShapeSymbol_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"commands") ) { commands=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rendered") ) { rendered=inValue.Cast<  ::openfl::display::Shape >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ShapeSymbol_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe"));
	outFields->push(HX_HCSTRING("rendered","\x35","\xc5","\xdb","\xb2"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ShapeSymbol_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(ShapeSymbol_obj,commands),HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe")},
	{hx::fsObject /*::openfl::display::Shape*/ ,(int)offsetof(ShapeSymbol_obj,rendered),HX_HCSTRING("rendered","\x35","\xc5","\xdb","\xb2")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ShapeSymbol_obj_sStaticStorageInfo = 0;
#endif

static ::String ShapeSymbol_obj_sMemberFields[] = {
	HX_HCSTRING("commands","\xc8","\xb0","\x55","\xbe"),
	HX_HCSTRING("rendered","\x35","\xc5","\xdb","\xb2"),
	HX_HCSTRING("__createObject","\xfb","\x41","\x55","\x58"),
	::String(null()) };

static void ShapeSymbol_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ShapeSymbol_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ShapeSymbol_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ShapeSymbol_obj::__mClass,"__mClass");
};

#endif

hx::Class ShapeSymbol_obj::__mClass;

void ShapeSymbol_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.symbols.ShapeSymbol","\x36","\xa2","\x66","\xae");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ShapeSymbol_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShapeSymbol_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShapeSymbol_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ShapeSymbol_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShapeSymbol_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShapeSymbol_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace symbols
