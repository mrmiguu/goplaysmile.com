// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_ProgramType
#include <openfl/_internal/stage3D/_AGALConverter/ProgramType.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_SamplerRegister
#include <openfl/_internal/stage3D/_AGALConverter/SamplerRegister.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif

namespace openfl{
namespace _internal{
namespace stage3D{
namespace _AGALConverter{

void SamplerRegister_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.SamplerRegister","new",0xf340d88e,"openfl._internal.stage3D._AGALConverter.SamplerRegister.new","openfl/_internal/stage3D/AGALConverter.hx",874,0x0a35cc61)
            	HX_STACK_THIS(this)
            	}

Dynamic SamplerRegister_obj::__CreateEmpty() { return new SamplerRegister_obj; }

hx::ObjectPtr< SamplerRegister_obj > SamplerRegister_obj::__new()
{
	hx::ObjectPtr< SamplerRegister_obj > _hx_result = new SamplerRegister_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic SamplerRegister_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SamplerRegister_obj > _hx_result = new SamplerRegister_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String SamplerRegister_obj::toGLSL(){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.SamplerRegister","toGLSL",0xc158218b,"openfl._internal.stage3D._AGALConverter.SamplerRegister.toGLSL","openfl/_internal/stage3D/AGALConverter.hx",899,0x0a35cc61)
            	HX_STACK_THIS(this)
HXLINE( 901)		::String _hx_tmp = ::openfl::_internal::stage3D::AGALConverter_obj::prefixFromType(this->type,this->programType);
HXLINE( 902)		return (_hx_tmp + this->n);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SamplerRegister_obj,toGLSL,return )

 ::openfl::_internal::stage3D::SamplerState SamplerRegister_obj::toSamplerState(){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.SamplerRegister","toSamplerState",0x8ed80c96,"openfl._internal.stage3D._AGALConverter.SamplerRegister.toSamplerState","openfl/_internal/stage3D/AGALConverter.hx",907,0x0a35cc61)
            	HX_STACK_THIS(this)
HXLINE( 909)		HX_VARI( Int,magFilter) = (int)0;
HXLINE( 910)		HX_VARI( Int,minFilter) = (int)0;
HXLINE( 911)		HX_VARI( Int,wrapModeS) = (int)0;
HXLINE( 912)		HX_VARI( Int,wrapModeT) = (int)0;
HXLINE( 915)		{
HXLINE( 915)			HX_VARI( Int,_g) = this->f;
HXDLIN( 915)			switch((int)(_g)){
            				case (int)0: {
HXLINE( 917)					magFilter = (int)9728;
            				}
            				break;
            				case (int)1: {
HXLINE( 918)					magFilter = (int)9729;
            				}
            				break;
            				default:{
HXLINE( 919)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            				}
            			}
            		}
HXLINE( 924)		{
HXLINE( 924)			HX_VARI( Int,_g1) = this->m;
HXDLIN( 924)			switch((int)(_g1)){
            				case (int)0: {
HXLINE( 929)					if ((this->f != (int)0)) {
HXLINE( 929)						minFilter = (int)9729;
            					}
            					else {
HXLINE( 929)						minFilter = (int)9728;
            					}
            				}
            				break;
            				case (int)1: {
HXLINE( 934)					if ((this->f != (int)0)) {
HXLINE( 934)						minFilter = (int)9986;
            					}
            					else {
HXLINE( 934)						minFilter = (int)9984;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 939)					if ((this->f != (int)0)) {
HXLINE( 939)						minFilter = (int)9987;
            					}
            					else {
HXLINE( 939)						minFilter = (int)9985;
            					}
            				}
            				break;
            				default:{
HXLINE( 943)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            				}
            			}
            		}
HXLINE( 948)		{
HXLINE( 948)			HX_VARI( Int,_g2) = this->w;
HXDLIN( 948)			switch((int)(_g2)){
            				case (int)0: {
HXLINE( 952)					wrapModeS = (int)33071;
HXLINE( 953)					wrapModeT = (int)33071;
            				}
            				break;
            				case (int)1: {
HXLINE( 957)					wrapModeS = (int)10497;
HXLINE( 958)					wrapModeT = (int)10497;
            				}
            				break;
            				default:{
HXLINE( 962)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(null()));
            				}
            			}
            		}
HXLINE( 973)		return  ::openfl::_internal::stage3D::SamplerState_obj::__new(minFilter,magFilter,wrapModeS,wrapModeT,((Float)((int)((int)this->b << (int)(int)24) >> (int)(int)24) / (Float)((Float)8.0)),((Float)0.0),(((int)this->s & (int)(int)4) == (int)4),(((int)this->s & (int)(int)1) == (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SamplerRegister_obj,toSamplerState,return )

 ::openfl::_internal::stage3D::_AGALConverter::SamplerRegister SamplerRegister_obj::parse( ::cpp::Int64Struct v,::hx::EnumBase programType){
            	HX_STACK_FRAME("openfl._internal.stage3D._AGALConverter.SamplerRegister","parse",0x0bb77fe1,"openfl._internal.stage3D._AGALConverter.SamplerRegister.parse","openfl/_internal/stage3D/AGALConverter.hx",881,0x0a35cc61)
            	HX_STACK_ARG(v,"v")
            	HX_STACK_ARG(programType,"programType")
HXLINE( 883)		HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::SamplerRegister,sr) =  ::openfl::_internal::stage3D::_AGALConverter::SamplerRegister_obj::__new();
HXLINE( 884)		sr->programType = programType;
HXLINE( 885)		 ::cpp::Int64Struct a = _hx_int64_shr(v,(int)60);
HXDLIN( 885)		 ::cpp::Int64Struct b = ( ::cpp::Int64Struct((int)15));
HXDLIN( 885)		 ::cpp::Int64Struct this1 = _hx_int64_and(a,b);
HXDLIN( 885)		Int _hx_tmp = _hx_int64_low(this1);
HXDLIN( 885)		sr->f = _hx_tmp;
HXLINE( 886)		 ::cpp::Int64Struct a1 = _hx_int64_shr(v,(int)56);
HXDLIN( 886)		 ::cpp::Int64Struct b1 = ( ::cpp::Int64Struct((int)15));
HXDLIN( 886)		 ::cpp::Int64Struct this2 = _hx_int64_and(a1,b1);
HXDLIN( 886)		Int _hx_tmp1 = _hx_int64_low(this2);
HXDLIN( 886)		sr->m = _hx_tmp1;
HXLINE( 887)		 ::cpp::Int64Struct a2 = _hx_int64_shr(v,(int)52);
HXDLIN( 887)		 ::cpp::Int64Struct b2 = ( ::cpp::Int64Struct((int)15));
HXDLIN( 887)		 ::cpp::Int64Struct this3 = _hx_int64_and(a2,b2);
HXDLIN( 887)		Int _hx_tmp2 = _hx_int64_low(this3);
HXDLIN( 887)		sr->w = _hx_tmp2;
HXLINE( 888)		 ::cpp::Int64Struct a3 = _hx_int64_shr(v,(int)48);
HXDLIN( 888)		 ::cpp::Int64Struct b3 = ( ::cpp::Int64Struct((int)15));
HXDLIN( 888)		 ::cpp::Int64Struct this4 = _hx_int64_and(a3,b3);
HXDLIN( 888)		Int _hx_tmp3 = _hx_int64_low(this4);
HXDLIN( 888)		sr->s = _hx_tmp3;
HXLINE( 889)		 ::cpp::Int64Struct a4 = _hx_int64_shr(v,(int)44);
HXDLIN( 889)		 ::cpp::Int64Struct b4 = ( ::cpp::Int64Struct((int)15));
HXDLIN( 889)		 ::cpp::Int64Struct this5 = _hx_int64_and(a4,b4);
HXDLIN( 889)		Int _hx_tmp4 = _hx_int64_low(this5);
HXDLIN( 889)		sr->d = _hx_tmp4;
HXLINE( 890)		 ::cpp::Int64Struct a5 = _hx_int64_shr(v,(int)40);
HXDLIN( 890)		 ::cpp::Int64Struct b5 = ( ::cpp::Int64Struct((int)15));
HXDLIN( 890)		 ::cpp::Int64Struct this6 = _hx_int64_and(a5,b5);
HXDLIN( 890)		Int _hx_tmp5 = _hx_int64_low(this6);
HXDLIN( 890)		sr->t = _hx_tmp5;
HXLINE( 891)		 ::cpp::Int64Struct a6 = _hx_int64_shr(v,(int)32);
HXDLIN( 891)		 ::cpp::Int64Struct b6 = ( ::cpp::Int64Struct((int)15));
HXDLIN( 891)		 ::cpp::Int64Struct this7 = _hx_int64_and(a6,b6);
HXDLIN( 891)		Int _hx_tmp6 = _hx_int64_low(this7);
HXDLIN( 891)		sr->type = _hx_tmp6;
HXLINE( 892)		 ::cpp::Int64Struct a7 = _hx_int64_shr(v,(int)16);
HXDLIN( 892)		 ::cpp::Int64Struct b7 = ( ::cpp::Int64Struct((int)255));
HXDLIN( 892)		 ::cpp::Int64Struct this8 = _hx_int64_and(a7,b7);
HXDLIN( 892)		Int _hx_tmp7 = _hx_int64_low(this8);
HXDLIN( 892)		sr->b = _hx_tmp7;
HXLINE( 893)		 ::cpp::Int64Struct b8 = ( ::cpp::Int64Struct((int)65535));
HXDLIN( 893)		 ::cpp::Int64Struct this9 = _hx_int64_and(v,b8);
HXDLIN( 893)		Int _hx_tmp8 = _hx_int64_low(this9);
HXDLIN( 893)		sr->n = _hx_tmp8;
HXLINE( 894)		return sr;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SamplerRegister_obj,parse,return )


SamplerRegister_obj::SamplerRegister_obj()
{
}

void SamplerRegister_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SamplerRegister);
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(d,"d");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(m,"m");
	HX_MARK_MEMBER_NAME(n,"n");
	HX_MARK_MEMBER_NAME(programType,"programType");
	HX_MARK_MEMBER_NAME(s,"s");
	HX_MARK_MEMBER_NAME(t,"t");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_END_CLASS();
}

void SamplerRegister_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(d,"d");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(m,"m");
	HX_VISIT_MEMBER_NAME(n,"n");
	HX_VISIT_MEMBER_NAME(programType,"programType");
	HX_VISIT_MEMBER_NAME(s,"s");
	HX_VISIT_MEMBER_NAME(t,"t");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(w,"w");
}

hx::Val SamplerRegister_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		if (HX_FIELD_EQ(inName,"d") ) { return hx::Val( d); }
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f); }
		if (HX_FIELD_EQ(inName,"m") ) { return hx::Val( m); }
		if (HX_FIELD_EQ(inName,"n") ) { return hx::Val( n); }
		if (HX_FIELD_EQ(inName,"s") ) { return hx::Val( s); }
		if (HX_FIELD_EQ(inName,"t") ) { return hx::Val( t); }
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"toGLSL") ) { return hx::Val( toGLSL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programType") ) { return hx::Val( programType); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"toSamplerState") ) { return hx::Val( toSamplerState_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool SamplerRegister_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
	}
	return false;
}

hx::Val SamplerRegister_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"d") ) { d=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"m") ) { m=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"n") ) { n=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"t") ) { t=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"programType") ) { programType=inValue.Cast< ::hx::EnumBase >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SamplerRegister_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("d","\x64","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("f","\x66","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("m","\x6d","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("n","\x6e","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4"));
	outFields->push(HX_HCSTRING("s","\x73","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("t","\x74","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SamplerRegister_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,d),HX_HCSTRING("d","\x64","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,f),HX_HCSTRING("f","\x66","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,m),HX_HCSTRING("m","\x6d","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,n),HX_HCSTRING("n","\x6e","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::_internal::stage3D::_AGALConverter::ProgramType*/ ,(int)offsetof(SamplerRegister_obj,programType),HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4")},
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,s),HX_HCSTRING("s","\x73","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,t),HX_HCSTRING("t","\x74","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(SamplerRegister_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SamplerRegister_obj_sStaticStorageInfo = 0;
#endif

static ::String SamplerRegister_obj_sMemberFields[] = {
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("d","\x64","\x00","\x00","\x00"),
	HX_HCSTRING("f","\x66","\x00","\x00","\x00"),
	HX_HCSTRING("m","\x6d","\x00","\x00","\x00"),
	HX_HCSTRING("n","\x6e","\x00","\x00","\x00"),
	HX_HCSTRING("programType","\x5e","\xfb","\x2c","\xc4"),
	HX_HCSTRING("s","\x73","\x00","\x00","\x00"),
	HX_HCSTRING("t","\x74","\x00","\x00","\x00"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("toGLSL","\xf9","\x58","\x08","\x7a"),
	HX_HCSTRING("toSamplerState","\x04","\x62","\xd2","\xf8"),
	::String(null()) };

static void SamplerRegister_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SamplerRegister_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SamplerRegister_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SamplerRegister_obj::__mClass,"__mClass");
};

#endif

hx::Class SamplerRegister_obj::__mClass;

static ::String SamplerRegister_obj_sStaticFields[] = {
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	::String(null())
};

void SamplerRegister_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D._AGALConverter.SamplerRegister","\x9c","\x39","\xf2","\x49");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SamplerRegister_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SamplerRegister_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SamplerRegister_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SamplerRegister_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SamplerRegister_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SamplerRegister_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SamplerRegister_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SamplerRegister_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
} // end namespace _AGALConverter
