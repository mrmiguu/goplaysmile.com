// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "cpp/Int64.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_AGALConverter
#include <openfl/_internal/stage3D/AGALConverter.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_RegisterMap
#include <openfl/_internal/stage3D/RegisterMap.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_DestRegister
#include <openfl/_internal/stage3D/_AGALConverter/DestRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_ProgramType
#include <openfl/_internal/stage3D/_AGALConverter/ProgramType.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_RegisterUsage
#include <openfl/_internal/stage3D/_AGALConverter/RegisterUsage.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_SamplerRegister
#include <openfl/_internal/stage3D/_AGALConverter/SamplerRegister.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D__AGALConverter_SourceRegister
#include <openfl/_internal/stage3D/_AGALConverter/SourceRegister.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace _internal{
namespace stage3D{

void AGALConverter_obj::__construct() { }

Dynamic AGALConverter_obj::__CreateEmpty() { return new AGALConverter_obj; }

hx::ObjectPtr< AGALConverter_obj > AGALConverter_obj::__new()
{
	hx::ObjectPtr< AGALConverter_obj > _hx_result = new AGALConverter_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AGALConverter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AGALConverter_obj > _hx_result = new AGALConverter_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic AGALConverter_obj::limitedProfile;

::String AGALConverter_obj::prefixFromType(Int regType,::hx::EnumBase programType){
            	HX_STACK_FRAME("openfl._internal.stage3D.AGALConverter","prefixFromType",0xf2d51404,"openfl._internal.stage3D.AGALConverter.prefixFromType","openfl/_internal/stage3D/AGALConverter.hx",20,0x0a35cc61)
            	HX_STACK_ARG(regType,"regType")
            	HX_STACK_ARG(programType,"programType")
HXLINE(  20)		switch((int)(regType)){
            			case (int)0: {
HXLINE(  22)				return HX_("va",2b,67,00,00);
            			}
            			break;
            			case (int)1: {
HXLINE(  23)				if (hx::IsEq( programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE(  23)					return HX_("vc",2d,67,00,00);
            				}
            				else {
HXLINE(  23)					return HX_("fc",3d,59,00,00);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE(  24)				if (hx::IsEq( programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE(  24)					return HX_("vt",3e,67,00,00);
            				}
            				else {
HXLINE(  24)					return HX_("ft",4e,59,00,00);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE(  25)				return HX_("output_",3e,12,6c,e4);
            			}
            			break;
            			case (int)4: {
HXLINE(  26)				return HX_("v",76,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE(  27)				return HX_("sampler",08,c5,c9,83);
            			}
            			break;
            			default:{
HXLINE(  28)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(HX_("Invalid data!",ae,d8,c0,b8)));
            			}
            		}
HXLINE(  20)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AGALConverter_obj,prefixFromType,return )

 ::cpp::Int64Struct AGALConverter_obj::readUInt64( ::openfl::utils::ByteArrayData byteArray){
            	HX_STACK_FRAME("openfl._internal.stage3D.AGALConverter","readUInt64",0xe0c9dd3c,"openfl._internal.stage3D.AGALConverter.readUInt64","openfl/_internal/stage3D/AGALConverter.hx",35,0x0a35cc61)
            	HX_STACK_ARG(byteArray,"byteArray")
HXLINE(  37)		HX_VARI( Int,low) = byteArray->readInt();
HXLINE(  38)		HX_VARI( Int,high) = byteArray->readInt();
HXLINE(  39)		return _hx_int64_make(high,low);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AGALConverter_obj,readUInt64,return )

::String AGALConverter_obj::convertToGLSL( ::openfl::utils::ByteArrayData agal,::Array< ::Dynamic> samplerState){
            	HX_STACK_FRAME("openfl._internal.stage3D.AGALConverter","convertToGLSL",0x2f4203fe,"openfl._internal.stage3D.AGALConverter.convertToGLSL","openfl/_internal/stage3D/AGALConverter.hx",44,0x0a35cc61)
            	HX_STACK_ARG(agal,"agal")
            	HX_STACK_ARG(samplerState,"samplerState")
HXLINE(  46)		agal->position = (int)0;
HXLINE(  47)		agal->_hx___endian = (int)1;
HXLINE(  49)		Int _hx_tmp = agal->readByte();
HXDLIN(  49)		HX_VARI( Int,magic) = ((int)_hx_tmp & (int)(int)255);
HXLINE(  51)		if ((magic == (int)176)) {
HXLINE(  54)			return agal->readUTF();
            		}
HXLINE(  58)		if ((magic != (int)160)) {
HXLINE(  60)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(HX_("Magic value must be 0xA0, may not be AGAL",33,cd,d9,2e)));
            		}
HXLINE(  64)		HX_VARI( Int,version) = agal->readInt();
HXLINE(  66)		if ((version != (int)1)) {
HXLINE(  68)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(HX_("Version must be 1",e3,ba,ef,98)));
            		}
HXLINE(  72)		Int _hx_tmp1 = agal->readByte();
HXLINE(  74)		if ((((int)_hx_tmp1 & (int)(int)255) != (int)161)) {
HXLINE(  76)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new(HX_("Shader type ID must be 0xA1",38,36,8f,05)));
            		}
HXLINE(  80)		HX_VAR( ::hx::EnumBase,programType);
HXDLIN(  80)		Int _hx_tmp2 = agal->readByte();
HXDLIN(  80)		if ((((int)_hx_tmp2 & (int)(int)255) == (int)0)) {
HXLINE(  80)			programType = ::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::VERTEX_dyn();
            		}
            		else {
HXLINE(  80)			programType = ::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::FRAGMENT_dyn();
            		}
HXLINE(  82)		HX_VARI(  ::openfl::_internal::stage3D::RegisterMap,map) =  ::openfl::_internal::stage3D::RegisterMap_obj::__new();
HXLINE(  83)		HX_VARI(  ::StringBuf,sb) =  ::StringBuf_obj::__new();
HXLINE(  85)		while((agal->position < ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(agal))){
HXLINE(  88)			HX_VARI( Int,opcode) = agal->readInt();
HXLINE(  89)			HX_VARI( Int,dest) = agal->readUnsignedInt();
HXLINE(  90)			HX_VARI(  ::cpp::Int64Struct,source1) = ::openfl::_internal::stage3D::AGALConverter_obj::readUInt64(agal);
HXLINE(  91)			HX_VARI(  ::cpp::Int64Struct,source2) = ::openfl::_internal::stage3D::AGALConverter_obj::readUInt64(agal);
HXLINE(  94)			HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::DestRegister,dr) = ::openfl::_internal::stage3D::_AGALConverter::DestRegister_obj::parse(dest,programType);
HXLINE(  95)			HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::SourceRegister,sr1) = ::openfl::_internal::stage3D::_AGALConverter::SourceRegister_obj::parse(source1,programType,dr->mask);
HXLINE(  96)			HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::SourceRegister,sr2) = ::openfl::_internal::stage3D::_AGALConverter::SourceRegister_obj::parse(source2,programType,dr->mask);
HXLINE(  99)			{
HXLINE(  99)				Bool _hx_tmp3 = hx::IsNotNull( sb->charBuf );
HXDLIN(  99)				if (_hx_tmp3) {
HXLINE(  99)					sb->flush();
            				}
HXDLIN(  99)				sb->b->push(HX_("\t",09,00,00,00));
            			}
HXLINE( 101)			switch((int)(opcode)){
            				case (int)0: {
HXLINE( 105)					{
HXLINE( 105)						::String _hx_tmp4 = dr->toGLSL(null());
HXDLIN( 105)						::String _hx_tmp5 = (_hx_tmp4 + HX_(" = ",63,7d,18,00));
HXDLIN( 105)						::String _hx_tmp6 = sr1->toGLSL(null(),null());
HXDLIN( 105)						::String x = ((_hx_tmp5 + _hx_tmp6) + HX_("; // mov",19,49,64,51));
HXDLIN( 105)						Bool _hx_tmp7 = hx::IsNotNull( sb->charBuf );
HXDLIN( 105)						if (_hx_tmp7) {
HXLINE( 105)							sb->flush();
            						}
HXDLIN( 105)						::String _hx_tmp8 = ::Std_obj::string(x);
HXDLIN( 105)						sb->b->push(_hx_tmp8);
            					}
HXLINE( 106)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 107)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)1: {
HXLINE( 111)					{
HXLINE( 111)						::String _hx_tmp9 = dr->toGLSL(null());
HXDLIN( 111)						::String _hx_tmp10 = (_hx_tmp9 + HX_(" = ",63,7d,18,00));
HXDLIN( 111)						::String _hx_tmp11 = sr1->toGLSL(null(),null());
HXDLIN( 111)						::String _hx_tmp12 = ((_hx_tmp10 + _hx_tmp11) + HX_(" + ",b5,6d,18,00));
HXDLIN( 111)						::String _hx_tmp13 = sr2->toGLSL(null(),null());
HXDLIN( 111)						::String x1 = ((_hx_tmp12 + _hx_tmp13) + HX_("; // add",66,24,5b,51));
HXDLIN( 111)						Bool _hx_tmp14 = hx::IsNotNull( sb->charBuf );
HXDLIN( 111)						if (_hx_tmp14) {
HXLINE( 111)							sb->flush();
            						}
HXDLIN( 111)						::String _hx_tmp15 = ::Std_obj::string(x1);
HXDLIN( 111)						sb->b->push(_hx_tmp15);
            					}
HXLINE( 112)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 113)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 114)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)2: {
HXLINE( 118)					{
HXLINE( 118)						::String _hx_tmp16 = dr->toGLSL(null());
HXDLIN( 118)						::String _hx_tmp17 = (_hx_tmp16 + HX_(" = ",63,7d,18,00));
HXDLIN( 118)						::String _hx_tmp18 = sr1->toGLSL(null(),null());
HXDLIN( 118)						::String _hx_tmp19 = ((_hx_tmp17 + _hx_tmp18) + HX_(" - ",73,6f,18,00));
HXDLIN( 118)						::String _hx_tmp20 = sr2->toGLSL(null(),null());
HXDLIN( 118)						::String x2 = ((_hx_tmp19 + _hx_tmp20) + HX_("; // sub",c5,db,68,51));
HXDLIN( 118)						Bool _hx_tmp21 = hx::IsNotNull( sb->charBuf );
HXDLIN( 118)						if (_hx_tmp21) {
HXLINE( 118)							sb->flush();
            						}
HXDLIN( 118)						::String _hx_tmp22 = ::Std_obj::string(x2);
HXDLIN( 118)						sb->b->push(_hx_tmp22);
            					}
HXLINE( 119)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 120)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 121)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)3: {
HXLINE( 125)					{
HXLINE( 125)						::String _hx_tmp23 = dr->toGLSL(null());
HXDLIN( 125)						::String _hx_tmp24 = (_hx_tmp23 + HX_(" = ",63,7d,18,00));
HXDLIN( 125)						::String _hx_tmp25 = sr1->toGLSL(null(),null());
HXDLIN( 125)						::String _hx_tmp26 = ((_hx_tmp24 + _hx_tmp25) + HX_(" * ",d6,6c,18,00));
HXDLIN( 125)						::String _hx_tmp27 = sr2->toGLSL(null(),null());
HXDLIN( 125)						::String x3 = ((_hx_tmp26 + _hx_tmp27) + HX_("; // mul",49,4e,64,51));
HXDLIN( 125)						Bool _hx_tmp28 = hx::IsNotNull( sb->charBuf );
HXDLIN( 125)						if (_hx_tmp28) {
HXLINE( 125)							sb->flush();
            						}
HXDLIN( 125)						::String _hx_tmp29 = ::Std_obj::string(x3);
HXDLIN( 125)						sb->b->push(_hx_tmp29);
            					}
HXLINE( 126)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 127)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 128)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)4: {
HXLINE( 132)					{
HXLINE( 132)						::String _hx_tmp30 = dr->toGLSL(null());
HXDLIN( 132)						::String _hx_tmp31 = (_hx_tmp30 + HX_(" = ",63,7d,18,00));
HXDLIN( 132)						::String _hx_tmp32 = sr1->toGLSL(null(),null());
HXDLIN( 132)						::String _hx_tmp33 = ((_hx_tmp31 + _hx_tmp32) + HX_(" / ",31,71,18,00));
HXDLIN( 132)						::String _hx_tmp34 = sr2->toGLSL(null(),null());
HXDLIN( 132)						::String x4 = ((_hx_tmp33 + _hx_tmp34) + HX_("; // div",96,6f,5d,51));
HXDLIN( 132)						Bool _hx_tmp35 = hx::IsNotNull( sb->charBuf );
HXDLIN( 132)						if (_hx_tmp35) {
HXLINE( 132)							sb->flush();
            						}
HXDLIN( 132)						::String _hx_tmp36 = ::Std_obj::string(x4);
HXDLIN( 132)						sb->b->push(_hx_tmp36);
            					}
HXLINE( 133)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 134)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 135)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)5: {
HXLINE( 139)					{
HXLINE( 139)						::String _hx_tmp37 = dr->toGLSL(null());
HXDLIN( 139)						::String _hx_tmp38 = (_hx_tmp37 + HX_(" = vec4(1) / ",b4,32,05,3b));
HXDLIN( 139)						::String _hx_tmp39 = sr1->toGLSL(null(),null());
HXDLIN( 139)						::String _hx_tmp40 = ((_hx_tmp38 + _hx_tmp39) + HX_(", ",74,26,00,00));
HXDLIN( 139)						::String _hx_tmp41 = sr2->toGLSL(null(),null());
HXDLIN( 139)						::String x5 = ((_hx_tmp40 + _hx_tmp41) + HX_("; // rcp (untested)",33,14,36,02));
HXDLIN( 139)						Bool _hx_tmp42 = hx::IsNotNull( sb->charBuf );
HXDLIN( 139)						if (_hx_tmp42) {
HXLINE( 139)							sb->flush();
            						}
HXDLIN( 139)						::String _hx_tmp43 = ::Std_obj::string(x5);
HXDLIN( 139)						sb->b->push(_hx_tmp43);
            					}
HXLINE( 140)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 141)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)6: {
HXLINE( 145)					{
HXLINE( 145)						::String _hx_tmp44 = dr->toGLSL(null());
HXDLIN( 145)						::String _hx_tmp45 = (_hx_tmp44 + HX_(" = min(",39,b9,a2,4b));
HXDLIN( 145)						::String _hx_tmp46 = sr1->toGLSL(null(),null());
HXDLIN( 145)						::String _hx_tmp47 = ((_hx_tmp45 + _hx_tmp46) + HX_(", ",74,26,00,00));
HXDLIN( 145)						::String _hx_tmp48 = sr2->toGLSL(null(),null());
HXDLIN( 145)						::String x6 = ((_hx_tmp47 + _hx_tmp48) + HX_("); // min",00,15,0e,1a));
HXDLIN( 145)						Bool _hx_tmp49 = hx::IsNotNull( sb->charBuf );
HXDLIN( 145)						if (_hx_tmp49) {
HXLINE( 145)							sb->flush();
            						}
HXDLIN( 145)						::String _hx_tmp50 = ::Std_obj::string(x6);
HXDLIN( 145)						sb->b->push(_hx_tmp50);
            					}
HXLINE( 146)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 147)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 148)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)7: {
HXLINE( 152)					{
HXLINE( 152)						::String _hx_tmp51 = dr->toGLSL(null());
HXDLIN( 152)						::String _hx_tmp52 = (_hx_tmp51 + HX_(" = max(",e7,af,9c,4b));
HXDLIN( 152)						::String _hx_tmp53 = sr1->toGLSL(null(),null());
HXDLIN( 152)						::String _hx_tmp54 = ((_hx_tmp52 + _hx_tmp53) + HX_(", ",74,26,00,00));
HXDLIN( 152)						::String _hx_tmp55 = sr2->toGLSL(null(),null());
HXDLIN( 152)						::String x7 = ((_hx_tmp54 + _hx_tmp55) + HX_("); // max",12,0e,0e,1a));
HXDLIN( 152)						Bool _hx_tmp56 = hx::IsNotNull( sb->charBuf );
HXDLIN( 152)						if (_hx_tmp56) {
HXLINE( 152)							sb->flush();
            						}
HXDLIN( 152)						::String _hx_tmp57 = ::Std_obj::string(x7);
HXDLIN( 152)						sb->b->push(_hx_tmp57);
            					}
HXLINE( 153)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 154)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 155)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)8: {
HXLINE( 159)					{
HXLINE( 159)						::String _hx_tmp58 = dr->toGLSL(null());
HXDLIN( 159)						::String _hx_tmp59 = (_hx_tmp58 + HX_(" = fract(",85,4f,5f,de));
HXDLIN( 159)						::String _hx_tmp60 = sr1->toGLSL(null(),null());
HXDLIN( 159)						::String x8 = ((_hx_tmp59 + _hx_tmp60) + HX_("); // frc",05,cd,08,1a));
HXDLIN( 159)						Bool _hx_tmp61 = hx::IsNotNull( sb->charBuf );
HXDLIN( 159)						if (_hx_tmp61) {
HXLINE( 159)							sb->flush();
            						}
HXDLIN( 159)						::String _hx_tmp62 = ::Std_obj::string(x8);
HXDLIN( 159)						sb->b->push(_hx_tmp62);
            					}
HXLINE( 160)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 161)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)9: {
HXLINE( 165)					{
HXLINE( 165)						::String _hx_tmp63 = dr->toGLSL(null());
HXDLIN( 165)						::String _hx_tmp64 = (_hx_tmp63 + HX_(" = sqrt(",05,d4,73,5c));
HXDLIN( 165)						::String _hx_tmp65 = sr1->toGLSL(null(),null());
HXDLIN( 165)						::String x9 = ((_hx_tmp64 + _hx_tmp65) + HX_("); // sqrt",b2,a8,41,b6));
HXDLIN( 165)						Bool _hx_tmp66 = hx::IsNotNull( sb->charBuf );
HXDLIN( 165)						if (_hx_tmp66) {
HXLINE( 165)							sb->flush();
            						}
HXDLIN( 165)						::String _hx_tmp67 = ::Std_obj::string(x9);
HXDLIN( 165)						sb->b->push(_hx_tmp67);
            					}
HXLINE( 166)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 167)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)10: {
HXLINE( 171)					{
HXLINE( 171)						::String _hx_tmp68 = dr->toGLSL(null());
HXDLIN( 171)						::String _hx_tmp69 = (_hx_tmp68 + HX_(" = inversesqrt(",7b,94,3b,f8));
HXDLIN( 171)						::String _hx_tmp70 = sr1->toGLSL(null(),null());
HXDLIN( 171)						::String x10 = ((_hx_tmp69 + _hx_tmp70) + HX_("); // rsq",fe,e8,11,1a));
HXDLIN( 171)						Bool _hx_tmp71 = hx::IsNotNull( sb->charBuf );
HXDLIN( 171)						if (_hx_tmp71) {
HXLINE( 171)							sb->flush();
            						}
HXDLIN( 171)						::String _hx_tmp72 = ::Std_obj::string(x10);
HXDLIN( 171)						sb->b->push(_hx_tmp72);
            					}
HXLINE( 172)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 173)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)11: {
HXLINE( 177)					{
HXLINE( 177)						::String _hx_tmp73 = dr->toGLSL(null());
HXDLIN( 177)						::String _hx_tmp74 = (_hx_tmp73 + HX_(" = pow(",73,f2,a2,4d));
HXDLIN( 177)						::String _hx_tmp75 = sr1->toGLSL(null(),null());
HXDLIN( 177)						::String _hx_tmp76 = ((_hx_tmp74 + _hx_tmp75) + HX_(", ",74,26,00,00));
HXDLIN( 177)						::String _hx_tmp77 = sr2->toGLSL(null(),null());
HXDLIN( 177)						::String x11 = ((_hx_tmp76 + _hx_tmp77) + HX_("); // pow",06,61,10,1a));
HXDLIN( 177)						Bool _hx_tmp78 = hx::IsNotNull( sb->charBuf );
HXDLIN( 177)						if (_hx_tmp78) {
HXLINE( 177)							sb->flush();
            						}
HXDLIN( 177)						::String _hx_tmp79 = ::Std_obj::string(x11);
HXDLIN( 177)						sb->b->push(_hx_tmp79);
            					}
HXLINE( 178)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 179)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 180)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)12: {
HXLINE( 184)					{
HXLINE( 184)						::String _hx_tmp80 = dr->toGLSL(null());
HXDLIN( 184)						::String _hx_tmp81 = (_hx_tmp80 + HX_(" = log2(",f7,c4,4a,53));
HXDLIN( 184)						::String _hx_tmp82 = sr1->toGLSL(null(),null());
HXDLIN( 184)						::String x12 = ((_hx_tmp81 + _hx_tmp82) + HX_("); // log",f2,57,0d,1a));
HXDLIN( 184)						Bool _hx_tmp83 = hx::IsNotNull( sb->charBuf );
HXDLIN( 184)						if (_hx_tmp83) {
HXLINE( 184)							sb->flush();
            						}
HXDLIN( 184)						::String _hx_tmp84 = ::Std_obj::string(x12);
HXDLIN( 184)						sb->b->push(_hx_tmp84);
            					}
HXLINE( 185)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 186)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)13: {
HXLINE( 190)					{
HXLINE( 190)						::String _hx_tmp85 = dr->toGLSL(null());
HXDLIN( 190)						::String _hx_tmp86 = (_hx_tmp85 + HX_(" = exp2(",50,75,76,51));
HXDLIN( 190)						::String _hx_tmp87 = sr1->toGLSL(null(),null());
HXDLIN( 190)						::String x13 = ((_hx_tmp86 + _hx_tmp87) + HX_("); // exp",0b,10,08,1a));
HXDLIN( 190)						Bool _hx_tmp88 = hx::IsNotNull( sb->charBuf );
HXDLIN( 190)						if (_hx_tmp88) {
HXLINE( 190)							sb->flush();
            						}
HXDLIN( 190)						::String _hx_tmp89 = ::Std_obj::string(x13);
HXDLIN( 190)						sb->b->push(_hx_tmp89);
            					}
HXLINE( 191)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 192)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)14: {
HXLINE( 196)					{
HXLINE( 196)						::String _hx_tmp90 = dr->toGLSL(null());
HXDLIN( 196)						::String _hx_tmp91 = (_hx_tmp90 + HX_(" = normalize(",1e,9b,e9,ff));
HXDLIN( 196)						::String _hx_tmp92 = sr1->toGLSL(null(),null());
HXDLIN( 196)						::String x14 = ((_hx_tmp91 + _hx_tmp92) + HX_("); // normalize",7b,81,39,e2));
HXDLIN( 196)						Bool _hx_tmp93 = hx::IsNotNull( sb->charBuf );
HXDLIN( 196)						if (_hx_tmp93) {
HXLINE( 196)							sb->flush();
            						}
HXDLIN( 196)						::String _hx_tmp94 = ::Std_obj::string(x14);
HXDLIN( 196)						sb->b->push(_hx_tmp94);
            					}
HXLINE( 197)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 198)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)15: {
HXLINE( 202)					{
HXLINE( 202)						::String _hx_tmp95 = dr->toGLSL(null());
HXDLIN( 202)						::String _hx_tmp96 = (_hx_tmp95 + HX_(" = sin(",f3,00,9a,4f));
HXDLIN( 202)						::String _hx_tmp97 = sr1->toGLSL(null(),null());
HXDLIN( 202)						::String x15 = ((_hx_tmp96 + _hx_tmp97) + HX_("); // sin",86,a2,12,1a));
HXDLIN( 202)						Bool _hx_tmp98 = hx::IsNotNull( sb->charBuf );
HXDLIN( 202)						if (_hx_tmp98) {
HXLINE( 202)							sb->flush();
            						}
HXDLIN( 202)						::String _hx_tmp99 = ::Std_obj::string(x15);
HXDLIN( 202)						sb->b->push(_hx_tmp99);
            					}
HXLINE( 203)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 204)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)16: {
HXLINE( 208)					{
HXLINE( 208)						::String _hx_tmp100 = dr->toGLSL(null());
HXDLIN( 208)						::String _hx_tmp101 = (_hx_tmp100 + HX_(" = cos(",e4,28,0b,45));
HXDLIN( 208)						::String _hx_tmp102 = sr1->toGLSL(null(),null());
HXDLIN( 208)						::String x16 = ((_hx_tmp101 + _hx_tmp102) + HX_("); // cos",b5,83,06,1a));
HXDLIN( 208)						Bool _hx_tmp103 = hx::IsNotNull( sb->charBuf );
HXDLIN( 208)						if (_hx_tmp103) {
HXLINE( 208)							sb->flush();
            						}
HXDLIN( 208)						::String _hx_tmp104 = ::Std_obj::string(x16);
HXDLIN( 208)						sb->b->push(_hx_tmp104);
            					}
HXLINE( 209)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 210)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)17: {
HXLINE( 214)					sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 215)					{
HXLINE( 215)						::String _hx_tmp105 = dr->toGLSL(null());
HXDLIN( 215)						::String _hx_tmp106 = (_hx_tmp105 + HX_(" = cross(vec3(",be,c1,b9,ac));
HXDLIN( 215)						::String _hx_tmp107 = sr1->toGLSL(null(),null());
HXDLIN( 215)						::String _hx_tmp108 = ((_hx_tmp106 + _hx_tmp107) + HX_("), vec3(",ec,87,86,4e));
HXDLIN( 215)						::String _hx_tmp109 = sr2->toGLSL(null(),null());
HXDLIN( 215)						::String x17 = ((_hx_tmp108 + _hx_tmp109) + HX_(")); // crs",09,b9,f3,e5));
HXDLIN( 215)						Bool _hx_tmp110 = hx::IsNotNull( sb->charBuf );
HXDLIN( 215)						if (_hx_tmp110) {
HXLINE( 215)							sb->flush();
            						}
HXDLIN( 215)						::String _hx_tmp111 = ::Std_obj::string(x17);
HXDLIN( 215)						sb->b->push(_hx_tmp111);
            					}
HXLINE( 216)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 217)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 218)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)18: {
HXLINE( 222)					sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 223)					{
HXLINE( 223)						::String _hx_tmp112 = dr->toGLSL(null());
HXDLIN( 223)						::String _hx_tmp113 = (_hx_tmp112 + HX_(" = vec4(dot(vec3(",e5,e8,98,98));
HXDLIN( 223)						::String _hx_tmp114 = sr1->toGLSL(null(),null());
HXDLIN( 223)						::String _hx_tmp115 = ((_hx_tmp113 + _hx_tmp114) + HX_("), vec3(",ec,87,86,4e));
HXDLIN( 223)						::String _hx_tmp116 = sr2->toGLSL(null(),null());
HXDLIN( 223)						::String _hx_tmp117 = ((_hx_tmp115 + _hx_tmp116) + HX_(")))",49,40,1f,00));
HXDLIN( 223)						::String _hx_tmp118 = dr->getWriteMask();
HXDLIN( 223)						::String x18 = ((_hx_tmp117 + _hx_tmp118) + HX_("; // dp3",6c,75,5d,51));
HXDLIN( 223)						Bool _hx_tmp119 = hx::IsNotNull( sb->charBuf );
HXDLIN( 223)						if (_hx_tmp119) {
HXLINE( 223)							sb->flush();
            						}
HXDLIN( 223)						::String _hx_tmp120 = ::Std_obj::string(x18);
HXDLIN( 223)						sb->b->push(_hx_tmp120);
            					}
HXLINE( 224)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 225)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 226)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)19: {
HXLINE( 230)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 231)					{
HXLINE( 231)						::String _hx_tmp121 = dr->toGLSL(null());
HXDLIN( 231)						::String _hx_tmp122 = (_hx_tmp121 + HX_(" = vec4(dot(vec4(",c4,e9,98,98));
HXDLIN( 231)						::String _hx_tmp123 = sr1->toGLSL(null(),null());
HXDLIN( 231)						::String _hx_tmp124 = ((_hx_tmp122 + _hx_tmp123) + HX_("), vec4(",cb,88,86,4e));
HXDLIN( 231)						::String _hx_tmp125 = sr2->toGLSL(null(),null());
HXDLIN( 231)						::String _hx_tmp126 = ((_hx_tmp124 + _hx_tmp125) + HX_(")))",49,40,1f,00));
HXDLIN( 231)						::String _hx_tmp127 = dr->getWriteMask();
HXDLIN( 231)						::String x19 = ((_hx_tmp126 + _hx_tmp127) + HX_("; // dp4",6d,75,5d,51));
HXDLIN( 231)						Bool _hx_tmp128 = hx::IsNotNull( sb->charBuf );
HXDLIN( 231)						if (_hx_tmp128) {
HXLINE( 231)							sb->flush();
            						}
HXDLIN( 231)						::String _hx_tmp129 = ::Std_obj::string(x19);
HXDLIN( 231)						sb->b->push(_hx_tmp129);
            					}
HXLINE( 232)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 233)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 234)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)20: {
HXLINE( 238)					{
HXLINE( 238)						::String _hx_tmp130 = dr->toGLSL(null());
HXDLIN( 238)						::String _hx_tmp131 = (_hx_tmp130 + HX_(" = abs(",59,de,ae,43));
HXDLIN( 238)						::String _hx_tmp132 = sr1->toGLSL(null(),null());
HXDLIN( 238)						::String x20 = ((_hx_tmp131 + _hx_tmp132) + HX_("); // abs",e0,f3,04,1a));
HXDLIN( 238)						Bool _hx_tmp133 = hx::IsNotNull( sb->charBuf );
HXDLIN( 238)						if (_hx_tmp133) {
HXLINE( 238)							sb->flush();
            						}
HXDLIN( 238)						::String _hx_tmp134 = ::Std_obj::string(x20);
HXDLIN( 238)						sb->b->push(_hx_tmp134);
            					}
HXLINE( 239)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 240)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)21: {
HXLINE( 244)					{
HXLINE( 244)						::String _hx_tmp135 = dr->toGLSL(null());
HXDLIN( 244)						::String _hx_tmp136 = (_hx_tmp135 + HX_(" = -",6a,39,55,15));
HXDLIN( 244)						::String _hx_tmp137 = sr1->toGLSL(null(),null());
HXDLIN( 244)						::String x21 = ((_hx_tmp136 + _hx_tmp137) + HX_("; // neg",95,02,65,51));
HXDLIN( 244)						Bool _hx_tmp138 = hx::IsNotNull( sb->charBuf );
HXDLIN( 244)						if (_hx_tmp138) {
HXLINE( 244)							sb->flush();
            						}
HXDLIN( 244)						::String _hx_tmp139 = ::Std_obj::string(x21);
HXDLIN( 244)						sb->b->push(_hx_tmp139);
            					}
HXLINE( 245)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 246)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)22: {
HXLINE( 250)					{
HXLINE( 250)						::String _hx_tmp140 = dr->toGLSL(null());
HXDLIN( 250)						::String _hx_tmp141 = (_hx_tmp140 + HX_(" = clamp(",70,52,ed,36));
HXDLIN( 250)						::String _hx_tmp142 = sr1->toGLSL(null(),null());
HXDLIN( 250)						::String x22 = ((_hx_tmp141 + _hx_tmp142) + HX_(", 0.0, 1.0); // saturate",02,d7,59,d0));
HXDLIN( 250)						Bool _hx_tmp143 = hx::IsNotNull( sb->charBuf );
HXDLIN( 250)						if (_hx_tmp143) {
HXLINE( 250)							sb->flush();
            						}
HXDLIN( 250)						::String _hx_tmp144 = ::Std_obj::string(x22);
HXDLIN( 250)						sb->b->push(_hx_tmp144);
            					}
HXLINE( 251)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 252)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)23: {
HXLINE( 260)					HX_VARI( ::hx::EnumBase,existingUsage) = map->getRegisterUsage(sr2);
HXLINE( 262)					Bool _hx_tmp145;
HXDLIN( 262)					if (hx::IsNotEq( existingUsage,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn() )) {
HXLINE( 262)						_hx_tmp145 = hx::IsNotEq( existingUsage,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() );
            					}
            					else {
HXLINE( 262)						_hx_tmp145 = false;
            					}
HXDLIN( 262)					if (_hx_tmp145) {
HXLINE( 264)						{
HXLINE( 264)							::String _hx_tmp146 = dr->toGLSL(null());
HXDLIN( 264)							::String _hx_tmp147 = (_hx_tmp146 + HX_(" = ",63,7d,18,00));
HXDLIN( 264)							::String _hx_tmp148 = sr1->toGLSL(null(),null());
HXDLIN( 264)							::String _hx_tmp149 = ((_hx_tmp147 + _hx_tmp148) + HX_(" * mat3(",9f,6a,62,c7));
HXDLIN( 264)							::String _hx_tmp150 = sr2->toGLSL(false,null());
HXDLIN( 264)							::String x23 = ((_hx_tmp149 + _hx_tmp150) + HX_("); // m33",bb,e5,0d,1a));
HXDLIN( 264)							Bool _hx_tmp151 = hx::IsNotNull( sb->charBuf );
HXDLIN( 264)							if (_hx_tmp151) {
HXLINE( 264)								sb->flush();
            							}
HXDLIN( 264)							::String _hx_tmp152 = ::Std_obj::string(x23);
HXDLIN( 264)							sb->b->push(_hx_tmp152);
            						}
HXLINE( 265)						map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 266)						map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 267)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::MATRIX_4_4_dyn(),null());
            					}
            					else {
HXLINE( 272)						sr1->sourceMask = (sr2->sourceMask = (int)7);
HXLINE( 273)						{
HXLINE( 273)							::String _hx_tmp153 = dr->toGLSL(null());
HXDLIN( 273)							::String _hx_tmp154 = ((_hx_tmp153 + HX_(" = vec3(",a6,67,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 274)							::String _hx_tmp155 = sr1->toGLSL(true,null());
HXLINE( 273)							::String _hx_tmp156 = ((_hx_tmp154 + _hx_tmp155) + HX_(",",2c,00,00,00));
HXLINE( 274)							::String _hx_tmp157 = sr2->toGLSL(true,(int)0);
HXLINE( 273)							::String _hx_tmp158 = (((_hx_tmp156 + _hx_tmp157) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 275)							::String _hx_tmp159 = sr1->toGLSL(true,null());
HXLINE( 273)							::String _hx_tmp160 = ((_hx_tmp158 + _hx_tmp159) + HX_(",",2c,00,00,00));
HXLINE( 275)							::String _hx_tmp161 = sr2->toGLSL(true,(int)1);
HXLINE( 273)							::String _hx_tmp162 = (((_hx_tmp160 + _hx_tmp161) + HX_("),",e3,23,00,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 276)							::String _hx_tmp163 = sr1->toGLSL(true,null());
HXLINE( 273)							::String _hx_tmp164 = ((_hx_tmp162 + _hx_tmp163) + HX_(",",2c,00,00,00));
HXLINE( 276)							::String _hx_tmp165 = sr2->toGLSL(true,(int)2);
HXLINE( 273)							::String x24 = ((_hx_tmp164 + _hx_tmp165) + HX_(")); // m33",72,18,fb,e5));
HXDLIN( 273)							Bool _hx_tmp166 = hx::IsNotNull( sb->charBuf );
HXDLIN( 273)							if (_hx_tmp166) {
HXLINE( 273)								sb->flush();
            							}
HXDLIN( 273)							::String _hx_tmp167 = ::Std_obj::string(x24);
HXDLIN( 273)							sb->b->push(_hx_tmp167);
            						}
HXLINE( 278)						map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 279)						map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 280)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)0);
HXLINE( 281)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)1);
HXLINE( 282)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)2);
            					}
            				}
            				break;
            				case (int)24: {
HXLINE( 294)					HX_VARI_NAME( ::hx::EnumBase,existingUsage1,"existingUsage") = map->getRegisterUsage(sr2);
HXLINE( 296)					Bool _hx_tmp168;
HXDLIN( 296)					if (hx::IsNotEq( existingUsage1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn() )) {
HXLINE( 296)						_hx_tmp168 = hx::IsNotEq( existingUsage1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() );
            					}
            					else {
HXLINE( 296)						_hx_tmp168 = false;
            					}
HXDLIN( 296)					if (_hx_tmp168) {
HXLINE( 298)						{
HXLINE( 298)							::String _hx_tmp169 = dr->toGLSL(null());
HXDLIN( 298)							::String _hx_tmp170 = (_hx_tmp169 + HX_(" = ",63,7d,18,00));
HXDLIN( 298)							::String _hx_tmp171 = sr1->toGLSL(null(),null());
HXDLIN( 298)							::String _hx_tmp172 = ((_hx_tmp170 + _hx_tmp171) + HX_(" * ",d6,6c,18,00));
HXDLIN( 298)							::String _hx_tmp173 = sr2->toGLSL(false,null());
HXDLIN( 298)							::String x25 = ((_hx_tmp172 + _hx_tmp173) + HX_("; // m44",72,15,64,51));
HXDLIN( 298)							Bool _hx_tmp174 = hx::IsNotNull( sb->charBuf );
HXDLIN( 298)							if (_hx_tmp174) {
HXLINE( 298)								sb->flush();
            							}
HXDLIN( 298)							::String _hx_tmp175 = ::Std_obj::string(x25);
HXDLIN( 298)							sb->b->push(_hx_tmp175);
            						}
HXLINE( 299)						map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 300)						map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 301)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::MATRIX_4_4_dyn(),null());
            					}
            					else {
HXLINE( 306)						sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 307)						{
HXLINE( 307)							::String _hx_tmp176 = dr->toGLSL(null());
HXDLIN( 307)							::String _hx_tmp177 = ((_hx_tmp176 + HX_(" = vec4(",85,68,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 308)							::String _hx_tmp178 = sr1->toGLSL(true,null());
HXLINE( 307)							::String _hx_tmp179 = ((_hx_tmp177 + _hx_tmp178) + HX_(",",2c,00,00,00));
HXLINE( 308)							::String _hx_tmp180 = sr2->toGLSL(true,(int)0);
HXLINE( 307)							::String _hx_tmp181 = (((_hx_tmp179 + _hx_tmp180) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 309)							::String _hx_tmp182 = sr1->toGLSL(true,null());
HXLINE( 307)							::String _hx_tmp183 = ((_hx_tmp181 + _hx_tmp182) + HX_(",",2c,00,00,00));
HXLINE( 309)							::String _hx_tmp184 = sr2->toGLSL(true,(int)1);
HXLINE( 307)							::String _hx_tmp185 = (((_hx_tmp183 + _hx_tmp184) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 310)							::String _hx_tmp186 = sr1->toGLSL(true,null());
HXLINE( 307)							::String _hx_tmp187 = ((_hx_tmp185 + _hx_tmp186) + HX_(",",2c,00,00,00));
HXLINE( 310)							::String _hx_tmp188 = sr2->toGLSL(true,(int)2);
HXLINE( 307)							::String _hx_tmp189 = (((_hx_tmp187 + _hx_tmp188) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 311)							::String _hx_tmp190 = sr1->toGLSL(true,null());
HXLINE( 307)							::String _hx_tmp191 = ((_hx_tmp189 + _hx_tmp190) + HX_(",",2c,00,00,00));
HXLINE( 311)							::String _hx_tmp192 = sr2->toGLSL(true,(int)3);
HXLINE( 307)							::String x26 = ((_hx_tmp191 + _hx_tmp192) + HX_(")); // m44",52,19,fb,e5));
HXDLIN( 307)							Bool _hx_tmp193 = hx::IsNotNull( sb->charBuf );
HXDLIN( 307)							if (_hx_tmp193) {
HXLINE( 307)								sb->flush();
            							}
HXDLIN( 307)							::String _hx_tmp194 = ::Std_obj::string(x26);
HXDLIN( 307)							sb->b->push(_hx_tmp194);
            						}
HXLINE( 313)						map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 314)						map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 315)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)0);
HXLINE( 316)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)1);
HXLINE( 317)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)2);
HXLINE( 318)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)3);
            					}
            				}
            				break;
            				case (int)25: {
HXLINE( 330)					hx::AndEq(dr->mask,(int)7);
HXLINE( 332)					HX_VARI_NAME( ::hx::EnumBase,existingUsage2,"existingUsage") = map->getRegisterUsage(sr2);
HXLINE( 334)					Bool _hx_tmp195;
HXDLIN( 334)					if (hx::IsNotEq( existingUsage2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn() )) {
HXLINE( 334)						_hx_tmp195 = hx::IsNotEq( existingUsage2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_ARRAY_dyn() );
            					}
            					else {
HXLINE( 334)						_hx_tmp195 = false;
            					}
HXDLIN( 334)					if (_hx_tmp195) {
HXLINE( 336)						{
HXLINE( 336)							::String _hx_tmp196 = dr->toGLSL(null());
HXDLIN( 336)							::String _hx_tmp197 = (_hx_tmp196 + HX_(" = ",63,7d,18,00));
HXDLIN( 336)							::String _hx_tmp198 = sr1->toGLSL(null(),null());
HXDLIN( 336)							::String _hx_tmp199 = ((_hx_tmp197 + _hx_tmp198) + HX_(" * ",d6,6c,18,00));
HXDLIN( 336)							::String _hx_tmp200 = sr2->toGLSL(false,null());
HXDLIN( 336)							::String x27 = ((_hx_tmp199 + _hx_tmp200) + HX_("; // m34",93,14,64,51));
HXDLIN( 336)							Bool _hx_tmp201 = hx::IsNotNull( sb->charBuf );
HXDLIN( 336)							if (_hx_tmp201) {
HXLINE( 336)								sb->flush();
            							}
HXDLIN( 336)							::String _hx_tmp202 = ::Std_obj::string(x27);
HXDLIN( 336)							sb->b->push(_hx_tmp202);
            						}
HXLINE( 337)						map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 338)						map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 339)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::MATRIX_4_4_dyn(),null());
            					}
            					else {
HXLINE( 344)						sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 345)						{
HXLINE( 345)							::String _hx_tmp203 = dr->toGLSL(null());
HXDLIN( 345)							::String _hx_tmp204 = ((_hx_tmp203 + HX_(" = vec3(",a6,67,ad,0e)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 346)							::String _hx_tmp205 = sr1->toGLSL(true,null());
HXLINE( 345)							::String _hx_tmp206 = ((_hx_tmp204 + _hx_tmp205) + HX_(",",2c,00,00,00));
HXLINE( 346)							::String _hx_tmp207 = sr2->toGLSL(true,(int)0);
HXLINE( 345)							::String _hx_tmp208 = (((_hx_tmp206 + _hx_tmp207) + HX_("), ",dd,42,1f,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 347)							::String _hx_tmp209 = sr1->toGLSL(true,null());
HXLINE( 345)							::String _hx_tmp210 = ((_hx_tmp208 + _hx_tmp209) + HX_(",",2c,00,00,00));
HXLINE( 347)							::String _hx_tmp211 = sr2->toGLSL(true,(int)1);
HXLINE( 345)							::String _hx_tmp212 = (((_hx_tmp210 + _hx_tmp211) + HX_("),",e3,23,00,00)) + HX_("dot(",7f,f5,6d,42));
HXLINE( 348)							::String _hx_tmp213 = sr1->toGLSL(true,null());
HXLINE( 345)							::String _hx_tmp214 = ((_hx_tmp212 + _hx_tmp213) + HX_(",",2c,00,00,00));
HXLINE( 348)							::String _hx_tmp215 = sr2->toGLSL(true,(int)2);
HXLINE( 345)							::String x28 = ((_hx_tmp214 + _hx_tmp215) + HX_(")); // m34",73,18,fb,e5));
HXDLIN( 345)							Bool _hx_tmp216 = hx::IsNotNull( sb->charBuf );
HXDLIN( 345)							if (_hx_tmp216) {
HXLINE( 345)								sb->flush();
            							}
HXDLIN( 345)							::String _hx_tmp217 = ::Std_obj::string(x28);
HXDLIN( 345)							sb->b->push(_hx_tmp217);
            						}
HXLINE( 350)						map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 351)						map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 352)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)0);
HXLINE( 353)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)1);
HXLINE( 354)						map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),(int)2);
            					}
            				}
            				break;
            				case (int)39: {
HXLINE( 363)					sr1->sourceMask = (int)15;
HXLINE( 364)					{
HXLINE( 364)						::String _hx_tmp218 = sr1->toGLSL(null(),null());
HXDLIN( 364)						::String x29 = ((HX_("if (any(lessThan(",0d,a8,4d,9b) + _hx_tmp218) + HX_(", vec4(0)))) discard;",61,d7,c4,f0));
HXDLIN( 364)						Bool _hx_tmp219 = hx::IsNotNull( sb->charBuf );
HXDLIN( 364)						if (_hx_tmp219) {
HXLINE( 364)							sb->flush();
            						}
HXDLIN( 364)						::String _hx_tmp220 = ::Std_obj::string(x29);
HXDLIN( 364)						sb->b->push(_hx_tmp220);
            					}
HXLINE( 365)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)40: {
HXLINE( 371)					HX_VARI(  ::openfl::_internal::stage3D::_AGALConverter::SamplerRegister,sampler) = ::openfl::_internal::stage3D::_AGALConverter::SamplerRegister_obj::parse(source2,programType);
HXLINE( 373)					{
HXLINE( 373)						HX_VARI( Int,_g) = sampler->d;
HXDLIN( 373)						switch((int)(_g)){
            							case (int)0: {
HXLINE( 377)								sr1->sourceMask = (int)3;
HXLINE( 378)								map->addSaR(sampler,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::SAMPLER_2D_dyn());
HXLINE( 379)								{
HXLINE( 379)									::String _hx_tmp221 = dr->toGLSL(null());
HXDLIN( 379)									::String _hx_tmp222 = (_hx_tmp221 + HX_(" = texture2D(",3e,55,2e,2f));
HXDLIN( 379)									::String _hx_tmp223 = sampler->toGLSL();
HXDLIN( 379)									::String _hx_tmp224 = ((_hx_tmp222 + _hx_tmp223) + HX_(", ",74,26,00,00));
HXDLIN( 379)									::String _hx_tmp225 = sr1->toGLSL(null(),null());
HXDLIN( 379)									::String x30 = ((_hx_tmp224 + _hx_tmp225) + HX_("); // tex",55,61,13,1a));
HXDLIN( 379)									Bool _hx_tmp226 = hx::IsNotNull( sb->charBuf );
HXDLIN( 379)									if (_hx_tmp226) {
HXLINE( 379)										sb->flush();
            									}
HXDLIN( 379)									::String _hx_tmp227 = ::Std_obj::string(x30);
HXDLIN( 379)									sb->b->push(_hx_tmp227);
            								}
            							}
            							break;
            							case (int)1: {
HXLINE( 383)								sr1->sourceMask = (int)7;
HXLINE( 384)								{
HXLINE( 384)									::String _hx_tmp228 = dr->toGLSL(null());
HXDLIN( 384)									::String _hx_tmp229 = (_hx_tmp228 + HX_(" = textureCube(",9b,4c,bc,01));
HXDLIN( 384)									::String _hx_tmp230 = sampler->toGLSL();
HXDLIN( 384)									::String _hx_tmp231 = ((_hx_tmp229 + _hx_tmp230) + HX_(", ",74,26,00,00));
HXDLIN( 384)									::String _hx_tmp232 = sr1->toGLSL(null(),null());
HXDLIN( 384)									::String x31 = ((_hx_tmp231 + _hx_tmp232) + HX_("); // tex",55,61,13,1a));
HXDLIN( 384)									Bool _hx_tmp233 = hx::IsNotNull( sb->charBuf );
HXDLIN( 384)									if (_hx_tmp233) {
HXLINE( 384)										sb->flush();
            									}
HXDLIN( 384)									::String _hx_tmp234 = ::Std_obj::string(x31);
HXDLIN( 384)									sb->b->push(_hx_tmp234);
            								}
HXLINE( 385)								map->addSaR(sampler,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::SAMPLER_CUBE_dyn());
            							}
            							break;
            						}
            					}
HXLINE( 390)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 391)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 393)					Bool _hx_tmp235 = hx::IsNotNull( samplerState );
HXDLIN( 393)					if (_hx_tmp235) {
HXLINE( 396)						Int _hx_tmp236 = sampler->n;
HXDLIN( 396)						 ::openfl::_internal::stage3D::SamplerState _hx_tmp237 = sampler->toSamplerState();
HXDLIN( 396)						samplerState[_hx_tmp236] = _hx_tmp237;
            					}
            				}
            				break;
            				case (int)41: {
HXLINE( 402)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 403)					{
HXLINE( 403)						::String _hx_tmp238 = dr->toGLSL(null());
HXDLIN( 403)						::String _hx_tmp239 = (_hx_tmp238 + HX_(" = vec4(greaterThanEqual(",aa,a3,51,ec));
HXDLIN( 403)						::String _hx_tmp240 = sr1->toGLSL(null(),null());
HXDLIN( 403)						::String _hx_tmp241 = ((_hx_tmp239 + _hx_tmp240) + HX_(", ",74,26,00,00));
HXDLIN( 403)						::String _hx_tmp242 = sr2->toGLSL(null(),null());
HXDLIN( 403)						::String _hx_tmp243 = ((_hx_tmp241 + _hx_tmp242) + HX_("))",e0,23,00,00));
HXDLIN( 403)						::String _hx_tmp244 = dr->getWriteMask();
HXDLIN( 403)						::String x32 = ((_hx_tmp243 + _hx_tmp244) + HX_("; // ste",e9,da,68,51));
HXDLIN( 403)						Bool _hx_tmp245 = hx::IsNotNull( sb->charBuf );
HXDLIN( 403)						if (_hx_tmp245) {
HXLINE( 403)							sb->flush();
            						}
HXDLIN( 403)						::String _hx_tmp246 = ::Std_obj::string(x32);
HXDLIN( 403)						sb->b->push(_hx_tmp246);
            					}
HXLINE( 404)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 405)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 406)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)42: {
HXLINE( 410)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 411)					{
HXLINE( 411)						::String _hx_tmp247 = dr->toGLSL(null());
HXDLIN( 411)						::String _hx_tmp248 = (_hx_tmp247 + HX_(" = vec4(lessThan(",69,ee,b4,35));
HXDLIN( 411)						::String _hx_tmp249 = sr1->toGLSL(null(),null());
HXDLIN( 411)						::String _hx_tmp250 = ((_hx_tmp248 + _hx_tmp249) + HX_(", ",74,26,00,00));
HXDLIN( 411)						::String _hx_tmp251 = sr2->toGLSL(null(),null());
HXDLIN( 411)						::String _hx_tmp252 = ((_hx_tmp250 + _hx_tmp251) + HX_("))",e0,23,00,00));
HXDLIN( 411)						::String _hx_tmp253 = dr->getWriteMask();
HXDLIN( 411)						::String x33 = ((_hx_tmp252 + _hx_tmp253) + HX_("; // slt",00,d4,68,51));
HXDLIN( 411)						Bool _hx_tmp254 = hx::IsNotNull( sb->charBuf );
HXDLIN( 411)						if (_hx_tmp254) {
HXLINE( 411)							sb->flush();
            						}
HXDLIN( 411)						::String _hx_tmp255 = ::Std_obj::string(x33);
HXDLIN( 411)						sb->b->push(_hx_tmp255);
            					}
HXLINE( 412)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 413)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 414)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)44: {
HXLINE( 418)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 419)					{
HXLINE( 419)						::String _hx_tmp256 = dr->toGLSL(null());
HXDLIN( 419)						::String _hx_tmp257 = (_hx_tmp256 + HX_(" = vec4(equal(",39,08,45,e1));
HXDLIN( 419)						::String _hx_tmp258 = sr1->toGLSL(null(),null());
HXDLIN( 419)						::String _hx_tmp259 = ((_hx_tmp257 + _hx_tmp258) + HX_(", ",74,26,00,00));
HXDLIN( 419)						::String _hx_tmp260 = sr2->toGLSL(null(),null());
HXDLIN( 419)						::String _hx_tmp261 = ((_hx_tmp259 + _hx_tmp260) + HX_("))",e0,23,00,00));
HXDLIN( 419)						::String _hx_tmp262 = dr->getWriteMask();
HXDLIN( 419)						::String x34 = ((_hx_tmp261 + _hx_tmp262) + HX_("; // seq",e4,cd,68,51));
HXDLIN( 419)						Bool _hx_tmp263 = hx::IsNotNull( sb->charBuf );
HXDLIN( 419)						if (_hx_tmp263) {
HXLINE( 419)							sb->flush();
            						}
HXDLIN( 419)						::String _hx_tmp264 = ::Std_obj::string(x34);
HXDLIN( 419)						sb->b->push(_hx_tmp264);
            					}
HXLINE( 420)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 421)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 422)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				case (int)45: {
HXLINE( 426)					sr1->sourceMask = (sr2->sourceMask = (int)15);
HXLINE( 427)					{
HXLINE( 427)						::String _hx_tmp265 = dr->toGLSL(null());
HXDLIN( 427)						::String _hx_tmp266 = (_hx_tmp265 + HX_(" = vec4(notEqual(",42,aa,f1,97));
HXDLIN( 427)						::String _hx_tmp267 = sr1->toGLSL(null(),null());
HXDLIN( 427)						::String _hx_tmp268 = ((_hx_tmp266 + _hx_tmp267) + HX_(", ",74,26,00,00));
HXDLIN( 427)						::String _hx_tmp269 = sr2->toGLSL(null(),null());
HXDLIN( 427)						::String _hx_tmp270 = ((_hx_tmp268 + _hx_tmp269) + HX_("))",e0,23,00,00));
HXDLIN( 427)						::String _hx_tmp271 = dr->getWriteMask();
HXDLIN( 427)						::String x35 = ((_hx_tmp270 + _hx_tmp271) + HX_("; // sne",af,d5,68,51));
HXDLIN( 427)						Bool _hx_tmp272 = hx::IsNotNull( sb->charBuf );
HXDLIN( 427)						if (_hx_tmp272) {
HXLINE( 427)							sb->flush();
            						}
HXDLIN( 427)						::String _hx_tmp273 = ::Std_obj::string(x35);
HXDLIN( 427)						sb->b->push(_hx_tmp273);
            					}
HXLINE( 428)					map->addDR(dr,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn());
HXLINE( 429)					map->addSR(sr1,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
HXLINE( 430)					map->addSR(sr2,::openfl::_internal::stage3D::_AGALConverter::RegisterUsage_obj::VECTOR_4_dyn(),null());
            				}
            				break;
            				default:{
HXLINE( 435)					HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__new((HX_("Opcode ",72,65,6e,e7) + opcode)));
            				}
            			}
HXLINE( 439)			{
HXLINE( 439)				Bool _hx_tmp274 = hx::IsNotNull( sb->charBuf );
HXDLIN( 439)				if (_hx_tmp274) {
HXLINE( 439)					sb->flush();
            				}
HXDLIN( 439)				sb->b->push(HX_("\n",0a,00,00,00));
            			}
            		}
HXLINE( 443)		Bool _hx_tmp275 = hx::IsNull( ::openfl::_internal::stage3D::AGALConverter_obj::limitedProfile );
HXDLIN( 443)		if (_hx_tmp275) {
HXLINE( 445)			HX_VARI_NAME( ::String,version1,"version") = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7938)) );
HXLINE( 446)			Bool _hx_tmp276;
HXDLIN( 446)			Int _hx_tmp277 = version1.indexOf(HX_("OpenGL ES",5f,cb,92,95),null());
HXDLIN( 446)			if ((_hx_tmp277 <= (int)-1)) {
HXLINE( 446)				Int _hx_tmp278 = version1.indexOf(HX_("WebGL",99,9f,e9,5a),null());
HXDLIN( 446)				_hx_tmp276 = (_hx_tmp278 > (int)-1);
            			}
            			else {
HXLINE( 446)				_hx_tmp276 = true;
            			}
HXDLIN( 446)			::openfl::_internal::stage3D::AGALConverter_obj::limitedProfile = _hx_tmp276;
            		}
HXLINE( 453)		HX_VARI(  ::StringBuf,glsl) =  ::StringBuf_obj::__new();
HXLINE( 454)		{
HXLINE( 454)			Bool _hx_tmp279 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 454)			if (_hx_tmp279) {
HXLINE( 454)				glsl->flush();
            			}
HXDLIN( 454)			::String _hx_tmp280;
HXDLIN( 454)			if (hx::IsEq( programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE( 454)				_hx_tmp280 = HX_("vertex",64,db,47,a1);
            			}
            			else {
HXLINE( 454)				_hx_tmp280 = HX_("fragment",d0,5f,e5,ad);
            			}
HXDLIN( 454)			::String _hx_tmp281 = ::Std_obj::string(((HX_("// AGAL ",af,bc,4a,8a) + _hx_tmp280) + HX_(" shader\n",25,c5,d4,85)));
HXDLIN( 454)			glsl->b->push(_hx_tmp281);
            		}
HXLINE( 456)		 ::Dynamic _hx_tmp282 = ::openfl::_internal::stage3D::AGALConverter_obj::limitedProfile;
HXDLIN( 456)		if (_hx_tmp282) {
HXLINE( 458)			{
HXLINE( 458)				Bool _hx_tmp283 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 458)				if (_hx_tmp283) {
HXLINE( 458)					glsl->flush();
            				}
HXDLIN( 458)				::String _hx_tmp284 = ::Std_obj::string(((HX_("#version ",2b,a9,b9,ad) + (int)100) + HX_("\n",0a,00,00,00)));
HXDLIN( 458)				glsl->b->push(_hx_tmp284);
            			}
HXLINE( 461)			{
HXLINE( 461)				Bool _hx_tmp285 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 461)				if (_hx_tmp285) {
HXLINE( 461)					glsl->flush();
            				}
HXDLIN( 461)				glsl->b->push(HX_("precision highp float;\n",57,4a,f7,14));
            			}
            		}
HXLINE( 465)		{
HXLINE( 465)			::String x36 = map->toGLSL(false);
HXDLIN( 465)			Bool _hx_tmp286 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 465)			if (_hx_tmp286) {
HXLINE( 465)				glsl->flush();
            			}
HXDLIN( 465)			::String _hx_tmp287 = ::Std_obj::string(x36);
HXDLIN( 465)			glsl->b->push(_hx_tmp287);
            		}
HXLINE( 467)		if (hx::IsEq( programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE( 470)			Bool _hx_tmp288 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 470)			if (_hx_tmp288) {
HXLINE( 470)				glsl->flush();
            			}
HXDLIN( 470)			glsl->b->push(HX_("uniform vec4 vcPositionScale;\n",cf,aa,4f,18));
            		}
HXLINE( 474)		{
HXLINE( 474)			Bool _hx_tmp289 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 474)			if (_hx_tmp289) {
HXLINE( 474)				glsl->flush();
            			}
HXDLIN( 474)			glsl->b->push(HX_("void main() {\n",49,b0,bf,fb));
            		}
HXLINE( 475)		{
HXLINE( 475)			::String x37 = map->toGLSL(true);
HXDLIN( 475)			Bool _hx_tmp290 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 475)			if (_hx_tmp290) {
HXLINE( 475)				glsl->flush();
            			}
HXDLIN( 475)			::String _hx_tmp291 = ::Std_obj::string(x37);
HXDLIN( 475)			glsl->b->push(_hx_tmp291);
            		}
HXLINE( 476)		{
HXLINE( 476)			Bool _hx_tmp292 = hx::IsNotNull( sb->charBuf );
HXDLIN( 476)			if (_hx_tmp292) {
HXLINE( 476)				sb->flush();
            			}
HXDLIN( 476)			::String x38 = sb->b->join(HX_("",00,00,00,00));
HXDLIN( 476)			Bool _hx_tmp293 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 476)			if (_hx_tmp293) {
HXLINE( 476)				glsl->flush();
            			}
HXDLIN( 476)			::String _hx_tmp294 = ::Std_obj::string(x38);
HXDLIN( 476)			glsl->b->push(_hx_tmp294);
            		}
HXLINE( 478)		if (hx::IsEq( programType,::openfl::_internal::stage3D::_AGALConverter::ProgramType_obj::VERTEX_dyn() )) {
HXLINE( 481)			Bool _hx_tmp295 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 481)			if (_hx_tmp295) {
HXLINE( 481)				glsl->flush();
            			}
HXDLIN( 481)			glsl->b->push(HX_("\tgl_Position *= vcPositionScale;\n",7c,ad,85,8d));
            		}
HXLINE( 485)		{
HXLINE( 485)			Bool _hx_tmp296 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 485)			if (_hx_tmp296) {
HXLINE( 485)				glsl->flush();
            			}
HXDLIN( 485)			glsl->b->push(HX_("}\n",ed,6c,00,00));
            		}
HXLINE( 488)		Bool _hx_tmp297 = hx::IsNotNull( glsl->charBuf );
HXDLIN( 488)		if (_hx_tmp297) {
HXLINE( 488)			glsl->flush();
            		}
HXDLIN( 488)		return glsl->b->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AGALConverter_obj,convertToGLSL,return )


AGALConverter_obj::AGALConverter_obj()
{
}

bool AGALConverter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"readUInt64") ) { outValue = readUInt64_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertToGLSL") ) { outValue = convertToGLSL_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"limitedProfile") ) { outValue = limitedProfile; return true; }
		if (HX_FIELD_EQ(inName,"prefixFromType") ) { outValue = prefixFromType_dyn(); return true; }
	}
	return false;
}

bool AGALConverter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"limitedProfile") ) { limitedProfile=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *AGALConverter_obj_sMemberStorageInfo = 0;
static hx::StaticInfo AGALConverter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &AGALConverter_obj::limitedProfile,HX_HCSTRING("limitedProfile","\xef","\x13","\x1a","\x0a")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void AGALConverter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AGALConverter_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AGALConverter_obj::limitedProfile,"limitedProfile");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AGALConverter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AGALConverter_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AGALConverter_obj::limitedProfile,"limitedProfile");
};

#endif

hx::Class AGALConverter_obj::__mClass;

static ::String AGALConverter_obj_sStaticFields[] = {
	HX_HCSTRING("limitedProfile","\xef","\x13","\x1a","\x0a"),
	HX_HCSTRING("prefixFromType","\xf6","\x38","\xec","\xc8"),
	HX_HCSTRING("readUInt64","\x2e","\x21","\x8b","\x12"),
	HX_HCSTRING("convertToGLSL","\x4c","\x43","\x62","\xb5"),
	::String(null())
};

void AGALConverter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.AGALConverter","\xa0","\x2d","\xe2","\x9e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AGALConverter_obj::__GetStatic;
	__mClass->mSetStaticField = &AGALConverter_obj::__SetStatic;
	__mClass->mMarkFunc = AGALConverter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AGALConverter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< AGALConverter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AGALConverter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AGALConverter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AGALConverter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
