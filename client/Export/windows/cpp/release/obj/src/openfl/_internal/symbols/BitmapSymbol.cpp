// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_Assets
#include <lime/Assets.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_IAssetCache
#include <openfl/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

namespace openfl{
namespace _internal{
namespace symbols{

void BitmapSymbol_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.symbols.BitmapSymbol","new",0x8818031c,"openfl._internal.symbols.BitmapSymbol.new","openfl/_internal/symbols/BitmapSymbol.hx",24,0x5876b9f1)
            	HX_STACK_THIS(this)
HXLINE(  24)		super::__construct();
            	}

Dynamic BitmapSymbol_obj::__CreateEmpty() { return new BitmapSymbol_obj; }

hx::ObjectPtr< BitmapSymbol_obj > BitmapSymbol_obj::__new()
{
	hx::ObjectPtr< BitmapSymbol_obj > _hx_result = new BitmapSymbol_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic BitmapSymbol_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapSymbol_obj > _hx_result = new BitmapSymbol_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::openfl::display::DisplayObject BitmapSymbol_obj::_hx___createObject( ::openfl::_internal::swf::SWFLite swf){
            	HX_STACK_FRAME("openfl._internal.symbols.BitmapSymbol","__createObject",0xcb0ed0bf,"openfl._internal.symbols.BitmapSymbol.__createObject","openfl/_internal/symbols/BitmapSymbol.hx",31,0x5876b9f1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(swf,"swf")
HXLINE(  31)		 ::openfl::display::BitmapData _hx_tmp = this->_hx___getBitmap();
HXDLIN(  31)		return  ::openfl::display::Bitmap_obj::__new(_hx_tmp,(int)1,true);
            	}


 ::openfl::display::BitmapData BitmapSymbol_obj::_hx___getBitmap(){
            	HX_STACK_FRAME("openfl._internal.symbols.BitmapSymbol","__getBitmap",0x971e30c1,"openfl._internal.symbols.BitmapSymbol.__getBitmap","openfl/_internal/symbols/BitmapSymbol.hx",38,0x5876b9f1)
            	HX_STACK_THIS(this)
HXLINE(  38)		Bool _hx_tmp = ::openfl::IAssetCache_obj::hasBitmapData(::openfl::Assets_obj::cache,this->path);
HXDLIN(  38)		if (_hx_tmp) {
HXLINE(  40)			return ::openfl::IAssetCache_obj::getBitmapData(::openfl::Assets_obj::cache,this->path);
            		}
            		else {
HXLINE(  44)			HX_VARI(  ::lime::graphics::Image,source) = ::lime::Assets_obj::getImage(this->path,false);
HXLINE(  46)			Bool _hx_tmp1;
HXDLIN(  46)			Bool _hx_tmp2;
HXDLIN(  46)			Bool _hx_tmp3 = hx::IsNotNull( source );
HXDLIN(  46)			if (_hx_tmp3) {
HXLINE(  46)				_hx_tmp2 = hx::IsNotNull( this->alpha );
            			}
            			else {
HXLINE(  46)				_hx_tmp2 = false;
            			}
HXDLIN(  46)			if (_hx_tmp2) {
HXLINE(  46)				_hx_tmp1 = (this->alpha != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  46)				_hx_tmp1 = false;
            			}
HXDLIN(  46)			if (_hx_tmp1) {
HXLINE(  48)				HX_VARI(  ::lime::graphics::Image,alphaBitmapData) = ::lime::Assets_obj::getImage(this->alpha,false);
HXLINE(  49)				 ::lime::math::Rectangle _hx_tmp4 = alphaBitmapData->get_rect();
HXDLIN(  49)				source->copyChannel(alphaBitmapData,_hx_tmp4, ::lime::math::Vector2_obj::__new(null(),null()),::lime::graphics::ImageChannel_obj::RED_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
HXLINE(  52)				source->buffer->premultiplied = true;
            			}
HXLINE(  60)			HX_VARI(  ::openfl::display::BitmapData,bitmapData) = ::openfl::display::BitmapData_obj::fromImage(source,null());
HXLINE(  62)			::openfl::IAssetCache_obj::setBitmapData(::openfl::Assets_obj::cache,this->path,bitmapData);
HXLINE(  63)			return bitmapData;
            		}
HXLINE(  38)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapSymbol_obj,_hx___getBitmap,return )


BitmapSymbol_obj::BitmapSymbol_obj()
{
}

void BitmapSymbol_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapSymbol);
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(path,"path");
	 ::openfl::_internal::symbols::SWFSymbol_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BitmapSymbol_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(path,"path");
	 ::openfl::_internal::symbols::SWFSymbol_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BitmapSymbol_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { return hx::Val( path); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__getBitmap") ) { return hx::Val( _hx___getBitmap_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__createObject") ) { return hx::Val( _hx___createObject_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BitmapSymbol_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BitmapSymbol_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapSymbol_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(BitmapSymbol_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsString,(int)offsetof(BitmapSymbol_obj,path),HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BitmapSymbol_obj_sStaticStorageInfo = 0;
#endif

static ::String BitmapSymbol_obj_sMemberFields[] = {
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("__createObject","\xfb","\x41","\x55","\x58"),
	HX_HCSTRING("__getBitmap","\x05","\xe2","\x8e","\x9b"),
	::String(null()) };

static void BitmapSymbol_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapSymbol_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapSymbol_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapSymbol_obj::__mClass,"__mClass");
};

#endif

hx::Class BitmapSymbol_obj::__mClass;

void BitmapSymbol_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.symbols.BitmapSymbol","\x2a","\x85","\xe1","\x6a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BitmapSymbol_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapSymbol_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapSymbol_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapSymbol_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapSymbol_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapSymbol_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace symbols
