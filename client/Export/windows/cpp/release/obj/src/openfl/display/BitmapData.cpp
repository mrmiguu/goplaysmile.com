// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractBlendModeManager
#include <openfl/_internal/renderer/AbstractBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractShaderManager
#include <openfl/_internal/renderer/AbstractShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoBlendModeManager
#include <openfl/_internal/renderer/cairo/CairoBlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoMaskManager
#include <openfl/_internal/renderer/cairo/CairoMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_utils_PerlinNoise
#include <openfl/_internal/utils/PerlinNoise.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderData
#include <openfl/display/ShaderData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderInput_openfl_display_BitmapData
#include <openfl/display/ShaderInput_openfl_display_BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace display{

void BitmapData_obj::__construct(Int width,Int height,hx::Null< Bool >  __o_transparent,hx::Null< Int >  __o_fillColor){
Bool transparent = __o_transparent.Default(true);
Int fillColor = __o_fillColor.Default(-1);
            	HX_STACK_FRAME("openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",106,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(transparent,"transparent")
            	HX_STACK_ARG(fillColor,"fillColor")
HXLINE( 108)		this->transparent = transparent;
HXLINE( 115)		Bool _hx_tmp = (width < (int)0);
HXDLIN( 115)		if (_hx_tmp) {
HXLINE( 115)			width = (int)0;
            		}
            		else {
HXLINE( 115)			width = width;
            		}
HXLINE( 116)		Bool _hx_tmp1 = (height < (int)0);
HXDLIN( 116)		if (_hx_tmp1) {
HXLINE( 116)			height = (int)0;
            		}
            		else {
HXLINE( 116)			height = height;
            		}
HXLINE( 118)		this->width = width;
HXLINE( 119)		this->height = height;
HXLINE( 120)		this->rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,width,height);
HXLINE( 122)		Bool _hx_tmp2;
HXDLIN( 122)		if ((width > (int)0)) {
HXLINE( 122)			_hx_tmp2 = (height > (int)0);
            		}
            		else {
HXLINE( 122)			_hx_tmp2 = false;
            		}
HXDLIN( 122)		if (_hx_tmp2) {
HXLINE( 124)			if (transparent) {
HXLINE( 126)				Bool _hx_tmp3 = (((int)fillColor & (int)(int)-16777216) == (int)0);
HXDLIN( 126)				if (_hx_tmp3) {
HXLINE( 128)					fillColor = (int)0;
            				}
            			}
            			else {
HXLINE( 134)				fillColor = ((int)(int)-16777216 | (int)((int)fillColor & (int)(int)16777215));
            			}
HXLINE( 138)			fillColor = ((int)((int)fillColor << (int)(int)8) | (int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255));
HXLINE( 141)			HX_VARI(  ::Dynamic,elements) = ((width * height) * (int)4);
HXDLIN( 141)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 141)			Bool _hx_tmp4 = hx::IsNotNull( elements );
HXDLIN( 141)			if (_hx_tmp4) {
HXLINE( 141)				this1 =  ::lime::utils::ArrayBufferView_obj::__new(elements,(int)4);
            			}
            			else {
HXLINE( 141)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for UInt8Array",6b,44,d5,85));
            			}
HXDLIN( 141)			HX_VARI(  ::lime::graphics::ImageBuffer,buffer) =  ::lime::graphics::ImageBuffer_obj::__new(this1,width,height,null(),null());
HXLINE( 142)			buffer->format = (int)2;
HXLINE( 143)			buffer->premultiplied = true;
HXLINE( 145)			this->image =  ::lime::graphics::Image_obj::__new(buffer,(int)0,(int)0,width,height,null(),null());
HXLINE( 147)			if ((fillColor != (int)0)) {
HXLINE( 149)				 ::lime::math::Rectangle _hx_tmp5 = this->image->get_rect();
HXDLIN( 149)				this->image->fillRect(_hx_tmp5,fillColor,null());
            			}
HXLINE( 156)			this->image->set_transparent(transparent);
HXLINE( 158)			this->_hx___isValid = true;
HXLINE( 159)			this->readable = true;
            		}
HXLINE( 163)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 164)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(Int width,Int height,hx::Null< Bool >  __o_transparent,hx::Null< Int >  __o_fillColor)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(width,height,__o_transparent,__o_fillColor);
	return _hx_result;
}

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderGL,
	( void (hx::Object::*)(Bool))&::openfl::display::BitmapData_obj::_hx___updateChildren,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___updateTransforms,
	( void (hx::Object::*)( ::openfl::display::Graphics))&::openfl::display::BitmapData_obj::_hx___updateMask,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::filters::BitmapFilter filter){
            	HX_STACK_FRAME("openfl.display.BitmapData","applyFilter",0xfbb98d7b,"openfl.display.BitmapData.applyFilter","openfl/display/BitmapData.hx",169,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 171)		Bool _hx_tmp;
HXDLIN( 171)		Bool _hx_tmp1;
HXDLIN( 171)		if (!(!(this->readable))) {
HXLINE( 171)			_hx_tmp1 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 171)			_hx_tmp1 = true;
            		}
HXDLIN( 171)		if (!(_hx_tmp1)) {
HXLINE( 171)			_hx_tmp = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE( 171)			_hx_tmp = true;
            		}
HXDLIN( 171)		if (_hx_tmp) {
HXLINE( 171)			return;
            		}
HXLINE( 173)		filter->_hx___applyFilter(sourceBitmapData,hx::ObjectPtr<OBJ_>(this),sourceRect,destPoint);
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_STACK_FRAME("openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",180,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 180)		Bool _hx_tmp = !(this->_hx___isValid);
HXDLIN( 180)		if (_hx_tmp) {
HXLINE( 182)			return  ::openfl::display::BitmapData_obj::__new(this->width,this->height,this->transparent,(int)0);
            		}
            		else {
HXLINE( 184)			Bool _hx_tmp1;
HXDLIN( 184)			if (!(this->readable)) {
HXLINE( 184)				_hx_tmp1 = hx::IsNull( this->image );
            			}
            			else {
HXLINE( 184)				_hx_tmp1 = false;
            			}
HXDLIN( 184)			if (_hx_tmp1) {
HXLINE( 186)				HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,this->transparent,(int)0);
HXLINE( 188)				bitmapData->width = this->width;
HXLINE( 189)				bitmapData->height = this->height;
HXLINE( 190)				bitmapData->rect->copyFrom(this->rect);
HXLINE( 192)				bitmapData->_hx___framebuffer = this->_hx___framebuffer;
HXLINE( 193)				bitmapData->_hx___texture = this->_hx___texture;
HXLINE( 194)				bitmapData->_hx___isValid = true;
HXLINE( 196)				return bitmapData;
            			}
            			else {
HXLINE( 200)				 ::lime::graphics::Image _hx_tmp2 = this->image->clone();
HXDLIN( 200)				return ::openfl::display::BitmapData_obj::fromImage(_hx_tmp2,this->transparent);
            			}
            		}
HXLINE( 180)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACK_FRAME("openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",207,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorTransform,"colorTransform")
HXLINE( 209)		if (!(this->readable)) {
HXLINE( 209)			return;
            		}
HXLINE( 211)		 ::lime::math::Rectangle _hx_tmp = rect->_hx___toLimeRectangle();
HXDLIN( 211)		 ::lime::utils::ArrayBufferView _hx_tmp1 = colorTransform->_hx___toLimeColorMatrix();
HXDLIN( 211)		this->image->colorTransform(_hx_tmp,_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

 ::Dynamic BitmapData_obj::compare( ::openfl::display::BitmapData otherBitmapData){
            	HX_STACK_FRAME("openfl.display.BitmapData","compare",0x56d287da,"openfl.display.BitmapData.compare","openfl/display/BitmapData.hx",216,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(otherBitmapData,"otherBitmapData")
HXLINE( 218)		if (hx::IsEq( otherBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 220)			return (int)0;
            		}
            		else {
HXLINE( 222)			Bool _hx_tmp = hx::IsNull( otherBitmapData );
HXDLIN( 222)			if (_hx_tmp) {
HXLINE( 224)				return (int)-1;
            			}
            			else {
HXLINE( 226)				Bool _hx_tmp1;
HXDLIN( 226)				if ((this->readable != false)) {
HXLINE( 226)					_hx_tmp1 = (otherBitmapData->readable == false);
            				}
            				else {
HXLINE( 226)					_hx_tmp1 = true;
            				}
HXDLIN( 226)				if (_hx_tmp1) {
HXLINE( 228)					return (int)-2;
            				}
            				else {
HXLINE( 230)					if ((this->width != otherBitmapData->width)) {
HXLINE( 232)						return (int)-3;
            					}
            					else {
HXLINE( 234)						if ((this->height != otherBitmapData->height)) {
HXLINE( 236)							return (int)-4;
            						}
            					}
            				}
            			}
            		}
HXLINE( 240)		Bool _hx_tmp2;
HXDLIN( 240)		Bool _hx_tmp3;
HXDLIN( 240)		Bool _hx_tmp4 = hx::IsNotNull( this->image );
HXDLIN( 240)		if (_hx_tmp4) {
HXLINE( 240)			_hx_tmp3 = hx::IsNotNull( otherBitmapData->image );
            		}
            		else {
HXLINE( 240)			_hx_tmp3 = false;
            		}
HXDLIN( 240)		if (_hx_tmp3) {
HXLINE( 240)			Int _hx_tmp5 = this->image->get_format();
HXDLIN( 240)			Int _hx_tmp6 = otherBitmapData->image->get_format();
HXDLIN( 240)			_hx_tmp2 = (_hx_tmp5 == _hx_tmp6);
            		}
            		else {
HXLINE( 240)			_hx_tmp2 = false;
            		}
HXDLIN( 240)		if (_hx_tmp2) {
HXLINE( 242)			HX_VARI(  ::lime::utils::ArrayBufferView,bytes) = this->image->get_data();
HXLINE( 243)			HX_VARI(  ::lime::utils::ArrayBufferView,otherBytes) = otherBitmapData->image->get_data();
HXLINE( 244)			HX_VARI( Bool,equal) = true;
HXLINE( 246)			{
HXLINE( 246)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 246)				HX_VARI( Int,_g) = bytes->length;
HXDLIN( 246)				while((_g1 < _g)){
HXLINE( 246)					HX_VARI( Int,i) = _g1++;
HXLINE( 248)					Int byteOffset = (bytes->byteOffset + i);
HXDLIN( 248)					Int _hx_tmp7 = ::__hxcpp_memory_get_byte(bytes->buffer->b,byteOffset);
HXDLIN( 248)					Int a = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN( 248)					Int byteOffset1 = (otherBytes->byteOffset + i);
HXDLIN( 248)					Int _hx_tmp8 = ::__hxcpp_memory_get_byte(otherBytes->buffer->b,byteOffset1);
HXDLIN( 248)					if (hx::IsNotEq( a,((int)_hx_tmp8 & (int)(int)255) )) {
HXLINE( 250)						equal = false;
HXLINE( 251)						goto _hx_goto_0;
            					}
            				}
            				_hx_goto_0:;
            			}
HXLINE( 256)			if (equal) {
HXLINE( 258)				return (int)0;
            			}
            		}
HXLINE( 264)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) = null();
HXLINE( 265)		HX_VAR( Bool,foundDifference);
HXDLIN( 265)		HX_VAR( Int,pixel);
HXDLIN( 265)		HX_VAR( Int,otherPixel);
HXDLIN( 265)		HX_VAR( Int,comparePixel);
HXDLIN( 265)		HX_VAR( Int,r);
HXDLIN( 265)		HX_VAR( Int,g);
HXDLIN( 265)		HX_VAR( Int,b);
HXDLIN( 265)		HX_VAR_NAME( Int,a1,"a");
HXLINE( 267)		{
HXLINE( 267)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 267)			HX_VARI_NAME( Int,_g2,"_g") = this->height;
HXDLIN( 267)			while((_g11 < _g2)){
HXLINE( 267)				HX_VARI( Int,y) = _g11++;
HXLINE( 269)				{
HXLINE( 269)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 269)					HX_VARI_NAME( Int,_g21,"_g2") = this->width;
HXDLIN( 269)					while((_g3 < _g21)){
HXLINE( 269)						HX_VARI( Int,x) = _g3++;
HXLINE( 271)						foundDifference = false;
HXLINE( 273)						pixel = this->getPixel32(x,y);
HXLINE( 274)						otherPixel = otherBitmapData->getPixel32(x,y);
HXLINE( 275)						comparePixel = (int)0;
HXLINE( 277)						if ((pixel != otherPixel)) {
HXLINE( 279)							r = (((int)hx::UShr(pixel,(int)16) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)16) & (int)(int)255));
HXLINE( 280)							g = (((int)hx::UShr(pixel,(int)8) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)8) & (int)(int)255));
HXLINE( 281)							b = (((int)pixel & (int)(int)255) - ((int)otherPixel & (int)(int)255));
HXLINE( 283)							Bool _hx_tmp9 = (r < (int)0);
HXDLIN( 283)							if (_hx_tmp9) {
HXLINE( 283)								hx::MultEq(r,(int)-1);
            							}
HXLINE( 284)							Bool _hx_tmp10 = (g < (int)0);
HXDLIN( 284)							if (_hx_tmp10) {
HXLINE( 284)								hx::MultEq(g,(int)-1);
            							}
HXLINE( 285)							Bool _hx_tmp11 = (b < (int)0);
HXDLIN( 285)							if (_hx_tmp11) {
HXLINE( 285)								hx::MultEq(b,(int)-1);
            							}
HXLINE( 287)							Bool _hx_tmp12;
HXDLIN( 287)							Bool _hx_tmp13;
HXDLIN( 287)							if ((r == (int)0)) {
HXLINE( 287)								_hx_tmp13 = (g == (int)0);
            							}
            							else {
HXLINE( 287)								_hx_tmp13 = false;
            							}
HXDLIN( 287)							if (_hx_tmp13) {
HXLINE( 287)								_hx_tmp12 = (b == (int)0);
            							}
            							else {
HXLINE( 287)								_hx_tmp12 = false;
            							}
HXDLIN( 287)							if (_hx_tmp12) {
HXLINE( 289)								a1 = (((int)hx::UShr(pixel,(int)24) & (int)(int)255) - ((int)hx::UShr(otherPixel,(int)24) & (int)(int)255));
HXLINE( 291)								if ((a1 != (int)0)) {
HXLINE( 293)									comparePixel = (int)16711680;
HXLINE( 294)									comparePixel = (int)16776960;
HXLINE( 295)									comparePixel = (int)16777215;
HXLINE( 296)									comparePixel = ((int)((int)((int)((int)((int)a1 & (int)(int)255) << (int)(int)24) | (int)(int)16711680) | (int)(int)65280) | (int)(int)255);
HXLINE( 298)									foundDifference = true;
            								}
            							}
            							else {
HXLINE( 304)								comparePixel = ((int)((int)((int)(int)0 | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)(int)0) | (int)(int)0);
HXLINE( 305)								{
HXLINE( 305)									Int _hx_tmp14 = ((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8));
HXDLIN( 305)									Int _hx_tmp15 = ((int)((int)comparePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 305)									comparePixel = ((int)_hx_tmp14 | (int)_hx_tmp15);
            								}
HXLINE( 306)								{
HXLINE( 306)									Int _hx_tmp16 = ((int)((int)((int)((int)((int)hx::UShr(comparePixel,(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 306)									comparePixel = ((int)_hx_tmp16 | (int)((int)b & (int)(int)255));
            								}
HXLINE( 307)								{
HXLINE( 307)									Int _hx_tmp17 = ((int)((int)(int)-16777216 | (int)((int)((int)((int)hx::UShr(comparePixel,(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)hx::UShr(comparePixel,(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 307)									Int _hx_tmp18 = ((int)((int)comparePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 307)									comparePixel = ((int)_hx_tmp17 | (int)_hx_tmp18);
            								}
HXLINE( 309)								foundDifference = true;
            							}
            						}
HXLINE( 315)						if (foundDifference) {
HXLINE( 317)							Bool _hx_tmp19 = hx::IsNull( bitmapData );
HXDLIN( 317)							if (_hx_tmp19) {
HXLINE( 319)								Bool _hx_tmp20;
HXDLIN( 319)								if (!(this->transparent)) {
HXLINE( 319)									_hx_tmp20 = otherBitmapData->transparent;
            								}
            								else {
HXLINE( 319)									_hx_tmp20 = true;
            								}
HXDLIN( 319)								bitmapData =  ::openfl::display::BitmapData_obj::__new(this->width,this->height,_hx_tmp20,(int)0);
            							}
HXLINE( 323)							bitmapData->setPixel32(x,y,comparePixel);
            						}
            					}
            				}
            			}
            		}
HXLINE( 331)		Bool _hx_tmp21 = hx::IsNull( bitmapData );
HXDLIN( 331)		if (_hx_tmp21) {
HXLINE( 333)			return (int)0;
            		}
HXLINE( 337)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,compare,return )

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,Int sourceChannel,Int destChannel){
            	HX_STACK_FRAME("openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",342,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(sourceChannel,"sourceChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE( 344)		if (!(this->readable)) {
HXLINE( 344)			return;
            		}
HXLINE( 346)		HX_VAR_NAME( ::hx::EnumBase,sourceChannel1,"sourceChannel");
HXDLIN( 346)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 346)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 346)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 346)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 346)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 352)				return;
            			}
            		}
HXLINE( 356)		HX_VAR_NAME( ::hx::EnumBase,destChannel1,"destChannel");
HXDLIN( 356)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 356)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 356)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 356)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 356)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 362)				return;
            			}
            		}
HXLINE( 366)		 ::lime::math::Rectangle _hx_tmp = sourceRect->_hx___toLimeRectangle();
HXDLIN( 366)		 ::lime::math::Vector2 _hx_tmp1 = destPoint->_hx___toLimeVector2();
HXDLIN( 366)		this->image->copyChannel(sourceBitmapData->image,_hx_tmp,_hx_tmp1,sourceChannel1,destChannel1);
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,hx::Null< Bool >  __o_mergeAlpha){
Bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",371,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaBitmapData,"alphaBitmapData")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE( 373)		Bool _hx_tmp;
HXDLIN( 373)		if (!(!(this->readable))) {
HXLINE( 373)			_hx_tmp = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 373)			_hx_tmp = true;
            		}
HXDLIN( 373)		if (_hx_tmp) {
HXLINE( 373)			return;
            		}
HXLINE( 375)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 375)		 ::lime::math::Vector2 _hx_tmp2 = destPoint->_hx___toLimeVector2();
HXDLIN( 375)		 ::lime::graphics::Image _hx_tmp3;
HXDLIN( 375)		Bool _hx_tmp4 = hx::IsNotNull( alphaBitmapData );
HXDLIN( 375)		if (_hx_tmp4) {
HXLINE( 375)			_hx_tmp3 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 375)			_hx_tmp3 = null();
            		}
HXDLIN( 375)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 375)		Bool _hx_tmp6 = hx::IsNotNull( alphaPoint );
HXDLIN( 375)		if (_hx_tmp6) {
HXLINE( 375)			_hx_tmp5 = alphaPoint->_hx___toLimeVector2();
            		}
            		else {
HXLINE( 375)			_hx_tmp5 = null();
            		}
HXDLIN( 375)		this->image->copyPixels(sourceBitmapData->image,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp5,mergeAlpha);
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACK_FRAME("openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",380,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 382)		this->image = null();
HXLINE( 384)		this->width = (int)0;
HXLINE( 385)		this->height = (int)0;
HXLINE( 386)		this->rect = null();
HXLINE( 388)		this->_hx___isValid = false;
HXLINE( 389)		this->readable = false;
HXLINE( 391)		this->_hx___surface = null();
HXLINE( 393)		this->_hx___buffer = null();
HXLINE( 394)		this->_hx___framebuffer = null();
HXLINE( 395)		this->_hx___texture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::disposeImage(){
            	HX_STACK_FRAME("openfl.display.BitmapData","disposeImage",0x60a6bee7,"openfl.display.BitmapData.disposeImage","openfl/display/BitmapData.hx",422,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 422)		this->readable = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,disposeImage,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< Bool >  __o_smoothing){
Bool smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",427,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(colorTransform,"colorTransform")
            	HX_STACK_ARG(blendMode,"blendMode")
            	HX_STACK_ARG(clipRect,"clipRect")
            	HX_STACK_ARG(smoothing,"smoothing")
HXLINE( 429)		Bool _hx_tmp = hx::IsNull( matrix );
HXDLIN( 429)		if (_hx_tmp) {
HXLINE( 431)			matrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 433)			Bool _hx_tmp1 = hx::IsNotNull( ( ( ::openfl::geom::Matrix)(source->__Field(HX_("__transform",4c,76,bf,73),hx::paccDynamic)) ) );
HXDLIN( 433)			if (_hx_tmp1) {
HXLINE( 435)				matrix->copyFrom( ::Dynamic(source->__Field(HX_("__transform",4c,76,bf,73),hx::paccDynamic)));
HXLINE( 436)				matrix->tx = (int)0;
HXLINE( 437)				matrix->ty = (int)0;
            			}
            		}
HXLINE( 443)		Bool _hx_tmp2 = !(this->readable);
HXDLIN( 443)		if (_hx_tmp2) {
HXLINE( 445)			Bool _hx_tmp3 = hx::IsNotNull( ::lime::graphics::opengl::GL_obj::context );
HXDLIN( 445)			if (_hx_tmp3) {
HXLINE( 447)				HX_VARI(  ::lime::_backend::native::NativeGLRenderContext,gl) = ::lime::graphics::opengl::GL_obj::context;
HXLINE( 449)				Int _hx_tmp4 = gl->FRAMEBUFFER;
HXDLIN( 449)				 ::lime::graphics::opengl::GLFramebuffer _hx_tmp5 = this->_hx___getFramebuffer(gl);
HXDLIN( 449)				gl->bindFramebuffer(_hx_tmp4,_hx_tmp5);
HXLINE( 450)				gl->viewport((int)0,(int)0,this->width,this->height);
HXLINE( 452)				HX_VARI(  ::openfl::_internal::renderer::opengl::GLRenderer,renderer) =  ::openfl::_internal::renderer::opengl::GLRenderer_obj::__new(::openfl::Lib_obj::current->stage,gl,false);
HXLINE( 453)				renderer->resize(this->width,this->height);
HXLINE( 456)				renderer->renderSession->shaderManager = ::openfl::Lib_obj::current->stage->_hx___renderer->renderSession->shaderManager;
HXLINE( 458)				HX_VARI(  ::openfl::geom::Matrix,matrixCache) = ( ( ::openfl::geom::Matrix)(source->__Field(HX_("__worldTransform",da,a7,d8,9a),hx::paccDynamic)) );
HXLINE( 459)				::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrix);
HXLINE( 460)				::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,false);
HXLINE( 461)				::openfl::display::IBitmapDrawable_obj::_hx___renderGL(source,renderer->renderSession);
HXLINE( 462)				::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrixCache);
HXLINE( 463)				::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,true);
HXLINE( 465)				gl->bindFramebuffer(gl->FRAMEBUFFER,null());
            			}
            		}
            		else {
HXLINE( 539)			if (hx::IsEq( source,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 541)				source = this->clone();
            			}
HXLINE( 545)			Bool _hx_tmp6 = hx::IsNotNull( colorTransform );
HXDLIN( 545)			if (_hx_tmp6) {
HXLINE( 547)				 ::Dynamic _hx_tmp7 = ::Reflect_obj::getProperty(source,HX_("width",06,b6,62,ca));
HXDLIN( 547)				 ::Dynamic _hx_tmp8 = ::Reflect_obj::getProperty(source,HX_("height",e7,07,4c,02));
HXDLIN( 547)				HX_VARI(  ::openfl::display::BitmapData,copy) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp7,_hx_tmp8,true,(int)0);
HXLINE( 548)				copy->draw(source,null(),null(),null(),null(),null());
HXLINE( 549)				copy->colorTransform(copy->rect,colorTransform);
HXLINE( 550)				source = copy;
            			}
HXLINE( 554)			HX_VARI(  ::Dynamic,surface) = this->getSurface();
HXLINE( 555)			HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) =  ::lime::graphics::cairo::Cairo_obj::__new(surface);
HXLINE( 557)			if (!(smoothing)) {
HXLINE( 559)				cairo->set_antialias((int)1);
            			}
HXLINE( 563)			HX_VARI(  ::openfl::_internal::renderer::RenderSession,renderSession) =  ::openfl::_internal::renderer::RenderSession_obj::__new();
HXLINE( 564)			renderSession->cairo = cairo;
HXLINE( 565)			renderSession->allowSmoothing = smoothing;
HXLINE( 566)			renderSession->roundPixels = true;
HXLINE( 567)			renderSession->maskManager =  ::openfl::_internal::renderer::cairo::CairoMaskManager_obj::__new(renderSession);
HXLINE( 568)			renderSession->blendModeManager =  ::openfl::_internal::renderer::cairo::CairoBlendModeManager_obj::__new(renderSession);
HXLINE( 570)			Bool _hx_tmp9 = hx::IsNotNull( clipRect );
HXDLIN( 570)			if (_hx_tmp9) {
HXLINE( 572)				renderSession->maskManager->pushRect(clipRect, ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null()));
            			}
HXLINE( 576)			HX_VARI_NAME(  ::openfl::geom::Matrix,matrixCache1,"matrixCache") = ( ( ::openfl::geom::Matrix)(source->__Field(HX_("__worldTransform",da,a7,d8,9a),hx::paccDynamic)) );
HXLINE( 577)			::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrix);
HXLINE( 578)			::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,false);
HXLINE( 579)			::openfl::display::IBitmapDrawable_obj::_hx___renderCairo(source,renderSession);
HXLINE( 580)			::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrixCache1);
HXLINE( 581)			::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,true);
HXLINE( 583)			Bool _hx_tmp10 = hx::IsNotNull( clipRect );
HXDLIN( 583)			if (_hx_tmp10) {
HXLINE( 585)				renderSession->maskManager->popRect();
            			}
HXLINE( 589)			::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(surface);
HXLINE( 591)			this->image->dirty = true;
HXLINE( 592)			this->image->version++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

void BitmapData_obj::drawWithQuality(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< Bool >  __o_smoothing, ::Dynamic quality){
Bool smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","drawWithQuality",0xabf0f1ea,"openfl.display.BitmapData.drawWithQuality","openfl/display/BitmapData.hx",603,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(colorTransform,"colorTransform")
            	HX_STACK_ARG(blendMode,"blendMode")
            	HX_STACK_ARG(clipRect,"clipRect")
            	HX_STACK_ARG(smoothing,"smoothing")
            	HX_STACK_ARG(quality,"quality")
HXLINE( 603)		this->draw(source,matrix,colorTransform,blendMode,clipRect,smoothing);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,drawWithQuality,(void))

 ::openfl::utils::ByteArrayData BitmapData_obj::encode( ::openfl::geom::Rectangle rect, ::Dynamic compressor, ::openfl::utils::ByteArrayData byteArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","encode",0x09c32081,"openfl.display.BitmapData.encode","openfl/display/BitmapData.hx",608,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(compressor,"compressor")
            	HX_STACK_ARG(byteArray,"byteArray")
HXLINE( 610)		Bool _hx_tmp;
HXDLIN( 610)		if (!(!(this->readable))) {
HXLINE( 610)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 610)			_hx_tmp = true;
            		}
HXDLIN( 610)		if (_hx_tmp) {
HXLINE( 610)			byteArray = null();
HXDLIN( 610)			return byteArray;
            		}
HXLINE( 611)		Bool _hx_tmp1 = hx::IsNull( byteArray );
HXDLIN( 611)		if (_hx_tmp1) {
HXLINE( 611)			HX_VARI_NAME(  ::openfl::utils::ByteArrayData,this1,"this") =  ::openfl::utils::ByteArrayData_obj::__new((int)0);
HXDLIN( 611)			byteArray = this1;
            		}
HXLINE( 613)		HX_VARI(  ::lime::graphics::Image,image) = this->image;
HXLINE( 615)		Bool _hx_tmp2 = !(rect->equals(this->rect));
HXDLIN( 615)		if (_hx_tmp2) {
HXLINE( 617)			HX_VARI(  ::openfl::geom::Matrix,matrix) = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE( 618)			Int _hx_tmp3 = ::Math_obj::round(-(rect->x));
HXDLIN( 618)			Int _hx_tmp4 = ::Math_obj::round(-(rect->y));
HXDLIN( 618)			matrix->setTo((int)1,(int)0,(int)0,(int)1,_hx_tmp3,_hx_tmp4);
HXLINE( 620)			Int _hx_tmp5 = ::Math_obj::ceil(rect->width);
HXDLIN( 620)			Int _hx_tmp6 = ::Math_obj::ceil(rect->height);
HXDLIN( 620)			HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp5,_hx_tmp6,true,(int)0);
HXLINE( 621)			bitmapData->draw(hx::ObjectPtr<OBJ_>(this),matrix,null(),null(),null(),null());
HXLINE( 623)			image = bitmapData->image;
            		}
HXLINE( 627)		Bool _hx_tmp7 = ::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::PNGEncoderOptions >());
HXDLIN( 627)		if (_hx_tmp7) {
HXLINE( 629)			 ::haxe::io::Bytes _hx_tmp8 = image->encode(HX_("png",a9,5c,55,00),null());
HXDLIN( 629)			 ::openfl::utils::ByteArrayData _hx_tmp9 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp8);
HXDLIN( 629)			byteArray->writeBytes(_hx_tmp9,null(),null());
HXLINE( 630)			return byteArray;
            		}
            		else {
HXLINE( 632)			Bool _hx_tmp10 = ::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >());
HXDLIN( 632)			if (_hx_tmp10) {
HXLINE( 634)				 ::haxe::io::Bytes _hx_tmp11 = image->encode(HX_("jpg",e1,d0,50,00),hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressor)->quality);
HXDLIN( 634)				 ::openfl::utils::ByteArrayData _hx_tmp12 = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp11);
HXDLIN( 634)				byteArray->writeBytes(_hx_tmp12,null(),null());
HXLINE( 635)				return byteArray;
            			}
            		}
HXLINE( 639)		byteArray = null();
HXDLIN( 639)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",644,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(color,"color")
HXLINE( 646)		Bool _hx_tmp = hx::IsNull( rect );
HXDLIN( 646)		if (_hx_tmp) {
HXLINE( 646)			return;
            		}
HXLINE( 648)		Bool _hx_tmp1;
HXDLIN( 648)		if (this->transparent) {
HXLINE( 648)			_hx_tmp1 = (((int)color & (int)(int)-16777216) == (int)0);
            		}
            		else {
HXLINE( 648)			_hx_tmp1 = false;
            		}
HXDLIN( 648)		if (_hx_tmp1) {
HXLINE( 650)			color = (int)0;
            		}
HXLINE( 654)		Bool _hx_tmp2 = this->readable;
HXDLIN( 654)		if (_hx_tmp2) {
HXLINE( 656)			 ::lime::math::Rectangle _hx_tmp3 = rect->_hx___toLimeRectangle();
HXDLIN( 656)			this->image->fillRect(_hx_tmp3,color,(int)1);
            		}
            		else {
HXLINE( 658)			Bool _hx_tmp4 = hx::IsNotNull( this->_hx___framebuffer );
HXDLIN( 658)			if (_hx_tmp4) {
HXLINE( 660)				HX_VARI(  ::lime::_backend::native::NativeGLRenderContext,gl) = ::lime::graphics::opengl::GL_obj::context;
HXLINE( 661)				HX_VARI_NAME( Int,color1,"color") = color;
HXLINE( 662)				HX_VARI( Bool,useScissor) = !(this->rect->equals(rect));
HXLINE( 664)				gl->bindFramebuffer(gl->FRAMEBUFFER,this->_hx___framebuffer);
HXLINE( 666)				if (useScissor) {
HXLINE( 668)					gl->enable(gl->SCISSOR_TEST);
HXLINE( 669)					Int _hx_tmp5 = ::Math_obj::round(rect->x);
HXDLIN( 669)					Int _hx_tmp6 = ::Math_obj::round(rect->y);
HXDLIN( 669)					Int _hx_tmp7 = ::Math_obj::round(rect->width);
HXDLIN( 669)					Int _hx_tmp8 = ::Math_obj::round(rect->height);
HXDLIN( 669)					gl->scissor(_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8);
            				}
HXLINE( 673)				gl->clearColor(((Float)((int)hx::UShr(color1,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color1,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color1 & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color1,(int)24) & (int)(int)255) / (Float)(int)255));
HXLINE( 674)				gl->clear(gl->COLOR_BUFFER_BIT);
HXLINE( 676)				if (useScissor) {
HXLINE( 678)					gl->disable(gl->SCISSOR_TEST);
            				}
HXLINE( 682)				gl->bindFramebuffer(gl->FRAMEBUFFER,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::floodFill(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","floodFill",0xed95e9d6,"openfl.display.BitmapData.floodFill","openfl/display/BitmapData.hx",689,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE( 691)		if (!(this->readable)) {
HXLINE( 691)			return;
            		}
HXLINE( 692)		this->image->floodFill(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::geom::Rectangle sourceRect, ::openfl::filters::BitmapFilter filter){
            	HX_STACK_FRAME("openfl.display.BitmapData","generateFilterRect",0x1ef8cf7c,"openfl.display.BitmapData.generateFilterRect","openfl/display/BitmapData.hx",765,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 765)		return sourceRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::lime::graphics::opengl::GLBuffer BitmapData_obj::getBuffer( ::lime::_backend::native::NativeGLRenderContext gl,Float alpha){
            	HX_STACK_FRAME("openfl.display.BitmapData","getBuffer",0xe0f6acab,"openfl.display.BitmapData.getBuffer","openfl/display/BitmapData.hx",770,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 772)		Bool _hx_tmp = hx::IsNull( this->_hx___buffer );
HXDLIN( 772)		if (_hx_tmp) {
HXLINE( 801)			HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::__new(24)->init(0,this->width)->init(1,this->height)->init(2,(int)0)->init(3,(int)1)->init(4,(int)1)->init(5,alpha)->init(6,(int)0)->init(7,this->height)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,alpha)->init(12,this->width)->init(13,(int)0)->init(14,(int)0)->init(15,(int)1)->init(16,(int)0)->init(17,alpha)->init(18,(int)0)->init(19,(int)0)->init(20,(int)0)->init(21,(int)0)->init(22,(int)0)->init(23,alpha);
HXDLIN( 801)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 801)			Bool _hx_tmp1 = hx::IsNotNull( array );
HXDLIN( 801)			if (_hx_tmp1) {
HXLINE( 801)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 801)				_this->byteOffset = (int)0;
HXDLIN( 801)				_this->length = array->get_length();
HXDLIN( 801)				Int _hx_tmp2 = (_this->length * _this->bytesPerElement);
HXDLIN( 801)				_this->byteLength = _hx_tmp2;
HXDLIN( 801)				Int byteLength = _this->byteLength;
HXDLIN( 801)				HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 801)				_this->buffer = this2;
HXDLIN( 801)				_this->copyFromArray(array,null());
HXDLIN( 801)				this1 = _this;
            			}
            			else {
HXLINE( 801)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 801)			this->_hx___bufferData = this1;
HXLINE( 810)			this->_hx___bufferAlpha = alpha;
HXLINE( 811)			this->_hx___buffer = gl->createBuffer();
HXLINE( 813)			gl->bindBuffer(gl->ARRAY_BUFFER,this->_hx___buffer);
HXLINE( 814)			gl->bufferData(gl->ARRAY_BUFFER,this->_hx___bufferData,gl->STATIC_DRAW);
            		}
            		else {
HXLINE( 817)			Bool _hx_tmp3 = (this->_hx___bufferAlpha != alpha);
HXDLIN( 817)			if (_hx_tmp3) {
HXLINE( 819)				{
HXLINE( 819)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = this->_hx___bufferData;
HXDLIN( 819)					{
HXLINE( 819)						Int byteOffset = (this3->byteOffset + (int)20);
HXDLIN( 819)						::__hxcpp_memory_set_float(this3->buffer->b,byteOffset,alpha);
            					}
            				}
HXLINE( 820)				{
HXLINE( 820)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this4,"this") = this->_hx___bufferData;
HXDLIN( 820)					{
HXLINE( 820)						Int byteOffset1 = (this4->byteOffset + (int)44);
HXDLIN( 820)						::__hxcpp_memory_set_float(this4->buffer->b,byteOffset1,alpha);
            					}
            				}
HXLINE( 821)				{
HXLINE( 821)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this5,"this") = this->_hx___bufferData;
HXDLIN( 821)					{
HXLINE( 821)						Int byteOffset2 = (this5->byteOffset + (int)68);
HXDLIN( 821)						::__hxcpp_memory_set_float(this5->buffer->b,byteOffset2,alpha);
            					}
            				}
HXLINE( 822)				{
HXLINE( 822)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this6,"this") = this->_hx___bufferData;
HXDLIN( 822)					{
HXLINE( 822)						Int byteOffset3 = (this6->byteOffset + (int)92);
HXDLIN( 822)						::__hxcpp_memory_set_float(this6->buffer->b,byteOffset3,alpha);
            					}
            				}
HXLINE( 823)				this->_hx___bufferAlpha = alpha;
HXLINE( 825)				gl->bindBuffer(gl->ARRAY_BUFFER,this->_hx___buffer);
HXLINE( 826)				gl->bufferData(gl->ARRAY_BUFFER,this->_hx___bufferData,gl->STATIC_DRAW);
            			}
            		}
HXLINE( 830)		return this->_hx___buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getBuffer,return )

 ::openfl::geom::Rectangle BitmapData_obj::getColorBoundsRect(Int mask,Int color,hx::Null< Bool >  __o_findColor){
Bool findColor = __o_findColor.Default(true);
            	HX_STACK_FRAME("openfl.display.BitmapData","getColorBoundsRect",0x21495071,"openfl.display.BitmapData.getColorBoundsRect","openfl/display/BitmapData.hx",835,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(findColor,"findColor")
HXLINE( 837)		if (!(this->readable)) {
HXLINE( 837)			return  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,this->width,this->height);
            		}
HXLINE( 839)		Bool _hx_tmp;
HXDLIN( 839)		if (!(!(this->transparent))) {
HXLINE( 839)			_hx_tmp = (((int)((int)mask >> (int)(int)24) & (int)(int)255) > (int)0);
            		}
            		else {
HXLINE( 839)			_hx_tmp = true;
            		}
HXDLIN( 839)		if (_hx_tmp) {
HXLINE( 841)			HX_VARI_NAME( Int,color1,"color") = color;
HXLINE( 842)			Bool _hx_tmp1 = (((int)hx::UShr(color1,(int)24) & (int)(int)255) == (int)0);
HXDLIN( 842)			if (_hx_tmp1) {
HXLINE( 842)				color1 = (int)0;
            			}
            		}
HXLINE( 846)		HX_VARI(  ::lime::math::Rectangle,rect) = this->image->getColorBoundsRect(mask,color,findColor,(int)1);
HXLINE( 847)		return  ::openfl::geom::Rectangle_obj::__new(rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

Int BitmapData_obj::getPixel(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixel",0x4b52b53b,"openfl.display.BitmapData.getPixel","openfl/display/BitmapData.hx",852,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 854)		if (!(this->readable)) {
HXLINE( 854)			return (int)0;
            		}
HXLINE( 855)		return this->image->getPixel(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

Int BitmapData_obj::getPixel32(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",860,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 862)		if (!(this->readable)) {
HXLINE( 862)			return (int)0;
            		}
HXLINE( 863)		return this->image->getPixel32(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::utils::ByteArrayData BitmapData_obj::getPixels( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixels",0x9d0bded8,"openfl.display.BitmapData.getPixels","openfl/display/BitmapData.hx",868,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 870)		if (!(this->readable)) {
HXLINE( 870)			return null();
            		}
HXLINE( 871)		Bool _hx_tmp = hx::IsNull( rect );
HXDLIN( 871)		if (_hx_tmp) {
HXLINE( 871)			rect = this->rect;
            		}
HXLINE( 872)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 872)		 ::haxe::io::Bytes _hx_tmp2 = this->image->getPixels(_hx_tmp1,(int)1);
HXDLIN( 872)		return ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACK_FRAME("openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",877,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 879)		if (!(this->readable)) {
HXLINE( 879)			return null();
            		}
HXLINE( 881)		Bool _hx_tmp = hx::IsNull( this->_hx___surface );
HXDLIN( 881)		if (_hx_tmp) {
HXLINE( 883)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE( 887)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::lime::graphics::opengl::GLTexture BitmapData_obj::getTexture( ::lime::_backend::native::NativeGLRenderContext gl){
            	HX_STACK_FRAME("openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",892,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE( 894)		if (!(this->_hx___isValid)) {
HXLINE( 894)			return null();
            		}
HXLINE( 896)		Bool _hx_tmp = hx::IsNull( this->_hx___texture );
HXDLIN( 896)		if (_hx_tmp) {
HXLINE( 898)			this->_hx___texture = gl->createTexture();
HXLINE( 899)			gl->bindTexture(gl->TEXTURE_2D,this->_hx___texture);
HXLINE( 900)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_S,gl->CLAMP_TO_EDGE);
HXLINE( 901)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_WRAP_T,gl->CLAMP_TO_EDGE);
HXLINE( 902)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MAG_FILTER,gl->NEAREST);
HXLINE( 903)			gl->texParameteri(gl->TEXTURE_2D,gl->TEXTURE_MIN_FILTER,gl->NEAREST);
HXLINE( 904)			this->_hx___textureVersion = (int)-1;
            		}
HXLINE( 912)		Bool _hx_tmp1;
HXDLIN( 912)		Bool _hx_tmp2 = hx::IsNotNull( this->image );
HXDLIN( 912)		if (_hx_tmp2) {
HXLINE( 912)			_hx_tmp1 = (this->image->version != this->_hx___textureVersion);
            		}
            		else {
HXLINE( 912)			_hx_tmp1 = false;
            		}
HXDLIN( 912)		if (_hx_tmp1) {
HXLINE( 914)			HX_VAR( Int,internalFormat);
HXDLIN( 914)			HX_VAR( Int,format);
HXLINE( 916)			Bool _hx_tmp3 = hx::IsNotNull( this->_hx___surface );
HXDLIN( 916)			if (_hx_tmp3) {
HXLINE( 918)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE( 922)			Bool _hx_tmp4 = (this->image->buffer->bitsPerPixel == (int)1);
HXDLIN( 922)			if (_hx_tmp4) {
HXLINE( 924)				internalFormat = gl->ALPHA;
HXLINE( 925)				format = gl->ALPHA;
            			}
            			else {
HXLINE( 941)				Bool _hx_tmp5 = hx::IsNull( ::openfl::display::BitmapData_obj::_hx___isGLES );
HXDLIN( 941)				if (_hx_tmp5) {
HXLINE( 943)					HX_VARI( ::String,version) = ( (::String)(gl->getParameter(gl->VERSION)) );
HXLINE( 944)					Bool _hx_tmp6;
HXDLIN( 944)					Int _hx_tmp7 = version.indexOf(HX_("OpenGL ES",5f,cb,92,95),null());
HXDLIN( 944)					if ((_hx_tmp7 > (int)-1)) {
HXLINE( 944)						Int _hx_tmp8 = version.indexOf(HX_("WebGL",99,9f,e9,5a),null());
HXDLIN( 944)						_hx_tmp6 = (_hx_tmp8 == (int)-1);
            					}
            					else {
HXLINE( 944)						_hx_tmp6 = false;
            					}
HXDLIN( 944)					::openfl::display::BitmapData_obj::_hx___isGLES = _hx_tmp6;
            				}
HXLINE( 948)				if (::openfl::display::BitmapData_obj::_hx___isGLES) {
HXLINE( 948)					internalFormat = gl->BGRA_EXT;
            				}
            				else {
HXLINE( 948)					internalFormat = gl->RGBA;
            				}
HXLINE( 949)				format = gl->BGRA_EXT;
            			}
HXLINE( 955)			gl->bindTexture(gl->TEXTURE_2D,this->_hx___texture);
HXLINE( 957)			HX_VARI(  ::lime::graphics::Image,textureImage) = this->image;
HXLINE( 999)			Bool _hx_tmp9;
HXDLIN( 999)			Bool _hx_tmp10 = !(textureImage->get_premultiplied());
HXDLIN( 999)			if (_hx_tmp10) {
HXLINE( 999)				_hx_tmp9 = textureImage->get_transparent();
            			}
            			else {
HXLINE( 999)				_hx_tmp9 = false;
            			}
HXDLIN( 999)			if (_hx_tmp9) {
HXLINE(1001)				textureImage = textureImage->clone();
HXLINE(1002)				textureImage->set_premultiplied(true);
            			}
HXLINE(1009)			Int _hx_tmp11 = gl->TEXTURE_2D;
HXDLIN(1009)			Int _hx_tmp12 = textureImage->buffer->width;
HXDLIN(1009)			Int _hx_tmp13 = textureImage->buffer->height;
HXDLIN(1009)			Int _hx_tmp14 = gl->UNSIGNED_BYTE;
HXDLIN(1009)			 ::lime::utils::ArrayBufferView _hx_tmp15 = textureImage->get_data();
HXDLIN(1009)			gl->texImage2D(_hx_tmp11,(int)0,internalFormat,_hx_tmp12,_hx_tmp13,(int)0,format,_hx_tmp14,_hx_tmp15);
HXLINE(1013)			gl->bindTexture(gl->TEXTURE_2D,null());
HXLINE(1014)			this->_hx___textureVersion = this->image->version;
            		}
HXLINE(1018)		Bool _hx_tmp16;
HXDLIN(1018)		if (!(this->readable)) {
HXLINE(1018)			_hx_tmp16 = hx::IsNotNull( this->image );
            		}
            		else {
HXLINE(1018)			_hx_tmp16 = false;
            		}
HXDLIN(1018)		if (_hx_tmp16) {
HXLINE(1020)			this->_hx___surface = null();
HXLINE(1021)			this->image = null();
            		}
HXLINE(1025)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

 ::openfl::_Vector::IntVector BitmapData_obj::getVector( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.display.BitmapData","getVector",0xa7bfa06e,"openfl.display.BitmapData.getVector","openfl/display/BitmapData.hx",1030,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE(1032)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(rect);
HXLINE(1033)		HX_VARI( Int,length) = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels) / (Float)(int)4));
HXLINE(1034)		HX_VARI(  ::openfl::_Vector::IntVector,result) =  ::openfl::_Vector::IntVector_obj::__new(length,true,null());
HXLINE(1036)		{
HXLINE(1036)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1036)			while((_g1 < length)){
HXLINE(1036)				HX_VARI( Int,i) = _g1++;
HXLINE(1038)				{
HXLINE(1038)					Int value = pixels->readUnsignedInt();
HXDLIN(1038)					result->set(i,value);
            				}
            			}
            		}
HXLINE(1042)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

::Array< ::Dynamic> BitmapData_obj::histogram( ::openfl::geom::Rectangle hRect){
            	HX_STACK_FRAME("openfl.display.BitmapData","histogram",0xf93f4519,"openfl.display.BitmapData.histogram","openfl/display/BitmapData.hx",1047,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(hRect,"hRect")
HXLINE(1049)		HX_VAR(  ::openfl::geom::Rectangle,rect);
HXDLIN(1049)		Bool _hx_tmp = hx::IsNotNull( hRect );
HXDLIN(1049)		if (_hx_tmp) {
HXLINE(1049)			rect = hRect;
            		}
            		else {
HXLINE(1049)			rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,this->width,this->height);
            		}
HXLINE(1050)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(rect);
HXLINE(1051)		HX_VARI( ::Array< ::Dynamic>,_g) = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1051)		{
HXLINE(1051)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1051)			while((_g1 < (int)4)){
HXLINE(1051)				++_g1;
HXDLIN(1051)				HX_VARI( ::Array< Int >,_g2) = ::Array_obj< Int >::__new(0);
HXDLIN(1051)				{
HXLINE(1051)					HX_VARI( Int,_g3) = (int)0;
HXDLIN(1051)					while((_g3 < (int)256)){
HXLINE(1051)						++_g3;
HXDLIN(1051)						_g2->push((int)0);
            					}
            				}
HXDLIN(1051)				_g->push(_g2);
            			}
            		}
HXLINE(1053)		{
HXLINE(1053)			HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN(1053)			HX_VARI_NAME( Int,_g11,"_g1") = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN(1053)			while((_g21 < _g11)){
HXLINE(1053)				HX_VARI( Int,i) = _g21++;
HXLINE(1055)				::Array< Int > _hx_tmp1 = _g->__get(hx::Mod(i,(int)4)).StaticCast< ::Array< Int > >();
HXDLIN(1055)				Int _hx_tmp2 = pixels->readUnsignedByte();
HXDLIN(1055)				++_hx_tmp1[_hx_tmp2];
            			}
            		}
HXLINE(1059)		return _g;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,histogram,return )

Bool BitmapData_obj::hitTest( ::openfl::geom::Point firstPoint,Int firstAlphaThreshold, ::Dynamic secondObject, ::openfl::geom::Point secondBitmapDataPoint,hx::Null< Int >  __o_secondAlphaThreshold){
Int secondAlphaThreshold = __o_secondAlphaThreshold.Default(1);
            	HX_STACK_FRAME("openfl.display.BitmapData","hitTest",0xb5e8cf7a,"openfl.display.BitmapData.hitTest","openfl/display/BitmapData.hx",1064,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(firstPoint,"firstPoint")
            	HX_STACK_ARG(firstAlphaThreshold,"firstAlphaThreshold")
            	HX_STACK_ARG(secondObject,"secondObject")
            	HX_STACK_ARG(secondBitmapDataPoint,"secondBitmapDataPoint")
            	HX_STACK_ARG(secondAlphaThreshold,"secondAlphaThreshold")
HXLINE(1066)		if (!(this->readable)) {
HXLINE(1066)			return false;
            		}
HXLINE(1068)		Bool _hx_tmp = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::Bitmap >());
HXDLIN(1068)		if (_hx_tmp) {
HXLINE(1070)			secondObject = hx::TCast<  ::openfl::display::Bitmap >::cast(secondObject)->bitmapData;
            		}
HXLINE(1074)		Bool _hx_tmp1 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Point >());
HXDLIN(1074)		if (_hx_tmp1) {
HXLINE(1076)			HX_VARI(  ::openfl::geom::Point,secondPoint) = ( ( ::openfl::geom::Point)(secondObject) );
HXLINE(1078)			Float _hx_tmp2 = (secondPoint->x - firstPoint->x);
HXDLIN(1078)			HX_VARI( Int,x) = ::Std_obj::_hx_int(_hx_tmp2);
HXLINE(1079)			Float _hx_tmp3 = (secondPoint->y - firstPoint->y);
HXDLIN(1079)			HX_VARI( Int,y) = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE(1081)			Bool _hx_tmp4 = this->rect->contains(x,y);
HXDLIN(1081)			if (_hx_tmp4) {
HXLINE(1083)				HX_VARI( Int,pixel) = this->getPixel32(x,y);
HXLINE(1085)				if ((((int)((int)pixel >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE(1087)					return true;
            				}
            			}
            		}
            		else {
HXLINE(1093)			Bool _hx_tmp5 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::BitmapData >());
HXDLIN(1093)			if (_hx_tmp5) {
HXLINE(1095)				HX_VARI(  ::openfl::display::BitmapData,secondBitmapData) = ( ( ::openfl::display::BitmapData)(secondObject) );
HXLINE(1096)				HX_VAR_NAME( Int,x1,"x");
HXDLIN(1096)				HX_VAR_NAME( Int,y1,"y");
HXLINE(1098)				Bool _hx_tmp6 = hx::IsNull( secondBitmapDataPoint );
HXDLIN(1098)				if (_hx_tmp6) {
HXLINE(1100)					x1 = (int)0;
HXLINE(1101)					y1 = (int)0;
            				}
            				else {
HXLINE(1105)					Float _hx_tmp7 = (secondBitmapDataPoint->x - firstPoint->x);
HXDLIN(1105)					x1 = ::Std_obj::_hx_int(_hx_tmp7);
HXLINE(1106)					Float _hx_tmp8 = (secondBitmapDataPoint->y - firstPoint->y);
HXDLIN(1106)					y1 = ::Std_obj::_hx_int(_hx_tmp8);
            				}
HXLINE(1110)				Bool _hx_tmp9 = this->rect->contains(x1,y1);
HXDLIN(1110)				if (_hx_tmp9) {
HXLINE(1112)					HX_VARI(  ::openfl::geom::Rectangle,hitRect) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE(1113)					Int _hx_tmp10 = secondBitmapData->width;
HXDLIN(1113)					Int _hx_tmp11 = (this->width - x1);
HXDLIN(1113)					Float _hx_tmp12 = ::Math_obj::min(_hx_tmp10,_hx_tmp11);
HXDLIN(1113)					Int _hx_tmp13 = secondBitmapData->height;
HXDLIN(1113)					Int _hx_tmp14 = (this->height - y1);
HXDLIN(1113)					Float _hx_tmp15 = ::Math_obj::min(_hx_tmp13,_hx_tmp14);
HXDLIN(1113)					hitRect->setTo(x1,y1,_hx_tmp12,_hx_tmp15);
HXLINE(1115)					HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(hitRect);
HXLINE(1117)					hitRect->offset(-(x1),-(y1));
HXLINE(1118)					HX_VARI(  ::openfl::utils::ByteArrayData,testPixels) = secondBitmapData->getPixels(hitRect);
HXLINE(1120)					Float _hx_tmp16 = (hitRect->width * hitRect->height);
HXDLIN(1120)					HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp16);
HXLINE(1121)					HX_VAR_NAME( Int,pixel1,"pixel");
HXDLIN(1121)					HX_VAR( Int,testPixel);
HXLINE(1123)					{
HXLINE(1123)						HX_VARI( Int,_g1) = (int)0;
HXDLIN(1123)						while((_g1 < length)){
HXLINE(1123)							++_g1;
HXLINE(1125)							pixel1 = pixels->readUnsignedInt();
HXLINE(1126)							testPixel = testPixels->readUnsignedInt();
HXLINE(1128)							Bool _hx_tmp17;
HXDLIN(1128)							if ((((int)((int)pixel1 >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE(1128)								_hx_tmp17 = (((int)((int)testPixel >> (int)(int)24) & (int)(int)255) >= secondAlphaThreshold);
            							}
            							else {
HXLINE(1128)								_hx_tmp17 = false;
            							}
HXDLIN(1128)							if (_hx_tmp17) {
HXLINE(1130)								return true;
            							}
            						}
            					}
HXLINE(1136)					return false;
            				}
            			}
            			else {
HXLINE(1140)				Bool _hx_tmp18 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Rectangle >());
HXDLIN(1140)				if (_hx_tmp18) {
HXLINE(1142)					HX_VARI(  ::openfl::geom::Rectangle,secondRectangle) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE(1143)					secondRectangle->copyFrom(( ( ::openfl::geom::Rectangle)(secondObject) ));
HXLINE(1144)					secondRectangle->offset(-(firstPoint->x),-(firstPoint->y));
HXLINE(1145)					secondRectangle->_hx___contract((int)0,(int)0,this->width,this->height);
HXLINE(1147)					Bool _hx_tmp19;
HXDLIN(1147)					if ((secondRectangle->width > (int)0)) {
HXLINE(1147)						_hx_tmp19 = (secondRectangle->height > (int)0);
            					}
            					else {
HXLINE(1147)						_hx_tmp19 = false;
            					}
HXDLIN(1147)					if (_hx_tmp19) {
HXLINE(1149)						HX_VARI_NAME(  ::openfl::utils::ByteArrayData,pixels1,"pixels") = this->getPixels(secondRectangle);
HXLINE(1150)						HX_VARI_NAME( Int,length1,"length") = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels1) / (Float)(int)4));
HXLINE(1151)						HX_VAR_NAME( Int,pixel2,"pixel");
HXLINE(1153)						{
HXLINE(1153)							HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN(1153)							while((_g11 < length1)){
HXLINE(1153)								++_g11;
HXLINE(1155)								pixel2 = pixels1->readUnsignedInt();
HXLINE(1157)								if ((((int)((int)pixel2 >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE(1159)									return true;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(1169)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,hitTest,return )

void BitmapData_obj::lock(){
            	HX_STACK_FRAME("openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",1215,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,Int redMultiplier,Int greenMultiplier,Int blueMultiplier,Int alphaMultiplier){
            	HX_STACK_FRAME("openfl.display.BitmapData","merge",0xa7b66aad,"openfl.display.BitmapData.merge","openfl/display/BitmapData.hx",1222,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE(1224)		Bool _hx_tmp;
HXDLIN(1224)		Bool _hx_tmp1;
HXDLIN(1224)		Bool _hx_tmp2;
HXDLIN(1224)		Bool _hx_tmp3;
HXDLIN(1224)		if (!(!(this->readable))) {
HXLINE(1224)			_hx_tmp3 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE(1224)			_hx_tmp3 = true;
            		}
HXDLIN(1224)		if (!(_hx_tmp3)) {
HXLINE(1224)			_hx_tmp2 = !(sourceBitmapData->readable);
            		}
            		else {
HXLINE(1224)			_hx_tmp2 = true;
            		}
HXDLIN(1224)		if (!(_hx_tmp2)) {
HXLINE(1224)			_hx_tmp1 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1224)			_hx_tmp1 = true;
            		}
HXDLIN(1224)		if (!(_hx_tmp1)) {
HXLINE(1224)			_hx_tmp = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(1224)			_hx_tmp = true;
            		}
HXDLIN(1224)		if (_hx_tmp) {
HXLINE(1224)			return;
            		}
HXLINE(1225)		 ::lime::math::Rectangle _hx_tmp4 = sourceRect->_hx___toLimeRectangle();
HXDLIN(1225)		 ::lime::math::Vector2 _hx_tmp5 = destPoint->_hx___toLimeVector2();
HXDLIN(1225)		this->image->merge(sourceBitmapData->image,_hx_tmp4,_hx_tmp5,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::noise(Int randomSeed,hx::Null< Int >  __o_low,hx::Null< Int >  __o_high,hx::Null< Int >  __o_channelOptions,hx::Null< Bool >  __o_grayScale){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,randomSeed1) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",1237,0xdd12d5b9)
HXLINE(1238)			Int _hx_tmp = (randomSeed1->__get((int)0) * (int)1103515245);
HXDLIN(1238)			randomSeed1[(int)0] = (_hx_tmp + (int)12345);
HXLINE(1239)			Float _hx_tmp1 = ((Float)randomSeed1->__get((int)0) / (Float)(int)65536);
HXDLIN(1239)			Float _hx_tmp2 = ::Math_obj::abs(_hx_tmp1);
HXDLIN(1239)			Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN(1239)			return hx::Mod(_hx_tmp3,(int)32768);
            		}
            		HX_END_LOCAL_FUNC0(return)

Int low = __o_low.Default(0);
Int high = __o_high.Default(255);
Int channelOptions = __o_channelOptions.Default(7);
Bool grayScale = __o_grayScale.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",1230,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(randomSeed,"randomSeed")
            	HX_STACK_ARG(low,"low")
            	HX_STACK_ARG(high,"high")
            	HX_STACK_ARG(channelOptions,"channelOptions")
            	HX_STACK_ARG(grayScale,"grayScale")
HXLINE(1230)		HX_VARI_NAME( ::Array< Int >,randomSeed1,"randomSeed") = ::Array_obj< Int >::__new(1)->init(0,randomSeed);
HXLINE(1232)		if (!(this->readable)) {
HXLINE(1232)			return;
            		}
HXLINE(1236)		HX_VARI(  ::Dynamic,func) =  ::Dynamic(new _hx_Closure_0(randomSeed1));
HXLINE(1242)		func();
HXLINE(1245)		HX_VARI( Int,range) = (high - low);
HXLINE(1246)		 ::openfl::utils::ByteArrayData_obj::__new((int)0);
HXLINE(1248)		HX_VARI( Bool,redChannel) = (((int)channelOptions & (int)(int)1) == (int)1);
HXLINE(1249)		HX_VARI( Bool,greenChannel) = (((int)((int)channelOptions & (int)(int)2) >> (int)(int)1) == (int)1);
HXLINE(1250)		HX_VARI( Bool,blueChannel) = (((int)((int)channelOptions & (int)(int)4) >> (int)(int)2) == (int)1);
HXLINE(1251)		HX_VARI( Bool,alphaChannel) = (((int)((int)channelOptions & (int)(int)8) >> (int)(int)3) == (int)1);
HXLINE(1253)		{
HXLINE(1253)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1253)			HX_VARI( Int,_g) = this->height;
HXDLIN(1253)			while((_g1 < _g)){
HXLINE(1253)				HX_VARI( Int,y) = _g1++;
HXLINE(1255)				{
HXLINE(1255)					HX_VARI( Int,_g3) = (int)0;
HXDLIN(1255)					HX_VARI( Int,_g2) = this->width;
HXDLIN(1255)					while((_g3 < _g2)){
HXLINE(1255)						HX_VARI( Int,x) = _g3++;
HXLINE(1258)						HX_VARI( Int,red) = (int)0;
HXLINE(1259)						HX_VARI( Int,blue) = (int)0;
HXLINE(1260)						HX_VARI( Int,green) = (int)0;
HXLINE(1261)						HX_VARI( Int,alpha) = (int)255;
HXLINE(1263)						if (grayScale) {
HXLINE(1265)							Int _hx_tmp4 = ( (Int)(func()) );
HXDLIN(1265)							blue = (low + hx::Mod(_hx_tmp4,range));
HXDLIN(1265)							green = blue;
HXDLIN(1265)							red = green;
HXLINE(1266)							alpha = (int)255;
            						}
            						else {
HXLINE(1270)							if (redChannel) {
HXLINE(1270)								Int _hx_tmp5 = ( (Int)(func()) );
HXDLIN(1270)								red = (low + hx::Mod(_hx_tmp5,range));
            							}
HXLINE(1271)							if (greenChannel) {
HXLINE(1271)								Int _hx_tmp6 = ( (Int)(func()) );
HXDLIN(1271)								green = (low + hx::Mod(_hx_tmp6,range));
            							}
HXLINE(1272)							if (blueChannel) {
HXLINE(1272)								Int _hx_tmp7 = ( (Int)(func()) );
HXDLIN(1272)								blue = (low + hx::Mod(_hx_tmp7,range));
            							}
HXLINE(1273)							if (alphaChannel) {
HXLINE(1273)								Int _hx_tmp8 = ( (Int)(func()) );
HXDLIN(1273)								alpha = (low + hx::Mod(_hx_tmp8,range));
            							}
            						}
HXLINE(1276)						HX_VARI( Int,rgb) = alpha;
HXLINE(1277)						Int _hx_tmp9 = ((int)rgb << (int)(int)8);
HXDLIN(1277)						rgb = (_hx_tmp9 + red);
HXLINE(1278)						Int _hx_tmp10 = ((int)rgb << (int)(int)8);
HXDLIN(1278)						rgb = (_hx_tmp10 + green);
HXLINE(1279)						Int _hx_tmp11 = ((int)rgb << (int)(int)8);
HXDLIN(1279)						rgb = (_hx_tmp11 + blue);
HXLINE(1281)						this->setPixel32(x,y,rgb);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::Array< Int > redArray,::Array< Int > greenArray,::Array< Int > blueArray,::Array< Int > alphaArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","paletteMap",0xfc19eecc,"openfl.display.BitmapData.paletteMap","openfl/display/BitmapData.hx",1288,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redArray,"redArray")
            	HX_STACK_ARG(greenArray,"greenArray")
            	HX_STACK_ARG(blueArray,"blueArray")
            	HX_STACK_ARG(alphaArray,"alphaArray")
HXLINE(1290)		HX_VARI( Int,sw) = ::Std_obj::_hx_int(sourceRect->width);
HXLINE(1291)		HX_VARI( Int,sh) = ::Std_obj::_hx_int(sourceRect->height);
HXLINE(1293)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = sourceBitmapData->getPixels(sourceRect);
HXLINE(1295)		HX_VAR( Int,pixelValue);
HXDLIN(1295)		HX_VAR( Int,r);
HXDLIN(1295)		HX_VAR( Int,g);
HXDLIN(1295)		HX_VAR( Int,b);
HXDLIN(1295)		HX_VAR( Int,a);
HXDLIN(1295)		HX_VAR( Int,color);
HXLINE(1297)		{
HXLINE(1297)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1297)			HX_VARI( Int,_g) = (sh * sw);
HXDLIN(1297)			while((_g1 < _g)){
HXLINE(1297)				HX_VARI( Int,i) = _g1++;
HXLINE(1299)				pixelValue = pixels->readUnsignedInt();
HXLINE(1301)				Bool _hx_tmp = hx::IsNull( alphaArray );
HXDLIN(1301)				if (_hx_tmp) {
HXLINE(1301)					a = ((int)pixelValue & (int)(int)-16777216);
            				}
            				else {
HXLINE(1301)					a = alphaArray->__get(((int)((int)pixelValue >> (int)(int)24) & (int)(int)255));
            				}
HXLINE(1302)				Bool _hx_tmp1 = hx::IsNull( redArray );
HXDLIN(1302)				if (_hx_tmp1) {
HXLINE(1302)					r = ((int)pixelValue & (int)(int)16711680);
            				}
            				else {
HXLINE(1302)					r = redArray->__get(((int)((int)pixelValue >> (int)(int)16) & (int)(int)255));
            				}
HXLINE(1303)				Bool _hx_tmp2 = hx::IsNull( greenArray );
HXDLIN(1303)				if (_hx_tmp2) {
HXLINE(1303)					g = ((int)pixelValue & (int)(int)65280);
            				}
            				else {
HXLINE(1303)					g = greenArray->__get(((int)((int)pixelValue >> (int)(int)8) & (int)(int)255));
            				}
HXLINE(1304)				Bool _hx_tmp3 = hx::IsNull( blueArray );
HXDLIN(1304)				if (_hx_tmp3) {
HXLINE(1304)					b = ((int)pixelValue & (int)(int)255);
            				}
            				else {
HXLINE(1304)					b = blueArray->__get(((int)pixelValue & (int)(int)255));
            				}
HXLINE(1306)				color = (((a + r) + g) + b);
HXLINE(1308)				pixels->position = (i * (int)4);
HXLINE(1309)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE(1313)		pixels->position = (int)0;
HXLINE(1314)		HX_VARI(  ::openfl::geom::Rectangle,destRect) =  ::openfl::geom::Rectangle_obj::__new(destPoint->x,destPoint->y,sw,sh);
HXLINE(1315)		this->setPixels(destRect,pixels);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,Int numOctaves,Int randomSeed,Bool stitch,Bool fractalNoise,hx::Null< Int >  __o_channelOptions,hx::Null< Bool >  __o_grayScale,::Array< ::Dynamic> offsets){
Int channelOptions = __o_channelOptions.Default(7);
Bool grayScale = __o_grayScale.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","perlinNoise",0xc682321b,"openfl.display.BitmapData.perlinNoise","openfl/display/BitmapData.hx",1319,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(baseX,"baseX")
            	HX_STACK_ARG(baseY,"baseY")
            	HX_STACK_ARG(numOctaves,"numOctaves")
            	HX_STACK_ARG(randomSeed,"randomSeed")
            	HX_STACK_ARG(stitch,"stitch")
            	HX_STACK_ARG(fractalNoise,"fractalNoise")
            	HX_STACK_ARG(channelOptions,"channelOptions")
            	HX_STACK_ARG(grayScale,"grayScale")
            	HX_STACK_ARG(offsets,"offsets")
HXLINE(1321)		if (!(this->readable)) {
HXLINE(1321)			return;
            		}
HXLINE(1322)		HX_VARI(  ::openfl::_internal::utils::PerlinNoise,noise) =  ::openfl::_internal::utils::PerlinNoise_obj::__new(randomSeed,numOctaves,((Float)0.01));
HXLINE(1323)		noise->fill(hx::ObjectPtr<OBJ_>(this),baseX,baseY,(int)0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","scroll",0x57440678,"openfl.display.BitmapData.scroll","openfl/display/BitmapData.hx",1328,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1330)		if (!(this->readable)) {
HXLINE(1330)			return;
            		}
HXLINE(1331)		this->image->scroll(x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setPixel(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",1336,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE(1338)		if (!(this->readable)) {
HXLINE(1338)			return;
            		}
HXLINE(1339)		this->image->setPixel(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",1344,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE(1346)		if (!(this->readable)) {
HXLINE(1346)			return;
            		}
HXLINE(1347)		this->image->setPixel32(x,y,color,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",1352,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(byteArray,"byteArray")
HXLINE(1354)		Bool _hx_tmp;
HXDLIN(1354)		if (!(!(this->readable))) {
HXLINE(1354)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1354)			_hx_tmp = true;
            		}
HXDLIN(1354)		if (_hx_tmp) {
HXLINE(1354)			return;
            		}
HXLINE(1355)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN(1355)		this->image->setPixels(_hx_tmp1,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray),(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::geom::Rectangle rect, ::openfl::_Vector::IntVector inputVector){
            	HX_STACK_FRAME("openfl.display.BitmapData","setVector",0x8b108c7a,"openfl.display.BitmapData.setVector","openfl/display/BitmapData.hx",1360,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(inputVector,"inputVector")
HXLINE(1362)		HX_VARI_NAME(  ::openfl::utils::ByteArrayData,this1,"this") =  ::openfl::utils::ByteArrayData_obj::__new((int)0);
HXDLIN(1362)		HX_VARI(  ::openfl::utils::ByteArrayData,byteArray) = this1;
HXLINE(1363)		Int _hx_tmp = inputVector->get_length();
HXDLIN(1363)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(byteArray,(_hx_tmp * (int)4));
HXLINE(1365)		{
HXLINE(1365)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1365)			while(true){
HXLINE(1365)				Int _hx_tmp1 = inputVector->get_length();
HXDLIN(1365)				if (!((_g < _hx_tmp1))) {
HXLINE(1365)					goto _hx_goto_12;
            				}
HXDLIN(1365)				HX_VARI( Int,color) = inputVector->get(_g);
HXDLIN(1365)				++_g;
HXLINE(1367)				byteArray->writeUnsignedInt(color);
            			}
            			_hx_goto_12:;
            		}
HXLINE(1371)		byteArray->position = (int)0;
HXLINE(1372)		this->setPixels(rect,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

Int BitmapData_obj::threshold( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::String operation,Int threshold,hx::Null< Int >  __o_color,hx::Null< Int >  __o_mask,hx::Null< Bool >  __o_copySource){
Int color = __o_color.Default(0);
Int mask = __o_mask.Default(-1);
Bool copySource = __o_copySource.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","threshold",0xc8af2a20,"openfl.display.BitmapData.threshold","openfl/display/BitmapData.hx",1377,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(threshold,"threshold")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(copySource,"copySource")
HXLINE(1379)		Bool _hx_tmp;
HXDLIN(1379)		Bool _hx_tmp1;
HXDLIN(1379)		Bool _hx_tmp2;
HXDLIN(1379)		Bool _hx_tmp3;
HXDLIN(1379)		Bool _hx_tmp4;
HXDLIN(1379)		Bool _hx_tmp5;
HXDLIN(1379)		Bool _hx_tmp6 = hx::IsNotNull( sourceBitmapData );
HXDLIN(1379)		if (_hx_tmp6) {
HXLINE(1379)			_hx_tmp5 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1379)			_hx_tmp5 = true;
            		}
HXDLIN(1379)		if (!(_hx_tmp5)) {
HXLINE(1379)			_hx_tmp4 = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(1379)			_hx_tmp4 = true;
            		}
HXDLIN(1379)		if (!(_hx_tmp4)) {
HXLINE(1379)			_hx_tmp3 = (sourceRect->x > sourceBitmapData->width);
            		}
            		else {
HXLINE(1379)			_hx_tmp3 = true;
            		}
HXDLIN(1379)		if (!(_hx_tmp3)) {
HXLINE(1379)			_hx_tmp2 = (sourceRect->y > sourceBitmapData->height);
            		}
            		else {
HXLINE(1379)			_hx_tmp2 = true;
            		}
HXDLIN(1379)		if (!(_hx_tmp2)) {
HXLINE(1379)			_hx_tmp1 = (destPoint->x > this->width);
            		}
            		else {
HXLINE(1379)			_hx_tmp1 = true;
            		}
HXDLIN(1379)		if (!(_hx_tmp1)) {
HXLINE(1379)			_hx_tmp = (destPoint->y > this->height);
            		}
            		else {
HXLINE(1379)			_hx_tmp = true;
            		}
HXDLIN(1379)		if (_hx_tmp) {
HXLINE(1379)			return (int)0;
            		}
HXLINE(1381)		 ::lime::math::Rectangle _hx_tmp7 = sourceRect->_hx___toLimeRectangle();
HXDLIN(1381)		 ::lime::math::Vector2 _hx_tmp8 = destPoint->_hx___toLimeVector2();
HXDLIN(1381)		return this->image->threshold(sourceBitmapData->image,_hx_tmp7,_hx_tmp8,operation,threshold,color,mask,copySource,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACK_FRAME("openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",1386,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(changeRect,"changeRect")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___applyAlpha( ::openfl::utils::ByteArrayData alpha){
            	HX_STACK_FRAME("openfl.display.BitmapData","__applyAlpha",0x0369eedb,"openfl.display.BitmapData.__applyAlpha","openfl/display/BitmapData.hx",1393,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(alpha,"alpha")
HXLINE(1400)		HX_VARI(  ::lime::utils::ArrayBufferView,data) = this->image->buffer->data;
HXLINE(1402)		{
HXLINE(1402)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1402)			HX_VARI( Int,_g) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(alpha);
HXDLIN(1402)			while((_g1 < _g)){
HXLINE(1402)				HX_VARI( Int,i) = _g1++;
HXLINE(1404)				{
HXLINE(1404)					HX_VARI( Int,val) = alpha->readUnsignedByte();
HXDLIN(1404)					{
HXLINE(1404)						Int _hx_tmp = data->byteOffset;
HXDLIN(1404)						::__hxcpp_memory_set_byte(data->buffer->b,(_hx_tmp + ((i * (int)4) + (int)3)),val);
            					}
            				}
            			}
            		}
HXLINE(1408)		this->image->version++;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___applyAlpha,(void))

void BitmapData_obj::_hx___fromBase64(::String base64,::String type, ::Dynamic onload){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",1415,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1417)			_gthis->_hx___fromImage(image);
HXLINE(1420)			Bool _hx_tmp = hx::IsNotNull( onload );
HXDLIN(1420)			if (_hx_tmp) {
HXLINE(1422)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",1413,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
HXLINE(1413)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1415)		::lime::graphics::Image_obj::fromBase64(base64,type, ::Dynamic(new _hx_Closure_0(_gthis,onload)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromBase64,(void))

void BitmapData_obj::_hx___fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha, ::Dynamic onload){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",1434,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1436)			_gthis->_hx___fromImage(image);
HXLINE(1438)			Bool _hx_tmp = hx::IsNotNull( rawAlpha );
HXDLIN(1438)			if (_hx_tmp) {
HXLINE(1440)				_gthis->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(1445)			Bool _hx_tmp1 = hx::IsNotNull( onload );
HXDLIN(1445)			if (_hx_tmp1) {
HXLINE(1447)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",1432,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(rawAlpha,"rawAlpha")
            	HX_STACK_ARG(onload,"onload")
HXLINE(1432)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1434)		::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes), ::Dynamic(new _hx_Closure_0(rawAlpha,_gthis,onload)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromBytes,(void))

void BitmapData_obj::_hx___fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",1459,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1461)			_gthis->_hx___fromImage(image);
HXLINE(1464)			Bool _hx_tmp = hx::IsNotNull( onload );
HXDLIN(1464)			if (_hx_tmp) {
HXLINE(1466)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",1457,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE(1457)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1459)		::lime::graphics::Image_obj::fromFile(path, ::Dynamic(new _hx_Closure_0(_gthis,onload)),onerror);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_STACK_FRAME("openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",1478,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(image,"image")
HXLINE(1478)		Bool _hx_tmp;
HXDLIN(1478)		Bool _hx_tmp1 = hx::IsNotNull( image );
HXDLIN(1478)		if (_hx_tmp1) {
HXLINE(1478)			_hx_tmp = hx::IsNotNull( image->buffer );
            		}
            		else {
HXLINE(1478)			_hx_tmp = false;
            		}
HXDLIN(1478)		if (_hx_tmp) {
HXLINE(1480)			this->image = image;
HXLINE(1482)			this->width = image->width;
HXLINE(1483)			this->height = image->height;
HXLINE(1484)			this->rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,image->width,image->height);
HXLINE(1487)			image->set_format((int)2);
HXLINE(1488)			image->set_premultiplied(true);
HXLINE(1491)			this->readable = true;
HXLINE(1492)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

 ::lime::graphics::opengl::GLFramebuffer BitmapData_obj::_hx___getFramebuffer( ::lime::_backend::native::NativeGLRenderContext gl){
            	HX_STACK_FRAME("openfl.display.BitmapData","__getFramebuffer",0x47017542,"openfl.display.BitmapData.__getFramebuffer","openfl/display/BitmapData.hx",1499,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(1501)		Bool _hx_tmp = hx::IsNull( this->_hx___framebuffer );
HXDLIN(1501)		if (_hx_tmp) {
HXLINE(1503)			this->getTexture(gl);
HXLINE(1505)			this->_hx___framebuffer = gl->createFramebuffer();
HXLINE(1507)			gl->bindFramebuffer(gl->FRAMEBUFFER,this->_hx___framebuffer);
HXLINE(1508)			gl->framebufferTexture2D(gl->FRAMEBUFFER,gl->COLOR_ATTACHMENT0,gl->TEXTURE_2D,this->_hx___texture,(int)0);
            		}
HXLINE(1512)		return this->_hx___framebuffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___getFramebuffer,return )

void BitmapData_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCairo",0x87dae327,"openfl.display.BitmapData.__renderCairo","openfl/display/BitmapData.hx",1517,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1520)		if (!(this->readable)) {
HXLINE(1520)			return;
            		}
HXLINE(1522)		HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(1524)		Bool _hx_tmp = hx::IsNull( this->_hx___worldTransform );
HXDLIN(1524)		if (_hx_tmp) {
HXLINE(1524)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE(1526)		HX_VARI(  ::openfl::geom::Matrix,transform) = this->_hx___worldTransform;
HXLINE(1528)		Bool _hx_tmp1 = renderSession->roundPixels;
HXDLIN(1528)		if (_hx_tmp1) {
HXLINE(1530)			HX_VARI(  ::lime::math::Matrix3,matrix) = transform->_hx___toMatrix3();
HXLINE(1531)			matrix->tx = ::Math_obj::round(matrix->tx);
HXLINE(1532)			matrix->ty = ::Math_obj::round(matrix->ty);
HXLINE(1533)			cairo->set_matrix(matrix);
            		}
            		else {
HXLINE(1537)			 ::lime::math::Matrix3 _hx_tmp2 = transform->_hx___toMatrix3();
HXDLIN(1537)			cairo->set_matrix(_hx_tmp2);
            		}
HXLINE(1541)		HX_VARI(  ::Dynamic,surface) = this->getSurface();
HXLINE(1543)		Bool _hx_tmp3 = hx::IsNotNull( surface );
HXDLIN(1543)		if (_hx_tmp3) {
HXLINE(1545)			HX_VARI(  ::Dynamic,pattern) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE(1547)			Bool _hx_tmp4;
HXDLIN(1547)			Bool _hx_tmp5 = !(!(renderSession->allowSmoothing));
HXDLIN(1547)			if (_hx_tmp5) {
HXLINE(1547)				Int _hx_tmp6 = cairo->get_antialias();
HXDLIN(1547)				_hx_tmp4 = (_hx_tmp6 == (int)1);
            			}
            			else {
HXLINE(1547)				_hx_tmp4 = true;
            			}
HXDLIN(1547)			if (_hx_tmp4) {
HXLINE(1549)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)3);
            			}
            			else {
HXLINE(1553)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)1);
            			}
HXLINE(1557)			cairo->set_source(pattern);
HXLINE(1558)			cairo->paint();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairo,(void))

void BitmapData_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCairoMask",0x1a586fb3,"openfl.display.BitmapData.__renderCairoMask","openfl/display/BitmapData.hx",1566,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairoMask,(void))

void BitmapData_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCanvas",0x5afced59,"openfl.display.BitmapData.__renderCanvas","openfl/display/BitmapData.hx",1573,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvas,(void))

void BitmapData_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCanvasMask",0xf2507ae5,"openfl.display.BitmapData.__renderCanvasMask","openfl/display/BitmapData.hx",1607,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvasMask,(void))

void BitmapData_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderGL",0x4c025e06,"openfl.display.BitmapData.__renderGL","openfl/display/BitmapData.hx",1614,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1616)		HX_VARI(  ::openfl::_internal::renderer::opengl::GLRenderer,renderer) = ( ( ::openfl::_internal::renderer::opengl::GLRenderer)(renderSession->renderer) );
HXLINE(1617)		HX_VARI(  ::lime::_backend::native::NativeGLRenderContext,gl) = renderSession->gl;
HXLINE(1619)		renderSession->blendModeManager->setBlendMode((int)10);
HXLINE(1621)		HX_VARI(  ::openfl::display::Shader,shader) = renderSession->shaderManager->defaultShader;
HXLINE(1623)		shader->get_data()->uImage0->input = hx::ObjectPtr<OBJ_>(this);
HXLINE(1624)		Bool _hx_tmp;
HXDLIN(1624)		if (renderSession->allowSmoothing) {
HXLINE(1624)			_hx_tmp = renderSession->upscaled;
            		}
            		else {
HXLINE(1624)			_hx_tmp = false;
            		}
HXDLIN(1624)		shader->get_data()->uImage0->smoothing = _hx_tmp;
HXLINE(1625)		shader->get_data()->uMatrix->value = renderer->getMatrix(this->_hx___worldTransform);
HXLINE(1627)		renderSession->shaderManager->setShader(shader);
HXLINE(1629)		Int _hx_tmp1 = gl->ARRAY_BUFFER;
HXDLIN(1629)		 ::lime::graphics::opengl::GLBuffer _hx_tmp2 = this->getBuffer(gl,(int)1);
HXDLIN(1629)		gl->bindBuffer(_hx_tmp1,_hx_tmp2);
HXLINE(1630)		gl->vertexAttribPointer(shader->get_data()->aPosition->index,(int)3,gl->FLOAT,false,(int)24,(int)0);
HXLINE(1631)		gl->vertexAttribPointer(shader->get_data()->aTexCoord->index,(int)2,gl->FLOAT,false,(int)24,(int)12);
HXLINE(1632)		gl->vertexAttribPointer(shader->get_data()->aAlpha->index,(int)1,gl->FLOAT,false,(int)24,(int)20);
HXLINE(1634)		gl->drawArrays(gl->TRIANGLE_STRIP,(int)0,(int)4);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGL,(void))

void BitmapData_obj::_hx___resize(Int width,Int height){
            	HX_STACK_FRAME("openfl.display.BitmapData","__resize",0xd982a43f,"openfl.display.BitmapData.__resize","openfl/display/BitmapData.hx",1639,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1641)		this->width = width;
HXLINE(1642)		this->height = height;
HXLINE(1643)		this->rect->width = width;
HXLINE(1644)		this->rect->height = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___resize,(void))

void BitmapData_obj::_hx___sync(){
            	HX_STACK_FRAME("openfl.display.BitmapData","__sync",0x0b374be6,"openfl.display.BitmapData.__sync","openfl/display/BitmapData.hx",1649,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,_hx___sync,(void))

void BitmapData_obj::_hx___updateChildren(Bool transformOnly){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateChildren",0xeaaf19b3,"openfl.display.BitmapData.__updateChildren","openfl/display/BitmapData.hx",1658,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateChildren,(void))

void BitmapData_obj::_hx___updateMask( ::openfl::display::Graphics maskGraphics){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateMask",0x378cf760,"openfl.display.BitmapData.__updateMask","openfl/display/BitmapData.hx",1665,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(maskGraphics,"maskGraphics")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateMask,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",1674,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(overrideTransform,"overrideTransform")
HXLINE(1674)		Bool _hx_tmp = hx::IsNull( overrideTransform );
HXDLIN(1674)		if (_hx_tmp) {
HXLINE(1676)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(1680)			this->_hx___worldTransform = overrideTransform;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

 ::Dynamic BitmapData_obj::_hx___isGLES;

 ::openfl::display::BitmapData BitmapData_obj::fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",697,0xdd12d5b9)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 699)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,(int)0);
HXLINE( 700)		{
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload1) HXARGC(1)
            			void _hx_run( ::lime::graphics::Image image){
            				HX_STACK_FRAME("openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",700,0xdd12d5b9)
            				HX_STACK_ARG(image,"image")
HXLINE( 700)				_gthis->_hx___fromImage(image);
HXDLIN( 700)				Bool _hx_tmp = hx::IsNotNull( onload1 );
HXDLIN( 700)				if (_hx_tmp) {
HXLINE( 700)					onload1(_gthis);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 700)			HX_VARI_NAME(  ::Dynamic,onload1,"onload") = onload;
HXDLIN( 700)			HX_VARI(  ::openfl::display::BitmapData,_gthis) = bitmapData;
HXDLIN( 700)			::lime::graphics::Image_obj::fromBase64(base64,type, ::Dynamic(new _hx_Closure_0(_gthis,onload1)));
            		}
HXLINE( 701)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromBase64,return )

 ::openfl::display::BitmapData BitmapData_obj::fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha, ::Dynamic onload){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",706,0xdd12d5b9)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(rawAlpha,"rawAlpha")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 708)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,(int)0);
HXLINE( 709)		{
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload1, ::openfl::utils::ByteArrayData,rawAlpha1) HXARGC(1)
            			void _hx_run( ::lime::graphics::Image image){
            				HX_STACK_FRAME("openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",709,0xdd12d5b9)
            				HX_STACK_ARG(image,"image")
HXLINE( 709)				_gthis->_hx___fromImage(image);
HXDLIN( 709)				Bool _hx_tmp = hx::IsNotNull( rawAlpha1 );
HXDLIN( 709)				if (_hx_tmp) {
HXLINE( 709)					_gthis->_hx___applyAlpha(rawAlpha1);
            				}
HXDLIN( 709)				Bool _hx_tmp1 = hx::IsNotNull( onload1 );
HXDLIN( 709)				if (_hx_tmp1) {
HXLINE( 709)					onload1(_gthis);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 709)			HX_VARI_NAME(  ::openfl::utils::ByteArrayData,rawAlpha1,"rawAlpha") = rawAlpha;
HXDLIN( 709)			HX_VARI_NAME(  ::Dynamic,onload1,"onload") = onload;
HXDLIN( 709)			HX_VARI(  ::openfl::display::BitmapData,_gthis) = bitmapData;
HXDLIN( 709)			::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes), ::Dynamic(new _hx_Closure_0(_gthis,onload1,rawAlpha1)));
            		}
HXLINE( 710)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromBytes,return )

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",729,0xdd12d5b9)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE( 731)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,(int)0);
HXLINE( 732)		bitmapData->_hx___fromFile(path,onload,onerror);
HXLINE( 733)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,hx::Null< Bool >  __o_transparent){
Bool transparent = __o_transparent.Default(true);
            	HX_STACK_FRAME("openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",738,0xdd12d5b9)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(transparent,"transparent")
HXLINE( 740)		Bool _hx_tmp;
HXDLIN( 740)		Bool _hx_tmp1 = hx::IsNotNull( image );
HXDLIN( 740)		if (_hx_tmp1) {
HXLINE( 740)			_hx_tmp = hx::IsNull( image->buffer );
            		}
            		else {
HXLINE( 740)			_hx_tmp = true;
            		}
HXDLIN( 740)		if (_hx_tmp) {
HXLINE( 740)			return null();
            		}
HXLINE( 742)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,transparent,(int)0);
HXLINE( 743)		bitmapData->_hx___fromImage(image);
HXLINE( 744)		bitmapData->image->set_transparent(transparent);
HXLINE( 745)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )

 ::openfl::display::BitmapData BitmapData_obj::fromTexture( ::openfl::display3D::textures::TextureBase texture){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromTexture",0x71aada46,"openfl.display.BitmapData.fromTexture","openfl/display/BitmapData.hx",750,0xdd12d5b9)
            	HX_STACK_ARG(texture,"texture")
HXLINE( 752)		Bool _hx_tmp = hx::IsNull( texture );
HXDLIN( 752)		if (_hx_tmp) {
HXLINE( 752)			return null();
            		}
HXLINE( 754)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new(texture->_hx___width,texture->_hx___height,true,(int)0);
HXLINE( 755)		bitmapData->readable = false;
HXLINE( 756)		bitmapData->_hx___texture = texture->_hx___textureID;
HXLINE( 757)		bitmapData->image = null();
HXLINE( 758)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,fromTexture,return )

 ::lime::app::Future BitmapData_obj::loadFromBase64(::String base64,::String type){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",1178,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1178)			 ::openfl::display::BitmapData _hx_tmp = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXDLIN(1178)			return ::lime::app::Future_obj::withValue(_hx_tmp);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("openfl.display.BitmapData","loadFromBase64",0x41c11dca,"openfl.display.BitmapData.loadFromBase64","openfl/display/BitmapData.hx",1176,0xdd12d5b9)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
HXLINE(1176)		return ::lime::graphics::Image_obj::loadFromBase64(base64,type)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBase64,return )

 ::lime::app::Future BitmapData_obj::loadFromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",1187,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1189)			HX_VARI(  ::openfl::display::BitmapData,bitmapData) = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXLINE(1191)			Bool _hx_tmp = hx::IsNotNull( rawAlpha );
HXDLIN(1191)			if (_hx_tmp) {
HXLINE(1193)				bitmapData->_hx___applyAlpha(rawAlpha);
            			}
HXLINE(1197)			return ::lime::app::Future_obj::withValue(bitmapData);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("openfl.display.BitmapData","loadFromBytes",0x271f0890,"openfl.display.BitmapData.loadFromBytes","openfl/display/BitmapData.hx",1187,0xdd12d5b9)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(rawAlpha,"rawAlpha")
HXLINE(1187)		return ::lime::graphics::Image_obj::loadFromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes))->then( ::Dynamic(new _hx_Closure_0(rawAlpha)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,loadFromBytes,return )

 ::lime::app::Future BitmapData_obj::loadFromFile(::String path){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",1208,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1208)			 ::openfl::display::BitmapData _hx_tmp = ::openfl::display::BitmapData_obj::fromImage(image,null());
HXDLIN(1208)			return ::lime::app::Future_obj::withValue(_hx_tmp);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("openfl.display.BitmapData","loadFromFile",0x58ded9f7,"openfl.display.BitmapData.loadFromFile","openfl/display/BitmapData.hx",1206,0xdd12d5b9)
            	HX_STACK_ARG(path,"path")
HXLINE(1206)		return ::lime::graphics::Image_obj::loadFromFile(path)->then( ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,loadFromFile,return )


BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___bufferAlpha,"__bufferAlpha");
	HX_MARK_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___bufferAlpha,"__bufferAlpha");
	HX_VISIT_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureVersion,"__textureVersion");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn()); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn()); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn()); }
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn()); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return hx::Val( readable); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return hx::Val( _hx___surface); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn()); }
		if (HX_FIELD_EQ(inName,"getBuffer") ) { return hx::Val( getBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn()); }
		if (HX_FIELD_EQ(inName,"histogram") ) { return hx::Val( histogram_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn()); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return hx::Val( getSurface_dyn()); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn()); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn()); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return hx::Val( _hx___fromImage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { return hx::Val( _hx___bufferData); }
		if (HX_FIELD_EQ(inName,"disposeImage") ) { return hx::Val( disposeImage_dyn()); }
		if (HX_FIELD_EQ(inName,"__applyAlpha") ) { return hx::Val( _hx___applyAlpha_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateMask") ) { return hx::Val( _hx___updateMask_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferAlpha") ) { return hx::Val( _hx___bufferAlpha); }
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"drawWithQuality") ) { return hx::Val( drawWithQuality_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { return hx::Val( _hx___textureVersion); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform); }
		if (HX_FIELD_EQ(inName,"__getFramebuffer") ) { return hx::Val( _hx___getFramebuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__isGLES") ) { outValue = _hx___isGLES; return true; }
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromTexture") ) { outValue = fromTexture_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"loadFromFile") ) { outValue = loadFromFile_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadFromBytes") ) { outValue = loadFromBytes_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadFromBase64") ) { outValue = loadFromBase64_dyn(); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { _hx___bufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__bufferAlpha") ) { _hx___bufferAlpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__textureVersion") ) { _hx___textureVersion=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__isGLES") ) { _hx___isGLES=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07"));
	outFields->push(HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"));
	outFields->push(HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"));
	outFields->push(HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"));
	outFields->push(HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(BitmapData_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,readable),HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(BitmapData_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsFloat,(int)offsetof(BitmapData_obj,_hx___bufferAlpha),HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(BitmapData_obj,_hx___bufferData),HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc")},
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(BitmapData_obj,_hx___framebuffer),HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,_hx___textureVersion),HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::_hx___isGLES,HX_HCSTRING("__isGLES","\xdd","\x11","\xe5","\x09")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("readable","\xf0","\x1b","\x87","\x7d"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__bufferAlpha","\x1e","\x7b","\x5a","\x07"),
	HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"),
	HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"),
	HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"),
	HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__textureVersion","\x9d","\x72","\xf2","\xd2"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("applyFilter","\xc6","\xdf","\x2f","\xc1"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("disposeImage","\x3c","\x6e","\xb8","\x62"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("drawWithQuality","\xb5","\xc5","\x05","\x6f"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("generateFilterRect","\x91","\x2c","\x98","\x7e"),
	HX_HCSTRING("getBuffer","\x36","\x46","\xeb","\x4c"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("getSurface","\x37","\xec","\xaa","\xac"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getVector","\xf9","\x39","\xb4","\x13"),
	HX_HCSTRING("histogram","\xa4","\xde","\x33","\x65"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("noise","\x9a","\x8f","\xc2","\x9f"),
	HX_HCSTRING("paletteMap","\xe1","\xae","\x2b","\x06"),
	HX_HCSTRING("perlinNoise","\x66","\x84","\xf8","\x8b"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("setVector","\x05","\x26","\x05","\xf7"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("__applyAlpha","\x30","\x9e","\x7b","\x05"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImage","\x71","\x52","\x1e","\xa0"),
	HX_HCSTRING("__getFramebuffer","\x17","\xf3","\x25","\x36"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__sync","\x7b","\x1d","\x58","\xfb"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateMask","\xb5","\xa6","\x9e","\x39"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___isGLES,"__isGLES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___isGLES,"__isGLES");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_HCSTRING("__isGLES","\xdd","\x11","\xe5","\x09"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImage","\x91","\x09","\xf2","\x71"),
	HX_HCSTRING("fromTexture","\x91","\x2c","\x21","\x37"),
	HX_HCSTRING("loadFromBase64","\x5f","\x0c","\x1d","\x2f"),
	HX_HCSTRING("loadFromBytes","\x9b","\xc3","\x86","\xf4"),
	HX_HCSTRING("loadFromFile","\x4c","\x89","\xf0","\x5a"),
	::String(null())
};

void BitmapData_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.BitmapData","\xa3","\x12","\x41","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",83,0xdd12d5b9)
HXLINE(  83)		_hx___isGLES = null();
            	}
}

} // end namespace openfl
} // end namespace display
