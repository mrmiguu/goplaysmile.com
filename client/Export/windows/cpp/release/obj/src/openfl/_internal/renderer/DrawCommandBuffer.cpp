// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{

void DrawCommandBuffer_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","new",0xdc2c151e,"openfl._internal.renderer.DrawCommandBuffer.new","openfl/_internal/renderer/DrawCommandBuffer.hx",39,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE(  39)		Bool _hx_tmp = hx::IsNull( ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty );
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  41)			this->types = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  43)			this->b = ::Array_obj< Bool >::__new(0);
HXLINE(  44)			this->i = ::Array_obj< Int >::__new(0);
HXLINE(  45)			this->f = ::Array_obj< Float >::__new(0);
HXLINE(  46)			this->o = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  47)			this->ff = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  48)			this->ii = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  50)			this->copyOnWrite = true;
            		}
            		else {
HXLINE(  54)			this->clear();
            		}
            	}

Dynamic DrawCommandBuffer_obj::__CreateEmpty() { return new DrawCommandBuffer_obj; }

hx::ObjectPtr< DrawCommandBuffer_obj > DrawCommandBuffer_obj::__new()
{
	hx::ObjectPtr< DrawCommandBuffer_obj > _hx_result = new DrawCommandBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DrawCommandBuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DrawCommandBuffer_obj > _hx_result = new DrawCommandBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::openfl::_internal::renderer::DrawCommandBuffer DrawCommandBuffer_obj::append( ::openfl::_internal::renderer::DrawCommandBuffer other){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","append",0x1b14a7dc,"openfl._internal.renderer.DrawCommandBuffer.append","openfl/_internal/renderer/DrawCommandBuffer.hx",61,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE(  63)		Int _hx_tmp = this->get_length();
HXDLIN(  63)		if ((_hx_tmp == (int)0)) {
HXLINE(  65)			this->types = other->types;
HXLINE(  66)			this->b = other->b;
HXLINE(  67)			this->i = other->i;
HXLINE(  68)			this->f = other->f;
HXLINE(  69)			this->o = other->o;
HXLINE(  70)			this->ff = other->ff;
HXLINE(  71)			this->ii = other->ii;
HXLINE(  72)			this->copyOnWrite = (other->copyOnWrite = true);
HXLINE(  74)			return other;
            		}
HXLINE(  78)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(other);
HXLINE(  80)		{
HXLINE(  80)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  80)			HX_VARI( ::Array< ::Dynamic>,_g1) = other->types;
HXDLIN(  80)			while((_g < _g1->length)){
HXLINE(  80)				HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(  80)				++_g;
HXLINE(  82)				Int _hx_tmp1 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(  82)				switch((int)(_hx_tmp1)){
            					case (int)0: {
HXLINE(  84)						{
HXLINE(  84)							Int _hx_tmp2 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  84)							switch((int)(_hx_tmp2)){
            								case (int)0: {
HXLINE(  84)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  84)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  84)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  84)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  84)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  84)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  84)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  84)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  84)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  84)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  84)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  84)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  84)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  84)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  84)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  84)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  84)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  84)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  84)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  84)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  84)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  84)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  84)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  84)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  84)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  84)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  84)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  84)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  84)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  84)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(  84)						HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXDLIN(  84)						 ::openfl::display::BitmapData _hx_tmp3 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(  84)						 ::openfl::geom::Matrix _hx_tmp4 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN(  84)						Bool _hx_tmp5 = c->buffer->b->__get(c->bPos);
HXDLIN(  84)						Bool _hx_tmp6 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN(  84)						this->beginBitmapFill(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6);
            					}
            					break;
            					case (int)1: {
HXLINE(  85)						{
HXLINE(  85)							Int _hx_tmp7 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  85)							switch((int)(_hx_tmp7)){
            								case (int)0: {
HXLINE(  85)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  85)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  85)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  85)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  85)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  85)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  85)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  85)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  85)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  85)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  85)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  85)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  85)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  85)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  85)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  85)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  85)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  85)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  85)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  85)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  85)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  85)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  85)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  85)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  85)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  85)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  85)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  85)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  85)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  85)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(  85)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXDLIN(  85)						Int _hx_tmp8 = c1->buffer->i->__get(c1->iPos);
HXDLIN(  85)						Float _hx_tmp9 = c1->buffer->f->__get(c1->fPos);
HXDLIN(  85)						this->beginFill(_hx_tmp8,_hx_tmp9);
            					}
            					break;
            					case (int)2: {
HXLINE(  86)						{
HXLINE(  86)							Int _hx_tmp10 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  86)							switch((int)(_hx_tmp10)){
            								case (int)0: {
HXLINE(  86)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  86)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  86)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  86)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  86)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  86)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  86)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  86)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  86)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  86)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  86)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  86)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  86)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  86)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  86)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  86)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  86)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  86)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  86)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  86)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  86)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  86)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  86)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  86)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  86)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  86)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  86)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  86)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  86)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  86)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(  86)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXDLIN(  86)						Int _hx_tmp11 = (c2->iiPos + (int)1);
HXDLIN(  86)						Int _hx_tmp12 = (c2->oPos + (int)1);
HXDLIN(  86)						Int _hx_tmp13 = (c2->oPos + (int)2);
HXDLIN(  86)						Int _hx_tmp14 = (c2->oPos + (int)3);
HXDLIN(  86)						this->beginGradientFill(c2->buffer->o->__get(c2->oPos),c2->buffer->ii->__get(c2->iiPos).StaticCast< ::Array< Int > >(),c2->buffer->ff->__get(c2->ffPos).StaticCast< ::Array< Float > >(),c2->buffer->ii->__get(_hx_tmp11).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c2->buffer->o->__get(_hx_tmp12)) ),c2->buffer->o->__get(_hx_tmp13),c2->buffer->o->__get(_hx_tmp14),c2->buffer->f->__get(c2->fPos));
            					}
            					break;
            					case (int)3: {
HXLINE(  87)						{
HXLINE(  87)							Int _hx_tmp15 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  87)							switch((int)(_hx_tmp15)){
            								case (int)0: {
HXLINE(  87)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  87)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  87)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  87)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  87)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  87)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  87)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  87)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  87)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  87)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  87)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  87)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  87)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  87)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  87)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  87)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  87)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  87)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  87)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  87)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  87)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  87)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  87)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  87)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  87)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  87)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  87)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  87)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  87)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  87)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(  87)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXDLIN(  87)						Float _hx_tmp16 = c3->buffer->f->__get(c3->fPos);
HXDLIN(  87)						Float _hx_tmp17 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN(  87)						Float _hx_tmp18 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN(  87)						Float _hx_tmp19 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN(  87)						Float _hx_tmp20 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN(  87)						Float _hx_tmp21 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN(  87)						this->cubicCurveTo(_hx_tmp16,_hx_tmp17,_hx_tmp18,_hx_tmp19,_hx_tmp20,_hx_tmp21);
            					}
            					break;
            					case (int)4: {
HXLINE(  88)						{
HXLINE(  88)							Int _hx_tmp22 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  88)							switch((int)(_hx_tmp22)){
            								case (int)0: {
HXLINE(  88)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  88)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  88)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  88)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  88)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  88)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  88)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  88)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  88)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  88)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  88)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  88)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  88)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  88)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  88)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  88)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  88)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  88)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  88)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  88)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  88)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  88)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  88)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  88)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  88)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  88)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  88)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  88)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  88)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  88)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(  88)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXDLIN(  88)						Float _hx_tmp23 = c4->buffer->f->__get(c4->fPos);
HXDLIN(  88)						Float _hx_tmp24 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(  88)						Float _hx_tmp25 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(  88)						Float _hx_tmp26 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(  88)						this->curveTo(_hx_tmp23,_hx_tmp24,_hx_tmp25,_hx_tmp26);
            					}
            					break;
            					case (int)5: {
HXLINE(  89)						{
HXLINE(  89)							Int _hx_tmp27 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  89)							switch((int)(_hx_tmp27)){
            								case (int)0: {
HXLINE(  89)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  89)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  89)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  89)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  89)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  89)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  89)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  89)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  89)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  89)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  89)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  89)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  89)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  89)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  89)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  89)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  89)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  89)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  89)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  89)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  89)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  89)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  89)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  89)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  89)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  89)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  89)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  89)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  89)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  89)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(  89)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXDLIN(  89)						Float _hx_tmp28 = c5->buffer->f->__get(c5->fPos);
HXDLIN(  89)						Float _hx_tmp29 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(  89)						Float _hx_tmp30 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(  89)						this->drawCircle(_hx_tmp28,_hx_tmp29,_hx_tmp30);
            					}
            					break;
            					case (int)6: {
HXLINE(  90)						{
HXLINE(  90)							Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  90)							switch((int)(_hx_tmp31)){
            								case (int)0: {
HXLINE(  90)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  90)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  90)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  90)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  90)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  90)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  90)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  90)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  90)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  90)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  90)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  90)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  90)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  90)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  90)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  90)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  90)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  90)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  90)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  90)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  90)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  90)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  90)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  90)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  90)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  90)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  90)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  90)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  90)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  90)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(  90)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXDLIN(  90)						Float _hx_tmp32 = c6->buffer->f->__get(c6->fPos);
HXDLIN(  90)						Float _hx_tmp33 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(  90)						Float _hx_tmp34 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN(  90)						Float _hx_tmp35 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN(  90)						this->drawEllipse(_hx_tmp32,_hx_tmp33,_hx_tmp34,_hx_tmp35);
            					}
            					break;
            					case (int)7: {
HXLINE(  91)						{
HXLINE(  91)							Int _hx_tmp36 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  91)							switch((int)(_hx_tmp36)){
            								case (int)0: {
HXLINE(  91)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  91)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  91)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  91)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  91)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  91)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  91)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  91)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  91)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  91)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  91)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  91)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  91)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  91)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  91)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  91)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  91)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  91)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  91)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  91)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  91)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  91)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  91)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  91)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  91)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  91)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  91)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  91)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  91)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  91)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(  91)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXDLIN(  91)						Float _hx_tmp37 = c7->buffer->f->__get(c7->fPos);
HXDLIN(  91)						Float _hx_tmp38 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(  91)						Float _hx_tmp39 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN(  91)						Float _hx_tmp40 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN(  91)						this->drawRect(_hx_tmp37,_hx_tmp38,_hx_tmp39,_hx_tmp40);
            					}
            					break;
            					case (int)8: {
HXLINE(  92)						{
HXLINE(  92)							Int _hx_tmp41 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  92)							switch((int)(_hx_tmp41)){
            								case (int)0: {
HXLINE(  92)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  92)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  92)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  92)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  92)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  92)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  92)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  92)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  92)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  92)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  92)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  92)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  92)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  92)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  92)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  92)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  92)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  92)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  92)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  92)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  92)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  92)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  92)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  92)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  92)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  92)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  92)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  92)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  92)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  92)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(  92)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXDLIN(  92)						Float _hx_tmp42 = c8->buffer->f->__get(c8->fPos);
HXDLIN(  92)						Float _hx_tmp43 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN(  92)						Float _hx_tmp44 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN(  92)						Float _hx_tmp45 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN(  92)						Float _hx_tmp46 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN(  92)						this->drawRoundRect(_hx_tmp42,_hx_tmp43,_hx_tmp44,_hx_tmp45,_hx_tmp46,c8->buffer->o->__get(c8->oPos));
            					}
            					break;
            					case (int)10: {
HXLINE(  93)						{
HXLINE(  93)							Int _hx_tmp47 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  93)							switch((int)(_hx_tmp47)){
            								case (int)0: {
HXLINE(  93)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  93)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  93)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  93)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  93)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  93)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  93)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  93)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  93)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  93)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  93)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  93)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  93)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  93)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  93)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  93)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  93)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  93)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  93)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  93)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  93)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  93)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  93)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  93)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  93)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  93)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  93)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  93)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  93)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  93)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN(  93)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXDLIN(  93)						Int _hx_tmp48 = (c9->oPos + (int)1);
HXDLIN(  93)						Int _hx_tmp49 = (c9->oPos + (int)2);
HXDLIN(  93)						Int _hx_tmp50 = (c9->oPos + (int)3);
HXDLIN(  93)						this->drawTriangles(( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::_Vector::IntVector)(c9->buffer->o->__get(_hx_tmp48)) ),( ( ::openfl::_Vector::FloatVector)(c9->buffer->o->__get(_hx_tmp49)) ),c9->buffer->o->__get(_hx_tmp50));
            					}
            					break;
            					case (int)11: {
HXLINE(  94)						{
HXLINE(  94)							Int _hx_tmp51 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  94)							switch((int)(_hx_tmp51)){
            								case (int)0: {
HXLINE(  94)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  94)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  94)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  94)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  94)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  94)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  94)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  94)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  94)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  94)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  94)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  94)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  94)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  94)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  94)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  94)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  94)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  94)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  94)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  94)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  94)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  94)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  94)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  94)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  94)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  94)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  94)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  94)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  94)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  94)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
HXDLIN(  94)						this->endFill();
            					}
            					break;
            					case (int)12: {
HXLINE(  95)						{
HXLINE(  95)							Int _hx_tmp52 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  95)							switch((int)(_hx_tmp52)){
            								case (int)0: {
HXLINE(  95)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  95)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  95)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  95)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  95)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  95)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  95)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  95)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  95)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  95)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  95)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  95)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  95)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  95)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  95)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  95)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  95)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  95)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  95)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  95)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  95)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  95)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  95)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  95)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  95)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  95)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  95)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  95)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  95)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  95)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN(  95)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXDLIN(  95)						Int _hx_tmp53 = (c10->oPos + (int)1);
HXDLIN(  95)						Int _hx_tmp54 = (c10->bPos + (int)1);
HXDLIN(  95)						this->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c10->buffer->o->__get(c10->oPos)) ),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get(_hx_tmp53)) ),c10->buffer->b->__get(c10->bPos),c10->buffer->b->__get(_hx_tmp54));
            					}
            					break;
            					case (int)13: {
HXLINE(  96)						{
HXLINE(  96)							Int _hx_tmp55 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  96)							switch((int)(_hx_tmp55)){
            								case (int)0: {
HXLINE(  96)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  96)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  96)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  96)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  96)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  96)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  96)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  96)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  96)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  96)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  96)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  96)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  96)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  96)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  96)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  96)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  96)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  96)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  96)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  96)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  96)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  96)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  96)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  96)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  96)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  96)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  96)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  96)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  96)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  96)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN(  96)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXDLIN(  96)						Int _hx_tmp56 = (c11->iiPos + (int)1);
HXDLIN(  96)						Int _hx_tmp57 = (c11->oPos + (int)1);
HXDLIN(  96)						Int _hx_tmp58 = (c11->oPos + (int)2);
HXDLIN(  96)						Int _hx_tmp59 = (c11->oPos + (int)3);
HXDLIN(  96)						this->lineGradientStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->ii->__get(c11->iiPos).StaticCast< ::Array< Int > >(),c11->buffer->ff->__get(c11->ffPos).StaticCast< ::Array< Float > >(),c11->buffer->ii->__get(_hx_tmp56).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get(_hx_tmp57)) ),c11->buffer->o->__get(_hx_tmp58),c11->buffer->o->__get(_hx_tmp59),c11->buffer->f->__get(c11->fPos));
            					}
            					break;
            					case (int)14: {
HXLINE(  97)						{
HXLINE(  97)							Int _hx_tmp60 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  97)							switch((int)(_hx_tmp60)){
            								case (int)0: {
HXLINE(  97)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  97)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  97)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  97)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  97)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  97)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  97)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  97)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  97)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  97)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  97)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  97)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  97)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  97)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  97)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  97)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  97)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  97)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  97)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  97)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  97)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  97)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  97)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  97)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  97)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  97)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  97)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  97)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  97)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  97)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN(  97)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXDLIN(  97)						Int _hx_tmp61 = (c12->oPos + (int)1);
HXDLIN(  97)						Int _hx_tmp62 = (c12->oPos + (int)2);
HXDLIN(  97)						Int _hx_tmp63 = (c12->oPos + (int)3);
HXDLIN(  97)						Int _hx_tmp64 = (c12->fPos + (int)1);
HXDLIN(  97)						this->lineStyle(c12->buffer->o->__get(c12->oPos),c12->buffer->i->__get(c12->iPos),c12->buffer->f->__get(c12->fPos),c12->buffer->b->__get(c12->bPos),c12->buffer->o->__get(_hx_tmp61),c12->buffer->o->__get(_hx_tmp62),c12->buffer->o->__get(_hx_tmp63),c12->buffer->f->__get(_hx_tmp64));
            					}
            					break;
            					case (int)15: {
HXLINE(  98)						{
HXLINE(  98)							Int _hx_tmp65 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  98)							switch((int)(_hx_tmp65)){
            								case (int)0: {
HXLINE(  98)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  98)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  98)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  98)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  98)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  98)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  98)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  98)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  98)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  98)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  98)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  98)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  98)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  98)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  98)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  98)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  98)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  98)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  98)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  98)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  98)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  98)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  98)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  98)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  98)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  98)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  98)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  98)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  98)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  98)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(  98)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXDLIN(  98)						Float _hx_tmp66 = c13->buffer->f->__get(c13->fPos);
HXDLIN(  98)						Float _hx_tmp67 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN(  98)						this->lineTo(_hx_tmp66,_hx_tmp67);
            					}
            					break;
            					case (int)16: {
HXLINE(  99)						{
HXLINE(  99)							Int _hx_tmp68 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  99)							switch((int)(_hx_tmp68)){
            								case (int)0: {
HXLINE(  99)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  99)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  99)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  99)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  99)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  99)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  99)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  99)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  99)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  99)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  99)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  99)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  99)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE(  99)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  99)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  99)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE(  99)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  99)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE(  99)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  99)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  99)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  99)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE(  99)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  99)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  99)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  99)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  99)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE(  99)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  99)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  99)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(  99)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXDLIN(  99)						Float _hx_tmp69 = c14->buffer->f->__get(c14->fPos);
HXDLIN(  99)						Float _hx_tmp70 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN(  99)						this->moveTo(_hx_tmp69,_hx_tmp70);
            					}
            					break;
            					case (int)17: {
HXLINE( 100)						{
HXLINE( 100)							Int _hx_tmp71 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 100)							switch((int)(_hx_tmp71)){
            								case (int)0: {
HXLINE( 100)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 100)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 100)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 100)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 100)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 100)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 100)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 100)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 100)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 100)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 100)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 100)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 100)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)8: {
HXLINE( 100)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 100)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 100)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)11: {
            								}
            								break;
            								case (int)12: {
HXLINE( 100)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 100)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)13: {
HXLINE( 100)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 100)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 100)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 100)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)14: {
HXLINE( 100)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 100)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 100)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 100)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 100)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)16: {
HXLINE( 100)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 100)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 100)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_MATRIX_dyn();
HXDLIN( 100)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c15,"c") = data;
HXDLIN( 100)						this->overrideMatrix(( ( ::openfl::geom::Matrix)(c15->buffer->o->__get(c15->oPos)) ));
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE( 107)		data->destroy();
HXLINE( 108)		return other;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandBuffer_obj,append,return )

void DrawCommandBuffer_obj::beginBitmapFill( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,Bool repeat,Bool smooth){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","beginBitmapFill",0x90133359,"openfl._internal.renderer.DrawCommandBuffer.beginBitmapFill","openfl/_internal/renderer/DrawCommandBuffer.hx",113,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE( 115)		this->prepareWrite();
HXLINE( 117)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn());
HXLINE( 118)		this->o->push(bitmap);
HXLINE( 119)		this->o->push(matrix);
HXLINE( 120)		this->b->push(repeat);
HXLINE( 121)		this->b->push(smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,beginBitmapFill,(void))

void DrawCommandBuffer_obj::beginFill(Int color,Float alpha){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","beginFill",0x6ae7148a,"openfl._internal.renderer.DrawCommandBuffer.beginFill","openfl/_internal/renderer/DrawCommandBuffer.hx",125,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 127)		this->prepareWrite();
HXLINE( 129)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn());
HXLINE( 130)		this->i->push(color);
HXLINE( 131)		this->f->push(alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,beginFill,(void))

void DrawCommandBuffer_obj::beginGradientFill( ::Dynamic type,::Array< Int > colors,::Array< Float > alphas,::Array< Int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","beginGradientFill",0x7d0b119a,"openfl._internal.renderer.DrawCommandBuffer.beginGradientFill","openfl/_internal/renderer/DrawCommandBuffer.hx",136,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE( 138)		this->prepareWrite();
HXLINE( 140)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn());
HXLINE( 141)		this->o->push(type);
HXLINE( 142)		this->ii->push(colors);
HXLINE( 143)		this->ff->push(alphas);
HXLINE( 144)		this->ii->push(ratios);
HXLINE( 145)		this->o->push(matrix);
HXLINE( 146)		this->o->push(spreadMethod);
HXLINE( 147)		this->o->push(interpolationMethod);
HXLINE( 148)		this->f->push(focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,beginGradientFill,(void))

void DrawCommandBuffer_obj::clear(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","clear",0xfe5ce1cb,"openfl._internal.renderer.DrawCommandBuffer.clear","openfl/_internal/renderer/DrawCommandBuffer.hx",153,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 155)		this->types = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->types;
HXLINE( 157)		this->b = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->b;
HXLINE( 158)		this->i = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->i;
HXLINE( 159)		this->f = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->f;
HXLINE( 160)		this->o = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->o;
HXLINE( 161)		this->ff = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->ff;
HXLINE( 162)		this->ii = ::openfl::_internal::renderer::DrawCommandBuffer_obj::empty->ii;
HXLINE( 164)		this->copyOnWrite = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,clear,(void))

 ::openfl::_internal::renderer::DrawCommandBuffer DrawCommandBuffer_obj::copy(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","copy",0xc3289d37,"openfl._internal.renderer.DrawCommandBuffer.copy","openfl/_internal/renderer/DrawCommandBuffer.hx",169,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 171)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandBuffer,copy) =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
HXLINE( 172)		copy->append(hx::ObjectPtr<OBJ_>(this));
HXLINE( 173)		return copy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,copy,return )

void DrawCommandBuffer_obj::cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","cubicCurveTo",0x96d43b62,"openfl._internal.renderer.DrawCommandBuffer.cubicCurveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",178,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controlX1,"controlX1")
            	HX_STACK_ARG(controlY1,"controlY1")
            	HX_STACK_ARG(controlX2,"controlX2")
            	HX_STACK_ARG(controlY2,"controlY2")
            	HX_STACK_ARG(anchorX,"anchorX")
            	HX_STACK_ARG(anchorY,"anchorY")
HXLINE( 180)		this->prepareWrite();
HXLINE( 182)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn());
HXLINE( 183)		this->f->push(controlX1);
HXLINE( 184)		this->f->push(controlY1);
HXLINE( 185)		this->f->push(controlX2);
HXLINE( 186)		this->f->push(controlY2);
HXLINE( 187)		this->f->push(anchorX);
HXLINE( 188)		this->f->push(anchorY);
            	}


HX_DEFINE_DYNAMIC_FUNC6(DrawCommandBuffer_obj,cubicCurveTo,(void))

void DrawCommandBuffer_obj::curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","curveTo",0x1bf4dbc8,"openfl._internal.renderer.DrawCommandBuffer.curveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",192,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controlX,"controlX")
            	HX_STACK_ARG(controlY,"controlY")
            	HX_STACK_ARG(anchorX,"anchorX")
            	HX_STACK_ARG(anchorY,"anchorY")
HXLINE( 194)		this->prepareWrite();
HXLINE( 196)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn());
HXLINE( 197)		this->f->push(controlX);
HXLINE( 198)		this->f->push(controlY);
HXLINE( 199)		this->f->push(anchorX);
HXLINE( 200)		this->f->push(anchorY);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,curveTo,(void))

void DrawCommandBuffer_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","destroy",0x71f2a8b8,"openfl._internal.renderer.DrawCommandBuffer.destroy","openfl/_internal/renderer/DrawCommandBuffer.hx",205,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 207)		this->clear();
HXLINE( 209)		this->types = null();
HXLINE( 211)		this->b = null();
HXLINE( 212)		this->i = null();
HXLINE( 213)		this->f = null();
HXLINE( 214)		this->o = null();
HXLINE( 215)		this->ff = null();
HXLINE( 216)		this->ii = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,destroy,(void))

void DrawCommandBuffer_obj::drawCircle(Float x,Float y,Float radius){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawCircle",0x40b9dc36,"openfl._internal.renderer.DrawCommandBuffer.drawCircle","openfl/_internal/renderer/DrawCommandBuffer.hx",221,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
HXLINE( 223)		this->prepareWrite();
HXLINE( 225)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn());
HXLINE( 226)		this->f->push(x);
HXLINE( 227)		this->f->push(y);
HXLINE( 228)		this->f->push(radius);
            	}


HX_DEFINE_DYNAMIC_FUNC3(DrawCommandBuffer_obj,drawCircle,(void))

void DrawCommandBuffer_obj::drawEllipse(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawEllipse",0x77b6b7f8,"openfl._internal.renderer.DrawCommandBuffer.drawEllipse","openfl/_internal/renderer/DrawCommandBuffer.hx",233,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 235)		this->prepareWrite();
HXLINE( 237)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn());
HXLINE( 238)		this->f->push(x);
HXLINE( 239)		this->f->push(y);
HXLINE( 240)		this->f->push(width);
HXLINE( 241)		this->f->push(height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawEllipse,(void))

void DrawCommandBuffer_obj::drawRect(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawRect",0xd190c1ca,"openfl._internal.renderer.DrawCommandBuffer.drawRect","openfl/_internal/renderer/DrawCommandBuffer.hx",246,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 248)		this->prepareWrite();
HXLINE( 250)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn());
HXLINE( 251)		this->f->push(x);
HXLINE( 252)		this->f->push(y);
HXLINE( 253)		this->f->push(width);
HXLINE( 254)		this->f->push(height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawRect,(void))

void DrawCommandBuffer_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawRoundRect",0xb613a22c,"openfl._internal.renderer.DrawCommandBuffer.drawRoundRect","openfl/_internal/renderer/DrawCommandBuffer.hx",258,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(ellipseWidth,"ellipseWidth")
            	HX_STACK_ARG(ellipseHeight,"ellipseHeight")
HXLINE( 260)		this->prepareWrite();
HXLINE( 262)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn());
HXLINE( 263)		this->f->push(x);
HXLINE( 264)		this->f->push(y);
HXLINE( 265)		this->f->push(width);
HXLINE( 266)		this->f->push(height);
HXLINE( 267)		this->f->push(ellipseWidth);
HXLINE( 268)		this->o->push(ellipseHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC6(DrawCommandBuffer_obj,drawRoundRect,(void))

void DrawCommandBuffer_obj::drawTriangles( ::openfl::_Vector::FloatVector vertices, ::openfl::_Vector::IntVector indices, ::openfl::_Vector::FloatVector uvtData, ::Dynamic culling){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawTriangles",0xb1d12245,"openfl._internal.renderer.DrawCommandBuffer.drawTriangles","openfl/_internal/renderer/DrawCommandBuffer.hx",273,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(indices,"indices")
            	HX_STACK_ARG(uvtData,"uvtData")
            	HX_STACK_ARG(culling,"culling")
HXLINE( 275)		this->prepareWrite();
HXLINE( 277)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn());
HXLINE( 278)		this->o->push(vertices);
HXLINE( 279)		this->o->push(indices);
HXLINE( 280)		this->o->push(uvtData);
HXLINE( 281)		this->o->push(culling);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawTriangles,(void))

void DrawCommandBuffer_obj::endFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","endFill",0x734d03bc,"openfl._internal.renderer.DrawCommandBuffer.endFill","openfl/_internal/renderer/DrawCommandBuffer.hx",286,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 288)		this->prepareWrite();
HXLINE( 290)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,endFill,(void))

void DrawCommandBuffer_obj::lineBitmapStyle( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,Bool repeat,Bool smooth){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","lineBitmapStyle",0x6b2ca8ec,"openfl._internal.renderer.DrawCommandBuffer.lineBitmapStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",295,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE( 297)		this->prepareWrite();
HXLINE( 299)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn());
HXLINE( 300)		this->o->push(bitmap);
HXLINE( 301)		this->o->push(matrix);
HXLINE( 302)		this->b->push(repeat);
HXLINE( 303)		this->b->push(smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,lineBitmapStyle,(void))

void DrawCommandBuffer_obj::lineGradientStyle( ::Dynamic type,::Array< Int > colors,::Array< Float > alphas,::Array< Int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","lineGradientStyle",0x10f9f9cb,"openfl._internal.renderer.DrawCommandBuffer.lineGradientStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",308,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE( 310)		this->prepareWrite();
HXLINE( 312)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn());
HXLINE( 313)		this->o->push(type);
HXLINE( 314)		this->ii->push(colors);
HXLINE( 315)		this->ff->push(alphas);
HXLINE( 316)		this->ii->push(ratios);
HXLINE( 317)		this->o->push(matrix);
HXLINE( 318)		this->o->push(spreadMethod);
HXLINE( 319)		this->o->push(interpolationMethod);
HXLINE( 320)		this->f->push(focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,lineGradientStyle,(void))

void DrawCommandBuffer_obj::lineStyle( ::Dynamic thickness,Int color,Float alpha,Bool pixelHinting, ::Dynamic scaleMode, ::Dynamic caps, ::Dynamic joints,Float miterLimit){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","lineStyle",0xa96a0fdb,"openfl._internal.renderer.DrawCommandBuffer.lineStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",325,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thickness,"thickness")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
            	HX_STACK_ARG(pixelHinting,"pixelHinting")
            	HX_STACK_ARG(scaleMode,"scaleMode")
            	HX_STACK_ARG(caps,"caps")
            	HX_STACK_ARG(joints,"joints")
            	HX_STACK_ARG(miterLimit,"miterLimit")
HXLINE( 327)		this->prepareWrite();
HXLINE( 329)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn());
HXLINE( 330)		this->o->push(thickness);
HXLINE( 331)		this->i->push(color);
HXLINE( 332)		this->f->push(alpha);
HXLINE( 333)		this->b->push(pixelHinting);
HXLINE( 334)		this->o->push(scaleMode);
HXLINE( 335)		this->o->push(caps);
HXLINE( 336)		this->o->push(joints);
HXLINE( 337)		this->f->push(miterLimit);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,lineStyle,(void))

void DrawCommandBuffer_obj::lineTo(Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","lineTo",0x77e10c91,"openfl._internal.renderer.DrawCommandBuffer.lineTo","openfl/_internal/renderer/DrawCommandBuffer.hx",342,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 344)		this->prepareWrite();
HXLINE( 346)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn());
HXLINE( 347)		this->f->push(x);
HXLINE( 348)		this->f->push(y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,lineTo,(void))

void DrawCommandBuffer_obj::moveTo(Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","moveTo",0x57ed98ee,"openfl._internal.renderer.DrawCommandBuffer.moveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",353,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 355)		this->prepareWrite();
HXLINE( 357)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn());
HXLINE( 358)		this->f->push(x);
HXLINE( 359)		this->f->push(y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,moveTo,(void))

void DrawCommandBuffer_obj::prepareWrite(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","prepareWrite",0xac4d955a,"openfl._internal.renderer.DrawCommandBuffer.prepareWrite","openfl/_internal/renderer/DrawCommandBuffer.hx",366,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 366)		Bool _hx_tmp = this->copyOnWrite;
HXDLIN( 366)		if (_hx_tmp) {
HXLINE( 368)			this->types = this->types->copy();
HXLINE( 369)			this->b = this->b->copy();
HXLINE( 370)			this->i = this->i->copy();
HXLINE( 371)			this->f = this->f->copy();
HXLINE( 372)			this->o = this->o->copy();
HXLINE( 373)			this->ff = this->ff->copy();
HXLINE( 374)			this->ii = this->ii->copy();
HXLINE( 376)			this->copyOnWrite = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,prepareWrite,(void))

void DrawCommandBuffer_obj::overrideMatrix( ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","overrideMatrix",0xe20325af,"openfl._internal.renderer.DrawCommandBuffer.overrideMatrix","openfl/_internal/renderer/DrawCommandBuffer.hx",383,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 385)		this->prepareWrite();
HXLINE( 387)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_MATRIX_dyn());
HXLINE( 388)		this->o->push(matrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandBuffer_obj,overrideMatrix,(void))

Int DrawCommandBuffer_obj::get_length(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","get_length",0x3877f3b1,"openfl._internal.renderer.DrawCommandBuffer.get_length","openfl/_internal/renderer/DrawCommandBuffer.hx",402,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 402)		return this->types->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,get_length,return )

 ::openfl::_internal::renderer::DrawCommandBuffer DrawCommandBuffer_obj::empty;


DrawCommandBuffer_obj::DrawCommandBuffer_obj()
{
}

void DrawCommandBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DrawCommandBuffer);
	HX_MARK_MEMBER_NAME(types,"types");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(copyOnWrite,"copyOnWrite");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(ff,"ff");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(ii,"ii");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_END_CLASS();
}

void DrawCommandBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(types,"types");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(copyOnWrite,"copyOnWrite");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(ff,"ff");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(ii,"ii");
	HX_VISIT_MEMBER_NAME(o,"o");
}

hx::Val DrawCommandBuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f); }
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i); }
		if (HX_FIELD_EQ(inName,"o") ) { return hx::Val( o); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ff") ) { return hx::Val( ff); }
		if (HX_FIELD_EQ(inName,"ii") ) { return hx::Val( ii); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { return hx::Val( types); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn()); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return hx::Val( lineTo_dyn()); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curveTo") ) { return hx::Val( curveTo_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"endFill") ) { return hx::Val( endFill_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"beginFill") ) { return hx::Val( beginFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return hx::Val( lineStyle_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawCircle") ) { return hx::Val( drawCircle_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyOnWrite") ) { return hx::Val( copyOnWrite); }
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { return hx::Val( drawEllipse_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { return hx::Val( cubicCurveTo_dyn()); }
		if (HX_FIELD_EQ(inName,"prepareWrite") ) { return hx::Val( prepareWrite_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { return hx::Val( drawRoundRect_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"overrideMatrix") ) { return hx::Val( overrideMatrix_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"beginBitmapFill") ) { return hx::Val( beginBitmapFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineBitmapStyle") ) { return hx::Val( lineBitmapStyle_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return hx::Val( beginGradientFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineGradientStyle") ) { return hx::Val( lineGradientStyle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool DrawCommandBuffer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { outValue = empty; return true; }
	}
	return false;
}

hx::Val DrawCommandBuffer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< ::Array< Bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< ::Array< Int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ff") ) { ff=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ii") ) { ii=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"copyOnWrite") ) { copyOnWrite=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DrawCommandBuffer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"empty") ) { empty=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
	}
	return false;
}

void DrawCommandBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("copyOnWrite","\x0b","\x88","\xab","\xbc"));
	outFields->push(HX_HCSTRING("f","\x66","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ff","\x40","\x59","\x00","\x00"));
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("o","\x6f","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DrawCommandBuffer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,types),HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(DrawCommandBuffer_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsBool,(int)offsetof(DrawCommandBuffer_obj,copyOnWrite),HX_HCSTRING("copyOnWrite","\x0b","\x88","\xab","\xbc")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(DrawCommandBuffer_obj,f),HX_HCSTRING("f","\x66","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,ff),HX_HCSTRING("ff","\x40","\x59","\x00","\x00")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(DrawCommandBuffer_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,ii),HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(DrawCommandBuffer_obj,o),HX_HCSTRING("o","\x6f","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DrawCommandBuffer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &DrawCommandBuffer_obj::empty,HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DrawCommandBuffer_obj_sMemberFields[] = {
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("copyOnWrite","\x0b","\x88","\xab","\xbc"),
	HX_HCSTRING("f","\x66","\x00","\x00","\x00"),
	HX_HCSTRING("ff","\x40","\x59","\x00","\x00"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00"),
	HX_HCSTRING("o","\x6f","\x00","\x00","\x00"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("beginBitmapFill","\x9b","\xc9","\x07","\x6a"),
	HX_HCSTRING("beginFill","\x4c","\xad","\x95","\x8c"),
	HX_HCSTRING("beginGradientFill","\x5c","\x3c","\x03","\x2e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawEllipse","\x3a","\x85","\xce","\x54"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("lineBitmapStyle","\x2e","\x3f","\x21","\x45"),
	HX_HCSTRING("lineGradientStyle","\x8d","\x24","\xf2","\xc1"),
	HX_HCSTRING("lineStyle","\x9d","\xa8","\x18","\xcb"),
	HX_HCSTRING("lineTo","\x8f","\x46","\xa0","\xec"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("prepareWrite","\xd8","\x61","\x09","\x44"),
	HX_HCSTRING("overrideMatrix","\xad","\x8d","\xa9","\xb9"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	::String(null()) };

static void DrawCommandBuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DrawCommandBuffer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DrawCommandBuffer_obj::empty,"empty");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DrawCommandBuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DrawCommandBuffer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DrawCommandBuffer_obj::empty,"empty");
};

#endif

hx::Class DrawCommandBuffer_obj::__mClass;

static ::String DrawCommandBuffer_obj_sStaticFields[] = {
	HX_HCSTRING("empty","\x8d","\x3a","\xda","\x6f"),
	::String(null())
};

void DrawCommandBuffer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.DrawCommandBuffer","\x2c","\xee","\x3f","\x7e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DrawCommandBuffer_obj::__GetStatic;
	__mClass->mSetStaticField = &DrawCommandBuffer_obj::__SetStatic;
	__mClass->mMarkFunc = DrawCommandBuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DrawCommandBuffer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DrawCommandBuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DrawCommandBuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DrawCommandBuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DrawCommandBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DrawCommandBuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DrawCommandBuffer_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","boot",0xc27f65b4,"openfl._internal.renderer.DrawCommandBuffer.boot","openfl/_internal/renderer/DrawCommandBuffer.hx",23,0xbc8e6e11)
HXLINE(  23)		empty =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
