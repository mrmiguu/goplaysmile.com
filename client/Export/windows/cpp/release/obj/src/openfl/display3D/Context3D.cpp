// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_ExtensionAnisotropicFiltering
#include <lime/graphics/opengl/ExtensionAnisotropicFiltering.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLRenderbuffer
#include <lime/graphics/opengl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IntVector
#include <openfl/_Vector/IntVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_Context3DStateCache
#include <openfl/_internal/stage3D/Context3DStateCache.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_GLUtils
#include <openfl/_internal/stage3D/GLUtils.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_SamplerState
#include <openfl/_internal/stage3D/SamplerState.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Stage3D
#include <openfl/display/Stage3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_IndexBuffer3D
#include <openfl/display3D/IndexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DBufferUsage_Context3DBufferUsage_Impl_
#include <openfl/display3D/_Context3DBufferUsage/Context3DBufferUsage_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D__Context3DTextureFormat_Context3DTextureFormat_Impl_
#include <openfl/display3D/_Context3DTextureFormat/Context3DTextureFormat_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_CubeTexture
#include <openfl/display3D/textures/CubeTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_Texture
#include <openfl/display3D/textures/Texture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_VideoTexture
#include <openfl/display3D/textures/VideoTexture.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IllegalOperationError
#include <openfl/errors/IllegalOperationError.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_45_new,"openfl.display3D.Context3D","new",0x4f12c019,"openfl.display3D.Context3D.new","openfl/display3D/Context3D.hx",45,0xc899cbb9)
static const Float _hx_array_data_2fa0bfa7_3[] = {
	1.0,1.0,1.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_201_clear,"openfl.display3D.Context3D","clear",0xf8808186,"openfl.display3D.Context3D.clear","openfl/display3D/Context3D.hx",201,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_239_configureBackBuffer,"openfl.display3D.Context3D","configureBackBuffer",0x7210edc6,"openfl.display3D.Context3D.configureBackBuffer","openfl/display3D/Context3D.hx",239,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_257_createCubeTexture,"openfl.display3D.Context3D","createCubeTexture",0xbb69e843,"openfl.display3D.Context3D.createCubeTexture","openfl/display3D/Context3D.hx",257,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_264_createIndexBuffer,"openfl.display3D.Context3D","createIndexBuffer",0x3b80e18f,"openfl.display3D.Context3D.createIndexBuffer","openfl/display3D/Context3D.hx",264,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_271_createProgram,"openfl.display3D.Context3D","createProgram",0x0b5753e1,"openfl.display3D.Context3D.createProgram","openfl/display3D/Context3D.hx",271,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_278_createRectangleTexture,"openfl.display3D.Context3D","createRectangleTexture",0x8720f36f,"openfl.display3D.Context3D.createRectangleTexture","openfl/display3D/Context3D.hx",278,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_285_createTexture,"openfl.display3D.Context3D","createTexture",0xb63ed238,"openfl.display3D.Context3D.createTexture","openfl/display3D/Context3D.hx",285,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_292_createVertexBuffer,"openfl.display3D.Context3D","createVertexBuffer",0x49fb9507,"openfl.display3D.Context3D.createVertexBuffer","openfl/display3D/Context3D.hx",292,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_302_createVideoTexture,"openfl.display3D.Context3D","createVideoTexture",0x922f1723,"openfl.display3D.Context3D.createVideoTexture","openfl/display3D/Context3D.hx",302,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_308_dispose,"openfl.display3D.Context3D","dispose",0x8ad040d8,"openfl.display3D.Context3D.dispose","openfl/display3D/Context3D.hx",308,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_315_drawToBitmapData,"openfl.display3D.Context3D","drawToBitmapData",0x474f45df,"openfl.display3D.Context3D.drawToBitmapData","openfl/display3D/Context3D.hx",315,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_322_drawTriangles,"openfl.display3D.Context3D","drawTriangles",0x0d837500,"openfl.display3D.Context3D.drawTriangles","openfl/display3D/Context3D.hx",322,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_347_present,"openfl.display3D.Context3D","present",0x095ffb34,"openfl.display3D.Context3D.present","openfl/display3D/Context3D.hx",347,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_363_setBlendFactors,"openfl.display3D.Context3D","setBlendFactors",0x86d16c6e,"openfl.display3D.Context3D.setBlendFactors","openfl/display3D/Context3D.hx",363,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_378_setColorMask,"openfl.display3D.Context3D","setColorMask",0xad4f5d14,"openfl.display3D.Context3D.setColorMask","openfl/display3D/Context3D.hx",378,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_385_setCulling,"openfl.display3D.Context3D","setCulling",0x39687055,"openfl.display3D.Context3D.setCulling","openfl/display3D/Context3D.hx",385,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_419_setDepthTest,"openfl.display3D.Context3D","setDepthTest",0x2d08b41a,"openfl.display3D.Context3D.setDepthTest","openfl/display3D/Context3D.hx",419,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_466_setProgram,"openfl.display3D.Context3D","setProgram",0xd9d9d869,"openfl.display3D.Context3D.setProgram","openfl/display3D/Context3D.hx",466,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_494_setProgramConstantsFromByteArray,"openfl.display3D.Context3D","setProgramConstantsFromByteArray",0xd8990de1,"openfl.display3D.Context3D.setProgramConstantsFromByteArray","openfl/display3D/Context3D.hx",494,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_526_setProgramConstantsFromMatrix,"openfl.display3D.Context3D","setProgramConstantsFromMatrix",0x29e843d1,"openfl.display3D.Context3D.setProgramConstantsFromMatrix","openfl/display3D/Context3D.hx",526,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_588_setProgramConstantsFromVector,"openfl.display3D.Context3D","setProgramConstantsFromVector",0x057dbe53,"openfl.display3D.Context3D.setProgramConstantsFromVector","openfl/display3D/Context3D.hx",588,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_623_setRenderToBackBuffer,"openfl.display3D.Context3D","setRenderToBackBuffer",0x6095d693,"openfl.display3D.Context3D.setRenderToBackBuffer","openfl/display3D/Context3D.hx",623,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_648_setRenderToTexture,"openfl.display3D.Context3D","setRenderToTexture",0x25c5d54f,"openfl.display3D.Context3D.setRenderToTexture","openfl/display3D/Context3D.hx",648,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_773_setSamplerStateAt,"openfl.display3D.Context3D","setSamplerStateAt",0x9f8ad1f7,"openfl.display3D.Context3D.setSamplerStateAt","openfl/display3D/Context3D.hx",773,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_894_setScissorRectangle,"openfl.display3D.Context3D","setScissorRectangle",0x712bb5ee,"openfl.display3D.Context3D.setScissorRectangle","openfl/display3D/Context3D.hx",894,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_902_setStencilActions,"openfl.display3D.Context3D","setStencilActions",0x1fe08e1c,"openfl.display3D.Context3D.setStencilActions","openfl/display3D/Context3D.hx",902,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_911_setStencilReferenceValue,"openfl.display3D.Context3D","setStencilReferenceValue",0xaa284f67,"openfl.display3D.Context3D.setStencilReferenceValue","openfl/display3D/Context3D.hx",911,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_924_setTextureAt,"openfl.display3D.Context3D","setTextureAt",0x38d4bfd3,"openfl.display3D.Context3D.setTextureAt","openfl/display3D/Context3D.hx",924,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_936_setVertexBufferAt,"openfl.display3D.Context3D","setVertexBufferAt",0xbb32fa52,"openfl.display3D.Context3D.setVertexBufferAt","openfl/display3D/Context3D.hx",936,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_994___flushSamplerState,"openfl.display3D.Context3D","__flushSamplerState",0xbb488366,"openfl.display3D.Context3D.__flushSamplerState","openfl/display3D/Context3D.hx",994,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1040___getGLCompareMode,"openfl.display3D.Context3D","__getGLCompareMode",0xec8b55b4,"openfl.display3D.Context3D.__getGLCompareMode","openfl/display3D/Context3D.hx",1040,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1059___getGLStencilAction,"openfl.display3D.Context3D","__getGLStencilAction",0xdf4274de,"openfl.display3D.Context3D.__getGLStencilAction","openfl/display3D/Context3D.hx",1059,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1078___hasGLExtension,"openfl.display3D.Context3D","__hasGLExtension",0xeedeef47,"openfl.display3D.Context3D.__hasGLExtension","openfl/display3D/Context3D.hx",1078,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1083___setViewport,"openfl.display3D.Context3D","__setViewport",0x44998801,"openfl.display3D.Context3D.__setViewport","openfl/display3D/Context3D.hx",1083,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1097___statsAdd,"openfl.display3D.Context3D","__statsAdd",0x9eeb6dc9,"openfl.display3D.Context3D.__statsAdd","openfl/display3D/Context3D.hx",1097,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1107___statsClear,"openfl.display3D.Context3D","__statsClear",0xef112735,"openfl.display3D.Context3D.__statsClear","openfl/display3D/Context3D.hx",1107,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1114___statsDecrement,"openfl.display3D.Context3D","__statsDecrement",0xf8079fbb,"openfl.display3D.Context3D.__statsDecrement","openfl/display3D/Context3D.hx",1114,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1121___statsIncrement,"openfl.display3D.Context3D","__statsIncrement",0x1984afd7,"openfl.display3D.Context3D.__statsIncrement","openfl/display3D/Context3D.hx",1121,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1126___statsSendToTelemetry,"openfl.display3D.Context3D","__statsSendToTelemetry",0x95ec20be,"openfl.display3D.Context3D.__statsSendToTelemetry","openfl/display3D/Context3D.hx",1126,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1175___statsSubtract,"openfl.display3D.Context3D","__statsSubtract",0xc326b86c,"openfl.display3D.Context3D.__statsSubtract","openfl/display3D/Context3D.hx",1175,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1182___updateDepthAndStencilState,"openfl.display3D.Context3D","__updateDepthAndStencilState",0x7fba6d19,"openfl.display3D.Context3D.__updateDepthAndStencilState","openfl/display3D/Context3D.hx",1182,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1205___updateBlendFactors,"openfl.display3D.Context3D","__updateBlendFactors",0x00141f63,"openfl.display3D.Context3D.__updateBlendFactors","openfl/display3D/Context3D.hx",1205,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1253___updateScissorRectangle,"openfl.display3D.Context3D","__updateScissorRectangle",0x17db8763,"openfl.display3D.Context3D.__updateScissorRectangle","openfl/display3D/Context3D.hx",1253,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1300___updateBackbufferViewport,"openfl.display3D.Context3D","__updateBackbufferViewport",0x1ffcf0dd,"openfl.display3D.Context3D.__updateBackbufferViewport","openfl/display3D/Context3D.hx",1300,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_1311_set_enableErrorChecking,"openfl.display3D.Context3D","set_enableErrorChecking",0x101dce5b,"openfl.display3D.Context3D.set_enableErrorChecking","openfl/display3D/Context3D.hx",1311,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_48_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",48,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_50_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",50,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_51_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",51,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_52_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",52,0xc899cbb9)
HX_LOCAL_STACK_FRAME(_hx_pos_15a405ef6f3df6a7_54_boot,"openfl.display3D.Context3D","boot",0xd96e5659,"openfl.display3D.Context3D.boot","openfl/display3D/Context3D.hx",54,0xc899cbb9)
namespace openfl{
namespace display3D{

void Context3D_obj::__construct( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_45_new)
HXLINE(  63)		this->totalGPUMemory = (int)0;
HXLINE(  62)		this->profile = (int)0;
HXLINE(  59)		this->enableErrorChecking = false;
HXLINE(  58)		this->driverInfo = HX_("OpenGL (Direct blitting)",e6,33,c8,a6);
HXLINE(  57)		this->backBufferWidth = (int)0;
HXLINE(  56)		this->backBufferHeight = (int)0;
HXLINE( 104)		super::__construct(null());
HXLINE( 106)		this->_hx___stage3D = stage3D;
HXLINE( 107)		this->_hx___renderSession = renderSession;
HXLINE( 109)		 ::lime::utils::ArrayBufferView this1 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN( 109)		this->_hx___vertexConstants = this1;
HXLINE( 110)		 ::lime::utils::ArrayBufferView this2 =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)512,(int)8);
HXDLIN( 110)		this->_hx___fragmentConstants = this2;
HXLINE( 112)		::cpp::VirtualArray array = ::Array_obj< Float >::fromData( _hx_array_data_2fa0bfa7_3,4);
HXDLIN( 112)		 ::lime::utils::ArrayBufferView this3;
HXDLIN( 112)		if (hx::IsNotNull( array )) {
HXLINE( 112)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 112)			_this->byteOffset = (int)0;
HXDLIN( 112)			_this->length = array->get_length();
HXDLIN( 112)			_this->byteLength = (_this->length * _this->bytesPerElement);
HXDLIN( 112)			 ::haxe::io::Bytes this4 = ::haxe::io::Bytes_obj::alloc(_this->byteLength);
HXDLIN( 112)			_this->buffer = this4;
HXDLIN( 112)			_this->copyFromArray(array,null());
HXDLIN( 112)			this3 = _this;
            		}
            		else {
HXLINE( 112)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 112)		this->_hx___positionScale = this3;
HXLINE( 113)		this->_hx___samplerDirty = (int)0;
HXLINE( 114)		bool fixed = null();
HXDLIN( 114)		this->_hx___samplerTextures =  ::openfl::_Vector::ObjectVector_obj::__alloc( HX_CTX ,(int)8,fixed,null());
HXLINE( 115)		this->_hx___samplerStates = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 117)		{
HXLINE( 117)			int _g = (int)0;
HXDLIN( 117)			while((_g < (int)8)){
HXLINE( 117)				_g = (_g + (int)1);
HXDLIN( 117)				int i = (_g - (int)1);
HXLINE( 119)				::Array< ::Dynamic> _hx_tmp = this->_hx___samplerStates;
HXDLIN( 119)				_hx_tmp[i] =  ::openfl::_internal::stage3D::SamplerState_obj::__alloc( HX_CTX ,(int)9729,(int)9729,(int)33071,(int)33071,null(),null(),null(),null(),null());
            			}
            		}
HXLINE( 126)		this->maxBackBufferHeight = (this->maxBackBufferWidth = (int)16384);
HXLINE( 129)		this->_hx___backBufferAntiAlias = (int)0;
HXLINE( 130)		this->_hx___backBufferEnableDepthAndStencil = true;
HXLINE( 131)		this->_hx___backBufferWantsBestResolution = false;
HXLINE( 133)		this->_hx___frameCount = (int)0;
HXLINE( 134)		this->_hx___rttDepthAndStencil = false;
HXLINE( 135)		this->_hx___samplerDirty = (int)0;
HXLINE( 136)		this->_hx___stencilCompareMode = (int)0;
HXLINE( 137)		this->_hx___stencilRef = (int)0;
HXLINE( 138)		this->_hx___stencilReadMask = (int)255;
HXLINE( 150)		bool _hx_tmp1;
HXDLIN( 150)		if (!(this->_hx___hasGLExtension(HX_("GL_OES_packed_depth_stencil",15,ba,96,d2)))) {
HXLINE( 150)			_hx_tmp1 = this->_hx___hasGLExtension(HX_("GL_EXT_packed_depth_stencil",91,29,49,e0));
            		}
            		else {
HXLINE( 150)			_hx_tmp1 = true;
            		}
HXDLIN( 150)		this->_hx___supportsPackedDepthStencil = _hx_tmp1;
HXLINE( 151)		this->_hx___supportsAnisotropicFiltering = this->_hx___hasGLExtension(HX_("GL_EXT_texture_filter_anisotropic",66,5c,79,db));
HXLINE( 152)		if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 153)			int _hx_tmp2;
HXDLIN( 153)			if ((::lime::graphics::opengl::GL_obj::context->getTexParameter((int)3553,::lime::graphics::opengl::ExtensionAnisotropicFiltering_obj::TEXTURE_MAX_ANISOTROPY_EXT) != (int)0)) {
HXLINE( 153)				_hx_tmp2 = (int)16;
            			}
            			else {
HXLINE( 153)				_hx_tmp2 = (int)1;
            			}
HXDLIN( 153)			this->_hx___maxAnisotropyTexture2D = _hx_tmp2;
HXLINE( 154)			int _hx_tmp3;
HXDLIN( 154)			if ((::lime::graphics::opengl::GL_obj::context->getTexParameter((int)3553,::lime::graphics::opengl::ExtensionAnisotropicFiltering_obj::TEXTURE_MAX_ANISOTROPY_EXT) != (int)0)) {
HXLINE( 154)				_hx_tmp3 = (int)16;
            			}
            			else {
HXLINE( 154)				_hx_tmp3 = (int)1;
            			}
HXDLIN( 154)			this->_hx___maxAnisotropyCubeTexture = _hx_tmp3;
            		}
HXLINE( 158)		bool fixed1 = null();
HXDLIN( 158)		this->_hx___stats =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,(int)11,fixed1,null());
HXLINE( 159)		bool fixed2 = null();
HXDLIN( 159)		this->_hx___statsCache =  ::openfl::_Vector::IntVector_obj::__alloc( HX_CTX ,(int)11,fixed2,null());
HXLINE( 166)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 168)		::String vendor = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7936)) );
HXLINE( 169)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 171)		::String version = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7938)) );
HXLINE( 172)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 174)		::String renderer = ( (::String)(::lime::graphics::opengl::GL_obj::context->getParameter((int)7937)) );
HXLINE( 175)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 177)		::String glslVersion = HX_("<unknown>",b0,91,d8,da);
HXLINE( 178)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 180)		this->driverInfo = ((((((((HX_("OpenGL",8f,bc,28,56) + HX_(" Vendor=",75,5d,11,19)) + vendor) + HX_(" Version=",65,2a,97,0e)) + version) + HX_(" Renderer=",5a,b1,92,78)) + renderer) + HX_(" GLSL=",5f,30,5a,df)) + glslVersion);
HXLINE( 190)		{
HXLINE( 190)			int _g1 = (int)0;
HXDLIN( 190)			int _g2 = this->_hx___stats->get_length();
HXDLIN( 190)			while((_g1 < _g2)){
HXLINE( 190)				_g1 = (_g1 + (int)1);
HXDLIN( 190)				int i1 = (_g1 - (int)1);
HXLINE( 192)				this->_hx___stats->set(i1,(int)0);
            			}
            		}
HXLINE( 196)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}

Dynamic Context3D_obj::__CreateEmpty() { return new Context3D_obj; }

void *Context3D_obj::_hx_vtable = 0;

Dynamic Context3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3D_obj > _hx_result = new Context3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Context3D_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1b123bf8;
	} else {
		return inClassId==(int)0x6271873d;
	}
}

void Context3D_obj::clear(hx::Null< Float >  __o_red,hx::Null< Float >  __o_green,hx::Null< Float >  __o_blue,hx::Null< Float >  __o_alpha,hx::Null< Float >  __o_depth,hx::Null< int >  __o_stencil,hx::Null< int >  __o_mask){
Float red = __o_red.Default(0);
Float green = __o_green.Default(0);
Float blue = __o_blue.Default(0);
Float alpha = __o_alpha.Default(1);
Float depth = __o_depth.Default(1);
int stencil = __o_stencil.Default(0);
int mask = __o_mask.Default(7);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_201_clear)
HXLINE( 203)		int clearMask = (int)0;
HXLINE( 205)		if ((((int)mask & (int)(int)1) != (int)0)) {
HXLINE( 207)			clearMask = ((int)clearMask | (int)(int)16384);
HXLINE( 209)			::lime::graphics::opengl::GL_obj::context->clearColor(red,green,blue,alpha);
HXLINE( 210)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 214)		if ((((int)mask & (int)(int)2) != (int)0)) {
HXLINE( 216)			clearMask = ((int)clearMask | (int)(int)256);
HXLINE( 218)			::lime::graphics::opengl::GL_obj::context->depthMask(true);
HXLINE( 219)			::lime::graphics::opengl::GL_obj::context->clearDepth(depth);
HXLINE( 220)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 224)		if ((((int)mask & (int)(int)4) != (int)0)) {
HXLINE( 226)			clearMask = ((int)clearMask | (int)(int)1024);
HXLINE( 228)			::lime::graphics::opengl::GL_obj::context->clearStencil(stencil);
HXLINE( 229)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 233)		::lime::graphics::opengl::GL_obj::context->clear(clearMask);
HXLINE( 234)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC7(Context3D_obj,clear,(void))

void Context3D_obj::configureBackBuffer(int width,int height,int antiAlias,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< bool >  __o_wantsBestResolution,hx::Null< bool >  __o_wantsBestResolutionOnBrowserZoom){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(true);
bool wantsBestResolution = __o_wantsBestResolution.Default(false);
bool wantsBestResolutionOnBrowserZoom = __o_wantsBestResolutionOnBrowserZoom.Default(false);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_239_configureBackBuffer)
HXLINE( 241)		this->_hx___updateBackbufferViewport();
HXLINE( 243)		this->backBufferWidth = width;
HXLINE( 244)		this->backBufferHeight = height;
HXLINE( 246)		this->_hx___backBufferAntiAlias = antiAlias;
HXLINE( 247)		this->_hx___backBufferEnableDepthAndStencil = enableDepthAndStencil;
HXLINE( 248)		this->_hx___backBufferWantsBestResolution = wantsBestResolution;
HXLINE( 250)		::openfl::display3D::Context3D_obj::_hx___stateCache->clearSettings();
            	}


HX_DEFINE_DYNAMIC_FUNC6(Context3D_obj,configureBackBuffer,(void))

 ::openfl::display3D::textures::CubeTexture Context3D_obj::createCubeTexture(int size, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_257_createCubeTexture)
HXLINE( 257)		return  ::openfl::display3D::textures::CubeTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),size,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createCubeTexture,return )

 ::openfl::display3D::IndexBuffer3D Context3D_obj::createIndexBuffer(int numIndices, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_264_createIndexBuffer)
HXLINE( 264)		return  ::openfl::display3D::IndexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numIndices,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,createIndexBuffer,return )

 ::openfl::display3D::Program3D Context3D_obj::createProgram(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_271_createProgram)
HXLINE( 271)		return  ::openfl::display3D::Program3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createProgram,return )

 ::openfl::display3D::textures::RectangleTexture Context3D_obj::createRectangleTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_278_createRectangleTexture)
HXLINE( 278)		return  ::openfl::display3D::textures::RectangleTexture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,::openfl::display3D::_Context3DTextureFormat::Context3DTextureFormat_Impl__obj::toString(format),optimizeForRenderToTexture);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,createRectangleTexture,return )

 ::openfl::display3D::textures::Texture Context3D_obj::createTexture(int width,int height, ::Dynamic format,bool optimizeForRenderToTexture,hx::Null< int >  __o_streamingLevels){
int streamingLevels = __o_streamingLevels.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_285_createTexture)
HXLINE( 285)		return  ::openfl::display3D::textures::Texture_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),width,height,format,optimizeForRenderToTexture,streamingLevels);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,createTexture,return )

 ::openfl::display3D::VertexBuffer3D Context3D_obj::createVertexBuffer(int numVertices,int data32PerVertex, ::Dynamic __o_bufferUsage){
 ::Dynamic bufferUsage = __o_bufferUsage.Default(1);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_292_createVertexBuffer)
HXLINE( 292)		return  ::openfl::display3D::VertexBuffer3D_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this),numVertices,data32PerVertex,::openfl::display3D::_Context3DBufferUsage::Context3DBufferUsage_Impl__obj::toString(bufferUsage));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,createVertexBuffer,return )

 ::openfl::display3D::textures::VideoTexture Context3D_obj::createVideoTexture(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_302_createVideoTexture)
HXLINE( 302)		HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Video textures are not supported on this platform",02,cd,86,ca),null()));
HXDLIN( 302)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,createVideoTexture,return )

void Context3D_obj::dispose(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_308_dispose)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,dispose,(void))

void Context3D_obj::drawToBitmapData( ::openfl::display::BitmapData destination){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_315_drawToBitmapData)
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,drawToBitmapData,(void))

void Context3D_obj::drawTriangles( ::openfl::display3D::IndexBuffer3D indexBuffer,hx::Null< int >  __o_firstIndex,hx::Null< int >  __o_numTriangles){
int firstIndex = __o_firstIndex.Default(0);
int numTriangles = __o_numTriangles.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_322_drawTriangles)
HXLINE( 324)		if (hx::IsNull( this->_hx___program )) {
HXLINE( 326)			return;
            		}
HXLINE( 330)		this->_hx___flushSamplerState();
HXLINE( 331)		this->_hx___program->_hx___flush();
HXLINE( 333)		int count;
HXDLIN( 333)		if ((numTriangles == (int)-1)) {
HXLINE( 333)			count = indexBuffer->_hx___numIndices;
            		}
            		else {
HXLINE( 333)			count = (numTriangles * (int)3);
            		}
HXLINE( 335)		::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34963,indexBuffer->_hx___id);
HXLINE( 336)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 338)		::lime::graphics::opengl::GL_obj::context->drawElements((int)4,count,indexBuffer->_hx___elementType,firstIndex);
HXLINE( 339)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 341)		this->_hx___statsIncrement((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,drawTriangles,(void))

void Context3D_obj::present(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_347_present)
HXLINE( 349)		this->_hx___statsSendToTelemetry();
HXLINE( 356)		this->_hx___statsClear((int)0);
HXLINE( 358)		this->_hx___frameCount++;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,present,(void))

void Context3D_obj::setBlendFactors( ::Dynamic sourceFactor, ::Dynamic destinationFactor){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_363_setBlendFactors)
HXLINE( 365)		bool updateSrc = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendSrcFactor(sourceFactor);
HXLINE( 366)		bool updateDest = ::openfl::display3D::Context3D_obj::_hx___stateCache->updateBlendDestFactor(destinationFactor);
HXLINE( 367)		bool _hx_tmp;
HXDLIN( 367)		if (!(updateSrc)) {
HXLINE( 367)			_hx_tmp = updateDest;
            		}
            		else {
HXLINE( 367)			_hx_tmp = true;
            		}
HXDLIN( 367)		if (_hx_tmp) {
HXLINE( 369)			this->_hx___updateBlendFactors();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setBlendFactors,(void))

void Context3D_obj::setColorMask(bool red,bool green,bool blue,bool alpha){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_378_setColorMask)
HXLINE( 378)		::lime::graphics::opengl::GL_obj::context->colorMask(red,green,blue,alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setColorMask,(void))

void Context3D_obj::setCulling( ::Dynamic triangleFaceToCull){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_385_setCulling)
HXLINE( 385)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateCullingMode(triangleFaceToCull)) {
HXLINE( 387)			 ::Dynamic _hx_switch_0 = triangleFaceToCull;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 395)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 396)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1028);
HXLINE( 393)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 400)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 401)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1029);
HXLINE( 398)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 405)				::lime::graphics::opengl::GL_obj::context->enable((int)2884);
HXLINE( 406)				::lime::graphics::opengl::GL_obj::context->cullFace((int)1032);
HXLINE( 403)				goto _hx_goto_19;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 391)				::lime::graphics::opengl::GL_obj::context->disable((int)2884);
HXDLIN( 391)				goto _hx_goto_19;
            			}
            			/* default */{
HXLINE( 410)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_19:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setCulling,(void))

void Context3D_obj::setDepthTest(bool depthMask, ::Dynamic passCompareMode){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_419_setDepthTest)
HXLINE( 421)		bool depthTestEnabled = this->_hx___backBufferEnableDepthAndStencil;
HXLINE( 423)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestEnabled(depthTestEnabled)) {
HXLINE( 425)			if (depthTestEnabled) {
HXLINE( 427)				::lime::graphics::opengl::GL_obj::context->enable((int)2929);
            			}
            			else {
HXLINE( 431)				::lime::graphics::opengl::GL_obj::context->disable((int)2929);
            			}
            		}
HXLINE( 437)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthTestMask(depthMask)) {
HXLINE( 439)			::lime::graphics::opengl::GL_obj::context->depthMask(depthMask);
            		}
HXLINE( 443)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateDepthCompareMode(passCompareMode)) {
HXLINE( 445)			 ::Dynamic _hx_switch_0 = passCompareMode;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE( 447)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)519);
HXDLIN( 447)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE( 448)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)514);
HXDLIN( 448)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE( 449)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)516);
HXDLIN( 449)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE( 450)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)518);
HXDLIN( 450)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE( 451)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)513);
HXDLIN( 451)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE( 452)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)515);
HXDLIN( 452)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)6) ){
HXLINE( 453)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)512);
HXDLIN( 453)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE( 454)				::lime::graphics::opengl::GL_obj::context->depthFunc((int)517);
HXDLIN( 454)				goto _hx_goto_21;
            			}
            			/* default */{
HXLINE( 457)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_21:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setDepthTest,(void))

void Context3D_obj::setProgram( ::openfl::display3D::Program3D program){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_466_setProgram)
HXLINE( 468)		if (hx::IsNull( program )) {
HXLINE( 470)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
HXLINE( 474)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateProgram3D(program)) {
HXLINE( 476)			program->_hx___use();
HXLINE( 477)			program->_hx___setPositionScale(this->_hx___positionScale);
HXLINE( 479)			this->_hx___program = program;
HXLINE( 481)			 ::openfl::display3D::Context3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 481)			_hx_tmp->_hx___samplerDirty = ((int)_hx_tmp->_hx___samplerDirty | (int)this->_hx___program->_hx___samplerUsageMask);
HXLINE( 483)			{
HXLINE( 483)				int _g = (int)0;
HXDLIN( 483)				while((_g < (int)8)){
HXLINE( 483)					_g = (_g + (int)1);
HXDLIN( 483)					int i = (_g - (int)1);
HXLINE( 485)					 ::openfl::_internal::stage3D::SamplerState _hx_tmp1 = this->_hx___samplerStates->__get(i).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXDLIN( 485)					_hx_tmp1->copyFrom(this->_hx___program->_hx___getSamplerState(i));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setProgram,(void))

void Context3D_obj::setProgramConstantsFromByteArray( ::Dynamic programType,int firstRegister,int numRegisters, ::openfl::utils::ByteArrayData data,int byteArrayOffset){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_494_setProgramConstantsFromByteArray)
HXLINE( 496)		if ((numRegisters == (int)0)) {
HXLINE( 496)			return;
            		}
HXLINE( 498)		if ((numRegisters == (int)-1)) {
HXLINE( 500)			numRegisters = (((int)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data) >> (int)(int)2) - byteArrayOffset);
            		}
HXLINE( 504)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 505)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 505)		if (isVertex) {
HXLINE( 505)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 505)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 507)		 ::haxe::io::Bytes bytes = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(data);
HXDLIN( 507)		 ::Dynamic len = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(data);
HXDLIN( 507)		 ::lime::utils::ArrayBufferView this1;
HXDLIN( 507)		if (hx::IsNotNull( bytes )) {
HXLINE( 507)			 ::lime::utils::ArrayBufferView _this =  ::lime::utils::ArrayBufferView_obj::__alloc( HX_CTX ,(int)0,(int)8);
HXDLIN( 507)			if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE( 507)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 507)			int bufferByteLength = bytes->length;
HXDLIN( 507)			int elementSize = _this->bytesPerElement;
HXDLIN( 507)			int newByteLength = bufferByteLength;
HXDLIN( 507)			if (hx::IsNull( len )) {
HXLINE( 507)				newByteLength = bufferByteLength;
HXDLIN( 507)				if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 507)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 507)				if ((newByteLength < (int)0)) {
HXLINE( 507)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
            			else {
HXLINE( 507)				newByteLength = (len * _this->bytesPerElement);
HXDLIN( 507)				int newRange = newByteLength;
HXDLIN( 507)				if ((newRange > bufferByteLength)) {
HXLINE( 507)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 507)			_this->buffer = bytes;
HXDLIN( 507)			_this->byteOffset = (int)0;
HXDLIN( 507)			_this->byteLength = newByteLength;
HXDLIN( 507)			_this->length = ::Std_obj::_hx_int(((Float)newByteLength / (Float)_this->bytesPerElement));
HXDLIN( 507)			this1 = _this;
            		}
            		else {
HXLINE( 507)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 507)		 ::lime::utils::ArrayBufferView floatData = this1;
HXLINE( 508)		int outOffset = (firstRegister * (int)4);
HXLINE( 509)		int _hx_int = byteArrayOffset;
HXDLIN( 509)		Float inOffset;
HXDLIN( 509)		if ((_hx_int < (int)0)) {
HXLINE( 509)			inOffset = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 509)			inOffset = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 509)		int int1 = (int)4;
HXDLIN( 509)		Float inOffset1;
HXDLIN( 509)		if ((int1 < (int)0)) {
HXLINE( 509)			inOffset1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXLINE( 509)			inOffset1 = (int1 + ((Float)0.0));
            		}
HXDLIN( 509)		int inOffset2 = ::Std_obj::_hx_int(((Float)inOffset / (Float)inOffset1));
HXLINE( 511)		{
HXLINE( 511)			int _g1 = (int)0;
HXDLIN( 511)			int _g = (numRegisters * (int)4);
HXDLIN( 511)			while((_g1 < _g)){
HXLINE( 511)				_g1 = (_g1 + (int)1);
HXDLIN( 511)				int i = (_g1 - (int)1);
HXLINE( 513)				{
HXLINE( 513)					int floatData1 = floatData->byteOffset;
HXDLIN( 513)					Float val = ::__hxcpp_memory_get_float(floatData->buffer->b,(floatData1 + ((inOffset2 + i) * (int)4)));
HXDLIN( 513)					{
HXLINE( 513)						int dest1 = dest->byteOffset;
HXDLIN( 513)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((outOffset + i) * (int)4)),val);
            					}
            				}
            			}
            		}
HXLINE( 517)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 519)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setProgramConstantsFromByteArray,(void))

void Context3D_obj::setProgramConstantsFromMatrix( ::Dynamic programType,int firstRegister, ::openfl::geom::Matrix3D matrix,hx::Null< bool >  __o_transposedMatrix){
bool transposedMatrix = __o_transposedMatrix.Default(false);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_526_setProgramConstantsFromMatrix)
HXLINE( 528)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 529)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 529)		if (isVertex) {
HXLINE( 529)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 529)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 530)		 ::openfl::_Vector::FloatVector source = matrix->rawData;
HXLINE( 531)		int i = (firstRegister * (int)4);
HXLINE( 533)		if (transposedMatrix) {
HXLINE( 535)			{
HXLINE( 535)				i = (i + (int)1);
HXDLIN( 535)				Float val = source->get((int)0);
HXDLIN( 535)				{
HXLINE( 535)					int dest1 = dest->byteOffset;
HXDLIN( 535)					::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((i - (int)1) * (int)4)),val);
            				}
            			}
HXLINE( 536)			{
HXLINE( 536)				i = (i + (int)1);
HXDLIN( 536)				Float val1 = source->get((int)4);
HXDLIN( 536)				{
HXLINE( 536)					int dest2 = dest->byteOffset;
HXDLIN( 536)					::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((i - (int)1) * (int)4)),val1);
            				}
            			}
HXLINE( 537)			{
HXLINE( 537)				i = (i + (int)1);
HXDLIN( 537)				Float val2 = source->get((int)8);
HXDLIN( 537)				{
HXLINE( 537)					int dest3 = dest->byteOffset;
HXDLIN( 537)					::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((i - (int)1) * (int)4)),val2);
            				}
            			}
HXLINE( 538)			{
HXLINE( 538)				i = (i + (int)1);
HXDLIN( 538)				Float val3 = source->get((int)12);
HXDLIN( 538)				{
HXLINE( 538)					int dest4 = dest->byteOffset;
HXDLIN( 538)					::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((i - (int)1) * (int)4)),val3);
            				}
            			}
HXLINE( 540)			{
HXLINE( 540)				i = (i + (int)1);
HXDLIN( 540)				Float val4 = source->get((int)1);
HXDLIN( 540)				{
HXLINE( 540)					int dest5 = dest->byteOffset;
HXDLIN( 540)					::__hxcpp_memory_set_float(dest->buffer->b,(dest5 + ((i - (int)1) * (int)4)),val4);
            				}
            			}
HXLINE( 541)			{
HXLINE( 541)				i = (i + (int)1);
HXDLIN( 541)				Float val5 = source->get((int)5);
HXDLIN( 541)				{
HXLINE( 541)					int dest6 = dest->byteOffset;
HXDLIN( 541)					::__hxcpp_memory_set_float(dest->buffer->b,(dest6 + ((i - (int)1) * (int)4)),val5);
            				}
            			}
HXLINE( 542)			{
HXLINE( 542)				i = (i + (int)1);
HXDLIN( 542)				Float val6 = source->get((int)9);
HXDLIN( 542)				{
HXLINE( 542)					int dest7 = dest->byteOffset;
HXDLIN( 542)					::__hxcpp_memory_set_float(dest->buffer->b,(dest7 + ((i - (int)1) * (int)4)),val6);
            				}
            			}
HXLINE( 543)			{
HXLINE( 543)				i = (i + (int)1);
HXDLIN( 543)				Float val7 = source->get((int)13);
HXDLIN( 543)				{
HXLINE( 543)					int dest8 = dest->byteOffset;
HXDLIN( 543)					::__hxcpp_memory_set_float(dest->buffer->b,(dest8 + ((i - (int)1) * (int)4)),val7);
            				}
            			}
HXLINE( 545)			{
HXLINE( 545)				i = (i + (int)1);
HXDLIN( 545)				Float val8 = source->get((int)2);
HXDLIN( 545)				{
HXLINE( 545)					int dest9 = dest->byteOffset;
HXDLIN( 545)					::__hxcpp_memory_set_float(dest->buffer->b,(dest9 + ((i - (int)1) * (int)4)),val8);
            				}
            			}
HXLINE( 546)			{
HXLINE( 546)				i = (i + (int)1);
HXDLIN( 546)				Float val9 = source->get((int)6);
HXDLIN( 546)				{
HXLINE( 546)					int dest10 = dest->byteOffset;
HXDLIN( 546)					::__hxcpp_memory_set_float(dest->buffer->b,(dest10 + ((i - (int)1) * (int)4)),val9);
            				}
            			}
HXLINE( 547)			{
HXLINE( 547)				i = (i + (int)1);
HXDLIN( 547)				Float val10 = source->get((int)10);
HXDLIN( 547)				{
HXLINE( 547)					int dest11 = dest->byteOffset;
HXDLIN( 547)					::__hxcpp_memory_set_float(dest->buffer->b,(dest11 + ((i - (int)1) * (int)4)),val10);
            				}
            			}
HXLINE( 548)			{
HXLINE( 548)				i = (i + (int)1);
HXDLIN( 548)				Float val11 = source->get((int)14);
HXDLIN( 548)				{
HXLINE( 548)					int dest12 = dest->byteOffset;
HXDLIN( 548)					::__hxcpp_memory_set_float(dest->buffer->b,(dest12 + ((i - (int)1) * (int)4)),val11);
            				}
            			}
HXLINE( 550)			{
HXLINE( 550)				i = (i + (int)1);
HXDLIN( 550)				Float val12 = source->get((int)3);
HXDLIN( 550)				{
HXLINE( 550)					int dest13 = dest->byteOffset;
HXDLIN( 550)					::__hxcpp_memory_set_float(dest->buffer->b,(dest13 + ((i - (int)1) * (int)4)),val12);
            				}
            			}
HXLINE( 551)			{
HXLINE( 551)				i = (i + (int)1);
HXDLIN( 551)				Float val13 = source->get((int)7);
HXDLIN( 551)				{
HXLINE( 551)					int dest14 = dest->byteOffset;
HXDLIN( 551)					::__hxcpp_memory_set_float(dest->buffer->b,(dest14 + ((i - (int)1) * (int)4)),val13);
            				}
            			}
HXLINE( 552)			{
HXLINE( 552)				i = (i + (int)1);
HXDLIN( 552)				Float val14 = source->get((int)11);
HXDLIN( 552)				{
HXLINE( 552)					int dest15 = dest->byteOffset;
HXDLIN( 552)					::__hxcpp_memory_set_float(dest->buffer->b,(dest15 + ((i - (int)1) * (int)4)),val14);
            				}
            			}
HXLINE( 553)			{
HXLINE( 553)				i = (i + (int)1);
HXDLIN( 553)				Float val15 = source->get((int)15);
HXDLIN( 553)				{
HXLINE( 553)					int dest16 = dest->byteOffset;
HXDLIN( 553)					::__hxcpp_memory_set_float(dest->buffer->b,(dest16 + ((i - (int)1) * (int)4)),val15);
            				}
            			}
            		}
            		else {
HXLINE( 557)			{
HXLINE( 557)				i = (i + (int)1);
HXDLIN( 557)				Float val16 = source->get((int)0);
HXDLIN( 557)				{
HXLINE( 557)					int dest17 = dest->byteOffset;
HXDLIN( 557)					::__hxcpp_memory_set_float(dest->buffer->b,(dest17 + ((i - (int)1) * (int)4)),val16);
            				}
            			}
HXLINE( 558)			{
HXLINE( 558)				i = (i + (int)1);
HXDLIN( 558)				Float val17 = source->get((int)1);
HXDLIN( 558)				{
HXLINE( 558)					int dest18 = dest->byteOffset;
HXDLIN( 558)					::__hxcpp_memory_set_float(dest->buffer->b,(dest18 + ((i - (int)1) * (int)4)),val17);
            				}
            			}
HXLINE( 559)			{
HXLINE( 559)				i = (i + (int)1);
HXDLIN( 559)				Float val18 = source->get((int)2);
HXDLIN( 559)				{
HXLINE( 559)					int dest19 = dest->byteOffset;
HXDLIN( 559)					::__hxcpp_memory_set_float(dest->buffer->b,(dest19 + ((i - (int)1) * (int)4)),val18);
            				}
            			}
HXLINE( 560)			{
HXLINE( 560)				i = (i + (int)1);
HXDLIN( 560)				Float val19 = source->get((int)3);
HXDLIN( 560)				{
HXLINE( 560)					int dest20 = dest->byteOffset;
HXDLIN( 560)					::__hxcpp_memory_set_float(dest->buffer->b,(dest20 + ((i - (int)1) * (int)4)),val19);
            				}
            			}
HXLINE( 562)			{
HXLINE( 562)				i = (i + (int)1);
HXDLIN( 562)				Float val20 = source->get((int)4);
HXDLIN( 562)				{
HXLINE( 562)					int dest21 = dest->byteOffset;
HXDLIN( 562)					::__hxcpp_memory_set_float(dest->buffer->b,(dest21 + ((i - (int)1) * (int)4)),val20);
            				}
            			}
HXLINE( 563)			{
HXLINE( 563)				i = (i + (int)1);
HXDLIN( 563)				Float val21 = source->get((int)5);
HXDLIN( 563)				{
HXLINE( 563)					int dest22 = dest->byteOffset;
HXDLIN( 563)					::__hxcpp_memory_set_float(dest->buffer->b,(dest22 + ((i - (int)1) * (int)4)),val21);
            				}
            			}
HXLINE( 564)			{
HXLINE( 564)				i = (i + (int)1);
HXDLIN( 564)				Float val22 = source->get((int)6);
HXDLIN( 564)				{
HXLINE( 564)					int dest23 = dest->byteOffset;
HXDLIN( 564)					::__hxcpp_memory_set_float(dest->buffer->b,(dest23 + ((i - (int)1) * (int)4)),val22);
            				}
            			}
HXLINE( 565)			{
HXLINE( 565)				i = (i + (int)1);
HXDLIN( 565)				Float val23 = source->get((int)7);
HXDLIN( 565)				{
HXLINE( 565)					int dest24 = dest->byteOffset;
HXDLIN( 565)					::__hxcpp_memory_set_float(dest->buffer->b,(dest24 + ((i - (int)1) * (int)4)),val23);
            				}
            			}
HXLINE( 567)			{
HXLINE( 567)				i = (i + (int)1);
HXDLIN( 567)				Float val24 = source->get((int)8);
HXDLIN( 567)				{
HXLINE( 567)					int dest25 = dest->byteOffset;
HXDLIN( 567)					::__hxcpp_memory_set_float(dest->buffer->b,(dest25 + ((i - (int)1) * (int)4)),val24);
            				}
            			}
HXLINE( 568)			{
HXLINE( 568)				i = (i + (int)1);
HXDLIN( 568)				Float val25 = source->get((int)9);
HXDLIN( 568)				{
HXLINE( 568)					int dest26 = dest->byteOffset;
HXDLIN( 568)					::__hxcpp_memory_set_float(dest->buffer->b,(dest26 + ((i - (int)1) * (int)4)),val25);
            				}
            			}
HXLINE( 569)			{
HXLINE( 569)				i = (i + (int)1);
HXDLIN( 569)				Float val26 = source->get((int)10);
HXDLIN( 569)				{
HXLINE( 569)					int dest27 = dest->byteOffset;
HXDLIN( 569)					::__hxcpp_memory_set_float(dest->buffer->b,(dest27 + ((i - (int)1) * (int)4)),val26);
            				}
            			}
HXLINE( 570)			{
HXLINE( 570)				i = (i + (int)1);
HXDLIN( 570)				Float val27 = source->get((int)11);
HXDLIN( 570)				{
HXLINE( 570)					int dest28 = dest->byteOffset;
HXDLIN( 570)					::__hxcpp_memory_set_float(dest->buffer->b,(dest28 + ((i - (int)1) * (int)4)),val27);
            				}
            			}
HXLINE( 572)			{
HXLINE( 572)				i = (i + (int)1);
HXDLIN( 572)				Float val28 = source->get((int)12);
HXDLIN( 572)				{
HXLINE( 572)					int dest29 = dest->byteOffset;
HXDLIN( 572)					::__hxcpp_memory_set_float(dest->buffer->b,(dest29 + ((i - (int)1) * (int)4)),val28);
            				}
            			}
HXLINE( 573)			{
HXLINE( 573)				i = (i + (int)1);
HXDLIN( 573)				Float val29 = source->get((int)13);
HXDLIN( 573)				{
HXLINE( 573)					int dest30 = dest->byteOffset;
HXDLIN( 573)					::__hxcpp_memory_set_float(dest->buffer->b,(dest30 + ((i - (int)1) * (int)4)),val29);
            				}
            			}
HXLINE( 574)			{
HXLINE( 574)				i = (i + (int)1);
HXDLIN( 574)				Float val30 = source->get((int)14);
HXDLIN( 574)				{
HXLINE( 574)					int dest31 = dest->byteOffset;
HXDLIN( 574)					::__hxcpp_memory_set_float(dest->buffer->b,(dest31 + ((i - (int)1) * (int)4)),val30);
            				}
            			}
HXLINE( 575)			{
HXLINE( 575)				i = (i + (int)1);
HXDLIN( 575)				Float val31 = source->get((int)15);
HXDLIN( 575)				{
HXLINE( 575)					int dest32 = dest->byteOffset;
HXDLIN( 575)					::__hxcpp_memory_set_float(dest->buffer->b,(dest32 + ((i - (int)1) * (int)4)),val31);
            				}
            			}
            		}
HXLINE( 579)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 581)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,(int)4);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromMatrix,(void))

void Context3D_obj::setProgramConstantsFromVector( ::Dynamic programType,int firstRegister, ::openfl::_Vector::FloatVector data,hx::Null< int >  __o_numRegisters){
int numRegisters = __o_numRegisters.Default(-1);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_588_setProgramConstantsFromVector)
HXLINE( 590)		if ((numRegisters == (int)0)) {
HXLINE( 590)			return;
            		}
HXLINE( 592)		if ((numRegisters == (int)-1)) {
HXLINE( 594)			numRegisters = ((int)data->get_length() >> (int)(int)2);
            		}
HXLINE( 598)		bool isVertex = hx::IsEq( programType,(int)1 );
HXLINE( 599)		 ::lime::utils::ArrayBufferView dest;
HXDLIN( 599)		if (isVertex) {
HXLINE( 599)			dest = this->_hx___vertexConstants;
            		}
            		else {
HXLINE( 599)			dest = this->_hx___fragmentConstants;
            		}
HXLINE( 600)		 ::openfl::_Vector::FloatVector source = data;
HXLINE( 602)		int sourceIndex = (int)0;
HXLINE( 603)		int destIndex = (firstRegister * (int)4);
HXLINE( 605)		{
HXLINE( 605)			int _g1 = (int)0;
HXDLIN( 605)			int _g = numRegisters;
HXDLIN( 605)			while((_g1 < _g)){
HXLINE( 605)				_g1 = (_g1 + (int)1);
HXDLIN( 605)				int i = (_g1 - (int)1);
HXLINE( 607)				{
HXLINE( 607)					destIndex = (destIndex + (int)1);
HXDLIN( 607)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 607)					Float val = source->get((sourceIndex - (int)1));
HXDLIN( 607)					{
HXLINE( 607)						int dest1 = dest->byteOffset;
HXDLIN( 607)						::__hxcpp_memory_set_float(dest->buffer->b,(dest1 + ((destIndex - (int)1) * (int)4)),val);
            					}
            				}
HXLINE( 608)				{
HXLINE( 608)					destIndex = (destIndex + (int)1);
HXDLIN( 608)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 608)					Float val1 = source->get((sourceIndex - (int)1));
HXDLIN( 608)					{
HXLINE( 608)						int dest2 = dest->byteOffset;
HXDLIN( 608)						::__hxcpp_memory_set_float(dest->buffer->b,(dest2 + ((destIndex - (int)1) * (int)4)),val1);
            					}
            				}
HXLINE( 609)				{
HXLINE( 609)					destIndex = (destIndex + (int)1);
HXDLIN( 609)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 609)					Float val2 = source->get((sourceIndex - (int)1));
HXDLIN( 609)					{
HXLINE( 609)						int dest3 = dest->byteOffset;
HXDLIN( 609)						::__hxcpp_memory_set_float(dest->buffer->b,(dest3 + ((destIndex - (int)1) * (int)4)),val2);
            					}
            				}
HXLINE( 610)				{
HXLINE( 610)					destIndex = (destIndex + (int)1);
HXDLIN( 610)					sourceIndex = (sourceIndex + (int)1);
HXDLIN( 610)					Float val3 = source->get((sourceIndex - (int)1));
HXDLIN( 610)					{
HXLINE( 610)						int dest4 = dest->byteOffset;
HXDLIN( 610)						::__hxcpp_memory_set_float(dest->buffer->b,(dest4 + ((destIndex - (int)1) * (int)4)),val3);
            					}
            				}
            			}
            		}
HXLINE( 614)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 616)			this->_hx___program->_hx___markDirty(isVertex,firstRegister,numRegisters);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setProgramConstantsFromVector,(void))

void Context3D_obj::setRenderToBackBuffer(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_623_setRenderToBackBuffer)
HXLINE( 625)		::lime::graphics::opengl::GL_obj::context->bindFramebuffer((int)36160,null());
HXLINE( 626)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 628)		::lime::graphics::opengl::GL_obj::context->frontFace((int)2305);
HXLINE( 629)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 631)		this->_hx___renderToTexture = null();
HXLINE( 632)		this->_hx___scissorRectangle = null();
HXLINE( 633)		this->_hx___updateBackbufferViewport();
HXLINE( 634)		this->_hx___updateScissorRectangle();
HXLINE( 635)		this->_hx___updateDepthAndStencilState();
HXLINE( 637)		{
HXLINE( 637)			 ::lime::utils::ArrayBufferView this1 = this->_hx___positionScale;
HXDLIN( 637)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)1.0));
            		}
HXLINE( 639)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 641)			this->_hx___program->_hx___setPositionScale(this->_hx___positionScale);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,setRenderToBackBuffer,(void))

void Context3D_obj::setRenderToTexture( ::openfl::display3D::textures::TextureBase texture,hx::Null< bool >  __o_enableDepthAndStencil,hx::Null< int >  __o_antiAlias,hx::Null< int >  __o_surfaceSelector){
bool enableDepthAndStencil = __o_enableDepthAndStencil.Default(false);
int antiAlias = __o_antiAlias.Default(0);
int surfaceSelector = __o_surfaceSelector.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_648_setRenderToTexture)
HXLINE( 650)		int width = (int)0;
HXLINE( 651)		int height = (int)0;
HXLINE( 653)		if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE( 655)			 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(texture) );
HXLINE( 656)			width = texture2D->_hx___width;
HXLINE( 657)			height = texture2D->_hx___height;
            		}
            		else {
HXLINE( 659)			if (::Std_obj::is(texture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE( 661)				 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(texture) );
HXLINE( 662)				width = rectTexture->_hx___width;
HXLINE( 663)				height = rectTexture->_hx___height;
            			}
            			else {
HXLINE( 667)				HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("Invalid texture",92,3e,59,9a),null()));
            			}
            		}
HXLINE( 671)		if (hx::IsNull( this->_hx___framebuffer )) {
HXLINE( 673)			this->_hx___framebuffer = ::lime::graphics::opengl::GL_obj::context->createFramebuffer();
HXLINE( 674)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 678)		::lime::graphics::opengl::GL_obj::context->bindFramebuffer((int)36160,this->_hx___framebuffer);
HXLINE( 679)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 680)		::lime::graphics::opengl::GL_obj::context->framebufferTexture2D((int)36160,(int)36064,(int)3553,texture->_hx___textureID,(int)0);
HXLINE( 681)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 683)		if (enableDepthAndStencil) {
HXLINE( 685)			if (this->_hx___supportsPackedDepthStencil) {
HXLINE( 687)				if (hx::IsNull( this->_hx___depthStencilRenderBuffer )) {
HXLINE( 689)					this->_hx___depthStencilRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 690)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 694)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___depthStencilRenderBuffer);
HXLINE( 695)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 696)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,(int)35056,width,height);
HXLINE( 697)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 699)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)33306,(int)36161,this->_hx___depthStencilRenderBuffer);
HXLINE( 700)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
            			else {
HXLINE( 704)				if (hx::IsNull( this->_hx___depthRenderBuffer )) {
HXLINE( 706)					this->_hx___depthRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 707)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 711)				if (hx::IsNull( this->_hx___stencilRenderBuffer )) {
HXLINE( 713)					this->_hx___stencilRenderBuffer = ::lime::graphics::opengl::GL_obj::context->createRenderbuffer();
HXLINE( 714)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE( 718)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___depthRenderBuffer);
HXLINE( 719)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 720)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,(int)33189,width,height);
HXLINE( 721)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 722)				::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,this->_hx___stencilRenderBuffer);
HXLINE( 723)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 724)				::lime::graphics::opengl::GL_obj::context->renderbufferStorage((int)36161,(int)36168,width,height);
HXLINE( 725)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 727)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)36096,(int)36161,this->_hx___depthRenderBuffer);
HXLINE( 728)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 729)				::lime::graphics::opengl::GL_obj::context->framebufferRenderbuffer((int)36160,(int)36128,(int)36161,this->_hx___stencilRenderBuffer);
HXLINE( 730)				::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            			}
HXLINE( 734)			::lime::graphics::opengl::GL_obj::context->bindRenderbuffer((int)36161,null());
HXLINE( 735)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
HXLINE( 739)		this->_hx___setViewport((int)0,(int)0,width,height);
HXLINE( 741)		if (this->enableErrorChecking) {
HXLINE( 743)			int code = ::lime::graphics::opengl::GL_obj::context->checkFramebufferStatus((int)36160);
HXLINE( 745)			if ((code != (int)36053)) {
HXLINE( 747)				::haxe::Log_obj::trace(HX_("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",55,db,0b,ac),hx::SourceInfo(HX_("Context3D.hx",7e,2e,cf,45),747,HX_("openfl.display3D.Context3D",a7,bf,a0,2f),HX_("setRenderToTexture",e8,2c,92,46)));
            			}
            		}
HXLINE( 753)		{
HXLINE( 753)			 ::lime::utils::ArrayBufferView this1 = this->_hx___positionScale;
HXDLIN( 753)			::__hxcpp_memory_set_float(this1->buffer->b,(this1->byteOffset + (int)4),((Float)-1.0));
            		}
HXLINE( 755)		if (hx::IsNotNull( this->_hx___program )) {
HXLINE( 757)			this->_hx___program->_hx___setPositionScale(this->_hx___positionScale);
            		}
HXLINE( 761)		::lime::graphics::opengl::GL_obj::context->frontFace((int)2304);
HXLINE( 762)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 764)		this->_hx___renderToTexture = texture;
HXLINE( 765)		this->_hx___scissorRectangle = null();
HXLINE( 766)		this->_hx___rttDepthAndStencil = enableDepthAndStencil;
HXLINE( 767)		this->_hx___updateScissorRectangle();
HXLINE( 768)		this->_hx___updateDepthAndStencilState();
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setRenderToTexture,(void))

void Context3D_obj::setSamplerStateAt(int sampler, ::Dynamic wrap, ::Dynamic filter, ::Dynamic mipfilter){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_773_setSamplerStateAt)
HXLINE( 775)		bool _hx_tmp;
HXDLIN( 775)		if ((sampler >= (int)0)) {
HXLINE( 775)			_hx_tmp = (sampler > (int)8);
            		}
            		else {
HXLINE( 775)			_hx_tmp = true;
            		}
HXDLIN( 775)		if (_hx_tmp) {
HXLINE( 777)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("sampler out of range",de,61,c4,36),null()));
            		}
HXLINE( 781)		 ::openfl::_internal::stage3D::SamplerState state = this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >();
HXLINE( 783)		 ::Dynamic _hx_switch_0 = wrap;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 787)			state->set_wrapModeS((int)33071);
HXLINE( 788)			state->set_wrapModeT((int)33071);
HXLINE( 785)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 792)			state->set_wrapModeS((int)33071);
HXLINE( 793)			state->set_wrapModeT((int)10497);
HXLINE( 790)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 797)			state->set_wrapModeS((int)10497);
HXLINE( 798)			state->set_wrapModeT((int)10497);
HXLINE( 795)			goto _hx_goto_32;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 802)			state->set_wrapModeS((int)10497);
HXLINE( 803)			state->set_wrapModeT((int)33071);
HXLINE( 800)			goto _hx_goto_32;
            		}
            		/* default */{
HXLINE( 807)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("wrap bad enum",52,1c,4c,59),null()));
            		}
            		_hx_goto_32:;
HXLINE( 811)		 ::Dynamic _hx_switch_1 = filter;
            		if (  (_hx_switch_1==(int)0) ){
HXLINE( 859)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 861)				Float _hx_tmp1;
HXDLIN( 861)				if ((this->_hx___maxAnisotropyTexture2D < (int)16)) {
HXLINE( 861)					_hx_tmp1 = this->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 861)					_hx_tmp1 = (int)16;
            				}
HXDLIN( 861)				state->set_maxAniso(_hx_tmp1);
            			}
HXLINE( 859)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)1) ){
HXLINE( 835)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 837)				Float _hx_tmp2;
HXDLIN( 837)				if ((this->_hx___maxAnisotropyTexture2D < (int)2)) {
HXLINE( 837)					_hx_tmp2 = this->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 837)					_hx_tmp2 = (int)2;
            				}
HXDLIN( 837)				state->set_maxAniso(_hx_tmp2);
            			}
HXLINE( 835)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)2) ){
HXLINE( 843)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 845)				Float _hx_tmp3;
HXDLIN( 845)				if ((this->_hx___maxAnisotropyTexture2D < (int)4)) {
HXLINE( 845)					_hx_tmp3 = this->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 845)					_hx_tmp3 = (int)4;
            				}
HXDLIN( 845)				state->set_maxAniso(_hx_tmp3);
            			}
HXLINE( 843)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)3) ){
HXLINE( 851)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 853)				Float _hx_tmp4;
HXDLIN( 853)				if ((this->_hx___maxAnisotropyTexture2D < (int)8)) {
HXLINE( 853)					_hx_tmp4 = this->_hx___maxAnisotropyTexture2D;
            				}
            				else {
HXLINE( 853)					_hx_tmp4 = (int)8;
            				}
HXDLIN( 853)				state->set_maxAniso(_hx_tmp4);
            			}
HXLINE( 851)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)4) ){
HXLINE( 815)			state->set_magFilter((int)9729);
HXLINE( 817)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 819)				state->set_maxAniso((int)1);
            			}
HXLINE( 813)			goto _hx_goto_33;
            		}
            		if (  (_hx_switch_1==(int)5) ){
HXLINE( 825)			state->set_magFilter((int)9728);
HXLINE( 827)			if (this->_hx___supportsAnisotropicFiltering) {
HXLINE( 829)				state->set_maxAniso((int)1);
            			}
HXLINE( 823)			goto _hx_goto_33;
            		}
            		/* default */{
HXLINE( 867)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("filter bad enum",a4,08,ed,96),null()));
            		}
            		_hx_goto_33:;
HXLINE( 871)		 ::Dynamic _hx_switch_2 = mipfilter;
            		if (  (_hx_switch_2==(int)0) ){
HXLINE( 875)			state->set_minFilter((int)9987);
HXDLIN( 875)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_2==(int)1) ){
HXLINE( 879)			state->set_minFilter((int)9984);
HXDLIN( 879)			goto _hx_goto_34;
            		}
            		if (  (_hx_switch_2==(int)2) ){
HXLINE( 883)			int _hx_tmp5;
HXDLIN( 883)			if (hx::IsEq( filter,(int)5 )) {
HXLINE( 883)				_hx_tmp5 = (int)9728;
            			}
            			else {
HXLINE( 883)				_hx_tmp5 = (int)9729;
            			}
HXDLIN( 883)			state->set_minFilter(_hx_tmp5);
HXDLIN( 883)			goto _hx_goto_34;
            		}
            		/* default */{
HXLINE( 887)			HX_STACK_DO_THROW( ::openfl::errors::Error_obj::__alloc( HX_CTX ,HX_("mipfiter bad enum",b2,1b,09,c4),null()));
            		}
            		_hx_goto_34:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setSamplerStateAt,(void))

void Context3D_obj::setScissorRectangle( ::openfl::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_894_setScissorRectangle)
HXLINE( 896)		 ::openfl::geom::Rectangle _hx_tmp;
HXDLIN( 896)		if (hx::IsNotNull( rectangle )) {
HXLINE( 896)			_hx_tmp = rectangle->clone();
            		}
            		else {
HXLINE( 896)			_hx_tmp = null();
            		}
HXDLIN( 896)		this->_hx___scissorRectangle = _hx_tmp;
HXLINE( 897)		this->_hx___updateScissorRectangle();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,setScissorRectangle,(void))

void Context3D_obj::setStencilActions( ::Dynamic __o_triangleFace, ::Dynamic __o_compareMode, ::Dynamic __o_actionOnBothPass, ::Dynamic __o_actionOnDepthFail, ::Dynamic __o_actionOnDepthPassStencilFail){
 ::Dynamic triangleFace = __o_triangleFace.Default(2);
 ::Dynamic compareMode = __o_compareMode.Default(0);
 ::Dynamic actionOnBothPass = __o_actionOnBothPass.Default(5);
 ::Dynamic actionOnDepthFail = __o_actionOnDepthFail.Default(5);
 ::Dynamic actionOnDepthPassStencilFail = __o_actionOnDepthPassStencilFail.Default(5);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_902_setStencilActions)
HXLINE( 904)		this->_hx___stencilCompareMode = compareMode;
HXLINE( 905)		{
HXLINE( 905)			int fail = this->_hx___getGLStencilAction(actionOnDepthFail);
HXDLIN( 905)			int zfail = this->_hx___getGLStencilAction(actionOnDepthPassStencilFail);
HXDLIN( 905)			int zpass = this->_hx___getGLStencilAction(actionOnBothPass);
HXDLIN( 905)			::lime::graphics::opengl::GL_obj::context->stencilOp(fail,zfail,zpass);
            		}
HXLINE( 906)		{
HXLINE( 906)			int func = this->_hx___getGLCompareMode(this->_hx___stencilCompareMode);
HXDLIN( 906)			::lime::graphics::opengl::GL_obj::context->stencilFunc(func,this->_hx___stencilRef,this->_hx___stencilReadMask);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Context3D_obj,setStencilActions,(void))

void Context3D_obj::setStencilReferenceValue(int referenceValue,hx::Null< int >  __o_readMask,hx::Null< int >  __o_writeMask){
int readMask = __o_readMask.Default(255);
int writeMask = __o_writeMask.Default(255);
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_911_setStencilReferenceValue)
HXLINE( 913)		this->_hx___stencilReadMask = readMask;
HXLINE( 914)		this->_hx___stencilRef = referenceValue;
HXLINE( 916)		{
HXLINE( 916)			int func = this->_hx___getGLCompareMode(this->_hx___stencilCompareMode);
HXDLIN( 916)			::lime::graphics::opengl::GL_obj::context->stencilFunc(func,this->_hx___stencilRef,this->_hx___stencilReadMask);
            		}
HXLINE( 917)		::lime::graphics::opengl::GL_obj::context->stencilMask(writeMask);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3D_obj,setStencilReferenceValue,(void))

void Context3D_obj::setTextureAt(int sampler, ::openfl::display3D::textures::TextureBase texture){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_924_setTextureAt)
HXLINE( 924)		if (hx::IsNotEq( this->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >(),texture )) {
HXLINE( 926)			this->_hx___samplerTextures->set(sampler,texture).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE( 927)			 ::openfl::display3D::Context3D _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 927)			_hx_tmp->_hx___samplerDirty = ((int)_hx_tmp->_hx___samplerDirty | (int)((int)(int)1 << (int)sampler));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,setTextureAt,(void))

void Context3D_obj::setVertexBufferAt(int index, ::openfl::display3D::VertexBuffer3D buffer,hx::Null< int >  __o_bufferOffset, ::Dynamic __o_format){
int bufferOffset = __o_bufferOffset.Default(0);
 ::Dynamic format = __o_format.Default(4);
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_936_setVertexBufferAt)
HXLINE( 938)		if (hx::IsNull( buffer )) {
HXLINE( 940)			::lime::graphics::opengl::GL_obj::context->disableVertexAttribArray(index);
HXLINE( 941)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 943)			::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34962,null());
HXLINE( 944)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 946)			return;
            		}
HXLINE( 950)		::lime::graphics::opengl::GL_obj::context->enableVertexAttribArray(index);
HXLINE( 951)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 953)		::lime::graphics::opengl::GL_obj::context->bindBuffer((int)34962,buffer->_hx___id);
HXLINE( 954)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 956)		int byteOffset = (bufferOffset * (int)4);
HXLINE( 958)		 ::Dynamic _hx_switch_0 = format;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 962)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)4,(int)5121,true,buffer->_hx___stride,byteOffset);
HXLINE( 963)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 960)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 982)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)1,(int)5126,false,buffer->_hx___stride,byteOffset);
HXLINE( 983)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 980)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 977)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)2,(int)5126,false,buffer->_hx___stride,byteOffset);
HXLINE( 978)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 975)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE( 972)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)3,(int)5126,false,buffer->_hx___stride,byteOffset);
HXLINE( 973)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 970)			goto _hx_goto_40;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE( 967)			::lime::graphics::opengl::GL_obj::context->vertexAttribPointer(index,(int)4,(int)5126,false,buffer->_hx___stride,byteOffset);
HXLINE( 968)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE( 965)			goto _hx_goto_40;
            		}
            		/* default */{
HXLINE( 987)			HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            		}
            		_hx_goto_40:;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,setVertexBufferAt,(void))

void Context3D_obj::_hx___flushSamplerState(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_994___flushSamplerState)
HXLINE( 996)		int sampler = (int)0;
HXLINE( 998)		while((this->_hx___samplerDirty != (int)0)){
HXLINE(1000)			int _hx_tmp = this->_hx___samplerDirty;
HXDLIN(1000)			if ((((int)_hx_tmp & (int)((int)(int)1 << (int)sampler)) != (int)0)) {
HXLINE(1002)				if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateActiveTextureSample(sampler)) {
HXLINE(1004)					 ::lime::_backend::native::NativeGLRenderContext _hx_tmp1 = ::lime::graphics::opengl::GL_obj::context;
HXDLIN(1004)					_hx_tmp1->activeTexture(((int)33984 + sampler));
HXLINE(1005)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE(1009)				 ::openfl::display3D::textures::TextureBase texture = this->_hx___samplerTextures->get(sampler).StaticCast<  ::openfl::display3D::textures::TextureBase >();
HXLINE(1011)				if (hx::IsNotNull( texture )) {
HXLINE(1013)					int target = texture->_hx___textureTarget;
HXLINE(1015)					{
HXLINE(1015)						 ::lime::graphics::opengl::GLTexture texture1 = texture->_hx___getTexture();
HXDLIN(1015)						::lime::graphics::opengl::GL_obj::context->bindTexture(target,texture1);
            					}
HXLINE(1016)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1018)					texture->_hx___setSamplerState(this->_hx___samplerStates->__get(sampler).StaticCast<  ::openfl::_internal::stage3D::SamplerState >());
            				}
            				else {
HXLINE(1022)					::lime::graphics::opengl::GL_obj::context->bindTexture((int)3553,null());
HXLINE(1023)					::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            				}
HXLINE(1027)				 ::openfl::display3D::Context3D _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(1027)				_hx_tmp2->_hx___samplerDirty = ((int)_hx_tmp2->_hx___samplerDirty & (int)~(((int)(int)1 << (int)sampler)));
            			}
HXLINE(1031)			sampler = (sampler + (int)1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___flushSamplerState,(void))

int Context3D_obj::_hx___getGLCompareMode( ::Dynamic compareMode){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1040___getGLCompareMode)
HXLINE(1040)		 ::Dynamic _hx_switch_0 = compareMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1040)			return (int)519;
HXDLIN(1040)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1040)			return (int)514;
HXDLIN(1040)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1040)			return (int)516;
HXDLIN(1040)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1040)			return (int)518;
HXDLIN(1040)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1040)			return (int)513;
HXDLIN(1040)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1040)			return (int)515;
HXDLIN(1040)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1040)			return (int)512;
HXDLIN(1040)			goto _hx_goto_44;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1040)			return (int)517;
HXDLIN(1040)			goto _hx_goto_44;
            		}
            		/* default */{
HXLINE(1040)			return (int)514;
            		}
            		_hx_goto_44:;
HXDLIN(1040)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLCompareMode,return )

int Context3D_obj::_hx___getGLStencilAction( ::Dynamic stencilAction){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1059___getGLStencilAction)
HXLINE(1059)		 ::Dynamic _hx_switch_0 = stencilAction;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(1059)			return (int)7683;
HXDLIN(1059)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(1059)			return (int)34056;
HXDLIN(1059)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(1059)			return (int)7682;
HXDLIN(1059)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)3) ){
HXLINE(1059)			return (int)34055;
HXDLIN(1059)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)4) ){
HXLINE(1059)			return (int)5386;
HXDLIN(1059)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)5) ){
HXLINE(1059)			return (int)7680;
HXDLIN(1059)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)6) ){
HXLINE(1059)			return (int)7681;
HXDLIN(1059)			goto _hx_goto_46;
            		}
            		if (  (_hx_switch_0==(int)7) ){
HXLINE(1059)			return (int)0;
HXDLIN(1059)			goto _hx_goto_46;
            		}
            		/* default */{
HXLINE(1059)			return (int)7680;
            		}
            		_hx_goto_46:;
HXDLIN(1059)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___getGLStencilAction,return )

bool Context3D_obj::_hx___hasGLExtension(::String name){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1078___hasGLExtension)
HXLINE(1078)		return (::lime::graphics::opengl::GL_obj::context->getSupportedExtensions()->indexOf(name,null()) != (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___hasGLExtension,return )

void Context3D_obj::_hx___setViewport(int originX,int originY,int width,int height){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1083___setViewport)
HXLINE(1085)		if (hx::IsNotNull( this->_hx___renderToTexture )) {
HXLINE(1085)			originY = (originY * (int)-1);
            		}
HXLINE(1087)		if (::openfl::display3D::Context3D_obj::_hx___stateCache->updateViewport(originX,originY,width,height)) {
HXLINE(1089)			::lime::graphics::opengl::GL_obj::context->viewport(originX,originY,width,height);
HXLINE(1090)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3D_obj,_hx___setViewport,(void))

int Context3D_obj::_hx___statsAdd(int stat,int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1097___statsAdd)
HXLINE(1099)		{
HXLINE(1099)			int _g = stat;
HXDLIN(1099)			 ::openfl::_Vector::IntVector _g1 = this->_hx___stats;
HXDLIN(1099)			_g1->set(_g,(_g1->get(_g) + value));
            		}
HXLINE(1100)		return this->_hx___stats->get(stat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___statsAdd,return )

void Context3D_obj::_hx___statsClear(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1107___statsClear)
HXLINE(1107)		this->_hx___stats->set(stat,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsClear,(void))

void Context3D_obj::_hx___statsDecrement(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1114___statsDecrement)
HXLINE(1114)		int _g = stat;
HXDLIN(1114)		 ::openfl::_Vector::IntVector _g1 = this->_hx___stats;
HXDLIN(1114)		_g1->set(_g,(_g1->get(_g) - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsDecrement,(void))

void Context3D_obj::_hx___statsIncrement(int stat){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1121___statsIncrement)
HXLINE(1121)		int _g = stat;
HXDLIN(1121)		 ::openfl::_Vector::IntVector _g1 = this->_hx___stats;
HXDLIN(1121)		_g1->set(_g,(_g1->get(_g) + (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,_hx___statsIncrement,(void))

void Context3D_obj::_hx___statsSendToTelemetry(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1126___statsSendToTelemetry)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___statsSendToTelemetry,(void))

int Context3D_obj::_hx___statsSubtract(int stat,int value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1175___statsSubtract)
HXLINE(1177)		{
HXLINE(1177)			int _g = stat;
HXDLIN(1177)			 ::openfl::_Vector::IntVector _g1 = this->_hx___stats;
HXDLIN(1177)			_g1->set(_g,(_g1->get(_g) - value));
            		}
HXLINE(1178)		return this->_hx___stats->get(stat);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Context3D_obj,_hx___statsSubtract,return )

void Context3D_obj::_hx___updateDepthAndStencilState(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1182___updateDepthAndStencilState)
HXLINE(1184)		bool depthAndStencil;
HXDLIN(1184)		if (hx::IsNotNull( this->_hx___renderToTexture )) {
HXLINE(1184)			depthAndStencil = this->_hx___rttDepthAndStencil;
            		}
            		else {
HXLINE(1184)			depthAndStencil = this->_hx___backBufferEnableDepthAndStencil;
            		}
HXLINE(1186)		if (depthAndStencil) {
HXLINE(1188)			::lime::graphics::opengl::GL_obj::context->enable((int)2929);
HXLINE(1189)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1190)			::lime::graphics::opengl::GL_obj::context->enable((int)2960);
HXLINE(1191)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            		else {
HXLINE(1195)			::lime::graphics::opengl::GL_obj::context->disable((int)2929);
HXLINE(1196)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1197)			::lime::graphics::opengl::GL_obj::context->disable((int)2960);
HXLINE(1198)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateDepthAndStencilState,(void))

void Context3D_obj::_hx___updateBlendFactors(){
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1205___updateBlendFactors)
HXLINE(1207)		bool _hx_tmp;
HXDLIN(1207)		if (hx::IsNotNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor )) {
HXLINE(1207)			_hx_tmp = hx::IsNull( ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor );
            		}
            		else {
HXLINE(1207)			_hx_tmp = true;
            		}
HXDLIN(1207)		if (_hx_tmp) {
HXLINE(1209)			return;
            		}
HXLINE(1213)		int src = (int)1;
HXLINE(1214)		int dest = (int)0;
HXLINE(1215)		{
HXLINE(1215)			 ::Dynamic _g = ::openfl::display3D::Context3D_obj::_hx___stateCache->_srcBlendFactor;
HXDLIN(1215)			 ::Dynamic _hx_switch_0 = _g;
            			if (  (_hx_switch_0==(int)0) ){
HXLINE(1220)				src = (int)772;
HXDLIN(1220)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==(int)1) ){
HXLINE(1221)				src = (int)774;
HXDLIN(1221)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==(int)2) ){
HXLINE(1217)				src = (int)1;
HXDLIN(1217)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==(int)3) ){
HXLINE(1223)				src = (int)773;
HXDLIN(1223)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==(int)4) ){
HXLINE(1224)				src = (int)775;
HXDLIN(1224)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==(int)5) ){
HXLINE(1222)				src = (int)771;
HXDLIN(1222)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==(int)7) ){
HXLINE(1219)				src = (int)770;
HXDLIN(1219)				goto _hx_goto_57;
            			}
            			if (  (_hx_switch_0==(int)9) ){
HXLINE(1218)				src = (int)0;
HXDLIN(1218)				goto _hx_goto_57;
            			}
            			/* default */{
HXLINE(1226)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_57:;
            		}
HXLINE(1230)		{
HXLINE(1230)			 ::Dynamic _g1 = ::openfl::display3D::Context3D_obj::_hx___stateCache->_destBlendFactor;
HXDLIN(1230)			 ::Dynamic _hx_switch_1 = _g1;
            			if (  (_hx_switch_1==(int)0) ){
HXLINE(1236)				dest = (int)772;
HXDLIN(1236)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_1==(int)2) ){
HXLINE(1232)				dest = (int)1;
HXDLIN(1232)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_1==(int)3) ){
HXLINE(1239)				dest = (int)773;
HXDLIN(1239)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_1==(int)5) ){
HXLINE(1237)				dest = (int)771;
HXDLIN(1237)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_1==(int)6) ){
HXLINE(1238)				dest = (int)769;
HXDLIN(1238)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_1==(int)7) ){
HXLINE(1234)				dest = (int)770;
HXDLIN(1234)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_1==(int)8) ){
HXLINE(1235)				dest = (int)768;
HXDLIN(1235)				goto _hx_goto_58;
            			}
            			if (  (_hx_switch_1==(int)9) ){
HXLINE(1233)				dest = (int)0;
HXDLIN(1233)				goto _hx_goto_58;
            			}
            			/* default */{
HXLINE(1241)				HX_STACK_DO_THROW( ::openfl::errors::IllegalOperationError_obj::__alloc( HX_CTX ,null()));
            			}
            			_hx_goto_58:;
            		}
HXLINE(1245)		::lime::graphics::opengl::GL_obj::context->enable((int)3042);
HXLINE(1246)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1247)		::lime::graphics::opengl::GL_obj::context->blendFunc(src,dest);
HXLINE(1248)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBlendFactors,(void))

void Context3D_obj::_hx___updateScissorRectangle(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1253___updateScissorRectangle)
HXLINE(1255)		if (hx::IsNull( this->_hx___scissorRectangle )) {
HXLINE(1257)			::lime::graphics::opengl::GL_obj::context->disable((int)3089);
HXLINE(1258)			::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1259)			return;
            		}
HXLINE(1263)		::lime::graphics::opengl::GL_obj::context->enable((int)3089);
HXLINE(1264)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
HXLINE(1266)		int height = (int)0;
HXLINE(1268)		if (hx::IsNotNull( this->_hx___renderToTexture )) {
HXLINE(1270)			if (::Std_obj::is(this->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::Texture >())) {
HXLINE(1272)				 ::openfl::display3D::textures::Texture texture2D = ( ( ::openfl::display3D::textures::Texture)(this->_hx___renderToTexture) );
HXLINE(1273)				height = texture2D->_hx___height;
            			}
            			else {
HXLINE(1275)				if (::Std_obj::is(this->_hx___renderToTexture,hx::ClassOf< ::openfl::display3D::textures::RectangleTexture >())) {
HXLINE(1277)					 ::openfl::display3D::textures::RectangleTexture rectTexture = ( ( ::openfl::display3D::textures::RectangleTexture)(this->_hx___renderToTexture) );
HXLINE(1278)					height = rectTexture->_hx___height;
            				}
            			}
            		}
            		else {
HXLINE(1284)			height = this->backBufferHeight;
            		}
HXLINE(1288)		{
HXLINE(1288)			int x = ::Std_obj::_hx_int(this->_hx___scissorRectangle->x);
HXLINE(1289)			int y = (height - ::Std_obj::_hx_int(this->_hx___scissorRectangle->y));
HXLINE(1288)			int y1 = ::Std_obj::_hx_int((y - ::Std_obj::_hx_int(this->_hx___scissorRectangle->height)));
HXDLIN(1288)			int width = ::Std_obj::_hx_int(this->_hx___scissorRectangle->width);
HXDLIN(1288)			int height1 = ::Std_obj::_hx_int(this->_hx___scissorRectangle->height);
HXDLIN(1288)			::lime::graphics::opengl::GL_obj::context->scissor(x,y1,width,height1);
            		}
HXLINE(1293)		::openfl::_internal::stage3D::GLUtils_obj::CheckGLError();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateScissorRectangle,(void))

void Context3D_obj::_hx___updateBackbufferViewport(){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1300___updateBackbufferViewport)
HXLINE(1300)		if (hx::IsNull( this->_hx___renderToTexture )) {
HXLINE(1302)			int _hx_tmp = ::Std_obj::_hx_int(this->_hx___stage3D->x);
HXDLIN(1302)			int _hx_tmp1 = ::Std_obj::_hx_int(this->_hx___stage3D->y);
HXDLIN(1302)			this->_hx___setViewport(_hx_tmp,_hx_tmp1,this->backBufferWidth,this->backBufferHeight);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3D_obj,_hx___updateBackbufferViewport,(void))

bool Context3D_obj::set_enableErrorChecking(bool value){
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_1311_set_enableErrorChecking)
HXLINE(1311)		return (this->enableErrorChecking = (::openfl::_internal::stage3D::GLUtils_obj::debug = value));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3D_obj,set_enableErrorChecking,return )

bool Context3D_obj::supportsVideoTexture;

int Context3D_obj::MAX_SAMPLERS;

int Context3D_obj::MAX_ATTRIBUTES;

int Context3D_obj::MAX_PROGRAM_REGISTERS;

 ::openfl::_internal::stage3D::Context3DStateCache Context3D_obj::_hx___stateCache;


hx::ObjectPtr< Context3D_obj > Context3D_obj::__new( ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession) {
	hx::ObjectPtr< Context3D_obj > __this = new Context3D_obj();
	__this->__construct(stage3D,renderSession);
	return __this;
}

hx::ObjectPtr< Context3D_obj > Context3D_obj::__alloc(hx::Ctx *_hx_ctx, ::openfl::display::Stage3D stage3D, ::openfl::_internal::renderer::RenderSession renderSession) {
	Context3D_obj *__this = (Context3D_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Context3D_obj), true, "openfl.display3D.Context3D"));
	*(void **)__this = Context3D_obj::_hx_vtable;
	__this->__construct(stage3D,renderSession);
	return __this;
}

Context3D_obj::Context3D_obj()
{
}

void Context3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3D);
	HX_MARK_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_MARK_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_MARK_MEMBER_NAME(driverInfo,"driverInfo");
	HX_MARK_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_MARK_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_MARK_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_MARK_MEMBER_NAME(profile,"profile");
	HX_MARK_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_MARK_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_MARK_MEMBER_NAME(_hx___backBufferEnableDepthAndStencil,"__backBufferEnableDepthAndStencil");
	HX_MARK_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_MARK_MEMBER_NAME(_hx___depthRenderBuffer,"__depthRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___depthStencilRenderBuffer,"__depthStencilRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_MARK_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_MARK_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_MARK_MEMBER_NAME(_hx___maxAnisotropyCubeTexture,"__maxAnisotropyCubeTexture");
	HX_MARK_MEMBER_NAME(_hx___maxAnisotropyTexture2D,"__maxAnisotropyTexture2D");
	HX_MARK_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_MARK_MEMBER_NAME(_hx___program,"__program");
	HX_MARK_MEMBER_NAME(_hx___renderSession,"__renderSession");
	HX_MARK_MEMBER_NAME(_hx___renderToTexture,"__renderToTexture");
	HX_MARK_MEMBER_NAME(_hx___rttDepthAndStencil,"__rttDepthAndStencil");
	HX_MARK_MEMBER_NAME(_hx___samplerDirty,"__samplerDirty");
	HX_MARK_MEMBER_NAME(_hx___samplerTextures,"__samplerTextures");
	HX_MARK_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_MARK_MEMBER_NAME(_hx___scissorRectangle,"__scissorRectangle");
	HX_MARK_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_MARK_MEMBER_NAME(_hx___stats,"__stats");
	HX_MARK_MEMBER_NAME(_hx___statsCache,"__statsCache");
	HX_MARK_MEMBER_NAME(_hx___stencilCompareMode,"__stencilCompareMode");
	HX_MARK_MEMBER_NAME(_hx___stencilRef,"__stencilRef");
	HX_MARK_MEMBER_NAME(_hx___stencilReadMask,"__stencilReadMask");
	HX_MARK_MEMBER_NAME(_hx___stencilRenderBuffer,"__stencilRenderBuffer");
	HX_MARK_MEMBER_NAME(_hx___supportsAnisotropicFiltering,"__supportsAnisotropicFiltering");
	HX_MARK_MEMBER_NAME(_hx___supportsPackedDepthStencil,"__supportsPackedDepthStencil");
	HX_MARK_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Context3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backBufferHeight,"backBufferHeight");
	HX_VISIT_MEMBER_NAME(backBufferWidth,"backBufferWidth");
	HX_VISIT_MEMBER_NAME(driverInfo,"driverInfo");
	HX_VISIT_MEMBER_NAME(enableErrorChecking,"enableErrorChecking");
	HX_VISIT_MEMBER_NAME(maxBackBufferHeight,"maxBackBufferHeight");
	HX_VISIT_MEMBER_NAME(maxBackBufferWidth,"maxBackBufferWidth");
	HX_VISIT_MEMBER_NAME(profile,"profile");
	HX_VISIT_MEMBER_NAME(totalGPUMemory,"totalGPUMemory");
	HX_VISIT_MEMBER_NAME(_hx___backBufferAntiAlias,"__backBufferAntiAlias");
	HX_VISIT_MEMBER_NAME(_hx___backBufferEnableDepthAndStencil,"__backBufferEnableDepthAndStencil");
	HX_VISIT_MEMBER_NAME(_hx___backBufferWantsBestResolution,"__backBufferWantsBestResolution");
	HX_VISIT_MEMBER_NAME(_hx___depthRenderBuffer,"__depthRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___depthStencilRenderBuffer,"__depthStencilRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___fragmentConstants,"__fragmentConstants");
	HX_VISIT_MEMBER_NAME(_hx___framebuffer,"__framebuffer");
	HX_VISIT_MEMBER_NAME(_hx___frameCount,"__frameCount");
	HX_VISIT_MEMBER_NAME(_hx___maxAnisotropyCubeTexture,"__maxAnisotropyCubeTexture");
	HX_VISIT_MEMBER_NAME(_hx___maxAnisotropyTexture2D,"__maxAnisotropyTexture2D");
	HX_VISIT_MEMBER_NAME(_hx___positionScale,"__positionScale");
	HX_VISIT_MEMBER_NAME(_hx___program,"__program");
	HX_VISIT_MEMBER_NAME(_hx___renderSession,"__renderSession");
	HX_VISIT_MEMBER_NAME(_hx___renderToTexture,"__renderToTexture");
	HX_VISIT_MEMBER_NAME(_hx___rttDepthAndStencil,"__rttDepthAndStencil");
	HX_VISIT_MEMBER_NAME(_hx___samplerDirty,"__samplerDirty");
	HX_VISIT_MEMBER_NAME(_hx___samplerTextures,"__samplerTextures");
	HX_VISIT_MEMBER_NAME(_hx___samplerStates,"__samplerStates");
	HX_VISIT_MEMBER_NAME(_hx___scissorRectangle,"__scissorRectangle");
	HX_VISIT_MEMBER_NAME(_hx___stage3D,"__stage3D");
	HX_VISIT_MEMBER_NAME(_hx___stats,"__stats");
	HX_VISIT_MEMBER_NAME(_hx___statsCache,"__statsCache");
	HX_VISIT_MEMBER_NAME(_hx___stencilCompareMode,"__stencilCompareMode");
	HX_VISIT_MEMBER_NAME(_hx___stencilRef,"__stencilRef");
	HX_VISIT_MEMBER_NAME(_hx___stencilReadMask,"__stencilReadMask");
	HX_VISIT_MEMBER_NAME(_hx___stencilRenderBuffer,"__stencilRenderBuffer");
	HX_VISIT_MEMBER_NAME(_hx___supportsAnisotropicFiltering,"__supportsAnisotropicFiltering");
	HX_VISIT_MEMBER_NAME(_hx___supportsPackedDepthStencil,"__supportsPackedDepthStencil");
	HX_VISIT_MEMBER_NAME(_hx___vertexConstants,"__vertexConstants");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Context3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return hx::Val( profile); }
		if (HX_FIELD_EQ(inName,"__stats") ) { return hx::Val( _hx___stats); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"present") ) { return hx::Val( present_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__program") ) { return hx::Val( _hx___program); }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { return hx::Val( _hx___stage3D); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { return hx::Val( driverInfo); }
		if (HX_FIELD_EQ(inName,"setCulling") ) { return hx::Val( setCulling_dyn()); }
		if (HX_FIELD_EQ(inName,"setProgram") ) { return hx::Val( setProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsAdd") ) { return hx::Val( _hx___statsAdd_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__frameCount") ) { return hx::Val( _hx___frameCount); }
		if (HX_FIELD_EQ(inName,"__statsCache") ) { return hx::Val( _hx___statsCache); }
		if (HX_FIELD_EQ(inName,"__stencilRef") ) { return hx::Val( _hx___stencilRef); }
		if (HX_FIELD_EQ(inName,"setColorMask") ) { return hx::Val( setColorMask_dyn()); }
		if (HX_FIELD_EQ(inName,"setDepthTest") ) { return hx::Val( setDepthTest_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextureAt") ) { return hx::Val( setTextureAt_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsClear") ) { return hx::Val( _hx___statsClear_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { return hx::Val( _hx___framebuffer); }
		if (HX_FIELD_EQ(inName,"createProgram") ) { return hx::Val( createProgram_dyn()); }
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		if (HX_FIELD_EQ(inName,"__setViewport") ) { return hx::Val( _hx___setViewport_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { return hx::Val( totalGPUMemory); }
		if (HX_FIELD_EQ(inName,"__samplerDirty") ) { return hx::Val( _hx___samplerDirty); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { return hx::Val( backBufferWidth); }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { return hx::Val( _hx___positionScale); }
		if (HX_FIELD_EQ(inName,"__renderSession") ) { return hx::Val( _hx___renderSession); }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { return hx::Val( _hx___samplerStates); }
		if (HX_FIELD_EQ(inName,"setBlendFactors") ) { return hx::Val( setBlendFactors_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsSubtract") ) { return hx::Val( _hx___statsSubtract_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { return hx::Val( backBufferHeight); }
		if (HX_FIELD_EQ(inName,"drawToBitmapData") ) { return hx::Val( drawToBitmapData_dyn()); }
		if (HX_FIELD_EQ(inName,"__hasGLExtension") ) { return hx::Val( _hx___hasGLExtension_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsDecrement") ) { return hx::Val( _hx___statsDecrement_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsIncrement") ) { return hx::Val( _hx___statsIncrement_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderToTexture") ) { return hx::Val( _hx___renderToTexture); }
		if (HX_FIELD_EQ(inName,"__samplerTextures") ) { return hx::Val( _hx___samplerTextures); }
		if (HX_FIELD_EQ(inName,"__stencilReadMask") ) { return hx::Val( _hx___stencilReadMask); }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { return hx::Val( _hx___vertexConstants); }
		if (HX_FIELD_EQ(inName,"createCubeTexture") ) { return hx::Val( createCubeTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"createIndexBuffer") ) { return hx::Val( createIndexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setSamplerStateAt") ) { return hx::Val( setSamplerStateAt_dyn()); }
		if (HX_FIELD_EQ(inName,"setStencilActions") ) { return hx::Val( setStencilActions_dyn()); }
		if (HX_FIELD_EQ(inName,"setVertexBufferAt") ) { return hx::Val( setVertexBufferAt_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { return hx::Val( maxBackBufferWidth); }
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { return hx::Val( _hx___scissorRectangle); }
		if (HX_FIELD_EQ(inName,"createVertexBuffer") ) { return hx::Val( createVertexBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"createVideoTexture") ) { return hx::Val( createVideoTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"setRenderToTexture") ) { return hx::Val( setRenderToTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"__getGLCompareMode") ) { return hx::Val( _hx___getGLCompareMode_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { return hx::Val( enableErrorChecking); }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { return hx::Val( maxBackBufferHeight); }
		if (HX_FIELD_EQ(inName,"__depthRenderBuffer") ) { return hx::Val( _hx___depthRenderBuffer); }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { return hx::Val( _hx___fragmentConstants); }
		if (HX_FIELD_EQ(inName,"configureBackBuffer") ) { return hx::Val( configureBackBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"setScissorRectangle") ) { return hx::Val( setScissorRectangle_dyn()); }
		if (HX_FIELD_EQ(inName,"__flushSamplerState") ) { return hx::Val( _hx___flushSamplerState_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__rttDepthAndStencil") ) { return hx::Val( _hx___rttDepthAndStencil); }
		if (HX_FIELD_EQ(inName,"__stencilCompareMode") ) { return hx::Val( _hx___stencilCompareMode); }
		if (HX_FIELD_EQ(inName,"__getGLStencilAction") ) { return hx::Val( _hx___getGLStencilAction_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateBlendFactors") ) { return hx::Val( _hx___updateBlendFactors_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { return hx::Val( _hx___backBufferAntiAlias); }
		if (HX_FIELD_EQ(inName,"__stencilRenderBuffer") ) { return hx::Val( _hx___stencilRenderBuffer); }
		if (HX_FIELD_EQ(inName,"setRenderToBackBuffer") ) { return hx::Val( setRenderToBackBuffer_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createRectangleTexture") ) { return hx::Val( createRectangleTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"__statsSendToTelemetry") ) { return hx::Val( _hx___statsSendToTelemetry_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"set_enableErrorChecking") ) { return hx::Val( set_enableErrorChecking_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__maxAnisotropyTexture2D") ) { return hx::Val( _hx___maxAnisotropyTexture2D); }
		if (HX_FIELD_EQ(inName,"setStencilReferenceValue") ) { return hx::Val( setStencilReferenceValue_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateScissorRectangle") ) { return hx::Val( _hx___updateScissorRectangle_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__depthStencilRenderBuffer") ) { return hx::Val( _hx___depthStencilRenderBuffer); }
		if (HX_FIELD_EQ(inName,"__maxAnisotropyCubeTexture") ) { return hx::Val( _hx___maxAnisotropyCubeTexture); }
		if (HX_FIELD_EQ(inName,"__updateBackbufferViewport") ) { return hx::Val( _hx___updateBackbufferViewport_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__supportsPackedDepthStencil") ) { return hx::Val( _hx___supportsPackedDepthStencil); }
		if (HX_FIELD_EQ(inName,"__updateDepthAndStencilState") ) { return hx::Val( _hx___updateDepthAndStencilState_dyn()); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromMatrix") ) { return hx::Val( setProgramConstantsFromMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromVector") ) { return hx::Val( setProgramConstantsFromVector_dyn()); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__supportsAnisotropicFiltering") ) { return hx::Val( _hx___supportsAnisotropicFiltering); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { return hx::Val( _hx___backBufferWantsBestResolution); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"setProgramConstantsFromByteArray") ) { return hx::Val( setProgramConstantsFromByteArray_dyn()); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"__backBufferEnableDepthAndStencil") ) { return hx::Val( _hx___backBufferEnableDepthAndStencil); }
	}
	return super::__Field(inName,inCallProp);
}

bool Context3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__stateCache") ) { outValue = _hx___stateCache; return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { outValue = supportsVideoTexture; return true; }
	}
	return false;
}

hx::Val Context3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { profile=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stats") ) { _hx___stats=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__program") ) { _hx___program=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stage3D") ) { _hx___stage3D=inValue.Cast<  ::openfl::display::Stage3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"driverInfo") ) { driverInfo=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__frameCount") ) { _hx___frameCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__statsCache") ) { _hx___statsCache=inValue.Cast<  ::openfl::_Vector::IntVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilRef") ) { _hx___stencilRef=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__framebuffer") ) { _hx___framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"totalGPUMemory") ) { totalGPUMemory=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerDirty") ) { _hx___samplerDirty=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backBufferWidth") ) { backBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__positionScale") ) { _hx___positionScale=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderSession") ) { _hx___renderSession=inValue.Cast<  ::openfl::_internal::renderer::RenderSession >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerStates") ) { _hx___samplerStates=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"backBufferHeight") ) { backBufferHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderToTexture") ) { _hx___renderToTexture=inValue.Cast<  ::openfl::display3D::textures::TextureBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__samplerTextures") ) { _hx___samplerTextures=inValue.Cast<  ::openfl::_Vector::ObjectVector >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilReadMask") ) { _hx___stencilReadMask=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__vertexConstants") ) { _hx___vertexConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"maxBackBufferWidth") ) { maxBackBufferWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scissorRectangle") ) { _hx___scissorRectangle=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"enableErrorChecking") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_enableErrorChecking(inValue) );enableErrorChecking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxBackBufferHeight") ) { maxBackBufferHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__depthRenderBuffer") ) { _hx___depthRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__fragmentConstants") ) { _hx___fragmentConstants=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__rttDepthAndStencil") ) { _hx___rttDepthAndStencil=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilCompareMode") ) { _hx___stencilCompareMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__backBufferAntiAlias") ) { _hx___backBufferAntiAlias=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__stencilRenderBuffer") ) { _hx___stencilRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"__maxAnisotropyTexture2D") ) { _hx___maxAnisotropyTexture2D=inValue.Cast< int >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"__depthStencilRenderBuffer") ) { _hx___depthStencilRenderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__maxAnisotropyCubeTexture") ) { _hx___maxAnisotropyCubeTexture=inValue.Cast< int >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"__supportsPackedDepthStencil") ) { _hx___supportsPackedDepthStencil=inValue.Cast< bool >(); return inValue; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"__supportsAnisotropicFiltering") ) { _hx___supportsAnisotropicFiltering=inValue.Cast< bool >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"__backBufferWantsBestResolution") ) { _hx___backBufferWantsBestResolution=inValue.Cast< bool >(); return inValue; }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"__backBufferEnableDepthAndStencil") ) { _hx___backBufferEnableDepthAndStencil=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Context3D_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"__stateCache") ) { _hx___stateCache=ioValue.Cast<  ::openfl::_internal::stage3D::Context3DStateCache >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"supportsVideoTexture") ) { supportsVideoTexture=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Context3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"));
	outFields->push(HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"));
	outFields->push(HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"));
	outFields->push(HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"));
	outFields->push(HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"));
	outFields->push(HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"));
	outFields->push(HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"));
	outFields->push(HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"));
	outFields->push(HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"));
	outFields->push(HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce"));
	outFields->push(HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"));
	outFields->push(HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32"));
	outFields->push(HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76"));
	outFields->push(HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"));
	outFields->push(HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"));
	outFields->push(HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"));
	outFields->push(HX_HCSTRING("__maxAnisotropyCubeTexture","\x60","\x25","\x1d","\x14"));
	outFields->push(HX_HCSTRING("__maxAnisotropyTexture2D","\xe7","\xc7","\xc4","\xba"));
	outFields->push(HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"));
	outFields->push(HX_HCSTRING("__program","\x64","\x9b","\x47","\x75"));
	outFields->push(HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17"));
	outFields->push(HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a"));
	outFields->push(HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce"));
	outFields->push(HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32"));
	outFields->push(HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14"));
	outFields->push(HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"));
	outFields->push(HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"));
	outFields->push(HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"));
	outFields->push(HX_HCSTRING("__stats","\xff","\xce","\x69","\xee"));
	outFields->push(HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82"));
	outFields->push(HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56"));
	outFields->push(HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0"));
	outFields->push(HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68"));
	outFields->push(HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34"));
	outFields->push(HX_HCSTRING("__supportsAnisotropicFiltering","\x7d","\xf0","\x0c","\x66"));
	outFields->push(HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa"));
	outFields->push(HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Context3D_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferHeight),HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,backBufferWidth),HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c")},
	{hx::fsString,(int)offsetof(Context3D_obj,driverInfo),HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3")},
	{hx::fsBool,(int)offsetof(Context3D_obj,enableErrorChecking),HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferHeight),HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e")},
	{hx::fsInt,(int)offsetof(Context3D_obj,maxBackBufferWidth),HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,profile),HX_HCSTRING("profile","\x29","\x49","\x49","\xf3")},
	{hx::fsInt,(int)offsetof(Context3D_obj,totalGPUMemory),HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___backBufferAntiAlias),HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferEnableDepthAndStencil),HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___backBufferWantsBestResolution),HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___depthRenderBuffer),HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___depthStencilRenderBuffer),HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___fragmentConstants),HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65")},
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(Context3D_obj,_hx___framebuffer),HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___frameCount),HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___maxAnisotropyCubeTexture),HX_HCSTRING("__maxAnisotropyCubeTexture","\x60","\x25","\x1d","\x14")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___maxAnisotropyTexture2D),HX_HCSTRING("__maxAnisotropyTexture2D","\xe7","\xc7","\xc4","\xba")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___positionScale),HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a")},
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(int)offsetof(Context3D_obj,_hx___program),HX_HCSTRING("__program","\x64","\x9b","\x47","\x75")},
	{hx::fsObject /*::openfl::_internal::renderer::RenderSession*/ ,(int)offsetof(Context3D_obj,_hx___renderSession),HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17")},
	{hx::fsObject /*::openfl::display3D::textures::TextureBase*/ ,(int)offsetof(Context3D_obj,_hx___renderToTexture),HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___rttDepthAndStencil),HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___samplerDirty),HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32")},
	{hx::fsObject /*::openfl::_Vector::ObjectVector*/ ,(int)offsetof(Context3D_obj,_hx___samplerTextures),HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Context3D_obj,_hx___samplerStates),HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(Context3D_obj,_hx___scissorRectangle),HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77")},
	{hx::fsObject /*::openfl::display::Stage3D*/ ,(int)offsetof(Context3D_obj,_hx___stage3D),HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(Context3D_obj,_hx___stats),HX_HCSTRING("__stats","\xff","\xce","\x69","\xee")},
	{hx::fsObject /*::openfl::_Vector::IntVector*/ ,(int)offsetof(Context3D_obj,_hx___statsCache),HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3D_obj,_hx___stencilCompareMode),HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___stencilRef),HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0")},
	{hx::fsInt,(int)offsetof(Context3D_obj,_hx___stencilReadMask),HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(Context3D_obj,_hx___stencilRenderBuffer),HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___supportsAnisotropicFiltering),HX_HCSTRING("__supportsAnisotropicFiltering","\x7d","\xf0","\x0c","\x66")},
	{hx::fsBool,(int)offsetof(Context3D_obj,_hx___supportsPackedDepthStencil),HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Context3D_obj,_hx___vertexConstants),HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3D_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &Context3D_obj::supportsVideoTexture,HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_SAMPLERS,HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_ATTRIBUTES,HX_HCSTRING("MAX_ATTRIBUTES","\xf2","\x89","\xd4","\x39")},
	{hx::fsInt,(void *) &Context3D_obj::MAX_PROGRAM_REGISTERS,HX_HCSTRING("MAX_PROGRAM_REGISTERS","\xfa","\x9b","\x3d","\x0f")},
	{hx::fsObject /*::openfl::_internal::stage3D::Context3DStateCache*/ ,(void *) &Context3D_obj::_hx___stateCache,HX_HCSTRING("__stateCache","\x91","\x71","\x8f","\xe9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3D_obj_sMemberFields[] = {
	HX_HCSTRING("backBufferHeight","\xce","\x3d","\x76","\xf3"),
	HX_HCSTRING("backBufferWidth","\xff","\xf9","\x53","\x8c"),
	HX_HCSTRING("driverInfo","\xb6","\x18","\x7b","\xe3"),
	HX_HCSTRING("enableErrorChecking","\x7f","\x3c","\x19","\xba"),
	HX_HCSTRING("maxBackBufferHeight","\x92","\xac","\x2a","\x8e"),
	HX_HCSTRING("maxBackBufferWidth","\xbb","\x8f","\x62","\xbe"),
	HX_HCSTRING("profile","\x29","\x49","\x49","\xf3"),
	HX_HCSTRING("totalGPUMemory","\xe9","\x89","\x1b","\x9c"),
	HX_HCSTRING("__backBufferAntiAlias","\xe7","\x9b","\x20","\xbd"),
	HX_HCSTRING("__backBufferEnableDepthAndStencil","\x5e","\x16","\x47","\xce"),
	HX_HCSTRING("__backBufferWantsBestResolution","\x0c","\x81","\x2c","\xec"),
	HX_HCSTRING("__depthRenderBuffer","\x79","\x1f","\xfe","\x32"),
	HX_HCSTRING("__depthStencilRenderBuffer","\xef","\x9c","\xa8","\x76"),
	HX_HCSTRING("__fragmentConstants","\x7f","\xa5","\xa6","\x65"),
	HX_HCSTRING("__framebuffer","\xcd","\x55","\xc0","\xc2"),
	HX_HCSTRING("__frameCount","\x82","\xf4","\x1c","\x66"),
	HX_HCSTRING("__maxAnisotropyCubeTexture","\x60","\x25","\x1d","\x14"),
	HX_HCSTRING("__maxAnisotropyTexture2D","\xe7","\xc7","\xc4","\xba"),
	HX_HCSTRING("__positionScale","\x01","\xd2","\x7f","\x6a"),
	HX_HCSTRING("__program","\x64","\x9b","\x47","\x75"),
	HX_HCSTRING("__renderSession","\x80","\xc3","\x37","\x17"),
	HX_HCSTRING("__renderToTexture","\x4a","\x8b","\x77","\x3a"),
	HX_HCSTRING("__rttDepthAndStencil","\x96","\x47","\x37","\xce"),
	HX_HCSTRING("__samplerDirty","\x0a","\x41","\x45","\x32"),
	HX_HCSTRING("__samplerTextures","\x40","\xf1","\xfc","\x14"),
	HX_HCSTRING("__samplerStates","\x4a","\xc1","\xd9","\x13"),
	HX_HCSTRING("__scissorRectangle","\x93","\x3b","\xf9","\x77"),
	HX_HCSTRING("__stage3D","\xcf","\x93","\x18","\xaf"),
	HX_HCSTRING("__stats","\xff","\xce","\x69","\xee"),
	HX_HCSTRING("__statsCache","\xc3","\x7e","\x8e","\x82"),
	HX_HCSTRING("__stencilCompareMode","\x2c","\x4d","\xce","\x56"),
	HX_HCSTRING("__stencilRef","\xd7","\x33","\x94","\xf0"),
	HX_HCSTRING("__stencilReadMask","\x5e","\x22","\x86","\x68"),
	HX_HCSTRING("__stencilRenderBuffer","\xf2","\xf5","\x97","\x34"),
	HX_HCSTRING("__supportsAnisotropicFiltering","\x7d","\xf0","\x0c","\x66"),
	HX_HCSTRING("__supportsPackedDepthStencil","\x95","\x74","\x8e","\xfa"),
	HX_HCSTRING("__vertexConstants","\x6b","\x1f","\x14","\xb9"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("configureBackBuffer","\x0d","\x3c","\x11","\x04"),
	HX_HCSTRING("createCubeTexture","\xca","\x46","\x30","\xc8"),
	HX_HCSTRING("createIndexBuffer","\x16","\x40","\x47","\x48"),
	HX_HCSTRING("createProgram","\xe8","\x22","\x3c","\xdc"),
	HX_HCSTRING("createRectangleTexture","\x88","\x8b","\xb3","\xf2"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("createVertexBuffer","\xa0","\xec","\xc7","\x6a"),
	HX_HCSTRING("createVideoTexture","\xbc","\x6e","\xfb","\xb2"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("drawToBitmapData","\x38","\x55","\xb6","\xf4"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("present","\xfb","\x3a","\xdc","\x39"),
	HX_HCSTRING("setBlendFactors","\x35","\x4b","\xcd","\xf5"),
	HX_HCSTRING("setColorMask","\xed","\x8b","\x13","\x48"),
	HX_HCSTRING("setCulling","\xee","\x06","\x67","\xa6"),
	HX_HCSTRING("setDepthTest","\xf3","\xe2","\xcc","\xc7"),
	HX_HCSTRING("setProgram","\x02","\x6f","\xd8","\x46"),
	HX_HCSTRING("setProgramConstantsFromByteArray","\x3a","\x1f","\x12","\xd4"),
	HX_HCSTRING("setProgramConstantsFromMatrix","\xd8","\xd0","\x45","\xbe"),
	HX_HCSTRING("setProgramConstantsFromVector","\x5a","\x4b","\xdb","\x99"),
	HX_HCSTRING("setRenderToBackBuffer","\x9a","\x84","\xfb","\xad"),
	HX_HCSTRING("setRenderToTexture","\xe8","\x2c","\x92","\x46"),
	HX_HCSTRING("setSamplerStateAt","\x7e","\x30","\x51","\xac"),
	HX_HCSTRING("setScissorRectangle","\x35","\x04","\x2c","\x03"),
	HX_HCSTRING("setStencilActions","\xa3","\xec","\xa6","\x2c"),
	HX_HCSTRING("setStencilReferenceValue","\xc0","\xdf","\xa3","\x11"),
	HX_HCSTRING("setTextureAt","\xac","\xee","\x98","\xd3"),
	HX_HCSTRING("setVertexBufferAt","\xd9","\x58","\xf9","\xc7"),
	HX_HCSTRING("__flushSamplerState","\xad","\xd1","\x48","\x4d"),
	HX_HCSTRING("__getGLCompareMode","\x4d","\xad","\x57","\x0d"),
	HX_HCSTRING("__getGLStencilAction","\xb7","\xa4","\x86","\x0d"),
	HX_HCSTRING("__hasGLExtension","\xa0","\xfe","\x45","\x9c"),
	HX_HCSTRING("__setViewport","\x08","\x57","\x7e","\x15"),
	HX_HCSTRING("__statsAdd","\x62","\x04","\xea","\x0b"),
	HX_HCSTRING("__statsClear","\x0e","\x56","\xd5","\x89"),
	HX_HCSTRING("__statsDecrement","\x14","\xaf","\x6e","\xa5"),
	HX_HCSTRING("__statsIncrement","\x30","\xbf","\xeb","\xc6"),
	HX_HCSTRING("__statsSendToTelemetry","\xd7","\xb8","\x7e","\x01"),
	HX_HCSTRING("__statsSubtract","\x33","\x97","\x22","\x32"),
	HX_HCSTRING("__updateDepthAndStencilState","\xf2","\x9d","\xe7","\xb2"),
	HX_HCSTRING("__updateBlendFactors","\x3c","\x4f","\x58","\x2e"),
	HX_HCSTRING("__updateScissorRectangle","\xbc","\x17","\x57","\x7f"),
	HX_HCSTRING("__updateBackbufferViewport","\x76","\x09","\xc0","\x09"),
	HX_HCSTRING("set_enableErrorChecking","\x22","\x4c","\xd0","\xc4"),
	::String(null()) };

static void Context3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_ATTRIBUTES,"MAX_ATTRIBUTES");
	HX_MARK_MEMBER_NAME(Context3D_obj::MAX_PROGRAM_REGISTERS,"MAX_PROGRAM_REGISTERS");
	HX_MARK_MEMBER_NAME(Context3D_obj::_hx___stateCache,"__stateCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3D_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3D_obj::supportsVideoTexture,"supportsVideoTexture");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_SAMPLERS,"MAX_SAMPLERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_ATTRIBUTES,"MAX_ATTRIBUTES");
	HX_VISIT_MEMBER_NAME(Context3D_obj::MAX_PROGRAM_REGISTERS,"MAX_PROGRAM_REGISTERS");
	HX_VISIT_MEMBER_NAME(Context3D_obj::_hx___stateCache,"__stateCache");
};

#endif

hx::Class Context3D_obj::__mClass;

static ::String Context3D_obj_sStaticFields[] = {
	HX_HCSTRING("supportsVideoTexture","\x44","\x35","\x75","\x67"),
	HX_HCSTRING("MAX_SAMPLERS","\xc6","\x92","\x84","\x06"),
	HX_HCSTRING("MAX_ATTRIBUTES","\xf2","\x89","\xd4","\x39"),
	HX_HCSTRING("MAX_PROGRAM_REGISTERS","\xfa","\x9b","\x3d","\x0f"),
	HX_HCSTRING("__stateCache","\x91","\x71","\x8f","\xe9"),
	::String(null())
};

void Context3D_obj::__register()
{
	hx::Object *dummy = new Context3D_obj;
	Context3D_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.Context3D","\xa7","\xbf","\xa0","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Context3D_obj::__GetStatic;
	__mClass->mSetStaticField = &Context3D_obj::__SetStatic;
	__mClass->mMarkFunc = Context3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3D_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_48_boot)
HXLINE(  48)		supportsVideoTexture = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_50_boot)
HXLINE(  50)		MAX_SAMPLERS = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_51_boot)
HXLINE(  51)		MAX_ATTRIBUTES = (int)16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_52_boot)
HXLINE(  52)		MAX_PROGRAM_REGISTERS = (int)128;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_15a405ef6f3df6a7_54_boot)
HXLINE(  54)		_hx___stateCache =  ::openfl::_internal::stage3D::Context3DStateCache_obj::__alloc( HX_CTX );
            	}
}

} // end namespace openfl
} // end namespace display3D
