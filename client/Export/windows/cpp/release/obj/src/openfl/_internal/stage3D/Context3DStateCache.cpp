// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__internal_stage3D_Context3DStateCache
#include <openfl/_internal/stage3D/Context3DStateCache.h>
#endif
#ifndef INCLUDED_openfl_display3D_Program3D
#include <openfl/display3D/Program3D.h>
#endif

namespace openfl{
namespace _internal{
namespace stage3D{

void Context3DStateCache_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","new",0xfc35c194,"openfl._internal.stage3D.Context3DStateCache.new","openfl/_internal/stage3D/Context3DStateCache.hx",11,0xc7f853df)
            	HX_STACK_THIS(this)
HXLINE(  27)		Bool fixed = null();
HXDLIN(  27)		 ::openfl::_Vector::FloatVector _hx_tmp =  ::openfl::_Vector::FloatVector_obj::__new((int)4096,fixed,null());
HXDLIN(  27)		this->_registers = _hx_tmp;
HXLINE(  37)		this->clearSettings();
            	}

Dynamic Context3DStateCache_obj::__CreateEmpty() { return new Context3DStateCache_obj; }

hx::ObjectPtr< Context3DStateCache_obj > Context3DStateCache_obj::__new()
{
	hx::ObjectPtr< Context3DStateCache_obj > _hx_result = new Context3DStateCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Context3DStateCache_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Context3DStateCache_obj > _hx_result = new Context3DStateCache_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Context3DStateCache_obj::clearRegisters(){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","clearRegisters",0x47eb38af,"openfl._internal.stage3D.Context3DStateCache.clearRegisters","openfl/_internal/stage3D/Context3DStateCache.hx",46,0xc7f853df)
            	HX_STACK_THIS(this)
HXLINE(  46)		HX_VARI( Int,_g1) = (int)0;
HXDLIN(  46)		while((_g1 < (int)4096)){
HXLINE(  46)			HX_VARI( Int,c) = _g1++;
HXLINE(  48)			this->_registers->set(c,((Float)-999999999.0));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3DStateCache_obj,clearRegisters,(void))

void Context3DStateCache_obj::clearSettings(){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","clearSettings",0x4de179c4,"openfl._internal.stage3D.Context3DStateCache.clearSettings","openfl/_internal/stage3D/Context3DStateCache.hx",55,0xc7f853df)
            	HX_STACK_THIS(this)
HXLINE(  57)		this->_srcBlendFactor = null();
HXLINE(  58)		this->_destBlendFactor = null();
HXLINE(  59)		this->_depthTestEnabled = false;
HXLINE(  60)		this->_depthTestMask = false;
HXLINE(  61)		this->_depthTestCompareMode = null();
HXLINE(  62)		this->_program = null();
HXLINE(  63)		this->_cullingMode = null();
HXLINE(  64)		this->_activeTexture = (int)-1;
HXLINE(  65)		this->_activeVertexArray = (int)-1;
HXLINE(  66)		this->_viewportOriginX = (int)-1;
HXLINE(  67)		this->_viewportOriginY = (int)-1;
HXLINE(  68)		this->_viewportWidth = (int)-1;
HXLINE(  69)		this->_viewportHeight = (int)-1;
HXLINE(  71)		this->clearRegisters();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Context3DStateCache_obj,clearSettings,(void))

Bool Context3DStateCache_obj::updateActiveTextureSample(Int texture){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateActiveTextureSample",0xbea3116a,"openfl._internal.stage3D.Context3DStateCache.updateActiveTextureSample","openfl/_internal/stage3D/Context3DStateCache.hx",76,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(texture,"texture")
HXLINE(  84)		this->_activeTexture = texture;
HXLINE(  85)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateActiveTextureSample,return )

Bool Context3DStateCache_obj::updateActiveVertexArray(Int vertexArray){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateActiveVertexArray",0x147a1a5a,"openfl._internal.stage3D.Context3DStateCache.updateActiveVertexArray","openfl/_internal/stage3D/Context3DStateCache.hx",90,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertexArray,"vertexArray")
HXLINE(  98)		this->_activeVertexArray = vertexArray;
HXLINE(  99)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateActiveVertexArray,return )

Bool Context3DStateCache_obj::updateBlendDestFactor( ::Dynamic factor){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateBlendDestFactor",0xd0cb3ead,"openfl._internal.stage3D.Context3DStateCache.updateBlendDestFactor","openfl/_internal/stage3D/Context3DStateCache.hx",104,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(factor,"factor")
HXLINE( 112)		this->_destBlendFactor = factor;
HXLINE( 113)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateBlendDestFactor,return )

Bool Context3DStateCache_obj::updateBlendSrcFactor( ::Dynamic factor){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateBlendSrcFactor",0x54a68877,"openfl._internal.stage3D.Context3DStateCache.updateBlendSrcFactor","openfl/_internal/stage3D/Context3DStateCache.hx",118,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(factor,"factor")
HXLINE( 126)		this->_srcBlendFactor = factor;
HXLINE( 127)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateBlendSrcFactor,return )

Bool Context3DStateCache_obj::updateCullingMode( ::Dynamic cullMode){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateCullingMode",0x8ec7aa9e,"openfl._internal.stage3D.Context3DStateCache.updateCullingMode","openfl/_internal/stage3D/Context3DStateCache.hx",132,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cullMode,"cullMode")
HXLINE( 140)		this->_cullingMode = cullMode;
HXLINE( 141)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateCullingMode,return )

Bool Context3DStateCache_obj::updateDepthCompareMode( ::Dynamic mode){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateDepthCompareMode",0xcaf041da,"openfl._internal.stage3D.Context3DStateCache.updateDepthCompareMode","openfl/_internal/stage3D/Context3DStateCache.hx",146,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mode,"mode")
HXLINE( 154)		this->_depthTestCompareMode = mode;
HXLINE( 155)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateDepthCompareMode,return )

Bool Context3DStateCache_obj::updateDepthTestEnabled(Bool test){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateDepthTestEnabled",0x47bd6581,"openfl._internal.stage3D.Context3DStateCache.updateDepthTestEnabled","openfl/_internal/stage3D/Context3DStateCache.hx",160,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(test,"test")
HXLINE( 168)		this->_depthTestEnabled = test;
HXLINE( 169)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateDepthTestEnabled,return )

Bool Context3DStateCache_obj::updateDepthTestMask(Bool mask){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateDepthTestMask",0xcdb33fec,"openfl._internal.stage3D.Context3DStateCache.updateDepthTestMask","openfl/_internal/stage3D/Context3DStateCache.hx",174,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
HXLINE( 182)		this->_depthTestMask = mask;
HXLINE( 183)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateDepthTestMask,return )

Bool Context3DStateCache_obj::updateProgram3D( ::openfl::display3D::Program3D program3d){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateProgram3D",0x56efe020,"openfl._internal.stage3D.Context3DStateCache.updateProgram3D","openfl/_internal/stage3D/Context3DStateCache.hx",188,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(program3d,"program3d")
HXLINE( 196)		this->_program = program3d;
HXLINE( 197)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Context3DStateCache_obj,updateProgram3D,return )

Bool Context3DStateCache_obj::updateRegisters( ::openfl::_Vector::FloatVector mTemp,Int startRegister,Int numRegisters){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateRegisters",0x353db09b,"openfl._internal.stage3D.Context3DStateCache.updateRegisters","openfl/_internal/stage3D/Context3DStateCache.hx",204,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mTemp,"mTemp")
            	HX_STACK_ARG(startRegister,"startRegister")
            	HX_STACK_ARG(numRegisters,"numRegisters")
HXLINE( 204)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Context3DStateCache_obj,updateRegisters,return )

Bool Context3DStateCache_obj::updateViewport(Int originX,Int originY,Int width,Int height){
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","updateViewport",0xa0a332db,"openfl._internal.stage3D.Context3DStateCache.updateViewport","openfl/_internal/stage3D/Context3DStateCache.hx",229,0xc7f853df)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(originX,"originX")
            	HX_STACK_ARG(originY,"originY")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 237)		this->_viewportOriginX = originX;
HXLINE( 238)		this->_viewportOriginY = originY;
HXLINE( 239)		this->_viewportWidth = width;
HXLINE( 240)		this->_viewportHeight = height;
HXLINE( 242)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Context3DStateCache_obj,updateViewport,return )

Int Context3DStateCache_obj::FLOATS_PER_REGISTER;

Int Context3DStateCache_obj::MAX_NUM_REGISTERS;

Bool Context3DStateCache_obj::disableCache;


Context3DStateCache_obj::Context3DStateCache_obj()
{
}

void Context3DStateCache_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Context3DStateCache);
	HX_MARK_MEMBER_NAME(_activeTexture,"_activeTexture");
	HX_MARK_MEMBER_NAME(_activeVertexArray,"_activeVertexArray");
	HX_MARK_MEMBER_NAME(_cullingMode,"_cullingMode");
	HX_MARK_MEMBER_NAME(_depthTestCompareMode,"_depthTestCompareMode");
	HX_MARK_MEMBER_NAME(_depthTestEnabled,"_depthTestEnabled");
	HX_MARK_MEMBER_NAME(_depthTestMask,"_depthTestMask");
	HX_MARK_MEMBER_NAME(_destBlendFactor,"_destBlendFactor");
	HX_MARK_MEMBER_NAME(_program,"_program");
	HX_MARK_MEMBER_NAME(_registers,"_registers");
	HX_MARK_MEMBER_NAME(_srcBlendFactor,"_srcBlendFactor");
	HX_MARK_MEMBER_NAME(_viewportHeight,"_viewportHeight");
	HX_MARK_MEMBER_NAME(_viewportOriginX,"_viewportOriginX");
	HX_MARK_MEMBER_NAME(_viewportOriginY,"_viewportOriginY");
	HX_MARK_MEMBER_NAME(_viewportWidth,"_viewportWidth");
	HX_MARK_END_CLASS();
}

void Context3DStateCache_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_activeTexture,"_activeTexture");
	HX_VISIT_MEMBER_NAME(_activeVertexArray,"_activeVertexArray");
	HX_VISIT_MEMBER_NAME(_cullingMode,"_cullingMode");
	HX_VISIT_MEMBER_NAME(_depthTestCompareMode,"_depthTestCompareMode");
	HX_VISIT_MEMBER_NAME(_depthTestEnabled,"_depthTestEnabled");
	HX_VISIT_MEMBER_NAME(_depthTestMask,"_depthTestMask");
	HX_VISIT_MEMBER_NAME(_destBlendFactor,"_destBlendFactor");
	HX_VISIT_MEMBER_NAME(_program,"_program");
	HX_VISIT_MEMBER_NAME(_registers,"_registers");
	HX_VISIT_MEMBER_NAME(_srcBlendFactor,"_srcBlendFactor");
	HX_VISIT_MEMBER_NAME(_viewportHeight,"_viewportHeight");
	HX_VISIT_MEMBER_NAME(_viewportOriginX,"_viewportOriginX");
	HX_VISIT_MEMBER_NAME(_viewportOriginY,"_viewportOriginY");
	HX_VISIT_MEMBER_NAME(_viewportWidth,"_viewportWidth");
}

hx::Val Context3DStateCache_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_program") ) { return hx::Val( _program); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_registers") ) { return hx::Val( _registers); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_cullingMode") ) { return hx::Val( _cullingMode); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"clearSettings") ) { return hx::Val( clearSettings_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_activeTexture") ) { return hx::Val( _activeTexture); }
		if (HX_FIELD_EQ(inName,"_depthTestMask") ) { return hx::Val( _depthTestMask); }
		if (HX_FIELD_EQ(inName,"_viewportWidth") ) { return hx::Val( _viewportWidth); }
		if (HX_FIELD_EQ(inName,"clearRegisters") ) { return hx::Val( clearRegisters_dyn()); }
		if (HX_FIELD_EQ(inName,"updateViewport") ) { return hx::Val( updateViewport_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_srcBlendFactor") ) { return hx::Val( _srcBlendFactor); }
		if (HX_FIELD_EQ(inName,"_viewportHeight") ) { return hx::Val( _viewportHeight); }
		if (HX_FIELD_EQ(inName,"updateProgram3D") ) { return hx::Val( updateProgram3D_dyn()); }
		if (HX_FIELD_EQ(inName,"updateRegisters") ) { return hx::Val( updateRegisters_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_destBlendFactor") ) { return hx::Val( _destBlendFactor); }
		if (HX_FIELD_EQ(inName,"_viewportOriginX") ) { return hx::Val( _viewportOriginX); }
		if (HX_FIELD_EQ(inName,"_viewportOriginY") ) { return hx::Val( _viewportOriginY); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_depthTestEnabled") ) { return hx::Val( _depthTestEnabled); }
		if (HX_FIELD_EQ(inName,"updateCullingMode") ) { return hx::Val( updateCullingMode_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_activeVertexArray") ) { return hx::Val( _activeVertexArray); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateDepthTestMask") ) { return hx::Val( updateDepthTestMask_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"updateBlendSrcFactor") ) { return hx::Val( updateBlendSrcFactor_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_depthTestCompareMode") ) { return hx::Val( _depthTestCompareMode); }
		if (HX_FIELD_EQ(inName,"updateBlendDestFactor") ) { return hx::Val( updateBlendDestFactor_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"updateDepthCompareMode") ) { return hx::Val( updateDepthCompareMode_dyn()); }
		if (HX_FIELD_EQ(inName,"updateDepthTestEnabled") ) { return hx::Val( updateDepthTestEnabled_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"updateActiveVertexArray") ) { return hx::Val( updateActiveVertexArray_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"updateActiveTextureSample") ) { return hx::Val( updateActiveTextureSample_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Context3DStateCache_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_program") ) { _program=inValue.Cast<  ::openfl::display3D::Program3D >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_registers") ) { _registers=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_cullingMode") ) { _cullingMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"_activeTexture") ) { _activeTexture=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_depthTestMask") ) { _depthTestMask=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_viewportWidth") ) { _viewportWidth=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_srcBlendFactor") ) { _srcBlendFactor=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_viewportHeight") ) { _viewportHeight=inValue.Cast< Int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_destBlendFactor") ) { _destBlendFactor=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_viewportOriginX") ) { _viewportOriginX=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_viewportOriginY") ) { _viewportOriginY=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_depthTestEnabled") ) { _depthTestEnabled=inValue.Cast< Bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_activeVertexArray") ) { _activeVertexArray=inValue.Cast< Int >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_depthTestCompareMode") ) { _depthTestCompareMode=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Context3DStateCache_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_activeTexture","\xf6","\x03","\xfc","\x94"));
	outFields->push(HX_HCSTRING("_activeVertexArray","\x30","\x9c","\x71","\x09"));
	outFields->push(HX_HCSTRING("_cullingMode","\xf4","\x87","\x45","\xc8"));
	outFields->push(HX_HCSTRING("_depthTestCompareMode","\x92","\x77","\x60","\x2d"));
	outFields->push(HX_HCSTRING("_depthTestEnabled","\x6b","\x70","\x8f","\xca"));
	outFields->push(HX_HCSTRING("_depthTestMask","\xc2","\x9e","\x63","\xc8"));
	outFields->push(HX_HCSTRING("_destBlendFactor","\x3f","\xbb","\x73","\x88"));
	outFields->push(HX_HCSTRING("_program","\x05","\xa4","\xb1","\x2d"));
	outFields->push(HX_HCSTRING("_registers","\x71","\x6c","\xb4","\x16"));
	outFields->push(HX_HCSTRING("_srcBlendFactor","\x1b","\x24","\xae","\xb6"));
	outFields->push(HX_HCSTRING("_viewportHeight","\x8c","\x61","\x74","\x97"));
	outFields->push(HX_HCSTRING("_viewportOriginX","\x6d","\xa6","\x1b","\x44"));
	outFields->push(HX_HCSTRING("_viewportOriginY","\x6e","\xa6","\x1b","\x44"));
	outFields->push(HX_HCSTRING("_viewportWidth","\x01","\x18","\xf0","\xf0"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Context3DStateCache_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Context3DStateCache_obj,_activeTexture),HX_HCSTRING("_activeTexture","\xf6","\x03","\xfc","\x94")},
	{hx::fsInt,(int)offsetof(Context3DStateCache_obj,_activeVertexArray),HX_HCSTRING("_activeVertexArray","\x30","\x9c","\x71","\x09")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3DStateCache_obj,_cullingMode),HX_HCSTRING("_cullingMode","\xf4","\x87","\x45","\xc8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3DStateCache_obj,_depthTestCompareMode),HX_HCSTRING("_depthTestCompareMode","\x92","\x77","\x60","\x2d")},
	{hx::fsBool,(int)offsetof(Context3DStateCache_obj,_depthTestEnabled),HX_HCSTRING("_depthTestEnabled","\x6b","\x70","\x8f","\xca")},
	{hx::fsBool,(int)offsetof(Context3DStateCache_obj,_depthTestMask),HX_HCSTRING("_depthTestMask","\xc2","\x9e","\x63","\xc8")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3DStateCache_obj,_destBlendFactor),HX_HCSTRING("_destBlendFactor","\x3f","\xbb","\x73","\x88")},
	{hx::fsObject /*::openfl::display3D::Program3D*/ ,(int)offsetof(Context3DStateCache_obj,_program),HX_HCSTRING("_program","\x05","\xa4","\xb1","\x2d")},
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(Context3DStateCache_obj,_registers),HX_HCSTRING("_registers","\x71","\x6c","\xb4","\x16")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Context3DStateCache_obj,_srcBlendFactor),HX_HCSTRING("_srcBlendFactor","\x1b","\x24","\xae","\xb6")},
	{hx::fsInt,(int)offsetof(Context3DStateCache_obj,_viewportHeight),HX_HCSTRING("_viewportHeight","\x8c","\x61","\x74","\x97")},
	{hx::fsInt,(int)offsetof(Context3DStateCache_obj,_viewportOriginX),HX_HCSTRING("_viewportOriginX","\x6d","\xa6","\x1b","\x44")},
	{hx::fsInt,(int)offsetof(Context3DStateCache_obj,_viewportOriginY),HX_HCSTRING("_viewportOriginY","\x6e","\xa6","\x1b","\x44")},
	{hx::fsInt,(int)offsetof(Context3DStateCache_obj,_viewportWidth),HX_HCSTRING("_viewportWidth","\x01","\x18","\xf0","\xf0")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Context3DStateCache_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Context3DStateCache_obj::FLOATS_PER_REGISTER,HX_HCSTRING("FLOATS_PER_REGISTER","\x8d","\x76","\x42","\x08")},
	{hx::fsInt,(void *) &Context3DStateCache_obj::MAX_NUM_REGISTERS,HX_HCSTRING("MAX_NUM_REGISTERS","\xbc","\x37","\x8a","\x55")},
	{hx::fsBool,(void *) &Context3DStateCache_obj::disableCache,HX_HCSTRING("disableCache","\x3a","\xb7","\x98","\x7f")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Context3DStateCache_obj_sMemberFields[] = {
	HX_HCSTRING("_activeTexture","\xf6","\x03","\xfc","\x94"),
	HX_HCSTRING("_activeVertexArray","\x30","\x9c","\x71","\x09"),
	HX_HCSTRING("_cullingMode","\xf4","\x87","\x45","\xc8"),
	HX_HCSTRING("_depthTestCompareMode","\x92","\x77","\x60","\x2d"),
	HX_HCSTRING("_depthTestEnabled","\x6b","\x70","\x8f","\xca"),
	HX_HCSTRING("_depthTestMask","\xc2","\x9e","\x63","\xc8"),
	HX_HCSTRING("_destBlendFactor","\x3f","\xbb","\x73","\x88"),
	HX_HCSTRING("_program","\x05","\xa4","\xb1","\x2d"),
	HX_HCSTRING("_registers","\x71","\x6c","\xb4","\x16"),
	HX_HCSTRING("_srcBlendFactor","\x1b","\x24","\xae","\xb6"),
	HX_HCSTRING("_viewportHeight","\x8c","\x61","\x74","\x97"),
	HX_HCSTRING("_viewportOriginX","\x6d","\xa6","\x1b","\x44"),
	HX_HCSTRING("_viewportOriginY","\x6e","\xa6","\x1b","\x44"),
	HX_HCSTRING("_viewportWidth","\x01","\x18","\xf0","\xf0"),
	HX_HCSTRING("clearRegisters","\x63","\x45","\x17","\x79"),
	HX_HCSTRING("clearSettings","\x90","\x7f","\x9a","\xbe"),
	HX_HCSTRING("updateActiveTextureSample","\x36","\x99","\xb3","\x38"),
	HX_HCSTRING("updateActiveVertexArray","\x26","\xd7","\xc8","\x0f"),
	HX_HCSTRING("updateBlendDestFactor","\x79","\xf0","\xf0","\xf1"),
	HX_HCSTRING("updateBlendSrcFactor","\x2b","\x14","\x7b","\xed"),
	HX_HCSTRING("updateCullingMode","\x6a","\x86","\xa5","\xc6"),
	HX_HCSTRING("updateDepthCompareMode","\x8e","\x22","\xc6","\xaa"),
	HX_HCSTRING("updateDepthTestEnabled","\x35","\x46","\x93","\x27"),
	HX_HCSTRING("updateDepthTestMask","\xb8","\xa6","\x98","\x1d"),
	HX_HCSTRING("updateProgram3D","\xec","\xf0","\x4e","\x2c"),
	HX_HCSTRING("updateRegisters","\x67","\xc1","\x9c","\x0a"),
	HX_HCSTRING("updateViewport","\x8f","\x3f","\xcf","\xd1"),
	::String(null()) };

static void Context3DStateCache_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Context3DStateCache_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Context3DStateCache_obj::FLOATS_PER_REGISTER,"FLOATS_PER_REGISTER");
	HX_MARK_MEMBER_NAME(Context3DStateCache_obj::MAX_NUM_REGISTERS,"MAX_NUM_REGISTERS");
	HX_MARK_MEMBER_NAME(Context3DStateCache_obj::disableCache,"disableCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Context3DStateCache_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Context3DStateCache_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Context3DStateCache_obj::FLOATS_PER_REGISTER,"FLOATS_PER_REGISTER");
	HX_VISIT_MEMBER_NAME(Context3DStateCache_obj::MAX_NUM_REGISTERS,"MAX_NUM_REGISTERS");
	HX_VISIT_MEMBER_NAME(Context3DStateCache_obj::disableCache,"disableCache");
};

#endif

hx::Class Context3DStateCache_obj::__mClass;

static ::String Context3DStateCache_obj_sStaticFields[] = {
	HX_HCSTRING("FLOATS_PER_REGISTER","\x8d","\x76","\x42","\x08"),
	HX_HCSTRING("MAX_NUM_REGISTERS","\xbc","\x37","\x8a","\x55"),
	HX_HCSTRING("disableCache","\x3a","\xb7","\x98","\x7f"),
	::String(null())
};

void Context3DStateCache_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.stage3D.Context3DStateCache","\xa2","\xa7","\xb0","\x13");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Context3DStateCache_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Context3DStateCache_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Context3DStateCache_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Context3DStateCache_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Context3DStateCache_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Context3DStateCache_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Context3DStateCache_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Context3DStateCache_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","boot",0xaaeca07e,"openfl._internal.stage3D.Context3DStateCache.boot","openfl/_internal/stage3D/Context3DStateCache.hx",14,0xc7f853df)
HXLINE(  14)		FLOATS_PER_REGISTER = (int)4;
            	}
{
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","boot",0xaaeca07e,"openfl._internal.stage3D.Context3DStateCache.boot","openfl/_internal/stage3D/Context3DStateCache.hx",15,0xc7f853df)
HXLINE(  15)		MAX_NUM_REGISTERS = (int)1024;
            	}
{
            	HX_STACK_FRAME("openfl._internal.stage3D.Context3DStateCache","boot",0xaaeca07e,"openfl._internal.stage3D.Context3DStateCache.boot","openfl/_internal/stage3D/Context3DStateCache.hx",17,0xc7f853df)
HXLINE(  17)		disableCache = true;
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace stage3D
