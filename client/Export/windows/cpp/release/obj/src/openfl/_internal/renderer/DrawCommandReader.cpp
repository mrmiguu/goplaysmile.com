// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{

void DrawCommandReader_obj::__construct( ::openfl::_internal::renderer::DrawCommandBuffer buffer){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","new",0x4095dae1,"openfl._internal.renderer.DrawCommandReader.new","openfl/_internal/renderer/DrawCommandReader.hx",35,0xbbdbd1ae)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE(  37)		this->buffer = buffer;
HXLINE(  39)		this->bPos = (this->iPos = (this->fPos = (this->oPos = (this->ffPos = (this->iiPos = (this->tsPos = (int)0))))));
HXLINE(  40)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::UNKNOWN_dyn();
            	}

Dynamic DrawCommandReader_obj::__CreateEmpty() { return new DrawCommandReader_obj; }

hx::ObjectPtr< DrawCommandReader_obj > DrawCommandReader_obj::__new( ::openfl::_internal::renderer::DrawCommandBuffer buffer)
{
	hx::ObjectPtr< DrawCommandReader_obj > _hx_result = new DrawCommandReader_obj();
	_hx_result->__construct(buffer);
	return _hx_result;
}

Dynamic DrawCommandReader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DrawCommandReader_obj > _hx_result = new DrawCommandReader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void DrawCommandReader_obj::advance(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","advance",0xc0cbe783,"openfl._internal.renderer.DrawCommandReader.advance","openfl/_internal/renderer/DrawCommandReader.hx",47,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE(  47)		Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN(  47)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(  51)				hx::AddEq(this->oPos,(int)2);
HXLINE(  52)				hx::AddEq(this->bPos,(int)2);
            			}
            			break;
            			case (int)1: {
HXLINE(  56)				hx::AddEq(this->iPos,(int)1);
HXLINE(  57)				hx::AddEq(this->fPos,(int)1);
            			}
            			break;
            			case (int)2: {
HXLINE(  61)				hx::AddEq(this->oPos,(int)4);
HXLINE(  62)				hx::AddEq(this->iiPos,(int)2);
HXLINE(  63)				hx::AddEq(this->ffPos,(int)1);
HXLINE(  64)				hx::AddEq(this->fPos,(int)1);
            			}
            			break;
            			case (int)3: {
HXLINE(  68)				hx::AddEq(this->fPos,(int)6);
            			}
            			break;
            			case (int)4: {
HXLINE(  72)				hx::AddEq(this->fPos,(int)4);
            			}
            			break;
            			case (int)5: {
HXLINE(  76)				hx::AddEq(this->fPos,(int)3);
            			}
            			break;
            			case (int)6: {
HXLINE(  80)				hx::AddEq(this->fPos,(int)4);
            			}
            			break;
            			case (int)7: {
HXLINE(  84)				hx::AddEq(this->fPos,(int)4);
            			}
            			break;
            			case (int)8: {
HXLINE(  88)				hx::AddEq(this->fPos,(int)5);
HXLINE(  89)				hx::AddEq(this->oPos,(int)1);
            			}
            			break;
            			case (int)10: {
HXLINE(  93)				hx::AddEq(this->oPos,(int)4);
            			}
            			break;
            			case (int)11: {
            			}
            			break;
            			case (int)12: {
HXLINE( 101)				hx::AddEq(this->oPos,(int)2);
HXLINE( 102)				hx::AddEq(this->bPos,(int)2);
            			}
            			break;
            			case (int)13: {
HXLINE( 106)				hx::AddEq(this->oPos,(int)4);
HXLINE( 107)				hx::AddEq(this->iiPos,(int)2);
HXLINE( 108)				hx::AddEq(this->ffPos,(int)1);
HXLINE( 109)				hx::AddEq(this->fPos,(int)1);
            			}
            			break;
            			case (int)14: {
HXLINE( 113)				hx::AddEq(this->oPos,(int)4);
HXLINE( 114)				hx::AddEq(this->iPos,(int)1);
HXLINE( 115)				hx::AddEq(this->fPos,(int)2);
HXLINE( 116)				hx::AddEq(this->bPos,(int)1);
            			}
            			break;
            			case (int)15: {
HXLINE( 120)				hx::AddEq(this->fPos,(int)2);
            			}
            			break;
            			case (int)16: {
HXLINE( 124)				hx::AddEq(this->fPos,(int)2);
            			}
            			break;
            			case (int)17: {
HXLINE( 129)				hx::AddEq(this->oPos,(int)1);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,advance,(void))

Bool DrawCommandReader_obj::_hx_bool(Int index){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","bool",0x3aa2aa89,"openfl._internal.renderer.DrawCommandReader.bool","openfl/_internal/renderer/DrawCommandReader.hx",141,0xbbdbd1ae)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 141)		return this->buffer->b->__get((this->bPos + index));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandReader_obj,_hx_bool,return )

void DrawCommandReader_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","destroy",0xf6460bfb,"openfl._internal.renderer.DrawCommandReader.destroy","openfl/_internal/renderer/DrawCommandReader.hx",146,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 148)		this->buffer = null();
HXLINE( 149)		this->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,destroy,(void))

::Array< Float > DrawCommandReader_obj::fArr(Int index){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","fArr",0x3d249ffa,"openfl._internal.renderer.DrawCommandReader.fArr","openfl/_internal/renderer/DrawCommandReader.hx",156,0xbbdbd1ae)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 156)		return this->buffer->ff->__get((this->ffPos + index)).StaticCast< ::Array< Float > >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandReader_obj,fArr,return )

Float DrawCommandReader_obj::_hx_float(Int index){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","float",0x5f51325d,"openfl._internal.renderer.DrawCommandReader.float","openfl/_internal/renderer/DrawCommandReader.hx",163,0xbbdbd1ae)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 163)		return this->buffer->f->__get((this->fPos + index));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandReader_obj,_hx_float,return )

::Array< Int > DrawCommandReader_obj::iArr(Int index){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","iArr",0x3f2043d7,"openfl._internal.renderer.DrawCommandReader.iArr","openfl/_internal/renderer/DrawCommandReader.hx",170,0xbbdbd1ae)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 170)		return this->buffer->ii->__get((this->iiPos + index)).StaticCast< ::Array< Int > >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandReader_obj,iArr,return )

Int DrawCommandReader_obj::_hx_int(Int index){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","int",0x40921770,"openfl._internal.renderer.DrawCommandReader.int","openfl/_internal/renderer/DrawCommandReader.hx",177,0xbbdbd1ae)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 177)		return this->buffer->i->__get((this->iPos + index));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandReader_obj,_hx_int,return )

 ::Dynamic DrawCommandReader_obj::obj(Int index){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","obj",0x40969a78,"openfl._internal.renderer.DrawCommandReader.obj","openfl/_internal/renderer/DrawCommandReader.hx",184,0xbbdbd1ae)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 184)		return this->buffer->o->__get((this->oPos + index));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandReader_obj,obj,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readBeginBitmapFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readBeginBitmapFill",0xa0599366,"openfl._internal.renderer.DrawCommandReader.readBeginBitmapFill","openfl/_internal/renderer/DrawCommandReader.hx",189,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 189)		{
HXLINE( 189)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 189)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 189)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 189)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 189)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 189)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 189)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 189)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 189)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 189)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 189)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 189)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 189)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 189)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 189)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 189)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 189)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 189)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 189)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 189)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 189)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 189)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 189)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 189)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 189)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 189)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 189)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 189)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 189)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 189)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 189)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 189)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 189)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readBeginBitmapFill,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readBeginFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readBeginFill",0xa70abcd7,"openfl._internal.renderer.DrawCommandReader.readBeginFill","openfl/_internal/renderer/DrawCommandReader.hx",190,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 190)		{
HXLINE( 190)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 190)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 190)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 190)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 190)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 190)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 190)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 190)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 190)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 190)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 190)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 190)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 190)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 190)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 190)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 190)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 190)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 190)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 190)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 190)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 190)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 190)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 190)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 190)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 190)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 190)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 190)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 190)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 190)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 190)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 190)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 190)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 190)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readBeginFill,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readBeginGradientFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readBeginGradientFill",0xf3b34ee7,"openfl._internal.renderer.DrawCommandReader.readBeginGradientFill","openfl/_internal/renderer/DrawCommandReader.hx",191,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 191)		{
HXLINE( 191)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 191)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 191)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 191)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 191)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 191)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 191)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 191)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 191)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 191)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 191)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 191)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 191)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 191)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 191)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 191)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 191)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 191)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 191)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 191)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 191)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 191)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 191)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 191)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 191)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 191)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 191)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 191)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 191)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 191)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 191)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 191)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 191)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readBeginGradientFill,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readCubicCurveTo(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readCubicCurveTo",0x914f0135,"openfl._internal.renderer.DrawCommandReader.readCubicCurveTo","openfl/_internal/renderer/DrawCommandReader.hx",192,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 192)		{
HXLINE( 192)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 192)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 192)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 192)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 192)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 192)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 192)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 192)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 192)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 192)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 192)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 192)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 192)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 192)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 192)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 192)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 192)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 192)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 192)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 192)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 192)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 192)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 192)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 192)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 192)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 192)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 192)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 192)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 192)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 192)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 192)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 192)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 192)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readCubicCurveTo,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readCurveTo(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readCurveTo",0x2d75e6d5,"openfl._internal.renderer.DrawCommandReader.readCurveTo","openfl/_internal/renderer/DrawCommandReader.hx",193,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 193)		{
HXLINE( 193)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 193)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 193)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 193)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 193)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 193)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 193)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 193)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 193)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 193)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 193)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 193)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 193)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 193)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 193)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 193)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 193)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 193)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 193)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 193)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 193)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 193)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 193)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 193)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 193)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 193)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 193)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 193)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 193)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 193)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 193)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 193)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 193)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readCurveTo,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readDrawCircle(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readDrawCircle",0xa3c97749,"openfl._internal.renderer.DrawCommandReader.readDrawCircle","openfl/_internal/renderer/DrawCommandReader.hx",194,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 194)		{
HXLINE( 194)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 194)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 194)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 194)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 194)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 194)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 194)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 194)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 194)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 194)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 194)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 194)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 194)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 194)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 194)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 194)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 194)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 194)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 194)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 194)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 194)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 194)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 194)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 194)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 194)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 194)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 194)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 194)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 194)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 194)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 194)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 194)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 194)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readDrawCircle,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readDrawEllipse(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readDrawEllipse",0xc24ecd85,"openfl._internal.renderer.DrawCommandReader.readDrawEllipse","openfl/_internal/renderer/DrawCommandReader.hx",195,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 195)		{
HXLINE( 195)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 195)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 195)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 195)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 195)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 195)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 195)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 195)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 195)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 195)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 195)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 195)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 195)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 195)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 195)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 195)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 195)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 195)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 195)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 195)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 195)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 195)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 195)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 195)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 195)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 195)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 195)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 195)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 195)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 195)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 195)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 195)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 195)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readDrawEllipse,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readDrawRect(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readDrawRect",0x10f9621d,"openfl._internal.renderer.DrawCommandReader.readDrawRect","openfl/_internal/renderer/DrawCommandReader.hx",196,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 196)		{
HXLINE( 196)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 196)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 196)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 196)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 196)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 196)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 196)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 196)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 196)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 196)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 196)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 196)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 196)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 196)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 196)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 196)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 196)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 196)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 196)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 196)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 196)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 196)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 196)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 196)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 196)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 196)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 196)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 196)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 196)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 196)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 196)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 196)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 196)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readDrawRect,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readDrawRoundRect(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readDrawRoundRect",0xe705f4f9,"openfl._internal.renderer.DrawCommandReader.readDrawRoundRect","openfl/_internal/renderer/DrawCommandReader.hx",197,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 197)		{
HXLINE( 197)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 197)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 197)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 197)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 197)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 197)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 197)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 197)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 197)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 197)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 197)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 197)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 197)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 197)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 197)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 197)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 197)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 197)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 197)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 197)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 197)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 197)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 197)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 197)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 197)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 197)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 197)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 197)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 197)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 197)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 197)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 197)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 197)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readDrawRoundRect,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readDrawTriangles(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readDrawTriangles",0xe2c37512,"openfl._internal.renderer.DrawCommandReader.readDrawTriangles","openfl/_internal/renderer/DrawCommandReader.hx",198,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 198)		{
HXLINE( 198)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 198)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 198)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 198)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 198)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 198)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 198)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 198)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 198)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 198)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 198)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 198)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 198)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 198)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 198)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 198)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 198)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 198)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 198)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 198)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 198)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 198)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 198)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 198)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 198)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 198)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 198)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 198)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 198)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 198)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 198)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 198)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 198)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readDrawTriangles,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readEndFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readEndFill",0x84ce0ec9,"openfl._internal.renderer.DrawCommandReader.readEndFill","openfl/_internal/renderer/DrawCommandReader.hx",199,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 199)		{
HXLINE( 199)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 199)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 199)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 199)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 199)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 199)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 199)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 199)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 199)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 199)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 199)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 199)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 199)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 199)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 199)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 199)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 199)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 199)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 199)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 199)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 199)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 199)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 199)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 199)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 199)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 199)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 199)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 199)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 199)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 199)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 199)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 199)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
HXDLIN( 199)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readEndFill,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readLineBitmapStyle(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readLineBitmapStyle",0x7b7308f9,"openfl._internal.renderer.DrawCommandReader.readLineBitmapStyle","openfl/_internal/renderer/DrawCommandReader.hx",200,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 200)		{
HXLINE( 200)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 200)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 200)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 200)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 200)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 200)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 200)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 200)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 200)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 200)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 200)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 200)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 200)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 200)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 200)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 200)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 200)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 200)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 200)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 200)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 200)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 200)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 200)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 200)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 200)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 200)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 200)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 200)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 200)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 200)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 200)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 200)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 200)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readLineBitmapStyle,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readLineGradientStyle(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readLineGradientStyle",0x87a23718,"openfl._internal.renderer.DrawCommandReader.readLineGradientStyle","openfl/_internal/renderer/DrawCommandReader.hx",201,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 201)		{
HXLINE( 201)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 201)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 201)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 201)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 201)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 201)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 201)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 201)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 201)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 201)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 201)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 201)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 201)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 201)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 201)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 201)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 201)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 201)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 201)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 201)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 201)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 201)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 201)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 201)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 201)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 201)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 201)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 201)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 201)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 201)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 201)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 201)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 201)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readLineGradientStyle,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readLineStyle(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readLineStyle",0xe58db828,"openfl._internal.renderer.DrawCommandReader.readLineStyle","openfl/_internal/renderer/DrawCommandReader.hx",202,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 202)		{
HXLINE( 202)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 202)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 202)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 202)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 202)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 202)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 202)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 202)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 202)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 202)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 202)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 202)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 202)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 202)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 202)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 202)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 202)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 202)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 202)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 202)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 202)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 202)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 202)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 202)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 202)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 202)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 202)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 202)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 202)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 202)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 202)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 202)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 202)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readLineStyle,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readLineTo(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readLineTo",0xdcfae224,"openfl._internal.renderer.DrawCommandReader.readLineTo","openfl/_internal/renderer/DrawCommandReader.hx",203,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 203)		{
HXLINE( 203)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 203)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 203)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 203)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 203)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 203)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 203)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 203)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 203)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 203)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 203)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 203)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 203)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 203)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 203)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 203)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 203)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 203)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 203)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 203)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 203)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 203)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 203)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 203)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 203)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 203)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 203)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 203)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 203)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 203)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 203)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 203)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 203)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readLineTo,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readMoveTo(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readMoveTo",0xbd076e81,"openfl._internal.renderer.DrawCommandReader.readMoveTo","openfl/_internal/renderer/DrawCommandReader.hx",204,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 204)		{
HXLINE( 204)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 204)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 204)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 204)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 204)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 204)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 204)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 204)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 204)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 204)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 204)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 204)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 204)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 204)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 204)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 204)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 204)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 204)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 204)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 204)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 204)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 204)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 204)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 204)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 204)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 204)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 204)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 204)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 204)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 204)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 204)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 204)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 204)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readMoveTo,return )

 ::openfl::_internal::renderer::DrawCommandReader DrawCommandReader_obj::readOverrideMatrix(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","readOverrideMatrix",0x85194642,"openfl._internal.renderer.DrawCommandReader.readOverrideMatrix","openfl/_internal/renderer/DrawCommandReader.hx",205,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 205)		{
HXLINE( 205)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 205)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 205)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 205)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 205)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 205)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 205)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 205)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 205)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 205)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 205)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 205)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 205)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 205)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 205)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 205)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 205)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 205)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 205)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 205)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 205)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 205)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 205)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 205)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 205)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 205)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 205)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 205)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 205)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 205)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 205)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 205)		this->prev = ::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_MATRIX_dyn();
HXDLIN( 205)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,readOverrideMatrix,return )

void DrawCommandReader_obj::reset(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","reset",0x4382b690,"openfl._internal.renderer.DrawCommandReader.reset","openfl/_internal/renderer/DrawCommandReader.hx",210,0xbbdbd1ae)
            	HX_STACK_THIS(this)
HXLINE( 210)		this->bPos = (this->iPos = (this->fPos = (this->oPos = (this->ffPos = (this->iiPos = (this->tsPos = (int)0))))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandReader_obj,reset,(void))

void DrawCommandReader_obj::skip(::hx::EnumBase type){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandReader","skip",0x45dc3cde,"openfl._internal.renderer.DrawCommandReader.skip","openfl/_internal/renderer/DrawCommandReader.hx",215,0xbbdbd1ae)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 217)		{
HXLINE( 217)			Int _hx_tmp = ( ( ::hx::EnumBase)(this->prev) )->_hx_getIndex();
HXDLIN( 217)			switch((int)(_hx_tmp)){
            				case (int)0: {
HXLINE( 217)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 217)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)1: {
HXLINE( 217)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 217)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)2: {
HXLINE( 217)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 217)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 217)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 217)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)3: {
HXLINE( 217)					hx::AddEq(this->fPos,(int)6);
            				}
            				break;
            				case (int)4: {
HXLINE( 217)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)5: {
HXLINE( 217)					hx::AddEq(this->fPos,(int)3);
            				}
            				break;
            				case (int)6: {
HXLINE( 217)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)7: {
HXLINE( 217)					hx::AddEq(this->fPos,(int)4);
            				}
            				break;
            				case (int)8: {
HXLINE( 217)					hx::AddEq(this->fPos,(int)5);
HXDLIN( 217)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				case (int)10: {
HXLINE( 217)					hx::AddEq(this->oPos,(int)4);
            				}
            				break;
            				case (int)11: {
            				}
            				break;
            				case (int)12: {
HXLINE( 217)					hx::AddEq(this->oPos,(int)2);
HXDLIN( 217)					hx::AddEq(this->bPos,(int)2);
            				}
            				break;
            				case (int)13: {
HXLINE( 217)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 217)					hx::AddEq(this->iiPos,(int)2);
HXDLIN( 217)					hx::AddEq(this->ffPos,(int)1);
HXDLIN( 217)					hx::AddEq(this->fPos,(int)1);
            				}
            				break;
            				case (int)14: {
HXLINE( 217)					hx::AddEq(this->oPos,(int)4);
HXDLIN( 217)					hx::AddEq(this->iPos,(int)1);
HXDLIN( 217)					hx::AddEq(this->fPos,(int)2);
HXDLIN( 217)					hx::AddEq(this->bPos,(int)1);
            				}
            				break;
            				case (int)15: {
HXLINE( 217)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)16: {
HXLINE( 217)					hx::AddEq(this->fPos,(int)2);
            				}
            				break;
            				case (int)17: {
HXLINE( 217)					hx::AddEq(this->oPos,(int)1);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 218)		this->prev = type;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandReader_obj,skip,(void))


DrawCommandReader_obj::DrawCommandReader_obj()
{
}

void DrawCommandReader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DrawCommandReader);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(bPos,"bPos");
	HX_MARK_MEMBER_NAME(iiPos,"iiPos");
	HX_MARK_MEMBER_NAME(iPos,"iPos");
	HX_MARK_MEMBER_NAME(ffPos,"ffPos");
	HX_MARK_MEMBER_NAME(fPos,"fPos");
	HX_MARK_MEMBER_NAME(oPos,"oPos");
	HX_MARK_MEMBER_NAME(prev,"prev");
	HX_MARK_MEMBER_NAME(tsPos,"tsPos");
	HX_MARK_END_CLASS();
}

void DrawCommandReader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(bPos,"bPos");
	HX_VISIT_MEMBER_NAME(iiPos,"iiPos");
	HX_VISIT_MEMBER_NAME(iPos,"iPos");
	HX_VISIT_MEMBER_NAME(ffPos,"ffPos");
	HX_VISIT_MEMBER_NAME(fPos,"fPos");
	HX_VISIT_MEMBER_NAME(oPos,"oPos");
	HX_VISIT_MEMBER_NAME(prev,"prev");
	HX_VISIT_MEMBER_NAME(tsPos,"tsPos");
}

hx::Val DrawCommandReader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { return hx::Val( _hx_int_dyn()); }
		if (HX_FIELD_EQ(inName,"obj") ) { return hx::Val( obj_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"bPos") ) { return hx::Val( bPos); }
		if (HX_FIELD_EQ(inName,"iPos") ) { return hx::Val( iPos); }
		if (HX_FIELD_EQ(inName,"fPos") ) { return hx::Val( fPos); }
		if (HX_FIELD_EQ(inName,"oPos") ) { return hx::Val( oPos); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev); }
		if (HX_FIELD_EQ(inName,"bool") ) { return hx::Val( _hx_bool_dyn()); }
		if (HX_FIELD_EQ(inName,"fArr") ) { return hx::Val( fArr_dyn()); }
		if (HX_FIELD_EQ(inName,"iArr") ) { return hx::Val( iArr_dyn()); }
		if (HX_FIELD_EQ(inName,"skip") ) { return hx::Val( skip_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"iiPos") ) { return hx::Val( iiPos); }
		if (HX_FIELD_EQ(inName,"ffPos") ) { return hx::Val( ffPos); }
		if (HX_FIELD_EQ(inName,"tsPos") ) { return hx::Val( tsPos); }
		if (HX_FIELD_EQ(inName,"float") ) { return hx::Val( _hx_float_dyn()); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"advance") ) { return hx::Val( advance_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"readLineTo") ) { return hx::Val( readLineTo_dyn()); }
		if (HX_FIELD_EQ(inName,"readMoveTo") ) { return hx::Val( readMoveTo_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"readCurveTo") ) { return hx::Val( readCurveTo_dyn()); }
		if (HX_FIELD_EQ(inName,"readEndFill") ) { return hx::Val( readEndFill_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"readDrawRect") ) { return hx::Val( readDrawRect_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"readBeginFill") ) { return hx::Val( readBeginFill_dyn()); }
		if (HX_FIELD_EQ(inName,"readLineStyle") ) { return hx::Val( readLineStyle_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"readDrawCircle") ) { return hx::Val( readDrawCircle_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"readDrawEllipse") ) { return hx::Val( readDrawEllipse_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"readCubicCurveTo") ) { return hx::Val( readCubicCurveTo_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"readDrawRoundRect") ) { return hx::Val( readDrawRoundRect_dyn()); }
		if (HX_FIELD_EQ(inName,"readDrawTriangles") ) { return hx::Val( readDrawTriangles_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"readOverrideMatrix") ) { return hx::Val( readOverrideMatrix_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"readBeginBitmapFill") ) { return hx::Val( readBeginBitmapFill_dyn()); }
		if (HX_FIELD_EQ(inName,"readLineBitmapStyle") ) { return hx::Val( readLineBitmapStyle_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"readBeginGradientFill") ) { return hx::Val( readBeginGradientFill_dyn()); }
		if (HX_FIELD_EQ(inName,"readLineGradientStyle") ) { return hx::Val( readLineGradientStyle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DrawCommandReader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bPos") ) { bPos=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iPos") ) { iPos=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fPos") ) { fPos=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"oPos") ) { oPos=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prev") ) { prev=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"iiPos") ) { iiPos=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ffPos") ) { ffPos=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tsPos") ) { tsPos=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DrawCommandReader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("bPos","\x52","\xfe","\x03","\x41"));
	outFields->push(HX_HCSTRING("iiPos","\x94","\x65","\xb7","\xba"));
	outFields->push(HX_HCSTRING("iPos","\xab","\x7c","\xa4","\x45"));
	outFields->push(HX_HCSTRING("ffPos","\x34","\x04","\x88","\xfe"));
	outFields->push(HX_HCSTRING("fPos","\xce","\xd8","\xa8","\x43"));
	outFields->push(HX_HCSTRING("oPos","\x65","\xc4","\x9b","\x49"));
	outFields->push(HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"));
	outFields->push(HX_HCSTRING("tsPos","\x55","\xe9","\xbb","\x16"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DrawCommandReader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(int)offsetof(DrawCommandReader_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsInt,(int)offsetof(DrawCommandReader_obj,bPos),HX_HCSTRING("bPos","\x52","\xfe","\x03","\x41")},
	{hx::fsInt,(int)offsetof(DrawCommandReader_obj,iiPos),HX_HCSTRING("iiPos","\x94","\x65","\xb7","\xba")},
	{hx::fsInt,(int)offsetof(DrawCommandReader_obj,iPos),HX_HCSTRING("iPos","\xab","\x7c","\xa4","\x45")},
	{hx::fsInt,(int)offsetof(DrawCommandReader_obj,ffPos),HX_HCSTRING("ffPos","\x34","\x04","\x88","\xfe")},
	{hx::fsInt,(int)offsetof(DrawCommandReader_obj,fPos),HX_HCSTRING("fPos","\xce","\xd8","\xa8","\x43")},
	{hx::fsInt,(int)offsetof(DrawCommandReader_obj,oPos),HX_HCSTRING("oPos","\x65","\xc4","\x9b","\x49")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandType*/ ,(int)offsetof(DrawCommandReader_obj,prev),HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a")},
	{hx::fsInt,(int)offsetof(DrawCommandReader_obj,tsPos),HX_HCSTRING("tsPos","\x55","\xe9","\xbb","\x16")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DrawCommandReader_obj_sStaticStorageInfo = 0;
#endif

static ::String DrawCommandReader_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("bPos","\x52","\xfe","\x03","\x41"),
	HX_HCSTRING("iiPos","\x94","\x65","\xb7","\xba"),
	HX_HCSTRING("iPos","\xab","\x7c","\xa4","\x45"),
	HX_HCSTRING("ffPos","\x34","\x04","\x88","\xfe"),
	HX_HCSTRING("fPos","\xce","\xd8","\xa8","\x43"),
	HX_HCSTRING("oPos","\x65","\xc4","\x9b","\x49"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("tsPos","\x55","\xe9","\xbb","\x16"),
	HX_HCSTRING("advance","\x82","\x08","\x0c","\xef"),
	HX_HCSTRING("bool","\x2a","\x84","\x1b","\x41"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("fArr","\x9b","\x79","\x9d","\x43"),
	HX_HCSTRING("float","\x9c","\xc5","\x96","\x02"),
	HX_HCSTRING("iArr","\x78","\x1d","\x99","\x45"),
	HX_HCSTRING("int","\xef","\x0c","\x50","\x00"),
	HX_HCSTRING("obj","\xf7","\x8f","\x54","\x00"),
	HX_HCSTRING("readBeginBitmapFill","\xe5","\xb6","\x06","\xb9"),
	HX_HCSTRING("readBeginFill","\x16","\x27","\x04","\x20"),
	HX_HCSTRING("readBeginGradientFill","\x26","\x90","\x8f","\x6c"),
	HX_HCSTRING("readCubicCurveTo","\x56","\x48","\x38","\x74"),
	HX_HCSTRING("readCurveTo","\x54","\xf3","\x73","\x21"),
	HX_HCSTRING("readDrawCircle","\x2a","\x04","\x0d","\x05"),
	HX_HCSTRING("readDrawEllipse","\x84","\x85","\x26","\x7c"),
	HX_HCSTRING("readDrawRect","\xbe","\x44","\x46","\x9b"),
	HX_HCSTRING("readDrawRoundRect","\xb8","\xea","\x3a","\x90"),
	HX_HCSTRING("readDrawTriangles","\xd1","\x6a","\xf8","\x8b"),
	HX_HCSTRING("readEndFill","\x48","\x1b","\xcc","\x78"),
	HX_HCSTRING("readLineBitmapStyle","\x78","\x2c","\x20","\x94"),
	HX_HCSTRING("readLineGradientStyle","\x57","\x78","\x7e","\x00"),
	HX_HCSTRING("readLineStyle","\x67","\x22","\x87","\x5e"),
	HX_HCSTRING("readLineTo","\x85","\x2a","\x1c","\xe6"),
	HX_HCSTRING("readMoveTo","\xe2","\xb6","\x28","\xc6"),
	HX_HCSTRING("readOverrideMatrix","\xa3","\x57","\x3b","\xea"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("skip","\x7f","\x16","\x55","\x4c"),
	::String(null()) };

static void DrawCommandReader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DrawCommandReader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DrawCommandReader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DrawCommandReader_obj::__mClass,"__mClass");
};

#endif

hx::Class DrawCommandReader_obj::__mClass;

void DrawCommandReader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.DrawCommandReader","\x6f","\xd6","\x3c","\xaa");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DrawCommandReader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DrawCommandReader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DrawCommandReader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DrawCommandReader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DrawCommandReader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DrawCommandReader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
