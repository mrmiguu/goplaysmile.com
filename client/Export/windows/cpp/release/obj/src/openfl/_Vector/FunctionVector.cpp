// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_openfl__Vector_FunctionVector
#include <openfl/_Vector/FunctionVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif

namespace openfl{
namespace _Vector{

void FunctionVector_obj::__construct( ::Dynamic length, ::Dynamic fixed,::cpp::VirtualArray array){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","new",0x9bdddf17,"openfl._Vector.FunctionVector.new","openfl/Vector.hx",864,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(length,"length")
            	HX_STACK_ARG(fixed,"fixed")
            	HX_STACK_ARG(array,"array")
HXLINE( 866)		Bool _hx_tmp = hx::IsNull( array );
HXDLIN( 866)		if (_hx_tmp) {
HXLINE( 868)			array = ::cpp::VirtualArray_obj::__new();
            		}
HXLINE( 872)		this->_hx___array = array;
HXLINE( 874)		Bool _hx_tmp1 = hx::IsNotNull( length );
HXDLIN( 874)		if (_hx_tmp1) {
HXLINE( 876)			this->set_length(length);
            		}
HXLINE( 880)		this->fixed = hx::IsEq( fixed,true );
            	}

Dynamic FunctionVector_obj::__CreateEmpty() { return new FunctionVector_obj; }

hx::ObjectPtr< FunctionVector_obj > FunctionVector_obj::__new( ::Dynamic length, ::Dynamic fixed,::cpp::VirtualArray array)
{
	hx::ObjectPtr< FunctionVector_obj > _hx_result = new FunctionVector_obj();
	_hx_result->__construct(length,fixed,array);
	return _hx_result;
}

Dynamic FunctionVector_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FunctionVector_obj > _hx_result = new FunctionVector_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

static ::openfl::_Vector::IVector_obj _hx_openfl__Vector_FunctionVector__hx_openfl__Vector_IVector= {
	( Int (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::get_length,
	( Int (hx::Object::*)(Int))&::openfl::_Vector::FunctionVector_obj::set_length,
	( ::Dynamic (hx::Object::*)(::Dynamic))&::openfl::_Vector::FunctionVector_obj::concat,
	( ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::copy,
	(  ::Dynamic (hx::Object::*)(Int))&::openfl::_Vector::FunctionVector_obj::get,
	( Int (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::indexOf,
	( void (hx::Object::*)(Int, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::insertAt,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::iterator,
	( ::String (hx::Object::*)(::String))&::openfl::_Vector::FunctionVector_obj::join,
	( Int (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::lastIndexOf,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::pop,
	( Int (hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::push,
	( void (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::reverse,
	(  ::Dynamic (hx::Object::*)(Int, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::set,
	(  ::Dynamic (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::shift,
	( ::Dynamic (hx::Object::*)( ::Dynamic, ::Dynamic))&::openfl::_Vector::FunctionVector_obj::slice,
	( void (hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::sort,
	( ::Dynamic (hx::Object::*)(Int,Int))&::openfl::_Vector::FunctionVector_obj::splice,
	( ::String (hx::Object::*)())&::openfl::_Vector::FunctionVector_obj::toString,
	( void (hx::Object::*)( ::Dynamic))&::openfl::_Vector::FunctionVector_obj::unshift,
};

void *FunctionVector_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x45e7caba: return &_hx_openfl__Vector_FunctionVector__hx_openfl__Vector_IVector;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

::Dynamic FunctionVector_obj::concat(::Dynamic a){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","concat",0x3878c6bd,"openfl._Vector.FunctionVector.concat","openfl/Vector.hx",887,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE( 887)		Bool _hx_tmp = hx::IsNull( a );
HXDLIN( 887)		if (_hx_tmp) {
HXLINE( 889)			::cpp::VirtualArray _hx_tmp1 = this->_hx___array->copy();
HXDLIN( 889)			return  ::openfl::_Vector::FunctionVector_obj::__new(null(),null(),_hx_tmp1);
            		}
            		else {
HXLINE( 893)			::cpp::VirtualArray _hx_tmp2 = this->_hx___array->concat(hx::TCast<  ::openfl::_Vector::FunctionVector >::cast(a)->_hx___array);
HXDLIN( 893)			return  ::openfl::_Vector::FunctionVector_obj::__new(null(),null(),_hx_tmp2);
            		}
HXLINE( 887)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,concat,return )

::Dynamic FunctionVector_obj::copy(){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","copy",0xbf078d1e,"openfl._Vector.FunctionVector.copy","openfl/Vector.hx",902,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE( 902)		Bool _hx_tmp = this->fixed;
HXDLIN( 902)		::cpp::VirtualArray _hx_tmp1 = this->_hx___array->copy();
HXDLIN( 902)		return  ::openfl::_Vector::FunctionVector_obj::__new(null(),_hx_tmp,_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,copy,return )

 ::Dynamic FunctionVector_obj::get(Int index){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","get",0x9bd88f4d,"openfl._Vector.FunctionVector.get","openfl/Vector.hx",909,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
HXLINE( 909)		if ((index >= this->_hx___array->get_length())) {
HXLINE( 911)			return null();
            		}
            		else {
HXLINE( 915)			return this->_hx___array->__get(index);
            		}
HXLINE( 909)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,get,return )

Int FunctionVector_obj::indexOf( ::Dynamic x, ::Dynamic __o_from){
 ::Dynamic from = __o_from.Default(0);
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","indexOf",0x03bc7f00,"openfl._Vector.FunctionVector.indexOf","openfl/Vector.hx",922,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(from,"from")
HXLINE( 924)		{
HXLINE( 924)			HX_VARI( Int,_g1) = from;
HXDLIN( 924)			HX_VARI( Int,_g) = this->_hx___array->get_length();
HXDLIN( 924)			while((_g1 < _g)){
HXLINE( 924)				HX_VARI( Int,i) = _g1++;
HXLINE( 926)				 ::Dynamic _hx_tmp = this->_hx___array->__get(i);
HXDLIN( 926)				Bool _hx_tmp1 = ::Reflect_obj::compareMethods(_hx_tmp,x);
HXDLIN( 926)				if (_hx_tmp1) {
HXLINE( 928)					return i;
            				}
            			}
            		}
HXLINE( 934)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,indexOf,return )

void FunctionVector_obj::insertAt(Int index, ::Dynamic element){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","insertAt",0x3cb1b675,"openfl._Vector.FunctionVector.insertAt","openfl/Vector.hx",941,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(element,"element")
HXLINE( 941)		Bool _hx_tmp;
HXDLIN( 941)		if (!(!(this->fixed))) {
HXLINE( 941)			_hx_tmp = (index < this->_hx___array->get_length());
            		}
            		else {
HXLINE( 941)			_hx_tmp = true;
            		}
HXDLIN( 941)		if (_hx_tmp) {
HXLINE( 943)			this->_hx___array->insert(index,element);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,insertAt,(void))

 ::Dynamic FunctionVector_obj::iterator(){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","iterator",0x0e2c83d7,"openfl._Vector.FunctionVector.iterator","openfl/Vector.hx",952,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE( 952)		return this->_hx___array->iterator();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,iterator,return )

::String FunctionVector_obj::join(::String sep){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","join",0xc3a80553,"openfl._Vector.FunctionVector.join","openfl/Vector.hx",959,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sep,"sep")
HXLINE( 959)		return this->_hx___array->join(sep);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,join,return )

Int FunctionVector_obj::lastIndexOf( ::Dynamic x, ::Dynamic __o_from){
 ::Dynamic from = __o_from.Default(0);
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","lastIndexOf",0xc9451aca,"openfl._Vector.FunctionVector.lastIndexOf","openfl/Vector.hx",964,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(from,"from")
HXLINE( 966)		HX_VARI( Int,i) = (this->_hx___array->get_length() - (int)1);
HXLINE( 968)		while(hx::IsGreaterEq( i,from )){
HXLINE( 970)			 ::Dynamic _hx_tmp = this->_hx___array->__get(i);
HXDLIN( 970)			Bool _hx_tmp1 = ::Reflect_obj::compareMethods(_hx_tmp,x);
HXDLIN( 970)			if (_hx_tmp1) {
HXLINE( 970)				return i;
            			}
HXLINE( 971)			--i;
            		}
HXLINE( 975)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,lastIndexOf,return )

 ::Dynamic FunctionVector_obj::pop(){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","pop",0x9bdf6c48,"openfl._Vector.FunctionVector.pop","openfl/Vector.hx",982,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE( 982)		Bool _hx_tmp = !(this->fixed);
HXDLIN( 982)		if (_hx_tmp) {
HXLINE( 984)			return this->_hx___array->pop();
            		}
            		else {
HXLINE( 988)			return null();
            		}
HXLINE( 982)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,pop,return )

Int FunctionVector_obj::push( ::Dynamic x){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","push",0xc7a3e343,"openfl._Vector.FunctionVector.push","openfl/Vector.hx",997,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE( 997)		Bool _hx_tmp = !(this->fixed);
HXDLIN( 997)		if (_hx_tmp) {
HXLINE( 999)			return this->_hx___array->push(x);
            		}
            		else {
HXLINE(1003)			return this->_hx___array->get_length();
            		}
HXLINE( 997)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,push,return )

void FunctionVector_obj::reverse(){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","reverse",0x3df96f59,"openfl._Vector.FunctionVector.reverse","openfl/Vector.hx",1012,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1012)		this->_hx___array->reverse();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,reverse,(void))

 ::Dynamic FunctionVector_obj::set(Int index, ::Dynamic value){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","set",0x9be1aa59,"openfl._Vector.FunctionVector.set","openfl/Vector.hx",1019,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(value,"value")
HXLINE(1019)		Bool _hx_tmp;
HXDLIN(1019)		if (!(!(this->fixed))) {
HXLINE(1019)			_hx_tmp = (index < this->_hx___array->get_length());
            		}
            		else {
HXLINE(1019)			_hx_tmp = true;
            		}
HXDLIN(1019)		if (_hx_tmp) {
HXLINE(1021)			return (this->_hx___array->set(index,value));
            		}
            		else {
HXLINE(1025)			return value;
            		}
HXLINE(1019)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,set,return )

 ::Dynamic FunctionVector_obj::shift(){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","shift",0x995756f9,"openfl._Vector.FunctionVector.shift","openfl/Vector.hx",1034,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1034)		Bool _hx_tmp = !(this->fixed);
HXDLIN(1034)		if (_hx_tmp) {
HXLINE(1036)			return this->_hx___array->shift();
            		}
            		else {
HXLINE(1040)			return null();
            		}
HXLINE(1034)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,shift,return )

::Dynamic FunctionVector_obj::slice( ::Dynamic __o_startIndex, ::Dynamic __o_endIndex){
 ::Dynamic startIndex = __o_startIndex.Default(0);
 ::Dynamic endIndex = __o_endIndex.Default(16777215);
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","slice",0x9bfc2ec9,"openfl._Vector.FunctionVector.slice","openfl/Vector.hx",1049,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(startIndex,"startIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE(1049)		::cpp::VirtualArray _hx_tmp = this->_hx___array->slice(startIndex,endIndex);
HXDLIN(1049)		return  ::openfl::_Vector::FunctionVector_obj::__new(null(),null(),_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,slice,return )

void FunctionVector_obj::sort( ::Dynamic f){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","sort",0xc99af8c7,"openfl._Vector.FunctionVector.sort","openfl/Vector.hx",1056,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(f,"f")
HXLINE(1056)		this->_hx___array->sort(f);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,sort,(void))

::Dynamic FunctionVector_obj::splice(Int pos,Int len){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","splice",0x30474325,"openfl._Vector.FunctionVector.splice","openfl/Vector.hx",1063,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(len,"len")
HXLINE(1063)		::cpp::VirtualArray _hx_tmp = this->_hx___array->splice(pos,len);
HXDLIN(1063)		return  ::openfl::_Vector::FunctionVector_obj::__new(null(),null(),_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FunctionVector_obj,splice,return )

::String FunctionVector_obj::toString(){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","toString",0xb3010a95,"openfl._Vector.FunctionVector.toString","openfl/Vector.hx",1070,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1070)		return this->_hx___array->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,toString,return )

void FunctionVector_obj::unshift( ::Dynamic x){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","unshift",0x9bb119c0,"openfl._Vector.FunctionVector.unshift","openfl/Vector.hx",1077,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
HXLINE(1077)		Bool _hx_tmp = !(this->fixed);
HXDLIN(1077)		if (_hx_tmp) {
HXLINE(1079)			this->_hx___array->unshift(x);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,unshift,(void))

Int FunctionVector_obj::get_length(){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","get_length",0x7e924ad8,"openfl._Vector.FunctionVector.get_length","openfl/Vector.hx",1095,0x4a01873c)
            	HX_STACK_THIS(this)
HXLINE(1095)		return this->_hx___array->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FunctionVector_obj,get_length,return )

Int FunctionVector_obj::set_length(Int value){
            	HX_STACK_FRAME("openfl._Vector.FunctionVector","set_length",0x820fe94c,"openfl._Vector.FunctionVector.set_length","openfl/Vector.hx",1100,0x4a01873c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1102)		Bool _hx_tmp = !(this->fixed);
HXDLIN(1102)		if (_hx_tmp) {
HXLINE(1106)			_hx_array_set_size_exact(this->_hx___array,value);
            		}
HXLINE(1135)		return this->_hx___array->get_length();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FunctionVector_obj,set_length,return )


FunctionVector_obj::FunctionVector_obj()
{
}

void FunctionVector_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FunctionVector);
	HX_MARK_MEMBER_NAME(fixed,"fixed");
	HX_MARK_MEMBER_NAME(_hx___array,"__array");
	HX_MARK_END_CLASS();
}

void FunctionVector_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixed,"fixed");
	HX_VISIT_MEMBER_NAME(_hx___array,"__array");
}

hx::Val FunctionVector_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		if (HX_FIELD_EQ(inName,"pop") ) { return hx::Val( pop_dyn()); }
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		if (HX_FIELD_EQ(inName,"join") ) { return hx::Val( join_dyn()); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { return hx::Val( fixed); }
		if (HX_FIELD_EQ(inName,"shift") ) { return hx::Val( shift_dyn()); }
		if (HX_FIELD_EQ(inName,"slice") ) { return hx::Val( slice_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"concat") ) { return hx::Val( concat_dyn()); }
		if (HX_FIELD_EQ(inName,"splice") ) { return hx::Val( splice_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { return hx::Val( _hx___array); }
		if (HX_FIELD_EQ(inName,"indexOf") ) { return hx::Val( indexOf_dyn()); }
		if (HX_FIELD_EQ(inName,"reverse") ) { return hx::Val( reverse_dyn()); }
		if (HX_FIELD_EQ(inName,"unshift") ) { return hx::Val( unshift_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"insertAt") ) { return hx::Val( insertAt_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		if (HX_FIELD_EQ(inName,"set_length") ) { return hx::Val( set_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastIndexOf") ) { return hx::Val( lastIndexOf_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FunctionVector_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fixed") ) { fixed=inValue.Cast< Bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_length(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__array") ) { _hx___array=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunctionVector_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FunctionVector_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FunctionVector_obj,fixed),HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FunctionVector_obj,_hx___array),HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FunctionVector_obj_sStaticStorageInfo = 0;
#endif

static ::String FunctionVector_obj_sMemberFields[] = {
	HX_HCSTRING("fixed","\x74","\xf9","\xa1","\x00"),
	HX_HCSTRING("__array","\x79","\xc6","\xed","\x8f"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("indexOf","\xc9","\x48","\xbf","\xe0"),
	HX_HCSTRING("insertAt","\x8c","\x7c","\x1f","\xc2"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("join","\xea","\x33","\x65","\x46"),
	HX_HCSTRING("lastIndexOf","\x13","\xfd","\x6a","\x95"),
	HX_HCSTRING("pop","\x91","\x5d","\x55","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("shift","\x82","\xec","\x22","\x7c"),
	HX_HCSTRING("slice","\x52","\xc4","\xc7","\x7e"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("splice","\x7c","\x85","\x9e","\xbf"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("unshift","\x89","\xe3","\xb3","\x78"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("set_length","\x23","\xa3","\x0c","\x93"),
	::String(null()) };

static void FunctionVector_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FunctionVector_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FunctionVector_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FunctionVector_obj::__mClass,"__mClass");
};

#endif

hx::Class FunctionVector_obj::__mClass;

void FunctionVector_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._Vector.FunctionVector","\xa5","\x07","\x75","\x4f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FunctionVector_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FunctionVector_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FunctionVector_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FunctionVector_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunctionVector_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunctionVector_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _Vector
