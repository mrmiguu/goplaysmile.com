// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_openfl__Vector_FloatVector
#include <openfl/_Vector/FloatVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_IVector
#include <openfl/_Vector/IVector.h>
#endif
#ifndef INCLUDED_openfl__Vector_ObjectVector
#include <openfl/_Vector/ObjectVector.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix3D
#include <openfl/geom/Matrix3D.h>
#endif
#ifndef INCLUDED_openfl_geom_Vector3D
#include <openfl/geom/Vector3D.h>
#endif

static const Float _hx_array_data_1[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
static const Float _hx_array_data_7[] = {
	1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,
};
namespace openfl{
namespace geom{

void Matrix3D_obj::__construct( ::openfl::_Vector::FloatVector v){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","new",0xe0591fd8,"openfl.geom.Matrix3D.new","openfl/geom/Matrix3D.hx",20,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  20)		Bool _hx_tmp;
HXDLIN(  20)		Bool _hx_tmp1 = hx::IsNotNull( v );
HXDLIN(  20)		if (_hx_tmp1) {
HXLINE(  20)			Int _hx_tmp2 = v->get_length();
HXDLIN(  20)			_hx_tmp = (_hx_tmp2 == (int)16);
            		}
            		else {
HXLINE(  20)			_hx_tmp = false;
            		}
HXDLIN(  20)		if (_hx_tmp) {
HXLINE(  22)			this->rawData = v;
            		}
            		else {
HXLINE(  26)			HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::fromData( _hx_array_data_1,16);
HXDLIN(  26)			Int length = null();
HXDLIN(  26)			Bool fixed = null();
HXDLIN(  26)			HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXDLIN(  26)			{
HXLINE(  26)				HX_VARI( Int,_g1) = (int)0;
HXDLIN(  26)				HX_VARI( Int,_g) = a->length;
HXDLIN(  26)				while((_g1 < _g)){
HXLINE(  26)					HX_VARI( Int,i) = _g1++;
HXDLIN(  26)					vector->set(i,a->__get(i));
            				}
            			}
HXDLIN(  26)			this->rawData = vector;
            		}
            	}

Dynamic Matrix3D_obj::__CreateEmpty() { return new Matrix3D_obj; }

hx::ObjectPtr< Matrix3D_obj > Matrix3D_obj::__new( ::openfl::_Vector::FloatVector v)
{
	hx::ObjectPtr< Matrix3D_obj > _hx_result = new Matrix3D_obj();
	_hx_result->__construct(v);
	return _hx_result;
}

Dynamic Matrix3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Matrix3D_obj > _hx_result = new Matrix3D_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Matrix3D_obj::append( ::openfl::geom::Matrix3D lhs){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","append",0x481b8d62,"openfl.geom.Matrix3D.append","openfl/geom/Matrix3D.hx",33,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lhs,"lhs")
HXLINE(  35)		HX_VARI( Float,m111) = this->rawData->get((int)0);
HXDLIN(  35)		HX_VARI( Float,m121) = this->rawData->get((int)4);
HXDLIN(  35)		HX_VARI( Float,m131) = this->rawData->get((int)8);
HXDLIN(  35)		HX_VARI( Float,m141) = this->rawData->get((int)12);
HXDLIN(  35)		HX_VARI( Float,m112) = this->rawData->get((int)1);
HXDLIN(  35)		HX_VARI( Float,m122) = this->rawData->get((int)5);
HXDLIN(  35)		HX_VARI( Float,m132) = this->rawData->get((int)9);
HXDLIN(  35)		HX_VARI( Float,m142) = this->rawData->get((int)13);
HXDLIN(  35)		HX_VARI( Float,m113) = this->rawData->get((int)2);
HXDLIN(  35)		HX_VARI( Float,m123) = this->rawData->get((int)6);
HXDLIN(  35)		HX_VARI( Float,m133) = this->rawData->get((int)10);
HXDLIN(  35)		HX_VARI( Float,m143) = this->rawData->get((int)14);
HXDLIN(  35)		HX_VARI( Float,m114) = this->rawData->get((int)3);
HXDLIN(  35)		HX_VARI( Float,m124) = this->rawData->get((int)7);
HXDLIN(  35)		HX_VARI( Float,m134) = this->rawData->get((int)11);
HXDLIN(  35)		HX_VARI( Float,m144) = this->rawData->get((int)15);
HXDLIN(  35)		HX_VARI( Float,m211) = lhs->rawData->get((int)0);
HXDLIN(  35)		HX_VARI( Float,m221) = lhs->rawData->get((int)4);
HXDLIN(  35)		HX_VARI( Float,m231) = lhs->rawData->get((int)8);
HXDLIN(  35)		HX_VARI( Float,m241) = lhs->rawData->get((int)12);
HXDLIN(  35)		HX_VARI( Float,m212) = lhs->rawData->get((int)1);
HXDLIN(  35)		HX_VARI( Float,m222) = lhs->rawData->get((int)5);
HXDLIN(  35)		HX_VARI( Float,m232) = lhs->rawData->get((int)9);
HXDLIN(  35)		HX_VARI( Float,m242) = lhs->rawData->get((int)13);
HXDLIN(  35)		HX_VARI( Float,m213) = lhs->rawData->get((int)2);
HXDLIN(  35)		HX_VARI( Float,m223) = lhs->rawData->get((int)6);
HXDLIN(  35)		HX_VARI( Float,m233) = lhs->rawData->get((int)10);
HXDLIN(  35)		HX_VARI( Float,m243) = lhs->rawData->get((int)14);
HXDLIN(  35)		HX_VARI( Float,m214) = lhs->rawData->get((int)3);
HXDLIN(  35)		HX_VARI( Float,m224) = lhs->rawData->get((int)7);
HXDLIN(  35)		HX_VARI( Float,m234) = lhs->rawData->get((int)11);
HXDLIN(  35)		HX_VARI( Float,m244) = lhs->rawData->get((int)15);
HXLINE(  44)		this->rawData->set((int)0,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
HXLINE(  45)		this->rawData->set((int)1,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
HXLINE(  46)		this->rawData->set((int)2,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
HXLINE(  47)		this->rawData->set((int)3,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
HXLINE(  49)		this->rawData->set((int)4,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
HXLINE(  50)		this->rawData->set((int)5,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
HXLINE(  51)		this->rawData->set((int)6,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
HXLINE(  52)		this->rawData->set((int)7,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
HXLINE(  54)		this->rawData->set((int)8,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
HXLINE(  55)		this->rawData->set((int)9,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
HXLINE(  56)		this->rawData->set((int)10,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
HXLINE(  57)		this->rawData->set((int)11,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
HXLINE(  59)		this->rawData->set((int)12,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
HXLINE(  60)		this->rawData->set((int)13,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
HXLINE(  61)		this->rawData->set((int)14,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
HXLINE(  62)		this->rawData->set((int)15,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,append,(void))

void Matrix3D_obj::appendRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","appendRotation",0xf492b8c0,"openfl.geom.Matrix3D.appendRotation","openfl/geom/Matrix3D.hx",67,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE(  69)		HX_VAR( Float,tx);
HXDLIN(  69)		HX_VAR( Float,ty);
HXDLIN(  69)		HX_VARI( Float,tz) = (int)0;
HXLINE(  70)		ty = tz;
HXDLIN(  70)		tx = ty;
HXLINE(  72)		Bool _hx_tmp = hx::IsNotNull( pivotPoint );
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  73)			tx = pivotPoint->x;
HXLINE(  74)			ty = pivotPoint->y;
HXLINE(  75)			tz = pivotPoint->z;
            		}
HXLINE(  77)		HX_VARI( Float,radian) = ((Float)(degrees * ::Math_obj::PI) / (Float)(int)180);
HXLINE(  78)		HX_VARI( Float,cos) = ::Math_obj::cos(radian);
HXLINE(  79)		HX_VARI( Float,sin) = ::Math_obj::sin(radian);
HXLINE(  80)		HX_VARI( Float,x) = axis->x;
HXLINE(  81)		HX_VARI( Float,y) = axis->y;
HXLINE(  82)		HX_VARI( Float,z) = axis->z;
HXLINE(  83)		HX_VARI( Float,x2) = (x * x);
HXLINE(  84)		HX_VARI( Float,y2) = (y * y);
HXLINE(  85)		HX_VARI( Float,z2) = (z * z);
HXLINE(  86)		HX_VARI( Float,ls) = ((x2 + y2) + z2);
HXLINE(  87)		if ((ls != (int)0)) {
HXLINE(  88)			HX_VARI( Float,l) = ::Math_obj::sqrt(ls);
HXLINE(  89)			hx::DivEq(x,l);
HXLINE(  90)			hx::DivEq(y,l);
HXLINE(  91)			hx::DivEq(z,l);
HXLINE(  92)			hx::DivEq(x2,ls);
HXLINE(  93)			hx::DivEq(y2,ls);
HXLINE(  94)			hx::DivEq(z2,ls);
            		}
HXLINE(  96)		HX_VARI( Float,ccos) = ((int)1 - cos);
HXLINE(  97)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__new(null());
HXLINE(  98)		HX_VARI(  ::openfl::_Vector::FloatVector,d) = m->rawData;
HXLINE(  99)		d->set((int)0,(x2 + ((y2 + z2) * cos)));
HXLINE( 100)		d->set((int)1,(((x * y) * ccos) + (z * sin)));
HXLINE( 101)		d->set((int)2,(((x * z) * ccos) - (y * sin)));
HXLINE( 102)		d->set((int)4,(((x * y) * ccos) - (z * sin)));
HXLINE( 103)		d->set((int)5,(y2 + ((x2 + z2) * cos)));
HXLINE( 104)		d->set((int)6,(((y * z) * ccos) + (x * sin)));
HXLINE( 105)		d->set((int)8,(((x * z) * ccos) + (y * sin)));
HXLINE( 106)		d->set((int)9,(((y * z) * ccos) - (x * sin)));
HXLINE( 107)		d->set((int)10,(z2 + ((x2 + y2) * cos)));
HXLINE( 108)		d->set((int)12,((((tx * (y2 + z2)) - (x * ((ty * y) + (tz * z)))) * ccos) + (((ty * z) - (tz * y)) * sin)));
HXLINE( 109)		d->set((int)13,((((ty * (x2 + z2)) - (y * ((tx * x) + (tz * z)))) * ccos) + (((tz * x) - (tx * z)) * sin)));
HXLINE( 110)		d->set((int)14,((((tz * (x2 + y2)) - (z * ((tx * x) + (ty * y)))) * ccos) + (((tx * y) - (ty * x)) * sin)));
HXLINE( 111)		this->append(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendRotation,(void))

void Matrix3D_obj::appendScale(Float xScale,Float yScale,Float zScale){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","appendScale",0x02daedc8,"openfl.geom.Matrix3D.appendScale","openfl/geom/Matrix3D.hx",118,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE( 118)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 118)		Int length = null();
HXDLIN( 118)		Bool fixed = null();
HXDLIN( 118)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXDLIN( 118)		{
HXLINE( 118)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 118)			HX_VARI( Int,_g) = a->length;
HXDLIN( 118)			while((_g1 < _g)){
HXLINE( 118)				HX_VARI( Int,i) = _g1++;
HXDLIN( 118)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 118)		this->append( ::openfl::geom::Matrix3D_obj::__new(vector));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendScale,(void))

void Matrix3D_obj::appendTranslation(Float x,Float y,Float z){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","appendTranslation",0x514252af,"openfl.geom.Matrix3D.appendTranslation","openfl/geom/Matrix3D.hx",123,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 125)		{
HXLINE( 125)			Float value = (this->rawData->get((int)12) + x);
HXDLIN( 125)			this->rawData->set((int)12,value);
            		}
HXLINE( 126)		{
HXLINE( 126)			Float value1 = (this->rawData->get((int)13) + y);
HXDLIN( 126)			this->rawData->set((int)13,value1);
            		}
HXLINE( 127)		{
HXLINE( 127)			Float value2 = (this->rawData->get((int)14) + z);
HXDLIN( 127)			this->rawData->set((int)14,value2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,appendTranslation,(void))

 ::openfl::geom::Matrix3D Matrix3D_obj::clone(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","clone",0x2ff530d5,"openfl.geom.Matrix3D.clone","openfl/geom/Matrix3D.hx",134,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 134)		return  ::openfl::geom::Matrix3D_obj::__new(( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,clone,return )

void Matrix3D_obj::copyColumnFrom(Int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyColumnFrom",0x63600afd,"openfl.geom.Matrix3D.copyColumnFrom","openfl/geom/Matrix3D.hx",141,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 141)		switch((int)(column)){
            			case (int)0: {
HXLINE( 145)				{
HXLINE( 145)					Float value = vector3D->x;
HXDLIN( 145)					this->rawData->set((int)0,value);
            				}
HXLINE( 146)				{
HXLINE( 146)					Float value1 = vector3D->y;
HXDLIN( 146)					this->rawData->set((int)1,value1);
            				}
HXLINE( 147)				{
HXLINE( 147)					Float value2 = vector3D->z;
HXDLIN( 147)					this->rawData->set((int)2,value2);
            				}
HXLINE( 148)				{
HXLINE( 148)					Float value3 = vector3D->w;
HXDLIN( 148)					this->rawData->set((int)3,value3);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 152)				{
HXLINE( 152)					Float value4 = vector3D->x;
HXDLIN( 152)					this->rawData->set((int)4,value4);
            				}
HXLINE( 153)				{
HXLINE( 153)					Float value5 = vector3D->y;
HXDLIN( 153)					this->rawData->set((int)5,value5);
            				}
HXLINE( 154)				{
HXLINE( 154)					Float value6 = vector3D->z;
HXDLIN( 154)					this->rawData->set((int)6,value6);
            				}
HXLINE( 155)				{
HXLINE( 155)					Float value7 = vector3D->w;
HXDLIN( 155)					this->rawData->set((int)7,value7);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 159)				{
HXLINE( 159)					Float value8 = vector3D->x;
HXDLIN( 159)					this->rawData->set((int)8,value8);
            				}
HXLINE( 160)				{
HXLINE( 160)					Float value9 = vector3D->y;
HXDLIN( 160)					this->rawData->set((int)9,value9);
            				}
HXLINE( 161)				{
HXLINE( 161)					Float value10 = vector3D->z;
HXDLIN( 161)					this->rawData->set((int)10,value10);
            				}
HXLINE( 162)				{
HXLINE( 162)					Float value11 = vector3D->w;
HXDLIN( 162)					this->rawData->set((int)11,value11);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 166)				{
HXLINE( 166)					Float value12 = vector3D->x;
HXDLIN( 166)					this->rawData->set((int)12,value12);
            				}
HXLINE( 167)				{
HXLINE( 167)					Float value13 = vector3D->y;
HXDLIN( 167)					this->rawData->set((int)13,value13);
            				}
HXLINE( 168)				{
HXLINE( 168)					Float value14 = vector3D->z;
HXDLIN( 168)					this->rawData->set((int)14,value14);
            				}
HXLINE( 169)				{
HXLINE( 169)					Float value15 = vector3D->w;
HXDLIN( 169)					this->rawData->set((int)15,value15);
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnFrom,(void))

void Matrix3D_obj::copyColumnTo(Int column, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyColumnTo",0x8c37304e,"openfl.geom.Matrix3D.copyColumnTo","openfl/geom/Matrix3D.hx",180,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 180)		switch((int)(column)){
            			case (int)0: {
HXLINE( 184)				vector3D->x = this->rawData->get((int)0);
HXLINE( 185)				vector3D->y = this->rawData->get((int)1);
HXLINE( 186)				vector3D->z = this->rawData->get((int)2);
HXLINE( 187)				vector3D->w = this->rawData->get((int)3);
            			}
            			break;
            			case (int)1: {
HXLINE( 191)				vector3D->x = this->rawData->get((int)4);
HXLINE( 192)				vector3D->y = this->rawData->get((int)5);
HXLINE( 193)				vector3D->z = this->rawData->get((int)6);
HXLINE( 194)				vector3D->w = this->rawData->get((int)7);
            			}
            			break;
            			case (int)2: {
HXLINE( 198)				vector3D->x = this->rawData->get((int)8);
HXLINE( 199)				vector3D->y = this->rawData->get((int)9);
HXLINE( 200)				vector3D->z = this->rawData->get((int)10);
HXLINE( 201)				vector3D->w = this->rawData->get((int)11);
            			}
            			break;
            			case (int)3: {
HXLINE( 205)				vector3D->x = this->rawData->get((int)12);
HXLINE( 206)				vector3D->y = this->rawData->get((int)13);
HXLINE( 207)				vector3D->z = this->rawData->get((int)14);
HXLINE( 208)				vector3D->w = this->rawData->get((int)15);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyColumnTo,(void))

void Matrix3D_obj::copyFrom( ::openfl::geom::Matrix3D other){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyFrom",0xe290a947,"openfl.geom.Matrix3D.copyFrom","openfl/geom/Matrix3D.hx",219,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE( 219)		this->rawData = ( ( ::openfl::_Vector::FloatVector)(other->rawData->copy()) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyFrom,(void))

void Matrix3D_obj::copyRawDataFrom( ::openfl::_Vector::FloatVector vector,hx::Null< Int >  __o_index,hx::Null< Bool >  __o_transpose){
Int index = __o_index.Default(0);
Bool transpose = __o_transpose.Default(false);
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyRawDataFrom",0x9938207f,"openfl.geom.Matrix3D.copyRawDataFrom","openfl/geom/Matrix3D.hx",224,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vector,"vector")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transpose,"transpose")
HXLINE( 226)		if (transpose) {
HXLINE( 228)			this->transpose();
            		}
HXLINE( 232)		Int a = vector->get_length();
HXDLIN( 232)		HX_VARI( Int,length) = (a - index);
HXLINE( 234)		{
HXLINE( 234)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 234)			HX_VARI( Int,_g) = length;
HXDLIN( 234)			while((_g1 < _g)){
HXLINE( 234)				HX_VARI( Int,i) = _g1++;
HXLINE( 236)				{
HXLINE( 236)					Float value = vector->get((i + index));
HXDLIN( 236)					this->rawData->set(i,value);
            				}
            			}
            		}
HXLINE( 240)		if (transpose) {
HXLINE( 242)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataFrom,(void))

void Matrix3D_obj::copyRawDataTo( ::openfl::_Vector::FloatVector vector,hx::Null< Int >  __o_index,hx::Null< Bool >  __o_transpose){
Int index = __o_index.Default(0);
Bool transpose = __o_transpose.Default(false);
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyRawDataTo",0xac978150,"openfl.geom.Matrix3D.copyRawDataTo","openfl/geom/Matrix3D.hx",249,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vector,"vector")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(transpose,"transpose")
HXLINE( 251)		if (transpose) {
HXLINE( 253)			this->transpose();
            		}
HXLINE( 257)		{
HXLINE( 257)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 257)			HX_VARI( Int,_g) = this->rawData->get_length();
HXDLIN( 257)			while((_g1 < _g)){
HXLINE( 257)				HX_VARI( Int,i) = _g1++;
HXLINE( 259)				{
HXLINE( 259)					Float value = this->rawData->get(i);
HXDLIN( 259)					vector->set((i + index),value);
            				}
            			}
            		}
HXLINE( 263)		if (transpose) {
HXLINE( 265)			this->transpose();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,copyRawDataTo,(void))

void Matrix3D_obj::copyRowFrom(Int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyRowFrom",0x3d20cce7,"openfl.geom.Matrix3D.copyRowFrom","openfl/geom/Matrix3D.hx",274,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 274)		switch((int)(row)){
            			case (int)0: {
HXLINE( 278)				{
HXLINE( 278)					Float value = vector3D->x;
HXDLIN( 278)					this->rawData->set((int)0,value);
            				}
HXLINE( 279)				{
HXLINE( 279)					Float value1 = vector3D->y;
HXDLIN( 279)					this->rawData->set((int)4,value1);
            				}
HXLINE( 280)				{
HXLINE( 280)					Float value2 = vector3D->z;
HXDLIN( 280)					this->rawData->set((int)8,value2);
            				}
HXLINE( 281)				{
HXLINE( 281)					Float value3 = vector3D->w;
HXDLIN( 281)					this->rawData->set((int)12,value3);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 285)				{
HXLINE( 285)					Float value4 = vector3D->x;
HXDLIN( 285)					this->rawData->set((int)1,value4);
            				}
HXLINE( 286)				{
HXLINE( 286)					Float value5 = vector3D->y;
HXDLIN( 286)					this->rawData->set((int)5,value5);
            				}
HXLINE( 287)				{
HXLINE( 287)					Float value6 = vector3D->z;
HXDLIN( 287)					this->rawData->set((int)9,value6);
            				}
HXLINE( 288)				{
HXLINE( 288)					Float value7 = vector3D->w;
HXDLIN( 288)					this->rawData->set((int)13,value7);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 292)				{
HXLINE( 292)					Float value8 = vector3D->x;
HXDLIN( 292)					this->rawData->set((int)2,value8);
            				}
HXLINE( 293)				{
HXLINE( 293)					Float value9 = vector3D->y;
HXDLIN( 293)					this->rawData->set((int)6,value9);
            				}
HXLINE( 294)				{
HXLINE( 294)					Float value10 = vector3D->z;
HXDLIN( 294)					this->rawData->set((int)10,value10);
            				}
HXLINE( 295)				{
HXLINE( 295)					Float value11 = vector3D->w;
HXDLIN( 295)					this->rawData->set((int)14,value11);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 299)				{
HXLINE( 299)					Float value12 = vector3D->x;
HXDLIN( 299)					this->rawData->set((int)3,value12);
            				}
HXLINE( 300)				{
HXLINE( 300)					Float value13 = vector3D->y;
HXDLIN( 300)					this->rawData->set((int)7,value13);
            				}
HXLINE( 301)				{
HXLINE( 301)					Float value14 = vector3D->z;
HXDLIN( 301)					this->rawData->set((int)11,value14);
            				}
HXLINE( 302)				{
HXLINE( 302)					Float value15 = vector3D->w;
HXDLIN( 302)					this->rawData->set((int)15,value15);
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowFrom,(void))

void Matrix3D_obj::copyRowTo(Int row, ::openfl::geom::Vector3D vector3D){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyRowTo",0x42dcc3b8,"openfl.geom.Matrix3D.copyRowTo","openfl/geom/Matrix3D.hx",313,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(row,"row")
            	HX_STACK_ARG(vector3D,"vector3D")
HXLINE( 313)		switch((int)(row)){
            			case (int)0: {
HXLINE( 317)				vector3D->x = this->rawData->get((int)0);
HXLINE( 318)				vector3D->y = this->rawData->get((int)4);
HXLINE( 319)				vector3D->z = this->rawData->get((int)8);
HXLINE( 320)				vector3D->w = this->rawData->get((int)12);
            			}
            			break;
            			case (int)1: {
HXLINE( 324)				vector3D->x = this->rawData->get((int)1);
HXLINE( 325)				vector3D->y = this->rawData->get((int)5);
HXLINE( 326)				vector3D->z = this->rawData->get((int)9);
HXLINE( 327)				vector3D->w = this->rawData->get((int)13);
            			}
            			break;
            			case (int)2: {
HXLINE( 331)				vector3D->x = this->rawData->get((int)2);
HXLINE( 332)				vector3D->y = this->rawData->get((int)6);
HXLINE( 333)				vector3D->z = this->rawData->get((int)10);
HXLINE( 334)				vector3D->w = this->rawData->get((int)14);
            			}
            			break;
            			case (int)3: {
HXLINE( 338)				vector3D->x = this->rawData->get((int)3);
HXLINE( 339)				vector3D->y = this->rawData->get((int)7);
HXLINE( 340)				vector3D->z = this->rawData->get((int)11);
HXLINE( 341)				vector3D->w = this->rawData->get((int)15);
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,copyRowTo,(void))

void Matrix3D_obj::copyToMatrix3D( ::openfl::geom::Matrix3D other){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","copyToMatrix3D",0x2cc9916a,"openfl.geom.Matrix3D.copyToMatrix3D","openfl/geom/Matrix3D.hx",352,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE( 352)		other->rawData = ( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,copyToMatrix3D,(void))

 ::openfl::_Vector::ObjectVector Matrix3D_obj::decompose( ::Dynamic orientationStyle){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","decompose",0x4a21fd29,"openfl.geom.Matrix3D.decompose","openfl/geom/Matrix3D.hx",386,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(orientationStyle,"orientationStyle")
HXLINE( 388)		Bool _hx_tmp = hx::IsNull( orientationStyle );
HXDLIN( 388)		if (_hx_tmp) {
HXLINE( 390)			orientationStyle = (int)1;
            		}
HXLINE( 394)		Int length = null();
HXDLIN( 394)		Bool fixed = null();
HXDLIN( 394)		HX_VARI(  ::openfl::_Vector::ObjectVector,vec) =  ::openfl::_Vector::ObjectVector_obj::__new(length,fixed,null());
HXLINE( 395)		HX_VARI(  ::openfl::geom::Matrix3D,m) = this->clone();
HXLINE( 396)		HX_VARI(  ::openfl::_Vector::FloatVector,mr) = ( ( ::openfl::_Vector::FloatVector)(m->rawData->copy()) );
HXLINE( 398)		HX_VARI(  ::openfl::geom::Vector3D,pos) =  ::openfl::geom::Vector3D_obj::__new(mr->get((int)12),mr->get((int)13),mr->get((int)14),null());
HXLINE( 399)		mr->set((int)12,(int)0);
HXLINE( 400)		mr->set((int)13,(int)0);
HXLINE( 401)		mr->set((int)14,(int)0);
HXLINE( 403)		HX_VARI(  ::openfl::geom::Vector3D,scale) =  ::openfl::geom::Vector3D_obj::__new(null(),null(),null(),null());
HXLINE( 405)		Float _hx_tmp1 = (mr->get((int)0) * mr->get((int)0));
HXDLIN( 405)		Float _hx_tmp2 = (mr->get((int)1) * mr->get((int)1));
HXDLIN( 405)		Float _hx_tmp3 = (_hx_tmp1 + _hx_tmp2);
HXDLIN( 405)		Float _hx_tmp4 = (mr->get((int)2) * mr->get((int)2));
HXDLIN( 405)		scale->x = ::Math_obj::sqrt((_hx_tmp3 + _hx_tmp4));
HXLINE( 406)		Float _hx_tmp5 = (mr->get((int)4) * mr->get((int)4));
HXDLIN( 406)		Float _hx_tmp6 = (mr->get((int)5) * mr->get((int)5));
HXDLIN( 406)		Float _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXDLIN( 406)		Float _hx_tmp8 = (mr->get((int)6) * mr->get((int)6));
HXDLIN( 406)		scale->y = ::Math_obj::sqrt((_hx_tmp7 + _hx_tmp8));
HXLINE( 407)		Float _hx_tmp9 = (mr->get((int)8) * mr->get((int)8));
HXDLIN( 407)		Float _hx_tmp10 = (mr->get((int)9) * mr->get((int)9));
HXDLIN( 407)		Float _hx_tmp11 = (_hx_tmp9 + _hx_tmp10);
HXDLIN( 407)		Float _hx_tmp12 = (mr->get((int)10) * mr->get((int)10));
HXDLIN( 407)		scale->z = ::Math_obj::sqrt((_hx_tmp11 + _hx_tmp12));
HXLINE( 409)		Float _hx_tmp13 = (mr->get((int)5) * mr->get((int)10));
HXDLIN( 409)		Float _hx_tmp14 = (mr->get((int)6) * mr->get((int)9));
HXDLIN( 409)		Float _hx_tmp15 = (mr->get((int)0) * (_hx_tmp13 - _hx_tmp14));
HXDLIN( 409)		Float _hx_tmp16 = (mr->get((int)4) * mr->get((int)10));
HXDLIN( 409)		Float _hx_tmp17 = (mr->get((int)6) * mr->get((int)8));
HXDLIN( 409)		Float _hx_tmp18 = (mr->get((int)1) * (_hx_tmp16 - _hx_tmp17));
HXDLIN( 409)		Float _hx_tmp19 = (_hx_tmp15 - _hx_tmp18);
HXDLIN( 409)		Float _hx_tmp20 = (mr->get((int)4) * mr->get((int)9));
HXDLIN( 409)		Float _hx_tmp21 = (mr->get((int)5) * mr->get((int)8));
HXDLIN( 409)		Float _hx_tmp22 = (mr->get((int)2) * (_hx_tmp20 - _hx_tmp21));
HXDLIN( 409)		if (((_hx_tmp19 + _hx_tmp22) < (int)0)) {
HXLINE( 411)			scale->z = -(scale->z);
            		}
HXLINE( 415)		{
HXLINE( 415)			Float value = ((Float)mr->get((int)0) / (Float)scale->x);
HXDLIN( 415)			mr->set((int)0,value);
            		}
HXLINE( 416)		{
HXLINE( 416)			Float value1 = ((Float)mr->get((int)1) / (Float)scale->x);
HXDLIN( 416)			mr->set((int)1,value1);
            		}
HXLINE( 417)		{
HXLINE( 417)			Float value2 = ((Float)mr->get((int)2) / (Float)scale->x);
HXDLIN( 417)			mr->set((int)2,value2);
            		}
HXLINE( 418)		{
HXLINE( 418)			Float value3 = ((Float)mr->get((int)4) / (Float)scale->y);
HXDLIN( 418)			mr->set((int)4,value3);
            		}
HXLINE( 419)		{
HXLINE( 419)			Float value4 = ((Float)mr->get((int)5) / (Float)scale->y);
HXDLIN( 419)			mr->set((int)5,value4);
            		}
HXLINE( 420)		{
HXLINE( 420)			Float value5 = ((Float)mr->get((int)6) / (Float)scale->y);
HXDLIN( 420)			mr->set((int)6,value5);
            		}
HXLINE( 421)		{
HXLINE( 421)			Float value6 = ((Float)mr->get((int)8) / (Float)scale->z);
HXDLIN( 421)			mr->set((int)8,value6);
            		}
HXLINE( 422)		{
HXLINE( 422)			Float value7 = ((Float)mr->get((int)9) / (Float)scale->z);
HXDLIN( 422)			mr->set((int)9,value7);
            		}
HXLINE( 423)		{
HXLINE( 423)			Float value8 = ((Float)mr->get((int)10) / (Float)scale->z);
HXDLIN( 423)			mr->set((int)10,value8);
            		}
HXLINE( 425)		HX_VARI(  ::openfl::geom::Vector3D,rot) =  ::openfl::geom::Vector3D_obj::__new(null(),null(),null(),null());
HXLINE( 427)		 ::Dynamic _hx_switch_0 = orientationStyle;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 431)			Float _hx_tmp23 = (mr->get((int)0) + mr->get((int)5));
HXDLIN( 431)			Float _hx_tmp24 = (_hx_tmp23 + mr->get((int)10));
HXDLIN( 431)			rot->w = ::Math_obj::acos(((Float)(_hx_tmp24 - (int)1) / (Float)(int)2));
HXLINE( 433)			Float _hx_tmp25 = (mr->get((int)6) - mr->get((int)9));
HXDLIN( 433)			Float _hx_tmp26 = (mr->get((int)6) - mr->get((int)9));
HXDLIN( 433)			Float _hx_tmp27 = (_hx_tmp25 * _hx_tmp26);
HXDLIN( 433)			Float _hx_tmp28 = (mr->get((int)8) - mr->get((int)2));
HXDLIN( 433)			Float _hx_tmp29 = (mr->get((int)8) - mr->get((int)2));
HXDLIN( 433)			Float _hx_tmp30 = (_hx_tmp27 + (_hx_tmp28 * _hx_tmp29));
HXDLIN( 433)			Float _hx_tmp31 = (mr->get((int)1) - mr->get((int)4));
HXDLIN( 433)			Float _hx_tmp32 = (mr->get((int)1) - mr->get((int)4));
HXDLIN( 433)			HX_VARI( Float,len) = ::Math_obj::sqrt((_hx_tmp30 + (_hx_tmp31 * _hx_tmp32)));
HXLINE( 435)			if ((len != (int)0)) {
HXLINE( 437)				Float _hx_tmp33 = (mr->get((int)6) - mr->get((int)9));
HXDLIN( 437)				rot->x = ((Float)_hx_tmp33 / (Float)len);
HXLINE( 438)				Float _hx_tmp34 = (mr->get((int)8) - mr->get((int)2));
HXDLIN( 438)				rot->y = ((Float)_hx_tmp34 / (Float)len);
HXLINE( 439)				Float _hx_tmp35 = (mr->get((int)1) - mr->get((int)4));
HXDLIN( 439)				rot->z = ((Float)_hx_tmp35 / (Float)len);
            			}
            			else {
HXLINE( 443)				rot->x = (rot->y = (rot->z = (int)0));
            			}
HXLINE( 429)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE( 487)			rot->y = ::Math_obj::asin(-(mr->get((int)2)));
HXLINE( 489)			Bool _hx_tmp36;
HXDLIN( 489)			Bool _hx_tmp37 = (mr->get((int)2) != (int)1);
HXDLIN( 489)			if (_hx_tmp37) {
HXLINE( 489)				_hx_tmp36 = (mr->get((int)2) != (int)-1);
            			}
            			else {
HXLINE( 489)				_hx_tmp36 = false;
            			}
HXDLIN( 489)			if (_hx_tmp36) {
HXLINE( 491)				rot->x = ::Math_obj::atan2(mr->get((int)6),mr->get((int)10));
HXLINE( 492)				rot->z = ::Math_obj::atan2(mr->get((int)1),mr->get((int)0));
            			}
            			else {
HXLINE( 496)				rot->z = (int)0;
HXLINE( 497)				rot->x = ::Math_obj::atan2(mr->get((int)4),mr->get((int)5));
            			}
HXLINE( 485)			goto _hx_goto_5;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE( 449)			Float _hx_tmp38 = (mr->get((int)0) + mr->get((int)5));
HXDLIN( 449)			HX_VARI( Float,tr) = (_hx_tmp38 + mr->get((int)10));
HXLINE( 451)			if ((tr > (int)0)) {
HXLINE( 453)				Float _hx_tmp39 = ::Math_obj::sqrt(((int)1 + tr));
HXDLIN( 453)				rot->w = ((Float)_hx_tmp39 / (Float)(int)2);
HXLINE( 455)				Float _hx_tmp40 = (mr->get((int)6) - mr->get((int)9));
HXDLIN( 455)				Float _hx_tmp41 = ((int)4 * rot->w);
HXDLIN( 455)				rot->x = ((Float)_hx_tmp40 / (Float)_hx_tmp41);
HXLINE( 456)				Float _hx_tmp42 = (mr->get((int)8) - mr->get((int)2));
HXDLIN( 456)				Float _hx_tmp43 = ((int)4 * rot->w);
HXDLIN( 456)				rot->y = ((Float)_hx_tmp42 / (Float)_hx_tmp43);
HXLINE( 457)				Float _hx_tmp44 = (mr->get((int)1) - mr->get((int)4));
HXDLIN( 457)				Float _hx_tmp45 = ((int)4 * rot->w);
HXDLIN( 457)				rot->z = ((Float)_hx_tmp44 / (Float)_hx_tmp45);
            			}
            			else {
HXLINE( 459)				Bool _hx_tmp46;
HXDLIN( 459)				Bool _hx_tmp47 = (mr->get((int)0) > mr->get((int)5));
HXDLIN( 459)				if (_hx_tmp47) {
HXLINE( 459)					_hx_tmp46 = (mr->get((int)0) > mr->get((int)10));
            				}
            				else {
HXLINE( 459)					_hx_tmp46 = false;
            				}
HXDLIN( 459)				if (_hx_tmp46) {
HXLINE( 461)					Float _hx_tmp48 = ((int)1 + mr->get((int)0));
HXDLIN( 461)					Float _hx_tmp49 = (_hx_tmp48 - mr->get((int)5));
HXDLIN( 461)					Float _hx_tmp50 = (_hx_tmp49 - mr->get((int)10));
HXDLIN( 461)					Float _hx_tmp51 = ::Math_obj::sqrt(_hx_tmp50);
HXDLIN( 461)					rot->x = ((Float)_hx_tmp51 / (Float)(int)2);
HXLINE( 463)					Float _hx_tmp52 = (mr->get((int)6) - mr->get((int)9));
HXDLIN( 463)					Float _hx_tmp53 = ((int)4 * rot->x);
HXDLIN( 463)					rot->w = ((Float)_hx_tmp52 / (Float)_hx_tmp53);
HXLINE( 464)					Float _hx_tmp54 = (mr->get((int)1) + mr->get((int)4));
HXDLIN( 464)					Float _hx_tmp55 = ((int)4 * rot->x);
HXDLIN( 464)					rot->y = ((Float)_hx_tmp54 / (Float)_hx_tmp55);
HXLINE( 465)					Float _hx_tmp56 = (mr->get((int)8) + mr->get((int)2));
HXDLIN( 465)					Float _hx_tmp57 = ((int)4 * rot->x);
HXDLIN( 465)					rot->z = ((Float)_hx_tmp56 / (Float)_hx_tmp57);
            				}
            				else {
HXLINE( 467)					Bool _hx_tmp58 = (mr->get((int)5) > mr->get((int)10));
HXDLIN( 467)					if (_hx_tmp58) {
HXLINE( 469)						Float _hx_tmp59 = ((int)1 + mr->get((int)5));
HXDLIN( 469)						Float _hx_tmp60 = (_hx_tmp59 - mr->get((int)0));
HXDLIN( 469)						Float _hx_tmp61 = (_hx_tmp60 - mr->get((int)10));
HXDLIN( 469)						Float _hx_tmp62 = ::Math_obj::sqrt(_hx_tmp61);
HXDLIN( 469)						rot->y = ((Float)_hx_tmp62 / (Float)(int)2);
HXLINE( 471)						Float _hx_tmp63 = (mr->get((int)1) + mr->get((int)4));
HXDLIN( 471)						Float _hx_tmp64 = ((int)4 * rot->y);
HXDLIN( 471)						rot->x = ((Float)_hx_tmp63 / (Float)_hx_tmp64);
HXLINE( 472)						Float _hx_tmp65 = (mr->get((int)8) - mr->get((int)2));
HXDLIN( 472)						Float _hx_tmp66 = ((int)4 * rot->y);
HXDLIN( 472)						rot->w = ((Float)_hx_tmp65 / (Float)_hx_tmp66);
HXLINE( 473)						Float _hx_tmp67 = (mr->get((int)6) + mr->get((int)9));
HXDLIN( 473)						Float _hx_tmp68 = ((int)4 * rot->y);
HXDLIN( 473)						rot->z = ((Float)_hx_tmp67 / (Float)_hx_tmp68);
            					}
            					else {
HXLINE( 477)						Float _hx_tmp69 = ((int)1 + mr->get((int)10));
HXDLIN( 477)						Float _hx_tmp70 = (_hx_tmp69 - mr->get((int)0));
HXDLIN( 477)						Float _hx_tmp71 = (_hx_tmp70 - mr->get((int)5));
HXDLIN( 477)						Float _hx_tmp72 = ::Math_obj::sqrt(_hx_tmp71);
HXDLIN( 477)						rot->z = ((Float)_hx_tmp72 / (Float)(int)2);
HXLINE( 479)						Float _hx_tmp73 = (mr->get((int)8) + mr->get((int)2));
HXDLIN( 479)						Float _hx_tmp74 = ((int)4 * rot->z);
HXDLIN( 479)						rot->x = ((Float)_hx_tmp73 / (Float)_hx_tmp74);
HXLINE( 480)						Float _hx_tmp75 = (mr->get((int)6) + mr->get((int)9));
HXDLIN( 480)						Float _hx_tmp76 = ((int)4 * rot->z);
HXDLIN( 480)						rot->y = ((Float)_hx_tmp75 / (Float)_hx_tmp76);
HXLINE( 481)						Float _hx_tmp77 = (mr->get((int)1) - mr->get((int)4));
HXDLIN( 481)						Float _hx_tmp78 = ((int)4 * rot->z);
HXDLIN( 481)						rot->w = ((Float)_hx_tmp77 / (Float)_hx_tmp78);
            					}
            				}
            			}
HXLINE( 447)			goto _hx_goto_5;
            		}
            		_hx_goto_5:;
HXLINE( 503)		vec->push(pos);
HXLINE( 504)		vec->push(rot);
HXLINE( 505)		vec->push(scale);
HXLINE( 507)		return vec;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,decompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::deltaTransformVector( ::openfl::geom::Vector3D v){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","deltaTransformVector",0x0285cbbf,"openfl.geom.Matrix3D.deltaTransformVector","openfl/geom/Matrix3D.hx",512,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 514)		HX_VARI( Float,x) = v->x;
HXDLIN( 514)		HX_VARI( Float,y) = v->y;
HXDLIN( 514)		HX_VARI( Float,z) = v->z;
HXLINE( 516)		Float _hx_tmp = (x * this->rawData->get((int)0));
HXDLIN( 516)		Float _hx_tmp1 = (y * this->rawData->get((int)4));
HXDLIN( 516)		Float _hx_tmp2 = (_hx_tmp + _hx_tmp1);
HXDLIN( 516)		Float _hx_tmp3 = (z * this->rawData->get((int)8));
HXDLIN( 516)		Float _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + this->rawData->get((int)3));
HXDLIN( 516)		Float _hx_tmp5 = (x * this->rawData->get((int)1));
HXDLIN( 516)		Float _hx_tmp6 = (y * this->rawData->get((int)5));
HXDLIN( 516)		Float _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXDLIN( 516)		Float _hx_tmp8 = (z * this->rawData->get((int)9));
HXDLIN( 516)		Float _hx_tmp9 = ((_hx_tmp7 + _hx_tmp8) + this->rawData->get((int)7));
HXDLIN( 516)		Float _hx_tmp10 = (x * this->rawData->get((int)2));
HXDLIN( 516)		Float _hx_tmp11 = (y * this->rawData->get((int)6));
HXDLIN( 516)		Float _hx_tmp12 = (_hx_tmp10 + _hx_tmp11);
HXDLIN( 516)		Float _hx_tmp13 = (z * this->rawData->get((int)10));
HXDLIN( 516)		Float _hx_tmp14 = ((_hx_tmp12 + _hx_tmp13) + this->rawData->get((int)11));
HXDLIN( 516)		return  ::openfl::geom::Vector3D_obj::__new(_hx_tmp4,_hx_tmp9,_hx_tmp14,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,deltaTransformVector,return )

void Matrix3D_obj::identity(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","identity",0xd35ee2c6,"openfl.geom.Matrix3D.identity","openfl/geom/Matrix3D.hx",523,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 523)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::fromData( _hx_array_data_7,16);
HXDLIN( 523)		Int length = null();
HXDLIN( 523)		Bool fixed = null();
HXDLIN( 523)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXDLIN( 523)		{
HXLINE( 523)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 523)			HX_VARI( Int,_g) = a->length;
HXDLIN( 523)			while((_g1 < _g)){
HXLINE( 523)				HX_VARI( Int,i) = _g1++;
HXDLIN( 523)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 523)		this->rawData = vector;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,identity,(void))

void Matrix3D_obj::interpolateTo( ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","interpolateTo",0x74c2e614,"openfl.geom.Matrix3D.interpolateTo","openfl/geom/Matrix3D.hx",545,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 545)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 545)		while((_g < (int)16)){
HXLINE( 545)			HX_VARI( Int,i) = _g++;
HXLINE( 547)			{
HXLINE( 547)				Float _hx_tmp = (toMat->rawData->get(i) - this->rawData->get(i));
HXDLIN( 547)				Float value = (this->rawData->get(i) + (_hx_tmp * percent));
HXDLIN( 547)				this->rawData->set(i,value);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,interpolateTo,(void))

Bool Matrix3D_obj::invert(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","invert",0x5820929e,"openfl.geom.Matrix3D.invert","openfl/geom/Matrix3D.hx",554,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 556)		HX_VARI( Float,d) = this->get_determinant();
HXLINE( 557)		Float _hx_tmp = ::Math_obj::abs(d);
HXDLIN( 557)		HX_VARI( Bool,invertable) = (_hx_tmp > ((Float)0.00000000001));
HXLINE( 559)		if (invertable) {
HXLINE( 561)			d = ((Float)(int)1 / (Float)d);
HXLINE( 563)			HX_VARI( Float,m11) = this->rawData->get((int)0);
HXDLIN( 563)			HX_VARI( Float,m21) = this->rawData->get((int)4);
HXDLIN( 563)			HX_VARI( Float,m31) = this->rawData->get((int)8);
HXDLIN( 563)			HX_VARI( Float,m41) = this->rawData->get((int)12);
HXLINE( 564)			HX_VARI( Float,m12) = this->rawData->get((int)1);
HXDLIN( 564)			HX_VARI( Float,m22) = this->rawData->get((int)5);
HXDLIN( 564)			HX_VARI( Float,m32) = this->rawData->get((int)9);
HXDLIN( 564)			HX_VARI( Float,m42) = this->rawData->get((int)13);
HXLINE( 565)			HX_VARI( Float,m13) = this->rawData->get((int)2);
HXDLIN( 565)			HX_VARI( Float,m23) = this->rawData->get((int)6);
HXDLIN( 565)			HX_VARI( Float,m33) = this->rawData->get((int)10);
HXDLIN( 565)			HX_VARI( Float,m43) = this->rawData->get((int)14);
HXLINE( 566)			HX_VARI( Float,m14) = this->rawData->get((int)3);
HXDLIN( 566)			HX_VARI( Float,m24) = this->rawData->get((int)7);
HXDLIN( 566)			HX_VARI( Float,m34) = this->rawData->get((int)11);
HXDLIN( 566)			HX_VARI( Float,m44) = this->rawData->get((int)15);
HXLINE( 568)			this->rawData->set((int)0,(d * (((m22 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m23 * m44) - (m43 * m24)))) + (m42 * ((m23 * m34) - (m33 * m24))))));
HXLINE( 569)			this->rawData->set((int)1,(-(d) * (((m12 * ((m33 * m44) - (m43 * m34))) - (m32 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m34) - (m33 * m14))))));
HXLINE( 570)			this->rawData->set((int)2,(d * (((m12 * ((m23 * m44) - (m43 * m24))) - (m22 * ((m13 * m44) - (m43 * m14)))) + (m42 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 571)			this->rawData->set((int)3,(-(d) * (((m12 * ((m23 * m34) - (m33 * m24))) - (m22 * ((m13 * m34) - (m33 * m14)))) + (m32 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 572)			this->rawData->set((int)4,(-(d) * (((m21 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m23 * m44) - (m43 * m24)))) + (m41 * ((m23 * m34) - (m33 * m24))))));
HXLINE( 573)			this->rawData->set((int)5,(d * (((m11 * ((m33 * m44) - (m43 * m34))) - (m31 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m34) - (m33 * m14))))));
HXLINE( 574)			this->rawData->set((int)6,(-(d) * (((m11 * ((m23 * m44) - (m43 * m24))) - (m21 * ((m13 * m44) - (m43 * m14)))) + (m41 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 575)			this->rawData->set((int)7,(d * (((m11 * ((m23 * m34) - (m33 * m24))) - (m21 * ((m13 * m34) - (m33 * m14)))) + (m31 * ((m13 * m24) - (m23 * m14))))));
HXLINE( 576)			this->rawData->set((int)8,(d * (((m21 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m22 * m44) - (m42 * m24)))) + (m41 * ((m22 * m34) - (m32 * m24))))));
HXLINE( 577)			this->rawData->set((int)9,(-(d) * (((m11 * ((m32 * m44) - (m42 * m34))) - (m31 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m34) - (m32 * m14))))));
HXLINE( 578)			this->rawData->set((int)10,(d * (((m11 * ((m22 * m44) - (m42 * m24))) - (m21 * ((m12 * m44) - (m42 * m14)))) + (m41 * ((m12 * m24) - (m22 * m14))))));
HXLINE( 579)			this->rawData->set((int)11,(-(d) * (((m11 * ((m22 * m34) - (m32 * m24))) - (m21 * ((m12 * m34) - (m32 * m14)))) + (m31 * ((m12 * m24) - (m22 * m14))))));
HXLINE( 580)			this->rawData->set((int)12,(-(d) * (((m21 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m22 * m43) - (m42 * m23)))) + (m41 * ((m22 * m33) - (m32 * m23))))));
HXLINE( 581)			this->rawData->set((int)13,(d * (((m11 * ((m32 * m43) - (m42 * m33))) - (m31 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m33) - (m32 * m13))))));
HXLINE( 582)			this->rawData->set((int)14,(-(d) * (((m11 * ((m22 * m43) - (m42 * m23))) - (m21 * ((m12 * m43) - (m42 * m13)))) + (m41 * ((m12 * m23) - (m22 * m13))))));
HXLINE( 583)			this->rawData->set((int)15,(d * (((m11 * ((m22 * m33) - (m32 * m23))) - (m21 * ((m12 * m33) - (m32 * m13)))) + (m31 * ((m12 * m23) - (m22 * m13))))));
            		}
HXLINE( 587)		return invertable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,invert,return )

void Matrix3D_obj::pointAt( ::openfl::geom::Vector3D pos, ::openfl::geom::Vector3D at, ::openfl::geom::Vector3D up){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","pointAt",0xd7900cdb,"openfl.geom.Matrix3D.pointAt","openfl/geom/Matrix3D.hx",592,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
            	HX_STACK_ARG(at,"at")
            	HX_STACK_ARG(up,"up")
HXLINE( 594)		Bool _hx_tmp = hx::IsNull( at );
HXDLIN( 594)		if (_hx_tmp) {
HXLINE( 596)			at =  ::openfl::geom::Vector3D_obj::__new((int)0,(int)0,(int)-1,null());
            		}
HXLINE( 600)		Bool _hx_tmp1 = hx::IsNull( up );
HXDLIN( 600)		if (_hx_tmp1) {
HXLINE( 602)			up =  ::openfl::geom::Vector3D_obj::__new((int)0,(int)-1,(int)0,null());
            		}
HXLINE( 606)		HX_VARI(  ::openfl::geom::Vector3D,dir) = at->subtract(pos);
HXLINE( 607)		HX_VARI(  ::openfl::geom::Vector3D,vup) = up->clone();
HXLINE( 608)		HX_VAR(  ::openfl::geom::Vector3D,right);
HXLINE( 610)		dir->normalize();
HXLINE( 611)		vup->normalize();
HXLINE( 613)		HX_VARI(  ::openfl::geom::Vector3D,dir2) = dir->clone();
HXLINE( 614)		Float _hx_tmp2 = vup->dotProduct(dir);
HXDLIN( 614)		dir2->scaleBy(_hx_tmp2);
HXLINE( 616)		vup = vup->subtract(dir2);
HXLINE( 618)		Float _hx_tmp3 = vup->get_length();
HXDLIN( 618)		if ((_hx_tmp3 > (int)0)) {
HXLINE( 620)			vup->normalize();
            		}
            		else {
HXLINE( 624)			if ((dir->x != (int)0)) {
HXLINE( 626)				vup =  ::openfl::geom::Vector3D_obj::__new(-(dir->y),dir->x,(int)0,null());
            			}
            			else {
HXLINE( 630)				vup =  ::openfl::geom::Vector3D_obj::__new((int)1,(int)0,(int)0,null());
            			}
            		}
HXLINE( 636)		right = vup->crossProduct(dir);
HXLINE( 637)		right->normalize();
HXLINE( 639)		{
HXLINE( 639)			Float value = right->x;
HXDLIN( 639)			this->rawData->set((int)0,value);
            		}
HXLINE( 640)		{
HXLINE( 640)			Float value1 = right->y;
HXDLIN( 640)			this->rawData->set((int)4,value1);
            		}
HXLINE( 641)		{
HXLINE( 641)			Float value2 = right->z;
HXDLIN( 641)			this->rawData->set((int)8,value2);
            		}
HXLINE( 642)		this->rawData->set((int)12,((Float)0.0));
HXLINE( 643)		{
HXLINE( 643)			Float value3 = vup->x;
HXDLIN( 643)			this->rawData->set((int)1,value3);
            		}
HXLINE( 644)		{
HXLINE( 644)			Float value4 = vup->y;
HXDLIN( 644)			this->rawData->set((int)5,value4);
            		}
HXLINE( 645)		{
HXLINE( 645)			Float value5 = vup->z;
HXDLIN( 645)			this->rawData->set((int)9,value5);
            		}
HXLINE( 646)		this->rawData->set((int)13,((Float)0.0));
HXLINE( 647)		{
HXLINE( 647)			Float value6 = dir->x;
HXDLIN( 647)			this->rawData->set((int)2,value6);
            		}
HXLINE( 648)		{
HXLINE( 648)			Float value7 = dir->y;
HXDLIN( 648)			this->rawData->set((int)6,value7);
            		}
HXLINE( 649)		{
HXLINE( 649)			Float value8 = dir->z;
HXDLIN( 649)			this->rawData->set((int)10,value8);
            		}
HXLINE( 650)		this->rawData->set((int)14,((Float)0.0));
HXLINE( 651)		{
HXLINE( 651)			Float value9 = pos->x;
HXDLIN( 651)			this->rawData->set((int)3,value9);
            		}
HXLINE( 652)		{
HXLINE( 652)			Float value10 = pos->y;
HXDLIN( 652)			this->rawData->set((int)7,value10);
            		}
HXLINE( 653)		{
HXLINE( 653)			Float value11 = pos->z;
HXDLIN( 653)			this->rawData->set((int)11,value11);
            		}
HXLINE( 654)		this->rawData->set((int)15,((Float)1.0));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,pointAt,(void))

void Matrix3D_obj::prepend( ::openfl::geom::Matrix3D rhs){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","prepend",0xbe4f0286,"openfl.geom.Matrix3D.prepend","openfl/geom/Matrix3D.hx",659,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rhs,"rhs")
HXLINE( 661)		HX_VARI( Float,m111) = rhs->rawData->get((int)0);
HXDLIN( 661)		HX_VARI( Float,m121) = rhs->rawData->get((int)4);
HXDLIN( 661)		HX_VARI( Float,m131) = rhs->rawData->get((int)8);
HXDLIN( 661)		HX_VARI( Float,m141) = rhs->rawData->get((int)12);
HXDLIN( 661)		HX_VARI( Float,m112) = rhs->rawData->get((int)1);
HXDLIN( 661)		HX_VARI( Float,m122) = rhs->rawData->get((int)5);
HXDLIN( 661)		HX_VARI( Float,m132) = rhs->rawData->get((int)9);
HXDLIN( 661)		HX_VARI( Float,m142) = rhs->rawData->get((int)13);
HXDLIN( 661)		HX_VARI( Float,m113) = rhs->rawData->get((int)2);
HXDLIN( 661)		HX_VARI( Float,m123) = rhs->rawData->get((int)6);
HXDLIN( 661)		HX_VARI( Float,m133) = rhs->rawData->get((int)10);
HXDLIN( 661)		HX_VARI( Float,m143) = rhs->rawData->get((int)14);
HXDLIN( 661)		HX_VARI( Float,m114) = rhs->rawData->get((int)3);
HXDLIN( 661)		HX_VARI( Float,m124) = rhs->rawData->get((int)7);
HXDLIN( 661)		HX_VARI( Float,m134) = rhs->rawData->get((int)11);
HXDLIN( 661)		HX_VARI( Float,m144) = rhs->rawData->get((int)15);
HXDLIN( 661)		HX_VARI( Float,m211) = this->rawData->get((int)0);
HXDLIN( 661)		HX_VARI( Float,m221) = this->rawData->get((int)4);
HXDLIN( 661)		HX_VARI( Float,m231) = this->rawData->get((int)8);
HXDLIN( 661)		HX_VARI( Float,m241) = this->rawData->get((int)12);
HXDLIN( 661)		HX_VARI( Float,m212) = this->rawData->get((int)1);
HXDLIN( 661)		HX_VARI( Float,m222) = this->rawData->get((int)5);
HXDLIN( 661)		HX_VARI( Float,m232) = this->rawData->get((int)9);
HXDLIN( 661)		HX_VARI( Float,m242) = this->rawData->get((int)13);
HXDLIN( 661)		HX_VARI( Float,m213) = this->rawData->get((int)2);
HXDLIN( 661)		HX_VARI( Float,m223) = this->rawData->get((int)6);
HXDLIN( 661)		HX_VARI( Float,m233) = this->rawData->get((int)10);
HXDLIN( 661)		HX_VARI( Float,m243) = this->rawData->get((int)14);
HXDLIN( 661)		HX_VARI( Float,m214) = this->rawData->get((int)3);
HXDLIN( 661)		HX_VARI( Float,m224) = this->rawData->get((int)7);
HXDLIN( 661)		HX_VARI( Float,m234) = this->rawData->get((int)11);
HXDLIN( 661)		HX_VARI( Float,m244) = this->rawData->get((int)15);
HXLINE( 670)		this->rawData->set((int)0,((((m111 * m211) + (m112 * m221)) + (m113 * m231)) + (m114 * m241)));
HXLINE( 671)		this->rawData->set((int)1,((((m111 * m212) + (m112 * m222)) + (m113 * m232)) + (m114 * m242)));
HXLINE( 672)		this->rawData->set((int)2,((((m111 * m213) + (m112 * m223)) + (m113 * m233)) + (m114 * m243)));
HXLINE( 673)		this->rawData->set((int)3,((((m111 * m214) + (m112 * m224)) + (m113 * m234)) + (m114 * m244)));
HXLINE( 675)		this->rawData->set((int)4,((((m121 * m211) + (m122 * m221)) + (m123 * m231)) + (m124 * m241)));
HXLINE( 676)		this->rawData->set((int)5,((((m121 * m212) + (m122 * m222)) + (m123 * m232)) + (m124 * m242)));
HXLINE( 677)		this->rawData->set((int)6,((((m121 * m213) + (m122 * m223)) + (m123 * m233)) + (m124 * m243)));
HXLINE( 678)		this->rawData->set((int)7,((((m121 * m214) + (m122 * m224)) + (m123 * m234)) + (m124 * m244)));
HXLINE( 680)		this->rawData->set((int)8,((((m131 * m211) + (m132 * m221)) + (m133 * m231)) + (m134 * m241)));
HXLINE( 681)		this->rawData->set((int)9,((((m131 * m212) + (m132 * m222)) + (m133 * m232)) + (m134 * m242)));
HXLINE( 682)		this->rawData->set((int)10,((((m131 * m213) + (m132 * m223)) + (m133 * m233)) + (m134 * m243)));
HXLINE( 683)		this->rawData->set((int)11,((((m131 * m214) + (m132 * m224)) + (m133 * m234)) + (m134 * m244)));
HXLINE( 685)		this->rawData->set((int)12,((((m141 * m211) + (m142 * m221)) + (m143 * m231)) + (m144 * m241)));
HXLINE( 686)		this->rawData->set((int)13,((((m141 * m212) + (m142 * m222)) + (m143 * m232)) + (m144 * m242)));
HXLINE( 687)		this->rawData->set((int)14,((((m141 * m213) + (m142 * m223)) + (m143 * m233)) + (m144 * m243)));
HXLINE( 688)		this->rawData->set((int)15,((((m141 * m214) + (m142 * m224)) + (m143 * m234)) + (m144 * m244)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,prepend,(void))

void Matrix3D_obj::prependRotation(Float degrees, ::openfl::geom::Vector3D axis, ::openfl::geom::Vector3D pivotPoint){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","prependRotation",0x54b5f1e4,"openfl.geom.Matrix3D.prependRotation","openfl/geom/Matrix3D.hx",693,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(degrees,"degrees")
            	HX_STACK_ARG(axis,"axis")
            	HX_STACK_ARG(pivotPoint,"pivotPoint")
HXLINE( 695)		HX_VAR( Float,tx);
HXDLIN( 695)		HX_VAR( Float,ty);
HXDLIN( 695)		HX_VARI( Float,tz) = (int)0;
HXLINE( 696)		ty = tz;
HXDLIN( 696)		tx = ty;
HXLINE( 697)		Bool _hx_tmp = hx::IsNotNull( pivotPoint );
HXDLIN( 697)		if (_hx_tmp) {
HXLINE( 698)			tx = pivotPoint->x;
HXLINE( 699)			ty = pivotPoint->y;
HXLINE( 700)			tz = pivotPoint->z;
            		}
HXLINE( 702)		HX_VARI( Float,radian) = ((Float)(degrees * ::Math_obj::PI) / (Float)(int)180);
HXLINE( 703)		HX_VARI( Float,cos) = ::Math_obj::cos(radian);
HXLINE( 704)		HX_VARI( Float,sin) = ::Math_obj::sin(radian);
HXLINE( 705)		HX_VARI( Float,x) = axis->x;
HXLINE( 706)		HX_VARI( Float,y) = axis->y;
HXLINE( 707)		HX_VARI( Float,z) = axis->z;
HXLINE( 708)		HX_VARI( Float,x2) = (x * x);
HXLINE( 709)		HX_VARI( Float,y2) = (y * y);
HXLINE( 710)		HX_VARI( Float,z2) = (z * z);
HXLINE( 711)		HX_VARI( Float,ls) = ((x2 + y2) + z2);
HXLINE( 712)		if ((ls != (int)0)) {
HXLINE( 713)			HX_VARI( Float,l) = ::Math_obj::sqrt(ls);
HXLINE( 714)			hx::DivEq(x,l);
HXLINE( 715)			hx::DivEq(y,l);
HXLINE( 716)			hx::DivEq(z,l);
HXLINE( 717)			hx::DivEq(x2,ls);
HXLINE( 718)			hx::DivEq(y2,ls);
HXLINE( 719)			hx::DivEq(z2,ls);
            		}
HXLINE( 721)		HX_VARI( Float,ccos) = ((int)1 - cos);
HXLINE( 722)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__new(null());
HXLINE( 723)		HX_VARI(  ::openfl::_Vector::FloatVector,d) = m->rawData;
HXLINE( 724)		d->set((int)0,(x2 + ((y2 + z2) * cos)));
HXLINE( 725)		d->set((int)1,(((x * y) * ccos) + (z * sin)));
HXLINE( 726)		d->set((int)2,(((x * z) * ccos) - (y * sin)));
HXLINE( 727)		d->set((int)4,(((x * y) * ccos) - (z * sin)));
HXLINE( 728)		d->set((int)5,(y2 + ((x2 + z2) * cos)));
HXLINE( 729)		d->set((int)6,(((y * z) * ccos) + (x * sin)));
HXLINE( 730)		d->set((int)8,(((x * z) * ccos) + (y * sin)));
HXLINE( 731)		d->set((int)9,(((y * z) * ccos) - (x * sin)));
HXLINE( 732)		d->set((int)10,(z2 + ((x2 + y2) * cos)));
HXLINE( 733)		d->set((int)12,((((tx * (y2 + z2)) - (x * ((ty * y) + (tz * z)))) * ccos) + (((ty * z) - (tz * y)) * sin)));
HXLINE( 734)		d->set((int)13,((((ty * (x2 + z2)) - (y * ((tx * x) + (tz * z)))) * ccos) + (((tz * x) - (tx * z)) * sin)));
HXLINE( 735)		d->set((int)14,((((tz * (x2 + y2)) - (z * ((tx * x) + (ty * y)))) * ccos) + (((tx * y) - (ty * x)) * sin)));
HXLINE( 737)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependRotation,(void))

void Matrix3D_obj::prependScale(Float xScale,Float yScale,Float zScale){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","prependScale",0x59d85624,"openfl.geom.Matrix3D.prependScale","openfl/geom/Matrix3D.hx",744,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(xScale,"xScale")
            	HX_STACK_ARG(yScale,"yScale")
            	HX_STACK_ARG(zScale,"zScale")
HXLINE( 744)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::__new(16)->init(0,xScale)->init(1,((Float)0.0))->init(2,((Float)0.0))->init(3,((Float)0.0))->init(4,((Float)0.0))->init(5,yScale)->init(6,((Float)0.0))->init(7,((Float)0.0))->init(8,((Float)0.0))->init(9,((Float)0.0))->init(10,zScale)->init(11,((Float)0.0))->init(12,((Float)0.0))->init(13,((Float)0.0))->init(14,((Float)0.0))->init(15,((Float)1.0));
HXDLIN( 744)		Int length = null();
HXDLIN( 744)		Bool fixed = null();
HXDLIN( 744)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXDLIN( 744)		{
HXLINE( 744)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 744)			HX_VARI( Int,_g) = a->length;
HXDLIN( 744)			while((_g1 < _g)){
HXLINE( 744)				HX_VARI( Int,i) = _g1++;
HXDLIN( 744)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 744)		this->prepend( ::openfl::geom::Matrix3D_obj::__new(vector));
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependScale,(void))

void Matrix3D_obj::prependTranslation(Float x,Float y,Float z){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","prependTranslation",0x2df4680b,"openfl.geom.Matrix3D.prependTranslation","openfl/geom/Matrix3D.hx",749,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
HXLINE( 751)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__new(null());
HXLINE( 752)		m->set_position( ::openfl::geom::Vector3D_obj::__new(x,y,z,null()));
HXLINE( 753)		this->prepend(m);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,prependTranslation,(void))

Bool Matrix3D_obj::recompose( ::openfl::_Vector::ObjectVector components, ::Dynamic orientationStyle){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","recompose",0xd355bb37,"openfl.geom.Matrix3D.recompose","openfl/geom/Matrix3D.hx",758,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(components,"components")
            	HX_STACK_ARG(orientationStyle,"orientationStyle")
HXLINE( 760)		Bool _hx_tmp;
HXDLIN( 760)		Bool _hx_tmp1;
HXDLIN( 760)		Bool _hx_tmp2;
HXDLIN( 760)		Int _hx_tmp3 = components->get_length();
HXDLIN( 760)		if ((_hx_tmp3 >= (int)3)) {
HXLINE( 760)			_hx_tmp2 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x == (int)0);
            		}
            		else {
HXLINE( 760)			_hx_tmp2 = true;
            		}
HXDLIN( 760)		if (!(_hx_tmp2)) {
HXLINE( 760)			_hx_tmp1 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 760)			_hx_tmp1 = true;
            		}
HXDLIN( 760)		if (!(_hx_tmp1)) {
HXLINE( 760)			_hx_tmp = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z == (int)0);
            		}
            		else {
HXLINE( 760)			_hx_tmp = true;
            		}
HXDLIN( 760)		if (_hx_tmp) {
HXLINE( 762)			return false;
            		}
HXLINE( 766)		Bool _hx_tmp4 = hx::IsNull( orientationStyle );
HXDLIN( 766)		if (_hx_tmp4) {
HXLINE( 768)			orientationStyle = (int)1;
            		}
HXLINE( 772)		this->identity();
HXLINE( 774)		HX_VARI( ::Array< Float >,scale) = ::Array_obj< Float >::__new(0);
HXLINE( 775)		Float _hx_tmp5 = (scale[(int)1] = (scale[(int)2] = components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x));
HXDLIN( 775)		scale[(int)0] = _hx_tmp5;
HXLINE( 776)		Float _hx_tmp6 = (scale[(int)5] = (scale[(int)6] = components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y));
HXDLIN( 776)		scale[(int)4] = _hx_tmp6;
HXLINE( 777)		Float _hx_tmp7 = (scale[(int)9] = (scale[(int)10] = components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z));
HXDLIN( 777)		scale[(int)8] = _hx_tmp7;
HXLINE( 779)		Bool _hx_tmp8 = hx::IsNull( orientationStyle );
HXDLIN( 779)		if (_hx_tmp8) {
HXLINE( 809)			HX_VARI( Float,x) = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXLINE( 810)			HX_VARI( Float,y) = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXLINE( 811)			HX_VARI( Float,z) = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXLINE( 812)			HX_VARI( Float,w) = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->w;
HXLINE( 814)			if (hx::IsEq( orientationStyle,(int)0 )) {
HXLINE( 816)				Float _hx_tmp9 = ::Math_obj::sin(((Float)w / (Float)(int)2));
HXDLIN( 816)				hx::MultEq(x,_hx_tmp9);
HXLINE( 817)				Float _hx_tmp10 = ::Math_obj::sin(((Float)w / (Float)(int)2));
HXDLIN( 817)				hx::MultEq(y,_hx_tmp10);
HXLINE( 818)				Float _hx_tmp11 = ::Math_obj::sin(((Float)w / (Float)(int)2));
HXDLIN( 818)				hx::MultEq(z,_hx_tmp11);
HXLINE( 819)				w = ::Math_obj::cos(((Float)w / (Float)(int)2));
            			}
HXLINE( 823)			Float _hx_tmp12 = ((((int)1 - (((int)2 * y) * y)) - (((int)2 * z) * z)) * scale->__get((int)0));
HXDLIN( 823)			this->rawData->set((int)0,_hx_tmp12);
HXLINE( 824)			Float _hx_tmp13 = (((((int)2 * x) * y) + (((int)2 * w) * z)) * scale->__get((int)1));
HXDLIN( 824)			this->rawData->set((int)1,_hx_tmp13);
HXLINE( 825)			Float _hx_tmp14 = (((((int)2 * x) * z) - (((int)2 * w) * y)) * scale->__get((int)2));
HXDLIN( 825)			this->rawData->set((int)2,_hx_tmp14);
HXLINE( 826)			this->rawData->set((int)3,(int)0);
HXLINE( 827)			Float _hx_tmp15 = (((((int)2 * x) * y) - (((int)2 * w) * z)) * scale->__get((int)4));
HXDLIN( 827)			this->rawData->set((int)4,_hx_tmp15);
HXLINE( 828)			Float _hx_tmp16 = ((((int)1 - (((int)2 * x) * x)) - (((int)2 * z) * z)) * scale->__get((int)5));
HXDLIN( 828)			this->rawData->set((int)5,_hx_tmp16);
HXLINE( 829)			Float _hx_tmp17 = (((((int)2 * y) * z) + (((int)2 * w) * x)) * scale->__get((int)6));
HXDLIN( 829)			this->rawData->set((int)6,_hx_tmp17);
HXLINE( 830)			this->rawData->set((int)7,(int)0);
HXLINE( 831)			Float _hx_tmp18 = (((((int)2 * x) * z) + (((int)2 * w) * y)) * scale->__get((int)8));
HXDLIN( 831)			this->rawData->set((int)8,_hx_tmp18);
HXLINE( 832)			Float _hx_tmp19 = (((((int)2 * y) * z) - (((int)2 * w) * x)) * scale->__get((int)9));
HXDLIN( 832)			this->rawData->set((int)9,_hx_tmp19);
HXLINE( 833)			Float _hx_tmp20 = ((((int)1 - (((int)2 * x) * x)) - (((int)2 * y) * y)) * scale->__get((int)10));
HXDLIN( 833)			this->rawData->set((int)10,_hx_tmp20);
HXLINE( 834)			this->rawData->set((int)11,(int)0);
HXLINE( 835)			{
HXLINE( 835)				Float value = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXDLIN( 835)				this->rawData->set((int)12,value);
            			}
HXLINE( 836)			{
HXLINE( 836)				Float value1 = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXDLIN( 836)				this->rawData->set((int)13,value1);
            			}
HXLINE( 837)			{
HXLINE( 837)				Float value2 = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXDLIN( 837)				this->rawData->set((int)14,value2);
            			}
HXLINE( 838)			this->rawData->set((int)15,(int)1);
            		}
            		else {
HXLINE( 779)			if (hx::IsEq( orientationStyle,(int)1 )) {
HXLINE( 783)				HX_VARI( Float,cx) = ::Math_obj::cos(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 784)				HX_VARI( Float,cy) = ::Math_obj::cos(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 785)				HX_VARI( Float,cz) = ::Math_obj::cos(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 786)				HX_VARI( Float,sx) = ::Math_obj::sin(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x);
HXLINE( 787)				HX_VARI( Float,sy) = ::Math_obj::sin(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y);
HXLINE( 788)				HX_VARI( Float,sz) = ::Math_obj::sin(components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z);
HXLINE( 790)				Float _hx_tmp21 = ((cy * cz) * scale->__get((int)0));
HXDLIN( 790)				this->rawData->set((int)0,_hx_tmp21);
HXLINE( 791)				Float _hx_tmp22 = ((cy * sz) * scale->__get((int)1));
HXDLIN( 791)				this->rawData->set((int)1,_hx_tmp22);
HXLINE( 792)				Float _hx_tmp23 = (-(sy) * scale->__get((int)2));
HXDLIN( 792)				this->rawData->set((int)2,_hx_tmp23);
HXLINE( 793)				this->rawData->set((int)3,(int)0);
HXLINE( 794)				Float _hx_tmp24 = ((((sx * sy) * cz) - (cx * sz)) * scale->__get((int)4));
HXDLIN( 794)				this->rawData->set((int)4,_hx_tmp24);
HXLINE( 795)				Float _hx_tmp25 = ((((sx * sy) * sz) + (cx * cz)) * scale->__get((int)5));
HXDLIN( 795)				this->rawData->set((int)5,_hx_tmp25);
HXLINE( 796)				Float _hx_tmp26 = ((sx * cy) * scale->__get((int)6));
HXDLIN( 796)				this->rawData->set((int)6,_hx_tmp26);
HXLINE( 797)				this->rawData->set((int)7,(int)0);
HXLINE( 798)				Float _hx_tmp27 = ((((cx * sy) * cz) + (sx * sz)) * scale->__get((int)8));
HXDLIN( 798)				this->rawData->set((int)8,_hx_tmp27);
HXLINE( 799)				Float _hx_tmp28 = ((((cx * sy) * sz) - (sx * cz)) * scale->__get((int)9));
HXDLIN( 799)				this->rawData->set((int)9,_hx_tmp28);
HXLINE( 800)				Float _hx_tmp29 = ((cx * cy) * scale->__get((int)10));
HXDLIN( 800)				this->rawData->set((int)10,_hx_tmp29);
HXLINE( 801)				this->rawData->set((int)11,(int)0);
HXLINE( 802)				{
HXLINE( 802)					Float value3 = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXDLIN( 802)					this->rawData->set((int)12,value3);
            				}
HXLINE( 803)				{
HXLINE( 803)					Float value4 = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXDLIN( 803)					this->rawData->set((int)13,value4);
            				}
HXLINE( 804)				{
HXLINE( 804)					Float value5 = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXDLIN( 804)					this->rawData->set((int)14,value5);
            				}
HXLINE( 805)				this->rawData->set((int)15,(int)1);
            			}
            			else {
HXLINE( 809)				HX_VARI_NAME( Float,x1,"x") = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXLINE( 810)				HX_VARI_NAME( Float,y1,"y") = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXLINE( 811)				HX_VARI_NAME( Float,z1,"z") = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXLINE( 812)				HX_VARI_NAME( Float,w1,"w") = components->get((int)1).StaticCast<  ::openfl::geom::Vector3D >()->w;
HXLINE( 814)				if (hx::IsEq( orientationStyle,(int)0 )) {
HXLINE( 816)					Float _hx_tmp30 = ::Math_obj::sin(((Float)w1 / (Float)(int)2));
HXDLIN( 816)					hx::MultEq(x1,_hx_tmp30);
HXLINE( 817)					Float _hx_tmp31 = ::Math_obj::sin(((Float)w1 / (Float)(int)2));
HXDLIN( 817)					hx::MultEq(y1,_hx_tmp31);
HXLINE( 818)					Float _hx_tmp32 = ::Math_obj::sin(((Float)w1 / (Float)(int)2));
HXDLIN( 818)					hx::MultEq(z1,_hx_tmp32);
HXLINE( 819)					w1 = ::Math_obj::cos(((Float)w1 / (Float)(int)2));
            				}
HXLINE( 823)				Float _hx_tmp33 = ((((int)1 - (((int)2 * y1) * y1)) - (((int)2 * z1) * z1)) * scale->__get((int)0));
HXDLIN( 823)				this->rawData->set((int)0,_hx_tmp33);
HXLINE( 824)				Float _hx_tmp34 = (((((int)2 * x1) * y1) + (((int)2 * w1) * z1)) * scale->__get((int)1));
HXDLIN( 824)				this->rawData->set((int)1,_hx_tmp34);
HXLINE( 825)				Float _hx_tmp35 = (((((int)2 * x1) * z1) - (((int)2 * w1) * y1)) * scale->__get((int)2));
HXDLIN( 825)				this->rawData->set((int)2,_hx_tmp35);
HXLINE( 826)				this->rawData->set((int)3,(int)0);
HXLINE( 827)				Float _hx_tmp36 = (((((int)2 * x1) * y1) - (((int)2 * w1) * z1)) * scale->__get((int)4));
HXDLIN( 827)				this->rawData->set((int)4,_hx_tmp36);
HXLINE( 828)				Float _hx_tmp37 = ((((int)1 - (((int)2 * x1) * x1)) - (((int)2 * z1) * z1)) * scale->__get((int)5));
HXDLIN( 828)				this->rawData->set((int)5,_hx_tmp37);
HXLINE( 829)				Float _hx_tmp38 = (((((int)2 * y1) * z1) + (((int)2 * w1) * x1)) * scale->__get((int)6));
HXDLIN( 829)				this->rawData->set((int)6,_hx_tmp38);
HXLINE( 830)				this->rawData->set((int)7,(int)0);
HXLINE( 831)				Float _hx_tmp39 = (((((int)2 * x1) * z1) + (((int)2 * w1) * y1)) * scale->__get((int)8));
HXDLIN( 831)				this->rawData->set((int)8,_hx_tmp39);
HXLINE( 832)				Float _hx_tmp40 = (((((int)2 * y1) * z1) - (((int)2 * w1) * x1)) * scale->__get((int)9));
HXDLIN( 832)				this->rawData->set((int)9,_hx_tmp40);
HXLINE( 833)				Float _hx_tmp41 = ((((int)1 - (((int)2 * x1) * x1)) - (((int)2 * y1) * y1)) * scale->__get((int)10));
HXDLIN( 833)				this->rawData->set((int)10,_hx_tmp41);
HXLINE( 834)				this->rawData->set((int)11,(int)0);
HXLINE( 835)				{
HXLINE( 835)					Float value6 = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->x;
HXDLIN( 835)					this->rawData->set((int)12,value6);
            				}
HXLINE( 836)				{
HXLINE( 836)					Float value7 = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->y;
HXDLIN( 836)					this->rawData->set((int)13,value7);
            				}
HXLINE( 837)				{
HXLINE( 837)					Float value8 = components->get((int)0).StaticCast<  ::openfl::geom::Vector3D >()->z;
HXDLIN( 837)					this->rawData->set((int)14,value8);
            				}
HXLINE( 838)				this->rawData->set((int)15,(int)1);
            			}
            		}
HXLINE( 842)		Bool _hx_tmp42 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x == (int)0);
HXDLIN( 842)		if (_hx_tmp42) {
HXLINE( 844)			this->rawData->set((int)0,((Float)1e-15));
            		}
HXLINE( 848)		Bool _hx_tmp43 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
HXDLIN( 848)		if (_hx_tmp43) {
HXLINE( 850)			this->rawData->set((int)5,((Float)1e-15));
            		}
HXLINE( 854)		Bool _hx_tmp44 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->z == (int)0);
HXDLIN( 854)		if (_hx_tmp44) {
HXLINE( 856)			this->rawData->set((int)10,((Float)1e-15));
            		}
HXLINE( 860)		Bool _hx_tmp45;
HXDLIN( 860)		Bool _hx_tmp46;
HXDLIN( 860)		Bool _hx_tmp47 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->x != (int)0);
HXDLIN( 860)		if (_hx_tmp47) {
HXLINE( 860)			_hx_tmp46 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 860)			_hx_tmp46 = true;
            		}
HXDLIN( 860)		if (!(_hx_tmp46)) {
HXLINE( 860)			_hx_tmp45 = (components->get((int)2).StaticCast<  ::openfl::geom::Vector3D >()->y == (int)0);
            		}
            		else {
HXLINE( 860)			_hx_tmp45 = true;
            		}
HXDLIN( 860)		return !(_hx_tmp45);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,recompose,return )

 ::openfl::geom::Vector3D Matrix3D_obj::transformVector( ::openfl::geom::Vector3D v){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","transformVector",0x3f2dcec7,"openfl.geom.Matrix3D.transformVector","openfl/geom/Matrix3D.hx",865,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE( 867)		HX_VARI( Float,x) = v->x;
HXLINE( 868)		HX_VARI( Float,y) = v->y;
HXLINE( 869)		HX_VARI( Float,z) = v->z;
HXLINE( 871)		Float _hx_tmp = (x * this->rawData->get((int)0));
HXDLIN( 871)		Float _hx_tmp1 = (y * this->rawData->get((int)4));
HXDLIN( 871)		Float _hx_tmp2 = (_hx_tmp + _hx_tmp1);
HXDLIN( 871)		Float _hx_tmp3 = (z * this->rawData->get((int)8));
HXDLIN( 871)		Float _hx_tmp4 = ((_hx_tmp2 + _hx_tmp3) + this->rawData->get((int)12));
HXDLIN( 871)		Float _hx_tmp5 = (x * this->rawData->get((int)1));
HXDLIN( 871)		Float _hx_tmp6 = (y * this->rawData->get((int)5));
HXDLIN( 871)		Float _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXDLIN( 871)		Float _hx_tmp8 = (z * this->rawData->get((int)9));
HXDLIN( 871)		Float _hx_tmp9 = ((_hx_tmp7 + _hx_tmp8) + this->rawData->get((int)13));
HXDLIN( 871)		Float _hx_tmp10 = (x * this->rawData->get((int)2));
HXDLIN( 871)		Float _hx_tmp11 = (y * this->rawData->get((int)6));
HXDLIN( 871)		Float _hx_tmp12 = (_hx_tmp10 + _hx_tmp11);
HXDLIN( 871)		Float _hx_tmp13 = (z * this->rawData->get((int)10));
HXDLIN( 871)		Float _hx_tmp14 = ((_hx_tmp12 + _hx_tmp13) + this->rawData->get((int)14));
HXDLIN( 871)		Float _hx_tmp15 = (x * this->rawData->get((int)3));
HXDLIN( 871)		Float _hx_tmp16 = (y * this->rawData->get((int)7));
HXDLIN( 871)		Float _hx_tmp17 = (_hx_tmp15 + _hx_tmp16);
HXDLIN( 871)		Float _hx_tmp18 = (z * this->rawData->get((int)11));
HXDLIN( 871)		Float _hx_tmp19 = ((_hx_tmp17 + _hx_tmp18) + this->rawData->get((int)15));
HXDLIN( 871)		return  ::openfl::geom::Vector3D_obj::__new(_hx_tmp4,_hx_tmp9,_hx_tmp14,_hx_tmp19);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,transformVector,return )

void Matrix3D_obj::transformVectors( ::openfl::_Vector::FloatVector vin, ::openfl::_Vector::FloatVector vout){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","transformVectors",0x08e71fcc,"openfl.geom.Matrix3D.transformVectors","openfl/geom/Matrix3D.hx",876,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vin,"vin")
            	HX_STACK_ARG(vout,"vout")
HXLINE( 878)		HX_VARI( Int,i) = (int)0;
HXLINE( 879)		HX_VAR( Float,x);
HXDLIN( 879)		HX_VAR( Float,y);
HXDLIN( 879)		HX_VAR( Float,z);
HXLINE( 881)		while(true){
HXLINE( 881)			Int _hx_tmp = (i + (int)3);
HXDLIN( 881)			Int _hx_tmp1 = vin->get_length();
HXDLIN( 881)			if (!((_hx_tmp <= _hx_tmp1))) {
HXLINE( 881)				goto _hx_goto_10;
            			}
HXLINE( 883)			x = vin->get(i);
HXLINE( 884)			y = vin->get((i + (int)1));
HXLINE( 885)			z = vin->get((i + (int)2));
HXLINE( 887)			{
HXLINE( 887)				Float _hx_tmp2 = (x * this->rawData->get((int)0));
HXDLIN( 887)				Float _hx_tmp3 = (y * this->rawData->get((int)4));
HXDLIN( 887)				Float _hx_tmp4 = (_hx_tmp2 + _hx_tmp3);
HXDLIN( 887)				Float _hx_tmp5 = (z * this->rawData->get((int)8));
HXDLIN( 887)				Float value = ((_hx_tmp4 + _hx_tmp5) + this->rawData->get((int)12));
HXDLIN( 887)				vout->set(i,value);
            			}
HXLINE( 888)			{
HXLINE( 888)				Float _hx_tmp6 = (x * this->rawData->get((int)1));
HXDLIN( 888)				Float _hx_tmp7 = (y * this->rawData->get((int)5));
HXDLIN( 888)				Float _hx_tmp8 = (_hx_tmp6 + _hx_tmp7);
HXDLIN( 888)				Float _hx_tmp9 = (z * this->rawData->get((int)9));
HXDLIN( 888)				Float value1 = ((_hx_tmp8 + _hx_tmp9) + this->rawData->get((int)13));
HXDLIN( 888)				vout->set((i + (int)1),value1);
            			}
HXLINE( 889)			{
HXLINE( 889)				Float _hx_tmp10 = (x * this->rawData->get((int)2));
HXDLIN( 889)				Float _hx_tmp11 = (y * this->rawData->get((int)6));
HXDLIN( 889)				Float _hx_tmp12 = (_hx_tmp10 + _hx_tmp11);
HXDLIN( 889)				Float _hx_tmp13 = (z * this->rawData->get((int)10));
HXDLIN( 889)				Float value2 = ((_hx_tmp12 + _hx_tmp13) + this->rawData->get((int)14));
HXDLIN( 889)				vout->set((i + (int)2),value2);
            			}
HXLINE( 891)			hx::AddEq(i,(int)3);
            		}
            		_hx_goto_10:;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Matrix3D_obj,transformVectors,(void))

void Matrix3D_obj::transpose(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","transpose",0x1ba989f1,"openfl.geom.Matrix3D.transpose","openfl/geom/Matrix3D.hx",898,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 900)		HX_VARI(  ::openfl::_Vector::FloatVector,oRawData) = ( ( ::openfl::_Vector::FloatVector)(this->rawData->copy()) );
HXLINE( 901)		{
HXLINE( 901)			Float value = oRawData->get((int)4);
HXDLIN( 901)			this->rawData->set((int)1,value);
            		}
HXLINE( 902)		{
HXLINE( 902)			Float value1 = oRawData->get((int)8);
HXDLIN( 902)			this->rawData->set((int)2,value1);
            		}
HXLINE( 903)		{
HXLINE( 903)			Float value2 = oRawData->get((int)12);
HXDLIN( 903)			this->rawData->set((int)3,value2);
            		}
HXLINE( 904)		{
HXLINE( 904)			Float value3 = oRawData->get((int)1);
HXDLIN( 904)			this->rawData->set((int)4,value3);
            		}
HXLINE( 905)		{
HXLINE( 905)			Float value4 = oRawData->get((int)9);
HXDLIN( 905)			this->rawData->set((int)6,value4);
            		}
HXLINE( 906)		{
HXLINE( 906)			Float value5 = oRawData->get((int)13);
HXDLIN( 906)			this->rawData->set((int)7,value5);
            		}
HXLINE( 907)		{
HXLINE( 907)			Float value6 = oRawData->get((int)2);
HXDLIN( 907)			this->rawData->set((int)8,value6);
            		}
HXLINE( 908)		{
HXLINE( 908)			Float value7 = oRawData->get((int)6);
HXDLIN( 908)			this->rawData->set((int)9,value7);
            		}
HXLINE( 909)		{
HXLINE( 909)			Float value8 = oRawData->get((int)14);
HXDLIN( 909)			this->rawData->set((int)11,value8);
            		}
HXLINE( 910)		{
HXLINE( 910)			Float value9 = oRawData->get((int)3);
HXDLIN( 910)			this->rawData->set((int)12,value9);
            		}
HXLINE( 911)		{
HXLINE( 911)			Float value10 = oRawData->get((int)7);
HXDLIN( 911)			this->rawData->set((int)13,value10);
            		}
HXLINE( 912)		{
HXLINE( 912)			Float value11 = oRawData->get((int)11);
HXDLIN( 912)			this->rawData->set((int)14,value11);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,transpose,(void))

Float Matrix3D_obj::get_determinant(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","get_determinant",0x5f71b8a4,"openfl.geom.Matrix3D.get_determinant","openfl/geom/Matrix3D.hx",958,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 958)		Float _hx_tmp = (this->rawData->get((int)0) * this->rawData->get((int)5));
HXDLIN( 958)		Float _hx_tmp1 = (this->rawData->get((int)4) * this->rawData->get((int)1));
HXDLIN( 958)		Float _hx_tmp2 = (_hx_tmp - _hx_tmp1);
HXDLIN( 958)		Float _hx_tmp3 = (this->rawData->get((int)10) * this->rawData->get((int)15));
HXDLIN( 958)		Float _hx_tmp4 = (this->rawData->get((int)14) * this->rawData->get((int)11));
HXDLIN( 958)		Float _hx_tmp5 = (_hx_tmp2 * (_hx_tmp3 - _hx_tmp4));
HXLINE( 959)		Float _hx_tmp6 = (this->rawData->get((int)0) * this->rawData->get((int)9));
HXDLIN( 959)		Float _hx_tmp7 = (this->rawData->get((int)8) * this->rawData->get((int)1));
HXDLIN( 959)		Float _hx_tmp8 = (_hx_tmp6 - _hx_tmp7);
HXDLIN( 959)		Float _hx_tmp9 = (this->rawData->get((int)6) * this->rawData->get((int)15));
HXDLIN( 959)		Float _hx_tmp10 = (this->rawData->get((int)14) * this->rawData->get((int)7));
HXLINE( 958)		Float _hx_tmp11 = (_hx_tmp5 - (_hx_tmp8 * (_hx_tmp9 - _hx_tmp10)));
HXLINE( 960)		Float _hx_tmp12 = (this->rawData->get((int)0) * this->rawData->get((int)13));
HXDLIN( 960)		Float _hx_tmp13 = (this->rawData->get((int)12) * this->rawData->get((int)1));
HXDLIN( 960)		Float _hx_tmp14 = (_hx_tmp12 - _hx_tmp13);
HXDLIN( 960)		Float _hx_tmp15 = (this->rawData->get((int)6) * this->rawData->get((int)11));
HXDLIN( 960)		Float _hx_tmp16 = (this->rawData->get((int)10) * this->rawData->get((int)7));
HXLINE( 958)		Float _hx_tmp17 = (_hx_tmp11 + (_hx_tmp14 * (_hx_tmp15 - _hx_tmp16)));
HXLINE( 961)		Float _hx_tmp18 = (this->rawData->get((int)4) * this->rawData->get((int)9));
HXDLIN( 961)		Float _hx_tmp19 = (this->rawData->get((int)8) * this->rawData->get((int)5));
HXDLIN( 961)		Float _hx_tmp20 = (_hx_tmp18 - _hx_tmp19);
HXDLIN( 961)		Float _hx_tmp21 = (this->rawData->get((int)2) * this->rawData->get((int)15));
HXDLIN( 961)		Float _hx_tmp22 = (this->rawData->get((int)14) * this->rawData->get((int)3));
HXLINE( 958)		Float _hx_tmp23 = (_hx_tmp17 + (_hx_tmp20 * (_hx_tmp21 - _hx_tmp22)));
HXLINE( 962)		Float _hx_tmp24 = (this->rawData->get((int)4) * this->rawData->get((int)13));
HXDLIN( 962)		Float _hx_tmp25 = (this->rawData->get((int)12) * this->rawData->get((int)5));
HXDLIN( 962)		Float _hx_tmp26 = (_hx_tmp24 - _hx_tmp25);
HXDLIN( 962)		Float _hx_tmp27 = (this->rawData->get((int)2) * this->rawData->get((int)11));
HXDLIN( 962)		Float _hx_tmp28 = (this->rawData->get((int)10) * this->rawData->get((int)3));
HXLINE( 958)		Float _hx_tmp29 = (_hx_tmp23 - (_hx_tmp26 * (_hx_tmp27 - _hx_tmp28)));
HXLINE( 963)		Float _hx_tmp30 = (this->rawData->get((int)8) * this->rawData->get((int)13));
HXDLIN( 963)		Float _hx_tmp31 = (this->rawData->get((int)12) * this->rawData->get((int)9));
HXDLIN( 963)		Float _hx_tmp32 = (_hx_tmp30 - _hx_tmp31);
HXDLIN( 963)		Float _hx_tmp33 = (this->rawData->get((int)2) * this->rawData->get((int)7));
HXDLIN( 963)		Float _hx_tmp34 = (this->rawData->get((int)6) * this->rawData->get((int)3));
HXLINE( 958)		return (_hx_tmp29 + (_hx_tmp32 * (_hx_tmp33 - _hx_tmp34)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_determinant,return )

 ::openfl::geom::Vector3D Matrix3D_obj::get_position(){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","get_position",0x1555563a,"openfl.geom.Matrix3D.get_position","openfl/geom/Matrix3D.hx",970,0x3acce238)
            	HX_STACK_THIS(this)
HXLINE( 970)		return  ::openfl::geom::Vector3D_obj::__new(this->rawData->get((int)12),this->rawData->get((int)13),this->rawData->get((int)14),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Matrix3D_obj,get_position,return )

 ::openfl::geom::Vector3D Matrix3D_obj::set_position( ::openfl::geom::Vector3D val){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","set_position",0x2a4e79ae,"openfl.geom.Matrix3D.set_position","openfl/geom/Matrix3D.hx",975,0x3acce238)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(val,"val")
HXLINE( 977)		{
HXLINE( 977)			Float value = val->x;
HXDLIN( 977)			this->rawData->set((int)12,value);
            		}
HXLINE( 978)		{
HXLINE( 978)			Float value1 = val->y;
HXDLIN( 978)			this->rawData->set((int)13,value1);
            		}
HXLINE( 979)		{
HXLINE( 979)			Float value2 = val->z;
HXDLIN( 979)			this->rawData->set((int)14,value2);
            		}
HXLINE( 980)		return val;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Matrix3D_obj,set_position,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::create2D(Float x,Float y,hx::Null< Float >  __o_scale,hx::Null< Float >  __o_rotation){
Float scale = __o_scale.Default(1);
Float rotation = __o_rotation.Default(0);
            	HX_STACK_FRAME("openfl.geom.Matrix3D","create2D",0x4623e756,"openfl.geom.Matrix3D.create2D","openfl/geom/Matrix3D.hx",357,0x3acce238)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(scale,"scale")
            	HX_STACK_ARG(rotation,"rotation")
HXLINE( 359)		HX_VARI( Float,theta) = ((Float)(rotation * ::Math_obj::PI) / (Float)((Float)180.0));
HXLINE( 360)		HX_VARI( Float,c) = ::Math_obj::cos(theta);
HXLINE( 361)		HX_VARI( Float,s) = ::Math_obj::sin(theta);
HXLINE( 363)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::__new(16)->init(0,(c * scale))->init(1,(-(s) * scale))->init(2,(int)0)->init(3,(int)0)->init(4,(s * scale))->init(5,(c * scale))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,x)->init(13,y)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 363)		Int length = null();
HXDLIN( 363)		Bool fixed = null();
HXDLIN( 363)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXDLIN( 363)		{
HXLINE( 363)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 363)			HX_VARI( Int,_g) = a->length;
HXDLIN( 363)			while((_g1 < _g)){
HXLINE( 363)				HX_VARI( Int,i) = _g1++;
HXDLIN( 363)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 363)		return  ::openfl::geom::Matrix3D_obj::__new(vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,create2D,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createABCD(Float a,Float b,Float c,Float d,Float tx,Float ty){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","createABCD",0x0e55d246,"openfl.geom.Matrix3D.createABCD","openfl/geom/Matrix3D.hx",370,0x3acce238)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(c,"c")
            	HX_STACK_ARG(d,"d")
            	HX_STACK_ARG(tx,"tx")
            	HX_STACK_ARG(ty,"ty")
HXLINE( 370)		HX_VARI_NAME( ::Array< Float >,a1,"a") = ::Array_obj< Float >::__new(16)->init(0,a)->init(1,b)->init(2,(int)0)->init(3,(int)0)->init(4,c)->init(5,d)->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(int)1)->init(11,(int)0)->init(12,tx)->init(13,ty)->init(14,(int)0)->init(15,(int)1);
HXDLIN( 370)		Int length = null();
HXDLIN( 370)		Bool fixed = null();
HXDLIN( 370)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXDLIN( 370)		{
HXLINE( 370)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 370)			HX_VARI( Int,_g) = a1->length;
HXDLIN( 370)			while((_g1 < _g)){
HXLINE( 370)				HX_VARI( Int,i) = _g1++;
HXDLIN( 370)				vector->set(i,a1->__get(i));
            			}
            		}
HXDLIN( 370)		return  ::openfl::geom::Matrix3D_obj::__new(vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createABCD,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::createOrtho(Float x0,Float x1,Float y0,Float y1,Float zNear,Float zFar){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","createOrtho",0xac3dd614,"openfl.geom.Matrix3D.createOrtho","openfl/geom/Matrix3D.hx",375,0x3acce238)
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(zNear,"zNear")
            	HX_STACK_ARG(zFar,"zFar")
HXLINE( 377)		HX_VARI( Float,sx) = ((Float)((Float)1.0) / (Float)(x1 - x0));
HXLINE( 378)		HX_VARI( Float,sy) = ((Float)((Float)1.0) / (Float)(y1 - y0));
HXLINE( 379)		HX_VARI( Float,sz) = ((Float)((Float)1.0) / (Float)(zFar - zNear));
HXLINE( 381)		HX_VARI( ::Array< Float >,a) = ::Array_obj< Float >::__new(16)->init(0,(((Float)2.0) * sx))->init(1,(int)0)->init(2,(int)0)->init(3,(int)0)->init(4,(int)0)->init(5,(((Float)2.0) * sy))->init(6,(int)0)->init(7,(int)0)->init(8,(int)0)->init(9,(int)0)->init(10,(((Float)-2.) * sz))->init(11,(int)0)->init(12,(-((x0 + x1)) * sx))->init(13,(-((y0 + y1)) * sy))->init(14,(-((zNear + zFar)) * sz))->init(15,(int)1);
HXDLIN( 381)		Int length = null();
HXDLIN( 381)		Bool fixed = null();
HXDLIN( 381)		HX_VARI(  ::openfl::_Vector::FloatVector,vector) =  ::openfl::_Vector::FloatVector_obj::__new(length,fixed,null());
HXDLIN( 381)		{
HXLINE( 381)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 381)			HX_VARI( Int,_g) = a->length;
HXDLIN( 381)			while((_g1 < _g)){
HXLINE( 381)				HX_VARI( Int,i) = _g1++;
HXDLIN( 381)				vector->set(i,a->__get(i));
            			}
            		}
HXDLIN( 381)		return  ::openfl::geom::Matrix3D_obj::__new(vector);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Matrix3D_obj,createOrtho,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::interpolate( ::openfl::geom::Matrix3D thisMat, ::openfl::geom::Matrix3D toMat,Float percent){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","interpolate",0x6cc85c39,"openfl.geom.Matrix3D.interpolate","openfl/geom/Matrix3D.hx",528,0x3acce238)
            	HX_STACK_ARG(thisMat,"thisMat")
            	HX_STACK_ARG(toMat,"toMat")
            	HX_STACK_ARG(percent,"percent")
HXLINE( 530)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__new(null());
HXLINE( 532)		{
HXLINE( 532)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 532)			while((_g < (int)16)){
HXLINE( 532)				HX_VARI( Int,i) = _g++;
HXLINE( 534)				{
HXLINE( 534)					Float _hx_tmp = (toMat->rawData->get(i) - thisMat->rawData->get(i));
HXDLIN( 534)					Float value = (thisMat->rawData->get(i) + (_hx_tmp * percent));
HXDLIN( 534)					m->rawData->set(i,value);
            				}
            			}
            		}
HXLINE( 538)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Matrix3D_obj,interpolate,return )

 ::openfl::geom::Matrix3D Matrix3D_obj::_hx___getAxisRotation(Float x,Float y,Float z,Float degrees){
            	HX_STACK_FRAME("openfl.geom.Matrix3D","__getAxisRotation",0xf649170d,"openfl.geom.Matrix3D.__getAxisRotation","openfl/geom/Matrix3D.hx",917,0x3acce238)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(z,"z")
            	HX_STACK_ARG(degrees,"degrees")
HXLINE( 919)		HX_VARI(  ::openfl::geom::Matrix3D,m) =  ::openfl::geom::Matrix3D_obj::__new(null());
HXLINE( 921)		HX_VARI(  ::openfl::geom::Vector3D,a1) =  ::openfl::geom::Vector3D_obj::__new(x,y,z,null());
HXLINE( 922)		HX_VARI( Float,rad) = (-(degrees) * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE( 923)		HX_VARI( Float,c) = ::Math_obj::cos(rad);
HXLINE( 924)		HX_VARI( Float,s) = ::Math_obj::sin(rad);
HXLINE( 925)		HX_VARI( Float,t) = (((Float)1.0) - c);
HXLINE( 927)		{
HXLINE( 927)			Float _hx_tmp = ((a1->x * a1->x) * t);
HXDLIN( 927)			m->rawData->set((int)0,(c + _hx_tmp));
            		}
HXLINE( 928)		{
HXLINE( 928)			Float _hx_tmp1 = ((a1->y * a1->y) * t);
HXDLIN( 928)			m->rawData->set((int)5,(c + _hx_tmp1));
            		}
HXLINE( 929)		{
HXLINE( 929)			Float _hx_tmp2 = ((a1->z * a1->z) * t);
HXDLIN( 929)			m->rawData->set((int)10,(c + _hx_tmp2));
            		}
HXLINE( 931)		HX_VARI( Float,tmp1) = ((a1->x * a1->y) * t);
HXLINE( 932)		HX_VARI( Float,tmp2) = (a1->z * s);
HXLINE( 933)		m->rawData->set((int)4,(tmp1 + tmp2));
HXLINE( 934)		m->rawData->set((int)1,(tmp1 - tmp2));
HXLINE( 935)		tmp1 = ((a1->x * a1->z) * t);
HXLINE( 936)		tmp2 = (a1->y * s);
HXLINE( 937)		m->rawData->set((int)8,(tmp1 - tmp2));
HXLINE( 938)		m->rawData->set((int)2,(tmp1 + tmp2));
HXLINE( 939)		tmp1 = ((a1->y * a1->z) * t);
HXLINE( 940)		tmp2 = (a1->x * s);
HXLINE( 941)		m->rawData->set((int)9,(tmp1 + tmp2));
HXLINE( 942)		m->rawData->set((int)6,(tmp1 - tmp2));
HXLINE( 944)		return m;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Matrix3D_obj,_hx___getAxisRotation,return )


Matrix3D_obj::Matrix3D_obj()
{
}

void Matrix3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Matrix3D);
	HX_MARK_MEMBER_NAME(rawData,"rawData");
	HX_MARK_END_CLASS();
}

void Matrix3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(rawData,"rawData");
}

hx::Val Matrix3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn()); }
		if (HX_FIELD_EQ(inName,"invert") ) { return hx::Val( invert_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { return hx::Val( rawData); }
		if (HX_FIELD_EQ(inName,"pointAt") ) { return hx::Val( pointAt_dyn()); }
		if (HX_FIELD_EQ(inName,"prepend") ) { return hx::Val( prepend_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_position()); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"identity") ) { return hx::Val( identity_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"copyRowTo") ) { return hx::Val( copyRowTo_dyn()); }
		if (HX_FIELD_EQ(inName,"decompose") ) { return hx::Val( decompose_dyn()); }
		if (HX_FIELD_EQ(inName,"recompose") ) { return hx::Val( recompose_dyn()); }
		if (HX_FIELD_EQ(inName,"transpose") ) { return hx::Val( transpose_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"determinant") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_determinant()); }
		if (HX_FIELD_EQ(inName,"appendScale") ) { return hx::Val( appendScale_dyn()); }
		if (HX_FIELD_EQ(inName,"copyRowFrom") ) { return hx::Val( copyRowFrom_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"copyColumnTo") ) { return hx::Val( copyColumnTo_dyn()); }
		if (HX_FIELD_EQ(inName,"prependScale") ) { return hx::Val( prependScale_dyn()); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"copyRawDataTo") ) { return hx::Val( copyRawDataTo_dyn()); }
		if (HX_FIELD_EQ(inName,"interpolateTo") ) { return hx::Val( interpolateTo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"appendRotation") ) { return hx::Val( appendRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"copyColumnFrom") ) { return hx::Val( copyColumnFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"copyToMatrix3D") ) { return hx::Val( copyToMatrix3D_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"copyRawDataFrom") ) { return hx::Val( copyRawDataFrom_dyn()); }
		if (HX_FIELD_EQ(inName,"prependRotation") ) { return hx::Val( prependRotation_dyn()); }
		if (HX_FIELD_EQ(inName,"transformVector") ) { return hx::Val( transformVector_dyn()); }
		if (HX_FIELD_EQ(inName,"get_determinant") ) { return hx::Val( get_determinant_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"transformVectors") ) { return hx::Val( transformVectors_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"appendTranslation") ) { return hx::Val( appendTranslation_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"prependTranslation") ) { return hx::Val( prependTranslation_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"deltaTransformVector") ) { return hx::Val( deltaTransformVector_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Matrix3D_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"create2D") ) { outValue = create2D_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"createABCD") ) { outValue = createABCD_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createOrtho") ) { outValue = createOrtho_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"interpolate") ) { outValue = interpolate_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__getAxisRotation") ) { outValue = _hx___getAxisRotation_dyn(); return true; }
	}
	return false;
}

hx::Val Matrix3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"rawData") ) { rawData=inValue.Cast<  ::openfl::_Vector::FloatVector >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Matrix3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("determinant","\x95","\x5d","\x15","\x32"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Matrix3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_Vector::FloatVector*/ ,(int)offsetof(Matrix3D_obj,rawData),HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Matrix3D_obj_sStaticStorageInfo = 0;
#endif

static ::String Matrix3D_obj_sMemberFields[] = {
	HX_HCSTRING("rawData","\x32","\x6c","\x18","\xff"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("appendRotation","\x38","\x45","\xe8","\xcb"),
	HX_HCSTRING("appendScale","\x50","\x66","\x45","\xb5"),
	HX_HCSTRING("appendTranslation","\x37","\xe1","\x3d","\xd6"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("copyColumnFrom","\x75","\x97","\xb5","\x3a"),
	HX_HCSTRING("copyColumnTo","\xc6","\x2e","\xf6","\xf6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("copyRawDataFrom","\x07","\x7d","\xbd","\x2c"),
	HX_HCSTRING("copyRawDataTo","\xd8","\x2b","\xf7","\xa8"),
	HX_HCSTRING("copyRowFrom","\x6f","\x45","\x8b","\xef"),
	HX_HCSTRING("copyRowTo","\x40","\x8a","\x62","\x73"),
	HX_HCSTRING("copyToMatrix3D","\xe2","\x1d","\x1f","\x04"),
	HX_HCSTRING("decompose","\xb1","\xc3","\xa7","\x7a"),
	HX_HCSTRING("deltaTransformVector","\x37","\x02","\x9c","\xc2"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("interpolateTo","\x9c","\x90","\x22","\x71"),
	HX_HCSTRING("invert","\x16","\xe7","\xd8","\x9f"),
	HX_HCSTRING("pointAt","\x63","\xa1","\x21","\x51"),
	HX_HCSTRING("prepend","\x0e","\x97","\xe0","\x37"),
	HX_HCSTRING("prependRotation","\x6c","\x4e","\x3b","\xe8"),
	HX_HCSTRING("prependScale","\x9c","\x54","\x97","\xc4"),
	HX_HCSTRING("prependTranslation","\x83","\x90","\x15","\x05"),
	HX_HCSTRING("recompose","\xbf","\x81","\xdb","\x03"),
	HX_HCSTRING("transformVector","\x4f","\x2b","\xb3","\xd2"),
	HX_HCSTRING("transformVectors","\x44","\xba","\x12","\x8a"),
	HX_HCSTRING("transpose","\x79","\x50","\x2f","\x4c"),
	HX_HCSTRING("get_determinant","\x2c","\x15","\xf7","\xf2"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	::String(null()) };

static void Matrix3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Matrix3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Matrix3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Matrix3D_obj::__mClass,"__mClass");
};

#endif

hx::Class Matrix3D_obj::__mClass;

static ::String Matrix3D_obj_sStaticFields[] = {
	HX_HCSTRING("create2D","\xce","\x49","\xf4","\x2b"),
	HX_HCSTRING("createABCD","\xbe","\xc2","\xdd","\x52"),
	HX_HCSTRING("createOrtho","\x9c","\x4e","\xa8","\x5e"),
	HX_HCSTRING("interpolate","\xc1","\xd4","\x32","\x1f"),
	HX_HCSTRING("__getAxisRotation","\x95","\xa5","\x44","\x7b"),
	::String(null())
};

void Matrix3D_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.geom.Matrix3D","\xe6","\x93","\x2e","\x3d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Matrix3D_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Matrix3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Matrix3D_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Matrix3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Matrix3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Matrix3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Matrix3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Matrix3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace geom
