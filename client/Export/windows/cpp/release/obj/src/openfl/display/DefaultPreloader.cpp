// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DefaultPreloader
#include <openfl/display/DefaultPreloader.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_IPreloader
#include <openfl/display/IPreloader.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

namespace openfl{
namespace display{

void DefaultPreloader_obj::__construct(){
            	HX_STACK_FRAME("openfl.display.DefaultPreloader","new",0xd9ecb051,"openfl.display.DefaultPreloader.new","openfl/display/Preloader.hx",162,0xc399db74)
            	HX_STACK_THIS(this)
HXLINE( 164)		super::__construct();
HXLINE( 166)		HX_VARI( Int,backgroundColor) = this->getBackgroundColor();
HXLINE( 170)		HX_VARI( Float,perceivedLuminosity) = (((((Float)0.299) * ((int)((int)backgroundColor >> (int)(int)16) & (int)(int)255)) + (((Float)0.587) * ((int)((int)backgroundColor >> (int)(int)8) & (int)(int)255))) + (((Float)0.114) * ((int)backgroundColor & (int)(int)255)));
HXLINE( 171)		HX_VARI( Int,color) = (int)0;
HXLINE( 173)		if ((perceivedLuminosity < (int)70)) {
HXLINE( 175)			color = (int)16777215;
            		}
HXLINE( 181)		Float _hx_tmp = this->getHeight();
HXDLIN( 181)		HX_VARI( Float,y) = (((Float)_hx_tmp / (Float)(int)2) - ((Float)3.5));
HXLINE( 182)		Float _hx_tmp1 = this->getWidth();
HXDLIN( 182)		HX_VARI( Float,width) = (_hx_tmp1 - (int)60);
HXLINE( 186)		this->outline =  ::openfl::display::Sprite_obj::__new();
HXLINE( 187)		this->outline->get_graphics()->beginFill(color,((Float)0.07));
HXLINE( 188)		this->outline->get_graphics()->drawRect((int)0,(int)0,width,(int)7);
HXLINE( 189)		this->outline->set_x((int)30);
HXLINE( 190)		this->outline->set_y(y);
HXLINE( 191)		this->outline->set_alpha((int)0);
HXLINE( 192)		this->addChild(this->outline);
HXLINE( 194)		this->progress =  ::openfl::display::Sprite_obj::__new();
HXLINE( 195)		this->progress->get_graphics()->beginFill(color,((Float)0.35));
HXLINE( 196)		 ::openfl::display::Graphics _hx_tmp2 = this->progress->get_graphics();
HXDLIN( 196)		_hx_tmp2->drawRect((int)0,(int)0,(width - (int)4),(int)3);
HXLINE( 197)		this->progress->set_x((int)32);
HXLINE( 198)		this->progress->set_y((y + (int)2));
HXLINE( 199)		this->progress->set_scaleX((int)0);
HXLINE( 200)		this->progress->set_alpha((int)0);
HXLINE( 201)		this->addChild(this->progress);
HXLINE( 203)		Int _hx_tmp3 = ::openfl::Lib_obj::getTimer();
HXDLIN( 203)		this->startAnimation = (_hx_tmp3 + (int)100);
HXLINE( 204)		this->endAnimation = (this->startAnimation + (int)1000);
            	}

Dynamic DefaultPreloader_obj::__CreateEmpty() { return new DefaultPreloader_obj; }

hx::ObjectPtr< DefaultPreloader_obj > DefaultPreloader_obj::__new()
{
	hx::ObjectPtr< DefaultPreloader_obj > _hx_result = new DefaultPreloader_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DefaultPreloader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultPreloader_obj > _hx_result = new DefaultPreloader_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::openfl::display::IPreloader_obj _hx_openfl_display_DefaultPreloader__hx_openfl_display_IPreloader= {
	( void (hx::Object::*)())&::openfl::display::DefaultPreloader_obj::onInit,
	( void (hx::Object::*)())&::openfl::display::DefaultPreloader_obj::onLoaded,
	( void (hx::Object::*)(Int,Int))&::openfl::display::DefaultPreloader_obj::onUpdate,
};

void *DefaultPreloader_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x882ab29f: return &_hx_openfl_display_DefaultPreloader__hx_openfl_display_IPreloader;
	}
	return super::_hx_getInterface(inHash);
}

Int DefaultPreloader_obj::getBackgroundColor(){
            	HX_STACK_FRAME("openfl.display.DefaultPreloader","getBackgroundColor",0xe99da5ce,"openfl.display.DefaultPreloader.getBackgroundColor","openfl/display/Preloader.hx",211,0xc399db74)
            	HX_STACK_THIS(this)
HXLINE( 211)		return ::openfl::Lib_obj::current->stage->window->config->__Field(HX_("background",ee,93,1d,26),hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultPreloader_obj,getBackgroundColor,return )

Float DefaultPreloader_obj::getHeight(){
            	HX_STACK_FRAME("openfl.display.DefaultPreloader","getHeight",0xf2617bce,"openfl.display.DefaultPreloader.getHeight","openfl/display/Preloader.hx",216,0xc399db74)
            	HX_STACK_THIS(this)
HXLINE( 218)		HX_VARI(  ::Dynamic,height) = ::openfl::Lib_obj::current->stage->window->config->__Field(HX_("height",e7,07,4c,02),hx::paccDynamic);
HXLINE( 220)		if (hx::IsGreater( height,(int)0 )) {
HXLINE( 222)			return height;
            		}
            		else {
HXLINE( 226)			return ::openfl::Lib_obj::current->stage->stageHeight;
            		}
HXLINE( 220)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultPreloader_obj,getHeight,return )

Float DefaultPreloader_obj::getWidth(){
            	HX_STACK_FRAME("openfl.display.DefaultPreloader","getWidth",0x7b1a7bff,"openfl.display.DefaultPreloader.getWidth","openfl/display/Preloader.hx",233,0xc399db74)
            	HX_STACK_THIS(this)
HXLINE( 235)		HX_VARI(  ::Dynamic,width) = ::openfl::Lib_obj::current->stage->window->config->__Field(HX_("width",06,b6,62,ca),hx::paccDynamic);
HXLINE( 237)		if (hx::IsGreater( width,(int)0 )) {
HXLINE( 239)			return width;
            		}
            		else {
HXLINE( 243)			return ::openfl::Lib_obj::current->stage->stageWidth;
            		}
HXLINE( 237)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultPreloader_obj,getWidth,return )

void DefaultPreloader_obj::onInit(){
            	HX_STACK_FRAME("openfl.display.DefaultPreloader","onInit",0x238e307e,"openfl.display.DefaultPreloader.onInit","openfl/display/Preloader.hx",252,0xc399db74)
            	HX_STACK_THIS(this)
HXLINE( 252)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultPreloader_obj,onInit,(void))

void DefaultPreloader_obj::onLoaded(){
            	HX_STACK_FRAME("openfl.display.DefaultPreloader","onLoaded",0x88fcf4f3,"openfl.display.DefaultPreloader.onLoaded","openfl/display/Preloader.hx",257,0xc399db74)
            	HX_STACK_THIS(this)
HXLINE( 259)		this->removeEventListener(HX_("enterFrame",f5,03,50,02),this->this_onEnterFrame_dyn(),null());
HXLINE( 260)		this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("complete",b9,00,c8,7f),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultPreloader_obj,onLoaded,(void))

void DefaultPreloader_obj::onUpdate(Int bytesLoaded,Int bytesTotal){
            	HX_STACK_FRAME("openfl.display.DefaultPreloader","onUpdate",0xb79332f7,"openfl.display.DefaultPreloader.onUpdate","openfl/display/Preloader.hx",265,0xc399db74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytesLoaded,"bytesLoaded")
            	HX_STACK_ARG(bytesTotal,"bytesTotal")
HXLINE( 267)		HX_VARI( Float,percentLoaded) = ((Float)bytesLoaded / (Float)bytesTotal);
HXLINE( 269)		Bool _hx_tmp = (percentLoaded > (int)1);
HXDLIN( 269)		if (_hx_tmp) {
HXLINE( 271)			percentLoaded = (int)1;
            		}
HXLINE( 275)		this->progress->set_scaleX(percentLoaded);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DefaultPreloader_obj,onUpdate,(void))

void DefaultPreloader_obj::this_onEnterFrame( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.display.DefaultPreloader","this_onEnterFrame",0x72c19366,"openfl.display.DefaultPreloader.this_onEnterFrame","openfl/display/Preloader.hx",287,0xc399db74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 289)		Int _hx_tmp = ::openfl::Lib_obj::getTimer();
HXLINE( 292)		HX_VARI( Float,percent) = ((Float)(_hx_tmp - this->startAnimation) / (Float)(this->endAnimation - this->startAnimation));
HXLINE( 294)		Bool _hx_tmp1 = (percent < (int)0);
HXDLIN( 294)		if (_hx_tmp1) {
HXLINE( 294)			percent = (int)0;
            		}
HXLINE( 295)		Bool _hx_tmp2 = (percent > (int)1);
HXDLIN( 295)		if (_hx_tmp2) {
HXLINE( 295)			percent = (int)1;
            		}
HXLINE( 297)		this->outline->set_alpha(percent);
HXLINE( 298)		this->progress->set_alpha(percent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DefaultPreloader_obj,this_onEnterFrame,(void))


DefaultPreloader_obj::DefaultPreloader_obj()
{
}

void DefaultPreloader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DefaultPreloader);
	HX_MARK_MEMBER_NAME(endAnimation,"endAnimation");
	HX_MARK_MEMBER_NAME(outline,"outline");
	HX_MARK_MEMBER_NAME(progress,"progress");
	HX_MARK_MEMBER_NAME(startAnimation,"startAnimation");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DefaultPreloader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(endAnimation,"endAnimation");
	HX_VISIT_MEMBER_NAME(outline,"outline");
	HX_VISIT_MEMBER_NAME(progress,"progress");
	HX_VISIT_MEMBER_NAME(startAnimation,"startAnimation");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DefaultPreloader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"onInit") ) { return hx::Val( onInit_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outline") ) { return hx::Val( outline); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"progress") ) { return hx::Val( progress); }
		if (HX_FIELD_EQ(inName,"getWidth") ) { return hx::Val( getWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"onLoaded") ) { return hx::Val( onLoaded_dyn()); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getHeight") ) { return hx::Val( getHeight_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endAnimation") ) { return hx::Val( endAnimation); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"startAnimation") ) { return hx::Val( startAnimation); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"this_onEnterFrame") ) { return hx::Val( this_onEnterFrame_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getBackgroundColor") ) { return hx::Val( getBackgroundColor_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DefaultPreloader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"outline") ) { outline=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"progress") ) { progress=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"endAnimation") ) { endAnimation=inValue.Cast< Int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"startAnimation") ) { startAnimation=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DefaultPreloader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("endAnimation","\xa9","\xf7","\x36","\x5a"));
	outFields->push(HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1"));
	outFields->push(HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"));
	outFields->push(HX_HCSTRING("startAnimation","\x42","\xbe","\x6f","\x6a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DefaultPreloader_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(DefaultPreloader_obj,endAnimation),HX_HCSTRING("endAnimation","\xa9","\xf7","\x36","\x5a")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(DefaultPreloader_obj,outline),HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(DefaultPreloader_obj,progress),HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86")},
	{hx::fsInt,(int)offsetof(DefaultPreloader_obj,startAnimation),HX_HCSTRING("startAnimation","\x42","\xbe","\x6f","\x6a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DefaultPreloader_obj_sStaticStorageInfo = 0;
#endif

static ::String DefaultPreloader_obj_sMemberFields[] = {
	HX_HCSTRING("endAnimation","\xa9","\xf7","\x36","\x5a"),
	HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1"),
	HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"),
	HX_HCSTRING("startAnimation","\x42","\xbe","\x6f","\x6a"),
	HX_HCSTRING("getBackgroundColor","\x9f","\xee","\x0c","\xc0"),
	HX_HCSTRING("getHeight","\x1d","\x91","\xa2","\x7e"),
	HX_HCSTRING("getWidth","\x90","\xc5","\x39","\x2a"),
	HX_HCSTRING("onInit","\xcf","\x43","\x45","\xe8"),
	HX_HCSTRING("onLoaded","\x84","\x3e","\x1c","\x38"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	HX_HCSTRING("this_onEnterFrame","\xb5","\x0f","\x1f","\x8e"),
	::String(null()) };

static void DefaultPreloader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DefaultPreloader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DefaultPreloader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DefaultPreloader_obj::__mClass,"__mClass");
};

#endif

hx::Class DefaultPreloader_obj::__mClass;

void DefaultPreloader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DefaultPreloader","\xdf","\x33","\x40","\x45");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DefaultPreloader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DefaultPreloader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DefaultPreloader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DefaultPreloader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultPreloader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultPreloader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
