// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_IOError
#include <openfl/errors/IOError.h>
#endif

namespace openfl{
namespace errors{

void IOError_obj::__construct(::String __o_message){
::String message = __o_message.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACK_FRAME("openfl.errors.IOError","new",0xdfaba8cf,"openfl.errors.IOError.new","openfl/errors/IOError.hx",7,0x640bffa1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(message,"message")
HXLINE(   9)		super::__construct(message,null());
HXLINE(  11)		this->name = HX_("IOError",02,9a,27,78);
            	}

Dynamic IOError_obj::__CreateEmpty() { return new IOError_obj; }

hx::ObjectPtr< IOError_obj > IOError_obj::__new(::String __o_message)
{
	hx::ObjectPtr< IOError_obj > _hx_result = new IOError_obj();
	_hx_result->__construct(__o_message);
	return _hx_result;
}

Dynamic IOError_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< IOError_obj > _hx_result = new IOError_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}


IOError_obj::IOError_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *IOError_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *IOError_obj_sStaticStorageInfo = 0;
#endif

static void IOError_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(IOError_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void IOError_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(IOError_obj::__mClass,"__mClass");
};

#endif

hx::Class IOError_obj::__mClass;

void IOError_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.errors.IOError","\x5d","\x95","\xbd","\x5d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = IOError_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< IOError_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = IOError_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IOError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IOError_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace errors
