// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif

static const ::String _hx_array_data_0[] = {
	HX_("type",ba,f2,08,4d),HX_("bubbles",67,bb,56,61),HX_("cancelable",14,a0,79,c4),HX_("charCode",23,5f,24,9c),HX_("keyCode",6c,22,9e,9b),HX_("keyLocation",f4,ea,6a,2d),HX_("ctrlKey",b4,35,7d,61),HX_("altKey",f6,a7,ca,44),HX_("shiftKey",3d,92,9f,99),
};
namespace openfl{
namespace events{

void KeyboardEvent_obj::__construct(::String type,hx::Null< Bool >  __o_bubbles,hx::Null< Bool >  __o_cancelable,hx::Null< Int >  __o_charCodeValue,hx::Null< Int >  __o_keyCodeValue, ::Dynamic keyLocationValue,hx::Null< Bool >  __o_ctrlKeyValue,hx::Null< Bool >  __o_altKeyValue,hx::Null< Bool >  __o_shiftKeyValue,hx::Null< Bool >  __o_controlKeyValue,hx::Null< Bool >  __o_commandKeyValue){
Bool bubbles = __o_bubbles.Default(false);
Bool cancelable = __o_cancelable.Default(false);
Int charCodeValue = __o_charCodeValue.Default(0);
Int keyCodeValue = __o_keyCodeValue.Default(0);
Bool ctrlKeyValue = __o_ctrlKeyValue.Default(false);
Bool altKeyValue = __o_altKeyValue.Default(false);
Bool shiftKeyValue = __o_shiftKeyValue.Default(false);
Bool controlKeyValue = __o_controlKeyValue.Default(false);
Bool commandKeyValue = __o_commandKeyValue.Default(false);
            	HX_STACK_FRAME("openfl.events.KeyboardEvent","new",0xa9982e4e,"openfl.events.KeyboardEvent.new","openfl/events/KeyboardEvent.hx",23,0xce5f4702)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(bubbles,"bubbles")
            	HX_STACK_ARG(cancelable,"cancelable")
            	HX_STACK_ARG(charCodeValue,"charCodeValue")
            	HX_STACK_ARG(keyCodeValue,"keyCodeValue")
            	HX_STACK_ARG(keyLocationValue,"keyLocationValue")
            	HX_STACK_ARG(ctrlKeyValue,"ctrlKeyValue")
            	HX_STACK_ARG(altKeyValue,"altKeyValue")
            	HX_STACK_ARG(shiftKeyValue,"shiftKeyValue")
            	HX_STACK_ARG(controlKeyValue,"controlKeyValue")
            	HX_STACK_ARG(commandKeyValue,"commandKeyValue")
HXLINE(  25)		super::__construct(type,bubbles,cancelable);
HXLINE(  27)		this->charCode = charCodeValue;
HXLINE(  28)		this->keyCode = keyCodeValue;
HXLINE(  29)		Int _hx_tmp;
HXDLIN(  29)		Bool _hx_tmp1 = hx::IsNotNull( keyLocationValue );
HXDLIN(  29)		if (_hx_tmp1) {
HXLINE(  29)			_hx_tmp = keyLocationValue;
            		}
            		else {
HXLINE(  29)			_hx_tmp = (int)0;
            		}
HXDLIN(  29)		this->keyLocation = _hx_tmp;
HXLINE(  30)		this->ctrlKey = ctrlKeyValue;
HXLINE(  31)		this->altKey = altKeyValue;
HXLINE(  32)		this->shiftKey = shiftKeyValue;
HXLINE(  33)		this->controlKey = controlKeyValue;
HXLINE(  34)		this->commandKey = commandKeyValue;
            	}

Dynamic KeyboardEvent_obj::__CreateEmpty() { return new KeyboardEvent_obj; }

hx::ObjectPtr< KeyboardEvent_obj > KeyboardEvent_obj::__new(::String type,hx::Null< Bool >  __o_bubbles,hx::Null< Bool >  __o_cancelable,hx::Null< Int >  __o_charCodeValue,hx::Null< Int >  __o_keyCodeValue, ::Dynamic keyLocationValue,hx::Null< Bool >  __o_ctrlKeyValue,hx::Null< Bool >  __o_altKeyValue,hx::Null< Bool >  __o_shiftKeyValue,hx::Null< Bool >  __o_controlKeyValue,hx::Null< Bool >  __o_commandKeyValue)
{
	hx::ObjectPtr< KeyboardEvent_obj > _hx_result = new KeyboardEvent_obj();
	_hx_result->__construct(type,__o_bubbles,__o_cancelable,__o_charCodeValue,__o_keyCodeValue,keyLocationValue,__o_ctrlKeyValue,__o_altKeyValue,__o_shiftKeyValue,__o_controlKeyValue,__o_commandKeyValue);
	return _hx_result;
}

Dynamic KeyboardEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KeyboardEvent_obj > _hx_result = new KeyboardEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

 ::openfl::events::Event KeyboardEvent_obj::clone(){
            	HX_STACK_FRAME("openfl.events.KeyboardEvent","clone",0x11ed48cb,"openfl.events.KeyboardEvent.clone","openfl/events/KeyboardEvent.hx",41,0xce5f4702)
            	HX_STACK_THIS(this)
HXLINE(  43)		HX_VARI(  ::openfl::events::KeyboardEvent,event) =  ::openfl::events::KeyboardEvent_obj::__new(this->type,this->bubbles,this->cancelable,this->charCode,this->keyCode,this->keyLocation,this->ctrlKey,this->altKey,this->shiftKey,this->controlKey,this->commandKey);
HXLINE(  44)		event->target = this->target;
HXLINE(  45)		event->currentTarget = this->currentTarget;
HXLINE(  46)		event->eventPhase = this->eventPhase;
HXLINE(  47)		return event;
            	}


::String KeyboardEvent_obj::toString(){
            	HX_STACK_FRAME("openfl.events.KeyboardEvent","toString",0xd22933fe,"openfl.events.KeyboardEvent.toString","openfl/events/KeyboardEvent.hx",54,0xce5f4702)
            	HX_STACK_THIS(this)
HXLINE(  54)		return this->_hx___formatToString(HX_("KeyboardEvent",d3,8d,88,91),::Array_obj< ::String >::fromData( _hx_array_data_0,9));
            	}


::String KeyboardEvent_obj::KEY_DOWN;

::String KeyboardEvent_obj::KEY_UP;


KeyboardEvent_obj::KeyboardEvent_obj()
{
}

hx::Val KeyboardEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { return hx::Val( altKey); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { return hx::Val( ctrlKey); }
		if (HX_FIELD_EQ(inName,"keyCode") ) { return hx::Val( keyCode); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charCode") ) { return hx::Val( charCode); }
		if (HX_FIELD_EQ(inName,"shiftKey") ) { return hx::Val( shiftKey); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"commandKey") ) { return hx::Val( commandKey); }
		if (HX_FIELD_EQ(inName,"controlKey") ) { return hx::Val( controlKey); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyLocation") ) { return hx::Val( keyLocation); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val KeyboardEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { altKey=inValue.Cast< Bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { ctrlKey=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keyCode") ) { keyCode=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charCode") ) { charCode=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shiftKey") ) { shiftKey=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"commandKey") ) { commandKey=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controlKey") ) { controlKey=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyLocation") ) { keyLocation=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyboardEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("altKey","\xf6","\xa7","\xca","\x44"));
	outFields->push(HX_HCSTRING("charCode","\x23","\x5f","\x24","\x9c"));
	outFields->push(HX_HCSTRING("ctrlKey","\xb4","\x35","\x7d","\x61"));
	outFields->push(HX_HCSTRING("commandKey","\x14","\x71","\x9b","\x43"));
	outFields->push(HX_HCSTRING("controlKey","\x42","\x8e","\xa5","\x04"));
	outFields->push(HX_HCSTRING("keyCode","\x6c","\x22","\x9e","\x9b"));
	outFields->push(HX_HCSTRING("keyLocation","\xf4","\xea","\x6a","\x2d"));
	outFields->push(HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo KeyboardEvent_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(KeyboardEvent_obj,altKey),HX_HCSTRING("altKey","\xf6","\xa7","\xca","\x44")},
	{hx::fsInt,(int)offsetof(KeyboardEvent_obj,charCode),HX_HCSTRING("charCode","\x23","\x5f","\x24","\x9c")},
	{hx::fsBool,(int)offsetof(KeyboardEvent_obj,ctrlKey),HX_HCSTRING("ctrlKey","\xb4","\x35","\x7d","\x61")},
	{hx::fsBool,(int)offsetof(KeyboardEvent_obj,commandKey),HX_HCSTRING("commandKey","\x14","\x71","\x9b","\x43")},
	{hx::fsBool,(int)offsetof(KeyboardEvent_obj,controlKey),HX_HCSTRING("controlKey","\x42","\x8e","\xa5","\x04")},
	{hx::fsInt,(int)offsetof(KeyboardEvent_obj,keyCode),HX_HCSTRING("keyCode","\x6c","\x22","\x9e","\x9b")},
	{hx::fsInt,(int)offsetof(KeyboardEvent_obj,keyLocation),HX_HCSTRING("keyLocation","\xf4","\xea","\x6a","\x2d")},
	{hx::fsBool,(int)offsetof(KeyboardEvent_obj,shiftKey),HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo KeyboardEvent_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &KeyboardEvent_obj::KEY_DOWN,HX_HCSTRING("KEY_DOWN","\x62","\x6a","\x13","\x6d")},
	{hx::fsString,(void *) &KeyboardEvent_obj::KEY_UP,HX_HCSTRING("KEY_UP","\x5b","\x74","\x86","\xf2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String KeyboardEvent_obj_sMemberFields[] = {
	HX_HCSTRING("altKey","\xf6","\xa7","\xca","\x44"),
	HX_HCSTRING("charCode","\x23","\x5f","\x24","\x9c"),
	HX_HCSTRING("ctrlKey","\xb4","\x35","\x7d","\x61"),
	HX_HCSTRING("commandKey","\x14","\x71","\x9b","\x43"),
	HX_HCSTRING("controlKey","\x42","\x8e","\xa5","\x04"),
	HX_HCSTRING("keyCode","\x6c","\x22","\x9e","\x9b"),
	HX_HCSTRING("keyLocation","\xf4","\xea","\x6a","\x2d"),
	HX_HCSTRING("shiftKey","\x3d","\x92","\x9f","\x99"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void KeyboardEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyboardEvent_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(KeyboardEvent_obj::KEY_DOWN,"KEY_DOWN");
	HX_MARK_MEMBER_NAME(KeyboardEvent_obj::KEY_UP,"KEY_UP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyboardEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyboardEvent_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(KeyboardEvent_obj::KEY_DOWN,"KEY_DOWN");
	HX_VISIT_MEMBER_NAME(KeyboardEvent_obj::KEY_UP,"KEY_UP");
};

#endif

hx::Class KeyboardEvent_obj::__mClass;

static ::String KeyboardEvent_obj_sStaticFields[] = {
	HX_HCSTRING("KEY_DOWN","\x62","\x6a","\x13","\x6d"),
	HX_HCSTRING("KEY_UP","\x5b","\x74","\x86","\xf2"),
	::String(null())
};

void KeyboardEvent_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.events.KeyboardEvent","\x5c","\xaf","\xfb","\xd8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = KeyboardEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(KeyboardEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(KeyboardEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< KeyboardEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyboardEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyboardEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyboardEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void KeyboardEvent_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.events.KeyboardEvent","boot",0xb3a95684,"openfl.events.KeyboardEvent.boot","openfl/events/KeyboardEvent.hx",10,0xce5f4702)
HXLINE(  10)		KEY_DOWN = HX_("keyDown",a1,69,47,9c);
            	}
{
            	HX_STACK_FRAME("openfl.events.KeyboardEvent","boot",0xb3a95684,"openfl.events.KeyboardEvent.boot","openfl/events/KeyboardEvent.hx",11,0xce5f4702)
HXLINE(  11)		KEY_UP = HX_("keyUp",da,b9,fe,de);
            	}
}

} // end namespace openfl
} // end namespace events
