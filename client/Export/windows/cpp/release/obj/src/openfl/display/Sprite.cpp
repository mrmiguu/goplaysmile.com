// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace display{

void Sprite_obj::__construct(){
            	HX_STACK_FRAME("openfl.display.Sprite","new",0x3ff0c061,"openfl.display.Sprite.new","openfl/display/Sprite.hx",27,0xd5438ced)
            	HX_STACK_THIS(this)
HXLINE(  29)		super::__construct();
HXLINE(  31)		this->buttonMode = false;
HXLINE(  32)		this->useHandCursor = true;
            	}

Dynamic Sprite_obj::__CreateEmpty() { return new Sprite_obj; }

hx::ObjectPtr< Sprite_obj > Sprite_obj::__new()
{
	hx::ObjectPtr< Sprite_obj > _hx_result = new Sprite_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Sprite_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sprite_obj > _hx_result = new Sprite_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Sprite_obj::startDrag(hx::Null< Bool >  __o_lockCenter, ::openfl::geom::Rectangle bounds){
Bool lockCenter = __o_lockCenter.Default(false);
            	HX_STACK_FRAME("openfl.display.Sprite","startDrag",0x20ea0c37,"openfl.display.Sprite.startDrag","openfl/display/Sprite.hx",39,0xd5438ced)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lockCenter,"lockCenter")
            	HX_STACK_ARG(bounds,"bounds")
HXLINE(  39)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  41)			this->stage->_hx___startDrag(hx::ObjectPtr<OBJ_>(this),lockCenter,bounds);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Sprite_obj,startDrag,(void))

void Sprite_obj::stopDrag(){
            	HX_STACK_FRAME("openfl.display.Sprite","stopDrag",0x4d02dd75,"openfl.display.Sprite.stopDrag","openfl/display/Sprite.hx",50,0xd5438ced)
            	HX_STACK_THIS(this)
HXLINE(  50)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  52)			this->stage->_hx___stopDrag(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite_obj,stopDrag,(void))

::hx::EnumBase Sprite_obj::_hx___getCursor(){
            	HX_STACK_FRAME("openfl.display.Sprite","__getCursor",0x4a69b9ed,"openfl.display.Sprite.__getCursor","openfl/display/Sprite.hx",61,0xd5438ced)
            	HX_STACK_THIS(this)
HXLINE(  61)		Bool _hx_tmp;
HXDLIN(  61)		if (this->buttonMode) {
HXLINE(  61)			_hx_tmp = this->useHandCursor;
            		}
            		else {
HXLINE(  61)			_hx_tmp = false;
            		}
HXDLIN(  61)		if (_hx_tmp) {
HXLINE(  61)			return ::lime::ui::MouseCursor_obj::POINTER_dyn();
            		}
            		else {
HXLINE(  61)			return null();
            		}
HXDLIN(  61)		return null();
            	}


Bool Sprite_obj::_hx___hitTest(Float x,Float y,Bool shapeFlag,::Array< ::Dynamic> stack,Bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACK_FRAME("openfl.display.Sprite","__hitTest",0x895417e6,"openfl.display.Sprite.__hitTest","openfl/display/Sprite.hx",66,0xd5438ced)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(stack,"stack")
            	HX_STACK_ARG(interactiveOnly,"interactiveOnly")
            	HX_STACK_ARG(hitObject,"hitObject")
HXLINE(  68)		Bool _hx_tmp = hx::IsNotNull( this->hitArea );
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  70)			Bool _hx_tmp1 = !(this->hitArea->mouseEnabled);
HXDLIN(  70)			if (_hx_tmp1) {
HXLINE(  72)				this->hitArea->mouseEnabled = true;
HXLINE(  73)				HX_VARI( Bool,hitTest) = this->hitArea->_hx___hitTest(x,y,shapeFlag,null(),true,hitObject);
HXLINE(  74)				this->hitArea->mouseEnabled = false;
HXLINE(  76)				if (hitTest) {
HXLINE(  78)					stack[stack->length] = hitObject;
            				}
HXLINE(  82)				return hitTest;
            			}
            		}
            		else {
HXLINE(  88)			Bool _hx_tmp2;
HXDLIN(  88)			Bool _hx_tmp3;
HXDLIN(  88)			Bool _hx_tmp4 = !(!(hitObject->get_visible()));
HXDLIN(  88)			if (_hx_tmp4) {
HXLINE(  88)				_hx_tmp3 = this->_hx___isMask;
            			}
            			else {
HXLINE(  88)				_hx_tmp3 = true;
            			}
HXDLIN(  88)			if (!(_hx_tmp3)) {
HXLINE(  88)				Bool _hx_tmp5;
HXDLIN(  88)				if (interactiveOnly) {
HXLINE(  88)					_hx_tmp5 = !(this->mouseEnabled);
            				}
            				else {
HXLINE(  88)					_hx_tmp5 = false;
            				}
HXDLIN(  88)				if (_hx_tmp5) {
HXLINE(  88)					_hx_tmp2 = !(this->mouseChildren);
            				}
            				else {
HXLINE(  88)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE(  88)				_hx_tmp2 = true;
            			}
HXDLIN(  88)			if (_hx_tmp2) {
HXLINE(  88)				return false;
            			}
HXLINE(  89)			Bool _hx_tmp6;
HXDLIN(  89)			 ::openfl::display::DisplayObject _hx_tmp7 = this->get_mask();
HXDLIN(  89)			Bool _hx_tmp8 = hx::IsNotNull( _hx_tmp7 );
HXDLIN(  89)			if (_hx_tmp8) {
HXLINE(  89)				_hx_tmp6 = !(this->get_mask()->_hx___hitTestMask(x,y));
            			}
            			else {
HXLINE(  89)				_hx_tmp6 = false;
            			}
HXDLIN(  89)			if (_hx_tmp6) {
HXLINE(  89)				return false;
            			}
HXLINE(  91)			Bool _hx_tmp9 = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN(  91)			if (_hx_tmp9) {
HXLINE(  93)				HX_VARI(  ::openfl::geom::Point,point) = ::openfl::geom::Point_obj::_hx___temp;
HXLINE(  94)				point->setTo(x,y);
HXLINE(  95)				{
HXLINE(  95)					HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___getRenderTransform();
HXDLIN(  95)					HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(  95)					if ((norm == (int)0)) {
HXLINE(  95)						point->x = -(_this->tx);
HXDLIN(  95)						point->y = -(_this->ty);
            					}
            					else {
HXLINE(  95)						HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - point->y)) + (_this->d * (point->x - _this->tx))));
HXDLIN(  95)						Float _hx_tmp10 = ((Float)((Float)1.0) / (Float)norm);
HXDLIN(  95)						Float _hx_tmp11 = (_this->a * (point->y - _this->ty));
HXDLIN(  95)						Float _hx_tmp12 = (_this->b * (_this->tx - point->x));
HXDLIN(  95)						point->y = (_hx_tmp10 * (_hx_tmp11 + _hx_tmp12));
HXDLIN(  95)						point->x = px;
            					}
            				}
HXLINE(  97)				Bool _hx_tmp13 = !(this->_hx___scrollRect->containsPoint(point));
HXDLIN(  97)				if (_hx_tmp13) {
HXLINE(  99)					return false;
            				}
            			}
HXLINE( 105)			Bool _hx_tmp14 = this->super::_hx___hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject);
HXDLIN( 105)			if (_hx_tmp14) {
HXLINE( 107)				return interactiveOnly;
            			}
            			else {
HXLINE( 109)				Bool _hx_tmp15;
HXDLIN( 109)				Bool _hx_tmp16;
HXDLIN( 109)				Bool _hx_tmp17;
HXDLIN( 109)				if (!(!(interactiveOnly))) {
HXLINE( 109)					_hx_tmp17 = this->mouseEnabled;
            				}
            				else {
HXLINE( 109)					_hx_tmp17 = true;
            				}
HXDLIN( 109)				if (_hx_tmp17) {
HXLINE( 109)					_hx_tmp16 = hx::IsNotNull( this->_hx___graphics );
            				}
            				else {
HXLINE( 109)					_hx_tmp16 = false;
            				}
HXDLIN( 109)				if (_hx_tmp16) {
HXLINE( 109)					 ::openfl::geom::Matrix _hx_tmp18 = this->_hx___getRenderTransform();
HXDLIN( 109)					_hx_tmp15 = this->_hx___graphics->_hx___hitTest(x,y,shapeFlag,_hx_tmp18);
            				}
            				else {
HXLINE( 109)					_hx_tmp15 = false;
            				}
HXDLIN( 109)				if (_hx_tmp15) {
HXLINE( 111)					Bool _hx_tmp19 = hx::IsNotNull( stack );
HXDLIN( 111)					if (_hx_tmp19) {
HXLINE( 113)						stack->push(hitObject);
            					}
HXLINE( 117)					return true;
            				}
            			}
            		}
HXLINE( 123)		return false;
            	}


Bool Sprite_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACK_FRAME("openfl.display.Sprite","__hitTestMask",0x9c046ff2,"openfl.display.Sprite.__hitTestMask","openfl/display/Sprite.hx",128,0xd5438ced)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 130)		Bool _hx_tmp = this->super::_hx___hitTestMask(x,y);
HXDLIN( 130)		if (_hx_tmp) {
HXLINE( 132)			return true;
            		}
            		else {
HXLINE( 134)			Bool _hx_tmp1;
HXDLIN( 134)			Bool _hx_tmp2 = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 134)			if (_hx_tmp2) {
HXLINE( 134)				 ::openfl::geom::Matrix _hx_tmp3 = this->_hx___getRenderTransform();
HXDLIN( 134)				_hx_tmp1 = this->_hx___graphics->_hx___hitTest(x,y,true,_hx_tmp3);
            			}
            			else {
HXLINE( 134)				_hx_tmp1 = false;
            			}
HXDLIN( 134)			if (_hx_tmp1) {
HXLINE( 136)				return true;
            			}
            		}
HXLINE( 140)		return false;
            	}


 ::openfl::display::Graphics Sprite_obj::get_graphics(){
            	HX_STACK_FRAME("openfl.display.Sprite","get_graphics",0x451134b3,"openfl.display.Sprite.get_graphics","openfl/display/Sprite.hx",152,0xd5438ced)
            	HX_STACK_THIS(this)
HXLINE( 154)		Bool _hx_tmp = hx::IsNull( this->_hx___graphics );
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 156)			this->_hx___graphics =  ::openfl::display::Graphics_obj::__new(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 160)		return this->_hx___graphics;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sprite_obj,get_graphics,return )

Bool Sprite_obj::get_tabEnabled(){
            	HX_STACK_FRAME("openfl.display.Sprite","get_tabEnabled",0x5c66fc94,"openfl.display.Sprite.get_tabEnabled","openfl/display/Sprite.hx",167,0xd5438ced)
            	HX_STACK_THIS(this)
HXLINE( 167)		if (!(this->_hx___tabEnabled)) {
HXLINE( 167)			return this->buttonMode;
            		}
            		else {
HXLINE( 167)			return true;
            		}
HXDLIN( 167)		return false;
            	}



Sprite_obj::Sprite_obj()
{
}

void Sprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sprite);
	HX_MARK_MEMBER_NAME(buttonMode,"buttonMode");
	HX_MARK_MEMBER_NAME(hitArea,"hitArea");
	HX_MARK_MEMBER_NAME(useHandCursor,"useHandCursor");
	 ::openfl::display::DisplayObjectContainer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Sprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buttonMode,"buttonMode");
	HX_VISIT_MEMBER_NAME(hitArea,"hitArea");
	HX_VISIT_MEMBER_NAME(useHandCursor,"useHandCursor");
	 ::openfl::display::DisplayObjectContainer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Sprite_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"hitArea") ) { return hx::Val( hitArea); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_graphics()); }
		if (HX_FIELD_EQ(inName,"stopDrag") ) { return hx::Val( stopDrag_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"startDrag") ) { return hx::Val( startDrag_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonMode") ) { return hx::Val( buttonMode); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_graphics") ) { return hx::Val( get_graphics_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"useHandCursor") ) { return hx::Val( useHandCursor); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_tabEnabled") ) { return hx::Val( get_tabEnabled_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Sprite_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"hitArea") ) { hitArea=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonMode") ) { buttonMode=inValue.Cast< Bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"useHandCursor") ) { useHandCursor=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buttonMode","\x75","\x42","\x57","\xb2"));
	outFields->push(HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"));
	outFields->push(HX_HCSTRING("hitArea","\x80","\x23","\xfa","\xd5"));
	outFields->push(HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Sprite_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Sprite_obj,buttonMode),HX_HCSTRING("buttonMode","\x75","\x42","\x57","\xb2")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Sprite_obj,hitArea),HX_HCSTRING("hitArea","\x80","\x23","\xfa","\xd5")},
	{hx::fsBool,(int)offsetof(Sprite_obj,useHandCursor),HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Sprite_obj_sStaticStorageInfo = 0;
#endif

static ::String Sprite_obj_sMemberFields[] = {
	HX_HCSTRING("buttonMode","\x75","\x42","\x57","\xb2"),
	HX_HCSTRING("hitArea","\x80","\x23","\xfa","\xd5"),
	HX_HCSTRING("useHandCursor","\xcc","\xda","\xae","\x89"),
	HX_HCSTRING("startDrag","\x76","\xa5","\x63","\xfb"),
	HX_HCSTRING("stopDrag","\x16","\x71","\x2a","\x95"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("get_graphics","\xd4","\xac","\x81","\xc7"),
	HX_HCSTRING("get_tabEnabled","\xf5","\x7e","\xfe","\xb5"),
	::String(null()) };

static void Sprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sprite_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sprite_obj::__mClass,"__mClass");
};

#endif

hx::Class Sprite_obj::__mClass;

void Sprite_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Sprite","\xef","\xfb","\xd6","\x4d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Sprite_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sprite_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sprite_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
