// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_AssetLibrary
#include <lime/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_AssetLibrary
#include <lime/app/Promise_lime_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_openfl_AssetLibrary
#include <openfl/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_IAssetCache
#include <openfl/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLiteLibrary
#include <openfl/_internal/swf/SWFLiteLibrary.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

namespace openfl{
namespace _internal{
namespace swf{

void SWFLiteLibrary_obj::__construct(::String id){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","new",0x489209b9,"openfl._internal.swf.SWFLiteLibrary.new","openfl/_internal/swf/SWFLiteLibrary.hx",29,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(  31)		super::__construct();
HXLINE(  33)		Bool _hx_tmp = hx::IsNotNull( id );
HXDLIN(  33)		if (_hx_tmp) {
HXLINE(  35)			::String _hx_tmp1 = ::openfl::Assets_obj::getText(id);
HXDLIN(  35)			this->swf = ::openfl::_internal::swf::SWFLite_obj::unserialize(_hx_tmp1);
            		}
            	}

Dynamic SWFLiteLibrary_obj::__CreateEmpty() { return new SWFLiteLibrary_obj; }

hx::ObjectPtr< SWFLiteLibrary_obj > SWFLiteLibrary_obj::__new(::String id)
{
	hx::ObjectPtr< SWFLiteLibrary_obj > _hx_result = new SWFLiteLibrary_obj();
	_hx_result->__construct(id);
	return _hx_result;
}

Dynamic SWFLiteLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SWFLiteLibrary_obj > _hx_result = new SWFLiteLibrary_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

Bool SWFLiteLibrary_obj::exists(::String id,::String type){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","exists",0x9a5f8223,"openfl._internal.swf.SWFLiteLibrary.exists","openfl/_internal/swf/SWFLiteLibrary.hx",48,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE(  50)		Bool _hx_tmp;
HXDLIN(  50)		if ((id == HX_("",00,00,00,00))) {
HXLINE(  50)			_hx_tmp = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            		}
            		else {
HXLINE(  50)			_hx_tmp = false;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  52)			return true;
            		}
HXLINE(  56)		Bool _hx_tmp1;
HXDLIN(  56)		if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE(  56)			_hx_tmp1 = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            		}
            		else {
HXLINE(  56)			_hx_tmp1 = true;
            		}
HXDLIN(  56)		if (_hx_tmp1) {
HXLINE(  58)			return this->swf->hasSymbol(id);
            		}
HXLINE(  62)		return false;
            	}


 ::lime::graphics::Image SWFLiteLibrary_obj::getImage(::String id){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","getImage",0x219672ec,"openfl._internal.swf.SWFLiteLibrary.getImage","openfl/_internal/swf/SWFLiteLibrary.hx",69,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(  69)		 ::openfl::display::BitmapData _hx_tmp = this->swf->getBitmapData(id);
HXDLIN(  69)		return ::lime::graphics::Image_obj::fromBitmapData(_hx_tmp);
            	}


 ::openfl::display::MovieClip SWFLiteLibrary_obj::getMovieClip(::String id){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","getMovieClip",0x5607f2b1,"openfl._internal.swf.SWFLiteLibrary.getMovieClip","openfl/_internal/swf/SWFLiteLibrary.hx",76,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(  76)		return this->swf->createMovieClip(id);
            	}


 ::lime::app::Future SWFLiteLibrary_obj::load(){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","load",0x35eb8ead,"openfl._internal.swf.SWFLiteLibrary.load","openfl/_internal/swf/SWFLiteLibrary.hx",81,0xbec32034)
            	HX_STACK_THIS(this)
HXLINE(  83)		HX_VARI(  ::lime::app::Promise_lime_AssetLibrary,promise) =  ::lime::app::Promise_lime_AssetLibrary_obj::__new();
HXLINE( 185)		promise->complete(hx::ObjectPtr<OBJ_>(this));
HXLINE( 189)		return promise->future;
            	}


void SWFLiteLibrary_obj::unload(){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","unload",0x400c0546,"openfl._internal.swf.SWFLiteLibrary.unload","openfl/_internal/swf/SWFLiteLibrary.hx",194,0xbec32034)
            	HX_STACK_THIS(this)
HXLINE( 196)		HX_VAR(  ::openfl::_internal::symbols::BitmapSymbol,bitmap);
HXLINE( 198)		{
HXLINE( 198)			HX_VARI(  ::Dynamic,tmp) = this->swf->symbols->iterator();
HXDLIN( 198)			while(true){
HXLINE( 198)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 198)				if (_hx_tmp) {
HXLINE( 198)					goto _hx_goto_0;
            				}
HXDLIN( 198)				HX_VARI(  ::openfl::_internal::symbols::SWFSymbol,symbol) = ( ( ::openfl::_internal::symbols::SWFSymbol)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 200)				Bool _hx_tmp1 = ::Std_obj::is(symbol,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >());
HXDLIN( 200)				if (_hx_tmp1) {
HXLINE( 202)					bitmap = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol) );
HXLINE( 203)					::openfl::IAssetCache_obj::removeBitmapData(::openfl::Assets_obj::cache,bitmap->path);
            				}
            			}
            			_hx_goto_0:;
            		}
            	}



SWFLiteLibrary_obj::SWFLiteLibrary_obj()
{
}

void SWFLiteLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SWFLiteLibrary);
	HX_MARK_MEMBER_NAME(swf,"swf");
	 ::lime::AssetLibrary_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SWFLiteLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(swf,"swf");
	 ::lime::AssetLibrary_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SWFLiteLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"swf") ) { return hx::Val( swf); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn()); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getImage") ) { return hx::Val( getImage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { return hx::Val( getMovieClip_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SWFLiteLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"swf") ) { swf=inValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SWFLiteLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("swf","\x42","\xab","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SWFLiteLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(int)offsetof(SWFLiteLibrary_obj,swf),HX_HCSTRING("swf","\x42","\xab","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SWFLiteLibrary_obj_sStaticStorageInfo = 0;
#endif

static ::String SWFLiteLibrary_obj_sMemberFields[] = {
	HX_HCSTRING("swf","\x42","\xab","\x57","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getMovieClip","\x2a","\x9f","\x71","\x27"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	::String(null()) };

static void SWFLiteLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SWFLiteLibrary_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SWFLiteLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SWFLiteLibrary_obj::__mClass,"__mClass");
};

#endif

hx::Class SWFLiteLibrary_obj::__mClass;

void SWFLiteLibrary_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.swf.SWFLiteLibrary","\x47","\xb9","\x12","\xb6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SWFLiteLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SWFLiteLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SWFLiteLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SWFLiteLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SWFLiteLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SWFLiteLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace swf
