// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_graphics_Image
#include <lime/app/Promise_lime_graphics_Image.h>
#endif
#ifndef INCLUDED_lime_app_Promise_lime_utils_AssetLibrary
#include <lime/app/Promise_lime_utils_AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_AssetLibrary
#include <openfl/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_IAssetCache
#include <openfl/IAssetCache.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLite
#include <openfl/_internal/swf/SWFLite.h>
#endif
#ifndef INCLUDED_openfl__internal_swf_SWFLiteLibrary
#include <openfl/_internal/swf/SWFLiteLibrary.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_BitmapSymbol
#include <openfl/_internal/symbols/BitmapSymbol.h>
#endif
#ifndef INCLUDED_openfl__internal_symbols_SWFSymbol
#include <openfl/_internal/symbols/SWFSymbol.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

namespace openfl{
namespace _internal{
namespace swf{

void SWFLiteLibrary_obj::__construct(::String id){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","new",0x489209b9,"openfl._internal.swf.SWFLiteLibrary.new","openfl/_internal/swf/SWFLiteLibrary.hx",35,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(  37)		super::__construct();
HXLINE(  39)		this->id = id;
HXLINE(  41)		this->alphaCheck =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  46)		this->rootPath = HX_("",00,00,00,00);
            	}

Dynamic SWFLiteLibrary_obj::__CreateEmpty() { return new SWFLiteLibrary_obj; }

hx::ObjectPtr< SWFLiteLibrary_obj > SWFLiteLibrary_obj::__new(::String id)
{
	hx::ObjectPtr< SWFLiteLibrary_obj > _hx_result = new SWFLiteLibrary_obj();
	_hx_result->__construct(id);
	return _hx_result;
}

Dynamic SWFLiteLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SWFLiteLibrary_obj > _hx_result = new SWFLiteLibrary_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

Bool SWFLiteLibrary_obj::exists(::String id,::String type){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","exists",0x9a5f8223,"openfl._internal.swf.SWFLiteLibrary.exists","openfl/_internal/swf/SWFLiteLibrary.hx",58,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE(  60)		Bool _hx_tmp = hx::IsNull( this->swf );
HXDLIN(  60)		if (_hx_tmp) {
HXLINE(  60)			return false;
            		}
HXLINE(  62)		Bool _hx_tmp1;
HXDLIN(  62)		if ((id == HX_("",00,00,00,00))) {
HXLINE(  62)			_hx_tmp1 = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            		}
            		else {
HXLINE(  62)			_hx_tmp1 = false;
            		}
HXDLIN(  62)		if (_hx_tmp1) {
HXLINE(  64)			return true;
            		}
HXLINE(  68)		Bool _hx_tmp2;
HXDLIN(  68)		if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE(  68)			_hx_tmp2 = (type == HX_("MOVIE_CLIP",1f,e1,aa,77));
            		}
            		else {
HXLINE(  68)			_hx_tmp2 = true;
            		}
HXDLIN(  68)		if (_hx_tmp2) {
HXLINE(  70)			Bool _hx_tmp3 = hx::IsNotNull( this->swf );
HXDLIN(  70)			if (_hx_tmp3) {
HXLINE(  70)				return this->swf->hasSymbol(id);
            			}
            			else {
HXLINE(  70)				return false;
            			}
            		}
HXLINE(  74)		return false;
            	}


 ::lime::graphics::Image SWFLiteLibrary_obj::getImage(::String id){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","getImage",0x219672ec,"openfl._internal.swf.SWFLiteLibrary.getImage","openfl/_internal/swf/SWFLiteLibrary.hx",79,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE(  83)		Bool _hx_tmp = !(this->alphaCheck->exists(id));
HXDLIN(  83)		if (_hx_tmp) {
HXLINE(  85)			HX_VARI(  ::Dynamic,tmp) = this->swf->symbols->iterator();
HXDLIN(  85)			while(true){
HXLINE(  85)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  85)				if (_hx_tmp1) {
HXLINE(  85)					goto _hx_goto_0;
            				}
HXDLIN(  85)				HX_VARI(  ::openfl::_internal::symbols::SWFSymbol,symbol) = ( ( ::openfl::_internal::symbols::SWFSymbol)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  87)				Bool _hx_tmp2;
HXDLIN(  87)				Bool _hx_tmp3 = ::Std_obj::is(symbol,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >());
HXDLIN(  87)				if (_hx_tmp3) {
HXLINE(  87)					_hx_tmp2 = (hx::TCast<  ::openfl::_internal::symbols::BitmapSymbol >::cast(symbol)->path == id);
            				}
            				else {
HXLINE(  87)					_hx_tmp2 = false;
            				}
HXDLIN(  87)				if (_hx_tmp2) {
HXLINE(  89)					HX_VARI(  ::openfl::_internal::symbols::BitmapSymbol,bitmapSymbol) = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol) );
HXLINE(  91)					Bool _hx_tmp4 = hx::IsNotNull( bitmapSymbol->alpha );
HXDLIN(  91)					if (_hx_tmp4) {
HXLINE(  93)						HX_VARI(  ::lime::graphics::Image,image) = this->super::getImage(id);
HXLINE(  94)						HX_VARI(  ::lime::graphics::Image,alpha) = this->super::getImage(bitmapSymbol->alpha);
HXLINE(  96)						this->_hx___copyChannel(image,alpha);
HXLINE(  98)						this->cachedImages->set(id,image);
HXLINE(  99)						this->alphaCheck->set(id,true);
HXLINE( 101)						return image;
            					}
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE( 111)		return this->super::getImage(id);
            	}


 ::openfl::display::MovieClip SWFLiteLibrary_obj::getMovieClip(::String id){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","getMovieClip",0x5607f2b1,"openfl._internal.swf.SWFLiteLibrary.getMovieClip","openfl/_internal/swf/SWFLiteLibrary.hx",118,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 118)		Bool _hx_tmp = hx::IsNotNull( this->swf );
HXDLIN( 118)		if (_hx_tmp) {
HXLINE( 118)			return this->swf->createMovieClip(id);
            		}
            		else {
HXLINE( 118)			return null();
            		}
HXDLIN( 118)		return null();
            	}


Bool SWFLiteLibrary_obj::isLocal(::String id,::String type){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","isLocal",0x6a6ec6fa,"openfl._internal.swf.SWFLiteLibrary.isLocal","openfl/_internal/swf/SWFLiteLibrary.hx",125,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE( 125)		return true;
            	}


 ::lime::app::Future SWFLiteLibrary_obj::load(){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_1, ::openfl::_internal::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            		void _hx_run(::String data){
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::_internal::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_utils_AssetLibrary,promise) HXARGC(1)
            			void _hx_run( ::lime::utils::AssetLibrary _){
            				HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","load",0x35eb8ead,"openfl._internal.swf.SWFLiteLibrary.load","openfl/_internal/swf/SWFLiteLibrary.hx",156,0xbec32034)
            				HX_STACK_ARG(_,"_")
HXLINE( 158)				_gthis->preloading = false;
HXLINE( 159)				promise->complete(_gthis);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","load",0x35eb8ead,"openfl._internal.swf.SWFLiteLibrary.load","openfl/_internal/swf/SWFLiteLibrary.hx",149,0xbec32034)
            			HX_STACK_ARG(data,"data")
HXLINE( 151)			_gthis->swf = ::openfl::_internal::swf::SWFLite_obj::unserialize(data);
HXLINE( 152)			_gthis->swf->library = _gthis;
HXLINE( 154)			::openfl::_internal::swf::SWFLite_obj::instances->set(_gthis->id,_gthis->swf);
HXLINE( 156)			_gthis->_hx___load()->onProgress(promise->progress_dyn())->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_0(_gthis,promise)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","load",0x35eb8ead,"openfl._internal.swf.SWFLiteLibrary.load","openfl/_internal/swf/SWFLiteLibrary.hx",130,0xbec32034)
            	HX_STACK_THIS(this)
HXLINE( 130)		HX_VARI(  ::openfl::_internal::swf::SWFLiteLibrary,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 132)		Bool _hx_tmp = hx::IsNotNull( this->id );
HXDLIN( 132)		if (_hx_tmp) {
HXLINE( 134)			this->preload->set(this->id,true);
            		}
HXLINE( 146)		HX_VARI(  ::lime::app::Promise_lime_utils_AssetLibrary,promise) =  ::lime::app::Promise_lime_utils_AssetLibrary_obj::__new();
HXLINE( 147)		this->preloading = true;
HXLINE( 149)		this->loadText(this->id)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_1(_gthis,promise)));
HXLINE( 165)		return promise->future;
            	}


 ::lime::app::Future SWFLiteLibrary_obj::loadImage(::String id){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","loadImage",0x9fc5ad6e,"openfl._internal.swf.SWFLiteLibrary.loadImage","openfl/_internal/swf/SWFLiteLibrary.hx",170,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 170)		HX_VARI(  ::openfl::_internal::swf::SWFLiteLibrary,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 174)		Bool _hx_tmp;
HXDLIN( 174)		Bool _hx_tmp1 = !(this->preloading);
HXDLIN( 174)		if (_hx_tmp1) {
HXLINE( 174)			_hx_tmp = !(this->alphaCheck->exists(id));
            		}
            		else {
HXLINE( 174)			_hx_tmp = false;
            		}
HXDLIN( 174)		if (_hx_tmp) {
HXLINE( 176)			HX_VARI(  ::Dynamic,tmp) = this->swf->symbols->iterator();
HXDLIN( 176)			while(true){
HXLINE( 176)				Bool _hx_tmp2 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 176)				if (_hx_tmp2) {
HXLINE( 176)					goto _hx_goto_1;
            				}
HXDLIN( 176)				HX_VARI(  ::openfl::_internal::symbols::SWFSymbol,symbol) = ( ( ::openfl::_internal::symbols::SWFSymbol)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 178)				Bool _hx_tmp3;
HXDLIN( 178)				Bool _hx_tmp4 = ::Std_obj::is(symbol,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >());
HXDLIN( 178)				if (_hx_tmp4) {
HXLINE( 178)					_hx_tmp3 = (hx::TCast<  ::openfl::_internal::symbols::BitmapSymbol >::cast(symbol)->path == id);
            				}
            				else {
HXLINE( 178)					_hx_tmp3 = false;
            				}
HXDLIN( 178)				if (_hx_tmp3) {
HXLINE( 180)					HX_VARI(  ::openfl::_internal::symbols::BitmapSymbol,bitmapSymbol) = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol) );
HXLINE( 182)					Bool _hx_tmp5 = hx::IsNotNull( bitmapSymbol->alpha );
HXDLIN( 182)					if (_hx_tmp5) {
            						HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1,::String,id, ::openfl::_internal::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_graphics_Image,promise, ::openfl::_internal::symbols::BitmapSymbol,bitmapSymbol) HXARGC(1)
            						void _hx_run( ::lime::graphics::Image image){
            							HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_0,::String,id, ::openfl::_internal::swf::SWFLiteLibrary,_gthis, ::lime::app::Promise_lime_graphics_Image,promise, ::lime::graphics::Image,image) HXARGC(1)
            							void _hx_run( ::lime::graphics::Image alpha){
            								HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","loadImage",0x9fc5ad6e,"openfl._internal.swf.SWFLiteLibrary.loadImage","openfl/_internal/swf/SWFLiteLibrary.hx",188,0xbec32034)
            								HX_STACK_ARG(alpha,"alpha")
HXLINE( 190)								_gthis->_hx___copyChannel(image,alpha);
HXLINE( 192)								_gthis->cachedImages->set(id,image);
HXLINE( 193)								_gthis->alphaCheck->set(id,true);
HXLINE( 195)								promise->complete(image);
            							}
            							HX_END_LOCAL_FUNC1((void))

            							HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","loadImage",0x9fc5ad6e,"openfl._internal.swf.SWFLiteLibrary.loadImage","openfl/_internal/swf/SWFLiteLibrary.hx",188,0xbec32034)
            							HX_STACK_ARG(image,"image")
HXLINE( 188)							_gthis->_hx___loadImage(bitmapSymbol->alpha)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_0(id,_gthis,promise,image)));
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 184)						HX_VARI(  ::lime::app::Promise_lime_graphics_Image,promise) =  ::lime::app::Promise_lime_graphics_Image_obj::__new();
HXLINE( 186)						this->_hx___loadImage(id)->onError(promise->error_dyn())->onComplete( ::Dynamic(new _hx_Closure_1(id,_gthis,promise,bitmapSymbol)));
HXLINE( 201)						return promise->future;
            					}
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE( 211)		return this->super::loadImage(id);
            	}


void SWFLiteLibrary_obj::unload(){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","unload",0x400c0546,"openfl._internal.swf.SWFLiteLibrary.unload","openfl/_internal/swf/SWFLiteLibrary.hx",216,0xbec32034)
            	HX_STACK_THIS(this)
HXLINE( 218)		HX_VAR(  ::openfl::_internal::symbols::BitmapSymbol,bitmap);
HXLINE( 220)		{
HXLINE( 220)			HX_VARI(  ::Dynamic,tmp) = this->swf->symbols->iterator();
HXDLIN( 220)			while(true){
HXLINE( 220)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 220)				if (_hx_tmp) {
HXLINE( 220)					goto _hx_goto_2;
            				}
HXDLIN( 220)				HX_VARI(  ::openfl::_internal::symbols::SWFSymbol,symbol) = ( ( ::openfl::_internal::symbols::SWFSymbol)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 222)				Bool _hx_tmp1 = ::Std_obj::is(symbol,hx::ClassOf< ::openfl::_internal::symbols::BitmapSymbol >());
HXDLIN( 222)				if (_hx_tmp1) {
HXLINE( 224)					bitmap = ( ( ::openfl::_internal::symbols::BitmapSymbol)(symbol) );
HXLINE( 225)					::openfl::IAssetCache_obj::removeBitmapData(::openfl::Assets_obj::cache,bitmap->path);
            				}
            			}
            			_hx_goto_2:;
            		}
            	}


void SWFLiteLibrary_obj::_hx___copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image alpha){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","__copyChannel",0x00518107,"openfl._internal.swf.SWFLiteLibrary.__copyChannel","openfl/_internal/swf/SWFLiteLibrary.hx",234,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 236)		Bool _hx_tmp = hx::IsNotNull( alpha );
HXDLIN( 236)		if (_hx_tmp) {
HXLINE( 238)			 ::lime::math::Rectangle _hx_tmp1 = alpha->get_rect();
HXDLIN( 238)			image->copyChannel(alpha,_hx_tmp1, ::lime::math::Vector2_obj::__new(null(),null()),::lime::graphics::ImageChannel_obj::RED_dyn(),::lime::graphics::ImageChannel_obj::ALPHA_dyn());
            		}
HXLINE( 242)		image->buffer->premultiplied = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SWFLiteLibrary_obj,_hx___copyChannel,(void))

 ::lime::app::Future SWFLiteLibrary_obj::_hx___load(){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","__load",0xd12f618d,"openfl._internal.swf.SWFLiteLibrary.__load","openfl/_internal/swf/SWFLiteLibrary.hx",253,0xbec32034)
            	HX_STACK_THIS(this)
HXLINE( 253)		return this->super::load();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SWFLiteLibrary_obj,_hx___load,return )

 ::lime::app::Future SWFLiteLibrary_obj::_hx___loadImage(::String id){
            	HX_STACK_FRAME("openfl._internal.swf.SWFLiteLibrary","__loadImage",0xd3596e8e,"openfl._internal.swf.SWFLiteLibrary.__loadImage","openfl/_internal/swf/SWFLiteLibrary.hx",260,0xbec32034)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 260)		return this->super::loadImage(id);
            	}


HX_DEFINE_DYNAMIC_FUNC1(SWFLiteLibrary_obj,_hx___loadImage,return )


SWFLiteLibrary_obj::SWFLiteLibrary_obj()
{
}

void SWFLiteLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SWFLiteLibrary);
	HX_MARK_MEMBER_NAME(alphaCheck,"alphaCheck");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(preloading,"preloading");
	HX_MARK_MEMBER_NAME(rootPath,"rootPath");
	HX_MARK_MEMBER_NAME(swf,"swf");
	 ::lime::utils::AssetLibrary_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SWFLiteLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(alphaCheck,"alphaCheck");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(preloading,"preloading");
	HX_VISIT_MEMBER_NAME(rootPath,"rootPath");
	HX_VISIT_MEMBER_NAME(swf,"swf");
	 ::lime::utils::AssetLibrary_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SWFLiteLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"swf") ) { return hx::Val( swf); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn()); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn()); }
		if (HX_FIELD_EQ(inName,"__load") ) { return hx::Val( _hx___load_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isLocal") ) { return hx::Val( isLocal_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { return hx::Val( rootPath); }
		if (HX_FIELD_EQ(inName,"getImage") ) { return hx::Val( getImage_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadImage") ) { return hx::Val( loadImage_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaCheck") ) { return hx::Val( alphaCheck); }
		if (HX_FIELD_EQ(inName,"preloading") ) { return hx::Val( preloading); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__loadImage") ) { return hx::Val( _hx___loadImage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { return hx::Val( getMovieClip_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__copyChannel") ) { return hx::Val( _hx___copyChannel_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SWFLiteLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"swf") ) { swf=inValue.Cast<  ::openfl::_internal::swf::SWFLite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rootPath") ) { rootPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"alphaCheck") ) { alphaCheck=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"preloading") ) { preloading=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SWFLiteLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alphaCheck","\x8a","\xec","\x5b","\x66"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("preloading","\xb9","\x08","\xef","\xa9"));
	outFields->push(HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1"));
	outFields->push(HX_HCSTRING("swf","\x42","\xab","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SWFLiteLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(SWFLiteLibrary_obj,alphaCheck),HX_HCSTRING("alphaCheck","\x8a","\xec","\x5b","\x66")},
	{hx::fsString,(int)offsetof(SWFLiteLibrary_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsBool,(int)offsetof(SWFLiteLibrary_obj,preloading),HX_HCSTRING("preloading","\xb9","\x08","\xef","\xa9")},
	{hx::fsString,(int)offsetof(SWFLiteLibrary_obj,rootPath),HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1")},
	{hx::fsObject /*::openfl::_internal::swf::SWFLite*/ ,(int)offsetof(SWFLiteLibrary_obj,swf),HX_HCSTRING("swf","\x42","\xab","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SWFLiteLibrary_obj_sStaticStorageInfo = 0;
#endif

static ::String SWFLiteLibrary_obj_sMemberFields[] = {
	HX_HCSTRING("alphaCheck","\x8a","\xec","\x5b","\x66"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("preloading","\xb9","\x08","\xef","\xa9"),
	HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1"),
	HX_HCSTRING("swf","\x42","\xab","\x57","\x00"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getMovieClip","\x2a","\x9f","\x71","\x27"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	HX_HCSTRING("loadImage","\x55","\x6b","\xa0","\xd8"),
	HX_HCSTRING("unload","\xff","\xa0","\x8c","\x65"),
	HX_HCSTRING("__copyChannel","\x6e","\xbe","\x5e","\x6b"),
	HX_HCSTRING("__load","\x46","\xfd","\xaf","\xf6"),
	HX_HCSTRING("__loadImage","\x35","\xb4","\xcc","\x06"),
	::String(null()) };

static void SWFLiteLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SWFLiteLibrary_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SWFLiteLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SWFLiteLibrary_obj::__mClass,"__mClass");
};

#endif

hx::Class SWFLiteLibrary_obj::__mClass;

void SWFLiteLibrary_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.swf.SWFLiteLibrary","\x47","\xb9","\x12","\xb6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SWFLiteLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SWFLiteLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SWFLiteLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SWFLiteLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SWFLiteLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SWFLiteLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace swf
