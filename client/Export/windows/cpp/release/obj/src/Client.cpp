// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
#ifndef INCLUDED_Animation
#include <Animation.h>
#endif
#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_Client
#include <Client.h>
#endif
#ifndef INCLUDED_Connection
#include <Connection.h>
#endif
#ifndef INCLUDED_Die
#include <Die.h>
#endif
#ifndef INCLUDED_Field
#include <Field.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_IButton
#include <IButton.h>
#endif
#ifndef INCLUDED_Level
#include <Level.h>
#endif
#ifndef INCLUDED_Paperdoll
#include <Paperdoll.h>
#endif
#ifndef INCLUDED_Radio
#include <Radio.h>
#endif
#ifndef INCLUDED_SpriteSheet
#include <SpriteSheet.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Terrain
#include <Terrain.h>
#endif
#ifndef INCLUDED_Viewport
#include <Viewport.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

static const ::String _hx_array_data_2[] = {
	HX_("1234567890",5b,2e,e3,45),HX_("QWERTYUIOP",8d,25,1e,51),HX_("ASDFGHJKL",76,6b,98,34),HX_("ZXCVBNM",b0,10,d7,9a),
};

void Client_obj::__construct(){
            	HX_STACK_FRAME("Client","new",0x1376f0dd,"Client.new","Client.hx",14,0x69b39933)
            	HX_STACK_THIS(this)
HXLINE(  16)		this->slide = ::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + HX_("etc/slide.ogg",97,c2,4b,a7)));
HXLINE(  15)		this->g =  ::Globals_obj::__new();
HXLINE(  22)		super::__construct();
HXLINE(  25)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/bg.png",5b,18,b4,cf)),null());
HXDLIN(  25)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__new(png,null());
HXDLIN(  25)		set->addRect(png->rect);
HXDLIN(  25)		Int _hx_tmp = ::Std_obj::_hx_int(set->getRect((int)0)->width);
HXDLIN(  25)		Int _hx_tmp1 = ::Std_obj::_hx_int(set->getRect((int)0)->height);
HXDLIN(  25)		HX_VARI(  ::openfl::display::Tilemap,map) =  ::openfl::display::Tilemap_obj::__new(_hx_tmp,_hx_tmp1,set,null());
HXDLIN(  25)		map->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN(  25)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__new();
HXDLIN(  25)		sprite->addChild(map);
HXDLIN(  25)		sprite->set_x((int)0);
HXDLIN(  25)		sprite->set_y((int)0);
HXDLIN(  25)		this->addChild(sprite);
HXLINE(  27)		Int w = this->stage->stageWidth;
HXDLIN(  27)		Int h = this->stage->stageHeight;
HXDLIN(  27)		Float _hx_tmp2 = ::Math_obj::min(((Float)w / (Float)(int)480),((Float)h / (Float)(int)800));
HXDLIN(  27)		Float _hx_tmp3 = this->set_scaleX(_hx_tmp2);
HXDLIN(  27)		this->set_scaleY(_hx_tmp3);
HXLINE(  29)		::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + HX_("etc/bgm.ogg",ae,70,80,08)));
HXLINE(  32)		this->loginState();
HXLINE(  33)		this->toFromState();
HXLINE(  34)		this->inGameState();
HXLINE(  36)		this->g->radio =  ::Radio_obj::__new(this->g->login,this->g->toFrom);
HXLINE(  37)		this->g->radio->add(this->g->inGame);
HXLINE(  38)		this->g->radio->push(this->g->login);
            	}

Dynamic Client_obj::__CreateEmpty() { return new Client_obj; }

hx::ObjectPtr< Client_obj > Client_obj::__new()
{
	hx::ObjectPtr< Client_obj > _hx_result = new Client_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Client_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Client_obj > _hx_result = new Client_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Client_obj::loginState(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Client,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_STACK_FRAME("Client","loginState",0xdd4de90b,"Client.loginState","Client.hx",44,0x69b39933)
            			HX_STACK_ARG(_,"_")
HXLINE(  44)			_gthis->resetToUserState();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Client,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACK_FRAME("Client","loginState",0xdd4de90b,"Client.loginState","Client.hx",85,0x69b39933)
HXLINE(  85)			Int _hx_tmp7 = _gthis->userField->size();
HXDLIN(  85)			if ((_hx_tmp7 > (int)0)) {
HXLINE(  86)				::String _hx_tmp8 = _gthis->userField->getText();
HXDLIN(  86)				Int _hx_tmp9 = _gthis->userField->size();
HXDLIN(  86)				::String _hx_tmp10 = _hx_tmp8.substr((int)0,(_hx_tmp9 - (int)1));
HXDLIN(  86)				_gthis->userField->setText(_hx_tmp10);
            			}
            			else {
HXLINE(  87)				_gthis->resetToUserState();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACK_FRAME("Client","loginState",0xdd4de90b,"Client.loginState","Client.hx",41,0x69b39933)
            	HX_STACK_THIS(this)
HXLINE(  41)		HX_VARI(  ::Client,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  42)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("login/pass.png",32,c7,b6,21)),null());
HXDLIN(  42)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__new(png,null());
HXDLIN(  42)		set->addRect(png->rect);
HXDLIN(  42)		Int _hx_tmp;
HXDLIN(  42)		_hx_tmp = ::Std_obj::_hx_int(set->getRect((int)0)->width);
HXDLIN(  42)		Int _hx_tmp1;
HXDLIN(  42)		_hx_tmp1 = ::Std_obj::_hx_int(set->getRect((int)0)->height);
HXDLIN(  42)		HX_VARI(  ::openfl::display::Tilemap,map) =  ::openfl::display::Tilemap_obj::__new(_hx_tmp,_hx_tmp1,set,null());
HXDLIN(  42)		map->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN(  42)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__new();
HXDLIN(  42)		sprite->addChild(map);
HXDLIN(  42)		sprite->set_x((int)0);
HXDLIN(  42)		sprite->set_y((int)0);
HXDLIN(  42)		this->passOverlay = sprite;
HXLINE(  43)		this->passOverlay->set_visible(false);
HXLINE(  44)		this->passOverlay->addEventListener(HX_("mouseDown",27,b1,c2,ee), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null());
HXLINE(  45)		this->g->login->addChild(this->passOverlay);
HXLINE(  47)		this->loginButton =  ::Button_obj::__new(this->g,this->g->login,HX_("login/login",03,1d,e4,34));
HXLINE(  48)		Float line = this->loginButton->get_width();
HXDLIN(  48)		this->loginButton->set_x((((Float)240.) - ((Float)line / (Float)(int)2)));
HXLINE(  49)		Float line1 = this->loginButton->get_height();
HXDLIN(  49)		this->loginButton->set_y((((Float)400.) - ((Float)line1 / (Float)(int)2)));
HXLINE(  50)		this->loginButton->onPop(this->passStage_dyn());
HXLINE(  52)		Float _hx_tmp2 = this->loginButton->get_y();
HXDLIN(  52)		this->userField =  ::Field_obj::__new(this->g,((Float)240.),((Float)_hx_tmp2 / (Float)(int)2),null());
HXLINE(  53)		this->g->login->addChild(this->userField);
HXLINE(  55)		HX_VARI( ::Array< ::String >,rows) = ::Array_obj< ::String >::fromData( _hx_array_data_2,4);
HXLINE(  59)		{
HXLINE(  59)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  59)			HX_VARI( Int,_g) = rows->length;
HXDLIN(  59)			while((_g1 < _g)){
HXLINE(  59)				HX_VARI( Int,r) = _g1++;
HXLINE(  60)				HX_VARI( Int,xOff) = (int)40;
HXLINE(  62)				if ((r >= (int)1)) {
HXLINE(  62)					xOff = (int)56;
            				}
HXLINE(  63)				if ((r >= (int)2)) {
HXLINE(  63)					hx::AddEq(xOff,(int)8);
            				}
HXLINE(  64)				if ((r >= (int)3)) {
HXLINE(  64)					hx::AddEq(xOff,(int)16);
            				}
HXLINE(  66)				{
HXLINE(  66)					HX_VARI( Int,_g3) = (int)0;
HXDLIN(  66)					HX_VARI( Int,_g2) = rows->__get(r).length;
HXDLIN(  66)					while((_g3 < _g2)){
            						HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1, ::Client,_gthis,Int,k,::Array< ::String >,rows,Int,r) HXARGC(0)
            						void _hx_run(){
            							HX_STACK_FRAME("Client","loginState",0xdd4de90b,"Client.loginState","Client.hx",72,0x69b39933)
HXLINE(  72)							::String _hx_tmp4 = _gthis->userField->getText();
HXDLIN(  72)							::String _hx_tmp5 = rows->__get(r).charAt(k);
HXDLIN(  72)							_gthis->userField->setText((_hx_tmp4 + _hx_tmp5));
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  66)						HX_VARI( Int,k) = _g3++;
HXLINE(  67)						HX_VARI(  ::Button,keyButton) =  ::Button_obj::__new(this->g,this->g->login,HX_("keys/blank",b9,a5,12,cf));
HXLINE(  68)						keyButton->set_x(((k * (int)33) + xOff));
HXLINE(  69)						keyButton->set_y(((r * (int)55) + (int)575));
HXLINE(  70)						::String s = rows->__get(r).charAt(k);
HXDLIN(  70)						HX_VARI(  ::openfl::text::TextField,t) =  ::openfl::text::TextField_obj::__new();
HXDLIN(  70)						t->set_embedFonts(true);
HXDLIN(  70)						Float _hx_tmp3 = t->get_width();
HXDLIN(  70)						t->set_x(((int)19 - ((Float)_hx_tmp3 / (Float)(int)2)));
HXDLIN(  70)						t->set_y((int)17);
HXDLIN(  70)						t->set_autoSize((int)0);
HXDLIN(  70)						t->set_selectable(false);
HXDLIN(  70)						 ::openfl::text::Font _this = ::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null());
HXDLIN(  70)						t->setTextFormat( ::openfl::text::TextFormat_obj::__new(_this->name,(int)18,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN(  70)						t->set_text(s);
HXDLIN(  70)						keyButton->addChild(t);
HXLINE(  71)						keyButton->onPop( ::Dynamic(new _hx_Closure_1(_gthis,k,rows,r)));
HXLINE(  75)						this->g->login->addChild(keyButton);
            					}
            				}
            			}
            		}
HXLINE(  79)		this->undoButton =  ::Button_obj::__new(this->g,this->g->login,HX_("key_undo/blank",c9,c7,66,2e));
HXLINE(  80)		this->undoButton->set_x((int)370);
HXLINE(  81)		this->undoButton->set_y((int)575);
HXLINE(  82)		HX_VARI_NAME(  ::openfl::text::TextField,t1,"t") =  ::openfl::text::TextField_obj::__new();
HXDLIN(  82)		t1->set_embedFonts(true);
HXDLIN(  82)		Float _hx_tmp6 = t1->get_width();
HXDLIN(  82)		t1->set_x(((int)35 - ((Float)_hx_tmp6 / (Float)(int)2)));
HXDLIN(  82)		t1->set_y((int)15);
HXDLIN(  82)		t1->set_autoSize((int)0);
HXDLIN(  82)		t1->set_selectable(false);
HXDLIN(  82)		 ::openfl::text::Font _this1 = ::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null());
HXDLIN(  82)		t1->setTextFormat( ::openfl::text::TextFormat_obj::__new(_this1->name,(int)18,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN(  82)		t1->set_text(HX_("Undo",44,f2,82,38));
HXDLIN(  82)		this->undoButton->addChild(t1);
HXLINE(  84)		this->undoButton->onPop( ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(  90)		this->g->login->addChild(this->undoButton);
HXLINE(  91)		this->g->login->addChild(this->loginButton);
HXLINE(  92)		this->addChild(this->g->login);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,loginState,(void))

void Client_obj::resetToUserState(){
            	HX_STACK_FRAME("Client","resetToUserState",0xe344be9f,"Client.resetToUserState","Client.hx",100,0x69b39933)
            	HX_STACK_THIS(this)
HXLINE( 102)		this->loginButton->onPop(this->passStage_dyn());
HXLINE( 103)		this->userField->setText(HX_("",00,00,00,00));
HXLINE( 104)		this->userField->password(false);
HXLINE( 105)		this->passOverlay->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,resetToUserState,(void))

void Client_obj::passStage(){
            	HX_STACK_FRAME("Client","passStage",0x4258fc6a,"Client.passStage","Client.hx",108,0x69b39933)
            	HX_STACK_THIS(this)
HXLINE( 110)		this->g->user = this->userField->getText();
HXLINE( 111)		::haxe::Log_obj::trace((HX_("g.user=",4b,d0,bf,c9) + this->g->user),hx::SourceInfo(HX_("Client.hx",33,99,b3,69),111,HX_("Client",6b,3e,e4,3e),HX_("passStage",2d,e0,22,b6)));
HXLINE( 112)		this->userField->password(true);
HXLINE( 113)		this->userField->setText(HX_("",00,00,00,00));
HXLINE( 115)		this->loginButton->onPop(this->connect_dyn());
HXLINE( 117)		this->passOverlay->set_visible(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,passStage,(void))

void Client_obj::connect(){
            	HX_STACK_FRAME("Client","connect",0xc1c9dee7,"Client.connect","Client.hx",120,0x69b39933)
            	HX_STACK_THIS(this)
HXLINE( 121)		::String pass = this->userField->getText();
HXDLIN( 121)		::String _hx_tmp = ::haxe::crypto::Md5_obj::encode(pass);
HXDLIN( 121)		 ::Connection _hx_tmp1 =  ::Connection_obj::__new(this->g,HX_("llllllll.club",64,ae,21,3e),(int)4200,this->g->user,_hx_tmp);
HXDLIN( 121)		this->connection = _hx_tmp1;
HXLINE( 122)		this->addChild(this->connection);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,connect,(void))

void Client_obj::toFromState(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Client,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic m){
            			HX_STACK_FRAME("Client","toFromState",0x3a9d38c9,"Client.toFromState","Client.hx",129,0x69b39933)
            			HX_STACK_ARG(m,"m")
HXLINE( 130)			_gthis->slide->play(null(),null(),null());
HXLINE( 131)			_gthis->g->radio->push(_gthis->g->inGame);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("Client","toFromState",0x3a9d38c9,"Client.toFromState","Client.hx",125,0x69b39933)
            	HX_STACK_THIS(this)
HXLINE( 125)		HX_VARI(  ::Client,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 126)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/card.png",a6,ee,0f,94)),null());
HXDLIN( 126)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__new(png,null());
HXDLIN( 126)		set->addRect(png->rect);
HXDLIN( 126)		Int _hx_tmp;
HXDLIN( 126)		_hx_tmp = ::Std_obj::_hx_int(set->getRect((int)0)->width);
HXDLIN( 126)		Int _hx_tmp1;
HXDLIN( 126)		_hx_tmp1 = ::Std_obj::_hx_int(set->getRect((int)0)->height);
HXDLIN( 126)		HX_VARI(  ::openfl::display::Tilemap,map) =  ::openfl::display::Tilemap_obj::__new(_hx_tmp,_hx_tmp1,set,null());
HXDLIN( 126)		map->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN( 126)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__new();
HXDLIN( 126)		sprite->addChild(map);
HXDLIN( 126)		sprite->set_x((int)0);
HXDLIN( 126)		sprite->set_y((int)0);
HXLINE( 127)		Float line = sprite->get_height();
HXDLIN( 127)		sprite->set_y((((Float)400.) - ((Float)line / (Float)(int)2)));
HXLINE( 129)		sprite->addEventListener(HX_("click",48,7c,5e,48), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null());
HXLINE( 134)		Float _hx_tmp2 = sprite->get_height();
HXDLIN( 134)		Float y = ((Float)_hx_tmp2 / (Float)(int)2);
HXDLIN( 134)		HX_VARI(  ::openfl::text::TextField,t) =  ::openfl::text::TextField_obj::__new();
HXDLIN( 134)		t->set_embedFonts(true);
HXDLIN( 134)		Float _hx_tmp3 = t->get_width();
HXDLIN( 134)		t->set_x((((Float)240.) - ((Float)_hx_tmp3 / (Float)(int)2)));
HXDLIN( 134)		t->set_y(y);
HXDLIN( 134)		t->set_autoSize((int)0);
HXDLIN( 134)		t->set_selectable(false);
HXDLIN( 134)		 ::openfl::text::Font _this = ::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null());
HXDLIN( 134)		t->setTextFormat( ::openfl::text::TextFormat_obj::__new(_this->name,(int)18,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN( 134)		t->set_text(HX_("",00,00,00,00));
HXDLIN( 134)		this->cardText = t;
HXLINE( 136)		sprite->addChild(this->cardText);
HXLINE( 137)		this->g->toFrom->addChild(sprite);
HXLINE( 138)		this->addChild(this->g->toFrom);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,toFromState,(void))

void Client_obj::inGameState(){
            	HX_STACK_FRAME("Client","inGameState",0x71562997,"Client.inGameState","Client.hx",141,0x69b39933)
            	HX_STACK_THIS(this)
HXLINE( 143)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/gps.png",2a,45,0a,e6)),null());
HXDLIN( 143)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__new(png,null());
HXDLIN( 143)		set->addRect(png->rect);
HXDLIN( 143)		Int _hx_tmp;
HXDLIN( 143)		_hx_tmp = ::Std_obj::_hx_int(set->getRect((int)0)->width);
HXDLIN( 143)		Int _hx_tmp1;
HXDLIN( 143)		_hx_tmp1 = ::Std_obj::_hx_int(set->getRect((int)0)->height);
HXDLIN( 143)		HX_VARI(  ::openfl::display::Tilemap,map) =  ::openfl::display::Tilemap_obj::__new(_hx_tmp,_hx_tmp1,set,null());
HXDLIN( 143)		map->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN( 143)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__new();
HXDLIN( 143)		sprite->addChild(map);
HXDLIN( 143)		sprite->set_x((int)0);
HXDLIN( 143)		sprite->set_y((int)0);
HXLINE( 144)		Float line = sprite->get_width();
HXDLIN( 144)		Float _hx_tmp2 = sprite->set_x((((Float)240.) - ((Float)line / (Float)(int)2)));
HXDLIN( 144)		sprite->set_y(_hx_tmp2);
HXLINE( 147)		HX_VARI(  ::Viewport,view) =  ::Viewport_obj::__new(this->g,(int)49,(int)37,(int)308,(int)174,sprite,this->g->inGame);
HXLINE( 148)		this->g->inGame->addAnimation(view);
HXLINE( 151)		HX_VARI_NAME(  ::openfl::display::BitmapData,png1,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("roller/overlay.png",26,8d,4e,1d)),null());
HXDLIN( 151)		HX_VARI_NAME(  ::openfl::display::Tileset,set1,"set") =  ::openfl::display::Tileset_obj::__new(png1,null());
HXDLIN( 151)		set1->addRect(png1->rect);
HXDLIN( 151)		Int _hx_tmp3;
HXDLIN( 151)		_hx_tmp3 = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
HXDLIN( 151)		Int _hx_tmp4;
HXDLIN( 151)		_hx_tmp4 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
HXDLIN( 151)		HX_VARI_NAME(  ::openfl::display::Tilemap,map1,"map") =  ::openfl::display::Tilemap_obj::__new(_hx_tmp3,_hx_tmp4,set1,null());
HXDLIN( 151)		map1->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN( 151)		HX_VARI_NAME(  ::openfl::display::Sprite,sprite1,"sprite") =  ::openfl::display::Sprite_obj::__new();
HXDLIN( 151)		sprite1->addChild(map1);
HXDLIN( 151)		sprite1->set_x((int)0);
HXDLIN( 151)		sprite1->set_y((int)0);
HXLINE( 152)		Float _hx_tmp5 = sprite1->get_height();
HXDLIN( 152)		sprite1->set_y(((int)800 - _hx_tmp5));
HXLINE( 154)		this->g->v = view;
HXLINE( 156)		this->g->toFromText = this->cardText;
HXLINE( 160)		HX_VARI(  ::Terrain,terrain) =  ::Terrain_obj::__new(this->g);
HXLINE( 161)		{
HXLINE( 161)			Float _hx_tmp6 = terrain->get_y();
HXDLIN( 161)			Float _hx_tmp7 = sprite1->get_height();
HXDLIN( 161)			terrain->set_y((_hx_tmp6 - _hx_tmp7));
            		}
HXLINE( 162)		this->g->t = terrain;
HXLINE( 165)		HX_VARI_NAME(  ::openfl::display::BitmapData,png2,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("lvl/exp.png",ab,0c,ad,7c)),null());
HXDLIN( 165)		HX_VARI_NAME(  ::openfl::display::Tileset,set2,"set") =  ::openfl::display::Tileset_obj::__new(png2,null());
HXDLIN( 165)		set2->addRect(png2->rect);
HXDLIN( 165)		Int _hx_tmp8;
HXDLIN( 165)		_hx_tmp8 = ::Std_obj::_hx_int(set2->getRect((int)0)->width);
HXDLIN( 165)		Int _hx_tmp9;
HXDLIN( 165)		_hx_tmp9 = ::Std_obj::_hx_int(set2->getRect((int)0)->height);
HXDLIN( 165)		HX_VARI_NAME(  ::openfl::display::Tilemap,map2,"map") =  ::openfl::display::Tilemap_obj::__new(_hx_tmp8,_hx_tmp9,set2,null());
HXDLIN( 165)		map2->addTile( ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null()));
HXDLIN( 165)		HX_VARI_NAME(  ::openfl::display::Sprite,sprite2,"sprite") =  ::openfl::display::Sprite_obj::__new();
HXDLIN( 165)		sprite2->addChild(map2);
HXDLIN( 165)		sprite2->set_x((int)0);
HXDLIN( 165)		sprite2->set_y((int)0);
HXLINE( 168)		this->g->l =  ::Level_obj::__new(sprite,sprite2);
HXLINE( 171)		HX_VARI(  ::Card,c1) =  ::Card_obj::__new(this->g,HX_("c1",6e,56,00,00),sprite1);
HXLINE( 172)		c1->i((int)38);
HXLINE( 173)		c1->i((int)96);
HXLINE( 174)		c1->i((int)143);
HXLINE( 175)		c1->i((int)183);
HXLINE( 176)		c1->i((int)223);
HXLINE( 177)		c1->i((int)263);
HXLINE( 179)		this->g->inGame->addChild(c1->sprite);
HXLINE( 180)		this->g->inGame->addAnimation(c1);
HXLINE( 181)		this->g->inGame->addChild(sprite1);
HXLINE( 182)		this->g->inGame->addChild(terrain);
HXLINE( 183)		this->g->inGame->addChild(sprite);
HXLINE( 184)		this->g->inGame->addChild(view);
HXLINE( 185)		this->g->inGame->addChild(this->g->l->text);
HXLINE( 186)		this->g->inGame->addChild(this->g->l);
HXLINE( 187)		this->g->inGame->addAnimation(this->g->l);
HXLINE( 192)		HX_VARI(  ::Die,die) =  ::Die_obj::__new(this->g,c1);
HXLINE( 194)		Float line1 = die->get_width();
HXDLIN( 194)		die->set_x((((Float)240.) - ((Float)line1 / (Float)(int)2)));
HXLINE( 195)		Float line2 = die->get_height();
HXDLIN( 195)		Float _hx_tmp10 = (((Float)400.) - ((Float)line2 / (Float)(int)2));
HXLINE( 196)		Float _hx_tmp11 = die->get_height();
HXLINE( 195)		Float _hx_tmp12 = (_hx_tmp10 + _hx_tmp11);
HXLINE( 197)		Float _hx_tmp13 = sprite1->get_height();
HXLINE( 195)		die->set_y((_hx_tmp12 - _hx_tmp13));
HXLINE( 199)		this->g->inGame->addChild(die);
HXLINE( 200)		this->g->inGame->addAnimation(die);
HXLINE( 203)		HX_VARI(  ::Paperdoll,pdH) =  ::Paperdoll_obj::__new(HX_("headlights",fd,eb,00,2a),die);
HXLINE( 204)		this->g->inGame->addChild(pdH);
HXLINE( 205)		this->g->inGame->addAnimation(pdH);
HXLINE( 208)		die->paperdoll = pdH;
HXLINE( 211)		this->g->inGame->addChild(sprite2);
HXLINE( 212)		this->addChild(this->g->inGame);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,inGameState,(void))


Client_obj::Client_obj()
{
}

void Client_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Client);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(slide,"slide");
	HX_MARK_MEMBER_NAME(loginText,"loginText");
	HX_MARK_MEMBER_NAME(cardText,"cardText");
	HX_MARK_MEMBER_NAME(connection,"connection");
	HX_MARK_MEMBER_NAME(loginButton,"loginButton");
	HX_MARK_MEMBER_NAME(userField,"userField");
	HX_MARK_MEMBER_NAME(undoButton,"undoButton");
	HX_MARK_MEMBER_NAME(passOverlay,"passOverlay");
	 ::Game_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Client_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(slide,"slide");
	HX_VISIT_MEMBER_NAME(loginText,"loginText");
	HX_VISIT_MEMBER_NAME(cardText,"cardText");
	HX_VISIT_MEMBER_NAME(connection,"connection");
	HX_VISIT_MEMBER_NAME(loginButton,"loginButton");
	HX_VISIT_MEMBER_NAME(userField,"userField");
	HX_VISIT_MEMBER_NAME(undoButton,"undoButton");
	HX_VISIT_MEMBER_NAME(passOverlay,"passOverlay");
	 ::Game_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Client_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slide") ) { return hx::Val( slide); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"connect") ) { return hx::Val( connect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cardText") ) { return hx::Val( cardText); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loginText") ) { return hx::Val( loginText); }
		if (HX_FIELD_EQ(inName,"userField") ) { return hx::Val( userField); }
		if (HX_FIELD_EQ(inName,"passStage") ) { return hx::Val( passStage_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"connection") ) { return hx::Val( connection); }
		if (HX_FIELD_EQ(inName,"loginState") ) { return hx::Val( loginState_dyn()); }
		if (HX_FIELD_EQ(inName,"undoButton") ) { return hx::Val( undoButton); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loginButton") ) { return hx::Val( loginButton); }
		if (HX_FIELD_EQ(inName,"passOverlay") ) { return hx::Val( passOverlay); }
		if (HX_FIELD_EQ(inName,"toFromState") ) { return hx::Val( toFromState_dyn()); }
		if (HX_FIELD_EQ(inName,"inGameState") ) { return hx::Val( inGameState_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"resetToUserState") ) { return hx::Val( resetToUserState_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Client_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slide") ) { slide=inValue.Cast<  ::openfl::media::Sound >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cardText") ) { cardText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loginText") ) { loginText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"userField") ) { userField=inValue.Cast<  ::Field >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"connection") ) { connection=inValue.Cast<  ::Connection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"undoButton") ) { undoButton=inValue.Cast<  ::Button >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loginButton") ) { loginButton=inValue.Cast<  ::Button >(); return inValue; }
		if (HX_FIELD_EQ(inName,"passOverlay") ) { passOverlay=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Client_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e"));
	outFields->push(HX_HCSTRING("loginText","\xb6","\x3a","\x3a","\x0f"));
	outFields->push(HX_HCSTRING("cardText","\x9d","\x3e","\xb8","\x40"));
	outFields->push(HX_HCSTRING("connection","\x1e","\xa0","\x12","\xf5"));
	outFields->push(HX_HCSTRING("loginButton","\x3b","\x24","\x9f","\xff"));
	outFields->push(HX_HCSTRING("userField","\x6f","\x42","\x66","\xaa"));
	outFields->push(HX_HCSTRING("undoButton","\x36","\xcf","\xbb","\xf3"));
	outFields->push(HX_HCSTRING("passOverlay","\xbf","\x32","\x03","\x28"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Client_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Client_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::media::Sound*/ ,(int)offsetof(Client_obj,slide),HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Client_obj,loginText),HX_HCSTRING("loginText","\xb6","\x3a","\x3a","\x0f")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Client_obj,cardText),HX_HCSTRING("cardText","\x9d","\x3e","\xb8","\x40")},
	{hx::fsObject /*::Connection*/ ,(int)offsetof(Client_obj,connection),HX_HCSTRING("connection","\x1e","\xa0","\x12","\xf5")},
	{hx::fsObject /*::Button*/ ,(int)offsetof(Client_obj,loginButton),HX_HCSTRING("loginButton","\x3b","\x24","\x9f","\xff")},
	{hx::fsObject /*::Field*/ ,(int)offsetof(Client_obj,userField),HX_HCSTRING("userField","\x6f","\x42","\x66","\xaa")},
	{hx::fsObject /*::Button*/ ,(int)offsetof(Client_obj,undoButton),HX_HCSTRING("undoButton","\x36","\xcf","\xbb","\xf3")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Client_obj,passOverlay),HX_HCSTRING("passOverlay","\xbf","\x32","\x03","\x28")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Client_obj_sStaticStorageInfo = 0;
#endif

static ::String Client_obj_sMemberFields[] = {
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e"),
	HX_HCSTRING("loginText","\xb6","\x3a","\x3a","\x0f"),
	HX_HCSTRING("cardText","\x9d","\x3e","\xb8","\x40"),
	HX_HCSTRING("connection","\x1e","\xa0","\x12","\xf5"),
	HX_HCSTRING("loginState","\xe8","\x4f","\x2b","\xba"),
	HX_HCSTRING("loginButton","\x3b","\x24","\x9f","\xff"),
	HX_HCSTRING("userField","\x6f","\x42","\x66","\xaa"),
	HX_HCSTRING("undoButton","\x36","\xcf","\xbb","\xf3"),
	HX_HCSTRING("passOverlay","\xbf","\x32","\x03","\x28"),
	HX_HCSTRING("resetToUserState","\x3c","\x29","\x3a","\xb7"),
	HX_HCSTRING("passStage","\x2d","\xe0","\x22","\xb6"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("toFromState","\x4c","\xd3","\x79","\x9f"),
	HX_HCSTRING("inGameState","\x1a","\xc4","\x32","\xd6"),
	::String(null()) };

static void Client_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Client_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Client_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Client_obj::__mClass,"__mClass");
};

#endif

hx::Class Client_obj::__mClass;

void Client_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Client","\x6b","\x3e","\xe4","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Client_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Client_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Client_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Client_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Client_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Client_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

