// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
#ifndef INCLUDED_Animation
#include <Animation.h>
#endif
#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_Client
#include <Client.h>
#endif
#ifndef INCLUDED_Connection
#include <Connection.h>
#endif
#ifndef INCLUDED_Die
#include <Die.h>
#endif
#ifndef INCLUDED_Field
#include <Field.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_IButton
#include <IButton.h>
#endif
#ifndef INCLUDED_Level
#include <Level.h>
#endif
#ifndef INCLUDED_Paperdoll
#include <Paperdoll.h>
#endif
#ifndef INCLUDED_Radio
#include <Radio.h>
#endif
#ifndef INCLUDED_SpriteSheet
#include <SpriteSheet.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Terrain
#include <Terrain.h>
#endif
#ifndef INCLUDED_Viewport
#include <Viewport.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_14_new,"Client","new",0x1376f0dd,"Client.new","Client.hx",14,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_44_loginState,"Client","loginState",0xdd4de90b,"Client.loginState","Client.hx",44,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_85_loginState,"Client","loginState",0xdd4de90b,"Client.loginState","Client.hx",85,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_41_loginState,"Client","loginState",0xdd4de90b,"Client.loginState","Client.hx",41,0x69b39933)
static const ::String _hx_array_data_3ee43e6b_6[] = {
	HX_("1234567890",5b,2e,e3,45),HX_("QWERTYUIOP",8d,25,1e,51),HX_("ASDFGHJKL",76,6b,98,34),HX_("ZXCVBNM",b0,10,d7,9a),
};
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_72_loginState,"Client","loginState",0xdd4de90b,"Client.loginState","Client.hx",72,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_100_resetToUserState,"Client","resetToUserState",0xe344be9f,"Client.resetToUserState","Client.hx",100,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_109_passStage,"Client","passStage",0x4258fc6a,"Client.passStage","Client.hx",109,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_121_connect,"Client","connect",0xc1c9dee7,"Client.connect","Client.hx",121,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_131_toFromState,"Client","toFromState",0x3a9d38c9,"Client.toFromState","Client.hx",131,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_127_toFromState,"Client","toFromState",0x3a9d38c9,"Client.toFromState","Client.hx",127,0x69b39933)
HX_LOCAL_STACK_FRAME(_hx_pos_5a610b2da8ab5f1f_143_inGameState,"Client","inGameState",0x71562997,"Client.inGameState","Client.hx",143,0x69b39933)

void Client_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_14_new)
HXLINE(  16)		this->slide = ::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + HX_("etc/slide.ogg",97,c2,4b,a7)));
HXLINE(  15)		this->g =  ::Globals_obj::__alloc( HX_CTX );
HXLINE(  22)		super::__construct();
HXLINE(  25)		int w = (int)-1;
HXDLIN(  25)		int h = (int)-1;
HXDLIN(  25)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/bg.png",5b,18,b4,cf)),null());
HXDLIN(  25)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN(  25)		set->addRect(png->rect);
HXDLIN(  25)		 ::openfl::display::Tileset set1 = set;
HXDLIN(  25)		int map;
HXDLIN(  25)		if ((w < (int)0)) {
HXLINE(  25)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE(  25)			map = w;
            		}
HXDLIN(  25)		int map1;
HXDLIN(  25)		if ((h < (int)0)) {
HXLINE(  25)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE(  25)			map1 = h;
            		}
HXDLIN(  25)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN(  25)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN(  25)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  25)		sprite->addChild(map2);
HXDLIN(  25)		 ::openfl::display::Sprite sprite1 = sprite;
HXDLIN(  25)		sprite1->set_x((int)0);
HXDLIN(  25)		sprite1->set_y((int)0);
HXDLIN(  25)		this->addChild(sprite1);
HXLINE(  27)		Float _hx_tmp = ((Float)this->stage->stageWidth / (Float)(int)480);
HXDLIN(  27)		this->set_scaleY(this->set_scaleX(::Math_obj::min(_hx_tmp,((Float)this->stage->stageHeight / (Float)(int)800))));
HXLINE(  29)		 ::openfl::media::Sound bgm = ::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + HX_("etc/bgm.ogg",ae,70,80,08)));
            	}

Dynamic Client_obj::__CreateEmpty() { return new Client_obj; }

void *Client_obj::_hx_vtable = 0;

Dynamic Client_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Client_obj > _hx_result = new Client_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Client_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x3ee43e6b) {
			return inClassId==(int)0x2f382012 || inClassId==(int)0x3ee43e6b;
		} else {
			return inClassId==(int)0x3f2b00af;
		}
	}
}

void Client_obj::loginState(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Client,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic _){
            			HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_44_loginState)
HXLINE(  44)			_gthis->resetToUserState();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Client,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_85_loginState)
HXLINE(  85)			if ((_gthis->userField->size() > (int)0)) {
HXLINE(  86)				 ::Field _gthis2 = _gthis->userField;
HXDLIN(  86)				::String _hx_tmp6 = _gthis->userField->getText();
HXDLIN(  86)				_gthis2->setText(_hx_tmp6.substr((int)0,(_gthis->userField->size() - (int)1)));
            			}
            			else {
HXLINE(  87)				_gthis->resetToUserState();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_41_loginState)
HXLINE(  41)		 ::Client _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  42)		int w = (int)-1;
HXDLIN(  42)		int h = (int)-1;
HXDLIN(  42)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("login/pass.png",32,c7,b6,21)),null());
HXDLIN(  42)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN(  42)		set->addRect(png->rect);
HXDLIN(  42)		 ::openfl::display::Tileset set1 = set;
HXDLIN(  42)		int map;
HXDLIN(  42)		if ((w < (int)0)) {
HXLINE(  42)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE(  42)			map = w;
            		}
HXDLIN(  42)		int map1;
HXDLIN(  42)		if ((h < (int)0)) {
HXLINE(  42)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE(  42)			map1 = h;
            		}
HXDLIN(  42)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN(  42)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN(  42)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  42)		sprite->addChild(map2);
HXDLIN(  42)		 ::openfl::display::Sprite sprite1 = sprite;
HXDLIN(  42)		sprite1->set_x((int)0);
HXDLIN(  42)		sprite1->set_y((int)0);
HXDLIN(  42)		this->passOverlay = sprite1;
HXLINE(  43)		this->passOverlay->set_visible(false);
HXLINE(  44)		this->passOverlay->addEventListener(HX_("mouseDown",27,b1,c2,ee), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null());
HXLINE(  45)		this->g->login->addChild(this->passOverlay);
HXLINE(  47)		this->loginButton =  ::Button_obj::__alloc( HX_CTX ,this->g,this->g->login,HX_("login/login",03,1d,e4,34));
HXLINE(  48)		 ::Button _hx_tmp = this->loginButton;
HXDLIN(  48)		_hx_tmp->set_x((((Float)240.) - ((Float)this->loginButton->get_width() / (Float)(int)2)));
HXLINE(  49)		 ::Button _hx_tmp1 = this->loginButton;
HXDLIN(  49)		_hx_tmp1->set_y((((Float)400.) - ((Float)this->loginButton->get_height() / (Float)(int)2)));
HXLINE(  50)		this->loginButton->onPop(this->passStage_dyn());
HXLINE(  52)		 ::Globals _hx_tmp2 = this->g;
HXDLIN(  52)		this->userField =  ::Field_obj::__alloc( HX_CTX ,_hx_tmp2,((Float)240.),((Float)this->loginButton->get_y() / (Float)(int)2),null());
HXLINE(  53)		this->g->login->addChild(this->userField);
HXLINE(  55)		::Array< ::String > rows = ::Array_obj< ::String >::fromData( _hx_array_data_3ee43e6b_6,4);
HXLINE(  56)		int keysX = (int)40;
HXLINE(  57)		int keysY = (int)575;
HXLINE(  59)		{
HXLINE(  59)			int _g1 = (int)0;
HXDLIN(  59)			int _g = rows->length;
HXDLIN(  59)			while((_g1 < _g)){
HXLINE(  59)				_g1 = (_g1 + (int)1);
HXDLIN(  59)				int r = (_g1 - (int)1);
HXLINE(  60)				int xOff = keysX;
HXLINE(  62)				if ((r >= (int)1)) {
HXLINE(  62)					xOff = (xOff + (int)16);
            				}
HXLINE(  63)				if ((r >= (int)2)) {
HXLINE(  63)					xOff = (xOff + (int)8);
            				}
HXLINE(  64)				if ((r >= (int)3)) {
HXLINE(  64)					xOff = (xOff + (int)16);
            				}
HXLINE(  66)				{
HXLINE(  66)					int _g3 = (int)0;
HXDLIN(  66)					int _g2 = rows->__get(r).length;
HXDLIN(  66)					while((_g3 < _g2)){
            						HX_BEGIN_LOCAL_FUNC_S4(hx::LocalFunc,_hx_Closure_1, ::Client,_gthis,int,k,::Array< ::String >,rows,int,r) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_72_loginState)
HXLINE(  72)							 ::Field _gthis1 = _gthis->userField;
HXDLIN(  72)							::String _hx_tmp3 = _gthis->userField->getText();
HXDLIN(  72)							_gthis1->setText((_hx_tmp3 + rows->__get(r).charAt(k)));
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  66)						_g3 = (_g3 + (int)1);
HXDLIN(  66)						int k = (_g3 - (int)1);
HXLINE(  67)						 ::Button keyButton =  ::Button_obj::__alloc( HX_CTX ,this->g,this->g->login,HX_("keys/blank",b9,a5,12,cf));
HXLINE(  68)						keyButton->set_x(((k * (int)33) + xOff));
HXLINE(  69)						keyButton->set_y(((r * (int)55) + keysY));
HXLINE(  70)						::String s = rows->__get(r).charAt(k);
HXDLIN(  70)						 ::openfl::text::TextField t =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXDLIN(  70)						t->set_embedFonts(true);
HXDLIN(  70)						t->set_x(((int)19 - ((Float)t->get_width() / (Float)(int)2)));
HXDLIN(  70)						t->set_y((int)17);
HXDLIN(  70)						t->set_autoSize((int)0);
HXDLIN(  70)						t->set_selectable(false);
HXDLIN(  70)						t->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,(int)18,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN(  70)						t->set_text(s);
HXDLIN(  70)						keyButton->addChild(t);
HXLINE(  71)						keyButton->onPop( ::Dynamic(new _hx_Closure_1(_gthis,k,rows,r)));
HXLINE(  75)						this->g->login->addChild(keyButton);
            					}
            				}
            			}
            		}
HXLINE(  79)		this->undoButton =  ::Button_obj::__alloc( HX_CTX ,this->g,this->g->login,HX_("key_undo/blank",c9,c7,66,2e));
HXLINE(  80)		 ::Button _hx_tmp4 = this->undoButton;
HXDLIN(  80)		_hx_tmp4->set_x((keysX + (int)330));
HXLINE(  81)		this->undoButton->set_y(keysY);
HXLINE(  82)		 ::Button _hx_tmp5 = this->undoButton;
HXDLIN(  82)		 ::openfl::text::TextField t1 =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXDLIN(  82)		t1->set_embedFonts(true);
HXDLIN(  82)		t1->set_x(((int)35 - ((Float)t1->get_width() / (Float)(int)2)));
HXDLIN(  82)		t1->set_y((int)15);
HXDLIN(  82)		t1->set_autoSize((int)0);
HXDLIN(  82)		t1->set_selectable(false);
HXDLIN(  82)		t1->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,(int)18,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN(  82)		t1->set_text(HX_("Undo",44,f2,82,38));
HXDLIN(  82)		_hx_tmp5->addChild(t1);
HXLINE(  84)		this->undoButton->onPop( ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(  90)		this->g->login->addChild(this->undoButton);
HXLINE(  91)		this->g->login->addChild(this->loginButton);
HXLINE(  92)		this->addChild(this->g->login);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,loginState,(void))

void Client_obj::resetToUserState(){
            	HX_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_100_resetToUserState)
HXLINE( 102)		this->loginButton->onPop(this->passStage_dyn());
HXLINE( 103)		this->g->user = HX_("",00,00,00,00);
HXLINE( 104)		this->userField->setText(HX_("",00,00,00,00));
HXLINE( 105)		this->userField->password(false);
HXLINE( 106)		this->passOverlay->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,resetToUserState,(void))

void Client_obj::passStage(){
            	HX_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_109_passStage)
HXLINE( 111)		this->g->user = this->userField->getText();
HXLINE( 112)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 112)		_hx_tmp((HX_("g.user=",4b,d0,bf,c9) + this->g->user),hx::SourceInfo(HX_("Client.hx",33,99,b3,69),112,HX_("Client",6b,3e,e4,3e),HX_("passStage",2d,e0,22,b6)));
HXLINE( 113)		this->userField->password(true);
HXLINE( 114)		this->userField->setText(HX_("",00,00,00,00));
HXLINE( 116)		this->loginButton->onPop(this->connect_dyn());
HXLINE( 118)		this->passOverlay->set_visible(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,passStage,(void))

void Client_obj::connect(){
            	HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_121_connect)
HXLINE( 122)		::haxe::Log_obj::trace(HX_("connect",ea,3b,80,15),hx::SourceInfo(HX_("Client.hx",33,99,b3,69),122,HX_("Client",6b,3e,e4,3e),HX_("connect",ea,3b,80,15)));
HXLINE( 123)		 ::Globals g = this->g;
HXDLIN( 123)		::String user = this->g->user;
HXDLIN( 123)		this->connection =  ::Connection_obj::__alloc( HX_CTX ,g,HX_("llllllll.club",64,ae,21,3e),(int)4200,user,::haxe::crypto::Md5_obj::encode(this->userField->getText()));
HXLINE( 124)		this->addChild(this->connection);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,connect,(void))

void Client_obj::toFromState(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Client,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic m){
            			HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_131_toFromState)
HXLINE( 132)			_gthis->slide->play(null(),null(),null());
HXLINE( 133)			_gthis->g->radio->push(_gthis->g->inGame);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_127_toFromState)
HXLINE( 127)		 ::Client _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 128)		int w = (int)-1;
HXDLIN( 128)		int h = (int)-1;
HXDLIN( 128)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/card.png",a6,ee,0f,94)),null());
HXDLIN( 128)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 128)		set->addRect(png->rect);
HXDLIN( 128)		 ::openfl::display::Tileset set1 = set;
HXDLIN( 128)		int map;
HXDLIN( 128)		if ((w < (int)0)) {
HXLINE( 128)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE( 128)			map = w;
            		}
HXDLIN( 128)		int map1;
HXDLIN( 128)		if ((h < (int)0)) {
HXLINE( 128)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE( 128)			map1 = h;
            		}
HXDLIN( 128)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN( 128)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN( 128)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN( 128)		sprite->addChild(map2);
HXDLIN( 128)		 ::openfl::display::Sprite sprite1 = sprite;
HXDLIN( 128)		sprite1->set_x((int)0);
HXDLIN( 128)		sprite1->set_y((int)0);
HXDLIN( 128)		 ::openfl::display::Sprite card = sprite1;
HXLINE( 129)		card->set_y((((Float)400.) - ((Float)card->get_height() / (Float)(int)2)));
HXLINE( 131)		card->addEventListener(HX_("click",48,7c,5e,48), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null());
HXLINE( 136)		Float y = ((Float)card->get_height() / (Float)(int)2);
HXDLIN( 136)		 ::openfl::text::TextField t =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXDLIN( 136)		t->set_embedFonts(true);
HXDLIN( 136)		t->set_x((((Float)240.) - ((Float)t->get_width() / (Float)(int)2)));
HXDLIN( 136)		t->set_y(y);
HXDLIN( 136)		t->set_autoSize((int)0);
HXDLIN( 136)		t->set_selectable(false);
HXDLIN( 136)		t->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,(int)18,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXDLIN( 136)		t->set_text(HX_("",00,00,00,00));
HXDLIN( 136)		this->cardText = t;
HXLINE( 138)		card->addChild(this->cardText);
HXLINE( 139)		this->g->toFrom->addChild(card);
HXLINE( 140)		this->addChild(this->g->toFrom);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,toFromState,(void))

void Client_obj::inGameState(){
            	HX_GC_STACKFRAME(&_hx_pos_5a610b2da8ab5f1f_143_inGameState)
HXLINE( 145)		int w = (int)-1;
HXDLIN( 145)		int h = (int)-1;
HXDLIN( 145)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/gps.png",2a,45,0a,e6)),null());
HXDLIN( 145)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 145)		set->addRect(png->rect);
HXDLIN( 145)		 ::openfl::display::Tileset set1 = set;
HXDLIN( 145)		int map;
HXDLIN( 145)		if ((w < (int)0)) {
HXLINE( 145)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE( 145)			map = w;
            		}
HXDLIN( 145)		int map1;
HXDLIN( 145)		if ((h < (int)0)) {
HXLINE( 145)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE( 145)			map1 = h;
            		}
HXDLIN( 145)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN( 145)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN( 145)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN( 145)		sprite->addChild(map2);
HXDLIN( 145)		 ::openfl::display::Sprite sprite1 = sprite;
HXDLIN( 145)		sprite1->set_x((int)0);
HXDLIN( 145)		sprite1->set_y((int)0);
HXDLIN( 145)		 ::openfl::display::Sprite gps = sprite1;
HXLINE( 146)		gps->set_y(gps->set_x((((Float)240.) - ((Float)gps->get_width() / (Float)(int)2))));
HXLINE( 149)		 ::Viewport view =  ::Viewport_obj::__alloc( HX_CTX ,this->g,(int)49,(int)37,(int)308,(int)174,gps,this->g->inGame);
HXLINE( 150)		this->g->inGame->addAnimation(view);
HXLINE( 153)		int w1 = (int)-1;
HXDLIN( 153)		int h1 = (int)-1;
HXDLIN( 153)		 ::openfl::display::BitmapData png1 = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("roller/overlay.png",26,8d,4e,1d)),null());
HXDLIN( 153)		 ::openfl::display::Tileset set2 =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png1,null());
HXDLIN( 153)		set2->addRect(png1->rect);
HXDLIN( 153)		 ::openfl::display::Tileset set3 = set2;
HXDLIN( 153)		int map3;
HXDLIN( 153)		if ((w1 < (int)0)) {
HXLINE( 153)			map3 = ::Std_obj::_hx_int(set3->getRect((int)0)->width);
            		}
            		else {
HXLINE( 153)			map3 = w1;
            		}
HXDLIN( 153)		int map4;
HXDLIN( 153)		if ((h1 < (int)0)) {
HXLINE( 153)			map4 = ::Std_obj::_hx_int(set3->getRect((int)0)->height);
            		}
            		else {
HXLINE( 153)			map4 = h1;
            		}
HXDLIN( 153)		 ::openfl::display::Tilemap map5 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map3,map4,set3,null());
HXDLIN( 153)		map5->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN( 153)		 ::openfl::display::Sprite sprite2 =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN( 153)		sprite2->addChild(map5);
HXDLIN( 153)		 ::openfl::display::Sprite sprite3 = sprite2;
HXDLIN( 153)		sprite3->set_x((int)0);
HXDLIN( 153)		sprite3->set_y((int)0);
HXDLIN( 153)		 ::openfl::display::Sprite roller = sprite3;
HXLINE( 154)		roller->set_y(((int)800 - roller->get_height()));
HXLINE( 156)		this->g->v = view;
HXLINE( 158)		this->g->toFromText = this->cardText;
HXLINE( 162)		 ::Terrain terrain =  ::Terrain_obj::__alloc( HX_CTX ,this->g);
HXLINE( 163)		{
HXLINE( 163)			 ::Terrain _g = terrain;
HXDLIN( 163)			Float _hx_tmp = _g->get_y();
HXDLIN( 163)			_g->set_y((_hx_tmp - roller->get_height()));
            		}
HXLINE( 164)		this->g->t = terrain;
HXLINE( 167)		int w2 = (int)-1;
HXDLIN( 167)		int h2 = (int)-1;
HXDLIN( 167)		 ::openfl::display::BitmapData png2 = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("lvl/exp.png",ab,0c,ad,7c)),null());
HXDLIN( 167)		 ::openfl::display::Tileset set4 =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png2,null());
HXDLIN( 167)		set4->addRect(png2->rect);
HXDLIN( 167)		 ::openfl::display::Tileset set5 = set4;
HXDLIN( 167)		int map6;
HXDLIN( 167)		if ((w2 < (int)0)) {
HXLINE( 167)			map6 = ::Std_obj::_hx_int(set5->getRect((int)0)->width);
            		}
            		else {
HXLINE( 167)			map6 = w2;
            		}
HXDLIN( 167)		int map7;
HXDLIN( 167)		if ((h2 < (int)0)) {
HXLINE( 167)			map7 = ::Std_obj::_hx_int(set5->getRect((int)0)->height);
            		}
            		else {
HXLINE( 167)			map7 = h2;
            		}
HXDLIN( 167)		 ::openfl::display::Tilemap map8 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map6,map7,set5,null());
HXDLIN( 167)		map8->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN( 167)		 ::openfl::display::Sprite sprite4 =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN( 167)		sprite4->addChild(map8);
HXDLIN( 167)		 ::openfl::display::Sprite sprite5 = sprite4;
HXDLIN( 167)		sprite5->set_x((int)0);
HXDLIN( 167)		sprite5->set_y((int)0);
HXDLIN( 167)		 ::openfl::display::Sprite bar = sprite5;
HXLINE( 170)		this->g->l =  ::Level_obj::__alloc( HX_CTX ,gps,bar);
HXLINE( 173)		 ::Card c1 =  ::Card_obj::__alloc( HX_CTX ,this->g,HX_("c1",6e,56,00,00),roller);
HXLINE( 174)		c1->i((int)38);
HXLINE( 175)		c1->i((int)96);
HXLINE( 176)		c1->i((int)143);
HXLINE( 177)		c1->i((int)183);
HXLINE( 178)		c1->i((int)223);
HXLINE( 179)		c1->i((int)263);
HXLINE( 181)		this->g->inGame->addChild(c1->sprite);
HXLINE( 182)		this->g->inGame->addAnimation(c1);
HXLINE( 183)		this->g->inGame->addChild(roller);
HXLINE( 184)		this->g->inGame->addChild(terrain);
HXLINE( 185)		this->g->inGame->addChild(gps);
HXLINE( 186)		this->g->inGame->addChild(view);
HXLINE( 187)		this->g->inGame->addChild(this->g->l->text);
HXLINE( 188)		this->g->inGame->addChild(this->g->l);
HXLINE( 189)		this->g->inGame->addAnimation(this->g->l);
HXLINE( 194)		 ::Die die =  ::Die_obj::__alloc( HX_CTX ,this->g,c1);
HXLINE( 196)		die->set_x((((Float)240.) - ((Float)die->get_width() / (Float)(int)2)));
HXLINE( 197)		Float _hx_tmp1 = (((Float)400.) - ((Float)die->get_height() / (Float)(int)2));
HXDLIN( 197)		Float _hx_tmp2 = (_hx_tmp1 + die->get_height());
HXDLIN( 197)		die->set_y((_hx_tmp2 - roller->get_height()));
HXLINE( 201)		this->g->inGame->addChild(die);
HXLINE( 202)		this->g->inGame->addAnimation(die);
HXLINE( 205)		 ::Paperdoll pdH =  ::Paperdoll_obj::__alloc( HX_CTX ,HX_("headlights",fd,eb,00,2a),die);
HXLINE( 206)		this->g->inGame->addChild(pdH);
HXLINE( 207)		this->g->inGame->addAnimation(pdH);
HXLINE( 210)		die->paperdoll = pdH;
HXLINE( 213)		this->g->inGame->addChild(bar);
HXLINE( 214)		this->addChild(this->g->inGame);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Client_obj,inGameState,(void))


hx::ObjectPtr< Client_obj > Client_obj::__new() {
	hx::ObjectPtr< Client_obj > __this = new Client_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Client_obj > Client_obj::__alloc(hx::Ctx *_hx_ctx) {
	Client_obj *__this = (Client_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Client_obj), true, "Client"));
	*(void **)__this = Client_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Client_obj::Client_obj()
{
}

void Client_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Client);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(slide,"slide");
	HX_MARK_MEMBER_NAME(loginText,"loginText");
	HX_MARK_MEMBER_NAME(cardText,"cardText");
	HX_MARK_MEMBER_NAME(connection,"connection");
	HX_MARK_MEMBER_NAME(loginButton,"loginButton");
	HX_MARK_MEMBER_NAME(userField,"userField");
	HX_MARK_MEMBER_NAME(undoButton,"undoButton");
	HX_MARK_MEMBER_NAME(passOverlay,"passOverlay");
	 ::Game_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Client_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(slide,"slide");
	HX_VISIT_MEMBER_NAME(loginText,"loginText");
	HX_VISIT_MEMBER_NAME(cardText,"cardText");
	HX_VISIT_MEMBER_NAME(connection,"connection");
	HX_VISIT_MEMBER_NAME(loginButton,"loginButton");
	HX_VISIT_MEMBER_NAME(userField,"userField");
	HX_VISIT_MEMBER_NAME(undoButton,"undoButton");
	HX_VISIT_MEMBER_NAME(passOverlay,"passOverlay");
	 ::Game_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Client_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slide") ) { return hx::Val( slide); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"connect") ) { return hx::Val( connect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cardText") ) { return hx::Val( cardText); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loginText") ) { return hx::Val( loginText); }
		if (HX_FIELD_EQ(inName,"userField") ) { return hx::Val( userField); }
		if (HX_FIELD_EQ(inName,"passStage") ) { return hx::Val( passStage_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"connection") ) { return hx::Val( connection); }
		if (HX_FIELD_EQ(inName,"loginState") ) { return hx::Val( loginState_dyn()); }
		if (HX_FIELD_EQ(inName,"undoButton") ) { return hx::Val( undoButton); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loginButton") ) { return hx::Val( loginButton); }
		if (HX_FIELD_EQ(inName,"passOverlay") ) { return hx::Val( passOverlay); }
		if (HX_FIELD_EQ(inName,"toFromState") ) { return hx::Val( toFromState_dyn()); }
		if (HX_FIELD_EQ(inName,"inGameState") ) { return hx::Val( inGameState_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"resetToUserState") ) { return hx::Val( resetToUserState_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Client_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"slide") ) { slide=inValue.Cast<  ::openfl::media::Sound >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cardText") ) { cardText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loginText") ) { loginText=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"userField") ) { userField=inValue.Cast<  ::Field >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"connection") ) { connection=inValue.Cast<  ::Connection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"undoButton") ) { undoButton=inValue.Cast<  ::Button >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"loginButton") ) { loginButton=inValue.Cast<  ::Button >(); return inValue; }
		if (HX_FIELD_EQ(inName,"passOverlay") ) { passOverlay=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Client_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e"));
	outFields->push(HX_HCSTRING("loginText","\xb6","\x3a","\x3a","\x0f"));
	outFields->push(HX_HCSTRING("cardText","\x9d","\x3e","\xb8","\x40"));
	outFields->push(HX_HCSTRING("connection","\x1e","\xa0","\x12","\xf5"));
	outFields->push(HX_HCSTRING("loginButton","\x3b","\x24","\x9f","\xff"));
	outFields->push(HX_HCSTRING("userField","\x6f","\x42","\x66","\xaa"));
	outFields->push(HX_HCSTRING("undoButton","\x36","\xcf","\xbb","\xf3"));
	outFields->push(HX_HCSTRING("passOverlay","\xbf","\x32","\x03","\x28"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Client_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Client_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::media::Sound*/ ,(int)offsetof(Client_obj,slide),HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Client_obj,loginText),HX_HCSTRING("loginText","\xb6","\x3a","\x3a","\x0f")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Client_obj,cardText),HX_HCSTRING("cardText","\x9d","\x3e","\xb8","\x40")},
	{hx::fsObject /*::Connection*/ ,(int)offsetof(Client_obj,connection),HX_HCSTRING("connection","\x1e","\xa0","\x12","\xf5")},
	{hx::fsObject /*::Button*/ ,(int)offsetof(Client_obj,loginButton),HX_HCSTRING("loginButton","\x3b","\x24","\x9f","\xff")},
	{hx::fsObject /*::Field*/ ,(int)offsetof(Client_obj,userField),HX_HCSTRING("userField","\x6f","\x42","\x66","\xaa")},
	{hx::fsObject /*::Button*/ ,(int)offsetof(Client_obj,undoButton),HX_HCSTRING("undoButton","\x36","\xcf","\xbb","\xf3")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Client_obj,passOverlay),HX_HCSTRING("passOverlay","\xbf","\x32","\x03","\x28")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Client_obj_sStaticStorageInfo = 0;
#endif

static ::String Client_obj_sMemberFields[] = {
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e"),
	HX_HCSTRING("loginText","\xb6","\x3a","\x3a","\x0f"),
	HX_HCSTRING("cardText","\x9d","\x3e","\xb8","\x40"),
	HX_HCSTRING("connection","\x1e","\xa0","\x12","\xf5"),
	HX_HCSTRING("loginState","\xe8","\x4f","\x2b","\xba"),
	HX_HCSTRING("loginButton","\x3b","\x24","\x9f","\xff"),
	HX_HCSTRING("userField","\x6f","\x42","\x66","\xaa"),
	HX_HCSTRING("undoButton","\x36","\xcf","\xbb","\xf3"),
	HX_HCSTRING("passOverlay","\xbf","\x32","\x03","\x28"),
	HX_HCSTRING("resetToUserState","\x3c","\x29","\x3a","\xb7"),
	HX_HCSTRING("passStage","\x2d","\xe0","\x22","\xb6"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("toFromState","\x4c","\xd3","\x79","\x9f"),
	HX_HCSTRING("inGameState","\x1a","\xc4","\x32","\xd6"),
	::String(null()) };

static void Client_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Client_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Client_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Client_obj::__mClass,"__mClass");
};

#endif

hx::Class Client_obj::__mClass;

void Client_obj::__register()
{
	hx::Object *dummy = new Client_obj;
	Client_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Client","\x6b","\x3e","\xe4","\x3e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Client_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Client_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Client_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Client_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Client_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Client_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

