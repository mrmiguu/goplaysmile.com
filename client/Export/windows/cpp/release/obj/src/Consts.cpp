// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Connection
#include <Connection.h>
#endif
#ifndef INCLUDED_Consts
#include <Consts.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_IButton
#include <IButton.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_37_take,"Consts","take",0x0c0e23a5,"Consts.take","Consts.hx",37,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_40_addLetter,"Consts","addLetter",0x4ddd81c9,"Consts.addLetter","Consts.hx",40,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_50_connect,"Consts","connect",0x96bfbf4c,"Consts.connect","Consts.hx",50,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_54_serial,"Consts","serial",0xb27ce8d2,"Consts.serial","Consts.hx",54,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_58_next,"Consts","next",0x0819f051,"Consts.next","Consts.hx",58,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_62_nextString,"Consts","nextString",0x2e3d2002,"Consts.nextString","Consts.hx",62,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_65_text,"Consts","text",0x0c11380b,"Consts.text","Consts.hx",65,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_84_textBox,"Consts","textBox",0x1ff996c0,"Consts.textBox","Consts.hx",84,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_111_diff,"Consts","diff",0x0180c763,"Consts.diff","Consts.hx",111,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_118_dist,"Consts","dist",0x0180d2c4,"Consts.dist","Consts.hx",118,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_125_scale,"Consts","scale",0xee35556c,"Consts.scale","Consts.hx",125,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_132_sound,"Consts","sound",0xf63313b1,"Consts.sound","Consts.hx",132,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_139_bmp,"Consts","bmp",0xc32866a7,"Consts.bmp","Consts.hx",139,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_145_tileset,"Consts","tileset",0xc6d30496,"Consts.tileset","Consts.hx",145,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_155_tile,"Consts","tile",0x0c14368c,"Consts.tile","Consts.hx",155,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_164_tilemap,"Consts","tilemap",0xc6ce7390,"Consts.tilemap","Consts.hx",164,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_181_mapToSprite,"Consts","mapToSprite",0x411122fe,"Consts.mapToSprite","Consts.hx",181,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_191_sprite,"Consts","sprite",0x07e55ae3,"Consts.sprite","Consts.hx",191,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_203_center,"Consts","center",0x4a2aa4b3,"Consts.center","Consts.hx",203,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_209_locations,"Consts","locations",0xab0aa080,"Consts.locations","Consts.hx",209,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_234_nameToIndex,"Consts","nameToIndex",0x6d6628ee,"Consts.nameToIndex","Consts.hx",234,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_30_boot,"Consts","boot",0x0032ef90,"Consts.boot","Consts.hx",30,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_31_boot,"Consts","boot",0x0032ef90,"Consts.boot","Consts.hx",31,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_32_boot,"Consts","boot",0x0032ef90,"Consts.boot","Consts.hx",32,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_33_boot,"Consts","boot",0x0032ef90,"Consts.boot","Consts.hx",33,0xf1f392ee)
HX_DEFINE_STACK_FRAME(_hx_pos_f429a08227001bc8_34_boot,"Consts","boot",0x0032ef90,"Consts.boot","Consts.hx",34,0xf1f392ee)

void Consts_obj::__construct() { }

Dynamic Consts_obj::__CreateEmpty() { return new Consts_obj; }

void *Consts_obj::_hx_vtable = 0;

Dynamic Consts_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Consts_obj > _hx_result = new Consts_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Consts_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3ad31534;
}

int Consts_obj::WIDTH;

int Consts_obj::HEIGHT;

int Consts_obj::FONT_COLOR;

::String Consts_obj::HOST;

int Consts_obj::PORT;

::String Consts_obj::take(::Array< ::String > m){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_37_take)
            	HX_STACK_ARG(m,"m")
HXLINE(  37)		return m->shift();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,take,return )

void Consts_obj::addLetter(::Array< ::String > m,::cpp::VirtualArray t){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_40_addLetter)
            	HX_STACK_ARG(m,"m")
            	HX_STACK_ARG(t,"t")
HXLINE(  41)		HX_VARI(  ::haxe::Serializer,serial) =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXLINE(  43)		{
HXLINE(  43)			HX_VARI( int,_g) = (int)0;
HXDLIN(  43)			while((_g < t->get_length())){
HXLINE(  43)				HX_VARI(  ::Dynamic,token) = t->__get(_g);
HXDLIN(  43)				_g = (_g + (int)1);
HXLINE(  44)				serial->serialize(token);
            			}
            		}
HXLINE(  46)		m->push(serial->toString());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,addLetter,(void))

 ::Connection Consts_obj::connect( ::Globals g,::String user,::String pass){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_50_connect)
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(user,"user")
            	HX_STACK_ARG(pass,"pass")
HXLINE(  50)		return  ::Connection_obj::__alloc( HX_CTX ,g,HX_("192.168.1.173",b1,45,6f,f9),(int)4200,user,::haxe::crypto::Md5_obj::encode(pass));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Consts_obj,connect,return )

 ::haxe::Unserializer Consts_obj::serial(::String packet){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_54_serial)
            	HX_STACK_ARG(packet,"packet")
HXLINE(  54)		return  ::haxe::Unserializer_obj::__alloc( HX_CTX ,packet);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,serial,return )

 ::Dynamic Consts_obj::next( ::haxe::Unserializer serial){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_58_next)
            	HX_STACK_ARG(serial,"serial")
HXLINE(  58)		return serial->unserialize();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,next,return )

::String Consts_obj::nextString( ::haxe::Unserializer serial){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_62_nextString)
            	HX_STACK_ARG(serial,"serial")
HXLINE(  62)		return ::Std_obj::string(serial->unserialize());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,nextString,return )

 ::openfl::text::TextField Consts_obj::text(::String s,Float x,Float y,int pt,hx::Null< int >  __o_c){
int c = __o_c.Default(8323072);
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_65_text)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(pt,"pt")
            	HX_STACK_ARG(c,"c")
HXLINE(  66)		HX_VARI(  ::openfl::text::TextField,t) =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  67)		t->set_embedFonts(true);
HXLINE(  68)		t->set_text(s);
HXLINE(  69)		t->set_x((x - ((Float)t->get_width() / (Float)(int)2)));
HXLINE(  70)		t->set_y(y);
HXLINE(  71)		t->set_autoSize((int)0);
HXLINE(  72)		t->set_selectable(false);
HXLINE(  74)		t->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,pt,c,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXLINE(  81)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Consts_obj,text,return )

 ::openfl::text::TextField Consts_obj::textBox(::String s,Float x,Float y,int pt){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_84_textBox)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(pt,"pt")
HXLINE(  85)		HX_VARI(  ::openfl::text::TextField,t) =  ::openfl::text::TextField_obj::__alloc( HX_CTX );
HXLINE(  86)		t->set_embedFonts(true);
HXLINE(  87)		t->setTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::Assets_obj::getFont(HX_("assets/etc/lucon.ttf",8a,7b,49,6b),null())->name,pt,(int)8323072,true,null(),null(),null(),null(),null(),null(),null(),null(),null()),null(),null());
HXLINE(  93)		t->set_multiline(false);
HXLINE(  94)		t->set_wordWrap(false);
HXLINE(  95)		t->set_text(s);
HXLINE(  96)		t->set_x(x);
HXLINE(  97)		t->set_y(y);
HXLINE(  98)		t->set_type((int)1);
HXLINE(  99)		t->set_border(true);
HXLINE( 100)		t->set_borderColor((int)8323072);
HXLINE( 101)		t->set_maxChars(::Std_obj::_hx_int(((Float)t->get_width() / (Float)pt)));
HXLINE( 102)		t->set_restrict(HX_("A-Z a-z 0-9",b8,e4,9c,e8));
HXLINE( 104)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Consts_obj,textBox,return )

Float Consts_obj::diff(Float a,Float b){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_111_diff)
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(b,"b")
HXLINE( 111)		return ::Math_obj::abs((a - b));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,diff,return )

Float Consts_obj::dist(int ax,int ay,int bx,int by){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_118_dist)
            	HX_STACK_ARG(ax,"ax")
            	HX_STACK_ARG(ay,"ay")
            	HX_STACK_ARG(bx,"bx")
            	HX_STACK_ARG(by,"by")
HXLINE( 118)		return ::Math_obj::sqrt((::Math_obj::pow((bx - ax),(int)2) + ::Math_obj::pow((by - ay),(int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Consts_obj,dist,return )

Float Consts_obj::scale(int w,int h){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_125_scale)
            	HX_STACK_ARG(w,"w")
            	HX_STACK_ARG(h,"h")
HXLINE( 125)		return ::Math_obj::min(((Float)w / (Float)(int)480),((Float)h / (Float)(int)800));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,scale,return )

 ::openfl::media::Sound Consts_obj::sound(::String dir){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_132_sound)
            	HX_STACK_ARG(dir,"dir")
HXLINE( 132)		return ::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + dir));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,sound,return )

 ::openfl::display::BitmapData Consts_obj::bmp(::String dir){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_139_bmp)
            	HX_STACK_ARG(dir,"dir")
HXLINE( 139)		return ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,bmp,return )

 ::openfl::display::Tileset Consts_obj::tileset(::String dir){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_145_tileset)
            	HX_STACK_ARG(dir,"dir")
HXLINE( 146)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
HXLINE( 147)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXLINE( 148)		set->addRect(png->rect);
HXLINE( 149)		return set;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,tileset,return )

 ::openfl::display::Tile Consts_obj::tile(::String dir){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_155_tile)
            	HX_STACK_ARG(dir,"dir")
HXLINE( 156)		HX_VARI(  ::openfl::display::Tile,tile) =  ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 157)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
HXDLIN( 157)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 157)		set->addRect(png->rect);
HXDLIN( 157)		tile->set_tileset(set);
HXLINE( 158)		return tile;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,tile,return )

 ::openfl::display::Tilemap Consts_obj::tilemap(::String dir,hx::Null< int >  __o_w,hx::Null< int >  __o_h){
int w = __o_w.Default(-1);
int h = __o_h.Default(-1);
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_164_tilemap)
            	HX_STACK_ARG(dir,"dir")
            	HX_STACK_ARG(w,"w")
            	HX_STACK_ARG(h,"h")
HXLINE( 165)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
HXDLIN( 165)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 165)		set->addRect(png->rect);
HXLINE( 168)		HX_VAR( int,map);
HXDLIN( 168)		if ((w < (int)0)) {
HXLINE( 168)			map = ::Std_obj::_hx_int(set->getRect((int)0)->width);
            		}
            		else {
HXLINE( 168)			map = w;
            		}
HXLINE( 169)		int map1;
HXDLIN( 169)		if ((h < (int)0)) {
HXLINE( 169)			map1 = ::Std_obj::_hx_int(set->getRect((int)0)->height);
            		}
            		else {
HXLINE( 169)			map1 = h;
            		}
HXLINE( 167)		HX_VARI_NAME(  ::openfl::display::Tilemap,map2,"map") =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set,null());
HXLINE( 173)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
HXLINE( 175)		return map2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Consts_obj,tilemap,return )

 ::openfl::display::Sprite Consts_obj::mapToSprite( ::openfl::display::Tilemap map){
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_181_mapToSprite)
            	HX_STACK_ARG(map,"map")
HXLINE( 182)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXLINE( 183)		sprite->addChild(map);
HXLINE( 185)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,mapToSprite,return )

 ::openfl::display::Sprite Consts_obj::sprite(::String dir,hx::Null< int >  __o_x,hx::Null< int >  __o_y){
int x = __o_x.Default(0);
int y = __o_y.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_f429a08227001bc8_191_sprite)
            	HX_STACK_ARG(dir,"dir")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 192)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + dir),null());
HXDLIN( 192)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 192)		set->addRect(png->rect);
HXDLIN( 192)		HX_VAR( int,map);
HXDLIN( 192)		map = ::Std_obj::_hx_int(set->getRect((int)0)->width);
HXDLIN( 192)		int map1;
HXDLIN( 192)		map1 = ::Std_obj::_hx_int(set->getRect((int)0)->height);
HXDLIN( 192)		HX_VARI_NAME(  ::openfl::display::Tilemap,map2,"map") =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set,null());
HXDLIN( 192)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null()));
HXDLIN( 192)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN( 192)		sprite->addChild(map2);
HXLINE( 193)		sprite->set_x(x);
HXLINE( 194)		sprite->set_y(y);
HXLINE( 196)		return sprite;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Consts_obj,sprite,return )

Float Consts_obj::center(Float line,Float point){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_203_center)
            	HX_STACK_ARG(line,"line")
            	HX_STACK_ARG(point,"point")
HXLINE( 203)		return (point - ((Float)line / (Float)(int)2));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,center,return )

::Array< ::Dynamic> Consts_obj::locations( ::openfl::display::BitmapData image){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_209_locations)
            	HX_STACK_ARG(image,"image")
HXLINE( 210)		HX_VARI( ::Array< ::Dynamic>,points) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 213)		::Std_obj::_hx_int(((Float)6.5));
HXLINE( 216)		{
HXLINE( 216)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 216)			HX_VARI( int,_g) = image->height;
HXDLIN( 216)			while((_g1 < _g)){
HXLINE( 216)				_g1 = (_g1 + (int)1);
HXDLIN( 216)				HX_VARI( int,j) = (_g1 - (int)1);
HXLINE( 217)				{
HXLINE( 217)					HX_VARI( int,_g3) = (int)0;
HXDLIN( 217)					HX_VARI( int,_g2) = image->width;
HXDLIN( 217)					while((_g3 < _g2)){
HXLINE( 217)						_g3 = (_g3 + (int)1);
HXDLIN( 217)						HX_VARI( int,i) = (_g3 - (int)1);
HXLINE( 218)						HX_VARI( bool,newLoc) = true;
HXLINE( 220)						if ((image->getPixel(i,j) == (int)16711680)) {
HXLINE( 221)							if ((points->length > (int)0)) {
HXLINE( 222)								{
HXLINE( 222)									HX_VARI( int,_g4) = (int)0;
HXDLIN( 222)									while((_g4 < points->length)){
HXLINE( 222)										HX_VARI(  ::Dynamic,p) = points->__get(_g4);
HXDLIN( 222)										_g4 = (_g4 + (int)1);
HXDLIN( 222)										bool _hx_tmp;
HXDLIN( 222)										if ((::Math_obj::abs((( (int)(p->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - i)) <= (int)12)) {
HXLINE( 222)											_hx_tmp = (::Math_obj::abs((( (int)(p->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - j)) <= (int)13);
            										}
            										else {
HXLINE( 222)											_hx_tmp = false;
            										}
HXDLIN( 222)										if (_hx_tmp) {
HXLINE( 223)											newLoc = false;
            										}
            									}
            								}
HXLINE( 224)								if (newLoc) {
HXLINE( 224)									points->push( ::Dynamic(hx::Anon_obj::Create(2)
            										->setFixed(0,HX_("x",78,00,00,00),(i + (int)1))
            										->setFixed(1,HX_("y",79,00,00,00),(j + (int)6))));
            								}
            							}
            							else {
HXLINE( 225)								points->push( ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("x",78,00,00,00),(i + (int)1))
            									->setFixed(1,HX_("y",79,00,00,00),(j + (int)6))));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 228)		return points;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Consts_obj,locations,return )

int Consts_obj::nameToIndex(::String name,::Array< ::String > names){
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_234_nameToIndex)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(names,"names")
HXLINE( 235)		HX_VARI( int,index) = (int)0;
HXLINE( 236)		{
HXLINE( 236)			HX_VARI( int,_g1) = (int)0;
HXDLIN( 236)			HX_VARI( int,_g) = names->length;
HXDLIN( 236)			while((_g1 < _g)){
HXLINE( 236)				_g1 = (_g1 + (int)1);
HXDLIN( 236)				HX_VARI( int,i) = (_g1 - (int)1);
HXDLIN( 236)				if ((name == names->__get(i))) {
HXLINE( 236)					index = i;
            				}
            			}
            		}
HXLINE( 237)		return index;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Consts_obj,nameToIndex,return )


Consts_obj::Consts_obj()
{
}

bool Consts_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bmp") ) { outValue = bmp_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"take") ) { outValue = take_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"next") ) { outValue = next_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"text") ) { outValue = text_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"diff") ) { outValue = diff_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"dist") ) { outValue = dist_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tile") ) { outValue = tile_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { outValue = scale_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sound") ) { outValue = sound_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"serial") ) { outValue = serial_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sprite") ) { outValue = sprite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"center") ) { outValue = center_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"connect") ) { outValue = connect_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"textBox") ) { outValue = textBox_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tileset") ) { outValue = tileset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tilemap") ) { outValue = tilemap_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addLetter") ) { outValue = addLetter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"locations") ) { outValue = locations_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nextString") ) { outValue = nextString_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"mapToSprite") ) { outValue = mapToSprite_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nameToIndex") ) { outValue = nameToIndex_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Consts_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Consts_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Consts_obj::WIDTH,HX_HCSTRING("WIDTH","\xe6","\xed","\x50","\x48")},
	{hx::fsInt,(void *) &Consts_obj::HEIGHT,HX_HCSTRING("HEIGHT","\xe7","\xb3","\xce","\xb4")},
	{hx::fsInt,(void *) &Consts_obj::FONT_COLOR,HX_HCSTRING("FONT_COLOR","\x93","\xdb","\x77","\x83")},
	{hx::fsString,(void *) &Consts_obj::HOST,HX_HCSTRING("HOST","\x68","\x97","\xd3","\x2f")},
	{hx::fsInt,(void *) &Consts_obj::PORT,HX_HCSTRING("PORT","\x81","\x4b","\x1d","\x35")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Consts_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Consts_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Consts_obj::WIDTH,"WIDTH");
	HX_MARK_MEMBER_NAME(Consts_obj::HEIGHT,"HEIGHT");
	HX_MARK_MEMBER_NAME(Consts_obj::FONT_COLOR,"FONT_COLOR");
	HX_MARK_MEMBER_NAME(Consts_obj::HOST,"HOST");
	HX_MARK_MEMBER_NAME(Consts_obj::PORT,"PORT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Consts_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Consts_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Consts_obj::WIDTH,"WIDTH");
	HX_VISIT_MEMBER_NAME(Consts_obj::HEIGHT,"HEIGHT");
	HX_VISIT_MEMBER_NAME(Consts_obj::FONT_COLOR,"FONT_COLOR");
	HX_VISIT_MEMBER_NAME(Consts_obj::HOST,"HOST");
	HX_VISIT_MEMBER_NAME(Consts_obj::PORT,"PORT");
};

#endif

hx::Class Consts_obj::__mClass;

static ::String Consts_obj_sStaticFields[] = {
	HX_HCSTRING("WIDTH","\xe6","\xed","\x50","\x48"),
	HX_HCSTRING("HEIGHT","\xe7","\xb3","\xce","\xb4"),
	HX_HCSTRING("FONT_COLOR","\x93","\xdb","\x77","\x83"),
	HX_HCSTRING("HOST","\x68","\x97","\xd3","\x2f"),
	HX_HCSTRING("PORT","\x81","\x4b","\x1d","\x35"),
	HX_HCSTRING("take","\x47","\xb8","\xf6","\x4c"),
	HX_HCSTRING("addLetter","\xe7","\xe1","\x2c","\x5b"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("serial","\xf4","\x69","\x2d","\x6e"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("nextString","\x24","\xda","\x61","\xc6"),
	HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"),
	HX_HCSTRING("textBox","\x5e","\x13","\xba","\x9e"),
	HX_HCSTRING("diff","\x05","\x5c","\x69","\x42"),
	HX_HCSTRING("dist","\x66","\x67","\x69","\x42"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("sound","\xcf","\x8c","\xcc","\x80"),
	HX_HCSTRING("bmp","\x45","\xbc","\x4a","\x00"),
	HX_HCSTRING("tileset","\x34","\x81","\x93","\x45"),
	HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c"),
	HX_HCSTRING("tilemap","\x2e","\xf0","\x8e","\x45"),
	HX_HCSTRING("mapToSprite","\x9c","\x46","\x0f","\xc9"),
	HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"),
	HX_HCSTRING("center","\xd5","\x25","\xdb","\x05"),
	HX_HCSTRING("locations","\x9e","\x00","\x5a","\xb8"),
	HX_HCSTRING("nameToIndex","\x8c","\x4c","\x64","\xf5"),
	::String(null())
};

void Consts_obj::__register()
{
	hx::Object *dummy = new Consts_obj;
	Consts_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Consts","\xd0","\xb1","\x70","\xfc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Consts_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Consts_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Consts_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Consts_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Consts_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Consts_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Consts_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Consts_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_30_boot)
HXLINE(  30)		WIDTH = (int)480;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_31_boot)
HXLINE(  31)		HEIGHT = (int)800;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_32_boot)
HXLINE(  32)		FONT_COLOR = (int)8323072;
            	}
{
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_33_boot)
HXLINE(  33)		HOST = HX_("192.168.1.173",b1,45,6f,f9);
            	}
{
            	HX_STACKFRAME(&_hx_pos_f429a08227001bc8_34_boot)
HXLINE(  34)		PORT = (int)4200;
            	}
}

