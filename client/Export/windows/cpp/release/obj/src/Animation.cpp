// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
#ifndef INCLUDED_Animation
#include <Animation.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_83dde93d50e71dff_25_new,"Animation","new",0x6e1eb1d6,"Animation.new","Animation.hx",25,0x7224da5a)
HX_LOCAL_STACK_FRAME(_hx_pos_83dde93d50e71dff_31_begin,"Animation","begin",0x4fb4951f,"Animation.begin","Animation.hx",31,0x7224da5a)
HX_LOCAL_STACK_FRAME(_hx_pos_83dde93d50e71dff_32_during,"Animation","during",0x78b3400b,"Animation.during","Animation.hx",32,0x7224da5a)
HX_LOCAL_STACK_FRAME(_hx_pos_83dde93d50e71dff_33_end,"Animation","end",0x6e17e551,"Animation.end","Animation.hx",33,0x7224da5a)
HX_LOCAL_STACK_FRAME(_hx_pos_83dde93d50e71dff_35_transition,"Animation","transition",0x4bb366df,"Animation.transition","Animation.hx",35,0x7224da5a)

void Animation_obj::__construct(int frames,Float delay){
            	HX_STACKFRAME(&_hx_pos_83dde93d50e71dff_25_new)
HXLINE(  27)		this->frames = frames;
HXLINE(  28)		this->delay = delay;
            	}

Dynamic Animation_obj::__CreateEmpty() { return new Animation_obj; }

void *Animation_obj::_hx_vtable = 0;

Dynamic Animation_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Animation_obj > _hx_result = new Animation_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Animation_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a1ea200;
}

static ::Animatible_obj _hx_Animation__hx_Animatible= {
	( void (hx::Object::*)())&::Animation_obj::transition,
};

void *Animation_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x79c359f6: return &_hx_Animation__hx_Animatible;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Animation_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_83dde93d50e71dff_31_begin)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,begin,(void))

void Animation_obj::during(){
            	HX_STACKFRAME(&_hx_pos_83dde93d50e71dff_32_during)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,during,(void))

void Animation_obj::end(){
            	HX_STACKFRAME(&_hx_pos_83dde93d50e71dff_33_end)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,end,(void))

void Animation_obj::transition(){
            	HX_STACKFRAME(&_hx_pos_83dde93d50e71dff_35_transition)
HXLINE(  37)		if ((this->frame == (int)0)) {
HXLINE(  37)			this->begin();
            		}
            		else {
HXLINE(  38)			int _hx_tmp = this->frame;
HXDLIN(  38)			if ((_hx_tmp == (this->frames - (int)1))) {
HXLINE(  38)				this->end();
            			}
            			else {
HXLINE(  39)				this->during();
            			}
            		}
HXLINE(  41)		this->frame = hx::Mod((this->frame + (int)1),this->frames);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Animation_obj,transition,(void))


hx::ObjectPtr< Animation_obj > Animation_obj::__new(int frames,Float delay) {
	hx::ObjectPtr< Animation_obj > __this = new Animation_obj();
	__this->__construct(frames,delay);
	return __this;
}

hx::ObjectPtr< Animation_obj > Animation_obj::__alloc(hx::Ctx *_hx_ctx,int frames,Float delay) {
	Animation_obj *__this = (Animation_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Animation_obj), false, "Animation"));
	*(void **)__this = Animation_obj::_hx_vtable;
	__this->__construct(frames,delay);
	return __this;
}

Animation_obj::Animation_obj()
{
}

hx::Val Animation_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay); }
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames); }
		if (HX_FIELD_EQ(inName,"future") ) { return hx::Val( future); }
		if (HX_FIELD_EQ(inName,"during") ) { return hx::Val( during_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animating") ) { return hx::Val( animating); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"transition") ) { return hx::Val( transition_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Animation_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"frames") ) { frames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"future") ) { future=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"animating") ) { animating=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Animation_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("animating","\x1e","\xee","\x34","\x4b"));
	outFields->push(HX_HCSTRING("future","\x43","\x98","\x4e","\x73"));
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Animation_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Animation_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsBool,(int)offsetof(Animation_obj,animating),HX_HCSTRING("animating","\x1e","\xee","\x34","\x4b")},
	{hx::fsFloat,(int)offsetof(Animation_obj,future),HX_HCSTRING("future","\x43","\x98","\x4e","\x73")},
	{hx::fsFloat,(int)offsetof(Animation_obj,delay),HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7")},
	{hx::fsInt,(int)offsetof(Animation_obj,frame),HX_HCSTRING("frame","\x2d","\x78","\x83","\x06")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Animation_obj_sStaticStorageInfo = 0;
#endif

static ::String Animation_obj_sMemberFields[] = {
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("animating","\x1e","\xee","\x34","\x4b"),
	HX_HCSTRING("future","\x43","\x98","\x4e","\x73"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("during","\xc1","\x53","\x3c","\xa5"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("transition","\x95","\x8d","\xaf","\x58"),
	::String(null()) };

static void Animation_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Animation_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Animation_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Animation_obj::__mClass,"__mClass");
};

#endif

hx::Class Animation_obj::__mClass;

void Animation_obj::__register()
{
	hx::Object *dummy = new Animation_obj;
	Animation_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Animation","\xe4","\xce","\x07","\xed");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Animation_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Animation_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Animation_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Animation_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Animation_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Animation_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

