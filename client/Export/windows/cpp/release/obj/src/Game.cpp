// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_IButton
#include <IButton.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif


void Game_obj::__construct(){
            	HX_STACK_FRAME("Game","new",0x79ba3204,"Game.new","Game.hx",7,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(   8)		this->animatibles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  11)		super::__construct();
HXLINE(  12)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->frame_dyn(),null(),null(),null());
            	}

Dynamic Game_obj::__CreateEmpty() { return new Game_obj; }

hx::ObjectPtr< Game_obj > Game_obj::__new()
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Game_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Game_obj > _hx_result = new Game_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::IButton_obj _hx_Game__hx_IButton= {
	( void (hx::Object::*)())&::Game_obj::pushIn,
	( void (hx::Object::*)())&::Game_obj::popOut,
};

void *Game_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xea13b31b: return &_hx_Game__hx_IButton;
	}
	return super::_hx_getInterface(inHash);
}

void Game_obj::pushIn(){
            	HX_STACK_FRAME("Game","pushIn",0xe6a0393b,"Game.pushIn","Game.hx",16,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(  16)		this->set_visible(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,pushIn,(void))

void Game_obj::popOut(){
            	HX_STACK_FRAME("Game","popOut",0x702a4859,"Game.popOut","Game.hx",20,0x56a4f9ec)
            	HX_STACK_THIS(this)
HXLINE(  20)		this->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Game_obj,popOut,(void))

void Game_obj::addAnimation(::Dynamic a){
            	HX_STACK_FRAME("Game","addAnimation",0xdb835a7f,"Game.addAnimation","Game.hx",25,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  25)		this->animatibles->push(a);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,addAnimation,(void))

void Game_obj::frame( ::openfl::events::Event e){
            	HX_STACK_FRAME("Game","frame",0x6f808ad1,"Game.frame","Game.hx",28,0x56a4f9ec)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE(  29)		Int _hx_tmp = ::lime::_hx_system::System_obj::getTimer();
HXDLIN(  29)		HX_VARI( Float,time) = ((Float)_hx_tmp / (Float)(int)1000);
HXLINE(  31)		{
HXLINE(  31)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  31)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->animatibles;
HXDLIN(  31)			while((_g < _g1->length)){
HXLINE(  31)				HX_VARI(  ::Dynamic,a) = _g1->__get(_g);
HXDLIN(  31)				++_g;
HXDLIN(  31)				Bool _hx_tmp1;
HXDLIN(  31)				if (( (Bool)(a->__Field(HX_("animating",1e,ee,34,4b),hx::paccDynamic)) )) {
HXLINE(  31)					_hx_tmp1 = (time > ( (Float)(a->__Field(HX_("future",43,98,4e,73),hx::paccDynamic)) ));
            				}
            				else {
HXLINE(  31)					_hx_tmp1 = false;
            				}
HXDLIN(  31)				if (_hx_tmp1) {
HXLINE(  32)					 ::Dynamic(a->__Field(HX_("transition",95,8d,af,58),hx::paccDynamic))();
HXLINE(  33)					a->__SetField(HX_("future",43,98,4e,73),(time + ( (Float)(a->__Field(HX_("delay",83,d7,26,d7),hx::paccDynamic)) )),hx::paccDynamic);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Game_obj,frame,(void))


Game_obj::Game_obj()
{
}

void Game_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Game);
	HX_MARK_MEMBER_NAME(animatibles,"animatibles");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Game_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(animatibles,"animatibles");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Game_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"pushIn") ) { return hx::Val( pushIn_dyn()); }
		if (HX_FIELD_EQ(inName,"popOut") ) { return hx::Val( popOut_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"animatibles") ) { return hx::Val( animatibles); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addAnimation") ) { return hx::Val( addAnimation_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Game_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"animatibles") ) { animatibles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Game_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("animatibles","\xdd","\xc5","\xf8","\x2c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Game_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Game_obj,animatibles),HX_HCSTRING("animatibles","\xdd","\xc5","\xf8","\x2c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Game_obj_sStaticStorageInfo = 0;
#endif

static ::String Game_obj_sMemberFields[] = {
	HX_HCSTRING("animatibles","\xdd","\xc5","\xf8","\x2c"),
	HX_HCSTRING("pushIn","\x5f","\xfc","\x2c","\x72"),
	HX_HCSTRING("popOut","\x7d","\x0b","\xb7","\xfb"),
	HX_HCSTRING("addAnimation","\xa3","\x10","\x89","\x4a"),
	HX_HCSTRING("frame","\x2d","\x78","\x83","\x06"),
	::String(null()) };

static void Game_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Game_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Game_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Game_obj::__mClass,"__mClass");
};

#endif

hx::Class Game_obj::__mClass;

void Game_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Game","\x12","\x20","\x38","\x2f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Game_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Game_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Game_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Game_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Game_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Game_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

