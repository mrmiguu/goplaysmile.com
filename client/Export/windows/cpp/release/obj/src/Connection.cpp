// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
#ifndef INCLUDED_Connection
#include <Connection.h>
#endif
#ifndef INCLUDED_Game
#include <Game.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_IButton
#include <IButton.h>
#endif
#ifndef INCLUDED_Level
#include <Level.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Radio
#include <Radio.h>
#endif
#ifndef INCLUDED_SpriteSheet
#include <SpriteSheet.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Terrain
#include <Terrain.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_12_new,"Connection","new",0x11f93c30,"Connection.new","Connection.hx",12,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_38_pushIn,"Connection","pushIn",0x78f8d28f,"Connection.pushIn","Connection.hx",38,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_42_popOut,"Connection","popOut",0x0282e1ad,"Connection.popOut","Connection.hx",42,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_45_read,"Connection","read",0xaac03586,"Connection.read","Connection.hx",45,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_87_initArrived,"Connection","initArrived",0x01d8b70d,"Connection.initArrived","Connection.hx",87,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_94_playerColorArrived,"Connection","playerColorArrived",0xc653287b,"Connection.playerColorArrived","Connection.hx",94,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_99_dieInfoArrived,"Connection","dieInfoArrived",0x8290ee6f,"Connection.dieInfoArrived","Connection.hx",99,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_104_playerLocationArrived,"Connection","playerLocationArrived",0xb8d65827,"Connection.playerLocationArrived","Connection.hx",104,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_109_playerDestinationArrived,"Connection","playerDestinationArrived",0x87aa5570,"Connection.playerDestinationArrived","Connection.hx",109,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_114_playerArrived,"Connection","playerArrived",0xd4a9b6dc,"Connection.playerArrived","Connection.hx",114,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_119_playerExperienceArrived,"Connection","playerExperienceArrived",0x45bf1712,"Connection.playerExperienceArrived","Connection.hx",119,0x20395940)
HX_DEFINE_STACK_FRAME(_hx_pos_cbe74dae291f5d27_127_clientLoop,"Connection","clientLoop",0x5c45cc7f,"Connection.clientLoop","Connection.hx",127,0x20395940)

void Connection_obj::__construct( ::Globals g,::String host,int port,::String user,::String pass){
            	HX_GC_STACKFRAME(&_hx_pos_cbe74dae291f5d27_12_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(host,"host")
            	HX_STACK_ARG(port,"port")
            	HX_STACK_ARG(user,"user")
            	HX_STACK_ARG(pass,"pass")
HXLINE(  17)		this->outbox = ::Array_obj< ::String >::__new(0);
HXLINE(  16)		this->writers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  15)		this->readers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  14)		this->server =  ::sys::net::Socket_obj::__alloc( HX_CTX );
HXLINE(  20)		super::__construct();
HXLINE(  22)		this->g = g;
HXLINE(  23)		g->outbox = this->outbox;
HXLINE(  25)		this->server->setFastSend(true);
HXLINE(  26)		this->server->setBlocking(false);
HXLINE(  27)		 ::sys::net::Socket _hx_tmp = this->server;
HXDLIN(  27)		_hx_tmp->connect( ::sys::net::Host_obj::__alloc( HX_CTX ,host),port);
HXLINE(  29)		this->readers->push(this->server);
HXLINE(  30)		this->writers->push(this->server);
HXLINE(  32)		this->addEventListener(HX_("enterFrame",f5,03,50,02),this->clientLoop_dyn(),null(),null(),null());
HXLINE(  34)		{
HXLINE(  34)			::Array< ::String > m = this->outbox;
HXDLIN(  34)			HX_VARI( ::cpp::VirtualArray,t) = ::cpp::VirtualArray_obj::__new(3)->init(0,HX_("login",69,d9,f3,78))->init(1,user)->init(2,pass);
HXDLIN(  34)			HX_VARI(  ::haxe::Serializer,serial) =  ::haxe::Serializer_obj::__alloc( HX_CTX );
HXDLIN(  34)			{
HXLINE(  34)				HX_VARI( int,_g) = (int)0;
HXDLIN(  34)				while((_g < t->get_length())){
HXLINE(  34)					HX_VARI(  ::Dynamic,token) = t->__get(_g);
HXDLIN(  34)					_g = (_g + (int)1);
HXDLIN(  34)					serial->serialize(token);
            				}
            			}
HXDLIN(  34)			m->push(serial->toString());
            		}
            	}

Dynamic Connection_obj::__CreateEmpty() { return new Connection_obj; }

void *Connection_obj::_hx_vtable = 0;

Dynamic Connection_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Connection_obj > _hx_result = new Connection_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool Connection_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x42a589a2;
		}
	}
}

static ::IButton_obj _hx_Connection__hx_IButton= {
	( void (hx::Object::*)())&::Connection_obj::pushIn,
	( void (hx::Object::*)())&::Connection_obj::popOut,
};

void *Connection_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xea13b31b: return &_hx_Connection__hx_IButton;
	}
	return super::_hx_getInterface(inHash);
}

void Connection_obj::pushIn(){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_38_pushIn)
            	HX_STACK_THIS(this)
HXLINE(  38)		this->set_visible(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Connection_obj,pushIn,(void))

void Connection_obj::popOut(){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_42_popOut)
            	HX_STACK_THIS(this)
HXLINE(  42)		this->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Connection_obj,popOut,(void))

void Connection_obj::read(::String packet){
            	HX_GC_STACKFRAME(&_hx_pos_cbe74dae291f5d27_45_read)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(packet,"packet")
HXLINE(  46)		HX_VARI(  ::haxe::Unserializer,serial) =  ::haxe::Unserializer_obj::__alloc( HX_CTX ,packet);
HXLINE(  48)		::String _hx_switch_0 = ::Std_obj::string(serial->unserialize());
            		if (  (_hx_switch_0==HX_("arrived",6d,8c,c0,3f)) ){
HXLINE(  76)			this->playerArrived();
HXDLIN(  76)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("color",63,71,5c,4a)) ){
HXLINE(  54)			 ::Dynamic _hx_tmp = serial->unserialize();
HXLINE(  53)			this->playerColorArrived(( (::String)(_hx_tmp) ),( (::String)(serial->unserialize()) ));
HXDLIN(  53)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("dest",62,5e,66,42)) ){
HXLINE(  71)			 ::Dynamic _hx_tmp1 = serial->unserialize();
HXLINE(  70)			this->playerDestinationArrived(( (::String)(_hx_tmp1) ),( (::String)(serial->unserialize()) ));
HXDLIN(  70)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("exp",9d,0c,4d,00)) ){
HXLINE(  80)			 ::Dynamic _hx_tmp2 = serial->unserialize();
HXLINE(  81)			 ::Dynamic _hx_tmp3 = serial->unserialize();
HXLINE(  79)			this->playerExperienceArrived(( (int)(_hx_tmp2) ),( (int)(_hx_tmp3) ),( (int)(serial->unserialize()) ));
HXDLIN(  79)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("init",10,3b,bb,45)) ){
HXLINE(  50)			this->initArrived();
HXDLIN(  50)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("loc",80,54,52,00)) ){
HXLINE(  65)			 ::Dynamic _hx_tmp4 = serial->unserialize();
HXLINE(  64)			this->playerLocationArrived(( (::String)(_hx_tmp4) ),( (::String)(serial->unserialize()) ));
HXDLIN(  64)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("roll",7d,eb,ae,4b)) ){
HXLINE(  59)			this->dieInfoArrived(( (int)(serial->unserialize()) ));
HXDLIN(  59)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Connection_obj,read,(void))

void Connection_obj::initArrived(){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_87_initArrived)
            	HX_STACK_THIS(this)
HXLINE(  88)		::haxe::Log_obj::trace(HX_("initArrived",3d,fb,2a,f8),hx::SourceInfo(HX_("Connection.hx",40,59,39,20),88,HX_("Connection",3e,a4,c3,eb),HX_("initArrived",3d,fb,2a,f8)));
HXLINE(  90)		this->g->radio->push(this->g->toFrom);
HXLINE(  91)		this->g->t->reset();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Connection_obj,initArrived,(void))

void Connection_obj::playerColorArrived(::String user,::String color){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_94_playerColorArrived)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(user,"user")
            	HX_STACK_ARG(color,"color")
HXLINE(  95)		::haxe::Log_obj::trace(HX_("playerColorArrived",4b,ca,06,3e),hx::SourceInfo(HX_("Connection.hx",40,59,39,20),95,HX_("Connection",3e,a4,c3,eb),HX_("playerColorArrived",4b,ca,06,3e)));
HXLINE(  96)		this->g->player(user)->setColor(color);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Connection_obj,playerColorArrived,(void))

void Connection_obj::dieInfoArrived(int side){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_99_dieInfoArrived)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(side,"side")
HXLINE( 100)		::haxe::Log_obj::trace(HX_("dieInfoArrived",3f,68,bb,dd),hx::SourceInfo(HX_("Connection.hx",40,59,39,20),100,HX_("Connection",3e,a4,c3,eb),HX_("dieInfoArrived",3f,68,bb,dd)));
HXLINE( 101)		this->g->roll(side);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Connection_obj,dieInfoArrived,(void))

void Connection_obj::playerLocationArrived(::String user,::String loc){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_104_playerLocationArrived)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(user,"user")
            	HX_STACK_ARG(loc,"loc")
HXLINE( 105)		::haxe::Log_obj::trace(HX_("playerLocationArrived",57,b8,d9,c7),hx::SourceInfo(HX_("Connection.hx",40,59,39,20),105,HX_("Connection",3e,a4,c3,eb),HX_("playerLocationArrived",57,b8,d9,c7)));
HXLINE( 106)		this->g->player(user)->setLoc(loc);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Connection_obj,playerLocationArrived,(void))

void Connection_obj::playerDestinationArrived(::String user,::String dest){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_109_playerDestinationArrived)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(user,"user")
            	HX_STACK_ARG(dest,"dest")
HXLINE( 110)		::haxe::Log_obj::trace(HX_("playerDestinationArrived",40,33,bd,10),hx::SourceInfo(HX_("Connection.hx",40,59,39,20),110,HX_("Connection",3e,a4,c3,eb),HX_("playerDestinationArrived",40,33,bd,10)));
HXLINE( 111)		this->g->player(user)->setDest(dest);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Connection_obj,playerDestinationArrived,(void))

void Connection_obj::playerArrived(){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_114_playerArrived)
            	HX_STACK_THIS(this)
HXLINE( 115)		::haxe::Log_obj::trace(HX_("playerArrived",0c,67,39,b7),hx::SourceInfo(HX_("Connection.hx",40,59,39,20),115,HX_("Connection",3e,a4,c3,eb),HX_("playerArrived",0c,67,39,b7)));
HXLINE( 116)		this->g->me()->arrived();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Connection_obj,playerArrived,(void))

void Connection_obj::playerExperienceArrived(int req,int exp,int lv){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_119_playerExperienceArrived)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(req,"req")
            	HX_STACK_ARG(exp,"exp")
            	HX_STACK_ARG(lv,"lv")
HXLINE( 120)		::haxe::Log_obj::trace(HX_("playerExperienceArrived",42,e3,7e,a4),hx::SourceInfo(HX_("Connection.hx",40,59,39,20),120,HX_("Connection",3e,a4,c3,eb),HX_("playerExperienceArrived",42,e3,7e,a4)));
HXLINE( 121)		this->g->l->set(req,exp,lv);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Connection_obj,playerExperienceArrived,(void))

void Connection_obj::clientLoop( ::openfl::events::Event e){
            	HX_STACKFRAME(&_hx_pos_cbe74dae291f5d27_127_clientLoop)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 128)		::lime::_hx_system::System_obj::getTimer();
HXLINE( 129)		HX_VARI(  ::Dynamic,sockets) = ::sys::net::Socket_obj::select(this->readers,this->writers,null(),(int)0);
HXLINE( 138)		if ((( (::Array< ::Dynamic>)(sockets->__Field(HX_("read",56,4b,a7,4b),hx::paccDynamic)) )->length > (int)0)) {
HXLINE( 139)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 139)				this->read(this->server->input->readLine());
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e1 = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 142)		if ((( (::Array< ::Dynamic>)(sockets->__Field(HX_("write",df,6c,59,d0),hx::paccDynamic)) )->length > (int)0)) {
HXLINE( 143)			if ((this->outbox->length > (int)0)) {
HXLINE( 144)				 ::haxe::io::Output _hx_tmp = this->server->output;
HXDLIN( 144)				_hx_tmp->writeString(((HX_("",00,00,00,00) + ( (::String)(this->outbox->shift()) )) + HX_("\r\n",5d,0b,00,00)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Connection_obj,clientLoop,(void))


hx::ObjectPtr< Connection_obj > Connection_obj::__new( ::Globals g,::String host,int port,::String user,::String pass) {
	hx::ObjectPtr< Connection_obj > __this = new Connection_obj();
	__this->__construct(g,host,port,user,pass);
	return __this;
}

hx::ObjectPtr< Connection_obj > Connection_obj::__alloc(hx::Ctx *_hx_ctx, ::Globals g,::String host,int port,::String user,::String pass) {
	Connection_obj *__this = (Connection_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Connection_obj), true, "Connection"));
	*(void **)__this = Connection_obj::_hx_vtable;
	__this->__construct(g,host,port,user,pass);
	return __this;
}

Connection_obj::Connection_obj()
{
}

void Connection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Connection);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(server,"server");
	HX_MARK_MEMBER_NAME(readers,"readers");
	HX_MARK_MEMBER_NAME(writers,"writers");
	HX_MARK_MEMBER_NAME(outbox,"outbox");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Connection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(server,"server");
	HX_VISIT_MEMBER_NAME(readers,"readers");
	HX_VISIT_MEMBER_NAME(writers,"writers");
	HX_VISIT_MEMBER_NAME(outbox,"outbox");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Connection_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"read") ) { return hx::Val( read_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"server") ) { return hx::Val( server); }
		if (HX_FIELD_EQ(inName,"outbox") ) { return hx::Val( outbox); }
		if (HX_FIELD_EQ(inName,"pushIn") ) { return hx::Val( pushIn_dyn()); }
		if (HX_FIELD_EQ(inName,"popOut") ) { return hx::Val( popOut_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readers") ) { return hx::Val( readers); }
		if (HX_FIELD_EQ(inName,"writers") ) { return hx::Val( writers); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"clientLoop") ) { return hx::Val( clientLoop_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initArrived") ) { return hx::Val( initArrived_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playerArrived") ) { return hx::Val( playerArrived_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dieInfoArrived") ) { return hx::Val( dieInfoArrived_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"playerColorArrived") ) { return hx::Val( playerColorArrived_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"playerLocationArrived") ) { return hx::Val( playerLocationArrived_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"playerExperienceArrived") ) { return hx::Val( playerExperienceArrived_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"playerDestinationArrived") ) { return hx::Val( playerDestinationArrived_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Connection_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"server") ) { server=inValue.Cast<  ::sys::net::Socket >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outbox") ) { outbox=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"readers") ) { readers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"writers") ) { writers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Connection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("server","\xc3","\x4a","\x37","\x6e"));
	outFields->push(HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02"));
	outFields->push(HX_HCSTRING("writers","\x60","\x06","\x36","\xab"));
	outFields->push(HX_HCSTRING("outbox","\x3d","\x6a","\x76","\x0c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Connection_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Connection_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::sys::net::Socket*/ ,(int)offsetof(Connection_obj,server),HX_HCSTRING("server","\xc3","\x4a","\x37","\x6e")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Connection_obj,readers),HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Connection_obj,writers),HX_HCSTRING("writers","\x60","\x06","\x36","\xab")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Connection_obj,outbox),HX_HCSTRING("outbox","\x3d","\x6a","\x76","\x0c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Connection_obj_sStaticStorageInfo = 0;
#endif

static ::String Connection_obj_sMemberFields[] = {
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("server","\xc3","\x4a","\x37","\x6e"),
	HX_HCSTRING("readers","\xd0","\xf5","\xde","\x02"),
	HX_HCSTRING("writers","\x60","\x06","\x36","\xab"),
	HX_HCSTRING("outbox","\x3d","\x6a","\x76","\x0c"),
	HX_HCSTRING("pushIn","\x5f","\xfc","\x2c","\x72"),
	HX_HCSTRING("popOut","\x7d","\x0b","\xb7","\xfb"),
	HX_HCSTRING("read","\x56","\x4b","\xa7","\x4b"),
	HX_HCSTRING("initArrived","\x3d","\xfb","\x2a","\xf8"),
	HX_HCSTRING("playerColorArrived","\x4b","\xca","\x06","\x3e"),
	HX_HCSTRING("dieInfoArrived","\x3f","\x68","\xbb","\xdd"),
	HX_HCSTRING("playerLocationArrived","\x57","\xb8","\xd9","\xc7"),
	HX_HCSTRING("playerDestinationArrived","\x40","\x33","\xbd","\x10"),
	HX_HCSTRING("playerArrived","\x0c","\x67","\x39","\xb7"),
	HX_HCSTRING("playerExperienceArrived","\x42","\xe3","\x7e","\xa4"),
	HX_HCSTRING("clientLoop","\x4f","\x1e","\x9b","\x30"),
	::String(null()) };

static void Connection_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Connection_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Connection_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Connection_obj::__mClass,"__mClass");
};

#endif

hx::Class Connection_obj::__mClass;

void Connection_obj::__register()
{
	hx::Object *dummy = new Connection_obj;
	Connection_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Connection","\x3e","\xa4","\xc3","\xeb");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Connection_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Connection_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Connection_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Connection_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Connection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Connection_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

