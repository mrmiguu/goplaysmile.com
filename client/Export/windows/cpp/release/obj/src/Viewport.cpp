// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
#ifndef INCLUDED_Animation
#include <Animation.h>
#endif
#ifndef INCLUDED_Cars
#include <Cars.h>
#endif
#ifndef INCLUDED_Dests
#include <Dests.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Viewport
#include <Viewport.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_28eb6841786acdb6_85_new,"Viewport","new",0x68e86478,"Viewport.new","Viewport.hx",85,0x7c73d1f8)
HX_DEFINE_STACK_FRAME(_hx_pos_28eb6841786acdb6_89_new,"Viewport","new",0x68e86478,"Viewport.new","Viewport.hx",89,0x7c73d1f8)
HX_DEFINE_STACK_FRAME(_hx_pos_28eb6841786acdb6_90_new,"Viewport","new",0x68e86478,"Viewport.new","Viewport.hx",90,0x7c73d1f8)
HX_DEFINE_STACK_FRAME(_hx_pos_28eb6841786acdb6_95_new,"Viewport","new",0x68e86478,"Viewport.new","Viewport.hx",95,0x7c73d1f8)
HX_DEFINE_STACK_FRAME(_hx_pos_28eb6841786acdb6_17_new,"Viewport","new",0x68e86478,"Viewport.new","Viewport.hx",17,0x7c73d1f8)
static const ::String _hx_array_data_76570886_8[] = {
	HX_("santaclarita",8f,c4,a5,a7),HX_("sanfernando",13,7e,22,c1),HX_("lakeviewterrace",be,6b,a8,f3),HX_("sunland",77,65,a6,13),HX_("panoramacity",60,3e,50,99),HX_("lacanada",43,8c,1c,9b),HX_("pasadena",33,0a,03,df),HX_("vannuys",44,36,a5,92),HX_("burbank",7b,b2,b7,97),HX_("studiocity",c1,71,fb,7f),HX_("glendale",04,94,dc,88),HX_("azusa",ea,78,db,2a),HX_("sandimas",1a,68,59,48),HX_("claremont",f3,54,ce,7a),HX_("highlandpark",b7,24,97,5d),HX_("losangeles",df,a5,fe,95),HX_("beverlyhills",65,97,b3,6a),HX_("rosemead",4a,9f,21,eb),HX_("westcovina",41,90,5d,f2),HX_("pomona",94,a9,d3,f9),HX_("elmonte",76,99,e2,a2),HX_("montereypark",b3,b2,a4,81),HX_("calpoly",5a,11,0e,57),HX_("usc",45,2c,59,00),HX_("commerce",5b,93,fd,c0),HX_("southelmonte",09,13,3c,c0),HX_("culvercity",54,ff,c7,58),HX_("chinohills",0d,f4,cb,eb),HX_("santamonica",48,a1,c0,d7),HX_("diamondbar",ff,96,f0,fc),HX_("cityofindustry",e0,a1,2a,ff),HX_("santafesprings",7a,1a,aa,5f),HX_("lax",63,48,52,00),HX_("watts",29,25,25,c5),HX_("lynwood",ee,90,4d,91),HX_("brea",2c,c2,1d,41),HX_("corona",dc,09,7e,ca),HX_("bellflower",1e,57,7d,c3),HX_("compton",e4,80,77,83),HX_("hawthorne",6c,d9,71,3f),HX_("gardena",0c,43,d5,69),HX_("dominguezhills",c8,7c,fd,1d),HX_("northlongbeach",02,ab,3c,37),HX_("torrance",4a,f8,78,6b),HX_("buenapark",4f,0e,e2,6b),HX_("carson",be,f4,e4,ba),HX_("fullerton",57,60,02,5d),HX_("yorbalinda",93,54,2d,fb),HX_("anaheim",f5,24,cd,db),HX_("cypress",0d,e9,83,3e),HX_("westminster",91,31,9f,c4),HX_("palosverdes",ce,2f,9e,57),HX_("gardengrove",3e,28,18,fa),HX_("orange",ee,b2,bc,45),HX_("longbeach",67,50,04,88),HX_("sanpedro",2c,be,7c,2e),HX_("huntingtonbeach",1f,95,7b,3b),HX_("santaana",67,eb,6f,79),HX_("fountainvalley",13,f2,65,ee),
};
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_104_point,"Viewport","point",0xec837e68,"Viewport.point","Viewport.hx",104,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_107_aimRC,"Viewport","aimRC",0x458c738e,"Viewport.aimRC","Viewport.hx",107,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_108_aimOC,"Viewport","aimOC",0x458c70f1,"Viewport.aimOC","Viewport.hx",108,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_109_aimYC,"Viewport","aimYC",0x458c79a7,"Viewport.aimYC","Viewport.hx",109,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_110_aimGC,"Viewport","aimGC",0x458c69f9,"Viewport.aimGC","Viewport.hx",110,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_111_aimBC,"Viewport","aimBC",0x458c659e,"Viewport.aimBC","Viewport.hx",111,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_112_aimIC,"Viewport","aimIC",0x458c6bb7,"Viewport.aimIC","Viewport.hx",112,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_113_aimVC,"Viewport","aimVC",0x458c770a,"Viewport.aimVC","Viewport.hx",113,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_115_aimRD,"Viewport","aimRD",0x458c738f,"Viewport.aimRD","Viewport.hx",115,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_116_aimOD,"Viewport","aimOD",0x458c70f2,"Viewport.aimOD","Viewport.hx",116,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_117_aimYD,"Viewport","aimYD",0x458c79a8,"Viewport.aimYD","Viewport.hx",117,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_118_aimGD,"Viewport","aimGD",0x458c69fa,"Viewport.aimGD","Viewport.hx",118,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_119_aimBD,"Viewport","aimBD",0x458c659f,"Viewport.aimBD","Viewport.hx",119,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_120_aimID,"Viewport","aimID",0x458c6bb8,"Viewport.aimID","Viewport.hx",120,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_121_aimVD,"Viewport","aimVD",0x458c770b,"Viewport.aimVD","Viewport.hx",121,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_144_transition,"Viewport","transition",0x71502c7d,"Viewport.transition","Viewport.hx",144,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_166_relocateCars,"Viewport","relocateCars",0x43e040ec,"Viewport.relocateCars","Viewport.hx",166,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_203_relocateDests,"Viewport","relocateDests",0xb664c024,"Viewport.relocateDests","Viewport.hx",203,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_240_click,"Viewport","click",0x6e524660,"Viewport.click","Viewport.hx",240,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_254_doubleClick,"Viewport","doubleClick",0x41606f8f,"Viewport.doubleClick","Viewport.hx",254,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_332_move,"Viewport","move",0x61cde3f9,"Viewport.move","Viewport.hx",332,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_348_mouseMove,"Viewport","mouseMove",0x52f451ee,"Viewport.mouseMove","Viewport.hx",348,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_432_gpsMap,"Viewport","gpsMap",0x073e797a,"Viewport.gpsMap","Viewport.hx",432,0x7c73d1f8)
HX_LOCAL_STACK_FRAME(_hx_pos_28eb6841786acdb6_465_littleMap,"Viewport","littleMap",0x7d2b715e,"Viewport.littleMap","Viewport.hx",465,0x7c73d1f8)

void Viewport_obj::__construct( ::Globals g,int x,int y,int w,int h, ::openfl::display::Sprite gps, ::openfl::display::Sprite from){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::Viewport,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic m){
            			HX_GC_STACKFRAME(&_hx_pos_28eb6841786acdb6_85_new)
HXLINE(  85)			if (_gthis->zoom->get_visible()) {
HXLINE(  86)				_gthis->mouseHeld = true;
HXLINE(  87)				_gthis->animating = false;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::Viewport,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic m1){
            			HX_GC_STACKFRAME(&_hx_pos_28eb6841786acdb6_89_new)
HXLINE(  89)			_gthis->mouseHeld = false;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_2, ::Viewport,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic m2){
            			HX_GC_STACKFRAME(&_hx_pos_28eb6841786acdb6_90_new)
HXLINE(  90)			_gthis->mouseHeld = false;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_3, ::Viewport,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic m3){
            			HX_GC_STACKFRAME(&_hx_pos_28eb6841786acdb6_95_new)
HXLINE(  96)			_gthis->zoom->set_visible(true);
HXLINE(  97)			_gthis->infoCard->set_visible(false);
HXLINE(  98)			_gthis->slide->play(null(),null(),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_28eb6841786acdb6_17_new)
HXLINE( 164)		this->carMoved = true;
HXLINE( 141)		this->delay = ((Float)0.025);
HXLINE( 140)		this->future = ((Float)0.0);
HXLINE( 139)		this->animating = false;
HXLINE( 137)		this->aVD =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 136)		this->aID =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 135)		this->aBD =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 134)		this->aGD =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 133)		this->aYD =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 132)		this->aOD =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 131)		this->aRD =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 129)		this->aVC =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 128)		this->aIC =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 127)		this->aBC =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 126)		this->aGC =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 125)		this->aYC =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 124)		this->aOC =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 123)		this->aRC =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE(  29)		this->nodeNames = ::Array_obj< ::String >::fromData( _hx_array_data_76570886_8,59);
HXLINE(  28)		 ::openfl::display::BitmapData image = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/map.png",9c,e6,fc,25)),null());
HXDLIN(  28)		::Array< ::Dynamic> points = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  28)		int cenX = (int)12;
HXDLIN(  28)		int cenY = (int)13;
HXDLIN(  28)		int halfCenY = ::Std_obj::_hx_int(((Float)cenY / (Float)(int)2));
HXDLIN(  28)		int color = (int)16711680;
HXDLIN(  28)		{
HXLINE(  28)			int _g1 = (int)0;
HXDLIN(  28)			int _g = image->height;
HXDLIN(  28)			while((_g1 < _g)){
HXLINE(  28)				_g1 = (_g1 + (int)1);
HXDLIN(  28)				int j = (_g1 - (int)1);
HXDLIN(  28)				{
HXLINE(  28)					int _g3 = (int)0;
HXDLIN(  28)					int _g2 = image->width;
HXDLIN(  28)					while((_g3 < _g2)){
HXLINE(  28)						_g3 = (_g3 + (int)1);
HXDLIN(  28)						int i = (_g3 - (int)1);
HXDLIN(  28)						bool newLoc = true;
HXDLIN(  28)						if ((image->getPixel(i,j) == color)) {
HXLINE(  28)							if ((points->length > (int)0)) {
HXLINE(  28)								{
HXLINE(  28)									int _g4 = (int)0;
HXDLIN(  28)									while((_g4 < points->length)){
HXLINE(  28)										 ::Dynamic p = points->__get(_g4);
HXDLIN(  28)										_g4 = (_g4 + (int)1);
HXDLIN(  28)										bool _hx_tmp;
HXDLIN(  28)										if ((::Math_obj::abs((( (int)(p->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - i)) <= cenX)) {
HXLINE(  28)											_hx_tmp = (::Math_obj::abs((( (int)(p->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - j)) <= cenY);
            										}
            										else {
HXLINE(  28)											_hx_tmp = false;
            										}
HXDLIN(  28)										if (_hx_tmp) {
HXLINE(  28)											newLoc = false;
            										}
            									}
            								}
HXDLIN(  28)								if (newLoc) {
HXLINE(  28)									points->push( ::Dynamic(hx::Anon_obj::Create(2)
            										->setFixed(0,HX_("x",78,00,00,00),(i + (int)1))
            										->setFixed(1,HX_("y",79,00,00,00),(j + halfCenY))));
            								}
            							}
            							else {
HXLINE(  28)								points->push( ::Dynamic(hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("x",78,00,00,00),(i + (int)1))
            									->setFixed(1,HX_("y",79,00,00,00),(j + halfCenY))));
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN(  28)		this->nodePoints = points;
HXLINE(  21)		this->lD =  ::Dests_obj::__alloc( HX_CTX );
HXLINE(  20)		this->bD =  ::Dests_obj::__alloc( HX_CTX );
HXLINE(  19)		this->lC =  ::Cars_obj::__alloc( HX_CTX );
HXLINE(  18)		this->bC =  ::Cars_obj::__alloc( HX_CTX );
HXLINE(  60)		 ::Viewport _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE(  61)		super::__construct();
HXLINE(  63)		this->g = g;
HXLINE(  64)		this->slide = ::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + HX_("etc/slide.ogg",97,c2,4b,a7)));
HXLINE(  66)		this->set_x((gps->get_x() + x));
HXLINE(  67)		this->set_y((gps->get_y() + y));
HXLINE(  68)		this->w = w;
HXLINE(  69)		this->h = h;
HXLINE(  71)		this->zoom = this->gpsMap();
HXLINE(  72)		this->addChild(this->zoom);
HXLINE(  74)		this->world = this->littleMap();
HXLINE(  75)		this->addChild(this->world);
HXLINE(  76)		 ::openfl::display::Sprite _hx_tmp1 = this->world;
HXDLIN(  76)		_hx_tmp1->set_visible(!(this->zoom->get_visible()));
HXLINE(  79)		this->zoom->doubleClickEnabled = true;
HXLINE(  80)		this->world->doubleClickEnabled = true;
HXLINE(  81)		this->zoom->addEventListener(HX_("doubleClick",77,03,76,cd),this->doubleClick_dyn(),null(),null(),null());
HXLINE(  82)		this->world->addEventListener(HX_("doubleClick",77,03,76,cd),this->doubleClick_dyn(),null(),null(),null());
HXLINE(  84)		this->zoom->addEventListener(HX_("click",48,7c,5e,48),this->click_dyn(),null(),null(),null());
HXLINE(  85)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null(),null());
HXLINE(  89)		from->addEventListener(HX_("mouseUp",e0,f3,72,c0), ::Dynamic(new _hx_Closure_1(_gthis)),null(),null(),null());
HXLINE(  90)		from->addEventListener(HX_("rollOut",11,f9,11,5d), ::Dynamic(new _hx_Closure_2(_gthis)),null(),null(),null());
HXLINE(  91)		from->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->mouseMove_dyn(),null(),null(),null());
HXLINE(  93)		int w1 = (int)-1;
HXDLIN(  93)		int h1 = (int)-1;
HXDLIN(  93)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/info.png",44,b0,f5,90)),null());
HXDLIN(  93)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN(  93)		set->addRect(png->rect);
HXDLIN(  93)		 ::openfl::display::Tileset set1 = set;
HXDLIN(  93)		int map;
HXDLIN(  93)		if ((w1 < (int)0)) {
HXLINE(  93)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE(  93)			map = w1;
            		}
HXDLIN(  93)		int map1;
HXDLIN(  93)		if ((h1 < (int)0)) {
HXLINE(  93)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE(  93)			map1 = h1;
            		}
HXDLIN(  93)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN(  93)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN(  93)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  93)		sprite->addChild(map2);
HXDLIN(  93)		 ::openfl::display::Sprite sprite1 = sprite;
HXDLIN(  93)		sprite1->set_x((int)0);
HXDLIN(  93)		sprite1->set_y((int)0);
HXDLIN(  93)		this->infoCard = sprite1;
HXLINE(  94)		this->infoCard->set_visible(false);
HXLINE(  95)		this->infoCard->addEventListener(HX_("click",48,7c,5e,48), ::Dynamic(new _hx_Closure_3(_gthis)),null(),null(),null());
HXLINE( 100)		this->addChild(this->infoCard);
            	}

Dynamic Viewport_obj::__CreateEmpty() { return new Viewport_obj; }

void *Viewport_obj::_hx_vtable = 0;

Dynamic Viewport_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Viewport_obj > _hx_result = new Viewport_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool Viewport_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x76570886;
		}
	}
}

static ::Animatible_obj _hx_Viewport__hx_Animatible= {
	( void (hx::Object::*)())&::Viewport_obj::transition,
};

void *Viewport_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x79c359f6: return &_hx_Viewport__hx_Animatible;
	}
	return super::_hx_getInterface(inHash);
}

 ::Dynamic Viewport_obj::point(::String id){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_104_point)
HXLINE( 104)		::Array< ::Dynamic> _hx_tmp = this->nodePoints;
HXDLIN( 104)		::Array< ::String > names = this->nodeNames;
HXDLIN( 104)		int index = (int)0;
HXDLIN( 104)		{
HXLINE( 104)			int _g1 = (int)0;
HXDLIN( 104)			int _g = names->length;
HXDLIN( 104)			while((_g1 < _g)){
HXLINE( 104)				_g1 = (_g1 + (int)1);
HXDLIN( 104)				int i = (_g1 - (int)1);
HXDLIN( 104)				if ((id == names->__get(i))) {
HXLINE( 104)					index = i;
            				}
            			}
            		}
HXDLIN( 104)		return _hx_tmp->__get(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,point,return )

void Viewport_obj::aimRC(::String loc){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_107_aimRC)
HXLINE( 107)		this->aRC = this->point(loc);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimRC,(void))

void Viewport_obj::aimOC(::String loc){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_108_aimOC)
HXLINE( 108)		this->aOC = this->point(loc);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimOC,(void))

void Viewport_obj::aimYC(::String loc){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_109_aimYC)
HXLINE( 109)		this->aYC = this->point(loc);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimYC,(void))

void Viewport_obj::aimGC(::String loc){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_110_aimGC)
HXLINE( 110)		this->aGC = this->point(loc);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimGC,(void))

void Viewport_obj::aimBC(::String loc){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_111_aimBC)
HXLINE( 111)		this->aBC = this->point(loc);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimBC,(void))

void Viewport_obj::aimIC(::String loc){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_112_aimIC)
HXLINE( 112)		this->aIC = this->point(loc);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimIC,(void))

void Viewport_obj::aimVC(::String loc){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_113_aimVC)
HXLINE( 113)		this->aVC = this->point(loc);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimVC,(void))

void Viewport_obj::aimRD(::String dest){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_115_aimRD)
HXLINE( 115)		this->aRD = this->point(dest);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimRD,(void))

void Viewport_obj::aimOD(::String dest){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_116_aimOD)
HXLINE( 116)		this->aOD = this->point(dest);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimOD,(void))

void Viewport_obj::aimYD(::String dest){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_117_aimYD)
HXLINE( 117)		this->aYD = this->point(dest);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimYD,(void))

void Viewport_obj::aimGD(::String dest){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_118_aimGD)
HXLINE( 118)		this->aGD = this->point(dest);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimGD,(void))

void Viewport_obj::aimBD(::String dest){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_119_aimBD)
HXLINE( 119)		this->aBD = this->point(dest);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimBD,(void))

void Viewport_obj::aimID(::String dest){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_120_aimID)
HXLINE( 120)		this->aID = this->point(dest);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimID,(void))

void Viewport_obj::aimVD(::String dest){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_121_aimVD)
HXLINE( 121)		this->aVD = this->point(dest);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,aimVD,(void))

void Viewport_obj::transition(){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_144_transition)
HXLINE( 145)		 ::Dynamic aC =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),(int)0)
            			->setFixed(1,HX_("y",79,00,00,00),(int)0));
HXLINE( 147)		{
HXLINE( 147)			::String _g = this->g->me()->getColor();
HXDLIN( 147)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("b",62,00,00,00)) ){
HXLINE( 152)				aC = this->aBC;
HXDLIN( 152)				goto _hx_goto_25;
            			}
            			if (  (_hx_switch_0==HX_("g",67,00,00,00)) ){
HXLINE( 151)				aC = this->aGC;
HXDLIN( 151)				goto _hx_goto_25;
            			}
            			if (  (_hx_switch_0==HX_("i",69,00,00,00)) ){
HXLINE( 153)				aC = this->aIC;
HXDLIN( 153)				goto _hx_goto_25;
            			}
            			if (  (_hx_switch_0==HX_("o",6f,00,00,00)) ){
HXLINE( 149)				aC = this->aOC;
HXDLIN( 149)				goto _hx_goto_25;
            			}
            			if (  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE( 148)				aC = this->aRC;
HXDLIN( 148)				goto _hx_goto_25;
            			}
            			if (  (_hx_switch_0==HX_("v",76,00,00,00)) ){
HXLINE( 154)				aC = this->aVC;
HXDLIN( 154)				goto _hx_goto_25;
            			}
            			if (  (_hx_switch_0==HX_("y",79,00,00,00)) ){
HXLINE( 150)				aC = this->aYC;
HXDLIN( 150)				goto _hx_goto_25;
            			}
            			_hx_goto_25:;
            		}
HXLINE( 157)		int aC1 = ( (int)(aC->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) );
HXDLIN( 157)		Float _hx_tmp = (aC1 + ((Float)this->w / (Float)(int)2));
HXDLIN( 157)		Float _hx_tmp1 = ((Float)(_hx_tmp - this->board->get_x()) / (Float)(int)2);
HXLINE( 158)		int aC2 = ( (int)(aC->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) );
HXDLIN( 158)		Float _hx_tmp2 = (aC2 + ((Float)this->h / (Float)(int)2));
HXLINE( 157)		this->move(_hx_tmp1,((Float)(_hx_tmp2 - this->board->get_y()) / (Float)(int)2));
HXLINE( 160)		this->relocateCars();
HXLINE( 161)		this->relocateDests();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Viewport_obj,transition,(void))

void Viewport_obj::relocateCars(){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_166_relocateCars)
HXLINE( 167)		this->lC->r->set_x((( (Float)(this->aRC->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)39.)));
HXLINE( 168)		this->lC->r->set_y((( (Float)(this->aRC->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)42.)));
HXLINE( 169)		 ::openfl::display::Tile _hx_tmp = this->bC->r;
HXDLIN( 169)		Float _hx_tmp1 = this->lC->r->get_x();
HXDLIN( 169)		_hx_tmp->set_x((_hx_tmp1 + this->board->get_x()));
HXLINE( 170)		 ::openfl::display::Tile _hx_tmp2 = this->bC->r;
HXDLIN( 170)		Float _hx_tmp3 = this->lC->r->get_y();
HXDLIN( 170)		_hx_tmp2->set_y((_hx_tmp3 + this->board->get_y()));
HXLINE( 172)		this->lC->o->set_x((( (Float)(this->aOC->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)39.)));
HXLINE( 173)		this->lC->o->set_y((( (Float)(this->aOC->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)42.)));
HXLINE( 174)		 ::openfl::display::Tile _hx_tmp4 = this->bC->o;
HXDLIN( 174)		Float _hx_tmp5 = this->lC->o->get_x();
HXDLIN( 174)		_hx_tmp4->set_x((_hx_tmp5 + this->board->get_x()));
HXLINE( 175)		 ::openfl::display::Tile _hx_tmp6 = this->bC->o;
HXDLIN( 175)		Float _hx_tmp7 = this->lC->o->get_y();
HXDLIN( 175)		_hx_tmp6->set_y((_hx_tmp7 + this->board->get_y()));
HXLINE( 177)		this->lC->y->set_x((( (Float)(this->aYC->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)39.)));
HXLINE( 178)		this->lC->y->set_y((( (Float)(this->aYC->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)42.)));
HXLINE( 179)		 ::openfl::display::Tile _hx_tmp8 = this->bC->y;
HXDLIN( 179)		Float _hx_tmp9 = this->lC->y->get_x();
HXDLIN( 179)		_hx_tmp8->set_x((_hx_tmp9 + this->board->get_x()));
HXLINE( 180)		 ::openfl::display::Tile _hx_tmp10 = this->bC->y;
HXDLIN( 180)		Float _hx_tmp11 = this->lC->y->get_y();
HXDLIN( 180)		_hx_tmp10->set_y((_hx_tmp11 + this->board->get_y()));
HXLINE( 182)		this->lC->g->set_x((( (Float)(this->aGC->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)39.)));
HXLINE( 183)		this->lC->g->set_y((( (Float)(this->aGC->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)42.)));
HXLINE( 184)		 ::openfl::display::Tile _hx_tmp12 = this->bC->g;
HXDLIN( 184)		Float _hx_tmp13 = this->lC->g->get_x();
HXDLIN( 184)		_hx_tmp12->set_x((_hx_tmp13 + this->board->get_x()));
HXLINE( 185)		 ::openfl::display::Tile _hx_tmp14 = this->bC->g;
HXDLIN( 185)		Float _hx_tmp15 = this->lC->g->get_y();
HXDLIN( 185)		_hx_tmp14->set_y((_hx_tmp15 + this->board->get_y()));
HXLINE( 187)		this->lC->b->set_x((( (Float)(this->aBC->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)39.)));
HXLINE( 188)		this->lC->b->set_y((( (Float)(this->aBC->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)42.)));
HXLINE( 189)		 ::openfl::display::Tile _hx_tmp16 = this->bC->b;
HXDLIN( 189)		Float _hx_tmp17 = this->lC->b->get_x();
HXDLIN( 189)		_hx_tmp16->set_x((_hx_tmp17 + this->board->get_x()));
HXLINE( 190)		 ::openfl::display::Tile _hx_tmp18 = this->bC->b;
HXDLIN( 190)		Float _hx_tmp19 = this->lC->b->get_y();
HXDLIN( 190)		_hx_tmp18->set_y((_hx_tmp19 + this->board->get_y()));
HXLINE( 192)		this->lC->i->set_x((( (Float)(this->aIC->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)39.)));
HXLINE( 193)		this->lC->i->set_y((( (Float)(this->aIC->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)42.)));
HXLINE( 194)		 ::openfl::display::Tile _hx_tmp20 = this->bC->i;
HXDLIN( 194)		Float _hx_tmp21 = this->lC->i->get_x();
HXDLIN( 194)		_hx_tmp20->set_x((_hx_tmp21 + this->board->get_x()));
HXLINE( 195)		 ::openfl::display::Tile _hx_tmp22 = this->bC->i;
HXDLIN( 195)		Float _hx_tmp23 = this->lC->i->get_y();
HXDLIN( 195)		_hx_tmp22->set_y((_hx_tmp23 + this->board->get_y()));
HXLINE( 197)		this->lC->v->set_x((( (Float)(this->aVC->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)39.)));
HXLINE( 198)		this->lC->v->set_y((( (Float)(this->aVC->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)42.)));
HXLINE( 199)		 ::openfl::display::Tile _hx_tmp24 = this->bC->v;
HXDLIN( 199)		Float _hx_tmp25 = this->lC->v->get_x();
HXDLIN( 199)		_hx_tmp24->set_x((_hx_tmp25 + this->board->get_x()));
HXLINE( 200)		 ::openfl::display::Tile _hx_tmp26 = this->bC->v;
HXDLIN( 200)		Float _hx_tmp27 = this->lC->v->get_y();
HXDLIN( 200)		_hx_tmp26->set_y((_hx_tmp27 + this->board->get_y()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Viewport_obj,relocateCars,(void))

void Viewport_obj::relocateDests(){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_203_relocateDests)
HXLINE( 204)		this->lD->r->set_x((( (Float)(this->aRD->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 205)		this->lD->r->set_y((( (Float)(this->aRD->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 206)		 ::openfl::display::Tile _hx_tmp = this->bD->r;
HXDLIN( 206)		Float _hx_tmp1 = this->lD->r->get_x();
HXDLIN( 206)		_hx_tmp->set_x((_hx_tmp1 + this->board->get_x()));
HXLINE( 207)		 ::openfl::display::Tile _hx_tmp2 = this->bD->r;
HXDLIN( 207)		Float _hx_tmp3 = this->lD->r->get_y();
HXDLIN( 207)		_hx_tmp2->set_y((_hx_tmp3 + this->board->get_y()));
HXLINE( 209)		this->lD->o->set_x((( (Float)(this->aOD->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 210)		this->lD->o->set_y((( (Float)(this->aOD->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 211)		 ::openfl::display::Tile _hx_tmp4 = this->bD->o;
HXDLIN( 211)		Float _hx_tmp5 = this->lD->o->get_x();
HXDLIN( 211)		_hx_tmp4->set_x((_hx_tmp5 + this->board->get_x()));
HXLINE( 212)		 ::openfl::display::Tile _hx_tmp6 = this->bD->o;
HXDLIN( 212)		Float _hx_tmp7 = this->lD->o->get_y();
HXDLIN( 212)		_hx_tmp6->set_y((_hx_tmp7 + this->board->get_y()));
HXLINE( 214)		this->lD->y->set_x((( (Float)(this->aYD->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 215)		this->lD->y->set_y((( (Float)(this->aYD->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 216)		 ::openfl::display::Tile _hx_tmp8 = this->bD->y;
HXDLIN( 216)		Float _hx_tmp9 = this->lD->y->get_x();
HXDLIN( 216)		_hx_tmp8->set_x((_hx_tmp9 + this->board->get_x()));
HXLINE( 217)		 ::openfl::display::Tile _hx_tmp10 = this->bD->y;
HXDLIN( 217)		Float _hx_tmp11 = this->lD->y->get_y();
HXDLIN( 217)		_hx_tmp10->set_y((_hx_tmp11 + this->board->get_y()));
HXLINE( 219)		this->lD->g->set_x((( (Float)(this->aGD->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 220)		this->lD->g->set_y((( (Float)(this->aGD->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 221)		 ::openfl::display::Tile _hx_tmp12 = this->bD->g;
HXDLIN( 221)		Float _hx_tmp13 = this->lD->g->get_x();
HXDLIN( 221)		_hx_tmp12->set_x((_hx_tmp13 + this->board->get_x()));
HXLINE( 222)		 ::openfl::display::Tile _hx_tmp14 = this->bD->g;
HXDLIN( 222)		Float _hx_tmp15 = this->lD->g->get_y();
HXDLIN( 222)		_hx_tmp14->set_y((_hx_tmp15 + this->board->get_y()));
HXLINE( 224)		this->lD->b->set_x((( (Float)(this->aBD->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 225)		this->lD->b->set_y((( (Float)(this->aBD->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 226)		 ::openfl::display::Tile _hx_tmp16 = this->bD->b;
HXDLIN( 226)		Float _hx_tmp17 = this->lD->b->get_x();
HXDLIN( 226)		_hx_tmp16->set_x((_hx_tmp17 + this->board->get_x()));
HXLINE( 227)		 ::openfl::display::Tile _hx_tmp18 = this->bD->b;
HXDLIN( 227)		Float _hx_tmp19 = this->lD->b->get_y();
HXDLIN( 227)		_hx_tmp18->set_y((_hx_tmp19 + this->board->get_y()));
HXLINE( 229)		this->lD->i->set_x((( (Float)(this->aID->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 230)		this->lD->i->set_y((( (Float)(this->aID->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 231)		 ::openfl::display::Tile _hx_tmp20 = this->bD->i;
HXDLIN( 231)		Float _hx_tmp21 = this->lD->i->get_x();
HXDLIN( 231)		_hx_tmp20->set_x((_hx_tmp21 + this->board->get_x()));
HXLINE( 232)		 ::openfl::display::Tile _hx_tmp22 = this->bD->i;
HXDLIN( 232)		Float _hx_tmp23 = this->lD->i->get_y();
HXDLIN( 232)		_hx_tmp22->set_y((_hx_tmp23 + this->board->get_y()));
HXLINE( 234)		this->lD->v->set_x((( (Float)(this->aVD->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 235)		this->lD->v->set_y((( (Float)(this->aVD->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - ((Float)37.)));
HXLINE( 236)		 ::openfl::display::Tile _hx_tmp24 = this->bD->v;
HXDLIN( 236)		Float _hx_tmp25 = this->lD->v->get_x();
HXDLIN( 236)		_hx_tmp24->set_x((_hx_tmp25 + this->board->get_x()));
HXLINE( 237)		 ::openfl::display::Tile _hx_tmp26 = this->bD->v;
HXDLIN( 237)		Float _hx_tmp27 = this->lD->v->get_y();
HXDLIN( 237)		_hx_tmp26->set_y((_hx_tmp27 + this->board->get_y()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Viewport_obj,relocateDests,(void))

void Viewport_obj::click( ::openfl::events::MouseEvent m){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_240_click)
HXLINE( 241)		Float m1 = m->localX;
HXDLIN( 241)		Float p1 = (m1 - this->board->get_x());
HXLINE( 242)		Float m2 = m->localY;
HXDLIN( 242)		Float p2 = (m2 - this->board->get_y());
HXLINE( 244)		{
HXLINE( 244)			int _g = (int)0;
HXDLIN( 244)			::Array< ::Dynamic> _g1 = this->nodePoints;
HXDLIN( 244)			while((_g < _g1->length)){
HXLINE( 244)				 ::Dynamic p = _g1->__get(_g);
HXDLIN( 244)				_g = (_g + (int)1);
HXLINE( 245)				bool _hx_tmp;
HXDLIN( 245)				bool _hx_tmp1;
HXDLIN( 245)				bool _hx_tmp2;
HXDLIN( 245)				if (((( (int)(p->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) - (int)6) < p1)) {
HXLINE( 245)					_hx_tmp2 = (p1 < (( (int)(p->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) ) + (int)6));
            				}
            				else {
HXLINE( 245)					_hx_tmp2 = false;
            				}
HXDLIN( 245)				if (_hx_tmp2) {
HXLINE( 245)					_hx_tmp1 = ((( (int)(p->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) - (int)6) < p2);
            				}
            				else {
HXLINE( 245)					_hx_tmp1 = false;
            				}
HXDLIN( 245)				if (_hx_tmp1) {
HXLINE( 245)					_hx_tmp = (p2 < (( (int)(p->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + (int)6));
            				}
            				else {
HXLINE( 245)					_hx_tmp = false;
            				}
HXDLIN( 245)				if (_hx_tmp) {
HXLINE( 248)					this->infoCard->set_visible(true);
HXLINE( 249)					this->zoom->set_visible(false);
HXLINE( 250)					this->slide->play(null(),null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,click,(void))

void Viewport_obj::doubleClick( ::openfl::events::MouseEvent m){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_254_doubleClick)
HXLINE( 255)		if (this->infoCard->get_visible()) {
HXLINE( 255)			return;
            		}
HXLINE( 258)		if (this->world->get_visible()) {
HXLINE( 261)			Float prcx = this->bC->r->get_x();
HXDLIN( 261)			Float prcx1 = (prcx - this->board->get_x());
HXLINE( 262)			Float prcy = this->bC->r->get_y();
HXDLIN( 262)			Float prcy1 = (prcy - this->board->get_y());
HXLINE( 263)			Float pocx = this->bC->o->get_x();
HXDLIN( 263)			Float pocx1 = (pocx - this->board->get_x());
HXLINE( 264)			Float pocy = this->bC->o->get_y();
HXDLIN( 264)			Float pocy1 = (pocy - this->board->get_y());
HXLINE( 265)			Float pycx = this->bC->y->get_x();
HXDLIN( 265)			Float pycx1 = (pycx - this->board->get_x());
HXLINE( 266)			Float pycy = this->bC->y->get_y();
HXDLIN( 266)			Float pycy1 = (pycy - this->board->get_y());
HXLINE( 267)			Float pgcx = this->bC->g->get_x();
HXDLIN( 267)			Float pgcx1 = (pgcx - this->board->get_x());
HXLINE( 268)			Float pgcy = this->bC->g->get_y();
HXDLIN( 268)			Float pgcy1 = (pgcy - this->board->get_y());
HXLINE( 269)			Float pbcx = this->bC->b->get_x();
HXDLIN( 269)			Float pbcx1 = (pbcx - this->board->get_x());
HXLINE( 270)			Float pbcy = this->bC->b->get_y();
HXDLIN( 270)			Float pbcy1 = (pbcy - this->board->get_y());
HXLINE( 271)			Float picx = this->bC->i->get_x();
HXDLIN( 271)			Float picx1 = (picx - this->board->get_x());
HXLINE( 272)			Float picy = this->bC->i->get_y();
HXDLIN( 272)			Float picy1 = (picy - this->board->get_y());
HXLINE( 273)			Float pvcx = this->bC->v->get_x();
HXDLIN( 273)			Float pvcx1 = (pvcx - this->board->get_x());
HXLINE( 274)			Float pvcy = this->bC->v->get_y();
HXDLIN( 274)			Float pvcy1 = (pvcy - this->board->get_y());
HXLINE( 276)			Float prdx = this->bD->r->get_x();
HXDLIN( 276)			Float prdx1 = (prdx - this->board->get_x());
HXLINE( 277)			Float prdy = this->bD->r->get_y();
HXDLIN( 277)			Float prdy1 = (prdy - this->board->get_y());
HXLINE( 278)			Float podx = this->bD->o->get_x();
HXDLIN( 278)			Float podx1 = (podx - this->board->get_x());
HXLINE( 279)			Float pody = this->bD->o->get_y();
HXDLIN( 279)			Float pody1 = (pody - this->board->get_y());
HXLINE( 280)			Float pydx = this->bD->y->get_x();
HXDLIN( 280)			Float pydx1 = (pydx - this->board->get_x());
HXLINE( 281)			Float pydy = this->bD->y->get_y();
HXDLIN( 281)			Float pydy1 = (pydy - this->board->get_y());
HXLINE( 282)			Float pgdx = this->bD->g->get_x();
HXDLIN( 282)			Float pgdx1 = (pgdx - this->board->get_x());
HXLINE( 283)			Float pgdy = this->bD->g->get_y();
HXDLIN( 283)			Float pgdy1 = (pgdy - this->board->get_y());
HXLINE( 284)			Float pbdx = this->bD->b->get_x();
HXDLIN( 284)			Float pbdx1 = (pbdx - this->board->get_x());
HXLINE( 285)			Float pbdy = this->bD->b->get_y();
HXDLIN( 285)			Float pbdy1 = (pbdy - this->board->get_y());
HXLINE( 286)			Float pidx = this->bD->i->get_x();
HXDLIN( 286)			Float pidx1 = (pidx - this->board->get_x());
HXLINE( 287)			Float pidy = this->bD->i->get_y();
HXDLIN( 287)			Float pidy1 = (pidy - this->board->get_y());
HXLINE( 288)			Float pvdx = this->bD->v->get_x();
HXDLIN( 288)			Float pvdx1 = (pvdx - this->board->get_x());
HXLINE( 289)			Float pvdy = this->bD->v->get_y();
HXDLIN( 289)			Float pvdy1 = (pvdy - this->board->get_y());
HXLINE( 291)			this->move(m->localX,m->localY);
HXLINE( 293)			 ::openfl::display::Tile _hx_tmp = this->bC->r;
HXDLIN( 293)			_hx_tmp->set_x((prcx1 + this->board->get_x()));
HXLINE( 294)			 ::openfl::display::Tile _hx_tmp1 = this->bC->r;
HXDLIN( 294)			_hx_tmp1->set_y((prcy1 + this->board->get_y()));
HXLINE( 295)			 ::openfl::display::Tile _hx_tmp2 = this->bC->o;
HXDLIN( 295)			_hx_tmp2->set_x((pocx1 + this->board->get_x()));
HXLINE( 296)			 ::openfl::display::Tile _hx_tmp3 = this->bC->o;
HXDLIN( 296)			_hx_tmp3->set_y((pocy1 + this->board->get_y()));
HXLINE( 297)			 ::openfl::display::Tile _hx_tmp4 = this->bC->y;
HXDLIN( 297)			_hx_tmp4->set_x((pycx1 + this->board->get_x()));
HXLINE( 298)			 ::openfl::display::Tile _hx_tmp5 = this->bC->y;
HXDLIN( 298)			_hx_tmp5->set_y((pycy1 + this->board->get_y()));
HXLINE( 299)			 ::openfl::display::Tile _hx_tmp6 = this->bC->g;
HXDLIN( 299)			_hx_tmp6->set_x((pgcx1 + this->board->get_x()));
HXLINE( 300)			 ::openfl::display::Tile _hx_tmp7 = this->bC->g;
HXDLIN( 300)			_hx_tmp7->set_y((pgcy1 + this->board->get_y()));
HXLINE( 301)			 ::openfl::display::Tile _hx_tmp8 = this->bC->b;
HXDLIN( 301)			_hx_tmp8->set_x((pbcx1 + this->board->get_x()));
HXLINE( 302)			 ::openfl::display::Tile _hx_tmp9 = this->bC->b;
HXDLIN( 302)			_hx_tmp9->set_y((pbcy1 + this->board->get_y()));
HXLINE( 303)			 ::openfl::display::Tile _hx_tmp10 = this->bC->i;
HXDLIN( 303)			_hx_tmp10->set_x((picx1 + this->board->get_x()));
HXLINE( 304)			 ::openfl::display::Tile _hx_tmp11 = this->bC->i;
HXDLIN( 304)			_hx_tmp11->set_y((picy1 + this->board->get_y()));
HXLINE( 305)			 ::openfl::display::Tile _hx_tmp12 = this->bC->v;
HXDLIN( 305)			_hx_tmp12->set_x((pvcx1 + this->board->get_x()));
HXLINE( 306)			 ::openfl::display::Tile _hx_tmp13 = this->bC->v;
HXDLIN( 306)			_hx_tmp13->set_y((pvcy1 + this->board->get_y()));
HXLINE( 307)			 ::openfl::display::Tile _hx_tmp14 = this->bD->r;
HXDLIN( 307)			_hx_tmp14->set_x((prdx1 + this->board->get_x()));
HXLINE( 308)			 ::openfl::display::Tile _hx_tmp15 = this->bD->r;
HXDLIN( 308)			_hx_tmp15->set_y((prdy1 + this->board->get_y()));
HXLINE( 309)			 ::openfl::display::Tile _hx_tmp16 = this->bD->o;
HXDLIN( 309)			_hx_tmp16->set_x((podx1 + this->board->get_x()));
HXLINE( 310)			 ::openfl::display::Tile _hx_tmp17 = this->bD->o;
HXDLIN( 310)			_hx_tmp17->set_y((pody1 + this->board->get_y()));
HXLINE( 311)			 ::openfl::display::Tile _hx_tmp18 = this->bD->y;
HXDLIN( 311)			_hx_tmp18->set_x((pydx1 + this->board->get_x()));
HXLINE( 312)			 ::openfl::display::Tile _hx_tmp19 = this->bD->y;
HXDLIN( 312)			_hx_tmp19->set_y((pydy1 + this->board->get_y()));
HXLINE( 313)			 ::openfl::display::Tile _hx_tmp20 = this->bD->g;
HXDLIN( 313)			_hx_tmp20->set_x((pgdx1 + this->board->get_x()));
HXLINE( 314)			 ::openfl::display::Tile _hx_tmp21 = this->bD->g;
HXDLIN( 314)			_hx_tmp21->set_y((pgdy1 + this->board->get_y()));
HXLINE( 315)			 ::openfl::display::Tile _hx_tmp22 = this->bD->b;
HXDLIN( 315)			_hx_tmp22->set_x((pbdx1 + this->board->get_x()));
HXLINE( 316)			 ::openfl::display::Tile _hx_tmp23 = this->bD->b;
HXDLIN( 316)			_hx_tmp23->set_y((pbdy1 + this->board->get_y()));
HXLINE( 317)			 ::openfl::display::Tile _hx_tmp24 = this->bD->i;
HXDLIN( 317)			_hx_tmp24->set_x((pidx1 + this->board->get_x()));
HXLINE( 318)			 ::openfl::display::Tile _hx_tmp25 = this->bD->i;
HXDLIN( 318)			_hx_tmp25->set_y((pidy1 + this->board->get_y()));
HXLINE( 319)			 ::openfl::display::Tile _hx_tmp26 = this->bD->v;
HXDLIN( 319)			_hx_tmp26->set_x((pvdx1 + this->board->get_x()));
HXLINE( 320)			 ::openfl::display::Tile _hx_tmp27 = this->bD->v;
HXDLIN( 320)			_hx_tmp27->set_y((pvdy1 + this->board->get_y()));
            		}
HXLINE( 323)		 ::openfl::display::Sprite _hx_tmp28 = this->zoom;
HXDLIN( 323)		_hx_tmp28->set_visible(!(this->zoom->get_visible()));
HXLINE( 324)		 ::openfl::display::Sprite _hx_tmp29 = this->world;
HXDLIN( 324)		_hx_tmp29->set_visible(!(this->world->get_visible()));
HXLINE( 326)		this->mouseHeld = false;
HXLINE( 327)		this->slide->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,doubleClick,(void))

void Viewport_obj::move(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_332_move)
HXLINE( 333)		x = (((Float)this->w / (Float)(int)2) - x);
HXLINE( 334)		y = (((Float)this->h / (Float)(int)2) - y);
HXLINE( 336)		Float preX = this->board->get_x();
HXLINE( 337)		Float preY = this->board->get_y();
HXLINE( 339)		if ((x < this->left)) {
HXLINE( 339)			this->board->set_x(this->left);
            		}
            		else {
HXLINE( 340)			if ((x > this->right)) {
HXLINE( 340)				this->board->set_x(this->right);
            			}
            			else {
HXLINE( 341)				this->board->set_x(x);
            			}
            		}
HXLINE( 343)		if ((y < this->top)) {
HXLINE( 343)			this->board->set_y(this->top);
            		}
            		else {
HXLINE( 344)			if ((y > this->bottom)) {
HXLINE( 344)				this->board->set_y(this->bottom);
            			}
            			else {
HXLINE( 345)				this->board->set_y(y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Viewport_obj,move,(void))

void Viewport_obj::mouseMove( ::openfl::events::MouseEvent m){
            	HX_STACKFRAME(&_hx_pos_28eb6841786acdb6_348_mouseMove)
HXLINE( 349)		Float posX = (m->stageX * (int)2);
HXDLIN( 349)		Float posX1 = (posX - this->get_x());
HXLINE( 350)		Float posY = (m->stageY * (int)2);
HXDLIN( 350)		Float posY1 = (posY - this->get_y());
HXLINE( 352)		if (this->mouseHeld) {
HXLINE( 353)			Float xp = (this->board->get_x() + posX1);
HXDLIN( 353)			Float xp1 = (xp - this->lastX);
HXLINE( 354)			Float yp = (this->board->get_y() + posY1);
HXDLIN( 354)			Float yp1 = (yp - this->lastY);
HXLINE( 356)			Float xrc = (this->bC->r->get_x() + posX1);
HXDLIN( 356)			Float xrc1 = (xrc - this->lastX);
HXLINE( 357)			Float yrc = (this->bC->r->get_y() + posY1);
HXDLIN( 357)			Float yrc1 = (yrc - this->lastY);
HXLINE( 358)			Float xoc = (this->bC->o->get_x() + posX1);
HXDLIN( 358)			Float xoc1 = (xoc - this->lastX);
HXLINE( 359)			Float yoc = (this->bC->o->get_y() + posY1);
HXDLIN( 359)			Float yoc1 = (yoc - this->lastY);
HXLINE( 360)			Float xyc = (this->bC->y->get_x() + posX1);
HXDLIN( 360)			Float xyc1 = (xyc - this->lastX);
HXLINE( 361)			Float yyc = (this->bC->y->get_y() + posY1);
HXDLIN( 361)			Float yyc1 = (yyc - this->lastY);
HXLINE( 362)			Float xgc = (this->bC->g->get_x() + posX1);
HXDLIN( 362)			Float xgc1 = (xgc - this->lastX);
HXLINE( 363)			Float ygc = (this->bC->g->get_y() + posY1);
HXDLIN( 363)			Float ygc1 = (ygc - this->lastY);
HXLINE( 364)			Float xbc = (this->bC->b->get_x() + posX1);
HXDLIN( 364)			Float xbc1 = (xbc - this->lastX);
HXLINE( 365)			Float ybc = (this->bC->b->get_y() + posY1);
HXDLIN( 365)			Float ybc1 = (ybc - this->lastY);
HXLINE( 366)			Float xic = (this->bC->i->get_x() + posX1);
HXDLIN( 366)			Float xic1 = (xic - this->lastX);
HXLINE( 367)			Float yic = (this->bC->i->get_y() + posY1);
HXDLIN( 367)			Float yic1 = (yic - this->lastY);
HXLINE( 368)			Float xvc = (this->bC->v->get_x() + posX1);
HXDLIN( 368)			Float xvc1 = (xvc - this->lastX);
HXLINE( 369)			Float yvc = (this->bC->v->get_y() + posY1);
HXDLIN( 369)			Float yvc1 = (yvc - this->lastY);
HXLINE( 371)			Float xrd = (this->bD->r->get_x() + posX1);
HXDLIN( 371)			Float xrd1 = (xrd - this->lastX);
HXLINE( 372)			Float yrd = (this->bD->r->get_y() + posY1);
HXDLIN( 372)			Float yrd1 = (yrd - this->lastY);
HXLINE( 373)			Float xod = (this->bD->o->get_x() + posX1);
HXDLIN( 373)			Float xod1 = (xod - this->lastX);
HXLINE( 374)			Float yod = (this->bD->o->get_y() + posY1);
HXDLIN( 374)			Float yod1 = (yod - this->lastY);
HXLINE( 375)			Float xyd = (this->bD->y->get_x() + posX1);
HXDLIN( 375)			Float xyd1 = (xyd - this->lastX);
HXLINE( 376)			Float yyd = (this->bD->y->get_y() + posY1);
HXDLIN( 376)			Float yyd1 = (yyd - this->lastY);
HXLINE( 377)			Float xgd = (this->bD->g->get_x() + posX1);
HXDLIN( 377)			Float xgd1 = (xgd - this->lastX);
HXLINE( 378)			Float ygd = (this->bD->g->get_y() + posY1);
HXDLIN( 378)			Float ygd1 = (ygd - this->lastY);
HXLINE( 379)			Float xbd = (this->bD->b->get_x() + posX1);
HXDLIN( 379)			Float xbd1 = (xbd - this->lastX);
HXLINE( 380)			Float ybd = (this->bD->b->get_y() + posY1);
HXDLIN( 380)			Float ybd1 = (ybd - this->lastY);
HXLINE( 381)			Float xid = (this->bD->i->get_x() + posX1);
HXDLIN( 381)			Float xid1 = (xid - this->lastX);
HXLINE( 382)			Float yid = (this->bD->i->get_y() + posY1);
HXDLIN( 382)			Float yid1 = (yid - this->lastY);
HXLINE( 383)			Float xvd = (this->bD->v->get_x() + posX1);
HXDLIN( 383)			Float xvd1 = (xvd - this->lastX);
HXLINE( 384)			Float yvd = (this->bD->v->get_y() + posY1);
HXDLIN( 384)			Float yvd1 = (yvd - this->lastY);
HXLINE( 386)			bool _hx_tmp;
HXDLIN( 386)			if ((xp1 >= this->left)) {
HXLINE( 386)				_hx_tmp = (xp1 <= this->right);
            			}
            			else {
HXLINE( 386)				_hx_tmp = false;
            			}
HXDLIN( 386)			if (_hx_tmp) {
HXLINE( 387)				this->board->set_x(xp1);
HXLINE( 389)				this->bC->r->set_x(xrc1);
HXLINE( 390)				this->bC->o->set_x(xoc1);
HXLINE( 391)				this->bC->y->set_x(xyc1);
HXLINE( 392)				this->bC->g->set_x(xgc1);
HXLINE( 393)				this->bC->b->set_x(xbc1);
HXLINE( 394)				this->bC->i->set_x(xic1);
HXLINE( 395)				this->bC->v->set_x(xvc1);
HXLINE( 397)				this->bD->r->set_x(xrd1);
HXLINE( 398)				this->bD->o->set_x(xod1);
HXLINE( 399)				this->bD->y->set_x(xyd1);
HXLINE( 400)				this->bD->g->set_x(xgd1);
HXLINE( 401)				this->bD->b->set_x(xbd1);
HXLINE( 402)				this->bD->i->set_x(xid1);
HXLINE( 403)				this->bD->v->set_x(xvd1);
            			}
HXLINE( 406)			bool _hx_tmp1;
HXDLIN( 406)			if ((yp1 >= this->top)) {
HXLINE( 406)				_hx_tmp1 = (yp1 <= this->bottom);
            			}
            			else {
HXLINE( 406)				_hx_tmp1 = false;
            			}
HXDLIN( 406)			if (_hx_tmp1) {
HXLINE( 407)				this->board->set_y(yp1);
HXLINE( 409)				this->bC->r->set_y(yrc1);
HXLINE( 410)				this->bC->o->set_y(yoc1);
HXLINE( 411)				this->bC->y->set_y(yyc1);
HXLINE( 412)				this->bC->g->set_y(ygc1);
HXLINE( 413)				this->bC->b->set_y(ybc1);
HXLINE( 414)				this->bC->i->set_y(yic1);
HXLINE( 415)				this->bC->v->set_y(yvc1);
HXLINE( 417)				this->bD->r->set_y(yrd1);
HXLINE( 418)				this->bD->o->set_y(yod1);
HXLINE( 419)				this->bD->y->set_y(yyd1);
HXLINE( 420)				this->bD->g->set_y(ygd1);
HXLINE( 421)				this->bD->b->set_y(ybd1);
HXLINE( 422)				this->bD->i->set_y(yid1);
HXLINE( 423)				this->bD->v->set_y(yvd1);
            			}
            		}
HXLINE( 428)		this->lastX = posX1;
HXLINE( 429)		this->lastY = posY1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Viewport_obj,mouseMove,(void))

 ::openfl::display::Sprite Viewport_obj::gpsMap(){
            	HX_GC_STACKFRAME(&_hx_pos_28eb6841786acdb6_432_gpsMap)
HXLINE( 433)		 ::openfl::display::BitmapData bmp = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/map.png",9c,e6,fc,25)),null());
HXLINE( 434)		this->realW = bmp->width;
HXLINE( 435)		this->realH = bmp->height;
HXLINE( 437)		this->left = -(::Math_obj::abs((this->w - this->realW)));
HXLINE( 438)		this->top = -(::Math_obj::abs((this->h - this->realH)));
HXLINE( 439)		this->bottom = (this->right = (int)0);
HXLINE( 441)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,bmp,null());
HXLINE( 442)		set->addRect(bmp->rect);
HXLINE( 444)		 ::openfl::display::Tilemap map =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,this->w,this->h,set,null());
HXLINE( 445)		map->addTile((this->board =  ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE( 446)		map->addTile(this->bD->r);
HXLINE( 447)		map->addTile(this->bD->o);
HXLINE( 448)		map->addTile(this->bD->y);
HXLINE( 449)		map->addTile(this->bD->g);
HXLINE( 450)		map->addTile(this->bD->b);
HXLINE( 451)		map->addTile(this->bD->i);
HXLINE( 452)		map->addTile(this->bD->v);
HXLINE( 454)		map->addTile(this->bC->r);
HXLINE( 455)		map->addTile(this->bC->o);
HXLINE( 456)		map->addTile(this->bC->y);
HXLINE( 457)		map->addTile(this->bC->g);
HXLINE( 458)		map->addTile(this->bC->b);
HXLINE( 459)		map->addTile(this->bC->i);
HXLINE( 460)		map->addTile(this->bC->v);
HXLINE( 462)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN( 462)		sprite->addChild(map);
HXDLIN( 462)		return sprite;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Viewport_obj,gpsMap,return )

 ::openfl::display::Sprite Viewport_obj::littleMap(){
            	HX_GC_STACKFRAME(&_hx_pos_28eb6841786acdb6_465_littleMap)
HXLINE( 466)		int w = (int)-1;
HXDLIN( 466)		int h = (int)-1;
HXDLIN( 466)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("etc/map.png",9c,e6,fc,25)),null());
HXDLIN( 466)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN( 466)		set->addRect(png->rect);
HXDLIN( 466)		 ::openfl::display::Tileset set1 = set;
HXDLIN( 466)		int map;
HXDLIN( 466)		if ((w < (int)0)) {
HXLINE( 466)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE( 466)			map = w;
            		}
HXDLIN( 466)		int map1;
HXDLIN( 466)		if ((h < (int)0)) {
HXLINE( 466)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE( 466)			map1 = h;
            		}
HXDLIN( 466)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN( 466)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN( 466)		 ::openfl::display::Tilemap map3 = map2;
HXLINE( 468)		map3->addTile(this->lD->r);
HXLINE( 469)		map3->addTile(this->lD->o);
HXLINE( 470)		map3->addTile(this->lD->y);
HXLINE( 471)		map3->addTile(this->lD->g);
HXLINE( 472)		map3->addTile(this->lD->b);
HXLINE( 473)		map3->addTile(this->lD->i);
HXLINE( 474)		map3->addTile(this->lD->v);
HXLINE( 476)		map3->addTile(this->lC->r);
HXLINE( 477)		map3->addTile(this->lC->o);
HXLINE( 478)		map3->addTile(this->lC->y);
HXLINE( 479)		map3->addTile(this->lC->g);
HXLINE( 480)		map3->addTile(this->lC->b);
HXLINE( 481)		map3->addTile(this->lC->i);
HXLINE( 482)		map3->addTile(this->lC->v);
HXLINE( 484)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN( 484)		sprite->addChild(map3);
HXDLIN( 484)		 ::openfl::display::Sprite spr = sprite;
HXLINE( 485)		spr->set_width(this->w);
HXLINE( 486)		spr->set_height(this->h);
HXLINE( 488)		return spr;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Viewport_obj,littleMap,return )


hx::ObjectPtr< Viewport_obj > Viewport_obj::__new( ::Globals g,int x,int y,int w,int h, ::openfl::display::Sprite gps, ::openfl::display::Sprite from) {
	hx::ObjectPtr< Viewport_obj > __this = new Viewport_obj();
	__this->__construct(g,x,y,w,h,gps,from);
	return __this;
}

hx::ObjectPtr< Viewport_obj > Viewport_obj::__alloc(hx::Ctx *_hx_ctx, ::Globals g,int x,int y,int w,int h, ::openfl::display::Sprite gps, ::openfl::display::Sprite from) {
	Viewport_obj *__this = (Viewport_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Viewport_obj), true, "Viewport"));
	*(void **)__this = Viewport_obj::_hx_vtable;
	__this->__construct(g,x,y,w,h,gps,from);
	return __this;
}

Viewport_obj::Viewport_obj()
{
}

void Viewport_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Viewport);
	HX_MARK_MEMBER_NAME(bC,"bC");
	HX_MARK_MEMBER_NAME(lC,"lC");
	HX_MARK_MEMBER_NAME(bD,"bD");
	HX_MARK_MEMBER_NAME(lD,"lD");
	HX_MARK_MEMBER_NAME(board,"board");
	HX_MARK_MEMBER_NAME(zoom,"zoom");
	HX_MARK_MEMBER_NAME(realW,"realW");
	HX_MARK_MEMBER_NAME(realH,"realH");
	HX_MARK_MEMBER_NAME(anim,"anim");
	HX_MARK_MEMBER_NAME(nodePoints,"nodePoints");
	HX_MARK_MEMBER_NAME(nodeNames,"nodeNames");
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(top,"top");
	HX_MARK_MEMBER_NAME(right,"right");
	HX_MARK_MEMBER_NAME(bottom,"bottom");
	HX_MARK_MEMBER_NAME(world,"world");
	HX_MARK_MEMBER_NAME(slide,"slide");
	HX_MARK_MEMBER_NAME(mouseHeld,"mouseHeld");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	HX_MARK_MEMBER_NAME(infoCard,"infoCard");
	HX_MARK_MEMBER_NAME(w,"w");
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(aRC,"aRC");
	HX_MARK_MEMBER_NAME(aOC,"aOC");
	HX_MARK_MEMBER_NAME(aYC,"aYC");
	HX_MARK_MEMBER_NAME(aGC,"aGC");
	HX_MARK_MEMBER_NAME(aBC,"aBC");
	HX_MARK_MEMBER_NAME(aIC,"aIC");
	HX_MARK_MEMBER_NAME(aVC,"aVC");
	HX_MARK_MEMBER_NAME(aRD,"aRD");
	HX_MARK_MEMBER_NAME(aOD,"aOD");
	HX_MARK_MEMBER_NAME(aYD,"aYD");
	HX_MARK_MEMBER_NAME(aGD,"aGD");
	HX_MARK_MEMBER_NAME(aBD,"aBD");
	HX_MARK_MEMBER_NAME(aID,"aID");
	HX_MARK_MEMBER_NAME(aVD,"aVD");
	HX_MARK_MEMBER_NAME(animating,"animating");
	HX_MARK_MEMBER_NAME(future,"future");
	HX_MARK_MEMBER_NAME(delay,"delay");
	HX_MARK_MEMBER_NAME(carMoved,"carMoved");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Viewport_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bC,"bC");
	HX_VISIT_MEMBER_NAME(lC,"lC");
	HX_VISIT_MEMBER_NAME(bD,"bD");
	HX_VISIT_MEMBER_NAME(lD,"lD");
	HX_VISIT_MEMBER_NAME(board,"board");
	HX_VISIT_MEMBER_NAME(zoom,"zoom");
	HX_VISIT_MEMBER_NAME(realW,"realW");
	HX_VISIT_MEMBER_NAME(realH,"realH");
	HX_VISIT_MEMBER_NAME(anim,"anim");
	HX_VISIT_MEMBER_NAME(nodePoints,"nodePoints");
	HX_VISIT_MEMBER_NAME(nodeNames,"nodeNames");
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(top,"top");
	HX_VISIT_MEMBER_NAME(right,"right");
	HX_VISIT_MEMBER_NAME(bottom,"bottom");
	HX_VISIT_MEMBER_NAME(world,"world");
	HX_VISIT_MEMBER_NAME(slide,"slide");
	HX_VISIT_MEMBER_NAME(mouseHeld,"mouseHeld");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
	HX_VISIT_MEMBER_NAME(infoCard,"infoCard");
	HX_VISIT_MEMBER_NAME(w,"w");
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(aRC,"aRC");
	HX_VISIT_MEMBER_NAME(aOC,"aOC");
	HX_VISIT_MEMBER_NAME(aYC,"aYC");
	HX_VISIT_MEMBER_NAME(aGC,"aGC");
	HX_VISIT_MEMBER_NAME(aBC,"aBC");
	HX_VISIT_MEMBER_NAME(aIC,"aIC");
	HX_VISIT_MEMBER_NAME(aVC,"aVC");
	HX_VISIT_MEMBER_NAME(aRD,"aRD");
	HX_VISIT_MEMBER_NAME(aOD,"aOD");
	HX_VISIT_MEMBER_NAME(aYD,"aYD");
	HX_VISIT_MEMBER_NAME(aGD,"aGD");
	HX_VISIT_MEMBER_NAME(aBD,"aBD");
	HX_VISIT_MEMBER_NAME(aID,"aID");
	HX_VISIT_MEMBER_NAME(aVD,"aVD");
	HX_VISIT_MEMBER_NAME(animating,"animating");
	HX_VISIT_MEMBER_NAME(future,"future");
	HX_VISIT_MEMBER_NAME(delay,"delay");
	HX_VISIT_MEMBER_NAME(carMoved,"carMoved");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Viewport_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { return hx::Val( w); }
		if (HX_FIELD_EQ(inName,"h") ) { return hx::Val( h); }
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bC") ) { return hx::Val( bC); }
		if (HX_FIELD_EQ(inName,"lC") ) { return hx::Val( lC); }
		if (HX_FIELD_EQ(inName,"bD") ) { return hx::Val( bD); }
		if (HX_FIELD_EQ(inName,"lD") ) { return hx::Val( lD); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return hx::Val( top); }
		if (HX_FIELD_EQ(inName,"aRC") ) { return hx::Val( aRC); }
		if (HX_FIELD_EQ(inName,"aOC") ) { return hx::Val( aOC); }
		if (HX_FIELD_EQ(inName,"aYC") ) { return hx::Val( aYC); }
		if (HX_FIELD_EQ(inName,"aGC") ) { return hx::Val( aGC); }
		if (HX_FIELD_EQ(inName,"aBC") ) { return hx::Val( aBC); }
		if (HX_FIELD_EQ(inName,"aIC") ) { return hx::Val( aIC); }
		if (HX_FIELD_EQ(inName,"aVC") ) { return hx::Val( aVC); }
		if (HX_FIELD_EQ(inName,"aRD") ) { return hx::Val( aRD); }
		if (HX_FIELD_EQ(inName,"aOD") ) { return hx::Val( aOD); }
		if (HX_FIELD_EQ(inName,"aYD") ) { return hx::Val( aYD); }
		if (HX_FIELD_EQ(inName,"aGD") ) { return hx::Val( aGD); }
		if (HX_FIELD_EQ(inName,"aBD") ) { return hx::Val( aBD); }
		if (HX_FIELD_EQ(inName,"aID") ) { return hx::Val( aID); }
		if (HX_FIELD_EQ(inName,"aVD") ) { return hx::Val( aVD); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { return hx::Val( zoom); }
		if (HX_FIELD_EQ(inName,"anim") ) { return hx::Val( anim); }
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left); }
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"board") ) { return hx::Val( board); }
		if (HX_FIELD_EQ(inName,"realW") ) { return hx::Val( realW); }
		if (HX_FIELD_EQ(inName,"realH") ) { return hx::Val( realH); }
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right); }
		if (HX_FIELD_EQ(inName,"world") ) { return hx::Val( world); }
		if (HX_FIELD_EQ(inName,"slide") ) { return hx::Val( slide); }
		if (HX_FIELD_EQ(inName,"lastX") ) { return hx::Val( lastX); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return hx::Val( lastY); }
		if (HX_FIELD_EQ(inName,"point") ) { return hx::Val( point_dyn()); }
		if (HX_FIELD_EQ(inName,"aimRC") ) { return hx::Val( aimRC_dyn()); }
		if (HX_FIELD_EQ(inName,"aimOC") ) { return hx::Val( aimOC_dyn()); }
		if (HX_FIELD_EQ(inName,"aimYC") ) { return hx::Val( aimYC_dyn()); }
		if (HX_FIELD_EQ(inName,"aimGC") ) { return hx::Val( aimGC_dyn()); }
		if (HX_FIELD_EQ(inName,"aimBC") ) { return hx::Val( aimBC_dyn()); }
		if (HX_FIELD_EQ(inName,"aimIC") ) { return hx::Val( aimIC_dyn()); }
		if (HX_FIELD_EQ(inName,"aimVC") ) { return hx::Val( aimVC_dyn()); }
		if (HX_FIELD_EQ(inName,"aimRD") ) { return hx::Val( aimRD_dyn()); }
		if (HX_FIELD_EQ(inName,"aimOD") ) { return hx::Val( aimOD_dyn()); }
		if (HX_FIELD_EQ(inName,"aimYD") ) { return hx::Val( aimYD_dyn()); }
		if (HX_FIELD_EQ(inName,"aimGD") ) { return hx::Val( aimGD_dyn()); }
		if (HX_FIELD_EQ(inName,"aimBD") ) { return hx::Val( aimBD_dyn()); }
		if (HX_FIELD_EQ(inName,"aimID") ) { return hx::Val( aimID_dyn()); }
		if (HX_FIELD_EQ(inName,"aimVD") ) { return hx::Val( aimVD_dyn()); }
		if (HX_FIELD_EQ(inName,"delay") ) { return hx::Val( delay); }
		if (HX_FIELD_EQ(inName,"click") ) { return hx::Val( click_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { return hx::Val( bottom); }
		if (HX_FIELD_EQ(inName,"future") ) { return hx::Val( future); }
		if (HX_FIELD_EQ(inName,"gpsMap") ) { return hx::Val( gpsMap_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoCard") ) { return hx::Val( infoCard); }
		if (HX_FIELD_EQ(inName,"carMoved") ) { return hx::Val( carMoved); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nodeNames") ) { return hx::Val( nodeNames); }
		if (HX_FIELD_EQ(inName,"mouseHeld") ) { return hx::Val( mouseHeld); }
		if (HX_FIELD_EQ(inName,"animating") ) { return hx::Val( animating); }
		if (HX_FIELD_EQ(inName,"mouseMove") ) { return hx::Val( mouseMove_dyn()); }
		if (HX_FIELD_EQ(inName,"littleMap") ) { return hx::Val( littleMap_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nodePoints") ) { return hx::Val( nodePoints); }
		if (HX_FIELD_EQ(inName,"transition") ) { return hx::Val( transition_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"doubleClick") ) { return hx::Val( doubleClick_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"relocateCars") ) { return hx::Val( relocateCars_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"relocateDests") ) { return hx::Val( relocateDests_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Viewport_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"w") ) { w=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"bC") ) { bC=inValue.Cast<  ::Cars >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lC") ) { lC=inValue.Cast<  ::Cars >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bD") ) { bD=inValue.Cast<  ::Dests >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lD") ) { lD=inValue.Cast<  ::Dests >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aRC") ) { aRC=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aOC") ) { aOC=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aYC") ) { aYC=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aGC") ) { aGC=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aBC") ) { aBC=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aIC") ) { aIC=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aVC") ) { aVC=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aRD") ) { aRD=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aOD") ) { aOD=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aYD") ) { aYD=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aGD") ) { aGD=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aBD") ) { aBD=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aID") ) { aID=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aVD") ) { aVD=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { zoom=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"anim") ) { anim=inValue.Cast<  ::Animation >(); return inValue; }
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"board") ) { board=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realW") ) { realW=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realH") ) { realH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"world") ) { world=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"slide") ) { slide=inValue.Cast<  ::openfl::media::Sound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"delay") ) { delay=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { bottom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"future") ) { future=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"infoCard") ) { infoCard=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"carMoved") ) { carMoved=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nodeNames") ) { nodeNames=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseHeld") ) { mouseHeld=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"animating") ) { animating=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nodePoints") ) { nodePoints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Viewport_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bC","\xa1","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("lC","\x57","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("bD","\xa2","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("lD","\x58","\x5e","\x00","\x00"));
	outFields->push(HX_HCSTRING("board","\xa6","\x86","\xed","\xb6"));
	outFields->push(HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"));
	outFields->push(HX_HCSTRING("realW","\x39","\xa7","\xba","\xe6"));
	outFields->push(HX_HCSTRING("realH","\x2a","\xa7","\xba","\xe6"));
	outFields->push(HX_HCSTRING("anim","\x11","\x86","\x71","\x40"));
	outFields->push(HX_HCSTRING("nodePoints","\xc5","\xfd","\x1a","\x02"));
	outFields->push(HX_HCSTRING("nodeNames","\x66","\x6e","\xba","\x3a"));
	outFields->push(HX_HCSTRING("left","\x07","\x08","\xb0","\x47"));
	outFields->push(HX_HCSTRING("top","\x95","\x66","\x58","\x00"));
	outFields->push(HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"));
	outFields->push(HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"));
	outFields->push(HX_HCSTRING("world","\x52","\x96","\x64","\xce"));
	outFields->push(HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e"));
	outFields->push(HX_HCSTRING("mouseHeld","\x7a","\xeb","\x5f","\xf1"));
	outFields->push(HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f"));
	outFields->push(HX_HCSTRING("infoCard","\x5e","\x51","\x5e","\x32"));
	outFields->push(HX_HCSTRING("w","\x77","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("h","\x68","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("aRC","\x52","\xe2","\x49","\x00"));
	outFields->push(HX_HCSTRING("aOC","\xb5","\xdf","\x49","\x00"));
	outFields->push(HX_HCSTRING("aYC","\x6b","\xe8","\x49","\x00"));
	outFields->push(HX_HCSTRING("aGC","\xbd","\xd8","\x49","\x00"));
	outFields->push(HX_HCSTRING("aBC","\x62","\xd4","\x49","\x00"));
	outFields->push(HX_HCSTRING("aIC","\x7b","\xda","\x49","\x00"));
	outFields->push(HX_HCSTRING("aVC","\xce","\xe5","\x49","\x00"));
	outFields->push(HX_HCSTRING("aRD","\x53","\xe2","\x49","\x00"));
	outFields->push(HX_HCSTRING("aOD","\xb6","\xdf","\x49","\x00"));
	outFields->push(HX_HCSTRING("aYD","\x6c","\xe8","\x49","\x00"));
	outFields->push(HX_HCSTRING("aGD","\xbe","\xd8","\x49","\x00"));
	outFields->push(HX_HCSTRING("aBD","\x63","\xd4","\x49","\x00"));
	outFields->push(HX_HCSTRING("aID","\x7c","\xda","\x49","\x00"));
	outFields->push(HX_HCSTRING("aVD","\xcf","\xe5","\x49","\x00"));
	outFields->push(HX_HCSTRING("animating","\x1e","\xee","\x34","\x4b"));
	outFields->push(HX_HCSTRING("future","\x43","\x98","\x4e","\x73"));
	outFields->push(HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"));
	outFields->push(HX_HCSTRING("carMoved","\x7f","\x7f","\x66","\x14"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Viewport_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::Cars*/ ,(int)offsetof(Viewport_obj,bC),HX_HCSTRING("bC","\xa1","\x55","\x00","\x00")},
	{hx::fsObject /*::Cars*/ ,(int)offsetof(Viewport_obj,lC),HX_HCSTRING("lC","\x57","\x5e","\x00","\x00")},
	{hx::fsObject /*::Dests*/ ,(int)offsetof(Viewport_obj,bD),HX_HCSTRING("bD","\xa2","\x55","\x00","\x00")},
	{hx::fsObject /*::Dests*/ ,(int)offsetof(Viewport_obj,lD),HX_HCSTRING("lD","\x58","\x5e","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Viewport_obj,board),HX_HCSTRING("board","\xa6","\x86","\xed","\xb6")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Viewport_obj,zoom),HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50")},
	{hx::fsInt,(int)offsetof(Viewport_obj,realW),HX_HCSTRING("realW","\x39","\xa7","\xba","\xe6")},
	{hx::fsInt,(int)offsetof(Viewport_obj,realH),HX_HCSTRING("realH","\x2a","\xa7","\xba","\xe6")},
	{hx::fsObject /*::Animation*/ ,(int)offsetof(Viewport_obj,anim),HX_HCSTRING("anim","\x11","\x86","\x71","\x40")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Viewport_obj,nodePoints),HX_HCSTRING("nodePoints","\xc5","\xfd","\x1a","\x02")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Viewport_obj,nodeNames),HX_HCSTRING("nodeNames","\x66","\x6e","\xba","\x3a")},
	{hx::fsFloat,(int)offsetof(Viewport_obj,left),HX_HCSTRING("left","\x07","\x08","\xb0","\x47")},
	{hx::fsFloat,(int)offsetof(Viewport_obj,top),HX_HCSTRING("top","\x95","\x66","\x58","\x00")},
	{hx::fsFloat,(int)offsetof(Viewport_obj,right),HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9")},
	{hx::fsFloat,(int)offsetof(Viewport_obj,bottom),HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Viewport_obj,world),HX_HCSTRING("world","\x52","\x96","\x64","\xce")},
	{hx::fsObject /*::openfl::media::Sound*/ ,(int)offsetof(Viewport_obj,slide),HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e")},
	{hx::fsBool,(int)offsetof(Viewport_obj,mouseHeld),HX_HCSTRING("mouseHeld","\x7a","\xeb","\x5f","\xf1")},
	{hx::fsFloat,(int)offsetof(Viewport_obj,lastX),HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f")},
	{hx::fsFloat,(int)offsetof(Viewport_obj,lastY),HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Viewport_obj,infoCard),HX_HCSTRING("infoCard","\x5e","\x51","\x5e","\x32")},
	{hx::fsInt,(int)offsetof(Viewport_obj,w),HX_HCSTRING("w","\x77","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Viewport_obj,h),HX_HCSTRING("h","\x68","\x00","\x00","\x00")},
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Viewport_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aRC),HX_HCSTRING("aRC","\x52","\xe2","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aOC),HX_HCSTRING("aOC","\xb5","\xdf","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aYC),HX_HCSTRING("aYC","\x6b","\xe8","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aGC),HX_HCSTRING("aGC","\xbd","\xd8","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aBC),HX_HCSTRING("aBC","\x62","\xd4","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aIC),HX_HCSTRING("aIC","\x7b","\xda","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aVC),HX_HCSTRING("aVC","\xce","\xe5","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aRD),HX_HCSTRING("aRD","\x53","\xe2","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aOD),HX_HCSTRING("aOD","\xb6","\xdf","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aYD),HX_HCSTRING("aYD","\x6c","\xe8","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aGD),HX_HCSTRING("aGD","\xbe","\xd8","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aBD),HX_HCSTRING("aBD","\x63","\xd4","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aID),HX_HCSTRING("aID","\x7c","\xda","\x49","\x00")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Viewport_obj,aVD),HX_HCSTRING("aVD","\xcf","\xe5","\x49","\x00")},
	{hx::fsBool,(int)offsetof(Viewport_obj,animating),HX_HCSTRING("animating","\x1e","\xee","\x34","\x4b")},
	{hx::fsFloat,(int)offsetof(Viewport_obj,future),HX_HCSTRING("future","\x43","\x98","\x4e","\x73")},
	{hx::fsFloat,(int)offsetof(Viewport_obj,delay),HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7")},
	{hx::fsBool,(int)offsetof(Viewport_obj,carMoved),HX_HCSTRING("carMoved","\x7f","\x7f","\x66","\x14")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Viewport_obj_sStaticStorageInfo = 0;
#endif

static ::String Viewport_obj_sMemberFields[] = {
	HX_HCSTRING("bC","\xa1","\x55","\x00","\x00"),
	HX_HCSTRING("lC","\x57","\x5e","\x00","\x00"),
	HX_HCSTRING("bD","\xa2","\x55","\x00","\x00"),
	HX_HCSTRING("lD","\x58","\x5e","\x00","\x00"),
	HX_HCSTRING("board","\xa6","\x86","\xed","\xb6"),
	HX_HCSTRING("zoom","\x13","\xa3","\xf8","\x50"),
	HX_HCSTRING("realW","\x39","\xa7","\xba","\xe6"),
	HX_HCSTRING("realH","\x2a","\xa7","\xba","\xe6"),
	HX_HCSTRING("anim","\x11","\x86","\x71","\x40"),
	HX_HCSTRING("nodePoints","\xc5","\xfd","\x1a","\x02"),
	HX_HCSTRING("nodeNames","\x66","\x6e","\xba","\x3a"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("top","\x95","\x66","\x58","\x00"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("bottom","\xeb","\xe6","\x78","\x65"),
	HX_HCSTRING("world","\x52","\x96","\x64","\xce"),
	HX_HCSTRING("slide","\x31","\xc5","\xc7","\x7e"),
	HX_HCSTRING("mouseHeld","\x7a","\xeb","\x5f","\xf1"),
	HX_HCSTRING("lastX","\x42","\x01","\xbc","\x6f"),
	HX_HCSTRING("lastY","\x43","\x01","\xbc","\x6f"),
	HX_HCSTRING("infoCard","\x5e","\x51","\x5e","\x32"),
	HX_HCSTRING("w","\x77","\x00","\x00","\x00"),
	HX_HCSTRING("h","\x68","\x00","\x00","\x00"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("point","\x50","\xb4","\x8f","\xc6"),
	HX_HCSTRING("aimRC","\x76","\xa9","\x98","\x1f"),
	HX_HCSTRING("aimOC","\xd9","\xa6","\x98","\x1f"),
	HX_HCSTRING("aimYC","\x8f","\xaf","\x98","\x1f"),
	HX_HCSTRING("aimGC","\xe1","\x9f","\x98","\x1f"),
	HX_HCSTRING("aimBC","\x86","\x9b","\x98","\x1f"),
	HX_HCSTRING("aimIC","\x9f","\xa1","\x98","\x1f"),
	HX_HCSTRING("aimVC","\xf2","\xac","\x98","\x1f"),
	HX_HCSTRING("aimRD","\x77","\xa9","\x98","\x1f"),
	HX_HCSTRING("aimOD","\xda","\xa6","\x98","\x1f"),
	HX_HCSTRING("aimYD","\x90","\xaf","\x98","\x1f"),
	HX_HCSTRING("aimGD","\xe2","\x9f","\x98","\x1f"),
	HX_HCSTRING("aimBD","\x87","\x9b","\x98","\x1f"),
	HX_HCSTRING("aimID","\xa0","\xa1","\x98","\x1f"),
	HX_HCSTRING("aimVD","\xf3","\xac","\x98","\x1f"),
	HX_HCSTRING("aRC","\x52","\xe2","\x49","\x00"),
	HX_HCSTRING("aOC","\xb5","\xdf","\x49","\x00"),
	HX_HCSTRING("aYC","\x6b","\xe8","\x49","\x00"),
	HX_HCSTRING("aGC","\xbd","\xd8","\x49","\x00"),
	HX_HCSTRING("aBC","\x62","\xd4","\x49","\x00"),
	HX_HCSTRING("aIC","\x7b","\xda","\x49","\x00"),
	HX_HCSTRING("aVC","\xce","\xe5","\x49","\x00"),
	HX_HCSTRING("aRD","\x53","\xe2","\x49","\x00"),
	HX_HCSTRING("aOD","\xb6","\xdf","\x49","\x00"),
	HX_HCSTRING("aYD","\x6c","\xe8","\x49","\x00"),
	HX_HCSTRING("aGD","\xbe","\xd8","\x49","\x00"),
	HX_HCSTRING("aBD","\x63","\xd4","\x49","\x00"),
	HX_HCSTRING("aID","\x7c","\xda","\x49","\x00"),
	HX_HCSTRING("aVD","\xcf","\xe5","\x49","\x00"),
	HX_HCSTRING("animating","\x1e","\xee","\x34","\x4b"),
	HX_HCSTRING("future","\x43","\x98","\x4e","\x73"),
	HX_HCSTRING("delay","\x83","\xd7","\x26","\xd7"),
	HX_HCSTRING("transition","\x95","\x8d","\xaf","\x58"),
	HX_HCSTRING("carMoved","\x7f","\x7f","\x66","\x14"),
	HX_HCSTRING("relocateCars","\x04","\x18","\xac","\x4a"),
	HX_HCSTRING("relocateDests","\x0c","\x1e","\xf5","\xa1"),
	HX_HCSTRING("click","\x48","\x7c","\x5e","\x48"),
	HX_HCSTRING("doubleClick","\x77","\x03","\x76","\xcd"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("mouseMove","\xd6","\x9b","\xb5","\xf4"),
	HX_HCSTRING("gpsMap","\x92","\x6e","\xe1","\xf7"),
	HX_HCSTRING("littleMap","\x46","\xbb","\xec","\x1e"),
	::String(null()) };

static void Viewport_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Viewport_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Viewport_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Viewport_obj::__mClass,"__mClass");
};

#endif

hx::Class Viewport_obj::__mClass;

void Viewport_obj::__register()
{
	hx::Object *dummy = new Viewport_obj;
	Viewport_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Viewport","\x86","\x08","\x57","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Viewport_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Viewport_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Viewport_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Viewport_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Viewport_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Viewport_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

