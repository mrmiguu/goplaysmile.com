// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
#ifndef INCLUDED_Animation
#include <Animation.h>
#endif
#ifndef INCLUDED_Card
#include <Card.h>
#endif
#ifndef INCLUDED_Globals
#include <Globals.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Viewport
#include <Viewport.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ddaf163b228de288_10_new,"Card","new",0x0152a2e2,"Card.new","Card.hx",10,0x90a6cece)
HX_LOCAL_STACK_FRAME(_hx_pos_ddaf163b228de288_45_i,"Card","i",0xef6dce6b,"Card.i","Card.hx",45,0x90a6cece)
HX_LOCAL_STACK_FRAME(_hx_pos_ddaf163b228de288_49_sel,"Card","sel",0x01566e1c,"Card.sel","Card.hx",49,0x90a6cece)
HX_LOCAL_STACK_FRAME(_hx_pos_ddaf163b228de288_61_begin,"Card","begin",0x0c8fe12b,"Card.begin","Card.hx",61,0x90a6cece)
HX_LOCAL_STACK_FRAME(_hx_pos_ddaf163b228de288_62_during,"Card","during",0xfbba7e7f,"Card.during","Card.hx",62,0x90a6cece)
HX_LOCAL_STACK_FRAME(_hx_pos_ddaf163b228de288_63_end,"Card","end",0x014bd65d,"Card.end","Card.hx",63,0x90a6cece)
HX_LOCAL_STACK_FRAME(_hx_pos_ddaf163b228de288_65_progress,"Card","progress",0x1897cdeb,"Card.progress","Card.hx",65,0x90a6cece)

void Card_obj::__construct( ::Globals g,::String name, ::openfl::display::Sprite roller){
            	HX_GC_STACKFRAME(&_hx_pos_ddaf163b228de288_10_new)
HXLINE(  19)		this->instr = ::Array_obj< int >::__new(0);
HXLINE(  18)		this->current = (int)6;
HXLINE(  17)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  17)		{
HXLINE(  17)			int _g1 = (int)0;
HXDLIN(  17)			while((_g1 < (int)3)){
HXLINE(  17)				_g1 = (_g1 + (int)1);
HXDLIN(  17)				int n = (_g1 - (int)1);
HXDLIN(  17)				_g->push(::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + ((HX_("cars/vroom",21,a6,9d,78) + n) + HX_(".ogg",e1,64,bc,1e)))));
            			}
            		}
HXDLIN(  17)		this->vrooms = _g;
HXLINE(  16)		this->arrival = ::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + HX_("dests/arrival.ogg",dc,ab,95,64)));
HXLINE(  15)		this->pick = ::openfl::media::Sound_obj::fromFile((HX_("assets/",4c,2a,dc,36) + HX_("roller/pick.ogg",07,47,b8,82)));
HXLINE(  14)		this->target = (int)0;
HXLINE(  13)		this->h = (int)288;
HXLINE(  29)		super::__construct((int)6,((Float)0.125));
HXLINE(  31)		this->roller = roller;
HXLINE(  32)		this->g = g;
HXLINE(  34)		int w = ::Std_obj::_hx_int(roller->get_width());
HXDLIN(  34)		int h = ::Std_obj::_hx_int(roller->get_height());
HXDLIN(  34)		 ::openfl::display::BitmapData png = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + ((HX_("roller/",c5,a7,22,5d) + name) + HX_(".png",3b,2d,bd,1e))),null());
HXDLIN(  34)		 ::openfl::display::Tileset set =  ::openfl::display::Tileset_obj::__alloc( HX_CTX ,png,null());
HXDLIN(  34)		set->addRect(png->rect);
HXDLIN(  34)		 ::openfl::display::Tileset set1 = set;
HXDLIN(  34)		int map;
HXDLIN(  34)		if ((w < (int)0)) {
HXLINE(  34)			map = ::Std_obj::_hx_int(set1->getRect((int)0)->width);
            		}
            		else {
HXLINE(  34)			map = w;
            		}
HXDLIN(  34)		int map1;
HXDLIN(  34)		if ((h < (int)0)) {
HXLINE(  34)			map1 = ::Std_obj::_hx_int(set1->getRect((int)0)->height);
            		}
            		else {
HXLINE(  34)			map1 = h;
            		}
HXDLIN(  34)		 ::openfl::display::Tilemap map2 =  ::openfl::display::Tilemap_obj::__alloc( HX_CTX ,map,map1,set1,null());
HXDLIN(  34)		map2->addTile( ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null()));
HXDLIN(  34)		 ::openfl::display::Tilemap map3 = map2;
HXLINE(  36)		this->focus = map3->getTileAt((int)0);
HXLINE(  37)		map3->addTile((this->_hx_double =  ::openfl::display::Tile_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null())));
HXLINE(  39)		 ::openfl::display::Sprite sprite =  ::openfl::display::Sprite_obj::__alloc( HX_CTX );
HXDLIN(  39)		sprite->addChild(map3);
HXDLIN(  39)		this->sprite = sprite;
HXLINE(  40)		 ::openfl::display::Sprite _hx_tmp = this->sprite;
HXDLIN(  40)		_hx_tmp->set_y(roller->get_y());
            	}

Dynamic Card_obj::__CreateEmpty() { return new Card_obj; }

void *Card_obj::_hx_vtable = 0;

Dynamic Card_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Card_obj > _hx_result = new Card_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Card_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0a1ea200) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0a1ea200;
	} else {
		return inClassId==(int)0x2c9349f0;
	}
}

void Card_obj::i(int y){
            	HX_STACKFRAME(&_hx_pos_ddaf163b228de288_45_i)
HXLINE(  45)		if ((this->instr->length < this->frames)) {
HXLINE(  45)			this->instr->push(y);
            		}
            		else {
HXLINE(  46)			this->sel();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Card_obj,i,(void))

void Card_obj::sel(){
            	HX_STACKFRAME(&_hx_pos_ddaf163b228de288_49_sel)
HXLINE(  51)		if ((this->instr->length < this->frames)) {
HXLINE(  51)			return;
            		}
HXLINE(  53)		 ::openfl::display::Tile _hx_tmp = this->focus;
HXDLIN(  53)		Float _hx_tmp1 = ((Float)this->roller->get_height() / (Float)(int)2);
HXDLIN(  53)		_hx_tmp->set_y((_hx_tmp1 - this->instr->__get(this->current)));
HXLINE(  54)		this->_hx_double->visible = true;
HXLINE(  56)		if ((this->focus->get_y() > (int)0)) {
HXLINE(  56)			 ::openfl::display::Tile _hx_tmp2 = this->_hx_double;
HXDLIN(  56)			Float _hx_tmp3 = this->focus->get_y();
HXDLIN(  56)			_hx_tmp2->set_y((_hx_tmp3 - this->h));
            		}
            		else {
HXLINE(  57)			Float _hx_tmp4 = this->focus->get_y();
HXDLIN(  57)			Float _hx_tmp5 = this->roller->get_height();
HXDLIN(  57)			if ((_hx_tmp4 < (_hx_tmp5 - this->h))) {
HXLINE(  57)				 ::openfl::display::Tile _hx_tmp6 = this->_hx_double;
HXDLIN(  57)				Float _hx_tmp7 = this->focus->get_y();
HXDLIN(  57)				_hx_tmp6->set_y((_hx_tmp7 + this->h));
            			}
            			else {
HXLINE(  58)				this->_hx_double->visible = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Card_obj,sel,(void))

void Card_obj::begin(){
            	HX_STACKFRAME(&_hx_pos_ddaf163b228de288_61_begin)
HXLINE(  61)		this->progress();
            	}


void Card_obj::during(){
            	HX_STACKFRAME(&_hx_pos_ddaf163b228de288_62_during)
HXLINE(  62)		this->progress();
            	}


void Card_obj::end(){
            	HX_STACKFRAME(&_hx_pos_ddaf163b228de288_63_end)
HXLINE(  63)		this->progress();
            	}


void Card_obj::progress(){
            	HX_STACKFRAME(&_hx_pos_ddaf163b228de288_65_progress)
HXLINE(  67)		if ((this->instr->length < this->frames)) {
HXLINE(  67)			return;
            		}
HXLINE(  68)		if ((this->current == this->target)) {
HXLINE(  69)			this->animating = false;
HXLINE(  71)			if (!(this->g->me()->onGoal())) {
HXLINE(  72)				if (this->g->v->carMoved) {
HXLINE(  72)					::Array< ::Dynamic> _hx_tmp = this->vrooms;
HXDLIN(  72)					_hx_tmp->__get(::Std_obj::random(this->vrooms->length)).StaticCast<  ::openfl::media::Sound >()->play(null(),null(),null());
            				}
            			}
HXLINE(  76)			return;
            		}
            		else {
HXLINE(  77)			this->current = hx::Mod((this->current + (int)1),this->instr->length);
            		}
HXLINE(  79)		this->sel();
HXLINE(  80)		this->pick->play(null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Card_obj,progress,(void))


hx::ObjectPtr< Card_obj > Card_obj::__new( ::Globals g,::String name, ::openfl::display::Sprite roller) {
	hx::ObjectPtr< Card_obj > __this = new Card_obj();
	__this->__construct(g,name,roller);
	return __this;
}

hx::ObjectPtr< Card_obj > Card_obj::__alloc(hx::Ctx *_hx_ctx, ::Globals g,::String name, ::openfl::display::Sprite roller) {
	Card_obj *__this = (Card_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Card_obj), true, "Card"));
	*(void **)__this = Card_obj::_hx_vtable;
	__this->__construct(g,name,roller);
	return __this;
}

Card_obj::Card_obj()
{
}

void Card_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Card);
	HX_MARK_MEMBER_NAME(sprite,"sprite");
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(target,"target");
	HX_MARK_MEMBER_NAME(pick,"pick");
	HX_MARK_MEMBER_NAME(arrival,"arrival");
	HX_MARK_MEMBER_NAME(vrooms,"vrooms");
	HX_MARK_MEMBER_NAME(current,"current");
	HX_MARK_MEMBER_NAME(instr,"instr");
	HX_MARK_MEMBER_NAME(roller,"roller");
	HX_MARK_MEMBER_NAME(focus,"focus");
	HX_MARK_MEMBER_NAME(_hx_double,"double");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_END_CLASS();
}

void Card_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sprite,"sprite");
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(target,"target");
	HX_VISIT_MEMBER_NAME(pick,"pick");
	HX_VISIT_MEMBER_NAME(arrival,"arrival");
	HX_VISIT_MEMBER_NAME(vrooms,"vrooms");
	HX_VISIT_MEMBER_NAME(current,"current");
	HX_VISIT_MEMBER_NAME(instr,"instr");
	HX_VISIT_MEMBER_NAME(roller,"roller");
	HX_VISIT_MEMBER_NAME(focus,"focus");
	HX_VISIT_MEMBER_NAME(_hx_double,"double");
	HX_VISIT_MEMBER_NAME(g,"g");
}

hx::Val Card_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { return hx::Val( h); }
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"sel") ) { return hx::Val( sel_dyn()); }
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pick") ) { return hx::Val( pick); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"instr") ) { return hx::Val( instr); }
		if (HX_FIELD_EQ(inName,"focus") ) { return hx::Val( focus); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sprite") ) { return hx::Val( sprite); }
		if (HX_FIELD_EQ(inName,"target") ) { return hx::Val( target); }
		if (HX_FIELD_EQ(inName,"vrooms") ) { return hx::Val( vrooms); }
		if (HX_FIELD_EQ(inName,"roller") ) { return hx::Val( roller); }
		if (HX_FIELD_EQ(inName,"double") ) { return hx::Val( _hx_double); }
		if (HX_FIELD_EQ(inName,"during") ) { return hx::Val( during_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arrival") ) { return hx::Val( arrival); }
		if (HX_FIELD_EQ(inName,"current") ) { return hx::Val( current); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"progress") ) { return hx::Val( progress_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Card_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::Globals >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"pick") ) { pick=inValue.Cast<  ::openfl::media::Sound >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"instr") ) { instr=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"focus") ) { focus=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"sprite") ) { sprite=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"target") ) { target=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vrooms") ) { vrooms=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"roller") ) { roller=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"double") ) { _hx_double=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arrival") ) { arrival=inValue.Cast<  ::openfl::media::Sound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"current") ) { current=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Card_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"));
	outFields->push(HX_HCSTRING("h","\x68","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("target","\x51","\xf3","\xec","\x86"));
	outFields->push(HX_HCSTRING("pick","\xe1","\xe8","\x57","\x4a"));
	outFields->push(HX_HCSTRING("arrival","\xf9","\x88","\xc0","\x3f"));
	outFields->push(HX_HCSTRING("vrooms","\xc2","\xfd","\x7d","\x1b"));
	outFields->push(HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"));
	outFields->push(HX_HCSTRING("instr","\xec","\x09","\x20","\xbe"));
	outFields->push(HX_HCSTRING("roller","\x2a","\xdd","\xde","\xc5"));
	outFields->push(HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"));
	outFields->push(HX_HCSTRING("double","\x11","\x2b","\xcb","\x32"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Card_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Card_obj,sprite),HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3")},
	{hx::fsInt,(int)offsetof(Card_obj,h),HX_HCSTRING("h","\x68","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(Card_obj,target),HX_HCSTRING("target","\x51","\xf3","\xec","\x86")},
	{hx::fsObject /*::openfl::media::Sound*/ ,(int)offsetof(Card_obj,pick),HX_HCSTRING("pick","\xe1","\xe8","\x57","\x4a")},
	{hx::fsObject /*::openfl::media::Sound*/ ,(int)offsetof(Card_obj,arrival),HX_HCSTRING("arrival","\xf9","\x88","\xc0","\x3f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Card_obj,vrooms),HX_HCSTRING("vrooms","\xc2","\xfd","\x7d","\x1b")},
	{hx::fsInt,(int)offsetof(Card_obj,current),HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(Card_obj,instr),HX_HCSTRING("instr","\xec","\x09","\x20","\xbe")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Card_obj,roller),HX_HCSTRING("roller","\x2a","\xdd","\xde","\xc5")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Card_obj,focus),HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Card_obj,_hx_double),HX_HCSTRING("double","\x11","\x2b","\xcb","\x32")},
	{hx::fsObject /*::Globals*/ ,(int)offsetof(Card_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Card_obj_sStaticStorageInfo = 0;
#endif

static ::String Card_obj_sMemberFields[] = {
	HX_HCSTRING("sprite","\x05","\xdc","\x95","\xc3"),
	HX_HCSTRING("h","\x68","\x00","\x00","\x00"),
	HX_HCSTRING("target","\x51","\xf3","\xec","\x86"),
	HX_HCSTRING("pick","\xe1","\xe8","\x57","\x4a"),
	HX_HCSTRING("arrival","\xf9","\x88","\xc0","\x3f"),
	HX_HCSTRING("vrooms","\xc2","\xfd","\x7d","\x1b"),
	HX_HCSTRING("current","\x39","\x9c","\xe3","\xcb"),
	HX_HCSTRING("instr","\xec","\x09","\x20","\xbe"),
	HX_HCSTRING("roller","\x2a","\xdd","\xde","\xc5"),
	HX_HCSTRING("focus","\xd8","\x5f","\x89","\x04"),
	HX_HCSTRING("double","\x11","\x2b","\xcb","\x32"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("sel","\x9a","\x9b","\x57","\x00"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("during","\xc1","\x53","\x3c","\xa5"),
	HX_HCSTRING("end","\xdb","\x03","\x4d","\x00"),
	HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"),
	::String(null()) };

static void Card_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Card_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Card_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Card_obj::__mClass,"__mClass");
};

#endif

hx::Class Card_obj::__mClass;

void Card_obj::__register()
{
	hx::Object *dummy = new Card_obj;
	Card_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Card","\xf0","\x49","\x93","\x2c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Card_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Card_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Card_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Card_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Card_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Card_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

