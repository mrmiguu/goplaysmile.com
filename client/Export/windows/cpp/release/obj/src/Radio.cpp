// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_IButton
#include <IButton.h>
#endif
#ifndef INCLUDED_Radio
#include <Radio.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a58daca459661213_7_new,"Radio","new",0x7f822b4d,"Radio.new","Radio.hx",7,0xce0f7cc3)
HX_DEFINE_STACK_FRAME(_hx_pos_a58daca459661213_10_add,"Radio","add",0x7f784d0e,"Radio.add","Radio.hx",10,0xce0f7cc3)
HX_DEFINE_STACK_FRAME(_hx_pos_a58daca459661213_15_push,"Radio","push",0x13c2464d,"Radio.push","Radio.hx",15,0xce0f7cc3)

void Radio_obj::__construct(::Dynamic b1,::Dynamic b2){
            	HX_STACKFRAME(&_hx_pos_a58daca459661213_7_new)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b1,"b1")
            	HX_STACK_ARG(b2,"b2")
HXLINE(   7)		this->radio = ::Array_obj< ::Dynamic>::__new(2)->init(0,b1)->init(1,b2);
            	}

Dynamic Radio_obj::__CreateEmpty() { return new Radio_obj; }

void *Radio_obj::_hx_vtable = 0;

Dynamic Radio_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Radio_obj > _hx_result = new Radio_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Radio_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x774580db;
}

void Radio_obj::add(::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_a58daca459661213_10_add)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  11)		::IButton_obj::popOut(b);
HXLINE(  12)		this->radio->push(b);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Radio_obj,add,(void))

void Radio_obj::push(::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_a58daca459661213_15_push)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  16)		{
HXLINE(  16)			HX_VARI( int,_g) = (int)0;
HXDLIN(  16)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->radio;
HXDLIN(  16)			while((_g < _g1->length)){
HXLINE(  16)				HX_VARI( ::Dynamic,r) = _g1->__get(_g);
HXDLIN(  16)				_g = (_g + (int)1);
HXLINE(  17)				::IButton_obj::popOut(r);
            			}
            		}
HXLINE(  19)		::IButton_obj::pushIn(this->radio->__get(this->radio->indexOf(b,null())));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Radio_obj,push,(void))


hx::ObjectPtr< Radio_obj > Radio_obj::__new(::Dynamic b1,::Dynamic b2) {
	hx::ObjectPtr< Radio_obj > __this = new Radio_obj();
	__this->__construct(b1,b2);
	return __this;
}

hx::ObjectPtr< Radio_obj > Radio_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic b1,::Dynamic b2) {
	Radio_obj *__this = (Radio_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Radio_obj), true, "Radio"));
	*(void **)__this = Radio_obj::_hx_vtable;
	__this->__construct(b1,b2);
	return __this;
}

Radio_obj::Radio_obj()
{
}

void Radio_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Radio);
	HX_MARK_MEMBER_NAME(radio,"radio");
	HX_MARK_END_CLASS();
}

void Radio_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(radio,"radio");
}

hx::Val Radio_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"radio") ) { return hx::Val( radio); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Radio_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"radio") ) { radio=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Radio_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("radio","\xfb","\x10","\x18","\xe4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Radio_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::IButton >*/ ,(int)offsetof(Radio_obj,radio),HX_HCSTRING("radio","\xfb","\x10","\x18","\xe4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Radio_obj_sStaticStorageInfo = 0;
#endif

static ::String Radio_obj_sMemberFields[] = {
	HX_HCSTRING("radio","\xfb","\x10","\x18","\xe4"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	::String(null()) };

static void Radio_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Radio_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Radio_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Radio_obj::__mClass,"__mClass");
};

#endif

hx::Class Radio_obj::__mClass;

void Radio_obj::__register()
{
	hx::Object *dummy = new Radio_obj;
	Radio_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Radio","\xdb","\x80","\x45","\x77");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Radio_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Radio_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Radio_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Radio_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Radio_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Radio_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

