// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Cars
#include <Cars.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif


void Cars_obj::__construct(){
            	HX_STACK_FRAME("Cars","new",0xa4555671,"Cars.new","Cars.hx",5,0x9a91021f)
            	HX_STACK_THIS(this)
HXLINE(  15)		HX_VARI(  ::openfl::display::Tile,tile) =  ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null());
HXDLIN(  15)		HX_VARI(  ::openfl::display::BitmapData,png) = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("cars/v.png",41,e5,ab,4b)),null());
HXDLIN(  15)		HX_VARI(  ::openfl::display::Tileset,set) =  ::openfl::display::Tileset_obj::__new(png,null());
HXDLIN(  15)		set->addRect(png->rect);
HXDLIN(  15)		tile->set_tileset(set);
HXDLIN(  15)		this->v = tile;
HXLINE(  14)		HX_VARI_NAME(  ::openfl::display::Tile,tile1,"tile") =  ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null());
HXDLIN(  14)		HX_VARI_NAME(  ::openfl::display::BitmapData,png1,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("cars/i.png",b4,5a,76,cf)),null());
HXDLIN(  14)		HX_VARI_NAME(  ::openfl::display::Tileset,set1,"set") =  ::openfl::display::Tileset_obj::__new(png1,null());
HXDLIN(  14)		set1->addRect(png1->rect);
HXDLIN(  14)		tile1->set_tileset(set1);
HXDLIN(  14)		this->i = tile1;
HXLINE(  13)		HX_VARI_NAME(  ::openfl::display::Tile,tile2,"tile") =  ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null());
HXDLIN(  13)		HX_VARI_NAME(  ::openfl::display::BitmapData,png2,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("cars/b.png",2d,4b,a8,c7)),null());
HXDLIN(  13)		HX_VARI_NAME(  ::openfl::display::Tileset,set2,"set") =  ::openfl::display::Tileset_obj::__new(png2,null());
HXDLIN(  13)		set2->addRect(png2->rect);
HXDLIN(  13)		tile2->set_tileset(set2);
HXDLIN(  13)		this->b = tile2;
HXLINE(  12)		HX_VARI_NAME(  ::openfl::display::Tile,tile3,"tile") =  ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null());
HXDLIN(  12)		HX_VARI_NAME(  ::openfl::display::BitmapData,png3,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("cars/g.png",b2,31,a9,a8)),null());
HXDLIN(  12)		HX_VARI_NAME(  ::openfl::display::Tileset,set3,"set") =  ::openfl::display::Tileset_obj::__new(png3,null());
HXDLIN(  12)		set3->addRect(png3->rect);
HXDLIN(  12)		tile3->set_tileset(set3);
HXDLIN(  12)		this->g = tile3;
HXLINE(  11)		HX_VARI_NAME(  ::openfl::display::Tile,tile4,"tile") =  ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null());
HXDLIN(  11)		HX_VARI_NAME(  ::openfl::display::BitmapData,png4,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("cars/y.png",c4,a2,df,05)),null());
HXDLIN(  11)		HX_VARI_NAME(  ::openfl::display::Tileset,set4,"set") =  ::openfl::display::Tileset_obj::__new(png4,null());
HXDLIN(  11)		set4->addRect(png4->rect);
HXDLIN(  11)		tile4->set_tileset(set4);
HXDLIN(  11)		this->y = tile4;
HXLINE(  10)		HX_VARI_NAME(  ::openfl::display::Tile,tile5,"tile") =  ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null());
HXDLIN(  10)		HX_VARI_NAME(  ::openfl::display::BitmapData,png5,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("cars/o.png",ba,d5,dd,43)),null());
HXDLIN(  10)		HX_VARI_NAME(  ::openfl::display::Tileset,set5,"set") =  ::openfl::display::Tileset_obj::__new(png5,null());
HXDLIN(  10)		set5->addRect(png5->rect);
HXDLIN(  10)		tile5->set_tileset(set5);
HXDLIN(  10)		this->o = tile5;
HXLINE(   9)		HX_VARI_NAME(  ::openfl::display::Tile,tile6,"tile") =  ::openfl::display::Tile_obj::__new(null(),null(),null(),null(),null(),null());
HXDLIN(   9)		HX_VARI_NAME(  ::openfl::display::BitmapData,png6,"png") = ::openfl::Assets_obj::getBitmapData((HX_("assets/",4c,2a,dc,36) + HX_("cars/r.png",3d,93,11,fe)),null());
HXDLIN(   9)		HX_VARI_NAME(  ::openfl::display::Tileset,set6,"set") =  ::openfl::display::Tileset_obj::__new(png6,null());
HXDLIN(   9)		set6->addRect(png6->rect);
HXDLIN(   9)		tile6->set_tileset(set6);
HXDLIN(   9)		this->r = tile6;
            	}

Dynamic Cars_obj::__CreateEmpty() { return new Cars_obj; }

hx::ObjectPtr< Cars_obj > Cars_obj::__new()
{
	hx::ObjectPtr< Cars_obj > _hx_result = new Cars_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Cars_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Cars_obj > _hx_result = new Cars_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int Cars_obj::WIDTH;

Int Cars_obj::HEIGHT;


Cars_obj::Cars_obj()
{
}

void Cars_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Cars);
	HX_MARK_MEMBER_NAME(r,"r");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(v,"v");
	HX_MARK_END_CLASS();
}

void Cars_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(r,"r");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(v,"v");
}

hx::Val Cars_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { return hx::Val( r); }
		if (HX_FIELD_EQ(inName,"o") ) { return hx::Val( o); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g); }
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i); }
		if (HX_FIELD_EQ(inName,"v") ) { return hx::Val( v); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Cars_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"r") ) { r=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
		if (HX_FIELD_EQ(inName,"v") ) { v=inValue.Cast<  ::openfl::display::Tile >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Cars_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("r","\x72","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("o","\x6f","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("g","\x67","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("v","\x76","\x00","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Cars_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Cars_obj,r),HX_HCSTRING("r","\x72","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Cars_obj,o),HX_HCSTRING("o","\x6f","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Cars_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Cars_obj,g),HX_HCSTRING("g","\x67","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Cars_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Cars_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{hx::fsObject /*::openfl::display::Tile*/ ,(int)offsetof(Cars_obj,v),HX_HCSTRING("v","\x76","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Cars_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Cars_obj::WIDTH,HX_HCSTRING("WIDTH","\xe6","\xed","\x50","\x48")},
	{hx::fsInt,(void *) &Cars_obj::HEIGHT,HX_HCSTRING("HEIGHT","\xe7","\xb3","\xce","\xb4")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Cars_obj_sMemberFields[] = {
	HX_HCSTRING("r","\x72","\x00","\x00","\x00"),
	HX_HCSTRING("o","\x6f","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("g","\x67","\x00","\x00","\x00"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("v","\x76","\x00","\x00","\x00"),
	::String(null()) };

static void Cars_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Cars_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Cars_obj::WIDTH,"WIDTH");
	HX_MARK_MEMBER_NAME(Cars_obj::HEIGHT,"HEIGHT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Cars_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Cars_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Cars_obj::WIDTH,"WIDTH");
	HX_VISIT_MEMBER_NAME(Cars_obj::HEIGHT,"HEIGHT");
};

#endif

hx::Class Cars_obj::__mClass;

static ::String Cars_obj_sStaticFields[] = {
	HX_HCSTRING("WIDTH","\xe6","\xed","\x50","\x48"),
	HX_HCSTRING("HEIGHT","\xe7","\xb3","\xce","\xb4"),
	::String(null())
};

void Cars_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Cars","\xff","\x49","\x93","\x2c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Cars_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Cars_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Cars_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Cars_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Cars_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Cars_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Cars_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Cars_obj::__boot()
{
{
            	HX_STACK_FRAME("Cars","boot",0x1e6f4d01,"Cars.boot","Cars.hx",6,0x9a91021f)
HXLINE(   6)		WIDTH = (int)78;
            	}
{
            	HX_STACK_FRAME("Cars","boot",0x1e6f4d01,"Cars.boot","Cars.hx",7,0x9a91021f)
HXLINE(   7)		HEIGHT = (int)84;
            	}
}

