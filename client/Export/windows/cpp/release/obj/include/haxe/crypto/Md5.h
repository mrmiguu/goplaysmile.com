// Generated by Haxe 3.3.0
#ifndef INCLUDED_haxe_crypto_Md5
#define INCLUDED_haxe_crypto_Md5

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,crypto,Md5)

namespace haxe{
namespace crypto{


class HXCPP_CLASS_ATTRIBUTES Md5_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Md5_obj OBJ_;
		Md5_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.crypto.Md5")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxe.crypto.Md5"); }
		static hx::ObjectPtr< Md5_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Md5_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("Md5","\xde","\xc4","\x3a","\x00"); }

		static ::String encode(::String s);
		static ::Dynamic encode_dyn();

		static ::Array< Int > str2blks(::String str);
		static ::Dynamic str2blks_dyn();

		Int bitOR(Int a,Int b);
		::Dynamic bitOR_dyn();

		Int bitXOR(Int a,Int b);
		::Dynamic bitXOR_dyn();

		Int bitAND(Int a,Int b);
		::Dynamic bitAND_dyn();

		Int addme(Int x,Int y);
		::Dynamic addme_dyn();

		::String hex(::Array< Int > a);
		::Dynamic hex_dyn();

		Int rol(Int num,Int cnt);
		::Dynamic rol_dyn();

		Int cmn(Int q,Int a,Int b,Int x,Int s,Int t);
		::Dynamic cmn_dyn();

		Int ff(Int a,Int b,Int c,Int d,Int x,Int s,Int t);
		::Dynamic ff_dyn();

		Int gg(Int a,Int b,Int c,Int d,Int x,Int s,Int t);
		::Dynamic gg_dyn();

		Int hh(Int a,Int b,Int c,Int d,Int x,Int s,Int t);
		::Dynamic hh_dyn();

		Int ii(Int a,Int b,Int c,Int d,Int x,Int s,Int t);
		::Dynamic ii_dyn();

		::Array< Int > doEncode(::Array< Int > x);
		::Dynamic doEncode_dyn();

};

} // end namespace haxe
} // end namespace crypto

#endif /* INCLUDED_haxe_crypto_Md5 */ 
