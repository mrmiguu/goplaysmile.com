// Generated by Haxe 3.4.0
#ifndef INCLUDED_Viewport
#define INCLUDED_Viewport

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
HX_DECLARE_CLASS0(Animatible)
HX_DECLARE_CLASS0(Animation)
HX_DECLARE_CLASS0(Cars)
HX_DECLARE_CLASS0(Dests)
HX_DECLARE_CLASS0(Globals)
HX_DECLARE_CLASS0(Viewport)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Tile)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,MouseEvent)
HX_DECLARE_CLASS2(openfl,media,Sound)



class HXCPP_CLASS_ATTRIBUTES Viewport_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Viewport_obj OBJ_;
		Viewport_obj();

	public:
		enum { _hx_ClassId = 0x76570886 };

		void __construct( ::Globals g,int x,int y,int w,int h, ::openfl::display::Sprite gps, ::openfl::display::Sprite from);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Viewport")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Viewport"); }
		static hx::ObjectPtr< Viewport_obj > __new( ::Globals g,int x,int y,int w,int h, ::openfl::display::Sprite gps, ::openfl::display::Sprite from);
		static hx::ObjectPtr< Viewport_obj > __alloc(hx::Ctx *_hx_ctx, ::Globals g,int x,int y,int w,int h, ::openfl::display::Sprite gps, ::openfl::display::Sprite from);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Viewport_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Viewport","\x86","\x08","\x57","\x76"); }

		 ::Cars bC;
		 ::Cars lC;
		 ::Dests bD;
		 ::Dests lD;
		 ::openfl::display::Tile board;
		 ::openfl::display::Sprite zoom;
		int realW;
		int realH;
		 ::Animation anim;
		::Array< ::Dynamic> nodePoints;
		::Array< ::String > nodeNames;
		Float left;
		Float top;
		Float right;
		Float bottom;
		 ::openfl::display::Sprite world;
		 ::openfl::media::Sound slide;
		bool mouseHeld;
		Float lastX;
		Float lastY;
		 ::openfl::display::Sprite infoCard;
		int w;
		int h;
		 ::Globals g;
		 ::Dynamic point(::String id);
		::Dynamic point_dyn();

		void aimRC(::String loc);
		::Dynamic aimRC_dyn();

		void aimOC(::String loc);
		::Dynamic aimOC_dyn();

		void aimYC(::String loc);
		::Dynamic aimYC_dyn();

		void aimGC(::String loc);
		::Dynamic aimGC_dyn();

		void aimBC(::String loc);
		::Dynamic aimBC_dyn();

		void aimIC(::String loc);
		::Dynamic aimIC_dyn();

		void aimVC(::String loc);
		::Dynamic aimVC_dyn();

		void aimRD(::String dest);
		::Dynamic aimRD_dyn();

		void aimOD(::String dest);
		::Dynamic aimOD_dyn();

		void aimYD(::String dest);
		::Dynamic aimYD_dyn();

		void aimGD(::String dest);
		::Dynamic aimGD_dyn();

		void aimBD(::String dest);
		::Dynamic aimBD_dyn();

		void aimID(::String dest);
		::Dynamic aimID_dyn();

		void aimVD(::String dest);
		::Dynamic aimVD_dyn();

		 ::Dynamic aRC;
		 ::Dynamic aOC;
		 ::Dynamic aYC;
		 ::Dynamic aGC;
		 ::Dynamic aBC;
		 ::Dynamic aIC;
		 ::Dynamic aVC;
		 ::Dynamic aRD;
		 ::Dynamic aOD;
		 ::Dynamic aYD;
		 ::Dynamic aGD;
		 ::Dynamic aBD;
		 ::Dynamic aID;
		 ::Dynamic aVD;
		bool animating;
		Float future;
		Float delay;
		void transition();
		::Dynamic transition_dyn();

		bool carMoved;
		void relocateCars();
		::Dynamic relocateCars_dyn();

		void relocateDests();
		::Dynamic relocateDests_dyn();

		void click( ::openfl::events::MouseEvent m);
		::Dynamic click_dyn();

		void doubleClick( ::openfl::events::MouseEvent m);
		::Dynamic doubleClick_dyn();

		void move(Float x,Float y);
		::Dynamic move_dyn();

		void mouseMove( ::openfl::events::MouseEvent m);
		::Dynamic mouseMove_dyn();

		 ::openfl::display::Sprite gpsMap();
		::Dynamic gpsMap_dyn();

		 ::openfl::display::Sprite littleMap();
		::Dynamic littleMap_dyn();

};


#endif /* INCLUDED_Viewport */ 
