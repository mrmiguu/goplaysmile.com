// Generated by Haxe 3.4.0
#ifndef INCLUDED_Field
#define INCLUDED_Field

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS0(Field)
HX_DECLARE_CLASS0(Globals)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,text,TextField)



class HXCPP_CLASS_ATTRIBUTES Field_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Field_obj OBJ_;
		Field_obj();

	public:
		enum { _hx_ClassId = 0x7e316e26 };

		void __construct( ::Globals g,Float x,Float y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Field")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Field"); }
		static hx::ObjectPtr< Field_obj > __new( ::Globals g,Float x,Float y);
		static hx::ObjectPtr< Field_obj > __alloc(hx::Ctx *_hx_ctx, ::Globals g,Float x,Float y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Field_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Field","\x9a","\x04","\xc1","\x93"); }

		 ::Globals g;
		Float cenx;
		Float ceny;
		 ::openfl::display::Sprite l;
		::Array< ::Dynamic> ms;
		 ::openfl::display::Sprite r;
		 ::openfl::text::TextField f;
		int tW;
		int tE;
		::String getText();
		::Dynamic getText_dyn();

		void setText(::String t);
		::Dynamic setText_dyn();

};


#endif /* INCLUDED_Field */ 
