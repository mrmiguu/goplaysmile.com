// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#define INCLUDED_lime__backend_native_NativeGLRenderContext

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,_backend,native,NativeGLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLBuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLFramebuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLProgram)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLRenderbuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLShader)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLTexture)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace _backend{
namespace native{


class HXCPP_CLASS_ATTRIBUTES NativeGLRenderContext_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NativeGLRenderContext_obj OBJ_;
		NativeGLRenderContext_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime._backend.native.NativeGLRenderContext")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime._backend.native.NativeGLRenderContext"); }
		static hx::ObjectPtr< NativeGLRenderContext_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NativeGLRenderContext_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("NativeGLRenderContext","\xfd","\x2f","\x3c","\x30"); }

		static void __boot();
		static void lime_gl_active_texture(Int texture);
		static ::Dynamic lime_gl_active_texture_dyn();

		static void lime_gl_attach_shader( ::Dynamic program, ::Dynamic shader);
		static ::Dynamic lime_gl_attach_shader_dyn();

		static void lime_gl_bind_attrib_location( ::Dynamic program,Int index,::String name);
		static ::Dynamic lime_gl_bind_attrib_location_dyn();

		static void lime_gl_bind_buffer(Int target, ::Dynamic buffer);
		static ::Dynamic lime_gl_bind_buffer_dyn();

		static void lime_gl_bind_framebuffer(Int target, ::Dynamic framebuffer);
		static ::Dynamic lime_gl_bind_framebuffer_dyn();

		static void lime_gl_bind_renderbuffer(Int target, ::Dynamic renderbuffer);
		static ::Dynamic lime_gl_bind_renderbuffer_dyn();

		static void lime_gl_bind_texture(Int target, ::Dynamic texture);
		static ::Dynamic lime_gl_bind_texture_dyn();

		static void lime_gl_blend_color(float red,float green,float blue,float alpha);
		static ::Dynamic lime_gl_blend_color_dyn();

		static void lime_gl_blend_equation(Int mode);
		static ::Dynamic lime_gl_blend_equation_dyn();

		static void lime_gl_blend_equation_separate(Int modeRGB,Int modeAlpha);
		static ::Dynamic lime_gl_blend_equation_separate_dyn();

		static void lime_gl_blend_func(Int sfactor,Int dfactor);
		static ::Dynamic lime_gl_blend_func_dyn();

		static void lime_gl_blend_func_separate(Int srcRGB,Int dstRGB,Int srcAlpha,Int dstAlpha);
		static ::Dynamic lime_gl_blend_func_separate_dyn();

		static void lime_gl_buffer_data(Int target, ::Dynamic buffer,Int byteOffset,Int size,Int usage);
		static ::Dynamic lime_gl_buffer_data_dyn();

		static void lime_gl_buffer_sub_data(Int target,Int offset, ::Dynamic buffer,Int byteOffset,Int size);
		static ::Dynamic lime_gl_buffer_sub_data_dyn();

		static Int lime_gl_check_framebuffer_status(Int target);
		static ::Dynamic lime_gl_check_framebuffer_status_dyn();

		static void lime_gl_clear(Int mask);
		static ::Dynamic lime_gl_clear_dyn();

		static void lime_gl_clear_color(float red,float green,float blue,float alpha);
		static ::Dynamic lime_gl_clear_color_dyn();

		static void lime_gl_clear_depth(float depth);
		static ::Dynamic lime_gl_clear_depth_dyn();

		static void lime_gl_clear_stencil(Int s);
		static ::Dynamic lime_gl_clear_stencil_dyn();

		static void lime_gl_color_mask(Bool red,Bool green,Bool blue,Bool alpha);
		static ::Dynamic lime_gl_color_mask_dyn();

		static void lime_gl_compile_shader( ::Dynamic shader);
		static ::Dynamic lime_gl_compile_shader_dyn();

		static void lime_gl_compressed_tex_image_2d(Int target,Int level,Int internalformat,Int width,Int height,Int border, ::Dynamic buffer,Int byteOffset);
		static ::Dynamic lime_gl_compressed_tex_image_2d_dyn();

		static void lime_gl_compressed_tex_sub_image_2d(Int target,Int level,Int xoffset,Int yoffset,Int width,Int height,Int format, ::Dynamic buffer,Int byteOffset);
		static ::Dynamic lime_gl_compressed_tex_sub_image_2d_dyn();

		static void lime_gl_copy_tex_image_2d(Int target,Int level,Int internalformat,Int x,Int y,Int width,Int height,Int border);
		static ::Dynamic lime_gl_copy_tex_image_2d_dyn();

		static void lime_gl_copy_tex_sub_image_2d(Int target,Int level,Int xoffset,Int yoffset,Int x,Int y,Int width,Int height);
		static ::Dynamic lime_gl_copy_tex_sub_image_2d_dyn();

		static  ::Dynamic lime_gl_create_buffer();
		static ::Dynamic lime_gl_create_buffer_dyn();

		static  ::Dynamic lime_gl_create_framebuffer();
		static ::Dynamic lime_gl_create_framebuffer_dyn();

		static  ::Dynamic lime_gl_create_program();
		static ::Dynamic lime_gl_create_program_dyn();

		static  ::Dynamic lime_gl_create_render_buffer();
		static ::Dynamic lime_gl_create_render_buffer_dyn();

		static  ::Dynamic lime_gl_create_shader(Int type);
		static ::Dynamic lime_gl_create_shader_dyn();

		static  ::Dynamic lime_gl_create_texture();
		static ::Dynamic lime_gl_create_texture_dyn();

		static void lime_gl_cull_face(Int mode);
		static ::Dynamic lime_gl_cull_face_dyn();

		static void lime_gl_delete_buffer( ::Dynamic buffer);
		static ::Dynamic lime_gl_delete_buffer_dyn();

		static void lime_gl_delete_framebuffer( ::Dynamic framebuffer);
		static ::Dynamic lime_gl_delete_framebuffer_dyn();

		static void lime_gl_delete_program( ::Dynamic program);
		static ::Dynamic lime_gl_delete_program_dyn();

		static void lime_gl_delete_render_buffer( ::Dynamic renderbuffer);
		static ::Dynamic lime_gl_delete_render_buffer_dyn();

		static void lime_gl_delete_shader( ::Dynamic shader);
		static ::Dynamic lime_gl_delete_shader_dyn();

		static void lime_gl_delete_texture( ::Dynamic texture);
		static ::Dynamic lime_gl_delete_texture_dyn();

		static void lime_gl_depth_func(Int func);
		static ::Dynamic lime_gl_depth_func_dyn();

		static void lime_gl_depth_mask(Bool flag);
		static ::Dynamic lime_gl_depth_mask_dyn();

		static void lime_gl_depth_range(float zNear,float zFar);
		static ::Dynamic lime_gl_depth_range_dyn();

		static void lime_gl_detach_shader( ::Dynamic program, ::Dynamic shader);
		static ::Dynamic lime_gl_detach_shader_dyn();

		static void lime_gl_disable(Int cap);
		static ::Dynamic lime_gl_disable_dyn();

		static void lime_gl_disable_vertex_attrib_array(Int index);
		static ::Dynamic lime_gl_disable_vertex_attrib_array_dyn();

		static void lime_gl_draw_arrays(Int mode,Int first,Int count);
		static ::Dynamic lime_gl_draw_arrays_dyn();

		static void lime_gl_draw_elements(Int mode,Int count,Int type,Int offset);
		static ::Dynamic lime_gl_draw_elements_dyn();

		static void lime_gl_enable(Int cap);
		static ::Dynamic lime_gl_enable_dyn();

		static void lime_gl_enable_vertex_attrib_array(Int index);
		static ::Dynamic lime_gl_enable_vertex_attrib_array_dyn();

		static void lime_gl_finish();
		static ::Dynamic lime_gl_finish_dyn();

		static void lime_gl_flush();
		static ::Dynamic lime_gl_flush_dyn();

		static void lime_gl_framebuffer_renderbuffer(Int target,Int attachment,Int renderbuffertarget, ::Dynamic renderbuffer);
		static ::Dynamic lime_gl_framebuffer_renderbuffer_dyn();

		static void lime_gl_framebuffer_texture2D(Int target,Int attachment,Int textarget, ::Dynamic texture,Int level);
		static ::Dynamic lime_gl_framebuffer_texture2D_dyn();

		static void lime_gl_front_face(Int mode);
		static ::Dynamic lime_gl_front_face_dyn();

		static void lime_gl_generate_mipmap(Int target);
		static ::Dynamic lime_gl_generate_mipmap_dyn();

		static  ::Dynamic lime_gl_get_active_attrib( ::Dynamic program,Int index);
		static ::Dynamic lime_gl_get_active_attrib_dyn();

		static  ::Dynamic lime_gl_get_active_uniform( ::Dynamic program,Int index);
		static ::Dynamic lime_gl_get_active_uniform_dyn();

		static Int lime_gl_get_attrib_location( ::Dynamic program,::String name);
		static ::Dynamic lime_gl_get_attrib_location_dyn();

		static Int lime_gl_get_buffer_parameter(Int target,Int pname);
		static ::Dynamic lime_gl_get_buffer_parameter_dyn();

		static  ::Dynamic lime_gl_get_context_attributes();
		static ::Dynamic lime_gl_get_context_attributes_dyn();

		static Int lime_gl_get_error();
		static ::Dynamic lime_gl_get_error_dyn();

		static  ::Dynamic lime_gl_get_extension(::String name);
		static ::Dynamic lime_gl_get_extension_dyn();

		static Int lime_gl_get_framebuffer_attachment_parameter(Int target,Int attachment,Int pname);
		static ::Dynamic lime_gl_get_framebuffer_attachment_parameter_dyn();

		static  ::Dynamic lime_gl_get_parameter(Int pname);
		static ::Dynamic lime_gl_get_parameter_dyn();

		static  ::Dynamic lime_gl_get_program_info_log( ::Dynamic program);
		static ::Dynamic lime_gl_get_program_info_log_dyn();

		static Int lime_gl_get_program_parameter( ::Dynamic program,Int pname);
		static ::Dynamic lime_gl_get_program_parameter_dyn();

		static Int lime_gl_get_render_buffer_parameter(Int target,Int pname);
		static ::Dynamic lime_gl_get_render_buffer_parameter_dyn();

		static  ::Dynamic lime_gl_get_shader_info_log( ::Dynamic shader);
		static ::Dynamic lime_gl_get_shader_info_log_dyn();

		static Int lime_gl_get_shader_parameter( ::Dynamic shader,Int pname);
		static ::Dynamic lime_gl_get_shader_parameter_dyn();

		static  ::Dynamic lime_gl_get_shader_precision_format(Int shadertype,Int precisiontype);
		static ::Dynamic lime_gl_get_shader_precision_format_dyn();

		static  ::Dynamic lime_gl_get_shader_source( ::Dynamic shader);
		static ::Dynamic lime_gl_get_shader_source_dyn();

		static void lime_gl_get_supported_extensions( ::Dynamic result);
		static ::Dynamic lime_gl_get_supported_extensions_dyn();

		static Int lime_gl_get_tex_parameter(Int target,Int pname);
		static ::Dynamic lime_gl_get_tex_parameter_dyn();

		static  ::Dynamic lime_gl_get_uniform( ::Dynamic program,Int location);
		static ::Dynamic lime_gl_get_uniform_dyn();

		static Int lime_gl_get_uniform_location( ::Dynamic program,::String name);
		static ::Dynamic lime_gl_get_uniform_location_dyn();

		static Int lime_gl_get_vertex_attrib(Int index,Int pname);
		static ::Dynamic lime_gl_get_vertex_attrib_dyn();

		static Int lime_gl_get_vertex_attrib_offset(Int index,Int pname);
		static ::Dynamic lime_gl_get_vertex_attrib_offset_dyn();

		static void lime_gl_hint(Int target,Int mode);
		static ::Dynamic lime_gl_hint_dyn();

		static Bool lime_gl_is_buffer( ::Dynamic buffer);
		static ::Dynamic lime_gl_is_buffer_dyn();

		static Bool lime_gl_is_enabled(Int cap);
		static ::Dynamic lime_gl_is_enabled_dyn();

		static Bool lime_gl_is_framebuffer( ::Dynamic framebuffer);
		static ::Dynamic lime_gl_is_framebuffer_dyn();

		static Bool lime_gl_is_program( ::Dynamic program);
		static ::Dynamic lime_gl_is_program_dyn();

		static Bool lime_gl_is_renderbuffer( ::Dynamic renderbuffer);
		static ::Dynamic lime_gl_is_renderbuffer_dyn();

		static Bool lime_gl_is_shader( ::Dynamic shader);
		static ::Dynamic lime_gl_is_shader_dyn();

		static Bool lime_gl_is_texture( ::Dynamic texture);
		static ::Dynamic lime_gl_is_texture_dyn();

		static void lime_gl_line_width(float width);
		static ::Dynamic lime_gl_line_width_dyn();

		static void lime_gl_link_program( ::Dynamic program);
		static ::Dynamic lime_gl_link_program_dyn();

		static void lime_gl_pixel_storei(Int pname,Int param);
		static ::Dynamic lime_gl_pixel_storei_dyn();

		static void lime_gl_polygon_offset(float factor,float units);
		static ::Dynamic lime_gl_polygon_offset_dyn();

		static void lime_gl_read_pixels(Int x,Int y,Int width,Int height,Int format,Int type, ::Dynamic buffer,Int byteOffset);
		static ::Dynamic lime_gl_read_pixels_dyn();

		static void lime_gl_renderbuffer_storage(Int target,Int internalformat,Int width,Int height);
		static ::Dynamic lime_gl_renderbuffer_storage_dyn();

		static void lime_gl_sample_coverage(float value,Bool invert);
		static ::Dynamic lime_gl_sample_coverage_dyn();

		static void lime_gl_scissor(Int x,Int y,Int width,Int height);
		static ::Dynamic lime_gl_scissor_dyn();

		static void lime_gl_shader_source( ::Dynamic shader,::String source);
		static ::Dynamic lime_gl_shader_source_dyn();

		static void lime_gl_stencil_func(Int func,Int ref,Int mask);
		static ::Dynamic lime_gl_stencil_func_dyn();

		static void lime_gl_stencil_func_separate(Int face,Int func,Int ref,Int mask);
		static ::Dynamic lime_gl_stencil_func_separate_dyn();

		static void lime_gl_stencil_mask(Int mask);
		static ::Dynamic lime_gl_stencil_mask_dyn();

		static void lime_gl_stencil_mask_separate(Int face,Int mask);
		static ::Dynamic lime_gl_stencil_mask_separate_dyn();

		static void lime_gl_stencil_op(Int fail,Int zfail,Int zpass);
		static ::Dynamic lime_gl_stencil_op_dyn();

		static void lime_gl_stencil_op_separate(Int face,Int fail,Int zfail,Int zpass);
		static ::Dynamic lime_gl_stencil_op_separate_dyn();

		static void lime_gl_tex_image_2d(Int target,Int level,Int internalformat,Int width,Int height,Int border,Int format,Int type, ::Dynamic buffer,Int byteOffset);
		static ::Dynamic lime_gl_tex_image_2d_dyn();

		static void lime_gl_tex_parameterf(Int target,Int pname,float param);
		static ::Dynamic lime_gl_tex_parameterf_dyn();

		static void lime_gl_tex_parameteri(Int target,Int pname,Int param);
		static ::Dynamic lime_gl_tex_parameteri_dyn();

		static void lime_gl_tex_sub_image_2d(Int target,Int level,Int xoffset,Int yoffset,Int width,Int height,Int format,Int type, ::Dynamic buffer,Int byteOffset);
		static ::Dynamic lime_gl_tex_sub_image_2d_dyn();

		static void lime_gl_uniform1f(Int location,float x);
		static ::Dynamic lime_gl_uniform1f_dyn();

		static void lime_gl_uniform1fv(Int location, ::Dynamic v);
		static ::Dynamic lime_gl_uniform1fv_dyn();

		static void lime_gl_uniform1i(Int location,Int x);
		static ::Dynamic lime_gl_uniform1i_dyn();

		static void lime_gl_uniform1iv(Int location, ::Dynamic v);
		static ::Dynamic lime_gl_uniform1iv_dyn();

		static void lime_gl_uniform2f(Int location,float x,float y);
		static ::Dynamic lime_gl_uniform2f_dyn();

		static void lime_gl_uniform2fv(Int location, ::Dynamic v);
		static ::Dynamic lime_gl_uniform2fv_dyn();

		static void lime_gl_uniform2i(Int location,Int x,Int y);
		static ::Dynamic lime_gl_uniform2i_dyn();

		static void lime_gl_uniform2iv(Int location, ::Dynamic v);
		static ::Dynamic lime_gl_uniform2iv_dyn();

		static void lime_gl_uniform3f(Int location,float x,float y,float z);
		static ::Dynamic lime_gl_uniform3f_dyn();

		static void lime_gl_uniform3fv(Int location, ::Dynamic v);
		static ::Dynamic lime_gl_uniform3fv_dyn();

		static void lime_gl_uniform3i(Int location,Int x,Int y,Int z);
		static ::Dynamic lime_gl_uniform3i_dyn();

		static void lime_gl_uniform3iv(Int location, ::Dynamic v);
		static ::Dynamic lime_gl_uniform3iv_dyn();

		static void lime_gl_uniform4f(Int location,float x,float y,float z,float w);
		static ::Dynamic lime_gl_uniform4f_dyn();

		static void lime_gl_uniform4fv(Int location, ::Dynamic v);
		static ::Dynamic lime_gl_uniform4fv_dyn();

		static void lime_gl_uniform4i(Int location,Int x,Int y,Int z,Int w);
		static ::Dynamic lime_gl_uniform4i_dyn();

		static void lime_gl_uniform4iv(Int location, ::Dynamic v);
		static ::Dynamic lime_gl_uniform4iv_dyn();

		static void lime_gl_uniform_matrix(Int location,Bool transpose, ::Dynamic buffer,Int count);
		static ::Dynamic lime_gl_uniform_matrix_dyn();

		static void lime_gl_use_program( ::Dynamic program);
		static ::Dynamic lime_gl_use_program_dyn();

		static void lime_gl_validate_program( ::Dynamic program);
		static ::Dynamic lime_gl_validate_program_dyn();

		static ::String lime_gl_version();
		static ::Dynamic lime_gl_version_dyn();

		static void lime_gl_vertex_attrib1f(Int indx,float x);
		static ::Dynamic lime_gl_vertex_attrib1f_dyn();

		static void lime_gl_vertex_attrib1fv(Int indx, ::Dynamic values);
		static ::Dynamic lime_gl_vertex_attrib1fv_dyn();

		static void lime_gl_vertex_attrib2f(Int indx,float x,float y);
		static ::Dynamic lime_gl_vertex_attrib2f_dyn();

		static void lime_gl_vertex_attrib2fv(Int indx, ::Dynamic values);
		static ::Dynamic lime_gl_vertex_attrib2fv_dyn();

		static void lime_gl_vertex_attrib3f(Int indx,float x,float y,float z);
		static ::Dynamic lime_gl_vertex_attrib3f_dyn();

		static void lime_gl_vertex_attrib3fv(Int indx, ::Dynamic values);
		static ::Dynamic lime_gl_vertex_attrib3fv_dyn();

		static void lime_gl_vertex_attrib4f(Int indx,float x,float y,float z,float w);
		static ::Dynamic lime_gl_vertex_attrib4f_dyn();

		static void lime_gl_vertex_attrib4fv(Int indx, ::Dynamic values);
		static ::Dynamic lime_gl_vertex_attrib4fv_dyn();

		static void lime_gl_vertex_attrib_pointer(Int indx,Int size,Int type,Bool normalized,Int stride,Int offset);
		static ::Dynamic lime_gl_vertex_attrib_pointer_dyn();

		static void lime_gl_viewport(Int x,Int y,Int width,Int height);
		static ::Dynamic lime_gl_viewport_dyn();

		static ::cpp::Function<  void(Int) > cffi_lime_gl_active_texture;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_active_texture_dyn() { return cffi_lime_gl_active_texture;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *) > cffi_lime_gl_attach_shader;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *) > &cffi_lime_gl_attach_shader_dyn() { return cffi_lime_gl_attach_shader;}
		static ::cpp::Function<  void( ::hx::Object *,Int,::String) > cffi_lime_gl_bind_attrib_location;
		static ::cpp::Function<  void( ::hx::Object *,Int,::String) > &cffi_lime_gl_bind_attrib_location_dyn() { return cffi_lime_gl_bind_attrib_location;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_bind_buffer;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_bind_buffer_dyn() { return cffi_lime_gl_bind_buffer;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_bind_framebuffer;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_bind_framebuffer_dyn() { return cffi_lime_gl_bind_framebuffer;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_bind_renderbuffer;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_bind_renderbuffer_dyn() { return cffi_lime_gl_bind_renderbuffer;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_bind_texture;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_bind_texture_dyn() { return cffi_lime_gl_bind_texture;}
		static ::cpp::Function<  void(float,float,float,float) > cffi_lime_gl_blend_color;
		static ::cpp::Function<  void(float,float,float,float) > &cffi_lime_gl_blend_color_dyn() { return cffi_lime_gl_blend_color;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_blend_equation;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_blend_equation_dyn() { return cffi_lime_gl_blend_equation;}
		static ::cpp::Function<  void(Int,Int) > cffi_lime_gl_blend_equation_separate;
		static ::cpp::Function<  void(Int,Int) > &cffi_lime_gl_blend_equation_separate_dyn() { return cffi_lime_gl_blend_equation_separate;}
		static ::cpp::Function<  void(Int,Int) > cffi_lime_gl_blend_func;
		static ::cpp::Function<  void(Int,Int) > &cffi_lime_gl_blend_func_dyn() { return cffi_lime_gl_blend_func;}
		static ::cpp::Function<  void(Int,Int,Int,Int) > cffi_lime_gl_blend_func_separate;
		static ::cpp::Function<  void(Int,Int,Int,Int) > &cffi_lime_gl_blend_func_separate_dyn() { return cffi_lime_gl_blend_func_separate;}
		static ::cpp::Function<  void(Int, ::hx::Object *,Int,Int,Int) > cffi_lime_gl_buffer_data;
		static ::cpp::Function<  void(Int, ::hx::Object *,Int,Int,Int) > &cffi_lime_gl_buffer_data_dyn() { return cffi_lime_gl_buffer_data;}
		static ::cpp::Function<  void(Int,Int, ::hx::Object *,Int,Int) > cffi_lime_gl_buffer_sub_data;
		static ::cpp::Function<  void(Int,Int, ::hx::Object *,Int,Int) > &cffi_lime_gl_buffer_sub_data_dyn() { return cffi_lime_gl_buffer_sub_data;}
		static ::cpp::Function<  Int(Int) > cffi_lime_gl_check_framebuffer_status;
		static ::cpp::Function<  Int(Int) > &cffi_lime_gl_check_framebuffer_status_dyn() { return cffi_lime_gl_check_framebuffer_status;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_clear;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_clear_dyn() { return cffi_lime_gl_clear;}
		static ::cpp::Function<  void(float,float,float,float) > cffi_lime_gl_clear_color;
		static ::cpp::Function<  void(float,float,float,float) > &cffi_lime_gl_clear_color_dyn() { return cffi_lime_gl_clear_color;}
		static ::cpp::Function<  void(float) > cffi_lime_gl_clear_depth;
		static ::cpp::Function<  void(float) > &cffi_lime_gl_clear_depth_dyn() { return cffi_lime_gl_clear_depth;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_clear_stencil;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_clear_stencil_dyn() { return cffi_lime_gl_clear_stencil;}
		static ::cpp::Function<  void(Bool,Bool,Bool,Bool) > cffi_lime_gl_color_mask;
		static ::cpp::Function<  void(Bool,Bool,Bool,Bool) > &cffi_lime_gl_color_mask_dyn() { return cffi_lime_gl_color_mask;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_compile_shader;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_compile_shader_dyn() { return cffi_lime_gl_compile_shader;}
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > cffi_lime_gl_compressed_tex_image_2d;
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > &cffi_lime_gl_compressed_tex_image_2d_dyn() { return cffi_lime_gl_compressed_tex_image_2d;}
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > cffi_lime_gl_compressed_tex_sub_image_2d;
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > &cffi_lime_gl_compressed_tex_sub_image_2d_dyn() { return cffi_lime_gl_compressed_tex_sub_image_2d;}
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int,Int) > cffi_lime_gl_copy_tex_image_2d;
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int,Int) > &cffi_lime_gl_copy_tex_image_2d_dyn() { return cffi_lime_gl_copy_tex_image_2d;}
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int,Int) > cffi_lime_gl_copy_tex_sub_image_2d;
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int,Int) > &cffi_lime_gl_copy_tex_sub_image_2d_dyn() { return cffi_lime_gl_copy_tex_sub_image_2d;}
		static ::cpp::Function<   ::hx::Object *() > cffi_lime_gl_create_buffer;
		static ::cpp::Function<   ::hx::Object *() > &cffi_lime_gl_create_buffer_dyn() { return cffi_lime_gl_create_buffer;}
		static ::cpp::Function<   ::hx::Object *() > cffi_lime_gl_create_framebuffer;
		static ::cpp::Function<   ::hx::Object *() > &cffi_lime_gl_create_framebuffer_dyn() { return cffi_lime_gl_create_framebuffer;}
		static ::cpp::Function<   ::hx::Object *() > cffi_lime_gl_create_program;
		static ::cpp::Function<   ::hx::Object *() > &cffi_lime_gl_create_program_dyn() { return cffi_lime_gl_create_program;}
		static ::cpp::Function<   ::hx::Object *() > cffi_lime_gl_create_render_buffer;
		static ::cpp::Function<   ::hx::Object *() > &cffi_lime_gl_create_render_buffer_dyn() { return cffi_lime_gl_create_render_buffer;}
		static ::cpp::Function<   ::hx::Object *(Int) > cffi_lime_gl_create_shader;
		static ::cpp::Function<   ::hx::Object *(Int) > &cffi_lime_gl_create_shader_dyn() { return cffi_lime_gl_create_shader;}
		static ::cpp::Function<   ::hx::Object *() > cffi_lime_gl_create_texture;
		static ::cpp::Function<   ::hx::Object *() > &cffi_lime_gl_create_texture_dyn() { return cffi_lime_gl_create_texture;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_cull_face;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_cull_face_dyn() { return cffi_lime_gl_cull_face;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_delete_buffer;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_delete_buffer_dyn() { return cffi_lime_gl_delete_buffer;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_delete_framebuffer;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_delete_framebuffer_dyn() { return cffi_lime_gl_delete_framebuffer;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_delete_program;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_delete_program_dyn() { return cffi_lime_gl_delete_program;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_delete_render_buffer;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_delete_render_buffer_dyn() { return cffi_lime_gl_delete_render_buffer;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_delete_shader;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_delete_shader_dyn() { return cffi_lime_gl_delete_shader;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_delete_texture;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_delete_texture_dyn() { return cffi_lime_gl_delete_texture;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_depth_func;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_depth_func_dyn() { return cffi_lime_gl_depth_func;}
		static ::cpp::Function<  void(Bool) > cffi_lime_gl_depth_mask;
		static ::cpp::Function<  void(Bool) > &cffi_lime_gl_depth_mask_dyn() { return cffi_lime_gl_depth_mask;}
		static ::cpp::Function<  void(float,float) > cffi_lime_gl_depth_range;
		static ::cpp::Function<  void(float,float) > &cffi_lime_gl_depth_range_dyn() { return cffi_lime_gl_depth_range;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *) > cffi_lime_gl_detach_shader;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *) > &cffi_lime_gl_detach_shader_dyn() { return cffi_lime_gl_detach_shader;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_disable;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_disable_dyn() { return cffi_lime_gl_disable;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_disable_vertex_attrib_array;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_disable_vertex_attrib_array_dyn() { return cffi_lime_gl_disable_vertex_attrib_array;}
		static ::cpp::Function<  void(Int,Int,Int) > cffi_lime_gl_draw_arrays;
		static ::cpp::Function<  void(Int,Int,Int) > &cffi_lime_gl_draw_arrays_dyn() { return cffi_lime_gl_draw_arrays;}
		static ::cpp::Function<  void(Int,Int,Int,Int) > cffi_lime_gl_draw_elements;
		static ::cpp::Function<  void(Int,Int,Int,Int) > &cffi_lime_gl_draw_elements_dyn() { return cffi_lime_gl_draw_elements;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_enable;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_enable_dyn() { return cffi_lime_gl_enable;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_enable_vertex_attrib_array;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_enable_vertex_attrib_array_dyn() { return cffi_lime_gl_enable_vertex_attrib_array;}
		static ::cpp::Function<  void() > cffi_lime_gl_finish;
		static ::cpp::Function<  void() > &cffi_lime_gl_finish_dyn() { return cffi_lime_gl_finish;}
		static ::cpp::Function<  void() > cffi_lime_gl_flush;
		static ::cpp::Function<  void() > &cffi_lime_gl_flush_dyn() { return cffi_lime_gl_flush;}
		static ::cpp::Function<  void(Int,Int,Int, ::hx::Object *) > cffi_lime_gl_framebuffer_renderbuffer;
		static ::cpp::Function<  void(Int,Int,Int, ::hx::Object *) > &cffi_lime_gl_framebuffer_renderbuffer_dyn() { return cffi_lime_gl_framebuffer_renderbuffer;}
		static ::cpp::Function<  void(Int,Int,Int, ::hx::Object *,Int) > cffi_lime_gl_framebuffer_texture2D;
		static ::cpp::Function<  void(Int,Int,Int, ::hx::Object *,Int) > &cffi_lime_gl_framebuffer_texture2D_dyn() { return cffi_lime_gl_framebuffer_texture2D;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_front_face;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_front_face_dyn() { return cffi_lime_gl_front_face;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_generate_mipmap;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_generate_mipmap_dyn() { return cffi_lime_gl_generate_mipmap;}
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > cffi_lime_gl_get_active_attrib;
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > &cffi_lime_gl_get_active_attrib_dyn() { return cffi_lime_gl_get_active_attrib;}
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > cffi_lime_gl_get_active_uniform;
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > &cffi_lime_gl_get_active_uniform_dyn() { return cffi_lime_gl_get_active_uniform;}
		static ::cpp::Function<  Int( ::hx::Object *,::String) > cffi_lime_gl_get_attrib_location;
		static ::cpp::Function<  Int( ::hx::Object *,::String) > &cffi_lime_gl_get_attrib_location_dyn() { return cffi_lime_gl_get_attrib_location;}
		static ::cpp::Function<  Int(Int,Int) > cffi_lime_gl_get_buffer_parameter;
		static ::cpp::Function<  Int(Int,Int) > &cffi_lime_gl_get_buffer_parameter_dyn() { return cffi_lime_gl_get_buffer_parameter;}
		static ::cpp::Function<   ::hx::Object *() > cffi_lime_gl_get_context_attributes;
		static ::cpp::Function<   ::hx::Object *() > &cffi_lime_gl_get_context_attributes_dyn() { return cffi_lime_gl_get_context_attributes;}
		static ::cpp::Function<  Int() > cffi_lime_gl_get_error;
		static ::cpp::Function<  Int() > &cffi_lime_gl_get_error_dyn() { return cffi_lime_gl_get_error;}
		static ::cpp::Function<   ::hx::Object *(::String) > cffi_lime_gl_get_extension;
		static ::cpp::Function<   ::hx::Object *(::String) > &cffi_lime_gl_get_extension_dyn() { return cffi_lime_gl_get_extension;}
		static ::cpp::Function<  Int(Int,Int,Int) > cffi_lime_gl_get_framebuffer_attachment_parameter;
		static ::cpp::Function<  Int(Int,Int,Int) > &cffi_lime_gl_get_framebuffer_attachment_parameter_dyn() { return cffi_lime_gl_get_framebuffer_attachment_parameter;}
		static ::cpp::Function<   ::hx::Object *(Int) > cffi_lime_gl_get_parameter;
		static ::cpp::Function<   ::hx::Object *(Int) > &cffi_lime_gl_get_parameter_dyn() { return cffi_lime_gl_get_parameter;}
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *) > cffi_lime_gl_get_program_info_log;
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *) > &cffi_lime_gl_get_program_info_log_dyn() { return cffi_lime_gl_get_program_info_log;}
		static ::cpp::Function<  Int( ::hx::Object *,Int) > cffi_lime_gl_get_program_parameter;
		static ::cpp::Function<  Int( ::hx::Object *,Int) > &cffi_lime_gl_get_program_parameter_dyn() { return cffi_lime_gl_get_program_parameter;}
		static ::cpp::Function<  Int(Int,Int) > cffi_lime_gl_get_render_buffer_parameter;
		static ::cpp::Function<  Int(Int,Int) > &cffi_lime_gl_get_render_buffer_parameter_dyn() { return cffi_lime_gl_get_render_buffer_parameter;}
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *) > cffi_lime_gl_get_shader_info_log;
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *) > &cffi_lime_gl_get_shader_info_log_dyn() { return cffi_lime_gl_get_shader_info_log;}
		static ::cpp::Function<  Int( ::hx::Object *,Int) > cffi_lime_gl_get_shader_parameter;
		static ::cpp::Function<  Int( ::hx::Object *,Int) > &cffi_lime_gl_get_shader_parameter_dyn() { return cffi_lime_gl_get_shader_parameter;}
		static ::cpp::Function<   ::hx::Object *(Int,Int) > cffi_lime_gl_get_shader_precision_format;
		static ::cpp::Function<   ::hx::Object *(Int,Int) > &cffi_lime_gl_get_shader_precision_format_dyn() { return cffi_lime_gl_get_shader_precision_format;}
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *) > cffi_lime_gl_get_shader_source;
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *) > &cffi_lime_gl_get_shader_source_dyn() { return cffi_lime_gl_get_shader_source;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_get_supported_extensions;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_get_supported_extensions_dyn() { return cffi_lime_gl_get_supported_extensions;}
		static ::cpp::Function<  Int(Int,Int) > cffi_lime_gl_get_tex_parameter;
		static ::cpp::Function<  Int(Int,Int) > &cffi_lime_gl_get_tex_parameter_dyn() { return cffi_lime_gl_get_tex_parameter;}
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > cffi_lime_gl_get_uniform;
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *,Int) > &cffi_lime_gl_get_uniform_dyn() { return cffi_lime_gl_get_uniform;}
		static ::cpp::Function<  Int( ::hx::Object *,::String) > cffi_lime_gl_get_uniform_location;
		static ::cpp::Function<  Int( ::hx::Object *,::String) > &cffi_lime_gl_get_uniform_location_dyn() { return cffi_lime_gl_get_uniform_location;}
		static ::cpp::Function<  Int(Int,Int) > cffi_lime_gl_get_vertex_attrib;
		static ::cpp::Function<  Int(Int,Int) > &cffi_lime_gl_get_vertex_attrib_dyn() { return cffi_lime_gl_get_vertex_attrib;}
		static ::cpp::Function<  Int(Int,Int) > cffi_lime_gl_get_vertex_attrib_offset;
		static ::cpp::Function<  Int(Int,Int) > &cffi_lime_gl_get_vertex_attrib_offset_dyn() { return cffi_lime_gl_get_vertex_attrib_offset;}
		static ::cpp::Function<  void(Int,Int) > cffi_lime_gl_hint;
		static ::cpp::Function<  void(Int,Int) > &cffi_lime_gl_hint_dyn() { return cffi_lime_gl_hint;}
		static ::cpp::Function<  Bool( ::hx::Object *) > cffi_lime_gl_is_buffer;
		static ::cpp::Function<  Bool( ::hx::Object *) > &cffi_lime_gl_is_buffer_dyn() { return cffi_lime_gl_is_buffer;}
		static ::cpp::Function<  Bool(Int) > cffi_lime_gl_is_enabled;
		static ::cpp::Function<  Bool(Int) > &cffi_lime_gl_is_enabled_dyn() { return cffi_lime_gl_is_enabled;}
		static ::cpp::Function<  Bool( ::hx::Object *) > cffi_lime_gl_is_framebuffer;
		static ::cpp::Function<  Bool( ::hx::Object *) > &cffi_lime_gl_is_framebuffer_dyn() { return cffi_lime_gl_is_framebuffer;}
		static ::cpp::Function<  Bool( ::hx::Object *) > cffi_lime_gl_is_program;
		static ::cpp::Function<  Bool( ::hx::Object *) > &cffi_lime_gl_is_program_dyn() { return cffi_lime_gl_is_program;}
		static ::cpp::Function<  Bool( ::hx::Object *) > cffi_lime_gl_is_renderbuffer;
		static ::cpp::Function<  Bool( ::hx::Object *) > &cffi_lime_gl_is_renderbuffer_dyn() { return cffi_lime_gl_is_renderbuffer;}
		static ::cpp::Function<  Bool( ::hx::Object *) > cffi_lime_gl_is_shader;
		static ::cpp::Function<  Bool( ::hx::Object *) > &cffi_lime_gl_is_shader_dyn() { return cffi_lime_gl_is_shader;}
		static ::cpp::Function<  Bool( ::hx::Object *) > cffi_lime_gl_is_texture;
		static ::cpp::Function<  Bool( ::hx::Object *) > &cffi_lime_gl_is_texture_dyn() { return cffi_lime_gl_is_texture;}
		static ::cpp::Function<  void(float) > cffi_lime_gl_line_width;
		static ::cpp::Function<  void(float) > &cffi_lime_gl_line_width_dyn() { return cffi_lime_gl_line_width;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_link_program;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_link_program_dyn() { return cffi_lime_gl_link_program;}
		static ::cpp::Function<  void(Int,Int) > cffi_lime_gl_pixel_storei;
		static ::cpp::Function<  void(Int,Int) > &cffi_lime_gl_pixel_storei_dyn() { return cffi_lime_gl_pixel_storei;}
		static ::cpp::Function<  void(float,float) > cffi_lime_gl_polygon_offset;
		static ::cpp::Function<  void(float,float) > &cffi_lime_gl_polygon_offset_dyn() { return cffi_lime_gl_polygon_offset;}
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > cffi_lime_gl_read_pixels;
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > &cffi_lime_gl_read_pixels_dyn() { return cffi_lime_gl_read_pixels;}
		static ::cpp::Function<  void(Int,Int,Int,Int) > cffi_lime_gl_renderbuffer_storage;
		static ::cpp::Function<  void(Int,Int,Int,Int) > &cffi_lime_gl_renderbuffer_storage_dyn() { return cffi_lime_gl_renderbuffer_storage;}
		static ::cpp::Function<  void(float,Bool) > cffi_lime_gl_sample_coverage;
		static ::cpp::Function<  void(float,Bool) > &cffi_lime_gl_sample_coverage_dyn() { return cffi_lime_gl_sample_coverage;}
		static ::cpp::Function<  void(Int,Int,Int,Int) > cffi_lime_gl_scissor;
		static ::cpp::Function<  void(Int,Int,Int,Int) > &cffi_lime_gl_scissor_dyn() { return cffi_lime_gl_scissor;}
		static ::cpp::Function<  void( ::hx::Object *,::String) > cffi_lime_gl_shader_source;
		static ::cpp::Function<  void( ::hx::Object *,::String) > &cffi_lime_gl_shader_source_dyn() { return cffi_lime_gl_shader_source;}
		static ::cpp::Function<  void(Int,Int,Int) > cffi_lime_gl_stencil_func;
		static ::cpp::Function<  void(Int,Int,Int) > &cffi_lime_gl_stencil_func_dyn() { return cffi_lime_gl_stencil_func;}
		static ::cpp::Function<  void(Int,Int,Int,Int) > cffi_lime_gl_stencil_func_separate;
		static ::cpp::Function<  void(Int,Int,Int,Int) > &cffi_lime_gl_stencil_func_separate_dyn() { return cffi_lime_gl_stencil_func_separate;}
		static ::cpp::Function<  void(Int) > cffi_lime_gl_stencil_mask;
		static ::cpp::Function<  void(Int) > &cffi_lime_gl_stencil_mask_dyn() { return cffi_lime_gl_stencil_mask;}
		static ::cpp::Function<  void(Int,Int) > cffi_lime_gl_stencil_mask_separate;
		static ::cpp::Function<  void(Int,Int) > &cffi_lime_gl_stencil_mask_separate_dyn() { return cffi_lime_gl_stencil_mask_separate;}
		static ::cpp::Function<  void(Int,Int,Int) > cffi_lime_gl_stencil_op;
		static ::cpp::Function<  void(Int,Int,Int) > &cffi_lime_gl_stencil_op_dyn() { return cffi_lime_gl_stencil_op;}
		static ::cpp::Function<  void(Int,Int,Int,Int) > cffi_lime_gl_stencil_op_separate;
		static ::cpp::Function<  void(Int,Int,Int,Int) > &cffi_lime_gl_stencil_op_separate_dyn() { return cffi_lime_gl_stencil_op_separate;}
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > cffi_lime_gl_tex_image_2d;
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > &cffi_lime_gl_tex_image_2d_dyn() { return cffi_lime_gl_tex_image_2d;}
		static ::cpp::Function<  void(Int,Int,float) > cffi_lime_gl_tex_parameterf;
		static ::cpp::Function<  void(Int,Int,float) > &cffi_lime_gl_tex_parameterf_dyn() { return cffi_lime_gl_tex_parameterf;}
		static ::cpp::Function<  void(Int,Int,Int) > cffi_lime_gl_tex_parameteri;
		static ::cpp::Function<  void(Int,Int,Int) > &cffi_lime_gl_tex_parameteri_dyn() { return cffi_lime_gl_tex_parameteri;}
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > cffi_lime_gl_tex_sub_image_2d;
		static ::cpp::Function<  void(Int,Int,Int,Int,Int,Int,Int,Int, ::hx::Object *,Int) > &cffi_lime_gl_tex_sub_image_2d_dyn() { return cffi_lime_gl_tex_sub_image_2d;}
		static ::cpp::Function<  void(Int,float) > cffi_lime_gl_uniform1f;
		static ::cpp::Function<  void(Int,float) > &cffi_lime_gl_uniform1f_dyn() { return cffi_lime_gl_uniform1f;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_uniform1fv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_uniform1fv_dyn() { return cffi_lime_gl_uniform1fv;}
		static ::cpp::Function<  void(Int,Int) > cffi_lime_gl_uniform1i;
		static ::cpp::Function<  void(Int,Int) > &cffi_lime_gl_uniform1i_dyn() { return cffi_lime_gl_uniform1i;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_uniform1iv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_uniform1iv_dyn() { return cffi_lime_gl_uniform1iv;}
		static ::cpp::Function<  void(Int,float,float) > cffi_lime_gl_uniform2f;
		static ::cpp::Function<  void(Int,float,float) > &cffi_lime_gl_uniform2f_dyn() { return cffi_lime_gl_uniform2f;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_uniform2fv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_uniform2fv_dyn() { return cffi_lime_gl_uniform2fv;}
		static ::cpp::Function<  void(Int,Int,Int) > cffi_lime_gl_uniform2i;
		static ::cpp::Function<  void(Int,Int,Int) > &cffi_lime_gl_uniform2i_dyn() { return cffi_lime_gl_uniform2i;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_uniform2iv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_uniform2iv_dyn() { return cffi_lime_gl_uniform2iv;}
		static ::cpp::Function<  void(Int,float,float,float) > cffi_lime_gl_uniform3f;
		static ::cpp::Function<  void(Int,float,float,float) > &cffi_lime_gl_uniform3f_dyn() { return cffi_lime_gl_uniform3f;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_uniform3fv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_uniform3fv_dyn() { return cffi_lime_gl_uniform3fv;}
		static ::cpp::Function<  void(Int,Int,Int,Int) > cffi_lime_gl_uniform3i;
		static ::cpp::Function<  void(Int,Int,Int,Int) > &cffi_lime_gl_uniform3i_dyn() { return cffi_lime_gl_uniform3i;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_uniform3iv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_uniform3iv_dyn() { return cffi_lime_gl_uniform3iv;}
		static ::cpp::Function<  void(Int,float,float,float,float) > cffi_lime_gl_uniform4f;
		static ::cpp::Function<  void(Int,float,float,float,float) > &cffi_lime_gl_uniform4f_dyn() { return cffi_lime_gl_uniform4f;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_uniform4fv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_uniform4fv_dyn() { return cffi_lime_gl_uniform4fv;}
		static ::cpp::Function<  void(Int,Int,Int,Int,Int) > cffi_lime_gl_uniform4i;
		static ::cpp::Function<  void(Int,Int,Int,Int,Int) > &cffi_lime_gl_uniform4i_dyn() { return cffi_lime_gl_uniform4i;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_uniform4iv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_uniform4iv_dyn() { return cffi_lime_gl_uniform4iv;}
		static ::cpp::Function<  void(Int,Bool, ::hx::Object *,Int) > cffi_lime_gl_uniform_matrix;
		static ::cpp::Function<  void(Int,Bool, ::hx::Object *,Int) > &cffi_lime_gl_uniform_matrix_dyn() { return cffi_lime_gl_uniform_matrix;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_use_program;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_use_program_dyn() { return cffi_lime_gl_use_program;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_gl_validate_program;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_gl_validate_program_dyn() { return cffi_lime_gl_validate_program;}
		static ::cpp::Function<  ::String() > cffi_lime_gl_version;
		static ::cpp::Function<  ::String() > &cffi_lime_gl_version_dyn() { return cffi_lime_gl_version;}
		static ::cpp::Function<  void(Int,float) > cffi_lime_gl_vertex_attrib1f;
		static ::cpp::Function<  void(Int,float) > &cffi_lime_gl_vertex_attrib1f_dyn() { return cffi_lime_gl_vertex_attrib1f;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_vertex_attrib1fv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_vertex_attrib1fv_dyn() { return cffi_lime_gl_vertex_attrib1fv;}
		static ::cpp::Function<  void(Int,float,float) > cffi_lime_gl_vertex_attrib2f;
		static ::cpp::Function<  void(Int,float,float) > &cffi_lime_gl_vertex_attrib2f_dyn() { return cffi_lime_gl_vertex_attrib2f;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_vertex_attrib2fv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_vertex_attrib2fv_dyn() { return cffi_lime_gl_vertex_attrib2fv;}
		static ::cpp::Function<  void(Int,float,float,float) > cffi_lime_gl_vertex_attrib3f;
		static ::cpp::Function<  void(Int,float,float,float) > &cffi_lime_gl_vertex_attrib3f_dyn() { return cffi_lime_gl_vertex_attrib3f;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_vertex_attrib3fv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_vertex_attrib3fv_dyn() { return cffi_lime_gl_vertex_attrib3fv;}
		static ::cpp::Function<  void(Int,float,float,float,float) > cffi_lime_gl_vertex_attrib4f;
		static ::cpp::Function<  void(Int,float,float,float,float) > &cffi_lime_gl_vertex_attrib4f_dyn() { return cffi_lime_gl_vertex_attrib4f;}
		static ::cpp::Function<  void(Int, ::hx::Object *) > cffi_lime_gl_vertex_attrib4fv;
		static ::cpp::Function<  void(Int, ::hx::Object *) > &cffi_lime_gl_vertex_attrib4fv_dyn() { return cffi_lime_gl_vertex_attrib4fv;}
		static ::cpp::Function<  void(Int,Int,Int,Bool,Int,Int) > cffi_lime_gl_vertex_attrib_pointer;
		static ::cpp::Function<  void(Int,Int,Int,Bool,Int,Int) > &cffi_lime_gl_vertex_attrib_pointer_dyn() { return cffi_lime_gl_vertex_attrib_pointer;}
		static ::cpp::Function<  void(Int,Int,Int,Int) > cffi_lime_gl_viewport;
		static ::cpp::Function<  void(Int,Int,Int,Int) > &cffi_lime_gl_viewport_dyn() { return cffi_lime_gl_viewport;}
		Int DEPTH_BUFFER_BIT;
		Int STENCIL_BUFFER_BIT;
		Int COLOR_BUFFER_BIT;
		Int POINTS;
		Int LINES;
		Int LINE_LOOP;
		Int LINE_STRIP;
		Int TRIANGLES;
		Int TRIANGLE_STRIP;
		Int TRIANGLE_FAN;
		Int ZERO;
		Int ONE;
		Int SRC_COLOR;
		Int ONE_MINUS_SRC_COLOR;
		Int SRC_ALPHA;
		Int ONE_MINUS_SRC_ALPHA;
		Int DST_ALPHA;
		Int ONE_MINUS_DST_ALPHA;
		Int DST_COLOR;
		Int ONE_MINUS_DST_COLOR;
		Int SRC_ALPHA_SATURATE;
		Int FUNC_ADD;
		Int BLEND_EQUATION;
		Int BLEND_EQUATION_RGB;
		Int BLEND_EQUATION_ALPHA;
		Int FUNC_SUBTRACT;
		Int FUNC_REVERSE_SUBTRACT;
		Int BLEND_DST_RGB;
		Int BLEND_SRC_RGB;
		Int BLEND_DST_ALPHA;
		Int BLEND_SRC_ALPHA;
		Int CONSTANT_COLOR;
		Int ONE_MINUS_CONSTANT_COLOR;
		Int CONSTANT_ALPHA;
		Int ONE_MINUS_CONSTANT_ALPHA;
		Int BLEND_COLOR;
		Int ARRAY_BUFFER;
		Int ELEMENT_ARRAY_BUFFER;
		Int ARRAY_BUFFER_BINDING;
		Int ELEMENT_ARRAY_BUFFER_BINDING;
		Int STREAM_DRAW;
		Int STATIC_DRAW;
		Int DYNAMIC_DRAW;
		Int BUFFER_SIZE;
		Int BUFFER_USAGE;
		Int CURRENT_VERTEX_ATTRIB;
		Int FRONT;
		Int BACK;
		Int FRONT_AND_BACK;
		Int CULL_FACE;
		Int BLEND;
		Int DITHER;
		Int STENCIL_TEST;
		Int DEPTH_TEST;
		Int SCISSOR_TEST;
		Int POLYGON_OFFSET_FILL;
		Int SAMPLE_ALPHA_TO_COVERAGE;
		Int SAMPLE_COVERAGE;
		Int NO_ERROR;
		Int INVALID_ENUM;
		Int INVALID_VALUE;
		Int INVALID_OPERATION;
		Int OUT_OF_MEMORY;
		Int CW;
		Int CCW;
		Int LINE_WIDTH;
		Int ALIASED_POINT_SIZE_RANGE;
		Int ALIASED_LINE_WIDTH_RANGE;
		Int CULL_FACE_MODE;
		Int FRONT_FACE;
		Int DEPTH_RANGE;
		Int DEPTH_WRITEMASK;
		Int DEPTH_CLEAR_VALUE;
		Int DEPTH_FUNC;
		Int STENCIL_CLEAR_VALUE;
		Int STENCIL_FUNC;
		Int STENCIL_FAIL;
		Int STENCIL_PASS_DEPTH_FAIL;
		Int STENCIL_PASS_DEPTH_PASS;
		Int STENCIL_REF;
		Int STENCIL_VALUE_MASK;
		Int STENCIL_WRITEMASK;
		Int STENCIL_BACK_FUNC;
		Int STENCIL_BACK_FAIL;
		Int STENCIL_BACK_PASS_DEPTH_FAIL;
		Int STENCIL_BACK_PASS_DEPTH_PASS;
		Int STENCIL_BACK_REF;
		Int STENCIL_BACK_VALUE_MASK;
		Int STENCIL_BACK_WRITEMASK;
		Int VIEWPORT;
		Int SCISSOR_BOX;
		Int COLOR_CLEAR_VALUE;
		Int COLOR_WRITEMASK;
		Int UNPACK_ALIGNMENT;
		Int PACK_ALIGNMENT;
		Int MAX_TEXTURE_SIZE;
		Int MAX_VIEWPORT_DIMS;
		Int SUBPIXEL_BITS;
		Int RED_BITS;
		Int GREEN_BITS;
		Int BLUE_BITS;
		Int ALPHA_BITS;
		Int DEPTH_BITS;
		Int STENCIL_BITS;
		Int POLYGON_OFFSET_UNITS;
		Int POLYGON_OFFSET_FACTOR;
		Int TEXTURE_BINDING_2D;
		Int SAMPLE_BUFFERS;
		Int SAMPLES;
		Int SAMPLE_COVERAGE_VALUE;
		Int SAMPLE_COVERAGE_INVERT;
		Int COMPRESSED_TEXTURE_FORMATS;
		Int DONT_CARE;
		Int FASTEST;
		Int NICEST;
		Int GENERATE_MIPMAP_HINT;
		Int BYTE;
		Int UNSIGNED_BYTE;
		Int SHORT;
		Int UNSIGNED_SHORT;
		Int INT;
		Int UNSIGNED_INT;
		Int FLOAT;
		Int DEPTH_COMPONENT;
		Int ALPHA;
		Int RGB;
		Int RGBA;
		Int BGR_EXT;
		Int BGRA_EXT;
		Int LUMINANCE;
		Int LUMINANCE_ALPHA;
		Int UNSIGNED_SHORT_4_4_4_4;
		Int UNSIGNED_SHORT_5_5_5_1;
		Int UNSIGNED_SHORT_5_6_5;
		Int FRAGMENT_SHADER;
		Int VERTEX_SHADER;
		Int MAX_VERTEX_ATTRIBS;
		Int MAX_VERTEX_UNIFORM_VECTORS;
		Int MAX_VARYING_VECTORS;
		Int MAX_COMBINED_TEXTURE_IMAGE_UNITS;
		Int MAX_VERTEX_TEXTURE_IMAGE_UNITS;
		Int MAX_TEXTURE_IMAGE_UNITS;
		Int MAX_FRAGMENT_UNIFORM_VECTORS;
		Int SHADER_TYPE;
		Int DELETE_STATUS;
		Int LINK_STATUS;
		Int VALIDATE_STATUS;
		Int ATTACHED_SHADERS;
		Int ACTIVE_UNIFORMS;
		Int ACTIVE_ATTRIBUTES;
		Int SHADING_LANGUAGE_VERSION;
		Int CURRENT_PROGRAM;
		Int NEVER;
		Int LESS;
		Int EQUAL;
		Int LEQUAL;
		Int GREATER;
		Int NOTEQUAL;
		Int GEQUAL;
		Int ALWAYS;
		Int KEEP;
		Int REPLACE;
		Int INCR;
		Int DECR;
		Int INVERT;
		Int INCR_WRAP;
		Int DECR_WRAP;
		Int VENDOR;
		Int RENDERER;
		Int VERSION;
		Int NEAREST;
		Int LINEAR;
		Int NEAREST_MIPMAP_NEAREST;
		Int LINEAR_MIPMAP_NEAREST;
		Int NEAREST_MIPMAP_LINEAR;
		Int LINEAR_MIPMAP_LINEAR;
		Int TEXTURE_MAG_FILTER;
		Int TEXTURE_MIN_FILTER;
		Int TEXTURE_WRAP_S;
		Int TEXTURE_WRAP_T;
		Int TEXTURE_2D;
		Int TEXTURE;
		Int TEXTURE_CUBE_MAP;
		Int TEXTURE_BINDING_CUBE_MAP;
		Int TEXTURE_CUBE_MAP_POSITIVE_X;
		Int TEXTURE_CUBE_MAP_NEGATIVE_X;
		Int TEXTURE_CUBE_MAP_POSITIVE_Y;
		Int TEXTURE_CUBE_MAP_NEGATIVE_Y;
		Int TEXTURE_CUBE_MAP_POSITIVE_Z;
		Int TEXTURE_CUBE_MAP_NEGATIVE_Z;
		Int MAX_CUBE_MAP_TEXTURE_SIZE;
		Int TEXTURE0;
		Int TEXTURE1;
		Int TEXTURE2;
		Int TEXTURE3;
		Int TEXTURE4;
		Int TEXTURE5;
		Int TEXTURE6;
		Int TEXTURE7;
		Int TEXTURE8;
		Int TEXTURE9;
		Int TEXTURE10;
		Int TEXTURE11;
		Int TEXTURE12;
		Int TEXTURE13;
		Int TEXTURE14;
		Int TEXTURE15;
		Int TEXTURE16;
		Int TEXTURE17;
		Int TEXTURE18;
		Int TEXTURE19;
		Int TEXTURE20;
		Int TEXTURE21;
		Int TEXTURE22;
		Int TEXTURE23;
		Int TEXTURE24;
		Int TEXTURE25;
		Int TEXTURE26;
		Int TEXTURE27;
		Int TEXTURE28;
		Int TEXTURE29;
		Int TEXTURE30;
		Int TEXTURE31;
		Int ACTIVE_TEXTURE;
		Int REPEAT;
		Int CLAMP_TO_EDGE;
		Int MIRRORED_REPEAT;
		Int FLOAT_VEC2;
		Int FLOAT_VEC3;
		Int FLOAT_VEC4;
		Int INT_VEC2;
		Int INT_VEC3;
		Int INT_VEC4;
		Int BOOL;
		Int BOOL_VEC2;
		Int BOOL_VEC3;
		Int BOOL_VEC4;
		Int FLOAT_MAT2;
		Int FLOAT_MAT3;
		Int FLOAT_MAT4;
		Int SAMPLER_2D;
		Int SAMPLER_CUBE;
		Int VERTEX_ATTRIB_ARRAY_ENABLED;
		Int VERTEX_ATTRIB_ARRAY_SIZE;
		Int VERTEX_ATTRIB_ARRAY_STRIDE;
		Int VERTEX_ATTRIB_ARRAY_TYPE;
		Int VERTEX_ATTRIB_ARRAY_NORMALIZED;
		Int VERTEX_ATTRIB_ARRAY_POINTER;
		Int VERTEX_ATTRIB_ARRAY_BUFFER_BINDING;
		Int VERTEX_PROGRAM_POINT_SIZE;
		Int POINT_SPRITE;
		Int COMPILE_STATUS;
		Int LOW_FLOAT;
		Int MEDIUM_FLOAT;
		Int HIGH_FLOAT;
		Int LOW_INT;
		Int MEDIUM_INT;
		Int HIGH_INT;
		Int FRAMEBUFFER;
		Int RENDERBUFFER;
		Int RGBA4;
		Int RGB5_A1;
		Int RGB565;
		Int DEPTH_COMPONENT16;
		Int STENCIL_INDEX;
		Int STENCIL_INDEX8;
		Int DEPTH_STENCIL;
		Int RENDERBUFFER_WIDTH;
		Int RENDERBUFFER_HEIGHT;
		Int RENDERBUFFER_INTERNAL_FORMAT;
		Int RENDERBUFFER_RED_SIZE;
		Int RENDERBUFFER_GREEN_SIZE;
		Int RENDERBUFFER_BLUE_SIZE;
		Int RENDERBUFFER_ALPHA_SIZE;
		Int RENDERBUFFER_DEPTH_SIZE;
		Int RENDERBUFFER_STENCIL_SIZE;
		Int FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;
		Int FRAMEBUFFER_ATTACHMENT_OBJECT_NAME;
		Int FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL;
		Int FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE;
		Int COLOR_ATTACHMENT0;
		Int DEPTH_ATTACHMENT;
		Int STENCIL_ATTACHMENT;
		Int DEPTH_STENCIL_ATTACHMENT;
		Int NONE;
		Int FRAMEBUFFER_COMPLETE;
		Int FRAMEBUFFER_INCOMPLETE_ATTACHMENT;
		Int FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT;
		Int FRAMEBUFFER_INCOMPLETE_DIMENSIONS;
		Int FRAMEBUFFER_UNSUPPORTED;
		Int FRAMEBUFFER_BINDING;
		Int RENDERBUFFER_BINDING;
		Int MAX_RENDERBUFFER_SIZE;
		Int INVALID_FRAMEBUFFER_OPERATION;
		Int UNPACK_FLIP_Y_WEBGL;
		Int UNPACK_PREMULTIPLY_ALPHA_WEBGL;
		Int CONTEXT_LOST_WEBGL;
		Int UNPACK_COLORSPACE_CONVERSION_WEBGL;
		Int BROWSER_DEFAULT_WEBGL;
		Int version;
		 ::lime::graphics::opengl::GLProgram _hx___currentProgram;
		void activeTexture(Int texture);
		::Dynamic activeTexture_dyn();

		void attachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader);
		::Dynamic attachShader_dyn();

		void bindAttribLocation( ::lime::graphics::opengl::GLProgram program,Int index,::String name);
		::Dynamic bindAttribLocation_dyn();

		void bindBuffer(Int target, ::lime::graphics::opengl::GLBuffer buffer);
		::Dynamic bindBuffer_dyn();

		void bindFramebuffer(Int target, ::lime::graphics::opengl::GLFramebuffer framebuffer);
		::Dynamic bindFramebuffer_dyn();

		void bindRenderbuffer(Int target, ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		::Dynamic bindRenderbuffer_dyn();

		void bindTexture(Int target, ::lime::graphics::opengl::GLTexture texture);
		::Dynamic bindTexture_dyn();

		void blendColor(Float red,Float green,Float blue,Float alpha);
		::Dynamic blendColor_dyn();

		void blendEquation(Int mode);
		::Dynamic blendEquation_dyn();

		void blendEquationSeparate(Int modeRGB,Int modeAlpha);
		::Dynamic blendEquationSeparate_dyn();

		void blendFunc(Int sfactor,Int dfactor);
		::Dynamic blendFunc_dyn();

		void blendFuncSeparate(Int srcRGB,Int dstRGB,Int srcAlpha,Int dstAlpha);
		::Dynamic blendFuncSeparate_dyn();

		void bufferData(Int target, ::lime::utils::ArrayBufferView data,Int usage);
		::Dynamic bufferData_dyn();

		void bufferSubData(Int target,Int offset, ::lime::utils::ArrayBufferView data);
		::Dynamic bufferSubData_dyn();

		Int checkFramebufferStatus(Int target);
		::Dynamic checkFramebufferStatus_dyn();

		void clear(Int mask);
		::Dynamic clear_dyn();

		void clearColor(Float red,Float green,Float blue,Float alpha);
		::Dynamic clearColor_dyn();

		void clearDepth(Float depth);
		::Dynamic clearDepth_dyn();

		void clearStencil(Int s);
		::Dynamic clearStencil_dyn();

		void colorMask(Bool red,Bool green,Bool blue,Bool alpha);
		::Dynamic colorMask_dyn();

		void compileShader( ::lime::graphics::opengl::GLShader shader);
		::Dynamic compileShader_dyn();

		void compressedTexImage2D(Int target,Int level,Int internalformat,Int width,Int height,Int border, ::lime::utils::ArrayBufferView data);
		::Dynamic compressedTexImage2D_dyn();

		void compressedTexSubImage2D(Int target,Int level,Int xoffset,Int yoffset,Int width,Int height,Int format, ::lime::utils::ArrayBufferView data);
		::Dynamic compressedTexSubImage2D_dyn();

		void copyTexImage2D(Int target,Int level,Int internalformat,Int x,Int y,Int width,Int height,Int border);
		::Dynamic copyTexImage2D_dyn();

		void copyTexSubImage2D(Int target,Int level,Int xoffset,Int yoffset,Int x,Int y,Int width,Int height);
		::Dynamic copyTexSubImage2D_dyn();

		 ::lime::graphics::opengl::GLBuffer createBuffer();
		::Dynamic createBuffer_dyn();

		 ::lime::graphics::opengl::GLFramebuffer createFramebuffer();
		::Dynamic createFramebuffer_dyn();

		 ::lime::graphics::opengl::GLProgram createProgram();
		::Dynamic createProgram_dyn();

		 ::lime::graphics::opengl::GLRenderbuffer createRenderbuffer();
		::Dynamic createRenderbuffer_dyn();

		 ::lime::graphics::opengl::GLShader createShader(Int type);
		::Dynamic createShader_dyn();

		 ::lime::graphics::opengl::GLTexture createTexture();
		::Dynamic createTexture_dyn();

		void cullFace(Int mode);
		::Dynamic cullFace_dyn();

		void deleteBuffer( ::lime::graphics::opengl::GLBuffer buffer);
		::Dynamic deleteBuffer_dyn();

		void deleteFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer);
		::Dynamic deleteFramebuffer_dyn();

		void deleteProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic deleteProgram_dyn();

		void deleteRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		::Dynamic deleteRenderbuffer_dyn();

		void deleteShader( ::lime::graphics::opengl::GLShader shader);
		::Dynamic deleteShader_dyn();

		void deleteTexture( ::lime::graphics::opengl::GLTexture texture);
		::Dynamic deleteTexture_dyn();

		void depthFunc(Int func);
		::Dynamic depthFunc_dyn();

		void depthMask(Bool flag);
		::Dynamic depthMask_dyn();

		void depthRange(Float zNear,Float zFar);
		::Dynamic depthRange_dyn();

		void detachShader( ::lime::graphics::opengl::GLProgram program, ::lime::graphics::opengl::GLShader shader);
		::Dynamic detachShader_dyn();

		void disable(Int cap);
		::Dynamic disable_dyn();

		void disableVertexAttribArray(Int index);
		::Dynamic disableVertexAttribArray_dyn();

		void drawArrays(Int mode,Int first,Int count);
		::Dynamic drawArrays_dyn();

		void drawElements(Int mode,Int count,Int type,Int offset);
		::Dynamic drawElements_dyn();

		void enable(Int cap);
		::Dynamic enable_dyn();

		void enableVertexAttribArray(Int index);
		::Dynamic enableVertexAttribArray_dyn();

		void finish();
		::Dynamic finish_dyn();

		void flush();
		::Dynamic flush_dyn();

		void framebufferRenderbuffer(Int target,Int attachment,Int renderbuffertarget, ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		::Dynamic framebufferRenderbuffer_dyn();

		void framebufferTexture2D(Int target,Int attachment,Int textarget, ::lime::graphics::opengl::GLTexture texture,Int level);
		::Dynamic framebufferTexture2D_dyn();

		void frontFace(Int mode);
		::Dynamic frontFace_dyn();

		void generateMipmap(Int target);
		::Dynamic generateMipmap_dyn();

		 ::Dynamic getActiveAttrib( ::lime::graphics::opengl::GLProgram program,Int index);
		::Dynamic getActiveAttrib_dyn();

		 ::Dynamic getActiveUniform( ::lime::graphics::opengl::GLProgram program,Int index);
		::Dynamic getActiveUniform_dyn();

		::Array< ::Dynamic> getAttachedShaders( ::lime::graphics::opengl::GLProgram program);
		::Dynamic getAttachedShaders_dyn();

		Int getAttribLocation( ::lime::graphics::opengl::GLProgram program,::String name);
		::Dynamic getAttribLocation_dyn();

		Int getBufferParameter(Int target,Int pname);
		::Dynamic getBufferParameter_dyn();

		 ::Dynamic getContextAttributes();
		::Dynamic getContextAttributes_dyn();

		Int getError();
		::Dynamic getError_dyn();

		 ::Dynamic getExtension(::String name);
		::Dynamic getExtension_dyn();

		Int getFramebufferAttachmentParameter(Int target,Int attachment,Int pname);
		::Dynamic getFramebufferAttachmentParameter_dyn();

		 ::Dynamic getParameter(Int pname);
		::Dynamic getParameter_dyn();

		::String getProgramInfoLog( ::lime::graphics::opengl::GLProgram program);
		::Dynamic getProgramInfoLog_dyn();

		Int getProgramParameter( ::lime::graphics::opengl::GLProgram program,Int pname);
		::Dynamic getProgramParameter_dyn();

		Int getRenderbufferParameter(Int target,Int pname);
		::Dynamic getRenderbufferParameter_dyn();

		::String getShaderInfoLog( ::lime::graphics::opengl::GLShader shader);
		::Dynamic getShaderInfoLog_dyn();

		Int getShaderParameter( ::lime::graphics::opengl::GLShader shader,Int pname);
		::Dynamic getShaderParameter_dyn();

		 ::Dynamic getShaderPrecisionFormat(Int shadertype,Int precisiontype);
		::Dynamic getShaderPrecisionFormat_dyn();

		::String getShaderSource( ::lime::graphics::opengl::GLShader shader);
		::Dynamic getShaderSource_dyn();

		::Array< ::String > getSupportedExtensions();
		::Dynamic getSupportedExtensions_dyn();

		Int getTexParameter(Int target,Int pname);
		::Dynamic getTexParameter_dyn();

		 ::Dynamic getUniform( ::lime::graphics::opengl::GLProgram program,Int location);
		::Dynamic getUniform_dyn();

		Int getUniformLocation( ::lime::graphics::opengl::GLProgram program,::String name);
		::Dynamic getUniformLocation_dyn();

		Int getVertexAttrib(Int index,Int pname);
		::Dynamic getVertexAttrib_dyn();

		Int getVertexAttribOffset(Int index,Int pname);
		::Dynamic getVertexAttribOffset_dyn();

		void hint(Int target,Int mode);
		::Dynamic hint_dyn();

		Bool isBuffer( ::lime::graphics::opengl::GLBuffer buffer);
		::Dynamic isBuffer_dyn();

		Bool isContextLost();
		::Dynamic isContextLost_dyn();

		Bool isEnabled(Int cap);
		::Dynamic isEnabled_dyn();

		Bool isFramebuffer( ::lime::graphics::opengl::GLFramebuffer framebuffer);
		::Dynamic isFramebuffer_dyn();

		Bool isProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic isProgram_dyn();

		Bool isRenderbuffer( ::lime::graphics::opengl::GLRenderbuffer renderbuffer);
		::Dynamic isRenderbuffer_dyn();

		Bool isShader( ::lime::graphics::opengl::GLShader shader);
		::Dynamic isShader_dyn();

		Bool isTexture( ::lime::graphics::opengl::GLTexture texture);
		::Dynamic isTexture_dyn();

		void lineWidth(Float width);
		::Dynamic lineWidth_dyn();

		void linkProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic linkProgram_dyn();

		void pixelStorei(Int pname,Int param);
		::Dynamic pixelStorei_dyn();

		void polygonOffset(Float factor,Float units);
		::Dynamic polygonOffset_dyn();

		void readPixels(Int x,Int y,Int width,Int height,Int format,Int type, ::lime::utils::ArrayBufferView pixels);
		::Dynamic readPixels_dyn();

		void renderbufferStorage(Int target,Int internalformat,Int width,Int height);
		::Dynamic renderbufferStorage_dyn();

		void sampleCoverage(Float value,Bool invert);
		::Dynamic sampleCoverage_dyn();

		void scissor(Int x,Int y,Int width,Int height);
		::Dynamic scissor_dyn();

		void shaderSource( ::lime::graphics::opengl::GLShader shader,::String source);
		::Dynamic shaderSource_dyn();

		void stencilFunc(Int func,Int ref,Int mask);
		::Dynamic stencilFunc_dyn();

		void stencilFuncSeparate(Int face,Int func,Int ref,Int mask);
		::Dynamic stencilFuncSeparate_dyn();

		void stencilMask(Int mask);
		::Dynamic stencilMask_dyn();

		void stencilMaskSeparate(Int face,Int mask);
		::Dynamic stencilMaskSeparate_dyn();

		void stencilOp(Int fail,Int zfail,Int zpass);
		::Dynamic stencilOp_dyn();

		void stencilOpSeparate(Int face,Int fail,Int zfail,Int zpass);
		::Dynamic stencilOpSeparate_dyn();

		void texImage2D(Int target,Int level,Int internalformat,Int width,Int height,Int border,Int format,Int type, ::lime::utils::ArrayBufferView pixels);
		::Dynamic texImage2D_dyn();

		void texParameterf(Int target,Int pname,Float param);
		::Dynamic texParameterf_dyn();

		void texParameteri(Int target,Int pname,Int param);
		::Dynamic texParameteri_dyn();

		void texSubImage2D(Int target,Int level,Int xoffset,Int yoffset,Int width,Int height,Int format,Int type, ::lime::utils::ArrayBufferView pixels);
		::Dynamic texSubImage2D_dyn();

		void uniform1f(Int location,Float x);
		::Dynamic uniform1f_dyn();

		void uniform1fv(Int location, ::lime::utils::ArrayBufferView x);
		::Dynamic uniform1fv_dyn();

		void uniform1i(Int location,Int x);
		::Dynamic uniform1i_dyn();

		void uniform1iv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform1iv_dyn();

		void uniform2f(Int location,Float x,Float y);
		::Dynamic uniform2f_dyn();

		void uniform2fv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform2fv_dyn();

		void uniform2i(Int location,Int x,Int y);
		::Dynamic uniform2i_dyn();

		void uniform2iv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform2iv_dyn();

		void uniform3f(Int location,Float x,Float y,Float z);
		::Dynamic uniform3f_dyn();

		void uniform3fv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform3fv_dyn();

		void uniform3i(Int location,Int x,Int y,Int z);
		::Dynamic uniform3i_dyn();

		void uniform3iv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform3iv_dyn();

		void uniform4f(Int location,Float x,Float y,Float z,Float w);
		::Dynamic uniform4f_dyn();

		void uniform4fv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform4fv_dyn();

		void uniform4i(Int location,Int x,Int y,Int z,Int w);
		::Dynamic uniform4i_dyn();

		void uniform4iv(Int location, ::lime::utils::ArrayBufferView v);
		::Dynamic uniform4iv_dyn();

		void uniformMatrix2fv(Int location,Bool transpose, ::lime::utils::ArrayBufferView v);
		::Dynamic uniformMatrix2fv_dyn();

		void uniformMatrix3fv(Int location,Bool transpose, ::lime::utils::ArrayBufferView v);
		::Dynamic uniformMatrix3fv_dyn();

		void uniformMatrix4fv(Int location,Bool transpose, ::lime::utils::ArrayBufferView v);
		::Dynamic uniformMatrix4fv_dyn();

		void useProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic useProgram_dyn();

		void validateProgram( ::lime::graphics::opengl::GLProgram program);
		::Dynamic validateProgram_dyn();

		void vertexAttrib1f(Int indx,Float x);
		::Dynamic vertexAttrib1f_dyn();

		void vertexAttrib1fv(Int indx, ::lime::utils::ArrayBufferView values);
		::Dynamic vertexAttrib1fv_dyn();

		void vertexAttrib2f(Int indx,Float x,Float y);
		::Dynamic vertexAttrib2f_dyn();

		void vertexAttrib2fv(Int indx, ::lime::utils::ArrayBufferView values);
		::Dynamic vertexAttrib2fv_dyn();

		void vertexAttrib3f(Int indx,Float x,Float y,Float z);
		::Dynamic vertexAttrib3f_dyn();

		void vertexAttrib3fv(Int indx, ::lime::utils::ArrayBufferView values);
		::Dynamic vertexAttrib3fv_dyn();

		void vertexAttrib4f(Int indx,Float x,Float y,Float z,Float w);
		::Dynamic vertexAttrib4f_dyn();

		void vertexAttrib4fv(Int indx, ::lime::utils::ArrayBufferView values);
		::Dynamic vertexAttrib4fv_dyn();

		void vertexAttribPointer(Int indx,Int size,Int type,Bool normalized,Int stride,Int offset);
		::Dynamic vertexAttribPointer_dyn();

		void viewport(Int x,Int y,Int width,Int height);
		::Dynamic viewport_dyn();

		Int get_version();
		::Dynamic get_version_dyn();

};

} // end namespace lime
} // end namespace _backend
} // end namespace native

#endif /* INCLUDED_lime__backend_native_NativeGLRenderContext */ 
