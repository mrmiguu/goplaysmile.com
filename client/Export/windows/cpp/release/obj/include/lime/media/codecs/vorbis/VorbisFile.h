// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_media_codecs_vorbis_VorbisFile
#define INCLUDED_lime_media_codecs_vorbis_VorbisFile

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#include <cpp/Int64.h>
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS4(lime,media,codecs,vorbis,VorbisComment)
HX_DECLARE_CLASS4(lime,media,codecs,vorbis,VorbisFile)
HX_DECLARE_CLASS4(lime,media,codecs,vorbis,VorbisInfo)

namespace lime{
namespace media{
namespace codecs{
namespace vorbis{


class HXCPP_CLASS_ATTRIBUTES VorbisFile_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef VorbisFile_obj OBJ_;
		VorbisFile_obj();

	public:
		void __construct( ::Dynamic handle);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.media.codecs.vorbis.VorbisFile")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.media.codecs.vorbis.VorbisFile"); }
		static hx::ObjectPtr< VorbisFile_obj > __new( ::Dynamic handle);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~VorbisFile_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("VorbisFile","\x8f","\xa7","\x81","\xd4"); }

		static  ::lime::media::codecs::vorbis::VorbisFile fromBytes( ::haxe::io::Bytes bytes);
		static ::Dynamic fromBytes_dyn();

		static  ::lime::media::codecs::vorbis::VorbisFile fromFile(::String path);
		static ::Dynamic fromFile_dyn();

		Int bitstream;
		 ::Dynamic handle;
		Int bitrate(hx::Null< Int >  bitstream);
		::Dynamic bitrate_dyn();

		Int bitrateInstant();
		::Dynamic bitrateInstant_dyn();

		void clear();
		::Dynamic clear_dyn();

		 ::lime::media::codecs::vorbis::VorbisComment comment(hx::Null< Int >  bitstream);
		::Dynamic comment_dyn();

		Int crosslap( ::lime::media::codecs::vorbis::VorbisFile other);
		::Dynamic crosslap_dyn();

		 ::lime::media::codecs::vorbis::VorbisInfo info(hx::Null< Int >  bitstream);
		::Dynamic info_dyn();

		Int pcmSeek( ::cpp::Int64Struct pos);
		::Dynamic pcmSeek_dyn();

		Int pcmSeekLap( ::cpp::Int64Struct pos);
		::Dynamic pcmSeekLap_dyn();

		Int pcmSeekPage( ::cpp::Int64Struct pos);
		::Dynamic pcmSeekPage_dyn();

		Int pcmSeekPageLap( ::cpp::Int64Struct pos);
		::Dynamic pcmSeekPageLap_dyn();

		 ::cpp::Int64Struct pcmTell();
		::Dynamic pcmTell_dyn();

		 ::cpp::Int64Struct pcmTotal(hx::Null< Int >  bitstream);
		::Dynamic pcmTotal_dyn();

		Int rawSeek( ::cpp::Int64Struct pos);
		::Dynamic rawSeek_dyn();

		Int rawSeekLap( ::cpp::Int64Struct pos);
		::Dynamic rawSeekLap_dyn();

		 ::cpp::Int64Struct rawTell();
		::Dynamic rawTell_dyn();

		 ::cpp::Int64Struct rawTotal(hx::Null< Int >  bitstream);
		::Dynamic rawTotal_dyn();

		Int read( ::haxe::io::Bytes buffer,Int position,hx::Null< Int >  length,hx::Null< Bool >  bigEndianPacking,hx::Null< Int >  wordSize,hx::Null< Bool >  _hx_signed);
		::Dynamic read_dyn();

		Int readFloat( ::haxe::io::Bytes pcmChannels,Int samples);
		::Dynamic readFloat_dyn();

		Bool seekable();
		::Dynamic seekable_dyn();

		Int serialNumber(hx::Null< Int >  bitstream);
		::Dynamic serialNumber_dyn();

		Int streams();
		::Dynamic streams_dyn();

		Int timeSeek(Float s);
		::Dynamic timeSeek_dyn();

		Int timeSeekLap(Float s);
		::Dynamic timeSeekLap_dyn();

		Int timeSeekPage(Float s);
		::Dynamic timeSeekPage_dyn();

		Int timeSeekPageLap(Float s);
		::Dynamic timeSeekPageLap_dyn();

		Float timeTell();
		::Dynamic timeTell_dyn();

		Float timeTotal(hx::Null< Int >  bitstream);
		::Dynamic timeTotal_dyn();

};

} // end namespace lime
} // end namespace media
} // end namespace codecs
} // end namespace vorbis

#endif /* INCLUDED_lime_media_codecs_vorbis_VorbisFile */ 
