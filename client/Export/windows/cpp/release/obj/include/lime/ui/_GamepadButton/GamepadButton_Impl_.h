// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_ui__GamepadButton_GamepadButton_Impl_
#define INCLUDED_lime_ui__GamepadButton_GamepadButton_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,ui,_GamepadButton,GamepadButton_Impl_)

namespace lime{
namespace ui{
namespace _GamepadButton{


class HXCPP_CLASS_ATTRIBUTES GamepadButton_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GamepadButton_Impl__obj OBJ_;
		GamepadButton_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.ui._GamepadButton.GamepadButton_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.ui._GamepadButton.GamepadButton_Impl_"); }
		static hx::ObjectPtr< GamepadButton_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GamepadButton_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("GamepadButton_Impl_","\x33","\x32","\x07","\x6f"); }

		static void __boot();
		static Int A;
		static Int B;
		static Int X;
		static Int Y;
		static Int BACK;
		static Int GUIDE;
		static Int START;
		static Int LEFT_STICK;
		static Int RIGHT_STICK;
		static Int LEFT_SHOULDER;
		static Int RIGHT_SHOULDER;
		static Int DPAD_UP;
		static Int DPAD_DOWN;
		static Int DPAD_LEFT;
		static Int DPAD_RIGHT;
		static ::String toString(Int this1);
		static ::Dynamic toString_dyn();

};

} // end namespace lime
} // end namespace ui
} // end namespace _GamepadButton

#endif /* INCLUDED_lime_ui__GamepadButton_GamepadButton_Impl_ */ 
