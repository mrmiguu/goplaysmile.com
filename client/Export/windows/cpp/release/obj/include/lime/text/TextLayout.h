// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_text_TextLayout
#define INCLUDED_lime_text_TextLayout

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,text,Font)
HX_DECLARE_CLASS2(lime,text,GlyphPosition)
HX_DECLARE_CLASS2(lime,text,TextLayout)

namespace lime{
namespace text{


class HXCPP_CLASS_ATTRIBUTES TextLayout_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TextLayout_obj OBJ_;
		TextLayout_obj();

	public:
		void __construct(::String __o_text, ::lime::text::Font font,hx::Null< Int >  __o_size,hx::Null< Int >  __o_direction,::String __o_script,::String __o_language);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime.text.TextLayout")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime.text.TextLayout"); }
		static hx::ObjectPtr< TextLayout_obj > __new(::String __o_text, ::lime::text::Font font,hx::Null< Int >  __o_size,hx::Null< Int >  __o_direction,::String __o_script,::String __o_language);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TextLayout_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("TextLayout","\x57","\x33","\x5a","\x86"); }

		static void __boot();
		static  ::Dynamic lime_text_layout_create(Int direction,::String script,::String language);
		static ::Dynamic lime_text_layout_create_dyn();

		static  ::Dynamic lime_text_layout_position( ::Dynamic textHandle, ::Dynamic fontHandle,Int size,::String textString, ::Dynamic data);
		static ::Dynamic lime_text_layout_position_dyn();

		static void lime_text_layout_set_direction( ::Dynamic textHandle,Int direction);
		static ::Dynamic lime_text_layout_set_direction_dyn();

		static void lime_text_layout_set_language( ::Dynamic textHandle,::String language);
		static ::Dynamic lime_text_layout_set_language_dyn();

		static void lime_text_layout_set_script( ::Dynamic textHandle,::String script);
		static ::Dynamic lime_text_layout_set_script_dyn();

		static ::cpp::Function<   ::hx::Object *(Int,::String,::String) > cffi_lime_text_layout_create;
		static ::cpp::Function<   ::hx::Object *(Int,::String,::String) > &cffi_lime_text_layout_create_dyn() { return cffi_lime_text_layout_create;}
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *, ::hx::Object *,Int,::String, ::hx::Object *) > cffi_lime_text_layout_position;
		static ::cpp::Function<   ::hx::Object *( ::hx::Object *, ::hx::Object *,Int,::String, ::hx::Object *) > &cffi_lime_text_layout_position_dyn() { return cffi_lime_text_layout_position;}
		static ::cpp::Function<  void( ::hx::Object *,Int) > cffi_lime_text_layout_set_direction;
		static ::cpp::Function<  void( ::hx::Object *,Int) > &cffi_lime_text_layout_set_direction_dyn() { return cffi_lime_text_layout_set_direction;}
		static ::cpp::Function<  void( ::hx::Object *,::String) > cffi_lime_text_layout_set_language;
		static ::cpp::Function<  void( ::hx::Object *,::String) > &cffi_lime_text_layout_set_language_dyn() { return cffi_lime_text_layout_set_language;}
		static ::cpp::Function<  void( ::hx::Object *,::String) > cffi_lime_text_layout_set_script;
		static ::cpp::Function<  void( ::hx::Object *,::String) > &cffi_lime_text_layout_set_script_dyn() { return cffi_lime_text_layout_set_script;}
		 ::lime::text::Font font;
		::Array< Int > glyphs;
		::Array< ::Dynamic> positions;
		Int size;
		::String text;
		Bool _hx___dirty;
		 ::haxe::io::Bytes _hx___buffer;
		Int _hx___direction;
		 ::Dynamic _hx___handle;
		::String _hx___language;
		::String _hx___script;
		void _hx___position();
		::Dynamic _hx___position_dyn();

		::Array< ::Dynamic> get_positions();
		::Dynamic get_positions_dyn();

		Int get_direction();
		::Dynamic get_direction_dyn();

		Int set_direction(Int value);
		::Dynamic set_direction_dyn();

		 ::lime::text::Font set_font( ::lime::text::Font value);
		::Dynamic set_font_dyn();

		::Array< Int > get_glyphs();
		::Dynamic get_glyphs_dyn();

		::String get_language();
		::Dynamic get_language_dyn();

		::String set_language(::String value);
		::Dynamic set_language_dyn();

		::String get_script();
		::Dynamic get_script_dyn();

		::String set_script(::String value);
		::Dynamic set_script_dyn();

		Int set_size(Int value);
		::Dynamic set_size_dyn();

		::String set_text(::String value);
		::Dynamic set_text_dyn();

};

} // end namespace lime
} // end namespace text

#endif /* INCLUDED_lime_text_TextLayout */ 
