// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_ui__KeyCode_KeyCode_Impl_
#define INCLUDED_lime_ui__KeyCode_KeyCode_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,ui,_KeyCode,KeyCode_Impl_)

namespace lime{
namespace ui{
namespace _KeyCode{


class HXCPP_CLASS_ATTRIBUTES KeyCode_Impl__obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef KeyCode_Impl__obj OBJ_;
		KeyCode_Impl__obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.ui._KeyCode.KeyCode_Impl_")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.ui._KeyCode.KeyCode_Impl_"); }
		static hx::ObjectPtr< KeyCode_Impl__obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~KeyCode_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("KeyCode_Impl_","\xec","\x47","\x6b","\x1f"); }

		static void __boot();
		static Int UNKNOWN;
		static Int BACKSPACE;
		static Int TAB;
		static Int RETURN;
		static Int ESCAPE;
		static Int SPACE;
		static Int EXCLAMATION;
		static Int QUOTE;
		static Int HASH;
		static Int DOLLAR;
		static Int PERCENT;
		static Int AMPERSAND;
		static Int SINGLE_QUOTE;
		static Int LEFT_PARENTHESIS;
		static Int RIGHT_PARENTHESIS;
		static Int ASTERISK;
		static Int PLUS;
		static Int COMMA;
		static Int MINUS;
		static Int PERIOD;
		static Int SLASH;
		static Int NUMBER_0;
		static Int NUMBER_1;
		static Int NUMBER_2;
		static Int NUMBER_3;
		static Int NUMBER_4;
		static Int NUMBER_5;
		static Int NUMBER_6;
		static Int NUMBER_7;
		static Int NUMBER_8;
		static Int NUMBER_9;
		static Int COLON;
		static Int SEMICOLON;
		static Int LESS_THAN;
		static Int EQUALS;
		static Int GREATER_THAN;
		static Int QUESTION;
		static Int AT;
		static Int LEFT_BRACKET;
		static Int BACKSLASH;
		static Int RIGHT_BRACKET;
		static Int CARET;
		static Int UNDERSCORE;
		static Int GRAVE;
		static Int A;
		static Int B;
		static Int C;
		static Int D;
		static Int E;
		static Int F;
		static Int G;
		static Int H;
		static Int I;
		static Int J;
		static Int K;
		static Int L;
		static Int M;
		static Int N;
		static Int O;
		static Int P;
		static Int Q;
		static Int R;
		static Int S;
		static Int T;
		static Int U;
		static Int V;
		static Int W;
		static Int X;
		static Int Y;
		static Int Z;
		static Int DELETE;
		static Int CAPS_LOCK;
		static Int F1;
		static Int F2;
		static Int F3;
		static Int F4;
		static Int F5;
		static Int F6;
		static Int F7;
		static Int F8;
		static Int F9;
		static Int F10;
		static Int F11;
		static Int F12;
		static Int PRINT_SCREEN;
		static Int SCROLL_LOCK;
		static Int PAUSE;
		static Int INSERT;
		static Int HOME;
		static Int PAGE_UP;
		static Int END;
		static Int PAGE_DOWN;
		static Int RIGHT;
		static Int LEFT;
		static Int DOWN;
		static Int UP;
		static Int NUM_LOCK;
		static Int NUMPAD_DIVIDE;
		static Int NUMPAD_MULTIPLY;
		static Int NUMPAD_MINUS;
		static Int NUMPAD_PLUS;
		static Int NUMPAD_ENTER;
		static Int NUMPAD_1;
		static Int NUMPAD_2;
		static Int NUMPAD_3;
		static Int NUMPAD_4;
		static Int NUMPAD_5;
		static Int NUMPAD_6;
		static Int NUMPAD_7;
		static Int NUMPAD_8;
		static Int NUMPAD_9;
		static Int NUMPAD_0;
		static Int NUMPAD_PERIOD;
		static Int APPLICATION;
		static Int POWER;
		static Int NUMPAD_EQUALS;
		static Int F13;
		static Int F14;
		static Int F15;
		static Int F16;
		static Int F17;
		static Int F18;
		static Int F19;
		static Int F20;
		static Int F21;
		static Int F22;
		static Int F23;
		static Int F24;
		static Int EXECUTE;
		static Int HELP;
		static Int MENU;
		static Int SELECT;
		static Int STOP;
		static Int AGAIN;
		static Int UNDO;
		static Int CUT;
		static Int COPY;
		static Int PASTE;
		static Int FIND;
		static Int MUTE;
		static Int VOLUME_UP;
		static Int VOLUME_DOWN;
		static Int NUMPAD_COMMA;
		static Int ALT_ERASE;
		static Int SYSTEM_REQUEST;
		static Int CANCEL;
		static Int CLEAR;
		static Int PRIOR;
		static Int RETURN2;
		static Int SEPARATOR;
		static Int OUT;
		static Int OPER;
		static Int CLEAR_AGAIN;
		static Int CRSEL;
		static Int EXSEL;
		static Int NUMPAD_00;
		static Int NUMPAD_000;
		static Int THOUSAND_SEPARATOR;
		static Int DECIMAL_SEPARATOR;
		static Int CURRENCY_UNIT;
		static Int CURRENCY_SUBUNIT;
		static Int NUMPAD_LEFT_PARENTHESIS;
		static Int NUMPAD_RIGHT_PARENTHESIS;
		static Int NUMPAD_LEFT_BRACE;
		static Int NUMPAD_RIGHT_BRACE;
		static Int NUMPAD_TAB;
		static Int NUMPAD_BACKSPACE;
		static Int NUMPAD_A;
		static Int NUMPAD_B;
		static Int NUMPAD_C;
		static Int NUMPAD_D;
		static Int NUMPAD_E;
		static Int NUMPAD_F;
		static Int NUMPAD_XOR;
		static Int NUMPAD_POWER;
		static Int NUMPAD_PERCENT;
		static Int NUMPAD_LESS_THAN;
		static Int NUMPAD_GREATER_THAN;
		static Int NUMPAD_AMPERSAND;
		static Int NUMPAD_DOUBLE_AMPERSAND;
		static Int NUMPAD_VERTICAL_BAR;
		static Int NUMPAD_DOUBLE_VERTICAL_BAR;
		static Int NUMPAD_COLON;
		static Int NUMPAD_HASH;
		static Int NUMPAD_SPACE;
		static Int NUMPAD_AT;
		static Int NUMPAD_EXCLAMATION;
		static Int NUMPAD_MEM_STORE;
		static Int NUMPAD_MEM_RECALL;
		static Int NUMPAD_MEM_CLEAR;
		static Int NUMPAD_MEM_ADD;
		static Int NUMPAD_MEM_SUBTRACT;
		static Int NUMPAD_MEM_MULTIPLY;
		static Int NUMPAD_MEM_DIVIDE;
		static Int NUMPAD_PLUS_MINUS;
		static Int NUMPAD_CLEAR;
		static Int NUMPAD_CLEAR_ENTRY;
		static Int NUMPAD_BINARY;
		static Int NUMPAD_OCTAL;
		static Int NUMPAD_DECIMAL;
		static Int NUMPAD_HEXADECIMAL;
		static Int LEFT_CTRL;
		static Int LEFT_SHIFT;
		static Int LEFT_ALT;
		static Int LEFT_META;
		static Int RIGHT_CTRL;
		static Int RIGHT_SHIFT;
		static Int RIGHT_ALT;
		static Int RIGHT_META;
		static Int MODE;
		static Int AUDIO_NEXT;
		static Int AUDIO_PREVIOUS;
		static Int AUDIO_STOP;
		static Int AUDIO_PLAY;
		static Int AUDIO_MUTE;
		static Int MEDIA_SELECT;
		static Int WWW;
		static Int MAIL;
		static Int CALCULATOR;
		static Int COMPUTER;
		static Int APP_CONTROL_SEARCH;
		static Int APP_CONTROL_HOME;
		static Int APP_CONTROL_BACK;
		static Int APP_CONTROL_FORWARD;
		static Int APP_CONTROL_STOP;
		static Int APP_CONTROL_REFRESH;
		static Int APP_CONTROL_BOOKMARKS;
		static Int BRIGHTNESS_DOWN;
		static Int BRIGHTNESS_UP;
		static Int DISPLAY_SWITCH;
		static Int BACKLIGHT_TOGGLE;
		static Int BACKLIGHT_DOWN;
		static Int BACKLIGHT_UP;
		static Int EJECT;
		static Int SLEEP;
		static Bool gt(Int a,Int b);
		static ::Dynamic gt_dyn();

		static Bool gte(Int a,Int b);
		static ::Dynamic gte_dyn();

		static Bool lt(Int a,Int b);
		static ::Dynamic lt_dyn();

		static Bool lte(Int a,Int b);
		static ::Dynamic lte_dyn();

		static Int plus(Int a,Int b);
		static ::Dynamic plus_dyn();

};

} // end namespace lime
} // end namespace ui
} // end namespace _KeyCode

#endif /* INCLUDED_lime_ui__KeyCode_KeyCode_Impl_ */ 
