// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_media_openal_ALC
#define INCLUDED_lime_media_openal_ALC

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,media,openal,ALC)

namespace lime{
namespace media{
namespace openal{


class HXCPP_CLASS_ATTRIBUTES ALC_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ALC_obj OBJ_;
		ALC_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.media.openal.ALC")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.media.openal.ALC"); }
		static hx::ObjectPtr< ALC_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ALC_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("ALC","\xf8","\x94","\x31","\x00"); }

		static void __boot();
		static Int FALSE;
		static Int TRUE;
		static Int FREQUENCY;
		static Int REFRESH;
		static Int SYNC;
		static Int MONO_SOURCES;
		static Int STEREO_SOURCES;
		static Int NO_ERROR;
		static Int INVALID_DEVICE;
		static Int INVALID_CONTEXT;
		static Int INVALID_ENUM;
		static Int INVALID_VALUE;
		static Int OUT_OF_MEMORY;
		static Int ATTRIBUTES_SIZE;
		static Int ALL_ATTRIBUTES;
		static Int DEFAULT_DEVICE_SPECIFIER;
		static Int DEVICE_SPECIFIER;
		static Int EXTENSIONS;
		static Int ENUMERATE_ALL_EXT;
		static Int DEFAULT_ALL_DEVICES_SPECIFIER;
		static Int ALL_DEVICES_SPECIFIER;
		static Bool closeDevice( ::Dynamic device);
		static ::Dynamic closeDevice_dyn();

		static  ::Dynamic createContext( ::Dynamic device,::Array< Int > attrlist);
		static ::Dynamic createContext_dyn();

		static void destroyContext( ::Dynamic context);
		static ::Dynamic destroyContext_dyn();

		static  ::Dynamic getContextsDevice( ::Dynamic context);
		static ::Dynamic getContextsDevice_dyn();

		static  ::Dynamic getCurrentContext();
		static ::Dynamic getCurrentContext_dyn();

		static Int getError( ::Dynamic device);
		static ::Dynamic getError_dyn();

		static ::String getErrorString( ::Dynamic device);
		static ::Dynamic getErrorString_dyn();

		static ::Array< Int > getIntegerv( ::Dynamic device,Int param,Int size);
		static ::Dynamic getIntegerv_dyn();

		static ::String getString( ::Dynamic device,Int param);
		static ::Dynamic getString_dyn();

		static Bool makeContextCurrent( ::Dynamic context);
		static ::Dynamic makeContextCurrent_dyn();

		static  ::Dynamic openDevice(::String deviceName);
		static ::Dynamic openDevice_dyn();

		static void pauseDevice( ::Dynamic device);
		static ::Dynamic pauseDevice_dyn();

		static void processContext( ::Dynamic context);
		static ::Dynamic processContext_dyn();

		static void resumeDevice( ::Dynamic device);
		static ::Dynamic resumeDevice_dyn();

		static void suspendContext( ::Dynamic context);
		static ::Dynamic suspendContext_dyn();

};

} // end namespace lime
} // end namespace media
} // end namespace openal

#endif /* INCLUDED_lime_media_openal_ALC */ 
