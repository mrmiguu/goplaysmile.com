// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_net_curl_CURLEasy
#define INCLUDED_lime_net_curl_CURLEasy

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(lime,net,curl,CURLEasy)

namespace lime{
namespace net{
namespace curl{


class HXCPP_CLASS_ATTRIBUTES CURLEasy_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef CURLEasy_obj OBJ_;
		CURLEasy_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.net.curl.CURLEasy")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.net.curl.CURLEasy"); }
		static hx::ObjectPtr< CURLEasy_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~CURLEasy_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("CURLEasy","\x0e","\xb1","\x71","\x80"); }

		static void __boot();
		static void cleanup(Float handle);
		static ::Dynamic cleanup_dyn();

		static Float duphandle(Float handle);
		static ::Dynamic duphandle_dyn();

		static ::String escape(Float handle,::String url,Int length);
		static ::Dynamic escape_dyn();

		static  ::Dynamic getinfo(Float handle,Int info);
		static ::Dynamic getinfo_dyn();

		static Float init();
		static ::Dynamic init_dyn();

		static Int pause(Float handle,Int bitMask);
		static ::Dynamic pause_dyn();

		static Int perform(Float handle);
		static ::Dynamic perform_dyn();

		static void reset(Float handle);
		static ::Dynamic reset_dyn();

		static Int setopt(Float handle,Int option, ::Dynamic parameter);
		static ::Dynamic setopt_dyn();

		static ::String strerror(Int code);
		static ::Dynamic strerror_dyn();

		static ::String unescape(Float handle,::String url,Int inLength,Int outLength);
		static ::Dynamic unescape_dyn();

		static Int _hx___writeCallback( ::Dynamic callback, ::Dynamic output,Int size,Int nmemb);
		static ::Dynamic _hx___writeCallback_dyn();

		static void lime_curl_easy_cleanup(Float handle);
		static ::Dynamic lime_curl_easy_cleanup_dyn();

		static Float lime_curl_easy_duphandle(Float handle);
		static ::Dynamic lime_curl_easy_duphandle_dyn();

		static  ::Dynamic lime_curl_easy_escape(Float curl,::String url,Int length);
		static ::Dynamic lime_curl_easy_escape_dyn();

		static  ::Dynamic lime_curl_easy_getinfo(Float curl,Int info);
		static ::Dynamic lime_curl_easy_getinfo_dyn();

		static Float lime_curl_easy_init();
		static ::Dynamic lime_curl_easy_init_dyn();

		static Int lime_curl_easy_pause(Float handle,Int bitmask);
		static ::Dynamic lime_curl_easy_pause_dyn();

		static Int lime_curl_easy_perform(Float easy_handle);
		static ::Dynamic lime_curl_easy_perform_dyn();

		static Int lime_curl_easy_recv(Float curl, ::Dynamic buffer,Int buflen,Int n);
		static ::Dynamic lime_curl_easy_recv_dyn();

		static void lime_curl_easy_reset(Float curl);
		static ::Dynamic lime_curl_easy_reset_dyn();

		static Int lime_curl_easy_send(Float curl, ::Dynamic buffer,Int buflen,Int n);
		static ::Dynamic lime_curl_easy_send_dyn();

		static Int lime_curl_easy_setopt(Float handle,Int option, ::Dynamic parameter);
		static ::Dynamic lime_curl_easy_setopt_dyn();

		static  ::Dynamic lime_curl_easy_strerror(Int errornum);
		static ::Dynamic lime_curl_easy_strerror_dyn();

		static  ::Dynamic lime_curl_easy_unescape(Float curl,::String url,Int inlength,Int outlength);
		static ::Dynamic lime_curl_easy_unescape_dyn();

		static ::cpp::Function<  void(Float) > cffi_lime_curl_easy_cleanup;
		static ::cpp::Function<  void(Float) > &cffi_lime_curl_easy_cleanup_dyn() { return cffi_lime_curl_easy_cleanup;}
		static ::cpp::Function<  Float(Float) > cffi_lime_curl_easy_duphandle;
		static ::cpp::Function<  Float(Float) > &cffi_lime_curl_easy_duphandle_dyn() { return cffi_lime_curl_easy_duphandle;}
		static ::cpp::Function<   ::hx::Object *(Float,::String,Int) > cffi_lime_curl_easy_escape;
		static ::cpp::Function<   ::hx::Object *(Float,::String,Int) > &cffi_lime_curl_easy_escape_dyn() { return cffi_lime_curl_easy_escape;}
		static ::cpp::Function<   ::hx::Object *(Float,Int) > cffi_lime_curl_easy_getinfo;
		static ::cpp::Function<   ::hx::Object *(Float,Int) > &cffi_lime_curl_easy_getinfo_dyn() { return cffi_lime_curl_easy_getinfo;}
		static ::cpp::Function<  Float() > cffi_lime_curl_easy_init;
		static ::cpp::Function<  Float() > &cffi_lime_curl_easy_init_dyn() { return cffi_lime_curl_easy_init;}
		static ::cpp::Function<  Int(Float,Int) > cffi_lime_curl_easy_pause;
		static ::cpp::Function<  Int(Float,Int) > &cffi_lime_curl_easy_pause_dyn() { return cffi_lime_curl_easy_pause;}
		static ::cpp::Function<  Int(Float) > cffi_lime_curl_easy_perform;
		static ::cpp::Function<  Int(Float) > &cffi_lime_curl_easy_perform_dyn() { return cffi_lime_curl_easy_perform;}
		static ::cpp::Function<  Int(Float, ::hx::Object *,Int,Int) > cffi_lime_curl_easy_recv;
		static ::cpp::Function<  Int(Float, ::hx::Object *,Int,Int) > &cffi_lime_curl_easy_recv_dyn() { return cffi_lime_curl_easy_recv;}
		static ::cpp::Function<  void(Float) > cffi_lime_curl_easy_reset;
		static ::cpp::Function<  void(Float) > &cffi_lime_curl_easy_reset_dyn() { return cffi_lime_curl_easy_reset;}
		static ::cpp::Function<  Int(Float, ::hx::Object *,Int,Int) > cffi_lime_curl_easy_send;
		static ::cpp::Function<  Int(Float, ::hx::Object *,Int,Int) > &cffi_lime_curl_easy_send_dyn() { return cffi_lime_curl_easy_send;}
		static ::cpp::Function<  Int(Float,Int, ::hx::Object *) > cffi_lime_curl_easy_setopt;
		static ::cpp::Function<  Int(Float,Int, ::hx::Object *) > &cffi_lime_curl_easy_setopt_dyn() { return cffi_lime_curl_easy_setopt;}
		static ::cpp::Function<   ::hx::Object *(Int) > cffi_lime_curl_easy_strerror;
		static ::cpp::Function<   ::hx::Object *(Int) > &cffi_lime_curl_easy_strerror_dyn() { return cffi_lime_curl_easy_strerror;}
		static ::cpp::Function<   ::hx::Object *(Float,::String,Int,Int) > cffi_lime_curl_easy_unescape;
		static ::cpp::Function<   ::hx::Object *(Float,::String,Int,Int) > &cffi_lime_curl_easy_unescape_dyn() { return cffi_lime_curl_easy_unescape;}
};

} // end namespace lime
} // end namespace net
} // end namespace curl

#endif /* INCLUDED_lime_net_curl_CURLEasy */ 
