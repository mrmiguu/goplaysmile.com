// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_system_DisplayMode
#define INCLUDED_lime_system_DisplayMode

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lime,_hx_system,DisplayMode)

namespace lime{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES DisplayMode_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef DisplayMode_obj OBJ_;
		DisplayMode_obj();

	public:
		void __construct(Int width,Int height,Int refreshRate,Int pixelFormat);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.system.DisplayMode")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.system.DisplayMode"); }
		static hx::ObjectPtr< DisplayMode_obj > __new(Int width,Int height,Int refreshRate,Int pixelFormat);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~DisplayMode_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("DisplayMode","\xa5","\x0a","\x86","\x14"); }

		Int height;
		Int pixelFormat;
		Int refreshRate;
		Int width;
};

} // end namespace lime
} // end namespace system

#endif /* INCLUDED_lime_system_DisplayMode */ 
