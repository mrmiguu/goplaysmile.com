// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime_graphics_utils_ImageDataUtil
#define INCLUDED_lime_graphics_utils_ImageDataUtil

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(lime,graphics,Image)
HX_DECLARE_CLASS2(lime,graphics,ImageChannel)
HX_DECLARE_CLASS3(lime,graphics,utils,ImageDataUtil)
HX_DECLARE_CLASS2(lime,math,Rectangle)
HX_DECLARE_CLASS2(lime,math,Vector2)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)

namespace lime{
namespace graphics{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES ImageDataUtil_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef ImageDataUtil_obj OBJ_;
		ImageDataUtil_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="lime.graphics.utils.ImageDataUtil")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"lime.graphics.utils.ImageDataUtil"); }
		static hx::ObjectPtr< ImageDataUtil_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~ImageDataUtil_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("ImageDataUtil","\xa7","\xb5","\xb4","\xb4"); }

		static void __boot();
		static void colorTransform( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::lime::utils::ArrayBufferView colorMatrix);
		static ::Dynamic colorTransform_dyn();

		static void copyChannel( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::hx::EnumBase sourceChannel,::hx::EnumBase destChannel);
		static ::Dynamic copyChannel_dyn();

		static void copyPixels( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint, ::lime::graphics::Image alphaImage, ::lime::math::Vector2 alphaPoint,hx::Null< Bool >  mergeAlpha);
		static ::Dynamic copyPixels_dyn();

		static void fillRect( ::lime::graphics::Image image, ::lime::math::Rectangle rect,Int color,Int format);
		static ::Dynamic fillRect_dyn();

		static void floodFill( ::lime::graphics::Image image,Int x,Int y,Int color,Int format);
		static ::Dynamic floodFill_dyn();

		static  ::lime::math::Rectangle getColorBoundsRect( ::lime::graphics::Image image,Int mask,Int color,hx::Null< Bool >  findColor,Int format);
		static ::Dynamic getColorBoundsRect_dyn();

		static Int getPixel( ::lime::graphics::Image image,Int x,Int y,Int format);
		static ::Dynamic getPixel_dyn();

		static Int getPixel32( ::lime::graphics::Image image,Int x,Int y,Int format);
		static ::Dynamic getPixel32_dyn();

		static  ::haxe::io::Bytes getPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect,Int format);
		static ::Dynamic getPixels_dyn();

		static void merge( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,Int redMultiplier,Int greenMultiplier,Int blueMultiplier,Int alphaMultiplier);
		static ::Dynamic merge_dyn();

		static void multiplyAlpha( ::lime::graphics::Image image);
		static ::Dynamic multiplyAlpha_dyn();

		static void resize( ::lime::graphics::Image image,Int newWidth,Int newHeight);
		static ::Dynamic resize_dyn();

		static void resizeBuffer( ::lime::graphics::Image image,Int newWidth,Int newHeight);
		static ::Dynamic resizeBuffer_dyn();

		static void setFormat( ::lime::graphics::Image image,Int format);
		static ::Dynamic setFormat_dyn();

		static void setPixel( ::lime::graphics::Image image,Int x,Int y,Int color,Int format);
		static ::Dynamic setPixel_dyn();

		static void setPixel32( ::lime::graphics::Image image,Int x,Int y,Int color,Int format);
		static ::Dynamic setPixel32_dyn();

		static void setPixels( ::lime::graphics::Image image, ::lime::math::Rectangle rect, ::haxe::io::Bytes bytes,Int format);
		static ::Dynamic setPixels_dyn();

		static Int threshold( ::lime::graphics::Image image, ::lime::graphics::Image sourceImage, ::lime::math::Rectangle sourceRect, ::lime::math::Vector2 destPoint,::String operation,Int threshold,Int color,Int mask,Bool copySource,Int format);
		static ::Dynamic threshold_dyn();

		static void unmultiplyAlpha( ::lime::graphics::Image image);
		static ::Dynamic unmultiplyAlpha_dyn();

		static Int _hx___pixelCompare(Int n1,Int n2);
		static ::Dynamic _hx___pixelCompare_dyn();

		static void lime_image_data_util_color_transform( ::Dynamic image, ::Dynamic rect, ::Dynamic colorMatrix);
		static ::Dynamic lime_image_data_util_color_transform_dyn();

		static void lime_image_data_util_copy_channel( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,Int srcChannel,Int destChannel);
		static ::Dynamic lime_image_data_util_copy_channel_dyn();

		static void lime_image_data_util_copy_pixels( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint, ::Dynamic alphaImage, ::Dynamic alphaPoint,Bool mergeAlpha);
		static ::Dynamic lime_image_data_util_copy_pixels_dyn();

		static void lime_image_data_util_fill_rect( ::Dynamic image, ::Dynamic rect,Int rg,Int ba);
		static ::Dynamic lime_image_data_util_fill_rect_dyn();

		static void lime_image_data_util_flood_fill( ::Dynamic image,Int x,Int y,Int rg,Int ba);
		static ::Dynamic lime_image_data_util_flood_fill_dyn();

		static void lime_image_data_util_get_pixels( ::Dynamic image, ::Dynamic rect,Int format, ::Dynamic bytes);
		static ::Dynamic lime_image_data_util_get_pixels_dyn();

		static void lime_image_data_util_merge( ::Dynamic image, ::Dynamic sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,Int redMultiplier,Int greenMultiplier,Int blueMultiplier,Int alphaMultiplier);
		static ::Dynamic lime_image_data_util_merge_dyn();

		static void lime_image_data_util_multiply_alpha( ::Dynamic image);
		static ::Dynamic lime_image_data_util_multiply_alpha_dyn();

		static void lime_image_data_util_resize( ::Dynamic image, ::Dynamic buffer,Int width,Int height);
		static ::Dynamic lime_image_data_util_resize_dyn();

		static void lime_image_data_util_set_format( ::Dynamic image,Int format);
		static ::Dynamic lime_image_data_util_set_format_dyn();

		static void lime_image_data_util_set_pixels( ::Dynamic image, ::Dynamic rect, ::Dynamic bytes,Int format);
		static ::Dynamic lime_image_data_util_set_pixels_dyn();

		static Int lime_image_data_util_threshold( ::Dynamic image, ::lime::graphics::Image sourceImage, ::Dynamic sourceRect, ::Dynamic destPoint,Int operation,Int thresholdRG,Int thresholdBA,Int colorRG,Int colorBA,Int maskRG,Int maskBA,Bool copySource);
		static ::Dynamic lime_image_data_util_threshold_dyn();

		static void lime_image_data_util_unmultiply_alpha( ::Dynamic image);
		static ::Dynamic lime_image_data_util_unmultiply_alpha_dyn();

		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *) > cffi_lime_image_data_util_color_transform;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *) > &cffi_lime_image_data_util_color_transform_dyn() { return cffi_lime_image_data_util_color_transform;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int) > cffi_lime_image_data_util_copy_channel;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int) > &cffi_lime_image_data_util_copy_channel_dyn() { return cffi_lime_image_data_util_copy_channel;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Bool) > cffi_lime_image_data_util_copy_pixels;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Bool) > &cffi_lime_image_data_util_copy_pixels_dyn() { return cffi_lime_image_data_util_copy_pixels;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int,Int) > cffi_lime_image_data_util_fill_rect;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int,Int) > &cffi_lime_image_data_util_fill_rect_dyn() { return cffi_lime_image_data_util_fill_rect;}
		static ::cpp::Function<  void( ::hx::Object *,Int,Int,Int,Int) > cffi_lime_image_data_util_flood_fill;
		static ::cpp::Function<  void( ::hx::Object *,Int,Int,Int,Int) > &cffi_lime_image_data_util_flood_fill_dyn() { return cffi_lime_image_data_util_flood_fill;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int, ::hx::Object *) > cffi_lime_image_data_util_get_pixels;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int, ::hx::Object *) > &cffi_lime_image_data_util_get_pixels_dyn() { return cffi_lime_image_data_util_get_pixels;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int,Int,Int) > cffi_lime_image_data_util_merge;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int,Int,Int) > &cffi_lime_image_data_util_merge_dyn() { return cffi_lime_image_data_util_merge;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_image_data_util_multiply_alpha;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_image_data_util_multiply_alpha_dyn() { return cffi_lime_image_data_util_multiply_alpha;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int,Int) > cffi_lime_image_data_util_resize;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *,Int,Int) > &cffi_lime_image_data_util_resize_dyn() { return cffi_lime_image_data_util_resize;}
		static ::cpp::Function<  void( ::hx::Object *,Int) > cffi_lime_image_data_util_set_format;
		static ::cpp::Function<  void( ::hx::Object *,Int) > &cffi_lime_image_data_util_set_format_dyn() { return cffi_lime_image_data_util_set_format;}
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *,Int) > cffi_lime_image_data_util_set_pixels;
		static ::cpp::Function<  void( ::hx::Object *, ::hx::Object *, ::hx::Object *,Int) > &cffi_lime_image_data_util_set_pixels_dyn() { return cffi_lime_image_data_util_set_pixels;}
		static ::cpp::Function<  Int( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int,Int,Int,Int,Int,Int,Bool) > cffi_lime_image_data_util_threshold;
		static ::cpp::Function<  Int( ::hx::Object *, ::hx::Object *, ::hx::Object *, ::hx::Object *,Int,Int,Int,Int,Int,Int,Int,Bool) > &cffi_lime_image_data_util_threshold_dyn() { return cffi_lime_image_data_util_threshold;}
		static ::cpp::Function<  void( ::hx::Object *) > cffi_lime_image_data_util_unmultiply_alpha;
		static ::cpp::Function<  void( ::hx::Object *) > &cffi_lime_image_data_util_unmultiply_alpha_dyn() { return cffi_lime_image_data_util_unmultiply_alpha;}
};

} // end namespace lime
} // end namespace graphics
} // end namespace utils

#endif /* INCLUDED_lime_graphics_utils_ImageDataUtil */ 
