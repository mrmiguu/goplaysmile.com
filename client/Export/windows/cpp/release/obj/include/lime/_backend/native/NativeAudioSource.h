// Generated by Haxe 3.3.0
#ifndef INCLUDED_lime__backend_native_NativeAudioSource
#define INCLUDED_lime__backend_native_NativeAudioSource

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,Timer)
HX_DECLARE_CLASS3(lime,_backend,native,NativeAudioSource)
HX_DECLARE_CLASS2(lime,audio,AudioSource)
HX_DECLARE_CLASS2(lime,math,Vector4)

namespace lime{
namespace _backend{
namespace native{


class HXCPP_CLASS_ATTRIBUTES NativeAudioSource_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef NativeAudioSource_obj OBJ_;
		NativeAudioSource_obj();

	public:
		void __construct( ::lime::audio::AudioSource parent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="lime._backend.native.NativeAudioSource")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"lime._backend.native.NativeAudioSource"); }
		static hx::ObjectPtr< NativeAudioSource_obj > __new( ::lime::audio::AudioSource parent);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~NativeAudioSource_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("NativeAudioSource","\xda","\xb9","\xf9","\xb6"); }

		Bool completed;
		 ::Dynamic handle;
		 ::Dynamic length;
		Int loops;
		 ::lime::audio::AudioSource parent;
		Bool playing;
		 ::lime::math::Vector4 position;
		 ::haxe::Timer timer;
		void dispose();
		::Dynamic dispose_dyn();

		void init();
		::Dynamic init_dyn();

		void play();
		::Dynamic play_dyn();

		void pause();
		::Dynamic pause_dyn();

		void stop();
		::Dynamic stop_dyn();

		void timer_onRun();
		::Dynamic timer_onRun_dyn();

		Int getCurrentTime();
		::Dynamic getCurrentTime_dyn();

		Int setCurrentTime(Int value);
		::Dynamic setCurrentTime_dyn();

		Float getGain();
		::Dynamic getGain_dyn();

		Float setGain(Float value);
		::Dynamic setGain_dyn();

		Int getLength();
		::Dynamic getLength_dyn();

		Int setLength(Int value);
		::Dynamic setLength_dyn();

		Int getLoops();
		::Dynamic getLoops_dyn();

		Int setLoops(Int value);
		::Dynamic setLoops_dyn();

		 ::lime::math::Vector4 getPosition();
		::Dynamic getPosition_dyn();

		 ::lime::math::Vector4 setPosition( ::lime::math::Vector4 value);
		::Dynamic setPosition_dyn();

};

} // end namespace lime
} // end namespace _backend
} // end namespace native

#endif /* INCLUDED_lime__backend_native_NativeAudioSource */ 
