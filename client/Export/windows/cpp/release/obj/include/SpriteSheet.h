// Generated by Haxe 3.4.0
#ifndef INCLUDED_SpriteSheet
#define INCLUDED_SpriteSheet

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_Animatible
#include <Animatible.h>
#endif
HX_DECLARE_CLASS0(Animatible)
HX_DECLARE_CLASS0(SpriteSheet)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,display,Tile)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)



class HXCPP_CLASS_ATTRIBUTES SpriteSheet_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef SpriteSheet_obj OBJ_;
		SpriteSheet_obj();

	public:
		enum { _hx_ClassId = 0x45bc2e56 };

		void __construct(::String file,int frames,int states,Float delay);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="SpriteSheet")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"SpriteSheet"); }
		static hx::ObjectPtr< SpriteSheet_obj > __new(::String file,int frames,int states,Float delay);
		static hx::ObjectPtr< SpriteSheet_obj > __alloc(hx::Ctx *_hx_ctx,::String file,int frames,int states,Float delay);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SpriteSheet_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("SpriteSheet","\x3a","\x5c","\xf5","\x96"); }

		int frames;
		int states;
		int state;
		bool animating;
		Float future;
		Float delay;
		int frame;
		int lastState;
		::Array< ::Dynamic> tiles;
		virtual void begin();
		::Dynamic begin_dyn();

		void during();
		::Dynamic during_dyn();

		virtual void end();
		::Dynamic end_dyn();

		void transition();
		::Dynamic transition_dyn();

};


#endif /* INCLUDED_SpriteSheet */ 
