// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLTilemap
#define INCLUDED_openfl__internal_renderer_opengl_GLTilemap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)
HX_DECLARE_CLASS3(openfl,_internal,renderer,RenderSession)
HX_DECLARE_CLASS4(openfl,_internal,renderer,opengl,GLTilemap)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,Tile)
HX_DECLARE_CLASS2(openfl,display,Tilemap)
HX_DECLARE_CLASS2(openfl,display,Tileset)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{


class HXCPP_CLASS_ATTRIBUTES GLTilemap_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GLTilemap_obj OBJ_;
		GLTilemap_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="openfl._internal.renderer.opengl.GLTilemap")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"openfl._internal.renderer.opengl.GLTilemap"); }
		static hx::ObjectPtr< GLTilemap_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GLTilemap_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		::String __ToString() const { return HX_HCSTRING("GLTilemap","\x89","\x18","\xce","\x8e"); }

		static void __boot();
		static  ::haxe::ds::IntMap _hx___skippedTiles;
		static void render( ::openfl::display::Tilemap tilemap, ::openfl::_internal::renderer::RenderSession renderSession);
		static ::Dynamic render_dyn();

		static void _hx___skipTile( ::openfl::display::Tile tile,Int i,Int tileOffset, ::lime::utils::ArrayBufferView bufferData);
		static ::Dynamic _hx___skipTile_dyn();

		static void _hx___updateTileAlpha( ::openfl::display::Tile tile,Float worldAlpha,Int tileOffset, ::lime::utils::ArrayBufferView bufferData);
		static ::Dynamic _hx___updateTileAlpha_dyn();

		static void _hx___updateTileUV( ::openfl::display::Tile tile, ::openfl::display::Tileset tileset,Int tileOffset, ::lime::utils::ArrayBufferView bufferData);
		static ::Dynamic _hx___updateTileUV_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl

#endif /* INCLUDED_openfl__internal_renderer_opengl_GLTilemap */ 
