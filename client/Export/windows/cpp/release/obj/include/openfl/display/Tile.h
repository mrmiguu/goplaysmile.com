// Generated by Haxe 3.4.0
#ifndef INCLUDED_openfl_display_Tile
#define INCLUDED_openfl_display_Tile

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(openfl,display,Tile)
HX_DECLARE_CLASS2(openfl,display,Tileset)
HX_DECLARE_CLASS2(openfl,geom,Matrix)

namespace openfl{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Tile_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Tile_obj OBJ_;
		Tile_obj();

	public:
		enum { _hx_ClassId = 0x555b129c };

		void __construct(hx::Null< int >  __o_id,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_originX,hx::Null< Float >  __o_originY);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.display.Tile")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.display.Tile"); }
		static hx::ObjectPtr< Tile_obj > __new(hx::Null< int >  __o_id,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_originX,hx::Null< Float >  __o_originY);
		static hx::ObjectPtr< Tile_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o_id,hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,hx::Null< Float >  __o_scaleX,hx::Null< Float >  __o_scaleY,hx::Null< Float >  __o_rotation,hx::Null< Float >  __o_originX,hx::Null< Float >  __o_originY);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Tile_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Tile","\x4e","\xf7","\xd5","\x37"); }

		Float alpha;
		 ::Dynamic data;
		int id;
		 ::openfl::geom::Matrix matrix;
		Float originX;
		Float originY;
		 ::openfl::display::Tileset tileset;
		bool visible;
		bool _hx___alphaDirty;
		 ::Dynamic _hx___rotation;
		Float _hx___rotationCosine;
		Float _hx___rotationSine;
		 ::Dynamic _hx___scaleX;
		 ::Dynamic _hx___scaleY;
		bool _hx___sourceDirty;
		::Array< Float > _hx___transform;
		bool _hx___transformDirty;
		 ::openfl::display::Tile clone();
		::Dynamic clone_dyn();

		Float set_alpha(Float value);
		::Dynamic set_alpha_dyn();

		int set_id(int value);
		::Dynamic set_id_dyn();

		 ::openfl::geom::Matrix set_matrix( ::openfl::geom::Matrix value);
		::Dynamic set_matrix_dyn();

		Float set_originX(Float value);
		::Dynamic set_originX_dyn();

		Float set_originY(Float value);
		::Dynamic set_originY_dyn();

		Float get_rotation();
		::Dynamic get_rotation_dyn();

		Float set_rotation(Float value);
		::Dynamic set_rotation_dyn();

		Float get_scaleX();
		::Dynamic get_scaleX_dyn();

		Float set_scaleX(Float value);
		::Dynamic set_scaleX_dyn();

		Float get_scaleY();
		::Dynamic get_scaleY_dyn();

		Float set_scaleY(Float value);
		::Dynamic set_scaleY_dyn();

		 ::openfl::display::Tileset set_tileset( ::openfl::display::Tileset value);
		::Dynamic set_tileset_dyn();

		Float get_x();
		::Dynamic get_x_dyn();

		Float get_y();
		::Dynamic get_y_dyn();

		Float set_x(Float value);
		::Dynamic set_x_dyn();

		Float set_y(Float value);
		::Dynamic set_y_dyn();

};

} // end namespace openfl
} // end namespace display

#endif /* INCLUDED_openfl_display_Tile */ 
