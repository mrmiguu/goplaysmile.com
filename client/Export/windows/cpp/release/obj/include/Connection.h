// Generated by Haxe 3.3.0
#ifndef INCLUDED_Connection
#define INCLUDED_Connection

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_IButton
#include <IButton.h>
#endif
HX_DECLARE_CLASS0(Connection)
HX_DECLARE_CLASS0(Globals)
HX_DECLARE_CLASS0(IButton)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(sys,net,Socket)



class HXCPP_CLASS_ATTRIBUTES Connection_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef Connection_obj OBJ_;
		Connection_obj();

	public:
		void __construct( ::Globals g,::String host,Int port,::String user,::String pass);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Connection")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Connection"); }
		static hx::ObjectPtr< Connection_obj > __new( ::Globals g,::String host,Int port,::String user,::String pass);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Connection_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_HCSTRING("Connection","\x3e","\xa4","\xc3","\xeb"); }

		 ::Globals g;
		 ::sys::net::Socket server;
		::Array< ::Dynamic> readers;
		::Array< ::Dynamic> writers;
		::Array< ::String > outbox;
		void pushIn();
		::Dynamic pushIn_dyn();

		void popOut();
		::Dynamic popOut_dyn();

		void read(::String packet);
		::Dynamic read_dyn();

		void initArrived();
		::Dynamic initArrived_dyn();

		void playerColorArrived(::String user,::String color);
		::Dynamic playerColorArrived_dyn();

		void dieInfoArrived(Int side);
		::Dynamic dieInfoArrived_dyn();

		void playerLocationArrived(::String user,::String loc);
		::Dynamic playerLocationArrived_dyn();

		void playerDestinationArrived(::String user,::String dest);
		::Dynamic playerDestinationArrived_dyn();

		void playerArrived();
		::Dynamic playerArrived_dyn();

		void playerExperienceArrived(Int req,Int exp,Int lv);
		::Dynamic playerExperienceArrived_dyn();

		void clientLoop( ::openfl::events::Event e);
		::Dynamic clientLoop_dyn();

};


#endif /* INCLUDED_Connection */ 
